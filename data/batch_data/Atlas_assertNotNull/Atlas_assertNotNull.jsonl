{"focal": "getCreator ( ) { if ( ( creator ) == null ) { creator = new de . sstoehr . harreader . model . HarCreatorBrowser ( ) ; } return creator ; }", "testMethod": "testCreatorNull ( ) { de . sstoehr . harreader . model . HarLog log = new de . sstoehr . harreader . model . HarLog ( ) ; log . setCreator ( null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( log . getCreator ( ) )", "total": "testCreatorNull ( ) { de . sstoehr . harreader . model . HarLog log = new de . sstoehr . harreader . model . HarLog ( ) ; log . setCreator ( null ) ; \"<AssertPlaceHolder>\" ; } getCreator ( ) { if ( ( creator ) == null ) { creator = new de . sstoehr . harreader . model . HarCreatorBrowser ( ) ; } return creator ; }", "answer": "org . junit . Assert . assertNotNull ( log . getCreator ( ) )"}
{"focal": "findAll ( com . gentics . mesh . core . data . MeshAuthUser , java . util . List , com . gentics . mesh . parameter . PagingParameters ) { com . syncleus . ferma . traversals . VertexTraversal < ? , ? , ? > traversal = user . getPermTraversal ( com . gentics . mesh . core . data . root . impl . READ_PERM ) ; return new com . gentics . mesh . core . data . page . impl . DynamicTransformablePageImpl < com . gentics . mesh . core . data . node . Node > ( user , traversal , pagingInfo , READ_PERM , com . gentics . mesh . core . data . node . impl . NodeImpl . class ) ; }", "testMethod": "testFindAllVisible ( ) { try ( com . syncleus . ferma . tx . Tx tx = tx ( ) ) { com . gentics . mesh . core . data . page . Page < ? extends com . gentics . mesh . core . data . schema . SchemaContainer > page = meshRoot ( ) . getSchemaContainerRoot ( ) . findAll ( mockActionContext ( ) , new com . gentics . mesh . parameter . impl . PagingParametersImpl ( 1 , 25L ) ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( page )", "total": "testFindAllVisible ( ) { try ( com . syncleus . ferma . tx . Tx tx = tx ( ) ) { com . gentics . mesh . core . data . page . Page < ? extends com . gentics . mesh . core . data . schema . SchemaContainer > page = meshRoot ( ) . getSchemaContainerRoot ( ) . findAll ( mockActionContext ( ) , new com . gentics . mesh . parameter . impl . PagingParametersImpl ( 1 , 25L ) ) ; \"<AssertPlaceHolder>\" ; } } findAll ( com . gentics . mesh . core . data . MeshAuthUser , java . util . List , com . gentics . mesh . parameter . PagingParameters ) { com . syncleus . ferma . traversals . VertexTraversal < ? , ? , ? > traversal = user . getPermTraversal ( com . gentics . mesh . core . data . root . impl . READ_PERM ) ; return new com . gentics . mesh . core . data . page . impl . DynamicTransformablePageImpl < com . gentics . mesh . core . data . node . Node > ( user , traversal , pagingInfo , READ_PERM , com . gentics . mesh . core . data . node . impl . NodeImpl . class ) ; }", "answer": "org . junit . Assert . assertNotNull ( page )"}
{"focal": "setUpExperiment ( java . lang . String [ ] ) { org . eclipse . tracecompass . tmf . core . trace . ITmfTrace [ ] traces = new org . eclipse . tracecompass . tmf . core . trace . ITmfTrace [ traceFiles . length ] ; int i = 0 ; for ( java . lang . String traceFile : traceFiles ) { org . eclipse . tracecompass . analysis . os . linux . core . tests . stubs . trace . TmfXmlKernelTraceStub trace = new org . eclipse . tracecompass . analysis . os . linux . core . tests . stubs . trace . TmfXmlKernelTraceStub ( ) ; org . eclipse . core . runtime . IPath filePath = org . eclipse . tracecompass . lttng2 . kernel . core . tests . Activator . getAbsoluteFilePath ( traceFile ) ; org . eclipse . core . runtime . IStatus status = trace . validate ( null , filePath . toOSString ( ) ) ; if ( ! ( status . isOK ( ) ) ) { org . junit . Assert . fail ( status . getException ( ) . getMessage ( ) ) ; } trace . initTrace ( null , filePath . toOSString ( ) , org . eclipse . tracecompass . tmf . core . event . ITmfEvent . class ) ; traces [ ( i ++ ) ] = trace ; } org . eclipse . tracecompass . tmf . core . trace . experiment . TmfExperiment experiment = new org . eclipse . tracecompass . tmf . core . trace . experiment . TmfExperiment ( org . eclipse . tracecompass . tmf . core . event . ITmfEvent . class , org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . EXPERIMENT , traces , org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . BLOCK_SIZE , null ) ; experiment . traceOpened ( new org . eclipse . tracecompass . tmf . core . signal . TmfTraceOpenedSignal ( this , experiment , null ) ) ; org . eclipse . tracecompass . tmf . core . analysis . IAnalysisModule module = null ; for ( org . eclipse . tracecompass . tmf . core . analysis . IAnalysisModule mod : org . eclipse . tracecompass . tmf . core . trace . TmfTraceUtils . getAnalysisModulesOfClass ( experiment , org . eclipse . tracecompass . analysis . graph . core . building . TmfGraphBuilderModule . class ) ) { module = mod ; } org . junit . Assert . assertNotNull ( module ) ; module . schedule ( ) ; org . junit . Assert . assertTrue ( module . waitForCompletion ( ) ) ; return experiment ; }", "testMethod": "testNetworkExchangeOneTrace ( ) { org . eclipse . tracecompass . tmf . core . trace . ITmfTrace experiment = setUpExperiment ( \"testfiles/graph/network_exchange_wifi.xml\" ) ; \"<AssertPlaceHolder>\" ; try { org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . internalTestNetworkExchangeOneTrace ( experiment ) ; } finally { experiment . dispose ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( experiment )", "total": "testNetworkExchangeOneTrace ( ) { org . eclipse . tracecompass . tmf . core . trace . ITmfTrace experiment = setUpExperiment ( \"testfiles/graph/network_exchange_wifi.xml\" ) ; \"<AssertPlaceHolder>\" ; try { org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . internalTestNetworkExchangeOneTrace ( experiment ) ; } finally { experiment . dispose ( ) ; } } setUpExperiment ( java . lang . String [ ] ) { org . eclipse . tracecompass . tmf . core . trace . ITmfTrace [ ] traces = new org . eclipse . tracecompass . tmf . core . trace . ITmfTrace [ traceFiles . length ] ; int i = 0 ; for ( java . lang . String traceFile : traceFiles ) { org . eclipse . tracecompass . analysis . os . linux . core . tests . stubs . trace . TmfXmlKernelTraceStub trace = new org . eclipse . tracecompass . analysis . os . linux . core . tests . stubs . trace . TmfXmlKernelTraceStub ( ) ; org . eclipse . core . runtime . IPath filePath = org . eclipse . tracecompass . lttng2 . kernel . core . tests . Activator . getAbsoluteFilePath ( traceFile ) ; org . eclipse . core . runtime . IStatus status = trace . validate ( null , filePath . toOSString ( ) ) ; if ( ! ( status . isOK ( ) ) ) { org . junit . Assert . fail ( status . getException ( ) . getMessage ( ) ) ; } trace . initTrace ( null , filePath . toOSString ( ) , org . eclipse . tracecompass . tmf . core . event . ITmfEvent . class ) ; traces [ ( i ++ ) ] = trace ; } org . eclipse . tracecompass . tmf . core . trace . experiment . TmfExperiment experiment = new org . eclipse . tracecompass . tmf . core . trace . experiment . TmfExperiment ( org . eclipse . tracecompass . tmf . core . event . ITmfEvent . class , org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . EXPERIMENT , traces , org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . BLOCK_SIZE , null ) ; experiment . traceOpened ( new org . eclipse . tracecompass . tmf . core . signal . TmfTraceOpenedSignal ( this , experiment , null ) ) ; org . eclipse . tracecompass . tmf . core . analysis . IAnalysisModule module = null ; for ( org . eclipse . tracecompass . tmf . core . analysis . IAnalysisModule mod : org . eclipse . tracecompass . tmf . core . trace . TmfTraceUtils . getAnalysisModulesOfClass ( experiment , org . eclipse . tracecompass . analysis . graph . core . building . TmfGraphBuilderModule . class ) ) { module = mod ; } org . junit . Assert . assertNotNull ( module ) ; module . schedule ( ) ; org . junit . Assert . assertTrue ( module . waitForCompletion ( ) ) ; return experiment ; }", "answer": "org . junit . Assert . assertNotNull ( experiment )"}
{"focal": "getLogManager ( ) { return logManager ; }", "testMethod": "testLogManagerCreation ( ) { org . jsoar . kernel . LogManager logManager = agent . getLogManager ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( logManager )", "total": "testLogManagerCreation ( ) { org . jsoar . kernel . LogManager logManager = agent . getLogManager ( ) ; \"<AssertPlaceHolder>\" ; } getLogManager ( ) { return logManager ; }", "answer": "org . junit . Assert . assertNotNull ( logManager )"}
{"focal": "findWaitingListsAndDemographics ( java . lang . Integer ) { javax . persistence . Query query = entityManager . createQuery ( \"FROM<sp>WaitingList<sp>w,<sp>Demographic<sp>d<sp>WHERE<sp>w.demographicNo<sp>=<sp>d.DemographicNo<sp>AND<sp>w.listId<sp>=<sp>:listId<sp>AND<sp>w.isHistory<sp>=<sp>'N'<sp>ORDER<sp>BY<sp>w.position\" ) ; query . setParameter ( \"listId\" , listId ) ; return query . getResultList ( ) ; }", "testMethod": "testFindWaitingListsAndDemographics ( ) { java . util . List < java . lang . Object [ ] > results = dao . findWaitingListsAndDemographics ( 1 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( results )", "total": "testFindWaitingListsAndDemographics ( ) { java . util . List < java . lang . Object [ ] > results = dao . findWaitingListsAndDemographics ( 1 ) ; \"<AssertPlaceHolder>\" ; } findWaitingListsAndDemographics ( java . lang . Integer ) { javax . persistence . Query query = entityManager . createQuery ( \"FROM<sp>WaitingList<sp>w,<sp>Demographic<sp>d<sp>WHERE<sp>w.demographicNo<sp>=<sp>d.DemographicNo<sp>AND<sp>w.listId<sp>=<sp>:listId<sp>AND<sp>w.isHistory<sp>=<sp>'N'<sp>ORDER<sp>BY<sp>w.position\" ) ; query . setParameter ( \"listId\" , listId ) ; return query . getResultList ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( results )"}
{"focal": "initFieldNameStrategy ( ) { info . smart_tools . smartactors . ioc . ioc . IOC . register ( info . smart_tools . smartactors . ioc . ioc . IOC . resolve ( info . smart_tools . smartactors . ioc . ioc . IOC . getKeyForKeyStorage ( ) , \"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\" ) , new info . smart_tools . smartactors . ioc . resolve_by_name_ioc_with_lambda_strategy . ResolveByNameIocStrategy ( ( a ) -> { try { return new info . smart_tools . smartactors . iobject . field_name . FieldName ( ( ( java . lang . String ) ( a [ 0 ] ) ) ) ; } catch ( e ) { throw new java . lang . RuntimeException ( \"Could<sp>not<sp>create<sp>new<sp>instance<sp>of<sp>FieldName.\" ) ; } } ) ) ; }", "testMethod": "checkRefCntMethod ( ) { initFieldNameStrategy ( ) ; info . smart_tools . smartactors . iobject . iobject . IObject message = mock ( info . smart_tools . smartactors . iobject . iobject . IObject . class ) ; io . netty . handler . codec . http . FullHttpRequest request = new info . smart_tools . smartactors . testing . test_http_endpoint . TestFullHttpRequest ( message ) ; \"<AssertPlaceHolder>\" ; request . refCnt ( ) ; org . junit . Assert . fail ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( request )", "total": "checkRefCntMethod ( ) { initFieldNameStrategy ( ) ; info . smart_tools . smartactors . iobject . iobject . IObject message = mock ( info . smart_tools . smartactors . iobject . iobject . IObject . class ) ; io . netty . handler . codec . http . FullHttpRequest request = new info . smart_tools . smartactors . testing . test_http_endpoint . TestFullHttpRequest ( message ) ; \"<AssertPlaceHolder>\" ; request . refCnt ( ) ; org . junit . Assert . fail ( ) ; } initFieldNameStrategy ( ) { info . smart_tools . smartactors . ioc . ioc . IOC . register ( info . smart_tools . smartactors . ioc . ioc . IOC . resolve ( info . smart_tools . smartactors . ioc . ioc . IOC . getKeyForKeyStorage ( ) , \"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\" ) , new info . smart_tools . smartactors . ioc . resolve_by_name_ioc_with_lambda_strategy . ResolveByNameIocStrategy ( ( a ) -> { try { return new info . smart_tools . smartactors . iobject . field_name . FieldName ( ( ( java . lang . String ) ( a [ 0 ] ) ) ) ; } catch ( e ) { throw new java . lang . RuntimeException ( \"Could<sp>not<sp>create<sp>new<sp>instance<sp>of<sp>FieldName.\" ) ; } } ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( request )"}
{"focal": "getStylesSource ( ) { return this . stylesSource ; }", "testMethod": "testLoadSaveLoad ( ) { try ( org . apache . poi . xssf . usermodel . XSSFWorkbook workbook = org . apache . poi . xssf . XSSFTestDataSamples . openSampleWorkbook ( org . apache . poi . xssf . model . TestStylesTable . testFile ) ) { \"<AssertPlaceHolder>\" ; org . apache . poi . xssf . model . StylesTable st = workbook . getStylesSource ( ) ; doTestExisting ( st ) ; st = org . apache . poi . xssf . XSSFTestDataSamples . writeOutAndReadBack ( workbook ) . getStylesSource ( ) ; doTestExisting ( st ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( workbook . getStylesSource ( ) )", "total": "testLoadSaveLoad ( ) { try ( org . apache . poi . xssf . usermodel . XSSFWorkbook workbook = org . apache . poi . xssf . XSSFTestDataSamples . openSampleWorkbook ( org . apache . poi . xssf . model . TestStylesTable . testFile ) ) { \"<AssertPlaceHolder>\" ; org . apache . poi . xssf . model . StylesTable st = workbook . getStylesSource ( ) ; doTestExisting ( st ) ; st = org . apache . poi . xssf . XSSFTestDataSamples . writeOutAndReadBack ( workbook ) . getStylesSource ( ) ; doTestExisting ( st ) ; } } getStylesSource ( ) { return this . stylesSource ; }", "answer": "org . junit . Assert . assertNotNull ( workbook . getStylesSource ( ) )"}
{"focal": "saveAll ( java . lang . Iterable ) { org . springframework . util . Assert . notNull ( entities , \"Entities<sp>must<sp>not<sp>be<sp>null!\" ) ; return saveAll ( reactor . core . publisher . Flux . fromIterable ( entities ) ) ; }", "testMethod": "shouldSaveIterableEntities ( ) { java . lang . String documentId = randomNumeric ( 5 ) ; org . springframework . data . elasticsearch . entities . SampleEntity sampleEntity1 = new org . springframework . data . elasticsearch . entities . SampleEntity ( ) ; sampleEntity1 . setId ( documentId ) ; sampleEntity1 . setMessage ( \"hello<sp>world.\" ) ; sampleEntity1 . setVersion ( java . lang . System . currentTimeMillis ( ) ) ; java . lang . String documentId2 = randomNumeric ( 5 ) ; org . springframework . data . elasticsearch . entities . SampleEntity sampleEntity2 = new org . springframework . data . elasticsearch . entities . SampleEntity ( ) ; sampleEntity2 . setId ( documentId2 ) ; sampleEntity2 . setMessage ( \"hello<sp>world.\" ) ; sampleEntity2 . setVersion ( java . lang . System . currentTimeMillis ( ) ) ; java . lang . Iterable < org . springframework . data . elasticsearch . entities . SampleEntity > sampleEntities = java . util . Arrays . asList ( sampleEntity1 , sampleEntity2 ) ; repository . saveAll ( sampleEntities ) ; org . springframework . data . domain . Page < org . springframework . data . elasticsearch . entities . SampleEntity > entities = repository . search ( termQuery ( \"id\" , documentId ) , org . springframework . data . domain . PageRequest . of ( 0 , 50 ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entities )", "total": "shouldSaveIterableEntities ( ) { java . lang . String documentId = randomNumeric ( 5 ) ; org . springframework . data . elasticsearch . entities . SampleEntity sampleEntity1 = new org . springframework . data . elasticsearch . entities . SampleEntity ( ) ; sampleEntity1 . setId ( documentId ) ; sampleEntity1 . setMessage ( \"hello<sp>world.\" ) ; sampleEntity1 . setVersion ( java . lang . System . currentTimeMillis ( ) ) ; java . lang . String documentId2 = randomNumeric ( 5 ) ; org . springframework . data . elasticsearch . entities . SampleEntity sampleEntity2 = new org . springframework . data . elasticsearch . entities . SampleEntity ( ) ; sampleEntity2 . setId ( documentId2 ) ; sampleEntity2 . setMessage ( \"hello<sp>world.\" ) ; sampleEntity2 . setVersion ( java . lang . System . currentTimeMillis ( ) ) ; java . lang . Iterable < org . springframework . data . elasticsearch . entities . SampleEntity > sampleEntities = java . util . Arrays . asList ( sampleEntity1 , sampleEntity2 ) ; repository . saveAll ( sampleEntities ) ; org . springframework . data . domain . Page < org . springframework . data . elasticsearch . entities . SampleEntity > entities = repository . search ( termQuery ( \"id\" , documentId ) , org . springframework . data . domain . PageRequest . of ( 0 , 50 ) ) ; \"<AssertPlaceHolder>\" ; } saveAll ( java . lang . Iterable ) { org . springframework . util . Assert . notNull ( entities , \"Entities<sp>must<sp>not<sp>be<sp>null!\" ) ; return saveAll ( reactor . core . publisher . Flux . fromIterable ( entities ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( entities )"}
{"focal": "createClusterStatsRequestBuilder ( com . liferay . portal . search . engine . adapter . cluster . StatsClusterRequest ) { org . elasticsearch . action . admin . cluster . stats . ClusterStatsRequestBuilder clusterStatsRequestBuilder = ClusterStatsAction . INSTANCE . newRequestBuilder ( _elasticsearchClientResolver . getClient ( ) ) ; return clusterStatsRequestBuilder ; }", "testMethod": "testClusterRequestTranslation ( ) { com . liferay . portal . search . engine . adapter . cluster . StatsClusterRequest statsClusterRequest = new com . liferay . portal . search . engine . adapter . cluster . StatsClusterRequest ( new java . lang . String [ ] { com . liferay . portal . search . elasticsearch6 . internal . search . engine . adapter . cluster . StatsClusterRequestExecutorTest . _INDEX_NAME } ) ; com . liferay . portal . search . elasticsearch6 . internal . search . engine . adapter . cluster . StatsClusterRequestExecutorImpl statsClusterRequestExecutorImpl = new com . liferay . portal . search . elasticsearch6 . internal . search . engine . adapter . cluster . StatsClusterRequestExecutorImpl ( ) { { setElasticsearchClientResolver ( _elasticsearchFixture ) ; } } ; org . elasticsearch . action . admin . cluster . stats . ClusterStatsRequestBuilder clusterStatsRequestBuilder = statsClusterRequestExecutorImpl . createClusterStatsRequestBuilder ( statsClusterRequest ) ; org . elasticsearch . action . admin . cluster . stats . ClusterStatsRequest clusterStatsRequest = clusterStatsRequestBuilder . request ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( clusterStatsRequest )", "total": "testClusterRequestTranslation ( ) { com . liferay . portal . search . engine . adapter . cluster . StatsClusterRequest statsClusterRequest = new com . liferay . portal . search . engine . adapter . cluster . StatsClusterRequest ( new java . lang . String [ ] { com . liferay . portal . search . elasticsearch6 . internal . search . engine . adapter . cluster . StatsClusterRequestExecutorTest . _INDEX_NAME } ) ; com . liferay . portal . search . elasticsearch6 . internal . search . engine . adapter . cluster . StatsClusterRequestExecutorImpl statsClusterRequestExecutorImpl = new com . liferay . portal . search . elasticsearch6 . internal . search . engine . adapter . cluster . StatsClusterRequestExecutorImpl ( ) { { setElasticsearchClientResolver ( _elasticsearchFixture ) ; } } ; org . elasticsearch . action . admin . cluster . stats . ClusterStatsRequestBuilder clusterStatsRequestBuilder = statsClusterRequestExecutorImpl . createClusterStatsRequestBuilder ( statsClusterRequest ) ; org . elasticsearch . action . admin . cluster . stats . ClusterStatsRequest clusterStatsRequest = clusterStatsRequestBuilder . request ( ) ; \"<AssertPlaceHolder>\" ; } createClusterStatsRequestBuilder ( com . liferay . portal . search . engine . adapter . cluster . StatsClusterRequest ) { org . elasticsearch . action . admin . cluster . stats . ClusterStatsRequestBuilder clusterStatsRequestBuilder = ClusterStatsAction . INSTANCE . newRequestBuilder ( _elasticsearchClientResolver . getClient ( ) ) ; return clusterStatsRequestBuilder ; }", "answer": "org . junit . Assert . assertNotNull ( clusterStatsRequest )"}
{"focal": "getResourceWithAbsolutePackagePath ( java . lang . Class , java . lang . String , java . lang . String ) { checkNotNull ( clazz , \"clazz<sp>cannot<sp>be<sp>null\" ) ; java . lang . String resourcePath = org . reficio . ws . common . ResourceUtils . getResourcePath ( absolutePackagePath , resourceName ) ; java . net . URL resource = null ; resource = clazz . getClass ( ) . getResource ( resourcePath ) ; if ( resource == null ) { if ( ( resourcePath . charAt ( 0 ) ) == '/' ) { java . lang . String resourcePathWithoutLeadingSlash = resourcePath . substring ( 1 ) ; resource = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( resourcePathWithoutLeadingSlash ) ; } } checkArgument ( ( resource != null ) , java . lang . String . format ( \"Resource<sp>[%s]<sp>loading<sp>failed\" , resourcePath ) ) ; return resource ; }", "testMethod": "testResourceLoading_whiteSpaces ( ) { java . net . URL url = org . reficio . ws . common . ResourceUtils . getResourceWithAbsolutePackagePath ( org . reficio . ws . common . System . class , \"<sp>/org/reficio/ws/common/test<sp>\" , \"soapEncoding.xsd\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( url )", "total": "testResourceLoading_whiteSpaces ( ) { java . net . URL url = org . reficio . ws . common . ResourceUtils . getResourceWithAbsolutePackagePath ( org . reficio . ws . common . System . class , \"<sp>/org/reficio/ws/common/test<sp>\" , \"soapEncoding.xsd\" ) ; \"<AssertPlaceHolder>\" ; } getResourceWithAbsolutePackagePath ( java . lang . Class , java . lang . String , java . lang . String ) { checkNotNull ( clazz , \"clazz<sp>cannot<sp>be<sp>null\" ) ; java . lang . String resourcePath = org . reficio . ws . common . ResourceUtils . getResourcePath ( absolutePackagePath , resourceName ) ; java . net . URL resource = null ; resource = clazz . getClass ( ) . getResource ( resourcePath ) ; if ( resource == null ) { if ( ( resourcePath . charAt ( 0 ) ) == '/' ) { java . lang . String resourcePathWithoutLeadingSlash = resourcePath . substring ( 1 ) ; resource = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( resourcePathWithoutLeadingSlash ) ; } } checkArgument ( ( resource != null ) , java . lang . String . format ( \"Resource<sp>[%s]<sp>loading<sp>failed\" , resourcePath ) ) ; return resource ; }", "answer": "org . junit . Assert . assertNotNull ( url )"}
{"focal": "getCards ( ) { return cards ; }", "testMethod": "testGetAllSetsWithCards ( ) { java . util . List < io . magicthegathering . javasdk . resource . MtgSet > sets = io . magicthegathering . javasdk . api . SetAPI . getAllSetsWithCards ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( sets . get ( 0 ) . getCards ( ) )", "total": "testGetAllSetsWithCards ( ) { java . util . List < io . magicthegathering . javasdk . resource . MtgSet > sets = io . magicthegathering . javasdk . api . SetAPI . getAllSetsWithCards ( ) ; \"<AssertPlaceHolder>\" ; } getCards ( ) { return cards ; }", "answer": "org . junit . Assert . assertNotNull ( sets . get ( 0 ) . getCards ( ) )"}
{"focal": "getCurrentPID ( ) { org . junit . Assert . assertNotNull ( com . aliyuncs . utils . LogUtils . getCurrentPID ( ) ) ; }", "testMethod": "getCurrentPID ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . aliyuncs . utils . LogUtils . getCurrentPID ( ) )", "total": "getCurrentPID ( ) { \"<AssertPlaceHolder>\" ; } getCurrentPID ( ) { org . junit . Assert . assertNotNull ( com . aliyuncs . utils . LogUtils . getCurrentPID ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( com . aliyuncs . utils . LogUtils . getCurrentPID ( ) )"}
{"focal": "success ( ) { successCalled = true ; transaction . success ( ) ; }", "testMethod": "deletionOfSameRelationshipTwiceInOneTransactionShouldNotRollbackIt ( ) { org . neo4j . graphdb . GraphDatabaseService db = getGraphDb ( ) ; org . neo4j . graphdb . Node node1 = db . createNode ( ) ; org . neo4j . graphdb . Node node2 = db . createNode ( ) ; org . neo4j . graphdb . Relationship relationship = node1 . createRelationshipTo ( node2 , org . neo4j . kernel . impl . MyRelTypes . TEST ) ; commit ( ) ; java . lang . Exception exceptionThrownBySecondDelete = null ; try ( org . neo4j . graphdb . Transaction tx = db . beginTx ( ) ) { relationship . delete ( ) ; try { relationship . delete ( ) ; } catch ( java . lang . IllegalStateException e ) { exceptionThrownBySecondDelete = e ; } tx . success ( ) ; } \"<AssertPlaceHolder>\" ; try ( org . neo4j . graphdb . Transaction tx = db . beginTx ( ) ) { db . getRelationshipById ( relationship . getId ( ) ) ; tx . success ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( exceptionThrownBySecondDelete )", "total": "deletionOfSameRelationshipTwiceInOneTransactionShouldNotRollbackIt ( ) { org . neo4j . graphdb . GraphDatabaseService db = getGraphDb ( ) ; org . neo4j . graphdb . Node node1 = db . createNode ( ) ; org . neo4j . graphdb . Node node2 = db . createNode ( ) ; org . neo4j . graphdb . Relationship relationship = node1 . createRelationshipTo ( node2 , org . neo4j . kernel . impl . MyRelTypes . TEST ) ; commit ( ) ; java . lang . Exception exceptionThrownBySecondDelete = null ; try ( org . neo4j . graphdb . Transaction tx = db . beginTx ( ) ) { relationship . delete ( ) ; try { relationship . delete ( ) ; } catch ( java . lang . IllegalStateException e ) { exceptionThrownBySecondDelete = e ; } tx . success ( ) ; } \"<AssertPlaceHolder>\" ; try ( org . neo4j . graphdb . Transaction tx = db . beginTx ( ) ) { db . getRelationshipById ( relationship . getId ( ) ) ; tx . success ( ) ; } } success ( ) { successCalled = true ; transaction . success ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( exceptionThrownBySecondDelete )"}
{"focal": "crea ( mx . edu . um . mateo . contabilidad . model . CuentaMayor ) { return crea ( cuentaMayor , null ) ; }", "testMethod": "debieraEliminarEstado ( ) { log . debug ( \"Debiera<sp>eliminar<sp>Estado\" ) ; mx . edu . um . mateo . colportor . model . Estado estado = new mx . edu . um . mateo . colportor . model . Estado ( \"test\" ) ; estadoDao . crea ( estado ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( post ( Constantes . PATH_ESTADO_ELIMINA ) . param ( \"id\" , estado . getId ( ) . toString ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( flash ( ) . attributeExists ( Constantes . CONTAINSKEY_MESSAGE ) ) . andExpect ( flash ( ) . attribute ( Constantes . CONTAINSKEY_MESSAGE , \"estado.eliminada.message\" ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( estado )", "total": "debieraEliminarEstado ( ) { log . debug ( \"Debiera<sp>eliminar<sp>Estado\" ) ; mx . edu . um . mateo . colportor . model . Estado estado = new mx . edu . um . mateo . colportor . model . Estado ( \"test\" ) ; estadoDao . crea ( estado ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( post ( Constantes . PATH_ESTADO_ELIMINA ) . param ( \"id\" , estado . getId ( ) . toString ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( flash ( ) . attributeExists ( Constantes . CONTAINSKEY_MESSAGE ) ) . andExpect ( flash ( ) . attribute ( Constantes . CONTAINSKEY_MESSAGE , \"estado.eliminada.message\" ) ) ; } crea ( mx . edu . um . mateo . contabilidad . model . CuentaMayor ) { return crea ( cuentaMayor , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( estado )"}
{"focal": "compress ( org . hillview . table . IRowOrder ) { return this . compress ( this . getSchema ( ) , rowOrder ) ; }", "testMethod": "columnCompressTest ( ) { final int size = 100 ; final org . hillview . table . columns . IntArrayColumn col = org . hillview . utils . IntArrayGenerator . getMissingIntArray ( \"X\" , size , 5 ) ; final org . hillview . table . membership . FullMembershipSet FM = new org . hillview . table . membership . FullMembershipSet ( size ) ; final org . hillview . table . api . IMembershipSet PMD = FM . filter ( ( row ) -> ( row % 2 ) == 0 ) ; final org . hillview . table . api . IColumn smallCol = col . compress ( PMD ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( smallCol )", "total": "columnCompressTest ( ) { final int size = 100 ; final org . hillview . table . columns . IntArrayColumn col = org . hillview . utils . IntArrayGenerator . getMissingIntArray ( \"X\" , size , 5 ) ; final org . hillview . table . membership . FullMembershipSet FM = new org . hillview . table . membership . FullMembershipSet ( size ) ; final org . hillview . table . api . IMembershipSet PMD = FM . filter ( ( row ) -> ( row % 2 ) == 0 ) ; final org . hillview . table . api . IColumn smallCol = col . compress ( PMD ) ; \"<AssertPlaceHolder>\" ; } compress ( org . hillview . table . IRowOrder ) { return this . compress ( this . getSchema ( ) , rowOrder ) ; }", "answer": "org . junit . Assert . assertNotNull ( smallCol )"}
{"focal": "getInputStream ( ) { java . net . URL url = this . getUrl ( ) ; if ( isJarURL ( url ) ) { try { url = extractActualUrl ( url ) ; java . util . zip . ZipFile zipFile = new java . util . zip . ZipFile ( url . getFile ( ) ) ; java . util . zip . ZipEntry entry = zipFile . getEntry ( this . resourceName ) ; org . nd4j . linalg . util . InputStream stream = zipFile . getInputStream ( entry ) ; return stream ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( e ) ; } } else { org . nd4j . linalg . util . File srcFile = this . getFile ( ) ; return new org . nd4j . linalg . util . FileInputStream ( srcFile ) ; } }", "testMethod": "testCrash_119_transpose ( ) { org . nd4j . linalg . factory . Nd4j . create ( 1 ) ; lombok . val tg = org . nd4j . imports . graphmapper . tf . TFGraphMapper . getInstance ( ) . importGraph ( new org . nd4j . linalg . io . ClassPathResource ( \"tf_graphs/examples/transpose/frozen_model.pb\" ) . getInputStream ( ) ) ; \"<AssertPlaceHolder>\" ; lombok . val input0 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0.98114507 , 0.96400015 , 0.58669623 , 0.60073098 , 0.75425418 , 0.44258752 , 0.76373084 , 0.96593234 , 0.34067846 } , new int [ ] { 3 , 3 } ) ; lombok . val input1 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0.98114507 , 0.60073098 , 0.76373084 , 0.96400015 , 0.75425418 , 0.96593234 , 0.58669623 , 0.44258752 , 0.34067846 } , new int [ ] { 3 , 3 } ) ; tg . associateArrayWithVariable ( input0 , tg . getVariable ( \"input\" ) ) ; tg . associateArrayWithVariable ( input1 , tg . getVariable ( \"input_1\" ) ) ; tg . asFlatFile ( new java . io . File ( \"../../../libnd4j/tests_cpu/resources/transpose.fb\" ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( tg )", "total": "testCrash_119_transpose ( ) { org . nd4j . linalg . factory . Nd4j . create ( 1 ) ; lombok . val tg = org . nd4j . imports . graphmapper . tf . TFGraphMapper . getInstance ( ) . importGraph ( new org . nd4j . linalg . io . ClassPathResource ( \"tf_graphs/examples/transpose/frozen_model.pb\" ) . getInputStream ( ) ) ; \"<AssertPlaceHolder>\" ; lombok . val input0 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0.98114507 , 0.96400015 , 0.58669623 , 0.60073098 , 0.75425418 , 0.44258752 , 0.76373084 , 0.96593234 , 0.34067846 } , new int [ ] { 3 , 3 } ) ; lombok . val input1 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0.98114507 , 0.60073098 , 0.76373084 , 0.96400015 , 0.75425418 , 0.96593234 , 0.58669623 , 0.44258752 , 0.34067846 } , new int [ ] { 3 , 3 } ) ; tg . associateArrayWithVariable ( input0 , tg . getVariable ( \"input\" ) ) ; tg . associateArrayWithVariable ( input1 , tg . getVariable ( \"input_1\" ) ) ; tg . asFlatFile ( new java . io . File ( \"../../../libnd4j/tests_cpu/resources/transpose.fb\" ) ) ; } getInputStream ( ) { java . net . URL url = this . getUrl ( ) ; if ( isJarURL ( url ) ) { try { url = extractActualUrl ( url ) ; java . util . zip . ZipFile zipFile = new java . util . zip . ZipFile ( url . getFile ( ) ) ; java . util . zip . ZipEntry entry = zipFile . getEntry ( this . resourceName ) ; org . nd4j . linalg . util . InputStream stream = zipFile . getInputStream ( entry ) ; return stream ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( e ) ; } } else { org . nd4j . linalg . util . File srcFile = this . getFile ( ) ; return new org . nd4j . linalg . util . FileInputStream ( srcFile ) ; } }", "answer": "org . junit . Assert . assertNotNull ( tg )"}
{"focal": "getRawOperatorStateOutput ( ) { if ( null == ( operatorStateCheckpointOutputStream ) ) { operatorStateCheckpointOutputStream = new org . apache . flink . runtime . state . OperatorStateCheckpointOutputStream ( openAndRegisterNewStream ( ) ) ; } return operatorStateCheckpointOutputStream ; }", "testMethod": "testCreateRawOperatorStateOutput ( ) { org . apache . flink . runtime . state . OperatorStateCheckpointOutputStream stream = snapshotContext . getRawOperatorStateOutput ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( stream )", "total": "testCreateRawOperatorStateOutput ( ) { org . apache . flink . runtime . state . OperatorStateCheckpointOutputStream stream = snapshotContext . getRawOperatorStateOutput ( ) ; \"<AssertPlaceHolder>\" ; } getRawOperatorStateOutput ( ) { if ( null == ( operatorStateCheckpointOutputStream ) ) { operatorStateCheckpointOutputStream = new org . apache . flink . runtime . state . OperatorStateCheckpointOutputStream ( openAndRegisterNewStream ( ) ) ; } return operatorStateCheckpointOutputStream ; }", "answer": "org . junit . Assert . assertNotNull ( stream )"}
{"focal": "expectedMessageCount ( int ) { setExpectedMessageCount ( expectedCount ) ; }", "testMethod": "testUTF16BEURL ( ) { getMockEndpoint ( \"mock:authors\" ) . expectedMessageCount ( 1 ) ; java . net . URL url = new java . net . URL ( \"file:src/test/resources/booksUTF16BE.json\" ) ; \"<AssertPlaceHolder>\" ; sendBody ( \"direct:start\" , url ) ; check ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( url )", "total": "testUTF16BEURL ( ) { getMockEndpoint ( \"mock:authors\" ) . expectedMessageCount ( 1 ) ; java . net . URL url = new java . net . URL ( \"file:src/test/resources/booksUTF16BE.json\" ) ; \"<AssertPlaceHolder>\" ; sendBody ( \"direct:start\" , url ) ; check ( ) ; } expectedMessageCount ( int ) { setExpectedMessageCount ( expectedCount ) ; }", "answer": "org . junit . Assert . assertNotNull ( url )"}
{"focal": "query ( com . rhythm . louie . services . sql . SqlStatementPB ) { try ( com . rhythm . louie . jdbc . JdbcService jdbc = jdbcFactory . newService ( statement . getSql ( ) ) ) { boolean b = jdbc . execute ( ) ; if ( ! b ) { com . rhythm . louie . services . sql . SqlResultPB . Builder header = com . rhythm . louie . services . sql . SqlResultPB . newBuilder ( ) ; header . addColumnsBuilder ( ) . setValue ( com . google . protobuf . ByteString . copyFromUtf8 ( java . lang . Integer . toString ( jdbc . getUpdateCount ( ) ) ) ) ; return java . util . Collections . singletonList ( header . build ( ) ) ; } java . sql . ResultSet rst = jdbc . getResultSet ( ) ; java . sql . ResultSetMetaData meta = rst . getMetaData ( ) ; int columns = meta . getColumnCount ( ) ; java . util . List < com . rhythm . louie . services . sql . SqlResultPB > results = new java . util . ArrayList ( ) ; com . rhythm . louie . services . sql . SqlResultPB . Builder header = com . rhythm . louie . services . sql . SqlResultPB . newBuilder ( ) ; for ( int i = 1 ; i <= columns ; i ++ ) { header . addColumnsBuilder ( ) . setType ( meta . getColumnType ( i ) ) . setValue ( com . google . protobuf . ByteString . copyFromUtf8 ( meta . getColumnLabel ( i ) ) ) ; } results . add ( header . build ( ) ) ; while ( rst . next ( ) ) { com . rhythm . louie . services . sql . SqlResultPB . Builder row = com . rhythm . louie . services . sql . SqlResultPB . newBuilder ( ) ; for ( int i = 1 ; i <= columns ; i ++ ) { com . rhythm . louie . services . sql . SqlColumnPB . Builder column = row . addColumnsBuilder ( ) ; byte [ ] bytes = rst . getBytes ( i ) ; if ( ( bytes != null ) && ( ( bytes . length ) > 0 ) ) { column . setValue ( com . google . protobuf . ByteString . copyFrom ( bytes ) ) ; } } results . add ( row . build ( ) ) ; } return results ; } }", "testMethod": "updateTest ( ) { com . rhythm . louie . services . sql . SqlStatementPB statement = com . rhythm . louie . services . sql . SqlStatementPB . newBuilder ( ) . setSql ( \"UPDATE<sp>content<sp>set<sp>state='A'<sp>where<sp>id=1\" ) . build ( ) ; java . util . List < com . rhythm . louie . services . sql . SqlResultPB > response = com . rhythm . louie . services . sql . SqlTest . client . query ( statement ) ; System . out . println ( response ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "updateTest ( ) { com . rhythm . louie . services . sql . SqlStatementPB statement = com . rhythm . louie . services . sql . SqlStatementPB . newBuilder ( ) . setSql ( \"UPDATE<sp>content<sp>set<sp>state='A'<sp>where<sp>id=1\" ) . build ( ) ; java . util . List < com . rhythm . louie . services . sql . SqlResultPB > response = com . rhythm . louie . services . sql . SqlTest . client . query ( statement ) ; System . out . println ( response ) ; \"<AssertPlaceHolder>\" ; } query ( com . rhythm . louie . services . sql . SqlStatementPB ) { try ( com . rhythm . louie . jdbc . JdbcService jdbc = jdbcFactory . newService ( statement . getSql ( ) ) ) { boolean b = jdbc . execute ( ) ; if ( ! b ) { com . rhythm . louie . services . sql . SqlResultPB . Builder header = com . rhythm . louie . services . sql . SqlResultPB . newBuilder ( ) ; header . addColumnsBuilder ( ) . setValue ( com . google . protobuf . ByteString . copyFromUtf8 ( java . lang . Integer . toString ( jdbc . getUpdateCount ( ) ) ) ) ; return java . util . Collections . singletonList ( header . build ( ) ) ; } java . sql . ResultSet rst = jdbc . getResultSet ( ) ; java . sql . ResultSetMetaData meta = rst . getMetaData ( ) ; int columns = meta . getColumnCount ( ) ; java . util . List < com . rhythm . louie . services . sql . SqlResultPB > results = new java . util . ArrayList ( ) ; com . rhythm . louie . services . sql . SqlResultPB . Builder header = com . rhythm . louie . services . sql . SqlResultPB . newBuilder ( ) ; for ( int i = 1 ; i <= columns ; i ++ ) { header . addColumnsBuilder ( ) . setType ( meta . getColumnType ( i ) ) . setValue ( com . google . protobuf . ByteString . copyFromUtf8 ( meta . getColumnLabel ( i ) ) ) ; } results . add ( header . build ( ) ) ; while ( rst . next ( ) ) { com . rhythm . louie . services . sql . SqlResultPB . Builder row = com . rhythm . louie . services . sql . SqlResultPB . newBuilder ( ) ; for ( int i = 1 ; i <= columns ; i ++ ) { com . rhythm . louie . services . sql . SqlColumnPB . Builder column = row . addColumnsBuilder ( ) ; byte [ ] bytes = rst . getBytes ( i ) ; if ( ( bytes != null ) && ( ( bytes . length ) > 0 ) ) { column . setValue ( com . google . protobuf . ByteString . copyFrom ( bytes ) ) ; } } results . add ( row . build ( ) ) ; } return results ; } }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "getConverter ( java . lang . String ) { return converters . get ( via ) ; }", "testMethod": "findFromDOCXToPDFViaITextConverter ( ) { try { fr . opensagres . xdocreport . converter . Options o = fr . opensagres . xdocreport . converter . Options . getFrom ( DocumentKind . DOCX ) . to ( ConverterTypeTo . PDF ) . via ( ConverterTypeVia . XWPF ) ; fr . opensagres . xdocreport . converter . IConverter converter = fr . opensagres . xdocreport . converter . ConverterRegistry . getRegistry ( ) . getConverter ( o ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( converter )", "total": "findFromDOCXToPDFViaITextConverter ( ) { try { fr . opensagres . xdocreport . converter . Options o = fr . opensagres . xdocreport . converter . Options . getFrom ( DocumentKind . DOCX ) . to ( ConverterTypeTo . PDF ) . via ( ConverterTypeVia . XWPF ) ; fr . opensagres . xdocreport . converter . IConverter converter = fr . opensagres . xdocreport . converter . ConverterRegistry . getRegistry ( ) . getConverter ( o ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } } getConverter ( java . lang . String ) { return converters . get ( via ) ; }", "answer": "org . junit . Assert . assertNotNull ( converter )"}
{"focal": "getNode ( java . lang . String ) { return session ( ) . getNode ( string ) ; }", "testMethod": "shouldNotImportInitialContentIfWorkspaceContentsChanged ( ) { startRunStop ( ( repository ) -> { javax . jcr . Session ws1Session = repository . login ( ) ; javax . jcr . Node node = ws1Session . getNode ( \"/a\" ) ; \"<AssertPlaceHolder>\" ; node . remove ( ) ; ws1Session . getRootNode ( ) . addNode ( \"testNode\" ) ; ws1Session . save ( ) ; } , true , false ) ; startRunStop ( ( repository ) -> { javax . jcr . Session ws1Session = repository . login ( ) ; try { ws1Session . getNode ( \"/a\" ) ; org . junit . Assert . fail ( \"The<sp>initial<sp>content<sp>should<sp>be<sp>be<sp>re-imported<sp>if<sp>a<sp>workspace<sp>is<sp>not<sp>empty\" ) ; } catch ( javax . jcr . PathNotFoundException e ) { } ws1Session . getNode ( \"/testNode\" ) ; } , false , true ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( node )", "total": "shouldNotImportInitialContentIfWorkspaceContentsChanged ( ) { startRunStop ( ( repository ) -> { javax . jcr . Session ws1Session = repository . login ( ) ; javax . jcr . Node node = ws1Session . getNode ( \"/a\" ) ; \"<AssertPlaceHolder>\" ; node . remove ( ) ; ws1Session . getRootNode ( ) . addNode ( \"testNode\" ) ; ws1Session . save ( ) ; } , true , false ) ; startRunStop ( ( repository ) -> { javax . jcr . Session ws1Session = repository . login ( ) ; try { ws1Session . getNode ( \"/a\" ) ; org . junit . Assert . fail ( \"The<sp>initial<sp>content<sp>should<sp>be<sp>be<sp>re-imported<sp>if<sp>a<sp>workspace<sp>is<sp>not<sp>empty\" ) ; } catch ( javax . jcr . PathNotFoundException e ) { } ws1Session . getNode ( \"/testNode\" ) ; } , false , true ) ; } getNode ( java . lang . String ) { return session ( ) . getNode ( string ) ; }", "answer": "org . junit . Assert . assertNotNull ( node )"}
{"focal": "getSubject ( ) { return subjectSupplier . get ( ) ; }", "testMethod": "testLogin ( ) { org . sonatype . nexus . security . SecuritySystem securitySystem = this . getSecuritySystem ( ) ; org . apache . shiro . authc . UsernamePasswordToken token = new org . apache . shiro . authc . UsernamePasswordToken ( \"jcoder\" , \"jcoder\" ) ; org . apache . shiro . subject . Subject subject = securitySystem . getSubject ( ) ; \"<AssertPlaceHolder>\" ; subject . login ( token ) ; try { subject . login ( new org . apache . shiro . authc . UsernamePasswordToken ( \"jcoder\" , \"INVALID\" ) ) ; org . junit . Assert . fail ( \"expected<sp>AuthenticationException\" ) ; } catch ( org . apache . shiro . authc . AuthenticationException e ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( subject )", "total": "testLogin ( ) { org . sonatype . nexus . security . SecuritySystem securitySystem = this . getSecuritySystem ( ) ; org . apache . shiro . authc . UsernamePasswordToken token = new org . apache . shiro . authc . UsernamePasswordToken ( \"jcoder\" , \"jcoder\" ) ; org . apache . shiro . subject . Subject subject = securitySystem . getSubject ( ) ; \"<AssertPlaceHolder>\" ; subject . login ( token ) ; try { subject . login ( new org . apache . shiro . authc . UsernamePasswordToken ( \"jcoder\" , \"INVALID\" ) ) ; org . junit . Assert . fail ( \"expected<sp>AuthenticationException\" ) ; } catch ( org . apache . shiro . authc . AuthenticationException e ) { } } getSubject ( ) { return subjectSupplier . get ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( subject )"}
{"focal": "getExpiryDate ( ) { return cookieExpiryDate ; }", "testMethod": "testParseMaxNegative ( ) { final org . apache . hc . client5 . http . impl . cookie . BasicClientCookie cookie = new org . apache . hc . client5 . http . impl . cookie . BasicClientCookie ( \"name\" , \"value\" ) ; final org . apache . hc . client5 . http . cookie . CookieAttributeHandler h = new org . apache . hc . client5 . http . impl . cookie . LaxMaxAgeHandler ( ) ; h . parse ( cookie , \"-2000\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( cookie . getExpiryDate ( ) )", "total": "testParseMaxNegative ( ) { final org . apache . hc . client5 . http . impl . cookie . BasicClientCookie cookie = new org . apache . hc . client5 . http . impl . cookie . BasicClientCookie ( \"name\" , \"value\" ) ; final org . apache . hc . client5 . http . cookie . CookieAttributeHandler h = new org . apache . hc . client5 . http . impl . cookie . LaxMaxAgeHandler ( ) ; h . parse ( cookie , \"-2000\" ) ; \"<AssertPlaceHolder>\" ; } getExpiryDate ( ) { return cookieExpiryDate ; }", "answer": "org . junit . Assert . assertNotNull ( cookie . getExpiryDate ( ) )"}
{"focal": "findByAttributeCode ( java . lang . String ) { final org . yes . cart . domain . entity . Attribute attribute = ( ( org . yes . cart . service . domain . AttributeService ) ( service ) ) . findByAttributeCode ( attributeCode ) ; return fillDTO ( attribute ) ; }", "testMethod": "testFindByAttributeCode ( ) { org . yes . cart . domain . entity . Attribute attrs = attributeService . findByAttributeCode ( AttributeNamesKeys . Customer . CUSTOMER_PHONE ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( attrs )", "total": "testFindByAttributeCode ( ) { org . yes . cart . domain . entity . Attribute attrs = attributeService . findByAttributeCode ( AttributeNamesKeys . Customer . CUSTOMER_PHONE ) ; \"<AssertPlaceHolder>\" ; } findByAttributeCode ( java . lang . String ) { final org . yes . cart . domain . entity . Attribute attribute = ( ( org . yes . cart . service . domain . AttributeService ) ( service ) ) . findByAttributeCode ( attributeCode ) ; return fillDTO ( attribute ) ; }", "answer": "org . junit . Assert . assertNotNull ( attrs )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testElimina ( ) { log . debug ( \"Debiera<sp>eliminar<sp>una<sp>Orden<sp>de<sp>Pago<sp>\" ) ; mx . edu . um . mateo . contabilidad . web . Usuario usuario = this . obtieneUsuario ( ) ; this . authenticate ( usuario , usuario . getPassword ( ) , new java . util . ArrayList < org . springframework . security . core . GrantedAuthority > ( usuario . getRoles ( ) ) ) ; mx . edu . um . mateo . contabilidad . model . OrdenPago orden = new mx . edu . um . mateo . contabilidad . model . OrdenPago ( \"TEST\" , true , new java . util . Date ( ) , usuario . getEmpresa ( ) , mx . edu . um . mateo . general . utils . Constantes . STATUS_ACTIVO , usuario , new java . util . Date ( ) , mx . edu . um . mateo . general . utils . Constantes . STATUS_ACTIVO ) ; currentSession ( ) . save ( orden ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( post ( Constantes . ORDENPAGO_PATH_ELIMINA ) . param ( \"id\" , orden . getId ( ) . toString ( ) ) ) . andExpect ( flash ( ) . attributeExists ( \"message\" ) ) . andExpect ( flash ( ) . attribute ( \"message\" , \"ordenPago.elimina.message\" ) ) . andExpect ( redirectedUrl ( Constantes . ORDENPAGO_PATH ) ) ; orden = instance . obtiene ( orden . getId ( ) ) ; if ( orden != null ) { org . junit . Assert . fail ( \"La<sp>orden<sp>de<sp>pago<sp>todavia<sp>existe!!!\" ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( orden . getId ( ) )", "total": "testElimina ( ) { log . debug ( \"Debiera<sp>eliminar<sp>una<sp>Orden<sp>de<sp>Pago<sp>\" ) ; mx . edu . um . mateo . contabilidad . web . Usuario usuario = this . obtieneUsuario ( ) ; this . authenticate ( usuario , usuario . getPassword ( ) , new java . util . ArrayList < org . springframework . security . core . GrantedAuthority > ( usuario . getRoles ( ) ) ) ; mx . edu . um . mateo . contabilidad . model . OrdenPago orden = new mx . edu . um . mateo . contabilidad . model . OrdenPago ( \"TEST\" , true , new java . util . Date ( ) , usuario . getEmpresa ( ) , mx . edu . um . mateo . general . utils . Constantes . STATUS_ACTIVO , usuario , new java . util . Date ( ) , mx . edu . um . mateo . general . utils . Constantes . STATUS_ACTIVO ) ; currentSession ( ) . save ( orden ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( post ( Constantes . ORDENPAGO_PATH_ELIMINA ) . param ( \"id\" , orden . getId ( ) . toString ( ) ) ) . andExpect ( flash ( ) . attributeExists ( \"message\" ) ) . andExpect ( flash ( ) . attribute ( \"message\" , \"ordenPago.elimina.message\" ) ) . andExpect ( redirectedUrl ( Constantes . ORDENPAGO_PATH ) ) ; orden = instance . obtiene ( orden . getId ( ) ) ; if ( orden != null ) { org . junit . Assert . fail ( \"La<sp>orden<sp>de<sp>pago<sp>todavia<sp>existe!!!\" ) ; } } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( orden . getId ( ) )"}
{"focal": "listDisplayVacanciesForWaitListProgram ( int ) { java . util . List < org . oscarehr . PMmodule . wlmatch . VacancyDisplayBO > bos = new java . util . ArrayList < org . oscarehr . PMmodule . wlmatch . VacancyDisplayBO > ( ) ; java . lang . String queryString = \"SELECT<sp>v.id,<sp>t.NAME,<sp>v.dateCreated<sp>FROM<sp>vacancy<sp>v<sp>JOIN<sp>vacancy_template<sp>t<sp>ON<sp>\" + \"v.templateId=t.TEMPLATE_ID<sp>WHERE<sp>t.WL_PROGRAM_ID=?1<sp>and<sp>v.status=?2\" ; javax . persistence . Query query = entityManager . createNativeQuery ( queryString ) ; query . setParameter ( 1 , programID ) ; query . setParameter ( 2 , \"active\" ) ; @ org . oscarehr . PMmodule . dao . SuppressWarnings ( \"unchecked\" ) java . util . List < java . lang . Object [ ] > results = query . getResultList ( ) ; for ( java . lang . Object [ ] cols : results ) { org . oscarehr . PMmodule . wlmatch . VacancyDisplayBO bo = new org . oscarehr . PMmodule . wlmatch . VacancyDisplayBO ( ) ; bo . setVacancyID ( ( ( java . lang . Integer ) ( cols [ 0 ] ) ) ) ; bo . setVacancyTemplateName ( ( ( java . lang . String ) ( cols [ 1 ] ) ) ) ; bo . setCreated ( ( ( java . util . Date ) ( cols [ 2 ] ) ) ) ; bos . add ( bo ) ; } return bos ; }", "testMethod": "testListDisplayVacanciesForWaitListProgram ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dao . listDisplayVacanciesForWaitListProgram ( 1 ) )", "total": "testListDisplayVacanciesForWaitListProgram ( ) { \"<AssertPlaceHolder>\" ; } listDisplayVacanciesForWaitListProgram ( int ) { java . util . List < org . oscarehr . PMmodule . wlmatch . VacancyDisplayBO > bos = new java . util . ArrayList < org . oscarehr . PMmodule . wlmatch . VacancyDisplayBO > ( ) ; java . lang . String queryString = \"SELECT<sp>v.id,<sp>t.NAME,<sp>v.dateCreated<sp>FROM<sp>vacancy<sp>v<sp>JOIN<sp>vacancy_template<sp>t<sp>ON<sp>\" + \"v.templateId=t.TEMPLATE_ID<sp>WHERE<sp>t.WL_PROGRAM_ID=?1<sp>and<sp>v.status=?2\" ; javax . persistence . Query query = entityManager . createNativeQuery ( queryString ) ; query . setParameter ( 1 , programID ) ; query . setParameter ( 2 , \"active\" ) ; @ org . oscarehr . PMmodule . dao . SuppressWarnings ( \"unchecked\" ) java . util . List < java . lang . Object [ ] > results = query . getResultList ( ) ; for ( java . lang . Object [ ] cols : results ) { org . oscarehr . PMmodule . wlmatch . VacancyDisplayBO bo = new org . oscarehr . PMmodule . wlmatch . VacancyDisplayBO ( ) ; bo . setVacancyID ( ( ( java . lang . Integer ) ( cols [ 0 ] ) ) ) ; bo . setVacancyTemplateName ( ( ( java . lang . String ) ( cols [ 1 ] ) ) ) ; bo . setCreated ( ( ( java . util . Date ) ( cols [ 2 ] ) ) ) ; bos . add ( bo ) ; } return bos ; }", "answer": "org . junit . Assert . assertNotNull ( dao . listDisplayVacanciesForWaitListProgram ( 1 ) )"}
{"focal": "getLoggingTool ( ) { java . lang . String originalValue = java . lang . System . getProperty ( \"cdk.debugging\" ) ; java . lang . System . setProperty ( \"cdk.debugging\" , \"true\" ) ; org . openscience . cdk . tools . LoggingTool logger = new org . openscience . cdk . tools . LoggingTool ( this ) ; if ( originalValue != null ) java . lang . System . setProperty ( \"cdk.debugging\" , originalValue ) ; return logger ; }", "testMethod": "testLoggingTool_Object ( ) { org . openscience . cdk . tools . ILoggingTool logger = getLoggingTool ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( logger )", "total": "testLoggingTool_Object ( ) { org . openscience . cdk . tools . ILoggingTool logger = getLoggingTool ( ) ; \"<AssertPlaceHolder>\" ; } getLoggingTool ( ) { java . lang . String originalValue = java . lang . System . getProperty ( \"cdk.debugging\" ) ; java . lang . System . setProperty ( \"cdk.debugging\" , \"true\" ) ; org . openscience . cdk . tools . LoggingTool logger = new org . openscience . cdk . tools . LoggingTool ( this ) ; if ( originalValue != null ) java . lang . System . setProperty ( \"cdk.debugging\" , originalValue ) ; return logger ; }", "answer": "org . junit . Assert . assertNotNull ( logger )"}
{"focal": "receive ( ) { try { return consumer . receive ( ) ; } catch ( javax . jms . JMSException e ) { throw org . apache . qpid . jms . exceptions . JmsExceptionSupport . createRuntimeException ( e ) ; } }", "testMethod": "testReceiveAfterCoordinatorLinkClosedDuringTX ( ) { try ( org . apache . qpid . jms . test . testpeer . TestAmqpPeer testPeer = new org . apache . qpid . jms . test . testpeer . TestAmqpPeer ( ) ) { javax . jms . Connection connection = testFixture . establishConnecton ( testPeer ) ; connection . start ( ) ; testPeer . expectBegin ( ) ; testPeer . expectCoordinatorAttach ( ) ; org . apache . qpid . proton . amqp . Binary txnId = new org . apache . qpid . proton . amqp . Binary ( new byte [ ] { ( ( byte ) ( 5 ) ) , ( ( byte ) ( 6 ) ) , ( ( byte ) ( 7 ) ) , ( ( byte ) ( 8 ) ) } ) ; testPeer . expectDeclare ( txnId ) ; javax . jms . Session session = connection . createSession ( true , Session . SESSION_TRANSACTED ) ; javax . jms . Queue queue = session . createQueue ( \"myQueue\" ) ; org . apache . qpid . proton . amqp . DescribedType amqpValueNullContent = new org . apache . qpid . jms . test . testpeer . describedtypes . sections . AmqpValueDescribedType ( null ) ; testPeer . expectReceiverAttach ( ) ; testPeer . expectLinkFlowRespondWithTransfer ( null , null , null , null , amqpValueNullContent ) ; testPeer . remotelyCloseLastCoordinatorLink ( ) ; javax . jms . MessageConsumer consumer = session . createConsumer ( queue ) ; testPeer . waitForAllHandlersToComplete ( 2000 ) ; javax . jms . Message received = consumer . receive ( ) ; \"<AssertPlaceHolder>\" ; txnId = new org . apache . qpid . proton . amqp . Binary ( new byte [ ] { ( ( byte ) ( 1 ) ) , ( ( byte ) ( 2 ) ) , ( ( byte ) ( 3 ) ) , ( ( byte ) ( 4 ) ) } ) ; testPeer . expectCoordinatorAttach ( ) ; testPeer . expectDeclare ( txnId ) ; testPeer . expectDischarge ( txnId , true ) ; try { session . commit ( ) ; org . junit . Assert . fail ( \"Commit<sp>operation<sp>should<sp>have<sp>failed.\" ) ; } catch ( javax . jms . TransactionRolledBackException jmsTxRb ) { } testPeer . expectClose ( ) ; connection . close ( ) ; testPeer . waitForAllHandlersToComplete ( 1000 ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( received )", "total": "testReceiveAfterCoordinatorLinkClosedDuringTX ( ) { try ( org . apache . qpid . jms . test . testpeer . TestAmqpPeer testPeer = new org . apache . qpid . jms . test . testpeer . TestAmqpPeer ( ) ) { javax . jms . Connection connection = testFixture . establishConnecton ( testPeer ) ; connection . start ( ) ; testPeer . expectBegin ( ) ; testPeer . expectCoordinatorAttach ( ) ; org . apache . qpid . proton . amqp . Binary txnId = new org . apache . qpid . proton . amqp . Binary ( new byte [ ] { ( ( byte ) ( 5 ) ) , ( ( byte ) ( 6 ) ) , ( ( byte ) ( 7 ) ) , ( ( byte ) ( 8 ) ) } ) ; testPeer . expectDeclare ( txnId ) ; javax . jms . Session session = connection . createSession ( true , Session . SESSION_TRANSACTED ) ; javax . jms . Queue queue = session . createQueue ( \"myQueue\" ) ; org . apache . qpid . proton . amqp . DescribedType amqpValueNullContent = new org . apache . qpid . jms . test . testpeer . describedtypes . sections . AmqpValueDescribedType ( null ) ; testPeer . expectReceiverAttach ( ) ; testPeer . expectLinkFlowRespondWithTransfer ( null , null , null , null , amqpValueNullContent ) ; testPeer . remotelyCloseLastCoordinatorLink ( ) ; javax . jms . MessageConsumer consumer = session . createConsumer ( queue ) ; testPeer . waitForAllHandlersToComplete ( 2000 ) ; javax . jms . Message received = consumer . receive ( ) ; \"<AssertPlaceHolder>\" ; txnId = new org . apache . qpid . proton . amqp . Binary ( new byte [ ] { ( ( byte ) ( 1 ) ) , ( ( byte ) ( 2 ) ) , ( ( byte ) ( 3 ) ) , ( ( byte ) ( 4 ) ) } ) ; testPeer . expectCoordinatorAttach ( ) ; testPeer . expectDeclare ( txnId ) ; testPeer . expectDischarge ( txnId , true ) ; try { session . commit ( ) ; org . junit . Assert . fail ( \"Commit<sp>operation<sp>should<sp>have<sp>failed.\" ) ; } catch ( javax . jms . TransactionRolledBackException jmsTxRb ) { } testPeer . expectClose ( ) ; connection . close ( ) ; testPeer . waitForAllHandlersToComplete ( 1000 ) ; } } receive ( ) { try { return consumer . receive ( ) ; } catch ( javax . jms . JMSException e ) { throw org . apache . qpid . jms . exceptions . JmsExceptionSupport . createRuntimeException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( received )"}
{"focal": "newChannel ( ) { return new org . eclipse . kapua . service . device . call . message . kura . app . request . KuraRequestChannel ( ) ; }", "testMethod": "newChannel ( ) { org . eclipse . kapua . message . KapuaChannel channel = kapuaMessageFactory . newChannel ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( channel )", "total": "newChannel ( ) { org . eclipse . kapua . message . KapuaChannel channel = kapuaMessageFactory . newChannel ( ) ; \"<AssertPlaceHolder>\" ; } newChannel ( ) { return new org . eclipse . kapua . service . device . call . message . kura . app . request . KuraRequestChannel ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( channel )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testLista ( ) { log . debug ( \"Debiera<sp>mostrar<sp>lista<sp>de<sp>paquetes\" ) ; mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; mx . edu . um . mateo . inscripciones . model . Paquete paquete = null ; for ( int i = 0 ; i < 20 ; i ++ ) { paquete = new mx . edu . um . mateo . inscripciones . model . Paquete ( ) ; paquete . setAcfe ( \"a\" ) ; paquete . setDescripcion ( \"test\" ) ; paquete . setEmpresa ( usuario . getEmpresa ( ) ) ; paquete . setEnsenanza ( new java . math . BigDecimal ( \"80\" ) ) ; paquete . setInternado ( new java . math . BigDecimal ( \"80\" ) ) ; paquete . setMatricula ( new java . math . BigDecimal ( \"80\" ) ) ; paquete . setNombre ( \"test\" ) ; currentSession ( ) . save ( paquete ) ; \"<AssertPlaceHolder>\" ; } this . mockMvc . perform ( get ( Constantes . PATH_PAQUETE ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_PAQUETE_LISTA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAQUETES ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINACION ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINAS ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINA ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( paquete . getId ( ) )", "total": "testLista ( ) { log . debug ( \"Debiera<sp>mostrar<sp>lista<sp>de<sp>paquetes\" ) ; mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; mx . edu . um . mateo . inscripciones . model . Paquete paquete = null ; for ( int i = 0 ; i < 20 ; i ++ ) { paquete = new mx . edu . um . mateo . inscripciones . model . Paquete ( ) ; paquete . setAcfe ( \"a\" ) ; paquete . setDescripcion ( \"test\" ) ; paquete . setEmpresa ( usuario . getEmpresa ( ) ) ; paquete . setEnsenanza ( new java . math . BigDecimal ( \"80\" ) ) ; paquete . setInternado ( new java . math . BigDecimal ( \"80\" ) ) ; paquete . setMatricula ( new java . math . BigDecimal ( \"80\" ) ) ; paquete . setNombre ( \"test\" ) ; currentSession ( ) . save ( paquete ) ; \"<AssertPlaceHolder>\" ; } this . mockMvc . perform ( get ( Constantes . PATH_PAQUETE ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_PAQUETE_LISTA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAQUETES ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINACION ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINAS ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINA ) ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( paquete . getId ( ) )"}
{"focal": "getArchiveWriter ( ) { final org . eclipse . core . runtime . IConfigurationElement [ ] configs = org . eclipse . core . runtime . Platform . getExtensionRegistry ( ) . getConfigurationElementsFor ( org . csstudio . archive . writer . ArchiveWriterFactory . EXTENSION_ID ) ; if ( ( configs . length ) != 1 ) throw new java . lang . Exception ( ( ( ( \"Need<sp>1<sp>extension<sp>to<sp>\" + ( org . csstudio . archive . writer . ArchiveWriterFactory . EXTENSION_ID ) ) + \",<sp>found<sp>\" ) + ( configs . length ) ) ) ; final org . eclipse . core . runtime . IConfigurationElement config = configs [ 0 ] ; final org . csstudio . archive . writer . ArchiveWriter writer = ( ( org . csstudio . archive . writer . ArchiveWriter ) ( config . createExecutableExtension ( \"class\" ) ) ) ; return writer ; }", "testMethod": "testChannelLookup ( ) { final org . csstudio . archive . writer . ArchiveWriter writer = org . csstudio . archive . writer . ArchiveWriterFactory . getArchiveWriter ( ) ; \"<AssertPlaceHolder>\" ; System . out . println ( ( \"Found<sp>\" + ( writer . getClass ( ) . getName ( ) ) ) ) ; writer . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( writer )", "total": "testChannelLookup ( ) { final org . csstudio . archive . writer . ArchiveWriter writer = org . csstudio . archive . writer . ArchiveWriterFactory . getArchiveWriter ( ) ; \"<AssertPlaceHolder>\" ; System . out . println ( ( \"Found<sp>\" + ( writer . getClass ( ) . getName ( ) ) ) ) ; writer . close ( ) ; } getArchiveWriter ( ) { final org . eclipse . core . runtime . IConfigurationElement [ ] configs = org . eclipse . core . runtime . Platform . getExtensionRegistry ( ) . getConfigurationElementsFor ( org . csstudio . archive . writer . ArchiveWriterFactory . EXTENSION_ID ) ; if ( ( configs . length ) != 1 ) throw new java . lang . Exception ( ( ( ( \"Need<sp>1<sp>extension<sp>to<sp>\" + ( org . csstudio . archive . writer . ArchiveWriterFactory . EXTENSION_ID ) ) + \",<sp>found<sp>\" ) + ( configs . length ) ) ) ; final org . eclipse . core . runtime . IConfigurationElement config = configs [ 0 ] ; final org . csstudio . archive . writer . ArchiveWriter writer = ( ( org . csstudio . archive . writer . ArchiveWriter ) ( config . createExecutableExtension ( \"class\" ) ) ) ; return writer ; }", "answer": "org . junit . Assert . assertNotNull ( writer )"}
{"focal": "getCache ( java . lang . String ) { com . google . common . cache . Cache < K , V > cache = com . google . common . cache . CacheBuilder . newBuilder ( ) . weakValues ( ) . concurrencyLevel ( org . geoserver . util . DefaultCacheProvider . DEFAULT_CONCURRENCY_LEVEL ) . expireAfterAccess ( org . geoserver . util . DefaultCacheProvider . DEFAULT_EXPIRATION_MINUTES , TimeUnit . MINUTES ) . maximumSize ( org . geoserver . util . DefaultCacheProvider . DEFAULT_MAX_ENTRIES ) . build ( ) ; return cache ; }", "testMethod": "testGetCache ( ) { com . google . common . cache . Cache < java . io . Serializable , java . io . Serializable > cache = this . cacheProvider . getCache ( \"test\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( cache )", "total": "testGetCache ( ) { com . google . common . cache . Cache < java . io . Serializable , java . io . Serializable > cache = this . cacheProvider . getCache ( \"test\" ) ; \"<AssertPlaceHolder>\" ; } getCache ( java . lang . String ) { com . google . common . cache . Cache < K , V > cache = com . google . common . cache . CacheBuilder . newBuilder ( ) . weakValues ( ) . concurrencyLevel ( org . geoserver . util . DefaultCacheProvider . DEFAULT_CONCURRENCY_LEVEL ) . expireAfterAccess ( org . geoserver . util . DefaultCacheProvider . DEFAULT_EXPIRATION_MINUTES , TimeUnit . MINUTES ) . maximumSize ( org . geoserver . util . DefaultCacheProvider . DEFAULT_MAX_ENTRIES ) . build ( ) ; return cache ; }", "answer": "org . junit . Assert . assertNotNull ( cache )"}
{"focal": "getCAReferencesFinal ( ) { if ( ( this . caReferences ) == null ) { return null ; } return new com . microsoft . azure . sdk . iot . provisioning . service . configs . X509CAReferences ( this . caReferences ) ; }", "testMethod": "getterForCAReferencesSucceed ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . configs . X509Certificates ) { tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . configs . X509Attestation x509Attestation = tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . configs . X509Attestation . createFromCAReferences ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . configs . X509AttestationTest . CA_REFERENCES_STRING , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . configs . X509AttestationTest . CA_REFERENCES_STRING ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( x509Attestation . getCAReferencesFinal ( ) )", "total": "getterForCAReferencesSucceed ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . configs . X509Certificates ) { tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . configs . X509Attestation x509Attestation = tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . configs . X509Attestation . createFromCAReferences ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . configs . X509AttestationTest . CA_REFERENCES_STRING , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . configs . X509AttestationTest . CA_REFERENCES_STRING ) ; \"<AssertPlaceHolder>\" ; } getCAReferencesFinal ( ) { if ( ( this . caReferences ) == null ) { return null ; } return new com . microsoft . azure . sdk . iot . provisioning . service . configs . X509CAReferences ( this . caReferences ) ; }", "answer": "org . junit . Assert . assertNotNull ( x509Attestation . getCAReferencesFinal ( ) )"}
{"focal": "get ( java . lang . Class , int ) { return getHibernateTemplate ( ) . get ( entityType , entityId ) ; }", "testMethod": "testCloseInReceive ( ) { try ( final org . opennms . jicmp . jna . NativeDatagramSocket socket = org . opennms . jicmp . jna . NativeDatagramSocket . create ( NativeDatagramSocket . PF_INET , NativeDatagramSocket . IPPROTO_UDP , 1234 ) ) { final java . util . concurrent . FutureTask < org . opennms . jicmp . jna . NativeDatagramPacket > task = new java . util . concurrent . FutureTask < org . opennms . jicmp . jna . NativeDatagramPacket > ( new java . util . concurrent . Callable < org . opennms . jicmp . jna . NativeDatagramPacket > ( ) { @ org . opennms . jicmp . jna . Override public org . opennms . jicmp . jna . NativeDatagramPacket call ( ) throws org . opennms . jicmp . jna . Exception { final java . nio . ByteBuffer buf = StandardCharsets . UTF_8 . encode ( \"msg1\" ) ; final org . opennms . jicmp . jna . NativeDatagramPacket p = new org . opennms . jicmp . jna . NativeDatagramPacket ( buf , java . net . InetAddress . getLocalHost ( ) , m_port ) ; socket . send ( p ) ; final org . opennms . jicmp . jna . NativeDatagramPacket r = new org . opennms . jicmp . jna . NativeDatagramPacket ( 128 ) ; printf ( \"Receiving...\\n\" ) ; socket . receive ( r ) ; printf ( \"Received\\n\" ) ; return r ; } } ) ; org . opennms . jicmp . jna . NativeSocketTest . m_executor . execute ( task ) ; final org . opennms . jicmp . jna . NativeDatagramPacket r = task . get ( 10 , TimeUnit . SECONDS ) ; \"<AssertPlaceHolder>\" ; final java . lang . String response = StandardCharsets . UTF_8 . decode ( r . getContent ( ) ) . toString ( ) ; printf ( \"Received<sp>Response:<sp>%s<sp>from<sp>%s:%d\\n\" , response , r . getAddress ( ) . getHostAddress ( ) , r . getPort ( ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( r )", "total": "testCloseInReceive ( ) { try ( final org . opennms . jicmp . jna . NativeDatagramSocket socket = org . opennms . jicmp . jna . NativeDatagramSocket . create ( NativeDatagramSocket . PF_INET , NativeDatagramSocket . IPPROTO_UDP , 1234 ) ) { final java . util . concurrent . FutureTask < org . opennms . jicmp . jna . NativeDatagramPacket > task = new java . util . concurrent . FutureTask < org . opennms . jicmp . jna . NativeDatagramPacket > ( new java . util . concurrent . Callable < org . opennms . jicmp . jna . NativeDatagramPacket > ( ) { @ org . opennms . jicmp . jna . Override public org . opennms . jicmp . jna . NativeDatagramPacket call ( ) throws org . opennms . jicmp . jna . Exception { final java . nio . ByteBuffer buf = StandardCharsets . UTF_8 . encode ( \"msg1\" ) ; final org . opennms . jicmp . jna . NativeDatagramPacket p = new org . opennms . jicmp . jna . NativeDatagramPacket ( buf , java . net . InetAddress . getLocalHost ( ) , m_port ) ; socket . send ( p ) ; final org . opennms . jicmp . jna . NativeDatagramPacket r = new org . opennms . jicmp . jna . NativeDatagramPacket ( 128 ) ; printf ( \"Receiving...\\n\" ) ; socket . receive ( r ) ; printf ( \"Received\\n\" ) ; return r ; } } ) ; org . opennms . jicmp . jna . NativeSocketTest . m_executor . execute ( task ) ; final org . opennms . jicmp . jna . NativeDatagramPacket r = task . get ( 10 , TimeUnit . SECONDS ) ; \"<AssertPlaceHolder>\" ; final java . lang . String response = StandardCharsets . UTF_8 . decode ( r . getContent ( ) ) . toString ( ) ; printf ( \"Received<sp>Response:<sp>%s<sp>from<sp>%s:%d\\n\" , response , r . getAddress ( ) . getHostAddress ( ) , r . getPort ( ) ) ; } } get ( java . lang . Class , int ) { return getHibernateTemplate ( ) . get ( entityType , entityId ) ; }", "answer": "org . junit . Assert . assertNotNull ( r )"}
{"focal": "launch ( java . lang . String , org . springframework . batch . core . JobParameters ) { org . springframework . batch . core . JobExecution jobExecution = null ; if ( jobLocator . getJobNames ( ) . contains ( jobName ) ) { org . springframework . batch . core . Job job = jobLocator . getJob ( jobName ) ; org . springframework . batch . core . JobExecution lastJobExecution = jobRepository . getLastJobExecution ( jobName , jobParameters ) ; boolean restart = false ; if ( lastJobExecution != null ) { org . springframework . batch . core . BatchStatus status = lastJobExecution . getStatus ( ) ; if ( ( status . isUnsuccessful ( ) ) && ( status != ( org . springframework . batch . core . BatchStatus . ABANDONED ) ) ) { restart = true ; } } if ( ( ( job . getJobParametersIncrementer ( ) ) != null ) && ( ! restart ) ) { jobParameters = job . getJobParametersIncrementer ( ) . getNext ( jobParameters ) ; } jobExecution = jobLauncher . run ( job , jobParameters ) ; if ( jobExecution . isRunning ( ) ) { activeExecutions . add ( jobExecution ) ; } } else { if ( ( jsrJobOperator ) != null ) { jobExecution = new org . springframework . batch . core . JobExecution ( jsrJobOperator . start ( jobName , jobParameters . toProperties ( ) ) ) ; } else { throw new org . springframework . batch . core . launch . NoSuchJobException ( java . lang . String . format ( \"Unable<sp>to<sp>find<sp>job<sp>%s<sp>to<sp>launch\" , java . lang . String . valueOf ( jobName ) ) ) ; } } return jobExecution ; }", "testMethod": "testLaunch ( ) { org . springframework . batch . core . JobParameters jobParameters = new org . springframework . batch . core . JobParameters ( ) ; org . springframework . batch . core . Job job = new org . springframework . batch . admin . service . JobSupport ( \"job\" ) ; when ( jobLocator . getJobNames ( ) ) . thenReturn ( java . util . Arrays . asList ( \"job\" , \"job1\" ) ) ; when ( jobLocator . getJob ( \"job\" ) ) . thenReturn ( job ) ; when ( jobLauncher . run ( job , jobParameters ) ) . thenReturn ( org . springframework . batch . test . MetaDataInstanceFactory . createJobExecution ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( service . launch ( \"job\" , jobParameters ) )", "total": "testLaunch ( ) { org . springframework . batch . core . JobParameters jobParameters = new org . springframework . batch . core . JobParameters ( ) ; org . springframework . batch . core . Job job = new org . springframework . batch . admin . service . JobSupport ( \"job\" ) ; when ( jobLocator . getJobNames ( ) ) . thenReturn ( java . util . Arrays . asList ( \"job\" , \"job1\" ) ) ; when ( jobLocator . getJob ( \"job\" ) ) . thenReturn ( job ) ; when ( jobLauncher . run ( job , jobParameters ) ) . thenReturn ( org . springframework . batch . test . MetaDataInstanceFactory . createJobExecution ( ) ) ; \"<AssertPlaceHolder>\" ; } launch ( java . lang . String , org . springframework . batch . core . JobParameters ) { org . springframework . batch . core . JobExecution jobExecution = null ; if ( jobLocator . getJobNames ( ) . contains ( jobName ) ) { org . springframework . batch . core . Job job = jobLocator . getJob ( jobName ) ; org . springframework . batch . core . JobExecution lastJobExecution = jobRepository . getLastJobExecution ( jobName , jobParameters ) ; boolean restart = false ; if ( lastJobExecution != null ) { org . springframework . batch . core . BatchStatus status = lastJobExecution . getStatus ( ) ; if ( ( status . isUnsuccessful ( ) ) && ( status != ( org . springframework . batch . core . BatchStatus . ABANDONED ) ) ) { restart = true ; } } if ( ( ( job . getJobParametersIncrementer ( ) ) != null ) && ( ! restart ) ) { jobParameters = job . getJobParametersIncrementer ( ) . getNext ( jobParameters ) ; } jobExecution = jobLauncher . run ( job , jobParameters ) ; if ( jobExecution . isRunning ( ) ) { activeExecutions . add ( jobExecution ) ; } } else { if ( ( jsrJobOperator ) != null ) { jobExecution = new org . springframework . batch . core . JobExecution ( jsrJobOperator . start ( jobName , jobParameters . toProperties ( ) ) ) ; } else { throw new org . springframework . batch . core . launch . NoSuchJobException ( java . lang . String . format ( \"Unable<sp>to<sp>find<sp>job<sp>%s<sp>to<sp>launch\" , java . lang . String . valueOf ( jobName ) ) ) ; } } return jobExecution ; }", "answer": "org . junit . Assert . assertNotNull ( service . launch ( \"job\" , jobParameters ) )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . MeasurementCSSLocation entity = new org . oscarehr . common . model . MeasurementCSSLocation ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . MeasurementCSSLocation entity = new org . oscarehr . common . model . MeasurementCSSLocation ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "viewLimitOrder ( java . lang . Integer ) { return tradingManager . viewLimitOrder ( limitOrderId ) ; }", "testMethod": "testViewLimitOrder ( ) { java . util . concurrent . atomic . AtomicInteger limitOrderIdCounter = testConfig . getLimitOrderIdCounter ( ) ; com . jboss . trading . ws . client . test . LimitOrder limitOrder = tradingServicesClient . viewLimitOrder ( limitOrderIdCounter . getAndIncrement ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( limitOrder )", "total": "testViewLimitOrder ( ) { java . util . concurrent . atomic . AtomicInteger limitOrderIdCounter = testConfig . getLimitOrderIdCounter ( ) ; com . jboss . trading . ws . client . test . LimitOrder limitOrder = tradingServicesClient . viewLimitOrder ( limitOrderIdCounter . getAndIncrement ( ) ) ; \"<AssertPlaceHolder>\" ; } viewLimitOrder ( java . lang . Integer ) { return tradingManager . viewLimitOrder ( limitOrderId ) ; }", "answer": "org . junit . Assert . assertNotNull ( limitOrder )"}
{"focal": "createInstance ( java . lang . Class ) { org . drools . core . definitions . InternalKnowledgePackage kpkg = ( ( org . drools . core . definitions . InternalKnowledgePackage ) ( kieBase . getKiePackage ( cls . getPackage ( ) . getName ( ) ) ) ) ; org . drools . core . definitions . ResourceTypePackageRegistry map = kpkg . getResourceTypePackages ( ) ; org . drools . beliefs . bayes . assembler . BayesPackage bayesPkg = ( ( org . drools . beliefs . bayes . assembler . BayesPackage ) ( map . get ( ResourceType . BAYES ) ) ) ; org . drools . beliefs . bayes . JunctionTree jtree = bayesPkg . getJunctionTree ( cls . getSimpleName ( ) ) ; return new org . drools . beliefs . bayes . BayesInstance ( jtree , cls ) ; }", "testMethod": "testBayesRuntimeManager ( ) { org . drools . compiler . builder . impl . KnowledgeBuilderImpl kbuilder = new org . drools . compiler . builder . impl . KnowledgeBuilderImpl ( ) ; kbuilder . add ( org . kie . internal . io . ResourceFactory . newClassPathResource ( \"Garden.xmlbif\" , org . drools . beliefs . bayes . integration . AssemblerTest . class ) , ResourceType . BAYES ) ; org . drools . core . impl . InternalKnowledgeBase kbase = getKnowledgeBase ( ) ; kbase . addPackages ( kbuilder . getKnowledgePackages ( ) ) ; org . drools . core . impl . StatefulKnowledgeSessionImpl ksession = ( ( org . drools . core . impl . StatefulKnowledgeSessionImpl ) ( kbase . newKieSession ( ) ) ) ; org . drools . beliefs . bayes . runtime . BayesRuntime bayesRuntime = ksession . getKieRuntime ( org . drools . beliefs . bayes . runtime . BayesRuntime . class ) ; org . drools . beliefs . bayes . BayesInstance < org . drools . beliefs . bayes . integration . Garden > instance = bayesRuntime . createInstance ( org . drools . beliefs . bayes . integration . Garden . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance )", "total": "testBayesRuntimeManager ( ) { org . drools . compiler . builder . impl . KnowledgeBuilderImpl kbuilder = new org . drools . compiler . builder . impl . KnowledgeBuilderImpl ( ) ; kbuilder . add ( org . kie . internal . io . ResourceFactory . newClassPathResource ( \"Garden.xmlbif\" , org . drools . beliefs . bayes . integration . AssemblerTest . class ) , ResourceType . BAYES ) ; org . drools . core . impl . InternalKnowledgeBase kbase = getKnowledgeBase ( ) ; kbase . addPackages ( kbuilder . getKnowledgePackages ( ) ) ; org . drools . core . impl . StatefulKnowledgeSessionImpl ksession = ( ( org . drools . core . impl . StatefulKnowledgeSessionImpl ) ( kbase . newKieSession ( ) ) ) ; org . drools . beliefs . bayes . runtime . BayesRuntime bayesRuntime = ksession . getKieRuntime ( org . drools . beliefs . bayes . runtime . BayesRuntime . class ) ; org . drools . beliefs . bayes . BayesInstance < org . drools . beliefs . bayes . integration . Garden > instance = bayesRuntime . createInstance ( org . drools . beliefs . bayes . integration . Garden . class ) ; \"<AssertPlaceHolder>\" ; } createInstance ( java . lang . Class ) { org . drools . core . definitions . InternalKnowledgePackage kpkg = ( ( org . drools . core . definitions . InternalKnowledgePackage ) ( kieBase . getKiePackage ( cls . getPackage ( ) . getName ( ) ) ) ) ; org . drools . core . definitions . ResourceTypePackageRegistry map = kpkg . getResourceTypePackages ( ) ; org . drools . beliefs . bayes . assembler . BayesPackage bayesPkg = ( ( org . drools . beliefs . bayes . assembler . BayesPackage ) ( map . get ( ResourceType . BAYES ) ) ) ; org . drools . beliefs . bayes . JunctionTree jtree = bayesPkg . getJunctionTree ( cls . getSimpleName ( ) ) ; return new org . drools . beliefs . bayes . BayesInstance ( jtree , cls ) ; }", "answer": "org . junit . Assert . assertNotNull ( instance )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "shouldReturnBpmnModelInstance ( ) { org . camunda . bpm . engine . repository . ProcessDefinition processDefinition = repositoryService . createProcessDefinitionQuery ( ) . processDefinitionKey ( org . camunda . bpm . integrationtest . functional . bpmnmodelapi . RepositoryServiceBpmnModelRetrievalTest . TEST_PROCESS ) . singleResult ( ) ; org . camunda . bpm . model . bpmn . BpmnModelInstance bpmnModelInstance = repositoryService . getBpmnModelInstance ( processDefinition . getId ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( bpmnModelInstance )", "total": "shouldReturnBpmnModelInstance ( ) { org . camunda . bpm . engine . repository . ProcessDefinition processDefinition = repositoryService . createProcessDefinitionQuery ( ) . processDefinitionKey ( org . camunda . bpm . integrationtest . functional . bpmnmodelapi . RepositoryServiceBpmnModelRetrievalTest . TEST_PROCESS ) . singleResult ( ) ; org . camunda . bpm . model . bpmn . BpmnModelInstance bpmnModelInstance = repositoryService . getBpmnModelInstance ( processDefinition . getId ( ) ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( bpmnModelInstance )"}
{"focal": "builder ( ) { return eu . toolchain . concurrent . CoreAsync . builder ( ) ; }", "testMethod": "testBuilder ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( eu . toolchain . concurrent . CoreAsync . builder ( ) )", "total": "testBuilder ( ) { \"<AssertPlaceHolder>\" ; } builder ( ) { return eu . toolchain . concurrent . CoreAsync . builder ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( eu . toolchain . concurrent . CoreAsync . builder ( ) )"}
{"focal": "getResource ( java . lang . String ) { if ( name . startsWith ( \"META-INF/services/\" ) ) { return servicesMap . get ( name . substring ( \"META-INF/services/\" . length ( ) ) ) ; } return null ; }", "testMethod": "testLocalResourceRetrieval ( ) { final java . lang . Module testModule = moduleLoader . loadModule ( org . jboss . modules . ModuleClassLoaderTest . MODULE_WITH_CONTENT_ID ) ; final org . jboss . modules . ModuleClassLoader classLoader = testModule . getClassLoader ( ) ; final java . net . URL resUrl = classLoader . getResource ( \"test.txt\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( resUrl )", "total": "testLocalResourceRetrieval ( ) { final java . lang . Module testModule = moduleLoader . loadModule ( org . jboss . modules . ModuleClassLoaderTest . MODULE_WITH_CONTENT_ID ) ; final org . jboss . modules . ModuleClassLoader classLoader = testModule . getClassLoader ( ) ; final java . net . URL resUrl = classLoader . getResource ( \"test.txt\" ) ; \"<AssertPlaceHolder>\" ; } getResource ( java . lang . String ) { if ( name . startsWith ( \"META-INF/services/\" ) ) { return servicesMap . get ( name . substring ( \"META-INF/services/\" . length ( ) ) ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( resUrl )"}
{"focal": "getDueDate ( ) { org . apache . isis . core . commons . ensure . Ensure . ensureThatArg ( lease_d . getRef ( ) , org . hamcrest . CoreMatchers . is ( lease_d . getRef ( ) ) ) ; return lease_d . getStartDate ( ) . plusYears ( 1 ) ; }", "testMethod": "happy_case ( ) { org . estatio . module . lease . dom . invoicing . InvoiceForLease invoice = invoiceForLeaseRepository . findMatchingInvoice ( seller , buyer , PaymentMethod . DIRECT_DEBIT , lease , InvoiceStatus . NEW , InvoiceForLease_enum . KalPoison001Nl . getDueDate ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( invoice )", "total": "happy_case ( ) { org . estatio . module . lease . dom . invoicing . InvoiceForLease invoice = invoiceForLeaseRepository . findMatchingInvoice ( seller , buyer , PaymentMethod . DIRECT_DEBIT , lease , InvoiceStatus . NEW , InvoiceForLease_enum . KalPoison001Nl . getDueDate ( ) ) ; \"<AssertPlaceHolder>\" ; } getDueDate ( ) { org . apache . isis . core . commons . ensure . Ensure . ensureThatArg ( lease_d . getRef ( ) , org . hamcrest . CoreMatchers . is ( lease_d . getRef ( ) ) ) ; return lease_d . getStartDate ( ) . plusYears ( 1 ) ; }", "answer": "org . junit . Assert . assertNotNull ( invoice )"}
{"focal": "getPcrManifest ( ) { com . intel . mtwilson . model . PcrManifest pcrManifest = new com . intel . mtwilson . model . PcrManifest ( ) ; java . lang . String pcrList = \"0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24\" ; java . util . HashMap < java . lang . String , com . intel . mtwilson . model . Pcr > pcrMap = client . getQuoteInformationForHost ( pcrList ) ; log . info ( \"CitrixHostAgent:<sp>getQuoteInformationForHost<sp>done\" ) ; java . util . Iterator it = pcrMap . entrySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { java . util . Map . Entry pairs = ( ( java . util . Map . Entry ) ( it . next ( ) ) ) ; com . intel . mtwilson . model . Pcr pcr = ( ( com . intel . mtwilson . model . Pcr ) ( pairs . getValue ( ) ) ) ; pcrManifest . setPcr ( com . intel . mtwilson . model . PcrFactory . newInstance ( pcr . getPcrBank ( ) , pcr . getIndex ( ) , pcr . getValue ( ) . toByteArray ( ) ) ) ; } log . info ( \"CitrixHostAgent:<sp>created<sp>PcrManifest\" ) ; return pcrManifest ; }", "testMethod": "getPcrManifestFromCitrixXen ( ) { com . intel . mtwilson . model . PcrManifest pcrManifest = test . agent . TestCitrixHostAgent . agent . getPcrManifest ( ) ; \"<AssertPlaceHolder>\" ; for ( int i = 0 ; i < 24 ; i ++ ) { com . intel . mtwilson . model . Pcr pcr = pcrManifest . getPcr ( i ) ; log . debug ( \"Pcr<sp>{}<sp>=<sp>{}\" , i , pcr . getValue ( ) . toString ( ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( pcrManifest )", "total": "getPcrManifestFromCitrixXen ( ) { com . intel . mtwilson . model . PcrManifest pcrManifest = test . agent . TestCitrixHostAgent . agent . getPcrManifest ( ) ; \"<AssertPlaceHolder>\" ; for ( int i = 0 ; i < 24 ; i ++ ) { com . intel . mtwilson . model . Pcr pcr = pcrManifest . getPcr ( i ) ; log . debug ( \"Pcr<sp>{}<sp>=<sp>{}\" , i , pcr . getValue ( ) . toString ( ) ) ; } } getPcrManifest ( ) { com . intel . mtwilson . model . PcrManifest pcrManifest = new com . intel . mtwilson . model . PcrManifest ( ) ; java . lang . String pcrList = \"0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24\" ; java . util . HashMap < java . lang . String , com . intel . mtwilson . model . Pcr > pcrMap = client . getQuoteInformationForHost ( pcrList ) ; log . info ( \"CitrixHostAgent:<sp>getQuoteInformationForHost<sp>done\" ) ; java . util . Iterator it = pcrMap . entrySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { java . util . Map . Entry pairs = ( ( java . util . Map . Entry ) ( it . next ( ) ) ) ; com . intel . mtwilson . model . Pcr pcr = ( ( com . intel . mtwilson . model . Pcr ) ( pairs . getValue ( ) ) ) ; pcrManifest . setPcr ( com . intel . mtwilson . model . PcrFactory . newInstance ( pcr . getPcrBank ( ) , pcr . getIndex ( ) , pcr . getValue ( ) . toByteArray ( ) ) ) ; } log . info ( \"CitrixHostAgent:<sp>created<sp>PcrManifest\" ) ; return pcrManifest ; }", "answer": "org . junit . Assert . assertNotNull ( pcrManifest )"}
{"focal": "buildContent ( java . util . Collection ) { java . io . Writer writer = new java . io . StringWriter ( ) ; javax . json . stream . JsonGenerator stream = factory . createGenerator ( writer ) ; java . util . Deque < com . bagri . core . model . Data > dataStack = new java . util . LinkedList ( ) ; for ( com . bagri . core . model . Data data : elements ) { writeElement ( dataStack , stream , data ) ; } while ( ! ( dataStack . isEmpty ( ) ) ) { stream . writeEnd ( ) ; dataStack . pop ( ) ; } stream . flush ( ) ; java . lang . String result = writer . toString ( ) ; try { writer . close ( ) ; } catch ( java . io . IOException ex ) { logger . info ( \"buildString;<sp>exception<sp>closing<sp>stream:<sp>{}\" , ex . getMessage ( ) ) ; } return result ; }", "testMethod": "testConversion ( ) { com . bagri . core . server . api . ModelManagement model = new com . bagri . core . server . api . impl . ModelManagementImpl ( ) ; com . bagri . core . server . api . df . map . MapParser parser = new com . bagri . core . server . api . df . map . MapParser ( model ) ; java . util . Map < java . lang . String , java . lang . Object > content = new java . util . HashMap ( ) ; content . put ( \"firstName\" , \"John\" ) ; content . put ( \"lastName\" , \"Smith\" ) ; content . put ( \"age\" , 25L ) ; com . bagri . core . model . ParseResults results = parser . parse ( content ) ; java . util . List < com . bagri . core . model . Data > data = results . getResults ( ) ; com . bagri . core . server . api . df . json . JsonpHandler jh = new com . bagri . core . server . api . df . json . JsonpHandler ( model ) ; java . util . Properties props = new java . util . Properties ( ) ; props . setProperty ( JsonGenerator . PRETTY_PRINTING , \"true\" ) ; jh . init ( props ) ; com . bagri . core . server . api . ContentBuilder < java . lang . String > builder = jh . getBuilder ( ) ; java . lang . String json = builder . buildContent ( data ) ; System . out . println ( json ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( json )", "total": "testConversion ( ) { com . bagri . core . server . api . ModelManagement model = new com . bagri . core . server . api . impl . ModelManagementImpl ( ) ; com . bagri . core . server . api . df . map . MapParser parser = new com . bagri . core . server . api . df . map . MapParser ( model ) ; java . util . Map < java . lang . String , java . lang . Object > content = new java . util . HashMap ( ) ; content . put ( \"firstName\" , \"John\" ) ; content . put ( \"lastName\" , \"Smith\" ) ; content . put ( \"age\" , 25L ) ; com . bagri . core . model . ParseResults results = parser . parse ( content ) ; java . util . List < com . bagri . core . model . Data > data = results . getResults ( ) ; com . bagri . core . server . api . df . json . JsonpHandler jh = new com . bagri . core . server . api . df . json . JsonpHandler ( model ) ; java . util . Properties props = new java . util . Properties ( ) ; props . setProperty ( JsonGenerator . PRETTY_PRINTING , \"true\" ) ; jh . init ( props ) ; com . bagri . core . server . api . ContentBuilder < java . lang . String > builder = jh . getBuilder ( ) ; java . lang . String json = builder . buildContent ( data ) ; System . out . println ( json ) ; \"<AssertPlaceHolder>\" ; } buildContent ( java . util . Collection ) { java . io . Writer writer = new java . io . StringWriter ( ) ; javax . json . stream . JsonGenerator stream = factory . createGenerator ( writer ) ; java . util . Deque < com . bagri . core . model . Data > dataStack = new java . util . LinkedList ( ) ; for ( com . bagri . core . model . Data data : elements ) { writeElement ( dataStack , stream , data ) ; } while ( ! ( dataStack . isEmpty ( ) ) ) { stream . writeEnd ( ) ; dataStack . pop ( ) ; } stream . flush ( ) ; java . lang . String result = writer . toString ( ) ; try { writer . close ( ) ; } catch ( java . io . IOException ex ) { logger . info ( \"buildString;<sp>exception<sp>closing<sp>stream:<sp>{}\" , ex . getMessage ( ) ) ; } return result ; }", "answer": "org . junit . Assert . assertNotNull ( json )"}
{"focal": "build ( ) { if ( ( ( numPixels ) == null ) || ( ( valueRange ) == null ) ) { throw new java . lang . IllegalStateException ( \"Not<sp>enough<sp>information<sp>provided<sp>to<sp>build<sp>a<sp>grid.<sp>Please<sp>use<sp>the<sp>builder<sp>methods<sp>to<sp>provide<sp>required<sp>information\" ) ; } return calculateGridProperties ( ) ; }", "testMethod": "testBuilderWithNoDescription ( ) { java . lang . String id = \"id\" ; java . lang . String name = \"name\" ; java . lang . String description = \"\" ; au . gov . ga . earthsci . core . temporal . BigTime start = new au . gov . ga . earthsci . core . temporal . BigTime ( java . math . BigInteger . valueOf ( 1000 ) ) ; au . gov . ga . earthsci . core . temporal . BigTime end = new au . gov . ga . earthsci . core . temporal . BigTime ( java . math . BigInteger . valueOf ( 10000 ) ) ; au . gov . ga . earthsci . core . temporal . timescale . BasicTimePeriod classUnderTest = au . gov . ga . earthsci . core . temporal . timescale . BasicTimePeriod . Builder . buildTimePeriod ( id , name , description ) . from ( start , true ) . to ( end , true ) . atLevel ( au . gov . ga . earthsci . core . temporal . timescale . BasicTimePeriodTest . level1 ) . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( classUnderTest )", "total": "testBuilderWithNoDescription ( ) { java . lang . String id = \"id\" ; java . lang . String name = \"name\" ; java . lang . String description = \"\" ; au . gov . ga . earthsci . core . temporal . BigTime start = new au . gov . ga . earthsci . core . temporal . BigTime ( java . math . BigInteger . valueOf ( 1000 ) ) ; au . gov . ga . earthsci . core . temporal . BigTime end = new au . gov . ga . earthsci . core . temporal . BigTime ( java . math . BigInteger . valueOf ( 10000 ) ) ; au . gov . ga . earthsci . core . temporal . timescale . BasicTimePeriod classUnderTest = au . gov . ga . earthsci . core . temporal . timescale . BasicTimePeriod . Builder . buildTimePeriod ( id , name , description ) . from ( start , true ) . to ( end , true ) . atLevel ( au . gov . ga . earthsci . core . temporal . timescale . BasicTimePeriodTest . level1 ) . build ( ) ; \"<AssertPlaceHolder>\" ; } build ( ) { if ( ( ( numPixels ) == null ) || ( ( valueRange ) == null ) ) { throw new java . lang . IllegalStateException ( \"Not<sp>enough<sp>information<sp>provided<sp>to<sp>build<sp>a<sp>grid.<sp>Please<sp>use<sp>the<sp>builder<sp>methods<sp>to<sp>provide<sp>required<sp>information\" ) ; } return calculateGridProperties ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( classUnderTest )"}
{"focal": "getOuderschap ( ) { return ouderschap ; }", "testMethod": "testKanAdresGevendeOuderNietBepalenIndicatieIsNull ( ) { moederBetr . getOuderschap ( ) . setIndicatieOuderUitWieKindIsVoortgekomen ( null ) ; java . util . List < nl . bzk . brp . model . validatie . Melding > melding = brpuc00120 . executeer ( null , nieuweSituatie , null ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( getLogger ( ) ) . error ( \"De<sp>adresgevende<sp>ouder<sp>van<sp>de<sp>nieuwgeborene<sp>is<sp>niet<sp>te<sp>bepalen.\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( melding )", "total": "testKanAdresGevendeOuderNietBepalenIndicatieIsNull ( ) { moederBetr . getOuderschap ( ) . setIndicatieOuderUitWieKindIsVoortgekomen ( null ) ; java . util . List < nl . bzk . brp . model . validatie . Melding > melding = brpuc00120 . executeer ( null , nieuweSituatie , null ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( getLogger ( ) ) . error ( \"De<sp>adresgevende<sp>ouder<sp>van<sp>de<sp>nieuwgeborene<sp>is<sp>niet<sp>te<sp>bepalen.\" ) ; } getOuderschap ( ) { return ouderschap ; }", "answer": "org . junit . Assert . assertNotNull ( melding )"}
{"focal": "getServiceConfig ( java . lang . String , java . lang . String ) { return serviceManagerMap . get ( serviceType ) . getServiceConfig ( serviceId ) ; }", "testMethod": "testServiceRegistration ( ) { org . pentaho . platform . plugin . services . pluginmgr . servicemgr . ServiceConfig config = new org . pentaho . platform . plugin . services . pluginmgr . servicemgr . ServiceConfig ( ) ; config . setId ( \"testId\" ) ; config . setServiceClass ( org . pentaho . test . platform . engine . core . EchoServiceBean . class ) ; config . setServiceType ( \"gwt\" ) ; serviceManager . registerService ( config ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( serviceManager . getServiceConfig ( \"gwt\" , \"testId\" ) )", "total": "testServiceRegistration ( ) { org . pentaho . platform . plugin . services . pluginmgr . servicemgr . ServiceConfig config = new org . pentaho . platform . plugin . services . pluginmgr . servicemgr . ServiceConfig ( ) ; config . setId ( \"testId\" ) ; config . setServiceClass ( org . pentaho . test . platform . engine . core . EchoServiceBean . class ) ; config . setServiceType ( \"gwt\" ) ; serviceManager . registerService ( config ) ; \"<AssertPlaceHolder>\" ; } getServiceConfig ( java . lang . String , java . lang . String ) { return serviceManagerMap . get ( serviceType ) . getServiceConfig ( serviceId ) ; }", "answer": "org . junit . Assert . assertNotNull ( serviceManager . getServiceConfig ( \"gwt\" , \"testId\" ) )"}
{"focal": "getMp4 ( ) { return this . getFile ( ) . replace ( \".mov\" , \".mp4\" ) ; }", "testMethod": "testGetMp4 ( ) { com . bixly . pastevid . recorders . RecorderTest . log ( \"getMp4\" ) ; com . bixly . pastevid . recorders . Recorder instance = new com . bixly . pastevid . recorders . Recorder ( new com . bixly . pastevid . recorders . RecorderTest . TestMeasurable ( ) ) ; instance . recordVideo ( ) ; instance . stopVideo ( ) ; java . lang . String result = instance . getMp4 ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetMp4 ( ) { com . bixly . pastevid . recorders . RecorderTest . log ( \"getMp4\" ) ; com . bixly . pastevid . recorders . Recorder instance = new com . bixly . pastevid . recorders . Recorder ( new com . bixly . pastevid . recorders . RecorderTest . TestMeasurable ( ) ) ; instance . recordVideo ( ) ; instance . stopVideo ( ) ; java . lang . String result = instance . getMp4 ( ) ; \"<AssertPlaceHolder>\" ; } getMp4 ( ) { return this . getFile ( ) . replace ( \".mov\" , \".mp4\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "generateText ( java . lang . String ) { verifyInputTypeIsText ( ) ; verifyOutputTypeIsText ( ) ; marytts . datatypes . MaryData in = getMaryDataFromText ( text ) ; marytts . datatypes . MaryData out = process ( in ) ; return out . getPlainText ( ) ; }", "testMethod": "convertTokensToTargetfeatures ( ) { org . w3c . dom . Document tokens = getExampleTokens ( ) ; mary . setInputType ( \"TOKENS\" ) ; mary . setOutputType ( \"TARGETFEATURES\" ) ; java . lang . String tf = mary . generateText ( tokens ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( tf )", "total": "convertTokensToTargetfeatures ( ) { org . w3c . dom . Document tokens = getExampleTokens ( ) ; mary . setInputType ( \"TOKENS\" ) ; mary . setOutputType ( \"TARGETFEATURES\" ) ; java . lang . String tf = mary . generateText ( tokens ) ; \"<AssertPlaceHolder>\" ; } generateText ( java . lang . String ) { verifyInputTypeIsText ( ) ; verifyOutputTypeIsText ( ) ; marytts . datatypes . MaryData in = getMaryDataFromText ( text ) ; marytts . datatypes . MaryData out = process ( in ) ; return out . getPlainText ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( tf )"}
{"focal": "fail ( org . apache . calcite . rel . RelNode ) { setResultCacheInvalidReason ( ( ( \"Unsupported<sp>RelNode<sp>type<sp>\" + ( node . getRelTypeName ( ) ) ) + \"<sp>encountered<sp>in<sp>the<sp>query<sp>plan\" ) ) ; setAutomaticRewritingInvalidReason ( node ) ; throw Util . FoundOne . NULL ; }", "testMethod": "testQueryCancelTwice ( ) { java . lang . String udfName = org . apache . hive . jdbc . TestJdbcDriver2 . SleepMsUDF . class . getName ( ) ; java . sql . Statement stmt1 = org . apache . hive . jdbc . TestJdbcDriver2 . con . createStatement ( ) ; stmt1 . execute ( ( ( \"create<sp>temporary<sp>function<sp>sleepMsUDF<sp>as<sp>'\" + udfName ) + \"'\" ) ) ; stmt1 . close ( ) ; final java . sql . Statement stmt = org . apache . hive . jdbc . TestJdbcDriver2 . con . createStatement ( ) ; java . lang . Thread tExecute = new java . lang . Thread ( new java . lang . Runnable ( ) { @ org . apache . hive . jdbc . Override public void run ( ) { try { System . out . println ( \"Executing<sp>query:<sp>\" ) ; stmt . executeQuery ( ( ( ( ( ( \"select<sp>sleepMsUDF(t1.under_col,<sp>1)<sp>as<sp>u0,<sp>t1.under_col<sp>as<sp>u1,<sp>\" + \"t2.under_col<sp>as<sp>u2<sp>from<sp>\" ) + ( org . apache . hive . jdbc . TestJdbcDriver2 . tableName ) ) + \"<sp>t1<sp>join<sp>\" ) + ( org . apache . hive . jdbc . TestJdbcDriver2 . tableName ) ) + \"<sp>t2<sp>on<sp>t1.under_col<sp>=<sp>t2.under_col\" ) ) ; org . junit . Assert . fail ( \"Expecting<sp>SQLException\" ) ; } catch ( java . sql . SQLException e ) { \"<AssertPlaceHolder>\" ; System . out . println ( e . toString ( ) ) ; } } } ) ; java . lang . Thread tCancel = new java . lang . Thread ( new java . lang . Runnable ( ) { @ org . apache . hive . jdbc . Override public void run ( ) { try { java . lang . Thread . sleep ( 100 ) ; System . out . println ( \"Cancelling<sp>query:<sp>\" ) ; stmt . cancel ( ) ; } catch ( java . lang . Exception e ) { } try { java . lang . Thread . sleep ( 5 ) ; System . out . println ( \"Cancelling<sp>query<sp>again:<sp>\" ) ; stmt . cancel ( ) ; } catch ( java . lang . Exception e ) { } } } ) ; tExecute . start ( ) ; tCancel . start ( ) ; tExecute . join ( ) ; tCancel . join ( ) ; stmt . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( e )", "total": "testQueryCancelTwice ( ) { java . lang . String udfName = org . apache . hive . jdbc . TestJdbcDriver2 . SleepMsUDF . class . getName ( ) ; java . sql . Statement stmt1 = org . apache . hive . jdbc . TestJdbcDriver2 . con . createStatement ( ) ; stmt1 . execute ( ( ( \"create<sp>temporary<sp>function<sp>sleepMsUDF<sp>as<sp>'\" + udfName ) + \"'\" ) ) ; stmt1 . close ( ) ; final java . sql . Statement stmt = org . apache . hive . jdbc . TestJdbcDriver2 . con . createStatement ( ) ; java . lang . Thread tExecute = new java . lang . Thread ( new java . lang . Runnable ( ) { @ org . apache . hive . jdbc . Override public void run ( ) { try { System . out . println ( \"Executing<sp>query:<sp>\" ) ; stmt . executeQuery ( ( ( ( ( ( \"select<sp>sleepMsUDF(t1.under_col,<sp>1)<sp>as<sp>u0,<sp>t1.under_col<sp>as<sp>u1,<sp>\" + \"t2.under_col<sp>as<sp>u2<sp>from<sp>\" ) + ( org . apache . hive . jdbc . TestJdbcDriver2 . tableName ) ) + \"<sp>t1<sp>join<sp>\" ) + ( org . apache . hive . jdbc . TestJdbcDriver2 . tableName ) ) + \"<sp>t2<sp>on<sp>t1.under_col<sp>=<sp>t2.under_col\" ) ) ; org . junit . Assert . fail ( \"Expecting<sp>SQLException\" ) ; } catch ( java . sql . SQLException e ) { \"<AssertPlaceHolder>\" ; System . out . println ( e . toString ( ) ) ; } } } ) ; java . lang . Thread tCancel = new java . lang . Thread ( new java . lang . Runnable ( ) { @ org . apache . hive . jdbc . Override public void run ( ) { try { java . lang . Thread . sleep ( 100 ) ; System . out . println ( \"Cancelling<sp>query:<sp>\" ) ; stmt . cancel ( ) ; } catch ( java . lang . Exception e ) { } try { java . lang . Thread . sleep ( 5 ) ; System . out . println ( \"Cancelling<sp>query<sp>again:<sp>\" ) ; stmt . cancel ( ) ; } catch ( java . lang . Exception e ) { } } } ) ; tExecute . start ( ) ; tCancel . start ( ) ; tExecute . join ( ) ; tCancel . join ( ) ; stmt . close ( ) ; } fail ( org . apache . calcite . rel . RelNode ) { setResultCacheInvalidReason ( ( ( \"Unsupported<sp>RelNode<sp>type<sp>\" + ( node . getRelTypeName ( ) ) ) + \"<sp>encountered<sp>in<sp>the<sp>query<sp>plan\" ) ) ; setAutomaticRewritingInvalidReason ( node ) ; throw Util . FoundOne . NULL ; }", "answer": "org . junit . Assert . assertNotNull ( e )"}
{"focal": "add ( org . jboss . msc . service . ServiceName ) { final java . util . concurrent . ConcurrentSkipListSet < org . jboss . msc . service . ServiceName > boundServices = this . boundServices ; if ( boundServices . contains ( serviceName ) ) { throw NamingLogger . ROOT_LOGGER . serviceAlreadyBound ( serviceName ) ; } boundServices . add ( serviceName ) ; }", "testMethod": "testUserManagement ( ) { org . picketlink . idm . PartitionManager partitionManager = getPartitionManager ( ) ; org . picketlink . idm . IdentityManager identityManager = partitionManager . createIdentityManager ( ) ; java . lang . String loginName = \"johny\" ; org . picketlink . idm . model . basic . User user = getUser ( identityManager , loginName ) ; if ( user != null ) { identityManager . remove ( user ) ; } identityManager . add ( new org . picketlink . idm . model . basic . User ( loginName ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( getUser ( identityManager , loginName ) )", "total": "testUserManagement ( ) { org . picketlink . idm . PartitionManager partitionManager = getPartitionManager ( ) ; org . picketlink . idm . IdentityManager identityManager = partitionManager . createIdentityManager ( ) ; java . lang . String loginName = \"johny\" ; org . picketlink . idm . model . basic . User user = getUser ( identityManager , loginName ) ; if ( user != null ) { identityManager . remove ( user ) ; } identityManager . add ( new org . picketlink . idm . model . basic . User ( loginName ) ) ; \"<AssertPlaceHolder>\" ; } add ( org . jboss . msc . service . ServiceName ) { final java . util . concurrent . ConcurrentSkipListSet < org . jboss . msc . service . ServiceName > boundServices = this . boundServices ; if ( boundServices . contains ( serviceName ) ) { throw NamingLogger . ROOT_LOGGER . serviceAlreadyBound ( serviceName ) ; } boundServices . add ( serviceName ) ; }", "answer": "org . junit . Assert . assertNotNull ( getUser ( identityManager , loginName ) )"}
{"focal": "toString ( ) { return ( ( ( ( \"statDate=\" + ( statDate ) ) + \",<sp>targetUser=\" ) + ( targetUser ) ) + \",<sp>\" ) + ( super . toString ( ) ) ; }", "testMethod": "menu_click ( ) { java . lang . String para = \"?signature=d919cc8a6361597afa536e906156262cc9cd93df&timestamp=1433903433&nonce=518016546\" ; xmlSb . delete ( 0 , xmlSb . length ( ) ) ; xmlSb . append ( \"<xml>\" ) ; xmlSb . append ( \"<ToUserName><![CDATA[toUser]]></ToUserName>\" ) ; xmlSb . append ( \"<FromUserName><![CDATA[FromUser]]></FromUserName>\" ) ; xmlSb . append ( \"<CreateTime>123456789</CreateTime>\" ) ; xmlSb . append ( \"<MsgType><![CDATA[event]]></MsgType>\" ) ; xmlSb . append ( \"<Event><![CDATA[CLICK]]></Event>\" ) ; xmlSb . append ( \"<EventKey><![CDATA[EVENTKEY]]></EventKey>\" ) ; xmlSb . append ( \"</xml>\" ) ; java . lang . String response = push ( para , xmlSb . toString ( ) ) ; \"<AssertPlaceHolder>\" ; System . out . println ( response ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "menu_click ( ) { java . lang . String para = \"?signature=d919cc8a6361597afa536e906156262cc9cd93df&timestamp=1433903433&nonce=518016546\" ; xmlSb . delete ( 0 , xmlSb . length ( ) ) ; xmlSb . append ( \"<xml>\" ) ; xmlSb . append ( \"<ToUserName><![CDATA[toUser]]></ToUserName>\" ) ; xmlSb . append ( \"<FromUserName><![CDATA[FromUser]]></FromUserName>\" ) ; xmlSb . append ( \"<CreateTime>123456789</CreateTime>\" ) ; xmlSb . append ( \"<MsgType><![CDATA[event]]></MsgType>\" ) ; xmlSb . append ( \"<Event><![CDATA[CLICK]]></Event>\" ) ; xmlSb . append ( \"<EventKey><![CDATA[EVENTKEY]]></EventKey>\" ) ; xmlSb . append ( \"</xml>\" ) ; java . lang . String response = push ( para , xmlSb . toString ( ) ) ; \"<AssertPlaceHolder>\" ; System . out . println ( response ) ; } toString ( ) { return ( ( ( ( \"statDate=\" + ( statDate ) ) + \",<sp>targetUser=\" ) + ( targetUser ) ) + \",<sp>\" ) + ( super . toString ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "select ( ) { org . eclipse . reddeer . swt . impl . tree . AbstractTreeItem . logger . info ( ( \"Select<sp>tree<sp>item<sp>\" + ( getText ( ) ) ) ) ; treeItemHandler . select ( swtWidget ) ; }", "testMethod": "testToolItemInShellToolBarRegexClicked ( ) { openPreferences ( ) ; new org . eclipse . reddeer . swt . impl . tree . DefaultTree ( ) . getItems ( ) . get ( 1 ) . select ( ) ; org . eclipse . reddeer . swt . api . ToolItem ti = new org . eclipse . reddeer . swt . impl . toolbar . DefaultToolItem ( new org . eclipse . reddeer . core . matcher . WithTooltipTextMatcher ( new org . eclipse . reddeer . common . matcher . RegexMatcher ( \".*ack.*\" ) ) ) ; \"<AssertPlaceHolder>\" ; closePreferences ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( ti )", "total": "testToolItemInShellToolBarRegexClicked ( ) { openPreferences ( ) ; new org . eclipse . reddeer . swt . impl . tree . DefaultTree ( ) . getItems ( ) . get ( 1 ) . select ( ) ; org . eclipse . reddeer . swt . api . ToolItem ti = new org . eclipse . reddeer . swt . impl . toolbar . DefaultToolItem ( new org . eclipse . reddeer . core . matcher . WithTooltipTextMatcher ( new org . eclipse . reddeer . common . matcher . RegexMatcher ( \".*ack.*\" ) ) ) ; \"<AssertPlaceHolder>\" ; closePreferences ( ) ; } select ( ) { org . eclipse . reddeer . swt . impl . tree . AbstractTreeItem . logger . info ( ( \"Select<sp>tree<sp>item<sp>\" + ( getText ( ) ) ) ) ; treeItemHandler . select ( swtWidget ) ; }", "answer": "org . junit . Assert . assertNotNull ( ti )"}
{"focal": "get ( byte [ ] , net . mosstest . tests . ReadOptions ) { return new byte [ 33 ] ; }", "testMethod": "testDbLookup ( ) { net . mosstest . servercore . serialization . LevelDBBackedMap < net . mosstest . tests . LevelDBBackedMapTest . TestByteArrayStorable , net . mosstest . tests . LevelDBBackedMapTest . TestByteArrayStorable > map = new net . mosstest . servercore . serialization . LevelDBBackedMap ( new net . mosstest . tests . MockDB ( ) , net . mosstest . tests . LevelDBBackedMapTest . TestByteArrayStorable :: new ) ; net . mosstest . tests . LevelDBBackedMapTest . TestByteArrayStorable vOut = map . get ( new net . mosstest . tests . LevelDBBackedMapTest . TestByteArrayStorable ( new byte [ ] { 1 , 2 } ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( vOut )", "total": "testDbLookup ( ) { net . mosstest . servercore . serialization . LevelDBBackedMap < net . mosstest . tests . LevelDBBackedMapTest . TestByteArrayStorable , net . mosstest . tests . LevelDBBackedMapTest . TestByteArrayStorable > map = new net . mosstest . servercore . serialization . LevelDBBackedMap ( new net . mosstest . tests . MockDB ( ) , net . mosstest . tests . LevelDBBackedMapTest . TestByteArrayStorable :: new ) ; net . mosstest . tests . LevelDBBackedMapTest . TestByteArrayStorable vOut = map . get ( new net . mosstest . tests . LevelDBBackedMapTest . TestByteArrayStorable ( new byte [ ] { 1 , 2 } ) ) ; \"<AssertPlaceHolder>\" ; } get ( byte [ ] , net . mosstest . tests . ReadOptions ) { return new byte [ 33 ] ; }", "answer": "org . junit . Assert . assertNotNull ( vOut )"}
{"focal": "getName ( ) { return name ; }", "testMethod": "testBindingExists ( ) { javax . naming . InitialContext context = new javax . naming . InitialContext ( ) ; java . lang . Object result = context . lookup ( ( ( \"java:module/env/\" + ( org . jboss . as . test . integration . ee . injection . resource . noncomponent . ComponentResourceInjection . class . getName ( ) ) ) + \"/userTransaction\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testBindingExists ( ) { javax . naming . InitialContext context = new javax . naming . InitialContext ( ) ; java . lang . Object result = context . lookup ( ( ( \"java:module/env/\" + ( org . jboss . as . test . integration . ee . injection . resource . noncomponent . ComponentResourceInjection . class . getName ( ) ) ) + \"/userTransaction\" ) ) ; \"<AssertPlaceHolder>\" ; } getName ( ) { return name ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "createOrReplace ( ) { java . util . List < io . fabric8 . kubernetes . api . model . HasMetadata > result = new java . util . ArrayList ( ) ; for ( io . fabric8 . kubernetes . api . model . HasMetadata meta : io . fabric8 . kubernetes . client . dsl . internal . NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl . acceptVisitors ( io . fabric8 . kubernetes . client . dsl . internal . NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl . asHasMetadata ( item , true ) , visitors ) ) { io . fabric8 . kubernetes . client . ResourceHandler < io . fabric8 . kubernetes . api . model . HasMetadata , io . fabric8 . kubernetes . client . HasMetadataVisitiableBuilder > h = io . fabric8 . kubernetes . client . dsl . internal . NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl . handlerOf ( meta ) ; io . fabric8 . kubernetes . api . model . HasMetadata r = h . reload ( client , config , meta . getMetadata ( ) . getNamespace ( ) , meta ) ; java . lang . String namespaceToUse = meta . getMetadata ( ) . getNamespace ( ) ; if ( r == null ) { io . fabric8 . kubernetes . api . model . HasMetadata created = h . create ( client , config , namespaceToUse , meta ) ; if ( created != null ) { result . add ( created ) ; } } else if ( deletingExisting ) { java . lang . Boolean deleted = h . delete ( client , config , namespaceToUse , meta ) ; if ( ! deleted ) { throw new io . fabric8 . kubernetes . client . KubernetesClientException ( ( \"Failed<sp>to<sp>delete<sp>existing<sp>item:\" + meta ) ) ; } io . fabric8 . kubernetes . api . model . HasMetadata created = h . create ( client , config , namespaceToUse , meta ) ; if ( created != null ) { result . add ( created ) ; } } else if ( io . fabric8 . kubernetes . client . utils . ResourceCompare . equals ( r , meta ) ) { io . fabric8 . kubernetes . client . dsl . internal . NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl . LOGGER . debug ( \"Item<sp>has<sp>not<sp>changed.<sp>Skipping\" ) ; } else { io . fabric8 . kubernetes . api . model . HasMetadata replaced = h . replace ( client , config , namespaceToUse , meta ) ; if ( replaced != null ) { result . add ( replaced ) ; } } } return result ; }", "testMethod": "testCreateWithHandler ( ) { io . fabric8 . openshift . api . model . Template template = new io . fabric8 . openshift . api . model . TemplateBuilder ( ) . editOrNewMetadata ( ) . withName ( \"tmpl3\" ) . withNamespace ( \"test\" ) . endMetadata ( ) . build ( ) ; server . expect ( ) . withPath ( \"/oapi/v1/namespaces/test/templates\" ) . andReturn ( 200 , template ) . once ( ) ; server . expect ( ) . withPath ( \"/oapi/v1/namespaces/test/templates/tmpl3\" ) . andReturn ( 404 , new io . fabric8 . kubernetes . api . model . StatusBuilder ( ) . withCode ( 404 ) . build ( ) ) . once ( ) ; io . fabric8 . openshift . client . OpenShiftClient client = server . getOpenshiftClient ( ) ; io . fabric8 . openshift . api . model . Template created = client . resource ( template ) . createOrReplace ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( created )", "total": "testCreateWithHandler ( ) { io . fabric8 . openshift . api . model . Template template = new io . fabric8 . openshift . api . model . TemplateBuilder ( ) . editOrNewMetadata ( ) . withName ( \"tmpl3\" ) . withNamespace ( \"test\" ) . endMetadata ( ) . build ( ) ; server . expect ( ) . withPath ( \"/oapi/v1/namespaces/test/templates\" ) . andReturn ( 200 , template ) . once ( ) ; server . expect ( ) . withPath ( \"/oapi/v1/namespaces/test/templates/tmpl3\" ) . andReturn ( 404 , new io . fabric8 . kubernetes . api . model . StatusBuilder ( ) . withCode ( 404 ) . build ( ) ) . once ( ) ; io . fabric8 . openshift . client . OpenShiftClient client = server . getOpenshiftClient ( ) ; io . fabric8 . openshift . api . model . Template created = client . resource ( template ) . createOrReplace ( ) ; \"<AssertPlaceHolder>\" ; } createOrReplace ( ) { java . util . List < io . fabric8 . kubernetes . api . model . HasMetadata > result = new java . util . ArrayList ( ) ; for ( io . fabric8 . kubernetes . api . model . HasMetadata meta : io . fabric8 . kubernetes . client . dsl . internal . NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl . acceptVisitors ( io . fabric8 . kubernetes . client . dsl . internal . NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl . asHasMetadata ( item , true ) , visitors ) ) { io . fabric8 . kubernetes . client . ResourceHandler < io . fabric8 . kubernetes . api . model . HasMetadata , io . fabric8 . kubernetes . client . HasMetadataVisitiableBuilder > h = io . fabric8 . kubernetes . client . dsl . internal . NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl . handlerOf ( meta ) ; io . fabric8 . kubernetes . api . model . HasMetadata r = h . reload ( client , config , meta . getMetadata ( ) . getNamespace ( ) , meta ) ; java . lang . String namespaceToUse = meta . getMetadata ( ) . getNamespace ( ) ; if ( r == null ) { io . fabric8 . kubernetes . api . model . HasMetadata created = h . create ( client , config , namespaceToUse , meta ) ; if ( created != null ) { result . add ( created ) ; } } else if ( deletingExisting ) { java . lang . Boolean deleted = h . delete ( client , config , namespaceToUse , meta ) ; if ( ! deleted ) { throw new io . fabric8 . kubernetes . client . KubernetesClientException ( ( \"Failed<sp>to<sp>delete<sp>existing<sp>item:\" + meta ) ) ; } io . fabric8 . kubernetes . api . model . HasMetadata created = h . create ( client , config , namespaceToUse , meta ) ; if ( created != null ) { result . add ( created ) ; } } else if ( io . fabric8 . kubernetes . client . utils . ResourceCompare . equals ( r , meta ) ) { io . fabric8 . kubernetes . client . dsl . internal . NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl . LOGGER . debug ( \"Item<sp>has<sp>not<sp>changed.<sp>Skipping\" ) ; } else { io . fabric8 . kubernetes . api . model . HasMetadata replaced = h . replace ( client , config , namespaceToUse , meta ) ; if ( replaced != null ) { result . add ( replaced ) ; } } } return result ; }", "answer": "org . junit . Assert . assertNotNull ( created )"}
{"focal": "getAsString ( int ) { java . lang . Object v = get ( index ) ; if ( v != null ) { return v . toString ( ) ; } return null ; }", "testMethod": "testGetActivity ( ) { com . ibm . sbt . automation . core . test . pageobjects . JavaScriptPreviewPage previewPage = executeSnippet ( com . ibm . sbt . test . js . connections . activities . api . GetActivityNode . SNIPPET_ID ) ; com . ibm . commons . util . io . json . JsonJavaObject json = previewPage . getJson ( ) ; java . lang . String activityNodeId = json . getAsString ( \"getActivityNodeUuid\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( activityNodeId )", "total": "testGetActivity ( ) { com . ibm . sbt . automation . core . test . pageobjects . JavaScriptPreviewPage previewPage = executeSnippet ( com . ibm . sbt . test . js . connections . activities . api . GetActivityNode . SNIPPET_ID ) ; com . ibm . commons . util . io . json . JsonJavaObject json = previewPage . getJson ( ) ; java . lang . String activityNodeId = json . getAsString ( \"getActivityNodeUuid\" ) ; \"<AssertPlaceHolder>\" ; } getAsString ( int ) { java . lang . Object v = get ( index ) ; if ( v != null ) { return v . toString ( ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( activityNodeId )"}
{"focal": "getConnectionUrl ( ) { return connectionUrl ; }", "testMethod": "testStart ( ) { databaseServer . start ( ) ; java . lang . String connectionUrl = databaseServer . getConnectionUrl ( ) ; java . sql . Connection connection = java . sql . DriverManager . getConnection ( connectionUrl ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( connection )", "total": "testStart ( ) { databaseServer . start ( ) ; java . lang . String connectionUrl = databaseServer . getConnectionUrl ( ) ; java . sql . Connection connection = java . sql . DriverManager . getConnection ( connectionUrl ) ; \"<AssertPlaceHolder>\" ; } getConnectionUrl ( ) { return connectionUrl ; }", "answer": "org . junit . Assert . assertNotNull ( connection )"}
{"focal": "script ( java . lang . String ) { return builder ( ) . idOrCode ( idOrCode ) . build ( ) ; }", "testMethod": "testScript ( ) { com . liferay . portal . search . script . Script script = com . liferay . portal . search . script . test . ScriptsInstantiationTest . _scripts . script ( \"Math.min(1,<sp>1)\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( script )", "total": "testScript ( ) { com . liferay . portal . search . script . Script script = com . liferay . portal . search . script . test . ScriptsInstantiationTest . _scripts . script ( \"Math.min(1,<sp>1)\" ) ; \"<AssertPlaceHolder>\" ; } script ( java . lang . String ) { return builder ( ) . idOrCode ( idOrCode ) . build ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( script )"}
{"focal": "builder ( ) { return new org . nmdp . ngs . variant . vcf . VcfGenotype . Builder ( ) ; }", "testMethod": "testBuilder ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . nmdp . ngs . variant . vcf . VcfGenotype . builder ( ) )", "total": "testBuilder ( ) { \"<AssertPlaceHolder>\" ; } builder ( ) { return new org . nmdp . ngs . variant . vcf . VcfGenotype . Builder ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( org . nmdp . ngs . variant . vcf . VcfGenotype . builder ( ) )"}
{"focal": "getRepository ( java . io . File ) { return org . opengrok . indexer . history . RepositoryFactory . getRepository ( file , false ) ; }", "testMethod": "testDetermineCurrentVersion ( ) { java . io . File root = new java . io . File ( org . opengrok . indexer . history . GitRepositoryTest . repository . getSourceRoot ( ) , \"git\" ) ; org . opengrok . indexer . history . GitRepository gitrepo = ( ( org . opengrok . indexer . history . GitRepository ) ( org . opengrok . indexer . history . RepositoryFactory . getRepository ( root ) ) ) ; java . lang . String ver = gitrepo . determineCurrentVersion ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ver )", "total": "testDetermineCurrentVersion ( ) { java . io . File root = new java . io . File ( org . opengrok . indexer . history . GitRepositoryTest . repository . getSourceRoot ( ) , \"git\" ) ; org . opengrok . indexer . history . GitRepository gitrepo = ( ( org . opengrok . indexer . history . GitRepository ) ( org . opengrok . indexer . history . RepositoryFactory . getRepository ( root ) ) ) ; java . lang . String ver = gitrepo . determineCurrentVersion ( ) ; \"<AssertPlaceHolder>\" ; } getRepository ( java . io . File ) { return org . opengrok . indexer . history . RepositoryFactory . getRepository ( file , false ) ; }", "answer": "org . junit . Assert . assertNotNull ( ver )"}
{"focal": "getOMMetadataManagerInstance ( ) { return omMetadataManager ; }", "testMethod": "testGetOMMetadataManagerInstance ( ) { org . apache . hadoop . ozone . om . OMMetadataManager omMetaMgr = ozoneManagerServiceProvider . getOMMetadataManagerInstance ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( omMetaMgr )", "total": "testGetOMMetadataManagerInstance ( ) { org . apache . hadoop . ozone . om . OMMetadataManager omMetaMgr = ozoneManagerServiceProvider . getOMMetadataManagerInstance ( ) ; \"<AssertPlaceHolder>\" ; } getOMMetadataManagerInstance ( ) { return omMetadataManager ; }", "answer": "org . junit . Assert . assertNotNull ( omMetaMgr )"}
{"focal": "getInputStream ( ) { return inputStream ; }", "testMethod": "testWhileMapping2 ( ) { org . nd4j . linalg . factory . Nd4j . create ( 1 ) ; lombok . val tg = org . nd4j . imports . graphmapper . tf . TFGraphMapper . getInstance ( ) . importGraph ( new org . nd4j . linalg . io . ClassPathResource ( \"tf_graphs/examples/simplewhile_0/frozen_model.pb\" ) . getInputStream ( ) ) ; \"<AssertPlaceHolder>\" ; lombok . val input = org . nd4j . linalg . factory . Nd4j . trueScalar ( 4.0 ) ; tg . associateArrayWithVariable ( input , tg . getVariable ( \"input_1\" ) ) ; tg . asFlatFile ( new java . io . File ( \"../../../libnd4j/tests_cpu/resources/simplewhile_0_4.fb\" ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( tg )", "total": "testWhileMapping2 ( ) { org . nd4j . linalg . factory . Nd4j . create ( 1 ) ; lombok . val tg = org . nd4j . imports . graphmapper . tf . TFGraphMapper . getInstance ( ) . importGraph ( new org . nd4j . linalg . io . ClassPathResource ( \"tf_graphs/examples/simplewhile_0/frozen_model.pb\" ) . getInputStream ( ) ) ; \"<AssertPlaceHolder>\" ; lombok . val input = org . nd4j . linalg . factory . Nd4j . trueScalar ( 4.0 ) ; tg . associateArrayWithVariable ( input , tg . getVariable ( \"input_1\" ) ) ; tg . asFlatFile ( new java . io . File ( \"../../../libnd4j/tests_cpu/resources/simplewhile_0_4.fb\" ) ) ; } getInputStream ( ) { return inputStream ; }", "answer": "org . junit . Assert . assertNotNull ( tg )"}
{"focal": "createDriver ( java . util . Properties ) { org . apache . derby . jdbc . ClientDriver driver = new org . apache . derby . jdbc . ClientDriver ( ) ; return driver ; }", "testMethod": "testDriver ( ) { org . ops4j . pax . jdbc . jtds . impl . JTDSDataSourceFactory dsf = new org . ops4j . pax . jdbc . jtds . impl . JTDSDataSourceFactory ( ) ; java . util . Properties props = testProps ( ) ; net . sourceforge . jtds . jdbc . Driver driver = dsf . createDriver ( props ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( driver )", "total": "testDriver ( ) { org . ops4j . pax . jdbc . jtds . impl . JTDSDataSourceFactory dsf = new org . ops4j . pax . jdbc . jtds . impl . JTDSDataSourceFactory ( ) ; java . util . Properties props = testProps ( ) ; net . sourceforge . jtds . jdbc . Driver driver = dsf . createDriver ( props ) ; \"<AssertPlaceHolder>\" ; } createDriver ( java . util . Properties ) { org . apache . derby . jdbc . ClientDriver driver = new org . apache . derby . jdbc . ClientDriver ( ) ; return driver ; }", "answer": "org . junit . Assert . assertNotNull ( driver )"}
{"focal": "createTravelDisutility ( org . matsim . core . router . util . TravelTime ) { return new org . matsim . core . router . util . TravelDisutility ( ) { @ org . matsim . core . controler . Override public double getLinkTravelDisutility ( org . matsim . api . core . v01 . network . Link link , double time , org . matsim . api . core . v01 . population . Person person , org . matsim . vehicles . Vehicle vehicle ) { return 37.0 ; } @ org . matsim . core . controler . Override public double getLinkMinimumTravelDisutility ( org . matsim . api . core . v01 . network . Link link ) { return 37.0 ; } } ; }", "testMethod": "testRouterCreation ( ) { for ( org . matsim . core . config . groups . ControlerConfigGroup . RoutingAlgorithmType routingAlgorithmType : ControlerConfigGroup . RoutingAlgorithmType . values ( ) ) { org . matsim . core . config . Config config = org . matsim . core . config . ConfigUtils . createConfig ( ) ; config . controler ( ) . setRoutingAlgorithmType ( routingAlgorithmType ) ; org . matsim . api . core . v01 . Scenario scenario = org . matsim . core . scenario . ScenarioUtils . createScenario ( config ) ; org . matsim . core . router . util . LeastCostPathCalculatorFactory defaultLeastCostPathCalculatorFactory = org . matsim . core . router . TripRouterFactoryBuilderWithDefaults . createDefaultLeastCostPathCalculatorFactory ( scenario ) ; org . matsim . core . router . util . LeastCostPathCalculator pathCalculator = defaultLeastCostPathCalculatorFactory . createPathCalculator ( scenario . getNetwork ( ) , org . matsim . core . controler . ControlerDefaults . createDefaultTravelDisutilityFactory ( scenario ) . createTravelDisutility ( new org . matsim . core . trafficmonitoring . FreeSpeedTravelTime ( ) ) , new org . matsim . core . trafficmonitoring . FreeSpeedTravelTime ( ) ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( pathCalculator )", "total": "testRouterCreation ( ) { for ( org . matsim . core . config . groups . ControlerConfigGroup . RoutingAlgorithmType routingAlgorithmType : ControlerConfigGroup . RoutingAlgorithmType . values ( ) ) { org . matsim . core . config . Config config = org . matsim . core . config . ConfigUtils . createConfig ( ) ; config . controler ( ) . setRoutingAlgorithmType ( routingAlgorithmType ) ; org . matsim . api . core . v01 . Scenario scenario = org . matsim . core . scenario . ScenarioUtils . createScenario ( config ) ; org . matsim . core . router . util . LeastCostPathCalculatorFactory defaultLeastCostPathCalculatorFactory = org . matsim . core . router . TripRouterFactoryBuilderWithDefaults . createDefaultLeastCostPathCalculatorFactory ( scenario ) ; org . matsim . core . router . util . LeastCostPathCalculator pathCalculator = defaultLeastCostPathCalculatorFactory . createPathCalculator ( scenario . getNetwork ( ) , org . matsim . core . controler . ControlerDefaults . createDefaultTravelDisutilityFactory ( scenario ) . createTravelDisutility ( new org . matsim . core . trafficmonitoring . FreeSpeedTravelTime ( ) ) , new org . matsim . core . trafficmonitoring . FreeSpeedTravelTime ( ) ) ; \"<AssertPlaceHolder>\" ; } } createTravelDisutility ( org . matsim . core . router . util . TravelTime ) { return new org . matsim . core . router . util . TravelDisutility ( ) { @ org . matsim . core . controler . Override public double getLinkTravelDisutility ( org . matsim . api . core . v01 . network . Link link , double time , org . matsim . api . core . v01 . population . Person person , org . matsim . vehicles . Vehicle vehicle ) { return 37.0 ; } @ org . matsim . core . controler . Override public double getLinkMinimumTravelDisutility ( org . matsim . api . core . v01 . network . Link link ) { return 37.0 ; } } ; }", "answer": "org . junit . Assert . assertNotNull ( pathCalculator )"}
{"focal": "toShape ( java . lang . Object ) { if ( obj instanceof org . openspaces . spatial . spatial4j . Spatial4jShapeProvider ) return ( ( org . openspaces . spatial . spatial4j . Spatial4jShapeProvider ) ( obj ) ) . getSpatial4jShape ( _luceneConfiguration . getSpatialContext ( ) ) ; throw new java . lang . IllegalArgumentException ( ( ( \"Unsupported<sp>shape<sp>[\" + ( obj . getClass ( ) . getName ( ) ) ) + \"]\" ) ) ; }", "testMethod": "testClosedPolygon ( ) { org . openspaces . spatial . shapes . Polygon polygonWithCloseRing = org . openspaces . spatial . ShapeFactory . polygon ( org . openspaces . spatial . ShapeFactory . point ( 75.05722045898438 , 41.14039880964587 ) , org . openspaces . spatial . ShapeFactory . point ( 73.30490112304686 , 41.15797827873605 ) , org . openspaces . spatial . ShapeFactory . point ( 73.64822387695311 , 40.447992135544304 ) , org . openspaces . spatial . ShapeFactory . point ( 74.87319946289062 , 40.50544628405211 ) , org . openspaces . spatial . ShapeFactory . point ( 75.05722045898438 , 41.14039880964587 ) ) ; org . locationtech . spatial4j . shape . Shape spatial4jPolygon = _handler . toShape ( polygonWithCloseRing ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( spatial4jPolygon )", "total": "testClosedPolygon ( ) { org . openspaces . spatial . shapes . Polygon polygonWithCloseRing = org . openspaces . spatial . ShapeFactory . polygon ( org . openspaces . spatial . ShapeFactory . point ( 75.05722045898438 , 41.14039880964587 ) , org . openspaces . spatial . ShapeFactory . point ( 73.30490112304686 , 41.15797827873605 ) , org . openspaces . spatial . ShapeFactory . point ( 73.64822387695311 , 40.447992135544304 ) , org . openspaces . spatial . ShapeFactory . point ( 74.87319946289062 , 40.50544628405211 ) , org . openspaces . spatial . ShapeFactory . point ( 75.05722045898438 , 41.14039880964587 ) ) ; org . locationtech . spatial4j . shape . Shape spatial4jPolygon = _handler . toShape ( polygonWithCloseRing ) ; \"<AssertPlaceHolder>\" ; } toShape ( java . lang . Object ) { if ( obj instanceof org . openspaces . spatial . spatial4j . Spatial4jShapeProvider ) return ( ( org . openspaces . spatial . spatial4j . Spatial4jShapeProvider ) ( obj ) ) . getSpatial4jShape ( _luceneConfiguration . getSpatialContext ( ) ) ; throw new java . lang . IllegalArgumentException ( ( ( \"Unsupported<sp>shape<sp>[\" + ( obj . getClass ( ) . getName ( ) ) ) + \"]\" ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( spatial4jPolygon )"}
{"focal": "read ( int ) { return this . getContent ( ) . toString ( ) . substring ( 0 , limit ) ; }", "testMethod": "givenClarkKentId_whenRead_thenReturnsClarkKent ( ) { com . baeldung . couchbase . spring . person . Person person = personService . read ( com . baeldung . couchbase . spring . person . PersonCrudServiceLiveTest . CLARK_KENT_ID ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( person )", "total": "givenClarkKentId_whenRead_thenReturnsClarkKent ( ) { com . baeldung . couchbase . spring . person . Person person = personService . read ( com . baeldung . couchbase . spring . person . PersonCrudServiceLiveTest . CLARK_KENT_ID ) ; \"<AssertPlaceHolder>\" ; } read ( int ) { return this . getContent ( ) . toString ( ) . substring ( 0 , limit ) ; }", "answer": "org . junit . Assert . assertNotNull ( person )"}
{"focal": "getVertex ( com . tinkerpop . blueprints . Direction ) { if ( null == direction ) return null ; int idx = 0 ; java . lang . String id = ( ( java . lang . String ) ( this . getId ( ) ) ) ; java . lang . String vertexId = null ; switch ( direction ) { case IN : idx = id . indexOf ( HBaseGraphConstants . HBASE_GRAPH_TABLE_EDGE_DELIMITER_1 ) ; vertexId = id . substring ( 0 , idx ) ; break ; case OUT : idx = id . indexOf ( HBaseGraphConstants . HBASE_GRAPH_TABLE_EDGE_DELIMITER_1 ) ; idx = id . indexOf ( HBaseGraphConstants . HBASE_GRAPH_TABLE_EDGE_DELIMITER_2 , ( idx + ( HBaseGraphConstants . HBASE_GRAPH_TABLE_EDGE_DELIMITER_1 . length ( ) ) ) ) ; vertexId = id . substring ( ( idx + ( HBaseGraphConstants . HBASE_GRAPH_TABLE_EDGE_DELIMITER_2 . length ( ) ) ) , id . length ( ) ) ; break ; default : throw new java . lang . IllegalArgumentException ( ( ( \"direction:\" + direction ) + \"<sp>is<sp>not<sp>supported\" ) ) ; } return this . getGraph ( ) . getVertex ( vertexId ) ; }", "testMethod": "testGetVerticesDirectionInStringArray ( ) { org . trend . hgraph . Vertex vertex = this . graph . getVertex ( \"40004\" ) ; System . out . println ( ( \"vertex=\" + vertex ) ) ; \"<AssertPlaceHolder>\" ; @ org . trend . hgraph . SuppressWarnings ( \"unused\" ) java . lang . Iterable < com . tinkerpop . blueprints . Vertex > vertices = vertex . getVertices ( Direction . IN , \"created\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( vertex )", "total": "testGetVerticesDirectionInStringArray ( ) { org . trend . hgraph . Vertex vertex = this . graph . getVertex ( \"40004\" ) ; System . out . println ( ( \"vertex=\" + vertex ) ) ; \"<AssertPlaceHolder>\" ; @ org . trend . hgraph . SuppressWarnings ( \"unused\" ) java . lang . Iterable < com . tinkerpop . blueprints . Vertex > vertices = vertex . getVertices ( Direction . IN , \"created\" ) ; } getVertex ( com . tinkerpop . blueprints . Direction ) { if ( null == direction ) return null ; int idx = 0 ; java . lang . String id = ( ( java . lang . String ) ( this . getId ( ) ) ) ; java . lang . String vertexId = null ; switch ( direction ) { case IN : idx = id . indexOf ( HBaseGraphConstants . HBASE_GRAPH_TABLE_EDGE_DELIMITER_1 ) ; vertexId = id . substring ( 0 , idx ) ; break ; case OUT : idx = id . indexOf ( HBaseGraphConstants . HBASE_GRAPH_TABLE_EDGE_DELIMITER_1 ) ; idx = id . indexOf ( HBaseGraphConstants . HBASE_GRAPH_TABLE_EDGE_DELIMITER_2 , ( idx + ( HBaseGraphConstants . HBASE_GRAPH_TABLE_EDGE_DELIMITER_1 . length ( ) ) ) ) ; vertexId = id . substring ( ( idx + ( HBaseGraphConstants . HBASE_GRAPH_TABLE_EDGE_DELIMITER_2 . length ( ) ) ) , id . length ( ) ) ; break ; default : throw new java . lang . IllegalArgumentException ( ( ( \"direction:\" + direction ) + \"<sp>is<sp>not<sp>supported\" ) ) ; } return this . getGraph ( ) . getVertex ( vertexId ) ; }", "answer": "org . junit . Assert . assertNotNull ( vertex )"}
{"focal": "hashCode ( ) { return hashcode ; }", "testMethod": "shouldReturnANotNullHashCode ( ) { org . apache . ibatis . session . SqlSession session = org . apache . ibatis . binding . BindingTest . sqlSessionFactory . openSession ( ) ; try { org . apache . ibatis . binding . BoundBlogMapper mapper = session . getMapper ( org . apache . ibatis . binding . BoundBlogMapper . class ) ; \"<AssertPlaceHolder>\" ; } finally { session . close ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( mapper . hashCode ( ) )", "total": "shouldReturnANotNullHashCode ( ) { org . apache . ibatis . session . SqlSession session = org . apache . ibatis . binding . BindingTest . sqlSessionFactory . openSession ( ) ; try { org . apache . ibatis . binding . BoundBlogMapper mapper = session . getMapper ( org . apache . ibatis . binding . BoundBlogMapper . class ) ; \"<AssertPlaceHolder>\" ; } finally { session . close ( ) ; } } hashCode ( ) { return hashcode ; }", "answer": "org . junit . Assert . assertNotNull ( mapper . hashCode ( ) )"}
{"focal": "typeCheckExpr ( org . arend . term . concrete . Concrete$Expression , org . arend . core . expr . Expression ) { return typeCheckExpr ( new java . util . HashMap ( ) , expression , expectedType , 0 ) ; }", "testMethod": "constantTyped ( ) { org . arend . typechecking . visitor . CheckTypeVisitor . Result result = typeCheckExpr ( \"\\\\lam<sp>(x<sp>y<sp>:<sp>Nat)<sp>=><sp>x\" , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "constantTyped ( ) { org . arend . typechecking . visitor . CheckTypeVisitor . Result result = typeCheckExpr ( \"\\\\lam<sp>(x<sp>y<sp>:<sp>Nat)<sp>=><sp>x\" , null ) ; \"<AssertPlaceHolder>\" ; } typeCheckExpr ( org . arend . term . concrete . Concrete$Expression , org . arend . core . expr . Expression ) { return typeCheckExpr ( new java . util . HashMap ( ) , expression , expectedType , 0 ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getJobStatus ( org . sagebionetworks . repo . model . UserInfo , java . lang . String ) { if ( userInfo == null ) throw new java . lang . IllegalArgumentException ( \"UserInfo<sp>cannot<sp>be<sp>null\" ) ; org . sagebionetworks . repo . model . asynch . AsynchronousJobStatus status = lookupJobStatus ( jobId ) ; if ( ! ( authorizationManager . isUserCreatorOrAdmin ( userInfo , status . getStartedByUserId ( ) . toString ( ) ) ) ) { throw new org . sagebionetworks . repo . model . UnauthorizedException ( \"Only<sp>the<sp>user<sp>that<sp>created<sp>a<sp>job<sp>can<sp>access<sp>the<sp>job's<sp>status.\" ) ; } return status ; }", "testMethod": "testGetJobStatusReadOnlyFailed ( ) { when ( mockAuthorizationManager . isUserCreatorOrAdmin ( any ( org . sagebionetworks . repo . model . UserInfo . class ) , anyString ( ) ) ) . thenReturn ( true ) ; when ( mockStackStatusDao . getCurrentStatus ( ) ) . thenReturn ( StatusEnum . READ_ONLY ) ; org . sagebionetworks . repo . model . asynch . AsynchronousJobStatus status = new org . sagebionetworks . repo . model . asynch . AsynchronousJobStatus ( ) ; status . setStartedByUserId ( user . getId ( ) ) ; status . setJobId ( \"999\" ) ; status . setJobState ( AsynchJobState . FAILED ) ; when ( mockAsynchJobStatusDao . getJobStatus ( anyString ( ) ) ) . thenReturn ( status ) ; org . sagebionetworks . repo . model . asynch . AsynchronousJobStatus result = manager . getJobStatus ( user , \"999\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetJobStatusReadOnlyFailed ( ) { when ( mockAuthorizationManager . isUserCreatorOrAdmin ( any ( org . sagebionetworks . repo . model . UserInfo . class ) , anyString ( ) ) ) . thenReturn ( true ) ; when ( mockStackStatusDao . getCurrentStatus ( ) ) . thenReturn ( StatusEnum . READ_ONLY ) ; org . sagebionetworks . repo . model . asynch . AsynchronousJobStatus status = new org . sagebionetworks . repo . model . asynch . AsynchronousJobStatus ( ) ; status . setStartedByUserId ( user . getId ( ) ) ; status . setJobId ( \"999\" ) ; status . setJobState ( AsynchJobState . FAILED ) ; when ( mockAsynchJobStatusDao . getJobStatus ( anyString ( ) ) ) . thenReturn ( status ) ; org . sagebionetworks . repo . model . asynch . AsynchronousJobStatus result = manager . getJobStatus ( user , \"999\" ) ; \"<AssertPlaceHolder>\" ; } getJobStatus ( org . sagebionetworks . repo . model . UserInfo , java . lang . String ) { if ( userInfo == null ) throw new java . lang . IllegalArgumentException ( \"UserInfo<sp>cannot<sp>be<sp>null\" ) ; org . sagebionetworks . repo . model . asynch . AsynchronousJobStatus status = lookupJobStatus ( jobId ) ; if ( ! ( authorizationManager . isUserCreatorOrAdmin ( userInfo , status . getStartedByUserId ( ) . toString ( ) ) ) ) { throw new org . sagebionetworks . repo . model . UnauthorizedException ( \"Only<sp>the<sp>user<sp>that<sp>created<sp>a<sp>job<sp>can<sp>access<sp>the<sp>job's<sp>status.\" ) ; } return status ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getEntity ( ) { return entity ; }", "testMethod": "testServices ( ) { org . apache . usergrid . services . ServiceInvocationIT . logger . info ( \"select<sp>*<sp>where<sp>name='axis*'\" 9 ) ; app . put ( \"select<sp>*<sp>where<sp>name='axis*'\" 0 , \"edanuff\" ) ; app . put ( \"foo\" 4 , \"foo\" 5 ) ; org . apache . usergrid . services . Entity user = app . testRequest ( ServiceAction . POST , 1 , \"foo\" 8 ) . getEntity ( ) ; \"<AssertPlaceHolder>\" ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 ) ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 , user . getUuid ( ) ) ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='axis*'\" 8 ) ) ; app . put ( \"foo\" , \"bar\" ) ; app . testRequest ( ServiceAction . PUT , 1 , \"foo\" 8 , user . getUuid ( ) ) ; app . put ( \"foo\" 0 , \"select<sp>*<sp>where<sp>name='dylan'\" 1 ) ; app . testRequest ( ServiceAction . POST , 1 , \"select<sp>*<sp>where<sp>name='axis*'\" 5 ) ; app . testRequest ( ServiceAction . GET , 0 , \"foo\" 8 , user . getUuid ( ) , \"messages\" ) ; app . testRequest ( ServiceAction . GET , 0 , \"foo\" 8 , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='axis*'\" 8 ) , \"messages\" ) ; org . apache . usergrid . services . Entity cat = app . doCreate ( \"foo\" 9 , \"foo\" 2 ) ; app . testRequest ( ServiceAction . GET , 2 , \"select<sp>*<sp>where<sp>name='axis*'\" 5 ) ; app . testRequest ( ServiceAction . GET , 1 , \"select<sp>*<sp>where<sp>name='axis*'\" 5 , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='dylan'\" ) ) ; app . testRequest ( ServiceAction . POST , 1 , null , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , cat . getUuid ( ) ) ; app . waitForQueueDrainAndRefreshIndex ( 250 ) ; org . apache . usergrid . services . Entity restaurant = app . doCreate ( \"foo\" 1 , \"select<sp>*<sp>where<sp>name='axis*'\" 3 ) ; app . createConnection ( user , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , restaurant ) ; restaurant = app . doCreate ( \"foo\" 1 , \"select<sp>*<sp>where<sp>name='dylan'\" 0 ) ; app . testRequest ( ServiceAction . GET , 2 , \"restaurants\" ) ; app . testRequest ( ServiceAction . POST , 1 , \"foo\" 8 , user . getUuid ( ) , \"foo\" 7 , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , restaurant . getUuid ( ) ) ; app . waitForQueueDrainAndRefreshIndex ( 250 ) ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"select<sp>*<sp>where<sp>name='axis*'\" 5 ) ; app . testRequest ( ServiceAction . GET , 3 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 ) ; app . testRequest ( ServiceAction . GET , 2 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"restaurants\" ) ; java . lang . Thread . sleep ( 10000 ) ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"restaurants\" , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='axis*'\" 7 ) ) ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='axis*'\" ) ) ; app . put ( \"select<sp>*<sp>where<sp>name='axis*'\" 4 , \"blacknwhite\" ) ; app . testRequest ( ServiceAction . PUT , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , cat . getUuid ( ) ) ; app . put ( \"foo\" 6 , \"select<sp>*<sp>where<sp>name='axis*'\" 6 ) ; app . testRequest ( ServiceAction . PUT , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"select<sp>*<sp>where<sp>name='axis*'\" 5 , \"foo\" 2 ) ; app . put ( \"foo\" 3 , \"Coffee\" ) ; app . testRequest ( ServiceAction . PUT , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"restaurants\" , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='axis*'\" 7 ) ) ; app . testRequest ( ServiceAction . DELETE , 1 , null , \"foo\" 8 , user . getUuid ( ) , \"foo\" 7 , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , restaurant . getUuid ( ) ) ; app . testRequest ( ServiceAction . GET , 1 , null , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"restaurants\" ) ; java . util . UUID uuid = org . apache . usergrid . persistence . model . util . UUIDGenerator . newTimeUUID ( ) ; app . put ( \"select<sp>*<sp>where<sp>name='axis*'\" 1 , 5 ) ; app . testRequest ( ServiceAction . PUT , 1 , \"devices\" , uuid ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( user )", "total": "testServices ( ) { org . apache . usergrid . services . ServiceInvocationIT . logger . info ( \"select<sp>*<sp>where<sp>name='axis*'\" 9 ) ; app . put ( \"select<sp>*<sp>where<sp>name='axis*'\" 0 , \"edanuff\" ) ; app . put ( \"foo\" 4 , \"foo\" 5 ) ; org . apache . usergrid . services . Entity user = app . testRequest ( ServiceAction . POST , 1 , \"foo\" 8 ) . getEntity ( ) ; \"<AssertPlaceHolder>\" ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 ) ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 , user . getUuid ( ) ) ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='axis*'\" 8 ) ) ; app . put ( \"foo\" , \"bar\" ) ; app . testRequest ( ServiceAction . PUT , 1 , \"foo\" 8 , user . getUuid ( ) ) ; app . put ( \"foo\" 0 , \"select<sp>*<sp>where<sp>name='dylan'\" 1 ) ; app . testRequest ( ServiceAction . POST , 1 , \"select<sp>*<sp>where<sp>name='axis*'\" 5 ) ; app . testRequest ( ServiceAction . GET , 0 , \"foo\" 8 , user . getUuid ( ) , \"messages\" ) ; app . testRequest ( ServiceAction . GET , 0 , \"foo\" 8 , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='axis*'\" 8 ) , \"messages\" ) ; org . apache . usergrid . services . Entity cat = app . doCreate ( \"foo\" 9 , \"foo\" 2 ) ; app . testRequest ( ServiceAction . GET , 2 , \"select<sp>*<sp>where<sp>name='axis*'\" 5 ) ; app . testRequest ( ServiceAction . GET , 1 , \"select<sp>*<sp>where<sp>name='axis*'\" 5 , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='dylan'\" ) ) ; app . testRequest ( ServiceAction . POST , 1 , null , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , cat . getUuid ( ) ) ; app . waitForQueueDrainAndRefreshIndex ( 250 ) ; org . apache . usergrid . services . Entity restaurant = app . doCreate ( \"foo\" 1 , \"select<sp>*<sp>where<sp>name='axis*'\" 3 ) ; app . createConnection ( user , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , restaurant ) ; restaurant = app . doCreate ( \"foo\" 1 , \"select<sp>*<sp>where<sp>name='dylan'\" 0 ) ; app . testRequest ( ServiceAction . GET , 2 , \"restaurants\" ) ; app . testRequest ( ServiceAction . POST , 1 , \"foo\" 8 , user . getUuid ( ) , \"foo\" 7 , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , restaurant . getUuid ( ) ) ; app . waitForQueueDrainAndRefreshIndex ( 250 ) ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"select<sp>*<sp>where<sp>name='axis*'\" 5 ) ; app . testRequest ( ServiceAction . GET , 3 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 ) ; app . testRequest ( ServiceAction . GET , 2 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"restaurants\" ) ; java . lang . Thread . sleep ( 10000 ) ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"restaurants\" , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='axis*'\" 7 ) ) ; app . testRequest ( ServiceAction . GET , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='axis*'\" ) ) ; app . put ( \"select<sp>*<sp>where<sp>name='axis*'\" 4 , \"blacknwhite\" ) ; app . testRequest ( ServiceAction . PUT , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , cat . getUuid ( ) ) ; app . put ( \"foo\" 6 , \"select<sp>*<sp>where<sp>name='axis*'\" 6 ) ; app . testRequest ( ServiceAction . PUT , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"select<sp>*<sp>where<sp>name='axis*'\" 5 , \"foo\" 2 ) ; app . put ( \"foo\" 3 , \"Coffee\" ) ; app . testRequest ( ServiceAction . PUT , 1 , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"restaurants\" , org . apache . usergrid . services . Query . fromQL ( \"select<sp>*<sp>where<sp>name='axis*'\" 7 ) ) ; app . testRequest ( ServiceAction . DELETE , 1 , null , \"foo\" 8 , user . getUuid ( ) , \"foo\" 7 , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , restaurant . getUuid ( ) ) ; app . testRequest ( ServiceAction . GET , 1 , null , \"foo\" 8 , \"edanuff\" , \"select<sp>*<sp>where<sp>name='axis*'\" 2 , \"restaurants\" ) ; java . util . UUID uuid = org . apache . usergrid . persistence . model . util . UUIDGenerator . newTimeUUID ( ) ; app . put ( \"select<sp>*<sp>where<sp>name='axis*'\" 1 , 5 ) ; app . testRequest ( ServiceAction . PUT , 1 , \"devices\" , uuid ) ; } getEntity ( ) { return entity ; }", "answer": "org . junit . Assert . assertNotNull ( user )"}
{"focal": "setConfig ( java . util . Map , org . neo4j . graphdb . factory . GraphDatabaseBuilder ) { for ( Map . Entry < org . neo4j . graphdb . config . Setting < ? > , java . lang . String > entry : config . entrySet ( ) ) { org . neo4j . graphdb . config . Setting < ? > key = entry . getKey ( ) ; java . lang . String value = entry . getValue ( ) ; builder . setConfig ( key , value ) ; } }", "testMethod": "loadFromHashmap ( ) { org . neo4j . graphdb . GraphDatabaseService graphDb = new org . neo4j . graphdb . factory . GraphDatabaseFactory ( ) . newEmbeddedDatabaseBuilder ( testDirectory . databaseDir ( ) ) . setConfig ( GraphDatabaseSettings . pagecache_memory , \"512M\" ) . setConfig ( GraphDatabaseSettings . string_block_size , \"60\" ) . setConfig ( GraphDatabaseSettings . array_block_size , \"300\" ) . newGraphDatabase ( ) ; \"<AssertPlaceHolder>\" ; graphDb . shutdown ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( graphDb )", "total": "loadFromHashmap ( ) { org . neo4j . graphdb . GraphDatabaseService graphDb = new org . neo4j . graphdb . factory . GraphDatabaseFactory ( ) . newEmbeddedDatabaseBuilder ( testDirectory . databaseDir ( ) ) . setConfig ( GraphDatabaseSettings . pagecache_memory , \"512M\" ) . setConfig ( GraphDatabaseSettings . string_block_size , \"60\" ) . setConfig ( GraphDatabaseSettings . array_block_size , \"300\" ) . newGraphDatabase ( ) ; \"<AssertPlaceHolder>\" ; graphDb . shutdown ( ) ; } setConfig ( java . util . Map , org . neo4j . graphdb . factory . GraphDatabaseBuilder ) { for ( Map . Entry < org . neo4j . graphdb . config . Setting < ? > , java . lang . String > entry : config . entrySet ( ) ) { org . neo4j . graphdb . config . Setting < ? > key = entry . getKey ( ) ; java . lang . String value = entry . getValue ( ) ; builder . setConfig ( key , value ) ; } }", "answer": "org . junit . Assert . assertNotNull ( graphDb )"}
{"focal": "dispatch ( I extends org . osc . core . broker . service . request . Request ) { org . osc . core . broker . service . ServiceDispatcher . log . info ( ( ( ( ( ( \"Service<sp>dispatch<sp>\" + ( this . getClass ( ) . getSimpleName ( ) ) ) + \".<sp>User:<sp>\" ) + ( this . userContext . getCurrentUser ( ) ) ) + \",<sp>Request:<sp>\" ) + request ) ) ; if ( org . osc . core . server . Server . isInMaintenance ( ) ) { org . osc . core . broker . service . ServiceDispatcher . log . warn ( ( ( \"Incoming<sp>request<sp>(pid:\" + ( org . osc . core . broker . util . ServerUtil . getCurrentPid ( ) ) ) + \")<sp>while<sp>server<sp>is<sp>in<sp>maintenance<sp>mode.\" ) ) ; throw new org . osc . core . broker . service . exceptions . VmidcException ( ( ( org . osc . core . server . Server . PRODUCT_NAME ) + \"<sp>server<sp>is<sp>in<sp>maintenance<sp>mode.\" ) ) ; } if ( ( this . em ) == null ) { this . em = getEntityManager ( ) ; } org . osgi . service . transaction . control . TransactionControl txControl = getTransactionControl ( ) ; O response = null ; try { response = txControl . required ( ( ) -> exec ( request , this . em ) ) ; } catch ( org . osgi . service . transaction . control . ScopedWorkException e ) { handleException ( e . getCause ( ) ) ; } org . osc . core . broker . service . ChainedDispatch < O > nextDispatch ; while ( ( nextDispatch = popChain ( ) ) != null ) { try { final O previousResponse = response ; final org . osc . core . broker . service . ChainedDispatch < O > tempNext = nextDispatch ; response = txControl . required ( ( ) -> tempNext . dispatch ( previousResponse , this . em ) ) ; } catch ( org . osgi . service . transaction . control . ScopedWorkException e ) { handleException ( e . getCause ( ) ) ; } } org . osc . core . broker . service . ServiceDispatcher . log . info ( ( \"Service<sp>response:<sp>\" + response ) ) ; return response ; }", "testMethod": "testDispatch_ReImportApplianceWithFileMissing_ExpectsValidResponse ( ) { this . imageMetaData . setModel ( org . osc . core . broker . service . appliance . ImportApplianceSoftwareVersionServiceTest . NON_EXISTING_SOFTWARE_MODEL ) ; org . mockito . Mockito . when ( org . apache . commons . io . FileUtils . readFileToString ( this . mockMetaDataFile , java . nio . charset . Charset . defaultCharset ( ) ) ) . thenReturn ( new com . google . gson . Gson ( ) . toJson ( this . imageMetaData ) ) ; org . osc . core . broker . service . response . BaseResponse response = this . service . dispatch ( new org . osc . core . broker . service . request . ImportFileRequest ( org . osc . core . broker . service . appliance . ImportApplianceSoftwareVersionServiceTest . TEST_TMP_FOLDER ) ) ; org . osc . core . broker . model . entities . appliance . Appliance appliance = this . em . createQuery ( ( ( \"Select<sp>a<sp>from<sp>Appliance<sp>a<sp>where<sp>a.model<sp>=<sp>'\" + ( org . osc . core . broker . service . appliance . ImportApplianceSoftwareVersionServiceTest . NON_EXISTING_SOFTWARE_MODEL ) ) + \"'\" ) , org . osc . core . broker . model . entities . appliance . Appliance . class ) . getSingleResult ( ) ; \"<AssertPlaceHolder>\" ; verifySuccessfulImport ( response , appliance . getId ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( appliance )", "total": "testDispatch_ReImportApplianceWithFileMissing_ExpectsValidResponse ( ) { this . imageMetaData . setModel ( org . osc . core . broker . service . appliance . ImportApplianceSoftwareVersionServiceTest . NON_EXISTING_SOFTWARE_MODEL ) ; org . mockito . Mockito . when ( org . apache . commons . io . FileUtils . readFileToString ( this . mockMetaDataFile , java . nio . charset . Charset . defaultCharset ( ) ) ) . thenReturn ( new com . google . gson . Gson ( ) . toJson ( this . imageMetaData ) ) ; org . osc . core . broker . service . response . BaseResponse response = this . service . dispatch ( new org . osc . core . broker . service . request . ImportFileRequest ( org . osc . core . broker . service . appliance . ImportApplianceSoftwareVersionServiceTest . TEST_TMP_FOLDER ) ) ; org . osc . core . broker . model . entities . appliance . Appliance appliance = this . em . createQuery ( ( ( \"Select<sp>a<sp>from<sp>Appliance<sp>a<sp>where<sp>a.model<sp>=<sp>'\" + ( org . osc . core . broker . service . appliance . ImportApplianceSoftwareVersionServiceTest . NON_EXISTING_SOFTWARE_MODEL ) ) + \"'\" ) , org . osc . core . broker . model . entities . appliance . Appliance . class ) . getSingleResult ( ) ; \"<AssertPlaceHolder>\" ; verifySuccessfulImport ( response , appliance . getId ( ) ) ; } dispatch ( I extends org . osc . core . broker . service . request . Request ) { org . osc . core . broker . service . ServiceDispatcher . log . info ( ( ( ( ( ( \"Service<sp>dispatch<sp>\" + ( this . getClass ( ) . getSimpleName ( ) ) ) + \".<sp>User:<sp>\" ) + ( this . userContext . getCurrentUser ( ) ) ) + \",<sp>Request:<sp>\" ) + request ) ) ; if ( org . osc . core . server . Server . isInMaintenance ( ) ) { org . osc . core . broker . service . ServiceDispatcher . log . warn ( ( ( \"Incoming<sp>request<sp>(pid:\" + ( org . osc . core . broker . util . ServerUtil . getCurrentPid ( ) ) ) + \")<sp>while<sp>server<sp>is<sp>in<sp>maintenance<sp>mode.\" ) ) ; throw new org . osc . core . broker . service . exceptions . VmidcException ( ( ( org . osc . core . server . Server . PRODUCT_NAME ) + \"<sp>server<sp>is<sp>in<sp>maintenance<sp>mode.\" ) ) ; } if ( ( this . em ) == null ) { this . em = getEntityManager ( ) ; } org . osgi . service . transaction . control . TransactionControl txControl = getTransactionControl ( ) ; O response = null ; try { response = txControl . required ( ( ) -> exec ( request , this . em ) ) ; } catch ( org . osgi . service . transaction . control . ScopedWorkException e ) { handleException ( e . getCause ( ) ) ; } org . osc . core . broker . service . ChainedDispatch < O > nextDispatch ; while ( ( nextDispatch = popChain ( ) ) != null ) { try { final O previousResponse = response ; final org . osc . core . broker . service . ChainedDispatch < O > tempNext = nextDispatch ; response = txControl . required ( ( ) -> tempNext . dispatch ( previousResponse , this . em ) ) ; } catch ( org . osgi . service . transaction . control . ScopedWorkException e ) { handleException ( e . getCause ( ) ) ; } } org . osc . core . broker . service . ServiceDispatcher . log . info ( ( \"Service<sp>response:<sp>\" + response ) ) ; return response ; }", "answer": "org . junit . Assert . assertNotNull ( appliance )"}
{"focal": "loadMapping ( java . net . URL ) { try { return loadMapping ( new java . io . File ( url . toURI ( ) ) ) ; } catch ( java . net . URISyntaxException e ) { throw new io . atlasmap . api . AtlasValidationException ( e . getMessage ( ) , e ) ; } }", "testMethod": "testLoadMappingString ( ) { java . lang . String filename = ( ( ( ( ( \"src\" + ( java . io . File . separator ) ) + \"test\" ) + ( java . io . File . separator ) ) + \"resources\" ) + ( java . io . File . separator ) ) + \"atlasmapping.json\" ; io . atlasmap . v2 . AtlasMapping atlasMapping = io . atlasmap . core . AtlasMappingServiceTest . atlasMappingService . loadMapping ( filename ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( atlasMapping )", "total": "testLoadMappingString ( ) { java . lang . String filename = ( ( ( ( ( \"src\" + ( java . io . File . separator ) ) + \"test\" ) + ( java . io . File . separator ) ) + \"resources\" ) + ( java . io . File . separator ) ) + \"atlasmapping.json\" ; io . atlasmap . v2 . AtlasMapping atlasMapping = io . atlasmap . core . AtlasMappingServiceTest . atlasMappingService . loadMapping ( filename ) ; \"<AssertPlaceHolder>\" ; } loadMapping ( java . net . URL ) { try { return loadMapping ( new java . io . File ( url . toURI ( ) ) ) ; } catch ( java . net . URISyntaxException e ) { throw new io . atlasmap . api . AtlasValidationException ( e . getMessage ( ) , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( atlasMapping )"}
{"focal": "toString ( ) { if ( ( released ) || ( v8 . isReleased ( ) ) ) { return \"[Function<sp>released]\" ; } return super . toString ( ) ; }", "testMethod": "testSyntaxErrorMissingParam ( ) { try { v8 . executeScript ( \"foo());\" ) ; } catch ( com . eclipsesource . v8 . V8ScriptCompilationException e ) { java . lang . String string = e . toString ( ) ; \"<AssertPlaceHolder>\" ; return ; } org . junit . Assert . fail ( \"Exception<sp>expected.\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( string )", "total": "testSyntaxErrorMissingParam ( ) { try { v8 . executeScript ( \"foo());\" ) ; } catch ( com . eclipsesource . v8 . V8ScriptCompilationException e ) { java . lang . String string = e . toString ( ) ; \"<AssertPlaceHolder>\" ; return ; } org . junit . Assert . fail ( \"Exception<sp>expected.\" ) ; } toString ( ) { if ( ( released ) || ( v8 . isReleased ( ) ) ) { return \"[Function<sp>released]\" ; } return super . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( string )"}
{"focal": "getXmpXml ( org . apache . commons . imaging . common . bytesource . ByteSource , java . util . Map ) { return null ; }", "testMethod": "test ( ) { final org . apache . commons . imaging . common . bytesource . ByteSource byteSource = new org . apache . commons . imaging . common . bytesource . ByteSourceFile ( imageFile ) ; final java . util . Map < java . lang . String , java . lang . Object > params = new java . util . HashMap ( ) ; final java . lang . String xmpXml = new org . apache . commons . imaging . formats . jpeg . JpegImageParser ( ) . getXmpXml ( byteSource , params ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( xmpXml )", "total": "test ( ) { final org . apache . commons . imaging . common . bytesource . ByteSource byteSource = new org . apache . commons . imaging . common . bytesource . ByteSourceFile ( imageFile ) ; final java . util . Map < java . lang . String , java . lang . Object > params = new java . util . HashMap ( ) ; final java . lang . String xmpXml = new org . apache . commons . imaging . formats . jpeg . JpegImageParser ( ) . getXmpXml ( byteSource , params ) ; \"<AssertPlaceHolder>\" ; } getXmpXml ( org . apache . commons . imaging . common . bytesource . ByteSource , java . util . Map ) { return null ; }", "answer": "org . junit . Assert . assertNotNull ( xmpXml )"}
{"focal": "write ( int ) { }", "testMethod": "testSerializeAnomalyLikelihood ( ) { java . util . Map < java . lang . String , java . lang . Object > params = new java . util . HashMap ( ) ; params . put ( org . numenta . nupic . network . KEY_MODE , Mode . LIKELIHOOD ) ; org . numenta . nupic . algorithms . AnomalyLikelihood an = ( ( org . numenta . nupic . algorithms . AnomalyLikelihood ) ( org . numenta . nupic . algorithms . Anomaly . create ( params ) ) ) ; org . numenta . nupic . serialize . SerialConfig config = new org . numenta . nupic . serialize . SerialConfig ( \"testSerializeAnomalyLikelihood\" , org . numenta . nupic . serialize . SerialConfig . SERIAL_TEST_DIR ) ; org . numenta . nupic . network . PersistenceAPI api = org . numenta . nupic . network . Persistence . get ( config ) ; byte [ ] bytes = api . write ( an ) ; org . numenta . nupic . algorithms . Anomaly serializedAn = api . read ( bytes ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( serializedAn )", "total": "testSerializeAnomalyLikelihood ( ) { java . util . Map < java . lang . String , java . lang . Object > params = new java . util . HashMap ( ) ; params . put ( org . numenta . nupic . network . KEY_MODE , Mode . LIKELIHOOD ) ; org . numenta . nupic . algorithms . AnomalyLikelihood an = ( ( org . numenta . nupic . algorithms . AnomalyLikelihood ) ( org . numenta . nupic . algorithms . Anomaly . create ( params ) ) ) ; org . numenta . nupic . serialize . SerialConfig config = new org . numenta . nupic . serialize . SerialConfig ( \"testSerializeAnomalyLikelihood\" , org . numenta . nupic . serialize . SerialConfig . SERIAL_TEST_DIR ) ; org . numenta . nupic . network . PersistenceAPI api = org . numenta . nupic . network . Persistence . get ( config ) ; byte [ ] bytes = api . write ( an ) ; org . numenta . nupic . algorithms . Anomaly serializedAn = api . read ( bytes ) ; \"<AssertPlaceHolder>\" ; } write ( int ) { }", "answer": "org . junit . Assert . assertNotNull ( serializedAn )"}
{"focal": "getEmail ( ) { return email ; }", "testMethod": "testCreate ( ) { org . jbei . ice . storage . model . Account account = org . jbei . ice . lib . AccountCreator . createTestAccount ( \"GroupControllerTest.testCreate\" , false ) ; org . jbei . ice . lib . dto . group . UserGroup userGroup = new org . jbei . ice . lib . dto . group . UserGroup ( ) ; userGroup . setLabel ( \"test<sp>Group\" ) ; userGroup . setDescription ( \"test\" ) ; userGroup = controller . createGroup ( account . getEmail ( ) , userGroup ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( userGroup )", "total": "testCreate ( ) { org . jbei . ice . storage . model . Account account = org . jbei . ice . lib . AccountCreator . createTestAccount ( \"GroupControllerTest.testCreate\" , false ) ; org . jbei . ice . lib . dto . group . UserGroup userGroup = new org . jbei . ice . lib . dto . group . UserGroup ( ) ; userGroup . setLabel ( \"test<sp>Group\" ) ; userGroup . setDescription ( \"test\" ) ; userGroup = controller . createGroup ( account . getEmail ( ) , userGroup ) ; \"<AssertPlaceHolder>\" ; } getEmail ( ) { return email ; }", "answer": "org . junit . Assert . assertNotNull ( userGroup )"}
{"focal": "createOntology ( org . semanticweb . owlapi . model . OWLOntologyID ) { writeLock . lock ( ) ; try { org . semanticweb . owlapi . model . OWLOntology ontology = ontologiesByID . get ( ontologyID ) ; if ( ontology != null ) { throw new org . semanticweb . owlapi . model . OWLOntologyAlreadyExistsException ( ontologyID ) ; } org . semanticweb . owlapi . model . IRI documentIRI = computeDocumentIRI ( ontologyID ) ; if ( documentIRIsByID . values ( ) . contains ( documentIRI ) ) { throw new org . semanticweb . owlapi . model . OWLOntologyDocumentAlreadyExistsException ( documentIRI ) ; } for ( org . semanticweb . owlapi . model . OWLOntologyFactory factory : ontologyFactories ) { if ( factory . canCreateFromDocumentIRI ( documentIRI ) ) { documentIRIsByID . put ( ontologyID , documentIRI ) ; factory . setLock ( lock ) ; return factory . createOWLOntology ( this , ontologyID , documentIRI , this ) ; } } throw new org . semanticweb . owlapi . model . OWLOntologyFactoryNotFoundException ( documentIRI ) ; } finally { writeLock . unlock ( ) ; } }", "testMethod": "testOntologyCreation ( ) { org . semanticweb . owlapi . model . OWLOntologyManager m = create ( ) ; org . semanticweb . owlapi . model . OWLOntology o = m . createOntology ( uk . ac . manchester . owl . owlapi . tutorialowled2011 . TutorialSnippetsTestCase . EXAMPLE_IRI ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( o )", "total": "testOntologyCreation ( ) { org . semanticweb . owlapi . model . OWLOntologyManager m = create ( ) ; org . semanticweb . owlapi . model . OWLOntology o = m . createOntology ( uk . ac . manchester . owl . owlapi . tutorialowled2011 . TutorialSnippetsTestCase . EXAMPLE_IRI ) ; \"<AssertPlaceHolder>\" ; } createOntology ( org . semanticweb . owlapi . model . OWLOntologyID ) { writeLock . lock ( ) ; try { org . semanticweb . owlapi . model . OWLOntology ontology = ontologiesByID . get ( ontologyID ) ; if ( ontology != null ) { throw new org . semanticweb . owlapi . model . OWLOntologyAlreadyExistsException ( ontologyID ) ; } org . semanticweb . owlapi . model . IRI documentIRI = computeDocumentIRI ( ontologyID ) ; if ( documentIRIsByID . values ( ) . contains ( documentIRI ) ) { throw new org . semanticweb . owlapi . model . OWLOntologyDocumentAlreadyExistsException ( documentIRI ) ; } for ( org . semanticweb . owlapi . model . OWLOntologyFactory factory : ontologyFactories ) { if ( factory . canCreateFromDocumentIRI ( documentIRI ) ) { documentIRIsByID . put ( ontologyID , documentIRI ) ; factory . setLock ( lock ) ; return factory . createOWLOntology ( this , ontologyID , documentIRI , this ) ; } } throw new org . semanticweb . owlapi . model . OWLOntologyFactoryNotFoundException ( documentIRI ) ; } finally { writeLock . unlock ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( o )"}
{"focal": "getNsPrefixURI ( java . lang . String ) { checkRead ( ) ; return holder . getBaseItem ( ) . getNsPrefixURI ( prefix ) ; }", "testMethod": "prefix2 ( ) { org . apache . jena . shared . PrefixMapping pmap = new org . apache . jena . sdb . graph . PrefixMappingSDB ( org . apache . jena . sdb . test . misc . TestPrefixMappingSDB . defaultPrefixURI , org . apache . jena . sdb . test . misc . TestPrefixMappingSDB . sdb ) ; pmap . setNsPrefix ( \"ex\" , \"http://example/\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pmap . getNsPrefixURI ( \"ex\" ) )", "total": "prefix2 ( ) { org . apache . jena . shared . PrefixMapping pmap = new org . apache . jena . sdb . graph . PrefixMappingSDB ( org . apache . jena . sdb . test . misc . TestPrefixMappingSDB . defaultPrefixURI , org . apache . jena . sdb . test . misc . TestPrefixMappingSDB . sdb ) ; pmap . setNsPrefix ( \"ex\" , \"http://example/\" ) ; \"<AssertPlaceHolder>\" ; } getNsPrefixURI ( java . lang . String ) { checkRead ( ) ; return holder . getBaseItem ( ) . getNsPrefixURI ( prefix ) ; }", "answer": "org . junit . Assert . assertNotNull ( pmap . getNsPrefixURI ( \"ex\" ) )"}
{"focal": "getAverageLengthWithNullBlankRows ( ) { java . lang . String sql = ( ( ( ( ( ( ( ( \"SELECT<sp>t.*<sp>FROM(SELECT<sp>CAST(SUM(LENGTH(\" + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \"))<sp>/<sp>(COUNT(*)*1.00)+0.99<sp>as<sp>int)<sp>c,\" ) + \"CAST(SUM(LENGTH(\" ) + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \"))<sp>/<sp>(COUNT(*)*1.00)<sp>as<sp>int)<sp>f<sp>\" ) + \"FROM<sp><%=__TABLE_NAME__%><sp>)<sp>e,<sp><%=__TABLE_NAME__%><sp>t<sp>\" ) + \"WHERE<sp>LENGTH(\" ) + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \")<sp>BETWEEN<sp>f<sp>AND<sp>c\" ; return sql ; }", "testMethod": "testGetAverageLengthWithNullBlankRows ( ) { try { org . talend . dq . dbms . DbmsLanguage dbms = getMysqlDbmsLanguage ( ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( dbms . getAverageLengthWithNullBlankRows ( ) )", "total": "testGetAverageLengthWithNullBlankRows ( ) { try { org . talend . dq . dbms . DbmsLanguage dbms = getMysqlDbmsLanguage ( ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } } getAverageLengthWithNullBlankRows ( ) { java . lang . String sql = ( ( ( ( ( ( ( ( \"SELECT<sp>t.*<sp>FROM(SELECT<sp>CAST(SUM(LENGTH(\" + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \"))<sp>/<sp>(COUNT(*)*1.00)+0.99<sp>as<sp>int)<sp>c,\" ) + \"CAST(SUM(LENGTH(\" ) + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \"))<sp>/<sp>(COUNT(*)*1.00)<sp>as<sp>int)<sp>f<sp>\" ) + \"FROM<sp><%=__TABLE_NAME__%><sp>)<sp>e,<sp><%=__TABLE_NAME__%><sp>t<sp>\" ) + \"WHERE<sp>LENGTH(\" ) + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \")<sp>BETWEEN<sp>f<sp>AND<sp>c\" ; return sql ; }", "answer": "org . junit . Assert . assertNotNull ( dbms . getAverageLengthWithNullBlankRows ( ) )"}
{"focal": "getCollection ( java . lang . String ) { return org . xmldb . api . DatabaseManager . getCollection ( ( ( properties . getProperty ( org . exist . client . InteractiveClient . URI ) ) + path ) , properties . getProperty ( org . exist . client . InteractiveClient . USER ) , properties . getProperty ( org . exist . client . InteractiveClient . PASSWORD ) ) ; }", "testMethod": "setContentAsDOM ( ) { org . xmldb . api . base . Collection testCollection = org . xmldb . api . DatabaseManager . getCollection ( ( ( ( ROOT_URI ) + \"/\" ) + ( org . exist . xmldb . ResourceTest . TEST_COLLECTION ) ) ) ; \"<AssertPlaceHolder>\" ; org . xmldb . api . modules . XMLResource doc = ( ( org . xmldb . api . modules . XMLResource ) ( testCollection . createResource ( \"dom.xml\" , \"XMLResource\" ) ) ) ; java . lang . String xml = \"<test><title>Title</title>\" + ( ( \"<para>Paragraph1</para>\" + \"<para>Paragraph2</para>\" ) + \"</test>\" ) ; javax . xml . parsers . DocumentBuilderFactory docFactory = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) ; javax . xml . parsers . DocumentBuilder builder = docFactory . newDocumentBuilder ( ) ; org . w3c . dom . Document dom = builder . parse ( new org . exist . xmldb . InputSource ( new org . exist . xmldb . StringReader ( xml ) ) ) ; doc . setContentAsDOM ( dom . getDocumentElement ( ) ) ; testCollection . storeResource ( doc ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( testCollection )", "total": "setContentAsDOM ( ) { org . xmldb . api . base . Collection testCollection = org . xmldb . api . DatabaseManager . getCollection ( ( ( ( ROOT_URI ) + \"/\" ) + ( org . exist . xmldb . ResourceTest . TEST_COLLECTION ) ) ) ; \"<AssertPlaceHolder>\" ; org . xmldb . api . modules . XMLResource doc = ( ( org . xmldb . api . modules . XMLResource ) ( testCollection . createResource ( \"dom.xml\" , \"XMLResource\" ) ) ) ; java . lang . String xml = \"<test><title>Title</title>\" + ( ( \"<para>Paragraph1</para>\" + \"<para>Paragraph2</para>\" ) + \"</test>\" ) ; javax . xml . parsers . DocumentBuilderFactory docFactory = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) ; javax . xml . parsers . DocumentBuilder builder = docFactory . newDocumentBuilder ( ) ; org . w3c . dom . Document dom = builder . parse ( new org . exist . xmldb . InputSource ( new org . exist . xmldb . StringReader ( xml ) ) ) ; doc . setContentAsDOM ( dom . getDocumentElement ( ) ) ; testCollection . storeResource ( doc ) ; } getCollection ( java . lang . String ) { return org . xmldb . api . DatabaseManager . getCollection ( ( ( properties . getProperty ( org . exist . client . InteractiveClient . URI ) ) + path ) , properties . getProperty ( org . exist . client . InteractiveClient . USER ) , properties . getProperty ( org . exist . client . InteractiveClient . PASSWORD ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( testCollection )"}
{"focal": "getData ( ) { return results ; }", "testMethod": "testListAll ( ) { com . shippo . model . CustomsDeclarationCollection objectCollection = com . shippo . model . CustomsDeclaration . all ( null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( objectCollection . getData ( ) )", "total": "testListAll ( ) { com . shippo . model . CustomsDeclarationCollection objectCollection = com . shippo . model . CustomsDeclaration . all ( null ) ; \"<AssertPlaceHolder>\" ; } getData ( ) { return results ; }", "answer": "org . junit . Assert . assertNotNull ( objectCollection . getData ( ) )"}
{"focal": "getNewProviderName ( ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "testMethod": "testCustomProvider ( ) { java . lang . String provName = conv . getNewProviderName ( ) ; org . javamoney . adopjsr . ExchangeRateProvider prov = org . javamoney . adopjsr . MonetaryConversions . getExchangeRateProvider ( provName ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( prov )", "total": "testCustomProvider ( ) { java . lang . String provName = conv . getNewProviderName ( ) ; org . javamoney . adopjsr . ExchangeRateProvider prov = org . javamoney . adopjsr . MonetaryConversions . getExchangeRateProvider ( provName ) ; \"<AssertPlaceHolder>\" ; } getNewProviderName ( ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( prov )"}
{"focal": "error ( java . lang . String , com . vmware . vrack . hms . common . exception . HmsOobNetworkErrorCode ) { error ( msg , null , error ) ; }", "testMethod": "testExecuteCommand ( ) { com . vmware . vrack . hms . utils . SshUtilTest . logger . info ( \"[TS]<sp>:<sp>testExecuteCommand\" ) ; java . lang . String username = \"root\" ; java . lang . String password = \"root123\" ; java . lang . String hostname = \"10.28.197.23\" ; int port = 22 ; java . util . Properties sessionConfig = new java . util . java . util . Properties ( ) ; sessionConfig . put ( \"StrictHostKeyChecking\" , \"no\" ) ; com . jcraft . jsch . Session sessionobj = null ; sessionobj = com . vmware . vrack . hms . utils . SshUtil . getSessionObject ( username , password , hostname , port , sessionConfig ) ; sessionobj . connect ( 6000 ) ; java . lang . String command = \"vmware<sp>-v\" ; java . lang . String expResult = \"\" ; java . lang . String result = null ; try { result = com . vmware . vrack . hms . utils . SshUtil . executeCommand ( sessionobj , command ) ; } catch ( java . lang . Exception ex ) { com . vmware . vrack . hms . utils . SshUtilTest . logger . error ( \"Exception<sp>occured<sp>while<sp>executing<sp>command.\" , ex ) ; } com . vmware . vrack . hms . utils . SshUtilTest . logger . info ( ( \"[TS]<sp>:<sp>Expected<sp>result<sp>:<sp>Result<sp>of<sp>the<sp>command<sp>is<sp>NOT<sp>NULL,<sp>actual<sp>result<sp>:<sp>Result<sp>of<sp>the<sp>command<sp>=<sp>\" + result ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testExecuteCommand ( ) { com . vmware . vrack . hms . utils . SshUtilTest . logger . info ( \"[TS]<sp>:<sp>testExecuteCommand\" ) ; java . lang . String username = \"root\" ; java . lang . String password = \"root123\" ; java . lang . String hostname = \"10.28.197.23\" ; int port = 22 ; java . util . Properties sessionConfig = new java . util . java . util . Properties ( ) ; sessionConfig . put ( \"StrictHostKeyChecking\" , \"no\" ) ; com . jcraft . jsch . Session sessionobj = null ; sessionobj = com . vmware . vrack . hms . utils . SshUtil . getSessionObject ( username , password , hostname , port , sessionConfig ) ; sessionobj . connect ( 6000 ) ; java . lang . String command = \"vmware<sp>-v\" ; java . lang . String expResult = \"\" ; java . lang . String result = null ; try { result = com . vmware . vrack . hms . utils . SshUtil . executeCommand ( sessionobj , command ) ; } catch ( java . lang . Exception ex ) { com . vmware . vrack . hms . utils . SshUtilTest . logger . error ( \"Exception<sp>occured<sp>while<sp>executing<sp>command.\" , ex ) ; } com . vmware . vrack . hms . utils . SshUtilTest . logger . info ( ( \"[TS]<sp>:<sp>Expected<sp>result<sp>:<sp>Result<sp>of<sp>the<sp>command<sp>is<sp>NOT<sp>NULL,<sp>actual<sp>result<sp>:<sp>Result<sp>of<sp>the<sp>command<sp>=<sp>\" + result ) ) ; \"<AssertPlaceHolder>\" ; } error ( java . lang . String , com . vmware . vrack . hms . common . exception . HmsOobNetworkErrorCode ) { error ( msg , null , error ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getContent ( ) { return content ; }", "testMethod": "showRequest ( ) { org . pdfsam . ui . info . KeywordsTab victim = new org . pdfsam . ui . info . KeywordsTab ( ) ; javafx . scene . control . Labeled keywords = ( ( javafx . scene . control . Labeled ) ( ( ( javafx . scene . control . ScrollPane ) ( victim . getContent ( ) ) ) . getContent ( ) . lookup ( \".info-property-value\" ) ) ) ; \"<AssertPlaceHolder>\" ; javafx . beans . value . ChangeListener < ? super java . lang . String > listener = mock ( javafx . beans . value . ChangeListener . class ) ; keywords . textProperty ( ) . addListener ( listener ) ; org . pdfsam . pdf . PdfDocumentDescriptor descriptor = org . pdfsam . pdf . PdfDocumentDescriptor . newDescriptorNoPassword ( mock ( java . io . File . class ) ) ; descriptor . putInformation ( PdfMetadataKey . KEYWORDS . getKey ( ) , \"test\" ) ; org . testfx . util . WaitForAsyncUtils . waitForAsyncFx ( 2000 , ( ) -> victim . requestShow ( new org . pdfsam . ui . commons . ShowPdfDescriptorRequest ( descriptor ) ) ) ; verify ( listener , timeout ( 2000 ) . times ( 1 ) ) . changed ( any ( javafx . beans . value . ObservableValue . class ) , anyString ( ) , eq ( \"test\" ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( keywords )", "total": "showRequest ( ) { org . pdfsam . ui . info . KeywordsTab victim = new org . pdfsam . ui . info . KeywordsTab ( ) ; javafx . scene . control . Labeled keywords = ( ( javafx . scene . control . Labeled ) ( ( ( javafx . scene . control . ScrollPane ) ( victim . getContent ( ) ) ) . getContent ( ) . lookup ( \".info-property-value\" ) ) ) ; \"<AssertPlaceHolder>\" ; javafx . beans . value . ChangeListener < ? super java . lang . String > listener = mock ( javafx . beans . value . ChangeListener . class ) ; keywords . textProperty ( ) . addListener ( listener ) ; org . pdfsam . pdf . PdfDocumentDescriptor descriptor = org . pdfsam . pdf . PdfDocumentDescriptor . newDescriptorNoPassword ( mock ( java . io . File . class ) ) ; descriptor . putInformation ( PdfMetadataKey . KEYWORDS . getKey ( ) , \"test\" ) ; org . testfx . util . WaitForAsyncUtils . waitForAsyncFx ( 2000 , ( ) -> victim . requestShow ( new org . pdfsam . ui . commons . ShowPdfDescriptorRequest ( descriptor ) ) ) ; verify ( listener , timeout ( 2000 ) . times ( 1 ) ) . changed ( any ( javafx . beans . value . ObservableValue . class ) , anyString ( ) , eq ( \"test\" ) ) ; } getContent ( ) { return content ; }", "answer": "org . junit . Assert . assertNotNull ( keywords )"}
{"focal": "detachVolume ( java . lang . Integer , java . lang . String , java . lang . String ) { validateDropletId ( dropletId ) ; checkBlankAndThrowError ( volumeId , \"Missing<sp>required<sp>parameter<sp>-<sp>volumeId.\" ) ; checkBlankAndThrowError ( regionSlug , \"Missing<sp>required<sp>parameter<sp>-<sp>regionSlug.\" ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { volumeId } ; return ( ( com . myjeeva . digitalocean . pojo . Action ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . ACTIONS_VOLUME , new com . myjeeva . digitalocean . pojo . VolumeAction ( com . myjeeva . digitalocean . common . ActionType . DETACH , dropletId , regionSlug ) , params ) ) . getData ( ) ) ) ; }", "testMethod": "testDeachVolume ( ) { com . myjeeva . digitalocean . pojo . Action action = apiClient . detachVolume ( dropletIdForInfo , volumeIdForInfo , \"nyc1\" ) ; \"<AssertPlaceHolder>\" ; log . info ( action . toString ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( action )", "total": "testDeachVolume ( ) { com . myjeeva . digitalocean . pojo . Action action = apiClient . detachVolume ( dropletIdForInfo , volumeIdForInfo , \"nyc1\" ) ; \"<AssertPlaceHolder>\" ; log . info ( action . toString ( ) ) ; } detachVolume ( java . lang . Integer , java . lang . String , java . lang . String ) { validateDropletId ( dropletId ) ; checkBlankAndThrowError ( volumeId , \"Missing<sp>required<sp>parameter<sp>-<sp>volumeId.\" ) ; checkBlankAndThrowError ( regionSlug , \"Missing<sp>required<sp>parameter<sp>-<sp>regionSlug.\" ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { volumeId } ; return ( ( com . myjeeva . digitalocean . pojo . Action ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . ACTIONS_VOLUME , new com . myjeeva . digitalocean . pojo . VolumeAction ( com . myjeeva . digitalocean . common . ActionType . DETACH , dropletId , regionSlug ) , params ) ) . getData ( ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( action )"}
{"focal": "parse ( org . drools . constraint . parser . ParseStart , org . drools . constraint . parser . Provider ) { assertNotNull ( start ) ; assertNotNull ( provider ) ; final org . drools . constraint . parser . GeneratedDrlConstraintParser parser = getParserForProvider ( provider ) ; try { N resultNode = start . parse ( parser ) ; com . github . javaparser . ParseResult < N > result = new com . github . javaparser . ParseResult ( resultNode , parser . problems , parser . getTokens ( ) , parser . getCommentsCollection ( ) ) ; configuration . getPostProcessors ( ) . forEach ( ( postProcessor ) -> postProcessor . process ( result , configuration ) ) ; result . getProblems ( ) . sort ( org . drools . constraint . parser . PROBLEM_BY_BEGIN_POSITION ) ; return result ; } catch ( java . lang . Exception e ) { final java . lang . String message = ( ( e . getMessage ( ) ) == null ) ? \"Unknown<sp>error\" : e . getMessage ( ) ; parser . problems . add ( new com . github . javaparser . Problem ( message , null , e ) ) ; return new com . github . javaparser . ParseResult ( null , parser . problems , parser . getTokens ( ) , parser . getCommentsCollection ( ) ) ; } finally { try { provider . close ( ) ; } catch ( java . io . IOException e ) { } } }", "testMethod": "testIncompleteCode7 ( ) { java . lang . String input = \"package<sp>a.b.c<sp>imrt<sp>a.b.c.*\" + ( \"<sp>rule<sp>MyRule<sp>when<sp>Class<sp>(<sp>property<sp>memberOf<sp>collection<sp>)<sp>then<sp>end<sp>\" + \"<sp>query<sp>MyQuery<sp>Class<sp>(<sp>property<sp>memberOf<sp>collection<sp>)<sp>end<sp>\" ) ; org . drools . compiler . compiler . DrlParser parser = new org . drools . compiler . compiler . DrlParser ( org . kie . internal . builder . conf . LanguageLevelOption . DRL5 ) ; org . drools . compiler . lang . descr . PackageDescr descr = parser . parse ( true , input ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( descr )", "total": "testIncompleteCode7 ( ) { java . lang . String input = \"package<sp>a.b.c<sp>imrt<sp>a.b.c.*\" + ( \"<sp>rule<sp>MyRule<sp>when<sp>Class<sp>(<sp>property<sp>memberOf<sp>collection<sp>)<sp>then<sp>end<sp>\" + \"<sp>query<sp>MyQuery<sp>Class<sp>(<sp>property<sp>memberOf<sp>collection<sp>)<sp>end<sp>\" ) ; org . drools . compiler . compiler . DrlParser parser = new org . drools . compiler . compiler . DrlParser ( org . kie . internal . builder . conf . LanguageLevelOption . DRL5 ) ; org . drools . compiler . lang . descr . PackageDescr descr = parser . parse ( true , input ) ; \"<AssertPlaceHolder>\" ; } parse ( org . drools . constraint . parser . ParseStart , org . drools . constraint . parser . Provider ) { assertNotNull ( start ) ; assertNotNull ( provider ) ; final org . drools . constraint . parser . GeneratedDrlConstraintParser parser = getParserForProvider ( provider ) ; try { N resultNode = start . parse ( parser ) ; com . github . javaparser . ParseResult < N > result = new com . github . javaparser . ParseResult ( resultNode , parser . problems , parser . getTokens ( ) , parser . getCommentsCollection ( ) ) ; configuration . getPostProcessors ( ) . forEach ( ( postProcessor ) -> postProcessor . process ( result , configuration ) ) ; result . getProblems ( ) . sort ( org . drools . constraint . parser . PROBLEM_BY_BEGIN_POSITION ) ; return result ; } catch ( java . lang . Exception e ) { final java . lang . String message = ( ( e . getMessage ( ) ) == null ) ? \"Unknown<sp>error\" : e . getMessage ( ) ; parser . problems . add ( new com . github . javaparser . Problem ( message , null , e ) ) ; return new com . github . javaparser . ParseResult ( null , parser . problems , parser . getTokens ( ) , parser . getCommentsCollection ( ) ) ; } finally { try { provider . close ( ) ; } catch ( java . io . IOException e ) { } } }", "answer": "org . junit . Assert . assertNotNull ( descr )"}
{"focal": "getHeaderMessage ( ) { return getMessage ( \"\" ) ; }", "testMethod": "testBundleWithHeaderMessage ( ) { net . jhorstmann . i18n . tools . MessageBundle bundle = new net . jhorstmann . i18n . tools . MessageBundle ( ) ; org . fedorahosted . tennera . jgettext . Message header = org . fedorahosted . tennera . jgettext . HeaderUtil . generateDefaultHeader ( ) ; bundle . addMessage ( header ) ; org . fedorahosted . tennera . jgettext . Message tstHeader = bundle . getHeaderMessage ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( tstHeader )", "total": "testBundleWithHeaderMessage ( ) { net . jhorstmann . i18n . tools . MessageBundle bundle = new net . jhorstmann . i18n . tools . MessageBundle ( ) ; org . fedorahosted . tennera . jgettext . Message header = org . fedorahosted . tennera . jgettext . HeaderUtil . generateDefaultHeader ( ) ; bundle . addMessage ( header ) ; org . fedorahosted . tennera . jgettext . Message tstHeader = bundle . getHeaderMessage ( ) ; \"<AssertPlaceHolder>\" ; } getHeaderMessage ( ) { return getMessage ( \"\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( tstHeader )"}
{"focal": "sign ( com . springcryptoutils . core . keystore . KeyStoreChooser , com . springcryptoutils . core . key . PrivateKeyChooserByAlias , byte [ ] ) { com . springcryptoutils . core . signature . Signer signer = cache . get ( com . springcryptoutils . core . signature . SignerWithChoosersByAliasImpl . cacheKey ( keyStoreChooser , privateKeyChooserByAlias ) ) ; if ( signer != null ) { return signer . sign ( message ) ; } com . springcryptoutils . core . signature . SignerImpl signerImpl = new com . springcryptoutils . core . signature . SignerImpl ( ) ; signerImpl . setAlgorithm ( algorithm ) ; signerImpl . setProvider ( provider ) ; java . security . PrivateKey privateKey = privateKeyRegistryByAlias . get ( keyStoreChooser , privateKeyChooserByAlias ) ; if ( privateKey == null ) { throw new com . springcryptoutils . core . signature . SignatureException ( ( ( ( \"private<sp>key<sp>not<sp>found<sp>in<sp>registry:<sp>keyStoreName=\" + ( keyStoreChooser . getKeyStoreName ( ) ) ) + \",<sp>alias=\" ) + ( privateKeyChooserByAlias . getAlias ( ) ) ) ) ; } signerImpl . setPrivateKey ( privateKey ) ; cache . put ( com . springcryptoutils . core . signature . SignerWithChoosersByAliasImpl . cacheKey ( keyStoreChooser , privateKeyChooserByAlias ) , signerImpl ) ; return signerImpl . sign ( message ) ; }", "testMethod": "testVerifyWithInvalidKeyStoreChooserFails ( ) { byte [ ] signature = signer . sign ( com . springcryptoutils . core . signature . SignerAndVerifierWithChoosersByAliasImplSpecificProviderTest . keyStoreChooser , com . springcryptoutils . core . signature . SignerAndVerifierWithChoosersByAliasImplSpecificProviderTest . privateKeyChooserByAlias , message ) ; \"<AssertPlaceHolder>\" ; verifier . verify ( com . springcryptoutils . core . signature . SignerAndVerifierWithChoosersByAliasImplSpecificProviderTest . badKeyStoreChooser , com . springcryptoutils . core . signature . SignerAndVerifierWithChoosersByAliasImplSpecificProviderTest . badPublicKeyChooserByAlias , message , signature ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( signature )", "total": "testVerifyWithInvalidKeyStoreChooserFails ( ) { byte [ ] signature = signer . sign ( com . springcryptoutils . core . signature . SignerAndVerifierWithChoosersByAliasImplSpecificProviderTest . keyStoreChooser , com . springcryptoutils . core . signature . SignerAndVerifierWithChoosersByAliasImplSpecificProviderTest . privateKeyChooserByAlias , message ) ; \"<AssertPlaceHolder>\" ; verifier . verify ( com . springcryptoutils . core . signature . SignerAndVerifierWithChoosersByAliasImplSpecificProviderTest . badKeyStoreChooser , com . springcryptoutils . core . signature . SignerAndVerifierWithChoosersByAliasImplSpecificProviderTest . badPublicKeyChooserByAlias , message , signature ) ; } sign ( com . springcryptoutils . core . keystore . KeyStoreChooser , com . springcryptoutils . core . key . PrivateKeyChooserByAlias , byte [ ] ) { com . springcryptoutils . core . signature . Signer signer = cache . get ( com . springcryptoutils . core . signature . SignerWithChoosersByAliasImpl . cacheKey ( keyStoreChooser , privateKeyChooserByAlias ) ) ; if ( signer != null ) { return signer . sign ( message ) ; } com . springcryptoutils . core . signature . SignerImpl signerImpl = new com . springcryptoutils . core . signature . SignerImpl ( ) ; signerImpl . setAlgorithm ( algorithm ) ; signerImpl . setProvider ( provider ) ; java . security . PrivateKey privateKey = privateKeyRegistryByAlias . get ( keyStoreChooser , privateKeyChooserByAlias ) ; if ( privateKey == null ) { throw new com . springcryptoutils . core . signature . SignatureException ( ( ( ( \"private<sp>key<sp>not<sp>found<sp>in<sp>registry:<sp>keyStoreName=\" + ( keyStoreChooser . getKeyStoreName ( ) ) ) + \",<sp>alias=\" ) + ( privateKeyChooserByAlias . getAlias ( ) ) ) ) ; } signerImpl . setPrivateKey ( privateKey ) ; cache . put ( com . springcryptoutils . core . signature . SignerWithChoosersByAliasImpl . cacheKey ( keyStoreChooser , privateKeyChooserByAlias ) , signerImpl ) ; return signerImpl . sign ( message ) ; }", "answer": "org . junit . Assert . assertNotNull ( signature )"}
{"focal": "getCachedNode ( java . lang . String ) { for ( org . codehaus . jdt . groovy . internal . compiler . ast . JDTResolver instance : org . codehaus . jdt . groovy . internal . compiler . ast . JDTResolver . instances ) { org . codehaus . jdt . groovy . internal . compiler . ast . JDTClassNode node = org . codehaus . jdt . groovy . internal . compiler . ast . JDTResolver . getCachedNode ( instance , name ) ; if ( node != null ) return node ; } return null ; }", "testMethod": "testCompileStatic_1505 ( ) { org . codehaus . jdt . groovy . internal . compiler . ast . JDTResolver . recordInstances = true ; org . eclipse . core . runtime . IPath [ ] paths = createSimpleProject ( \"<sp>ls.add('abc');\\n\" 7 , true ) ; \"<sp>List<String><sp>second<sp>=<sp>[]\\n\" ) + \"<sp>List<String><sp>artefactResources2\\n\" ) + \"<sp>second.addAll(artefactResources2)\\n\" ) + \"<sp>ls.add('abc');\\n\" 3 ) ) ) ; incrementalBuild ( paths [ 0 ] ) ; expectingCompiledClasses ( \"<sp>ls.add('abc');\\n\" 6 , \"<sp>ls.add('abc');\\n\" 1 ) ; expectingNoProblems ( ) ; org . codehaus . jdt . groovy . internal . compiler . ast . JDTClassNode jcn = org . codehaus . jdt . groovy . internal . compiler . ast . JDTResolver . getCachedNode ( \"Client\" 3 ) ; \"<AssertPlaceHolder>\" ; System . out . println ( ( \"Client\" 5 + jcn ) ) ; org . codehaus . groovy . ast . ClassNode listcn = new org . codehaus . groovy . ast . ClassNode ( java . util . Collection . class ) ; org . codehaus . groovy . vmplugin . VMPluginFactory . getPlugin ( ) . setAdditionalClassInformation ( listcn ) ; listcn . lazyClassInit ( ) ; System . out . println ( ( \"Client\" 4 + listcn ) ) ; org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . compareClassNodes ( jcn . redirect ( ) , listcn . redirect ( ) , 0 ) ; org . codehaus . groovy . ast . MethodNode jmn = org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . getMethodNode ( jcn , \"<sp>ls.add('abc');\\n\" 5 , 1 ) ; org . codehaus . groovy . ast . MethodNode rmn = org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . getMethodNode ( listcn , \"<sp>ls.add('abc');\\n\" 5 , 1 ) ; org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . compareMethodNodes ( jmn , rmn ) ; jmn = org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . getMethodNode ( jcn , \"addAll\" , 1 ) ; rmn = org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . getMethodNode ( listcn , \"addAll\" , 1 ) ; org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . compareMethodNodes ( jmn , rmn ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( jcn )", "total": "testCompileStatic_1505 ( ) { org . codehaus . jdt . groovy . internal . compiler . ast . JDTResolver . recordInstances = true ; org . eclipse . core . runtime . IPath [ ] paths = createSimpleProject ( \"<sp>ls.add('abc');\\n\" 7 , true ) ; \"<sp>List<String><sp>second<sp>=<sp>[]\\n\" ) + \"<sp>List<String><sp>artefactResources2\\n\" ) + \"<sp>second.addAll(artefactResources2)\\n\" ) + \"<sp>ls.add('abc');\\n\" 3 ) ) ) ; incrementalBuild ( paths [ 0 ] ) ; expectingCompiledClasses ( \"<sp>ls.add('abc');\\n\" 6 , \"<sp>ls.add('abc');\\n\" 1 ) ; expectingNoProblems ( ) ; org . codehaus . jdt . groovy . internal . compiler . ast . JDTClassNode jcn = org . codehaus . jdt . groovy . internal . compiler . ast . JDTResolver . getCachedNode ( \"Client\" 3 ) ; \"<AssertPlaceHolder>\" ; System . out . println ( ( \"Client\" 5 + jcn ) ) ; org . codehaus . groovy . ast . ClassNode listcn = new org . codehaus . groovy . ast . ClassNode ( java . util . Collection . class ) ; org . codehaus . groovy . vmplugin . VMPluginFactory . getPlugin ( ) . setAdditionalClassInformation ( listcn ) ; listcn . lazyClassInit ( ) ; System . out . println ( ( \"Client\" 4 + listcn ) ) ; org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . compareClassNodes ( jcn . redirect ( ) , listcn . redirect ( ) , 0 ) ; org . codehaus . groovy . ast . MethodNode jmn = org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . getMethodNode ( jcn , \"<sp>ls.add('abc');\\n\" 5 , 1 ) ; org . codehaus . groovy . ast . MethodNode rmn = org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . getMethodNode ( listcn , \"<sp>ls.add('abc');\\n\" 5 , 1 ) ; org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . compareMethodNodes ( jmn , rmn ) ; jmn = org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . getMethodNode ( jcn , \"addAll\" , 1 ) ; rmn = org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . getMethodNode ( listcn , \"addAll\" , 1 ) ; org . eclipse . jdt . core . groovy . tests . builder . BasicGroovyBuildTests . compareMethodNodes ( jmn , rmn ) ; } getCachedNode ( java . lang . String ) { for ( org . codehaus . jdt . groovy . internal . compiler . ast . JDTResolver instance : org . codehaus . jdt . groovy . internal . compiler . ast . JDTResolver . instances ) { org . codehaus . jdt . groovy . internal . compiler . ast . JDTClassNode node = org . codehaus . jdt . groovy . internal . compiler . ast . JDTResolver . getCachedNode ( instance , name ) ; if ( node != null ) return node ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( jcn )"}
{"focal": "findHousePicListByHouseId ( java . lang . String ) { java . util . List < com . micro . rent . dbaccess . entity . myrent . ThousePic > picList = tHousePicDao . selectHousePicListByHouseId ( houseId ) ; for ( com . micro . rent . dbaccess . entity . myrent . ThousePic pic : picList ) { pic . setPicture ( ( ( pre ) + ( pic . getPicture ( ) ) ) ) ; } return picList ; }", "testMethod": "pic ( ) { java . lang . String houseId = \"110000900004\" ; java . util . List < com . micro . rent . dbaccess . entity . myrent . ThousePic > info = houseService . findHousePicListByHouseId ( houseId ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( info )", "total": "pic ( ) { java . lang . String houseId = \"110000900004\" ; java . util . List < com . micro . rent . dbaccess . entity . myrent . ThousePic > info = houseService . findHousePicListByHouseId ( houseId ) ; \"<AssertPlaceHolder>\" ; } findHousePicListByHouseId ( java . lang . String ) { java . util . List < com . micro . rent . dbaccess . entity . myrent . ThousePic > picList = tHousePicDao . selectHousePicListByHouseId ( houseId ) ; for ( com . micro . rent . dbaccess . entity . myrent . ThousePic pic : picList ) { pic . setPicture ( ( ( pre ) + ( pic . getPicture ( ) ) ) ) ; } return picList ; }", "answer": "org . junit . Assert . assertNotNull ( info )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "findJsonObject ( ) { org . lightcouch . Response response = org . lightcouch . tests . DocumentsCRUDTest . dbClient . save ( new org . lightcouch . tests . Foo ( ) ) ; com . google . gson . JsonObject jsonObject = org . lightcouch . tests . DocumentsCRUDTest . dbClient . find ( com . google . gson . JsonObject . class , response . getId ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( jsonObject )", "total": "findJsonObject ( ) { org . lightcouch . Response response = org . lightcouch . tests . DocumentsCRUDTest . dbClient . save ( new org . lightcouch . tests . Foo ( ) ) ; com . google . gson . JsonObject jsonObject = org . lightcouch . tests . DocumentsCRUDTest . dbClient . find ( com . google . gson . JsonObject . class , response . getId ( ) ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( jsonObject )"}
{"focal": "getValue ( ) { return rootPath ; }", "testMethod": "checkSetSizeAttachesLoadHandler ( ) { navigatorThumbnailItemView . setItemPxSize ( 100 , 200 ) ; final org . mockito . ArgumentCaptor < com . google . gwt . event . dom . client . LoadHandler > loadHandlerArgumentCaptor = org . mockito . ArgumentCaptor . forClass ( com . google . gwt . event . dom . client . LoadHandler . class ) ; when ( thumbImage . getWidth ( ) ) . thenReturn ( 100 ) ; when ( thumbImage . getHeight ( ) ) . thenReturn ( 200 ) ; verify ( thumbImage ) . addLoadHandler ( loadHandlerArgumentCaptor . capture ( ) ) ; final com . google . gwt . event . dom . client . LoadHandler loadHandler = loadHandlerArgumentCaptor . getValue ( ) ; \"<AssertPlaceHolder>\" ; loadHandler . onLoad ( mock ( com . google . gwt . event . dom . client . LoadEvent . class ) ) ; verify ( body ) . setPixelSize ( eq ( 100 ) , eq ( 200 ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( loadHandler )", "total": "checkSetSizeAttachesLoadHandler ( ) { navigatorThumbnailItemView . setItemPxSize ( 100 , 200 ) ; final org . mockito . ArgumentCaptor < com . google . gwt . event . dom . client . LoadHandler > loadHandlerArgumentCaptor = org . mockito . ArgumentCaptor . forClass ( com . google . gwt . event . dom . client . LoadHandler . class ) ; when ( thumbImage . getWidth ( ) ) . thenReturn ( 100 ) ; when ( thumbImage . getHeight ( ) ) . thenReturn ( 200 ) ; verify ( thumbImage ) . addLoadHandler ( loadHandlerArgumentCaptor . capture ( ) ) ; final com . google . gwt . event . dom . client . LoadHandler loadHandler = loadHandlerArgumentCaptor . getValue ( ) ; \"<AssertPlaceHolder>\" ; loadHandler . onLoad ( mock ( com . google . gwt . event . dom . client . LoadEvent . class ) ) ; verify ( body ) . setPixelSize ( eq ( 100 ) , eq ( 200 ) ) ; } getValue ( ) { return rootPath ; }", "answer": "org . junit . Assert . assertNotNull ( loadHandler )"}
{"focal": "load ( java . lang . String ) { try { this . testSet = this . parser . parseTapStream ( tapStream ) ; } catch ( org . tap4j . parser . ParserException e ) { throw new org . tap4j . consumer . TapConsumerException ( ( ( ( \"Failed<sp>to<sp>parse<sp>TAP<sp>Stream<sp>\" + tapStream ) + \":<sp>\" ) + ( e . getMessage ( ) ) ) , e ) ; } return this . testSet ; }", "testMethod": "testTapPlan ( ) { org . tap4j . consumer . TapConsumer tapConsumer = org . tap4j . consumer . TapConsumerFactory . makeTap13YamlConsumerWithoutSubtests ( ) ; org . tap4j . model . TestSet testSet = tapConsumer . load ( new java . io . File ( org . tap4j . parser . issue3406964 . TestDirectives . class . getResource ( \"/org/tap4j/parser/issueGitHub6/test-report.tap\" ) . getFile ( ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( testSet )", "total": "testTapPlan ( ) { org . tap4j . consumer . TapConsumer tapConsumer = org . tap4j . consumer . TapConsumerFactory . makeTap13YamlConsumerWithoutSubtests ( ) ; org . tap4j . model . TestSet testSet = tapConsumer . load ( new java . io . File ( org . tap4j . parser . issue3406964 . TestDirectives . class . getResource ( \"/org/tap4j/parser/issueGitHub6/test-report.tap\" ) . getFile ( ) ) ) ; \"<AssertPlaceHolder>\" ; } load ( java . lang . String ) { try { this . testSet = this . parser . parseTapStream ( tapStream ) ; } catch ( org . tap4j . parser . ParserException e ) { throw new org . tap4j . consumer . TapConsumerException ( ( ( ( \"Failed<sp>to<sp>parse<sp>TAP<sp>Stream<sp>\" + tapStream ) + \":<sp>\" ) + ( e . getMessage ( ) ) ) , e ) ; } return this . testSet ; }", "answer": "org . junit . Assert . assertNotNull ( testSet )"}
{"focal": "createContext ( ) { java . util . Hashtable < java . lang . Object , java . lang . Object > env = new java . util . Hashtable ( ) ; java . lang . String url = ( ( \"ldap://\" + ( io . apiman . tools . ldap . ApimanLdapServer . LDAP_SERVER ) ) + \":\" ) + ( ldapServer . getPort ( ) ) ; env . put ( Context . PROVIDER_URL , url ) ; env . put ( Context . SECURITY_PRINCIPAL , \"uid=admin,ou=system\" ) ; env . put ( Context . SECURITY_CREDENTIALS , \"secret\" ) ; env . put ( Context . SECURITY_AUTHENTICATION , \"simple\" ) ; env . put ( Context . INITIAL_CONTEXT_FACTORY , \"com.sun.jndi.ldap.LdapCtxFactory\" ) ; javax . naming . InitialContext initialContext = new javax . naming . InitialContext ( env ) ; javax . naming . directory . DirContext appRoot = ( ( javax . naming . directory . DirContext ) ( initialContext . lookup ( \"\" ) ) ) ; org . junit . Assert . assertNotNull ( appRoot ) ; return appRoot ; }", "testMethod": "testLdap ( ) { javax . naming . directory . DirContext ctx = createContext ( ) ; \"<AssertPlaceHolder>\" ; javax . naming . directory . SearchControls controls = new javax . naming . directory . SearchControls ( ) ; controls . setSearchScope ( SearchControls . SUBTREE_SCOPE ) ; javax . naming . NamingEnumeration < javax . naming . directory . SearchResult > result = ctx . search ( \"o=apiman\" , \"(ObjectClass=*)\" , controls ) ; System . out . println ( \"<sp>====<sp>Search<sp>Results<sp>====\" ) ; while ( result . hasMore ( ) ) { javax . naming . directory . SearchResult entry = result . next ( ) ; System . out . println ( ( \"<sp>===><sp>\" + ( entry . getName ( ) ) ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( ctx )", "total": "testLdap ( ) { javax . naming . directory . DirContext ctx = createContext ( ) ; \"<AssertPlaceHolder>\" ; javax . naming . directory . SearchControls controls = new javax . naming . directory . SearchControls ( ) ; controls . setSearchScope ( SearchControls . SUBTREE_SCOPE ) ; javax . naming . NamingEnumeration < javax . naming . directory . SearchResult > result = ctx . search ( \"o=apiman\" , \"(ObjectClass=*)\" , controls ) ; System . out . println ( \"<sp>====<sp>Search<sp>Results<sp>====\" ) ; while ( result . hasMore ( ) ) { javax . naming . directory . SearchResult entry = result . next ( ) ; System . out . println ( ( \"<sp>===><sp>\" + ( entry . getName ( ) ) ) ) ; } } createContext ( ) { java . util . Hashtable < java . lang . Object , java . lang . Object > env = new java . util . Hashtable ( ) ; java . lang . String url = ( ( \"ldap://\" + ( io . apiman . tools . ldap . ApimanLdapServer . LDAP_SERVER ) ) + \":\" ) + ( ldapServer . getPort ( ) ) ; env . put ( Context . PROVIDER_URL , url ) ; env . put ( Context . SECURITY_PRINCIPAL , \"uid=admin,ou=system\" ) ; env . put ( Context . SECURITY_CREDENTIALS , \"secret\" ) ; env . put ( Context . SECURITY_AUTHENTICATION , \"simple\" ) ; env . put ( Context . INITIAL_CONTEXT_FACTORY , \"com.sun.jndi.ldap.LdapCtxFactory\" ) ; javax . naming . InitialContext initialContext = new javax . naming . InitialContext ( env ) ; javax . naming . directory . DirContext appRoot = ( ( javax . naming . directory . DirContext ) ( initialContext . lookup ( \"\" ) ) ) ; org . junit . Assert . assertNotNull ( appRoot ) ; return appRoot ; }", "answer": "org . junit . Assert . assertNotNull ( ctx )"}
{"focal": "typeCheckExpr ( org . arend . term . concrete . Concrete$Expression , org . arend . core . expr . Expression ) { return typeCheckExpr ( new java . util . HashMap ( ) , expression , expectedType , 0 ) ; }", "testMethod": "inferUnderLambda ( ) { org . arend . typechecking . visitor . CheckTypeVisitor . Result result = typeCheckExpr ( \"\\\\lam<sp>(f<sp>:<sp>Nat<sp>-><sp>Nat<sp>-><sp>Nat<sp>-><sp>Nat)<sp>x<sp>=><sp>\\\\lam<sp>z<sp>y<sp>=><sp>f<sp>y<sp>x<sp>z\" , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "inferUnderLambda ( ) { org . arend . typechecking . visitor . CheckTypeVisitor . Result result = typeCheckExpr ( \"\\\\lam<sp>(f<sp>:<sp>Nat<sp>-><sp>Nat<sp>-><sp>Nat<sp>-><sp>Nat)<sp>x<sp>=><sp>\\\\lam<sp>z<sp>y<sp>=><sp>f<sp>y<sp>x<sp>z\" , null ) ; \"<AssertPlaceHolder>\" ; } typeCheckExpr ( org . arend . term . concrete . Concrete$Expression , org . arend . core . expr . Expression ) { return typeCheckExpr ( new java . util . HashMap ( ) , expression , expectedType , 0 ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getFirstMapping ( ) { return firstSolution . isEmpty ( ) ? null : firstSolution ; }", "testMethod": "testSet_MolHandler_MolHandler ( ) { org . openscience . cdk . smiles . SmilesParser sp = new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ) ; org . openscience . cdk . interfaces . IAtomContainer target1 = sp . parseSmiles ( \"C\\\\C=C/Nc1cccc(c1)N(O)\\\\C=C\\\\C\\\\C=C\\\\C=C/C\" ) ; org . openscience . cdk . interfaces . IAtomContainer queryac = sp . parseSmiles ( \"Nc1ccccc1\" ) ; org . openscience . cdk . smsd . tools . MolHandler source = new org . openscience . cdk . smsd . tools . MolHandler ( queryac , true , true ) ; org . openscience . cdk . smsd . tools . MolHandler target = new org . openscience . cdk . smsd . tools . MolHandler ( target1 , true , true ) ; org . openscience . cdk . smsd . algorithm . vflib . VFlibMCSHandler instance = new org . openscience . cdk . smsd . algorithm . vflib . VFlibMCSHandler ( ) ; instance . set ( source , target ) ; instance . searchMCS ( true ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance . getFirstMapping ( ) )", "total": "testSet_MolHandler_MolHandler ( ) { org . openscience . cdk . smiles . SmilesParser sp = new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ) ; org . openscience . cdk . interfaces . IAtomContainer target1 = sp . parseSmiles ( \"C\\\\C=C/Nc1cccc(c1)N(O)\\\\C=C\\\\C\\\\C=C\\\\C=C/C\" ) ; org . openscience . cdk . interfaces . IAtomContainer queryac = sp . parseSmiles ( \"Nc1ccccc1\" ) ; org . openscience . cdk . smsd . tools . MolHandler source = new org . openscience . cdk . smsd . tools . MolHandler ( queryac , true , true ) ; org . openscience . cdk . smsd . tools . MolHandler target = new org . openscience . cdk . smsd . tools . MolHandler ( target1 , true , true ) ; org . openscience . cdk . smsd . algorithm . vflib . VFlibMCSHandler instance = new org . openscience . cdk . smsd . algorithm . vflib . VFlibMCSHandler ( ) ; instance . set ( source , target ) ; instance . searchMCS ( true ) ; \"<AssertPlaceHolder>\" ; } getFirstMapping ( ) { return firstSolution . isEmpty ( ) ? null : firstSolution ; }", "answer": "org . junit . Assert . assertNotNull ( instance . getFirstMapping ( ) )"}
{"focal": "getInstance ( java . lang . Class ) { try { org . xwiki . component . manager . ComponentManager componentManager = this . componentManagerProvider . get ( ) ; org . xwiki . rest . XWikiRestComponent component = componentManager . getInstance ( org . xwiki . rest . XWikiRestComponent . class , clazz . getName ( ) ) ; org . xwiki . component . descriptor . ComponentDescriptor < org . xwiki . rest . XWikiRestComponent > componentDescriptor = componentManager . getComponentDescriptor ( org . xwiki . rest . XWikiRestComponent . class , clazz . getName ( ) ) ; org . xwiki . context . ExecutionContext executionContext = this . execution . getContext ( ) ; java . util . List < org . xwiki . rest . XWikiRestComponent > releasableComponentReferences = ( ( java . util . List < org . xwiki . rest . XWikiRestComponent > ) ( executionContext . getProperty ( Constants . RELEASABLE_COMPONENT_REFERENCES ) ) ) ; if ( releasableComponentReferences == null ) { releasableComponentReferences = new java . util . ArrayList ( ) ; executionContext . setProperty ( Constants . RELEASABLE_COMPONENT_REFERENCES , releasableComponentReferences ) ; } if ( ( componentDescriptor . getInstantiationStrategy ( ) ) == ( org . xwiki . component . descriptor . ComponentInstantiationStrategy . PER_LOOKUP ) ) { releasableComponentReferences . add ( component ) ; } return ( ( T ) ( component ) ) ; } catch ( org . xwiki . component . manager . ComponentLookupException e ) { throw new org . restlet . ext . jaxrs . InstantiateException ( e ) ; } }", "testMethod": "testRegisterComponentInDocumentComponentManager ( ) { final org . jmock . States state = getMockery ( ) . states ( \"test\" ) ; getMockery ( ) . checking ( new org . jmock . Expectations ( ) { { allowing ( mockWikiDescriptorManager ) . getCurrentWikiId ( ) ; when ( state . isNot ( \"otherdocument\" ) ) ; will ( returnValue ( \"space2\" 3 ) ) ; allowing ( mockCurrentSpaceReferenceProvider ) . get ( ) ; when ( state . isNot ( \"otherdocument\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . SpaceReference ( \"space1\" , new org . xwiki . model . reference . WikiReference ( \"space2\" 2 ) ) ) ) ; allowing ( mockCurrentDocumentReferenceProvider ) . get ( ) ; when ( state . isNot ( \"otherdocument\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 3 , \"space1\" , \"document1\" ) ) ) ; allowing ( mockDocumentAccessBridge ) . getCurrentUserReference ( ) ; when ( state . isNot ( \"otherdocument\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 2 , \"XWiki\" , \"user\" ) ) ) ; } } ) ; org . xwiki . component . manager . ComponentManager documentCM = getComponentManager ( ) . getInstance ( org . xwiki . component . manager . ComponentManager . class , \"document\" ) ; org . xwiki . component . descriptor . DefaultComponentDescriptor < org . xwiki . component . internal . ContextComponentManagerTest . Role > cd = new org . xwiki . component . descriptor . DefaultComponentDescriptor < org . xwiki . component . internal . ContextComponentManagerTest . Role > ( ) ; cd . setRoleType ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) ; cd . setImplementation ( org . xwiki . component . internal . ContextComponentManagerTest . RoleImpl . class ) ; documentCM . registerComponent ( cd ) ; org . xwiki . component . manager . ComponentManager contextCM = getComponentManager ( ) . getInstance ( org . xwiki . component . manager . ComponentManager . class , \"context\" ) ; \"<AssertPlaceHolder>\" ; state . become ( \"otherdocument\" ) ; getMockery ( ) . checking ( new org . jmock . Expectations ( ) { { exactly ( 1 ) . of ( mockDocumentAccessBridge ) . getCurrentUserReference ( ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 2 , \"XWiki\" , \"user\" ) ) ) ; allowing ( mockWikiDescriptorManager ) . getCurrentWikiId ( ) ; will ( returnValue ( \"space2\" 0 ) ) ; allowing ( mockCurrentSpaceReferenceProvider ) . get ( ) ; will ( returnValue ( new org . xwiki . model . reference . SpaceReference ( \"space2\" , new org . xwiki . model . reference . WikiReference ( \"space2\" 0 ) ) ) ) ; allowing ( mockCurrentDocumentReferenceProvider ) . get ( ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 0 , \"space2\" , \"document2\" ) ) ) ; } } ) ; try { contextCM . getInstance ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) ; org . junit . Assert . fail ( \"space2\" 1 ) ; } catch ( org . xwiki . component . manager . ComponentLookupException expected ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( contextCM . getInstance ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) )", "total": "testRegisterComponentInDocumentComponentManager ( ) { final org . jmock . States state = getMockery ( ) . states ( \"test\" ) ; getMockery ( ) . checking ( new org . jmock . Expectations ( ) { { allowing ( mockWikiDescriptorManager ) . getCurrentWikiId ( ) ; when ( state . isNot ( \"otherdocument\" ) ) ; will ( returnValue ( \"space2\" 3 ) ) ; allowing ( mockCurrentSpaceReferenceProvider ) . get ( ) ; when ( state . isNot ( \"otherdocument\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . SpaceReference ( \"space1\" , new org . xwiki . model . reference . WikiReference ( \"space2\" 2 ) ) ) ) ; allowing ( mockCurrentDocumentReferenceProvider ) . get ( ) ; when ( state . isNot ( \"otherdocument\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 3 , \"space1\" , \"document1\" ) ) ) ; allowing ( mockDocumentAccessBridge ) . getCurrentUserReference ( ) ; when ( state . isNot ( \"otherdocument\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 2 , \"XWiki\" , \"user\" ) ) ) ; } } ) ; org . xwiki . component . manager . ComponentManager documentCM = getComponentManager ( ) . getInstance ( org . xwiki . component . manager . ComponentManager . class , \"document\" ) ; org . xwiki . component . descriptor . DefaultComponentDescriptor < org . xwiki . component . internal . ContextComponentManagerTest . Role > cd = new org . xwiki . component . descriptor . DefaultComponentDescriptor < org . xwiki . component . internal . ContextComponentManagerTest . Role > ( ) ; cd . setRoleType ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) ; cd . setImplementation ( org . xwiki . component . internal . ContextComponentManagerTest . RoleImpl . class ) ; documentCM . registerComponent ( cd ) ; org . xwiki . component . manager . ComponentManager contextCM = getComponentManager ( ) . getInstance ( org . xwiki . component . manager . ComponentManager . class , \"context\" ) ; \"<AssertPlaceHolder>\" ; state . become ( \"otherdocument\" ) ; getMockery ( ) . checking ( new org . jmock . Expectations ( ) { { exactly ( 1 ) . of ( mockDocumentAccessBridge ) . getCurrentUserReference ( ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 2 , \"XWiki\" , \"user\" ) ) ) ; allowing ( mockWikiDescriptorManager ) . getCurrentWikiId ( ) ; will ( returnValue ( \"space2\" 0 ) ) ; allowing ( mockCurrentSpaceReferenceProvider ) . get ( ) ; will ( returnValue ( new org . xwiki . model . reference . SpaceReference ( \"space2\" , new org . xwiki . model . reference . WikiReference ( \"space2\" 0 ) ) ) ) ; allowing ( mockCurrentDocumentReferenceProvider ) . get ( ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 0 , \"space2\" , \"document2\" ) ) ) ; } } ) ; try { contextCM . getInstance ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) ; org . junit . Assert . fail ( \"space2\" 1 ) ; } catch ( org . xwiki . component . manager . ComponentLookupException expected ) { } } getInstance ( java . lang . Class ) { try { org . xwiki . component . manager . ComponentManager componentManager = this . componentManagerProvider . get ( ) ; org . xwiki . rest . XWikiRestComponent component = componentManager . getInstance ( org . xwiki . rest . XWikiRestComponent . class , clazz . getName ( ) ) ; org . xwiki . component . descriptor . ComponentDescriptor < org . xwiki . rest . XWikiRestComponent > componentDescriptor = componentManager . getComponentDescriptor ( org . xwiki . rest . XWikiRestComponent . class , clazz . getName ( ) ) ; org . xwiki . context . ExecutionContext executionContext = this . execution . getContext ( ) ; java . util . List < org . xwiki . rest . XWikiRestComponent > releasableComponentReferences = ( ( java . util . List < org . xwiki . rest . XWikiRestComponent > ) ( executionContext . getProperty ( Constants . RELEASABLE_COMPONENT_REFERENCES ) ) ) ; if ( releasableComponentReferences == null ) { releasableComponentReferences = new java . util . ArrayList ( ) ; executionContext . setProperty ( Constants . RELEASABLE_COMPONENT_REFERENCES , releasableComponentReferences ) ; } if ( ( componentDescriptor . getInstantiationStrategy ( ) ) == ( org . xwiki . component . descriptor . ComponentInstantiationStrategy . PER_LOOKUP ) ) { releasableComponentReferences . add ( component ) ; } return ( ( T ) ( component ) ) ; } catch ( org . xwiki . component . manager . ComponentLookupException e ) { throw new org . restlet . ext . jaxrs . InstantiateException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( contextCM . getInstance ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) )"}
{"focal": "getConnection ( ) { return connection ; }", "testMethod": "testNormalConnect_WhenTheProviderDoesNotReturnDataSourceWithPool ( ) { org . pentaho . di . core . database . Driver driver = mock ( org . pentaho . di . core . database . Driver . class ) ; when ( driver . acceptsURL ( anyString ( ) ) ) . thenReturn ( true ) ; when ( driver . connect ( anyString ( ) , any ( java . util . Properties . class ) ) ) . thenReturn ( conn ) ; org . pentaho . di . core . database . DriverManager . registerDriver ( driver ) ; when ( meta . isUsingConnectionPool ( ) ) . thenReturn ( true ) ; when ( meta . getDriverClass ( ) ) . thenReturn ( driver . getClass ( ) . getName ( ) ) ; when ( meta . getURL ( anyString ( ) ) ) . thenReturn ( \"mockUrl\" ) ; when ( meta . getInitialPoolSize ( ) ) . thenReturn ( 1 ) ; when ( meta . getMaximumPoolSize ( ) ) . thenReturn ( 1 ) ; org . pentaho . di . core . database . DataSourceProviderInterface provider = mock ( org . pentaho . di . core . database . DataSourceProviderInterface . class ) ; org . pentaho . di . core . database . Database db = new org . pentaho . di . core . database . Database ( log , meta ) ; final org . pentaho . di . core . database . DataSourceProviderInterface existing = org . pentaho . di . core . database . DataSourceProviderFactory . getDataSourceProviderInterface ( ) ; try { org . pentaho . di . core . database . DataSourceProviderFactory . setDataSourceProviderInterface ( provider ) ; db . normalConnect ( \"ConnectThatDoesNotExistInProvider\" ) ; } finally { org . pentaho . di . core . database . DataSourceProviderFactory . setDataSourceProviderInterface ( existing ) ; } \"<AssertPlaceHolder>\" ; org . pentaho . di . core . database . DriverManager . deregisterDriver ( driver ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( db . getConnection ( ) )", "total": "testNormalConnect_WhenTheProviderDoesNotReturnDataSourceWithPool ( ) { org . pentaho . di . core . database . Driver driver = mock ( org . pentaho . di . core . database . Driver . class ) ; when ( driver . acceptsURL ( anyString ( ) ) ) . thenReturn ( true ) ; when ( driver . connect ( anyString ( ) , any ( java . util . Properties . class ) ) ) . thenReturn ( conn ) ; org . pentaho . di . core . database . DriverManager . registerDriver ( driver ) ; when ( meta . isUsingConnectionPool ( ) ) . thenReturn ( true ) ; when ( meta . getDriverClass ( ) ) . thenReturn ( driver . getClass ( ) . getName ( ) ) ; when ( meta . getURL ( anyString ( ) ) ) . thenReturn ( \"mockUrl\" ) ; when ( meta . getInitialPoolSize ( ) ) . thenReturn ( 1 ) ; when ( meta . getMaximumPoolSize ( ) ) . thenReturn ( 1 ) ; org . pentaho . di . core . database . DataSourceProviderInterface provider = mock ( org . pentaho . di . core . database . DataSourceProviderInterface . class ) ; org . pentaho . di . core . database . Database db = new org . pentaho . di . core . database . Database ( log , meta ) ; final org . pentaho . di . core . database . DataSourceProviderInterface existing = org . pentaho . di . core . database . DataSourceProviderFactory . getDataSourceProviderInterface ( ) ; try { org . pentaho . di . core . database . DataSourceProviderFactory . setDataSourceProviderInterface ( provider ) ; db . normalConnect ( \"ConnectThatDoesNotExistInProvider\" ) ; } finally { org . pentaho . di . core . database . DataSourceProviderFactory . setDataSourceProviderInterface ( existing ) ; } \"<AssertPlaceHolder>\" ; org . pentaho . di . core . database . DriverManager . deregisterDriver ( driver ) ; } getConnection ( ) { return connection ; }", "answer": "org . junit . Assert . assertNotNull ( db . getConnection ( ) )"}
{"focal": "findType ( java . lang . String ) { java . util . Optional < org . springframework . ide . vscode . commons . java . IType > type = binaryTypeCache . getIfPresent ( fqName ) ; if ( type == null ) { type = sourceTypeCache . getIfPresent ( fqName ) ; } if ( type == null ) { org . springframework . ide . vscode . commons . protocol . java . TypeData data = findTypeData ( fqName ) ; if ( data == null ) { type = java . util . Optional . empty ( ) ; sourceTypeCache . put ( fqName , type ) ; } else { type = java . util . Optional . of ( toType ( data ) ) ; if ( org . springframework . ide . vscode . commons . protocol . java . Classpath . isBinary ( data . getClasspathEntry ( ) . getCpe ( ) ) ) { binaryTypeCache . put ( fqName , type ) ; } else { sourceTypeCache . put ( fqName , type ) ; } } } return type . orElse ( null ) ; }", "testMethod": "findClassInOutputFolder ( ) { org . springframework . ide . vscode . commons . maven . java . MavenJavaProject project = org . springframework . ide . vscode . commons . maven . JavaIndexTest . mavenProjectsCache . get ( \"gs-rest-service-cors-boot-1.4.1-with-classpath-file\" ) ; org . springframework . ide . vscode . commons . java . IType type = project . getIndex ( ) . findType ( \"hello.Greeting\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( type )", "total": "findClassInOutputFolder ( ) { org . springframework . ide . vscode . commons . maven . java . MavenJavaProject project = org . springframework . ide . vscode . commons . maven . JavaIndexTest . mavenProjectsCache . get ( \"gs-rest-service-cors-boot-1.4.1-with-classpath-file\" ) ; org . springframework . ide . vscode . commons . java . IType type = project . getIndex ( ) . findType ( \"hello.Greeting\" ) ; \"<AssertPlaceHolder>\" ; } findType ( java . lang . String ) { java . util . Optional < org . springframework . ide . vscode . commons . java . IType > type = binaryTypeCache . getIfPresent ( fqName ) ; if ( type == null ) { type = sourceTypeCache . getIfPresent ( fqName ) ; } if ( type == null ) { org . springframework . ide . vscode . commons . protocol . java . TypeData data = findTypeData ( fqName ) ; if ( data == null ) { type = java . util . Optional . empty ( ) ; sourceTypeCache . put ( fqName , type ) ; } else { type = java . util . Optional . of ( toType ( data ) ) ; if ( org . springframework . ide . vscode . commons . protocol . java . Classpath . isBinary ( data . getClasspathEntry ( ) . getCpe ( ) ) ) { binaryTypeCache . put ( fqName , type ) ; } else { sourceTypeCache . put ( fqName , type ) ; } } } return type . orElse ( null ) ; }", "answer": "org . junit . Assert . assertNotNull ( type )"}
{"focal": "getInfo ( edu . illinois . library . cantaloupe . image . Identifier ) { edu . illinois . library . cantaloupe . cache . HeapCache . Item item = get ( itemKey ( identifier ) ) ; if ( item != null ) { edu . illinois . library . cantaloupe . cache . HeapCache . LOGGER . debug ( \"getInfo():<sp>hit<sp>for<sp>{}\" , identifier ) ; edu . illinois . library . cantaloupe . image . Info info = edu . illinois . library . cantaloupe . image . Info . fromJSON ( new java . lang . String ( item . getData ( ) , java . nio . charset . StandardCharsets . UTF_8 ) ) ; return java . util . Optional . of ( info ) ; } return java . util . Optional . empty ( ) ; }", "testMethod": "testGetImageInfoUpdatesLastModifiedTime ( ) { assumeFalse ( edu . illinois . library . cantaloupe . cache . S3CacheTest . Service . MINIO . equals ( edu . illinois . library . cantaloupe . cache . S3CacheTest . getService ( ) ) ) ; edu . illinois . library . cantaloupe . config . Configuration . getInstance ( ) . setProperty ( Key . DERIVATIVE_CACHE_TTL , 1 ) ; final edu . illinois . library . cantaloupe . cache . DerivativeCache instance = newInstance ( ) ; edu . illinois . library . cantaloupe . image . Identifier identifier = new edu . illinois . library . cantaloupe . image . Identifier ( \"cats\" ) ; edu . illinois . library . cantaloupe . image . Info info = new edu . illinois . library . cantaloupe . image . Info ( ) ; instance . put ( identifier , info ) ; for ( int i = 0 ; i < 10 ; i ++ ) { java . lang . Thread . sleep ( 250 ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( instance . getInfo ( identifier ) )", "total": "testGetImageInfoUpdatesLastModifiedTime ( ) { assumeFalse ( edu . illinois . library . cantaloupe . cache . S3CacheTest . Service . MINIO . equals ( edu . illinois . library . cantaloupe . cache . S3CacheTest . getService ( ) ) ) ; edu . illinois . library . cantaloupe . config . Configuration . getInstance ( ) . setProperty ( Key . DERIVATIVE_CACHE_TTL , 1 ) ; final edu . illinois . library . cantaloupe . cache . DerivativeCache instance = newInstance ( ) ; edu . illinois . library . cantaloupe . image . Identifier identifier = new edu . illinois . library . cantaloupe . image . Identifier ( \"cats\" ) ; edu . illinois . library . cantaloupe . image . Info info = new edu . illinois . library . cantaloupe . image . Info ( ) ; instance . put ( identifier , info ) ; for ( int i = 0 ; i < 10 ; i ++ ) { java . lang . Thread . sleep ( 250 ) ; \"<AssertPlaceHolder>\" ; } } getInfo ( edu . illinois . library . cantaloupe . image . Identifier ) { edu . illinois . library . cantaloupe . cache . HeapCache . Item item = get ( itemKey ( identifier ) ) ; if ( item != null ) { edu . illinois . library . cantaloupe . cache . HeapCache . LOGGER . debug ( \"getInfo():<sp>hit<sp>for<sp>{}\" , identifier ) ; edu . illinois . library . cantaloupe . image . Info info = edu . illinois . library . cantaloupe . image . Info . fromJSON ( new java . lang . String ( item . getData ( ) , java . nio . charset . StandardCharsets . UTF_8 ) ) ; return java . util . Optional . of ( info ) ; } return java . util . Optional . empty ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( instance . getInfo ( identifier ) )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . Diseases entity = new org . oscarehr . common . model . Diseases ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . Diseases entity = new org . oscarehr . common . model . Diseases ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "testImportExportImport ( java . lang . String ) { java . net . URL url = org . deegree . filter . xml . Filter110XMLEncoderTest . class . getResource ( ( \"v110/\" + resource ) ) ; javax . xml . stream . XMLStreamReader in = javax . xml . stream . XMLInputFactory . newInstance ( ) . createXMLStreamReader ( url . toString ( ) , url . openStream ( ) ) ; in . nextTag ( ) ; org . deegree . filter . Filter filter = org . deegree . filter . xml . Filter110XMLDecoder . parse ( in ) ; java . io . ByteArrayOutputStream bos = new java . io . ByteArrayOutputStream ( ) ; javax . xml . stream . XMLStreamWriter out = javax . xml . stream . XMLOutputFactory . newInstance ( ) . createXMLStreamWriter ( bos ) ; org . deegree . filter . xml . Filter110XMLEncoder . export ( filter , out ) ; out . close ( ) ; in = javax . xml . stream . XMLInputFactory . newInstance ( ) . createXMLStreamReader ( new java . io . ByteArrayInputStream ( bos . toByteArray ( ) ) ) ; in . nextTag ( ) ; System . out . println ( new java . lang . String ( bos . toByteArray ( ) ) ) ; return org . deegree . filter . xml . Filter110XMLDecoder . parse ( in ) ; }", "testMethod": "parseOverlapsFilter ( ) { org . deegree . filter . Filter filter = testImportExportImport ( \"testfilter22.xml\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( filter )", "total": "parseOverlapsFilter ( ) { org . deegree . filter . Filter filter = testImportExportImport ( \"testfilter22.xml\" ) ; \"<AssertPlaceHolder>\" ; } testImportExportImport ( java . lang . String ) { java . net . URL url = org . deegree . filter . xml . Filter110XMLEncoderTest . class . getResource ( ( \"v110/\" + resource ) ) ; javax . xml . stream . XMLStreamReader in = javax . xml . stream . XMLInputFactory . newInstance ( ) . createXMLStreamReader ( url . toString ( ) , url . openStream ( ) ) ; in . nextTag ( ) ; org . deegree . filter . Filter filter = org . deegree . filter . xml . Filter110XMLDecoder . parse ( in ) ; java . io . ByteArrayOutputStream bos = new java . io . ByteArrayOutputStream ( ) ; javax . xml . stream . XMLStreamWriter out = javax . xml . stream . XMLOutputFactory . newInstance ( ) . createXMLStreamWriter ( bos ) ; org . deegree . filter . xml . Filter110XMLEncoder . export ( filter , out ) ; out . close ( ) ; in = javax . xml . stream . XMLInputFactory . newInstance ( ) . createXMLStreamReader ( new java . io . ByteArrayInputStream ( bos . toByteArray ( ) ) ) ; in . nextTag ( ) ; System . out . println ( new java . lang . String ( bos . toByteArray ( ) ) ) ; return org . deegree . filter . xml . Filter110XMLDecoder . parse ( in ) ; }", "answer": "org . junit . Assert . assertNotNull ( filter )"}
{"focal": "newSingletonRuntimeManager ( org . kie . api . runtime . manager . RuntimeEnvironment , java . lang . String ) { org . kie . internal . runtime . manager . SessionFactory factory = getSessionFactory ( environment , identifier ) ; org . kie . internal . runtime . manager . TaskServiceFactory taskServiceFactory = getTaskServiceFactory ( environment ) ; org . kie . api . runtime . manager . RuntimeManager manager = new org . jbpm . runtime . manager . impl . SingletonRuntimeManager ( environment , factory , taskServiceFactory , identifier ) ; initTimerService ( environment , manager ) ; ( ( org . jbpm . runtime . manager . impl . AbstractRuntimeManager ) ( manager ) ) . init ( ) ; return manager ; }", "testMethod": "testSingletonMultiInstanceCallactivityCompleteAtTheSameTime ( ) { org . kie . api . runtime . manager . RuntimeEnvironment environment = createEnvironment ( ) ; manager = RuntimeManagerFactory . Factory . get ( ) . newSingletonRuntimeManager ( environment , \"first\" ) ; \"<AssertPlaceHolder>\" ; testMultiInstanceCallactivityCompleteAtTheSameTime ( org . kie . internal . runtime . manager . context . ProcessInstanceIdContext . get ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( manager )", "total": "testSingletonMultiInstanceCallactivityCompleteAtTheSameTime ( ) { org . kie . api . runtime . manager . RuntimeEnvironment environment = createEnvironment ( ) ; manager = RuntimeManagerFactory . Factory . get ( ) . newSingletonRuntimeManager ( environment , \"first\" ) ; \"<AssertPlaceHolder>\" ; testMultiInstanceCallactivityCompleteAtTheSameTime ( org . kie . internal . runtime . manager . context . ProcessInstanceIdContext . get ( ) ) ; } newSingletonRuntimeManager ( org . kie . api . runtime . manager . RuntimeEnvironment , java . lang . String ) { org . kie . internal . runtime . manager . SessionFactory factory = getSessionFactory ( environment , identifier ) ; org . kie . internal . runtime . manager . TaskServiceFactory taskServiceFactory = getTaskServiceFactory ( environment ) ; org . kie . api . runtime . manager . RuntimeManager manager = new org . jbpm . runtime . manager . impl . SingletonRuntimeManager ( environment , factory , taskServiceFactory , identifier ) ; initTimerService ( environment , manager ) ; ( ( org . jbpm . runtime . manager . impl . AbstractRuntimeManager ) ( manager ) ) . init ( ) ; return manager ; }", "answer": "org . junit . Assert . assertNotNull ( manager )"}
{"focal": "createSettingsPanel ( ) { return new kg . apc . jmeter . vizualizers . JSettingsPanel ( this , ( ( ( ( ( ( ( JSettingsPanel . TIMELINE_OPTION ) | ( JSettingsPanel . GRADIENT_OPTION ) ) | ( JSettingsPanel . FINAL_ZEROING_OPTION ) ) | ( JSettingsPanel . LIMIT_POINT_OPTION ) ) | ( JSettingsPanel . MAXY_OPTION ) ) | ( JSettingsPanel . RELATIVE_TIME_OPTION ) ) | ( JSettingsPanel . MARKERS_OPTION ) ) ) ; }", "testMethod": "testCreateSettingsPanel ( ) { System . out . println ( \"createSettingsPanel\" ) ; kg . apc . jmeter . vizualizers . JSettingsPanel result = instance . createSettingsPanel ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testCreateSettingsPanel ( ) { System . out . println ( \"createSettingsPanel\" ) ; kg . apc . jmeter . vizualizers . JSettingsPanel result = instance . createSettingsPanel ( ) ; \"<AssertPlaceHolder>\" ; } createSettingsPanel ( ) { return new kg . apc . jmeter . vizualizers . JSettingsPanel ( this , ( ( ( ( ( ( ( JSettingsPanel . TIMELINE_OPTION ) | ( JSettingsPanel . GRADIENT_OPTION ) ) | ( JSettingsPanel . FINAL_ZEROING_OPTION ) ) | ( JSettingsPanel . LIMIT_POINT_OPTION ) ) | ( JSettingsPanel . MAXY_OPTION ) ) | ( JSettingsPanel . RELATIVE_TIME_OPTION ) ) | ( JSettingsPanel . MARKERS_OPTION ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "smithWaterman ( ) { org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringMetrics . smithWaterman ( ) ) ; }", "testMethod": "smithWaterman ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringMetrics . smithWaterman ( ) )", "total": "smithWaterman ( ) { \"<AssertPlaceHolder>\" ; } smithWaterman ( ) { org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringMetrics . smithWaterman ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringMetrics . smithWaterman ( ) )"}
{"focal": "fail ( org . apache . calcite . rel . RelNode ) { setResultCacheInvalidReason ( ( ( \"Unsupported<sp>RelNode<sp>type<sp>\" + ( node . getRelTypeName ( ) ) ) + \"<sp>encountered<sp>in<sp>the<sp>query<sp>plan\" ) ) ; setAutomaticRewritingInvalidReason ( node ) ; throw Util . FoundOne . NULL ; }", "testMethod": "testQueryTimeout ( ) { java . lang . String udfName = org . apache . hive . jdbc . TestJdbcDriver2 . SleepMsUDF . class . getName ( ) ; java . sql . Statement stmt1 = org . apache . hive . jdbc . TestJdbcDriver2 . con . createStatement ( ) ; stmt1 . execute ( ( ( \"create<sp>temporary<sp>function<sp>sleepMsUDF<sp>as<sp>'\" + udfName ) + \"'\" ) ) ; stmt1 . close ( ) ; java . sql . Statement stmt = org . apache . hive . jdbc . TestJdbcDriver2 . con . createStatement ( ) ; stmt . setQueryTimeout ( 1 ) ; System . err . println ( \"Executing<sp>query:<sp>\" ) ; try { stmt . executeQuery ( ( ( ( ( ( \"select<sp>sleepMsUDF(t1.under_col,<sp>5)<sp>as<sp>u0,<sp>t1.under_col<sp>as<sp>u1,<sp>\" + \"t2.under_col<sp>as<sp>u2<sp>from<sp>\" ) + ( org . apache . hive . jdbc . TestJdbcDriver2 . tableName ) ) + \"<sp>t1<sp>join<sp>\" ) + ( org . apache . hive . jdbc . TestJdbcDriver2 . tableName ) ) + \"<sp>t2<sp>on<sp>t1.under_col<sp>=<sp>t2.under_col\" ) ) ; org . junit . Assert . fail ( \"Expecting<sp>SQLTimeoutException\" ) ; } catch ( java . sql . SQLTimeoutException e ) { \"<AssertPlaceHolder>\" ; System . err . println ( e . toString ( ) ) ; } catch ( java . sql . SQLException e ) { org . junit . Assert . fail ( ( \"select<sp>sleepMsUDF(t1.under_col,<sp>5)<sp>as<sp>u0,<sp>t1.under_col<sp>as<sp>u1,<sp>\" 0 + e ) ) ; e . printStackTrace ( ) ; } stmt . setQueryTimeout ( 5 ) ; try { stmt . executeQuery ( \"show<sp>tables\" ) ; } catch ( java . sql . SQLException e ) { org . junit . Assert . fail ( ( \"Unexpected<sp>SQLException:<sp>\" + e ) ) ; e . printStackTrace ( ) ; } stmt . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( e )", "total": "testQueryTimeout ( ) { java . lang . String udfName = org . apache . hive . jdbc . TestJdbcDriver2 . SleepMsUDF . class . getName ( ) ; java . sql . Statement stmt1 = org . apache . hive . jdbc . TestJdbcDriver2 . con . createStatement ( ) ; stmt1 . execute ( ( ( \"create<sp>temporary<sp>function<sp>sleepMsUDF<sp>as<sp>'\" + udfName ) + \"'\" ) ) ; stmt1 . close ( ) ; java . sql . Statement stmt = org . apache . hive . jdbc . TestJdbcDriver2 . con . createStatement ( ) ; stmt . setQueryTimeout ( 1 ) ; System . err . println ( \"Executing<sp>query:<sp>\" ) ; try { stmt . executeQuery ( ( ( ( ( ( \"select<sp>sleepMsUDF(t1.under_col,<sp>5)<sp>as<sp>u0,<sp>t1.under_col<sp>as<sp>u1,<sp>\" + \"t2.under_col<sp>as<sp>u2<sp>from<sp>\" ) + ( org . apache . hive . jdbc . TestJdbcDriver2 . tableName ) ) + \"<sp>t1<sp>join<sp>\" ) + ( org . apache . hive . jdbc . TestJdbcDriver2 . tableName ) ) + \"<sp>t2<sp>on<sp>t1.under_col<sp>=<sp>t2.under_col\" ) ) ; org . junit . Assert . fail ( \"Expecting<sp>SQLTimeoutException\" ) ; } catch ( java . sql . SQLTimeoutException e ) { \"<AssertPlaceHolder>\" ; System . err . println ( e . toString ( ) ) ; } catch ( java . sql . SQLException e ) { org . junit . Assert . fail ( ( \"select<sp>sleepMsUDF(t1.under_col,<sp>5)<sp>as<sp>u0,<sp>t1.under_col<sp>as<sp>u1,<sp>\" 0 + e ) ) ; e . printStackTrace ( ) ; } stmt . setQueryTimeout ( 5 ) ; try { stmt . executeQuery ( \"show<sp>tables\" ) ; } catch ( java . sql . SQLException e ) { org . junit . Assert . fail ( ( \"Unexpected<sp>SQLException:<sp>\" + e ) ) ; e . printStackTrace ( ) ; } stmt . close ( ) ; } fail ( org . apache . calcite . rel . RelNode ) { setResultCacheInvalidReason ( ( ( \"Unsupported<sp>RelNode<sp>type<sp>\" + ( node . getRelTypeName ( ) ) ) + \"<sp>encountered<sp>in<sp>the<sp>query<sp>plan\" ) ) ; setAutomaticRewritingInvalidReason ( node ) ; throw Util . FoundOne . NULL ; }", "answer": "org . junit . Assert . assertNotNull ( e )"}
{"focal": "find ( ) { if ( ( gerritProject ) == null ) { return null ; } gerritHost = getHostFromUrl ( getGitDaemonUrl ( ) ) ; if ( ( gerritHost ) != null ) { findMatchingRepository ( ) ; } if ( ( repository ) == null ) { gerritHost = getHostFromUrl ( taskRepository . getRepositoryUrl ( ) ) ; if ( ( gerritHost ) != null ) { findMatchingRepository ( ) ; } } return repository ; }", "testMethod": "testFindMatching ( ) { org . eclipse . mylyn . internal . gerrit . core . egit . GerritToGitMapping mapping = createTestMapping ( createRepositories ( \"project1\" , org . eclipse . mylyn . internal . gerrit . core . egit . GerritToGitMappingTest . GERRIT_PROJECT ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( mapping . find ( ) )", "total": "testFindMatching ( ) { org . eclipse . mylyn . internal . gerrit . core . egit . GerritToGitMapping mapping = createTestMapping ( createRepositories ( \"project1\" , org . eclipse . mylyn . internal . gerrit . core . egit . GerritToGitMappingTest . GERRIT_PROJECT ) ) ; \"<AssertPlaceHolder>\" ; } find ( ) { if ( ( gerritProject ) == null ) { return null ; } gerritHost = getHostFromUrl ( getGitDaemonUrl ( ) ) ; if ( ( gerritHost ) != null ) { findMatchingRepository ( ) ; } if ( ( repository ) == null ) { gerritHost = getHostFromUrl ( taskRepository . getRepositoryUrl ( ) ) ; if ( ( gerritHost ) != null ) { findMatchingRepository ( ) ; } } return repository ; }", "answer": "org . junit . Assert . assertNotNull ( mapping . find ( ) )"}
{"focal": "getMessage ( ) { return message ; }", "testMethod": "migrate_DatastoreNull ( ) { try { datastore . migrate ( null , at . ac . tuwien . infosys . jcloudscale . datastore . test . core . DatastoreImplTest . PersonManual . class , \"SomeID\" ) ; org . junit . Assert . fail ( ) ; } catch ( at . ac . tuwien . infosys . jcloudscale . datastore . api . DatastoreException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "migrate_DatastoreNull ( ) { try { datastore . migrate ( null , at . ac . tuwien . infosys . jcloudscale . datastore . test . core . DatastoreImplTest . PersonManual . class , \"SomeID\" ) ; org . junit . Assert . fail ( ) ; } catch ( at . ac . tuwien . infosys . jcloudscale . datastore . api . DatastoreException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return message ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "nodeConnectorInstanceIdentifierFromDatapathIdPortno ( java . math . BigInteger , java . lang . Long , org . opendaylight . openflowplugin . api . openflow . md . util . OpenflowVersion ) { org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . NodeId nodeId = org . opendaylight . openflowplugin . openflow . md . util . InventoryDataServiceUtil . nodeIdFromDatapathId ( datapathId ) ; org . opendaylight . yangtools . yang . binding . KeyedInstanceIdentifier < org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . nodes . Node , org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . nodes . NodeKey > nodePath = org . opendaylight . openflowplugin . openflow . md . util . InventoryDataServiceUtil . NODES_IDENTIFIER . child ( org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . nodes . Node . class , new org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . nodes . NodeKey ( nodeId ) ) ; return org . opendaylight . openflowplugin . openflow . md . util . InventoryDataServiceUtil . nodeConnectorInstanceIdentifierFromDatapathIdPortno ( datapathId , portNo , ofVersion , nodePath ) ; }", "testMethod": "testNodeConnectorInstanceIdentifierFromDatapathIdPortno ( ) { org . opendaylight . yangtools . yang . binding . InstanceIdentifier < org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . node . NodeConnector > nodeConnectorInstanceIdentifier = org . opendaylight . openflowplugin . openflow . md . util . InventoryDataServiceUtil . nodeConnectorInstanceIdentifierFromDatapathIdPortno ( BigInteger . ONE , org . opendaylight . openflowplugin . openflow . md . util . InventoryDataServiceUtilTest . PORT_NO , OpenflowVersion . OF10 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( nodeConnectorInstanceIdentifier )", "total": "testNodeConnectorInstanceIdentifierFromDatapathIdPortno ( ) { org . opendaylight . yangtools . yang . binding . InstanceIdentifier < org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . node . NodeConnector > nodeConnectorInstanceIdentifier = org . opendaylight . openflowplugin . openflow . md . util . InventoryDataServiceUtil . nodeConnectorInstanceIdentifierFromDatapathIdPortno ( BigInteger . ONE , org . opendaylight . openflowplugin . openflow . md . util . InventoryDataServiceUtilTest . PORT_NO , OpenflowVersion . OF10 ) ; \"<AssertPlaceHolder>\" ; } nodeConnectorInstanceIdentifierFromDatapathIdPortno ( java . math . BigInteger , java . lang . Long , org . opendaylight . openflowplugin . api . openflow . md . util . OpenflowVersion ) { org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . NodeId nodeId = org . opendaylight . openflowplugin . openflow . md . util . InventoryDataServiceUtil . nodeIdFromDatapathId ( datapathId ) ; org . opendaylight . yangtools . yang . binding . KeyedInstanceIdentifier < org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . nodes . Node , org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . nodes . NodeKey > nodePath = org . opendaylight . openflowplugin . openflow . md . util . InventoryDataServiceUtil . NODES_IDENTIFIER . child ( org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . nodes . Node . class , new org . opendaylight . yang . gen . v1 . urn . opendaylight . inventory . rev130819 . nodes . NodeKey ( nodeId ) ) ; return org . opendaylight . openflowplugin . openflow . md . util . InventoryDataServiceUtil . nodeConnectorInstanceIdentifierFromDatapathIdPortno ( datapathId , portNo , ofVersion , nodePath ) ; }", "answer": "org . junit . Assert . assertNotNull ( nodeConnectorInstanceIdentifier )"}
{"focal": "getAccessToken ( ) { return accessToken ; }", "testMethod": "givenOAuth2Context_whenAccessTokenIsRequested_ThenAccessTokenValueIsNotNull ( ) { org . springframework . security . oauth2 . client . token . grant . client . ClientCredentialsResourceDetails resourceDetails = getClientCredentialsResourceDetails ( \"client\" , asList ( \"read\" , \"write\" ) ) ; org . springframework . security . oauth2 . client . OAuth2RestTemplate restTemplate = getOAuth2RestTemplate ( resourceDetails ) ; org . springframework . security . oauth2 . common . OAuth2AccessToken accessToken = restTemplate . getAccessToken ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( accessToken )", "total": "givenOAuth2Context_whenAccessTokenIsRequested_ThenAccessTokenValueIsNotNull ( ) { org . springframework . security . oauth2 . client . token . grant . client . ClientCredentialsResourceDetails resourceDetails = getClientCredentialsResourceDetails ( \"client\" , asList ( \"read\" , \"write\" ) ) ; org . springframework . security . oauth2 . client . OAuth2RestTemplate restTemplate = getOAuth2RestTemplate ( resourceDetails ) ; org . springframework . security . oauth2 . common . OAuth2AccessToken accessToken = restTemplate . getAccessToken ( ) ; \"<AssertPlaceHolder>\" ; } getAccessToken ( ) { return accessToken ; }", "answer": "org . junit . Assert . assertNotNull ( accessToken )"}
{"focal": "getPlaylist ( ) { return this . playlist ; }", "testMethod": "testGetPlaylist ( ) { org . bff . javampd . server . MPD mpd = mpdBuilder . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( mpd . getPlaylist ( ) )", "total": "testGetPlaylist ( ) { org . bff . javampd . server . MPD mpd = mpdBuilder . build ( ) ; \"<AssertPlaceHolder>\" ; } getPlaylist ( ) { return this . playlist ; }", "answer": "org . junit . Assert . assertNotNull ( mpd . getPlaylist ( ) )"}
{"focal": "getOngeldigAangewezenObjectOfVoorkomen ( ) { nl . bzk . brp . bijhouding . bericht . model . BmrGroep result = null ; final nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon persoon = getPartner ( ) . getPersoonEntiteit ( ) ; final java . lang . String voorkomenSleutel = getPartner ( ) . getGeboorte ( ) . getVoorkomenSleutel ( ) ; if ( ( persoon != null ) && ( voorkomenSleutel != null ) ) { final nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonGeboorteHistorie historie = persoon . zoekRelatieHistorieVoorVoorkomenSleutel ( voorkomenSleutel , nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonGeboorteHistorie . class ) ; if ( historie == null ) { result = getPartner ( ) . getGeboorte ( ) ; } } return result ; }", "testMethod": "testOngeldigeAangewezenObjectOfVoorkomen_GeenHistorieGevonden ( ) { final nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon partner = mock ( nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon . class ) ; when ( bericht . getEntiteitVoorObjectSleutel ( nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon . class , nl . bzk . brp . bijhouding . bericht . model . CorrectieVervalGeboorteGerelateerdeTest . PARTNER_OBJ_SLEUTEL ) ) . thenReturn ( partner ) ; final nl . bzk . brp . bijhouding . bericht . model . ElementBuilder . PersoonParameters persoonParams = new nl . bzk . brp . bijhouding . bericht . model . ElementBuilder . PersoonParameters ( ) ; final java . lang . String voorkomenSleutel = \"1234\" ; final nl . bzk . brp . bijhouding . bericht . model . GeboorteElement geboorteElement = builder . maakGeboorteElementVoorVerval ( \"ident\" , voorkomenSleutel ) ; persoonParams . geboorte ( geboorteElement ) ; final nl . bzk . brp . bijhouding . bericht . model . CorrectieVervalGeboorteGerelateerde actie = maakBasisActie ( persoonParams ) ; when ( partner . zoekRelatieHistorieVoorVoorkomenSleutel ( voorkomenSleutel , nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonGeboorteHistorie . class ) ) . thenReturn ( null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( actie . getOngeldigAangewezenObjectOfVoorkomen ( ) )", "total": "testOngeldigeAangewezenObjectOfVoorkomen_GeenHistorieGevonden ( ) { final nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon partner = mock ( nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon . class ) ; when ( bericht . getEntiteitVoorObjectSleutel ( nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon . class , nl . bzk . brp . bijhouding . bericht . model . CorrectieVervalGeboorteGerelateerdeTest . PARTNER_OBJ_SLEUTEL ) ) . thenReturn ( partner ) ; final nl . bzk . brp . bijhouding . bericht . model . ElementBuilder . PersoonParameters persoonParams = new nl . bzk . brp . bijhouding . bericht . model . ElementBuilder . PersoonParameters ( ) ; final java . lang . String voorkomenSleutel = \"1234\" ; final nl . bzk . brp . bijhouding . bericht . model . GeboorteElement geboorteElement = builder . maakGeboorteElementVoorVerval ( \"ident\" , voorkomenSleutel ) ; persoonParams . geboorte ( geboorteElement ) ; final nl . bzk . brp . bijhouding . bericht . model . CorrectieVervalGeboorteGerelateerde actie = maakBasisActie ( persoonParams ) ; when ( partner . zoekRelatieHistorieVoorVoorkomenSleutel ( voorkomenSleutel , nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonGeboorteHistorie . class ) ) . thenReturn ( null ) ; \"<AssertPlaceHolder>\" ; } getOngeldigAangewezenObjectOfVoorkomen ( ) { nl . bzk . brp . bijhouding . bericht . model . BmrGroep result = null ; final nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon persoon = getPartner ( ) . getPersoonEntiteit ( ) ; final java . lang . String voorkomenSleutel = getPartner ( ) . getGeboorte ( ) . getVoorkomenSleutel ( ) ; if ( ( persoon != null ) && ( voorkomenSleutel != null ) ) { final nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonGeboorteHistorie historie = persoon . zoekRelatieHistorieVoorVoorkomenSleutel ( voorkomenSleutel , nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonGeboorteHistorie . class ) ; if ( historie == null ) { result = getPartner ( ) . getGeboorte ( ) ; } } return result ; }", "answer": "org . junit . Assert . assertNotNull ( actie . getOngeldigAangewezenObjectOfVoorkomen ( ) )"}
{"focal": "toBase64String ( ) { org . jboss . dmr . client . DataOutput out = new org . jboss . dmr . client . DataOutput ( ) ; try { writeExternal ( out ) ; } catch ( java . io . IOException e ) { throw new java . lang . IllegalStateException ( e ) ; } return org . jboss . dmr . client . Base64 . encodeBytes ( out . getBytes ( ) ) ; }", "testMethod": "testEncoding ( ) { org . jboss . dmr . client . ModelNode operation = new org . jboss . dmr . client . ModelNode ( ) ; operation . get ( org . jboss . dmr . client . ModelDescriptionConstants . OP ) . set ( \"add-system-property\" ) ; operation . get ( org . jboss . dmr . client . ModelDescriptionConstants . ADDRESS ) . add ( \"server-group\" , \"mygroup\" ) ; operation . get ( \"name\" ) . set ( \"-Xdebug<sp>-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9797\" ) ; operation . get ( \"value\" ) . set ( \"valueString\" ) ; operation . get ( \"boot-time\" ) . set ( true ) ; java . lang . String base64 = operation . toBase64String ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( base64 )", "total": "testEncoding ( ) { org . jboss . dmr . client . ModelNode operation = new org . jboss . dmr . client . ModelNode ( ) ; operation . get ( org . jboss . dmr . client . ModelDescriptionConstants . OP ) . set ( \"add-system-property\" ) ; operation . get ( org . jboss . dmr . client . ModelDescriptionConstants . ADDRESS ) . add ( \"server-group\" , \"mygroup\" ) ; operation . get ( \"name\" ) . set ( \"-Xdebug<sp>-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9797\" ) ; operation . get ( \"value\" ) . set ( \"valueString\" ) ; operation . get ( \"boot-time\" ) . set ( true ) ; java . lang . String base64 = operation . toBase64String ( ) ; \"<AssertPlaceHolder>\" ; } toBase64String ( ) { org . jboss . dmr . client . DataOutput out = new org . jboss . dmr . client . DataOutput ( ) ; try { writeExternal ( out ) ; } catch ( java . io . IOException e ) { throw new java . lang . IllegalStateException ( e ) ; } return org . jboss . dmr . client . Base64 . encodeBytes ( out . getBytes ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( base64 )"}
{"focal": "getMostCompleteInstance ( com . openpojo . reflection . PojoClass ) { final com . openpojo . reflection . PojoMethod constructor = com . openpojo . reflection . construct . InstanceFactory . getConstructorByCriteria ( pojoClass , new com . openpojo . reflection . construct . utils . GreaterThan ( ) ) ; java . lang . Object [ ] parameters = com . openpojo . reflection . construct . InstanceFactory . generateRandomValuesForParameters ( pojoClass , constructor ) ; return com . openpojo . reflection . construct . InstanceFactory . getInstance ( pojoClass , parameters ) ; }", "testMethod": "shouldSkipSyntheticConstructor ( ) { final com . openpojo . reflection . PojoClass classWithStaticConstructorPojo = getPojoClass ( com . openpojo . reflection . construct . ClassWithSyntheticConstructor . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . openpojo . reflection . construct . InstanceFactory . getMostCompleteInstance ( classWithStaticConstructorPojo ) )", "total": "shouldSkipSyntheticConstructor ( ) { final com . openpojo . reflection . PojoClass classWithStaticConstructorPojo = getPojoClass ( com . openpojo . reflection . construct . ClassWithSyntheticConstructor . class ) ; \"<AssertPlaceHolder>\" ; } getMostCompleteInstance ( com . openpojo . reflection . PojoClass ) { final com . openpojo . reflection . PojoMethod constructor = com . openpojo . reflection . construct . InstanceFactory . getConstructorByCriteria ( pojoClass , new com . openpojo . reflection . construct . utils . GreaterThan ( ) ) ; java . lang . Object [ ] parameters = com . openpojo . reflection . construct . InstanceFactory . generateRandomValuesForParameters ( pojoClass , constructor ) ; return com . openpojo . reflection . construct . InstanceFactory . getInstance ( pojoClass , parameters ) ; }", "answer": "org . junit . Assert . assertNotNull ( com . openpojo . reflection . construct . InstanceFactory . getMostCompleteInstance ( classWithStaticConstructorPojo ) )"}
{"focal": "createComparablePath ( java . lang . Class , com . querydsl . core . types . PathMetadata ) { return com . querydsl . core . types . dsl . Expressions . comparablePath ( type , metadata ) ; }", "testMethod": "createComparablePath ( ) { com . querydsl . core . types . Path < java . lang . String > path = pathFactory . createComparablePath ( java . lang . String . class , metadata ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( path )", "total": "createComparablePath ( ) { com . querydsl . core . types . Path < java . lang . String > path = pathFactory . createComparablePath ( java . lang . String . class , metadata ) ; \"<AssertPlaceHolder>\" ; } createComparablePath ( java . lang . Class , com . querydsl . core . types . PathMetadata ) { return com . querydsl . core . types . dsl . Expressions . comparablePath ( type , metadata ) ; }", "answer": "org . junit . Assert . assertNotNull ( path )"}
{"focal": "doLaunch ( org . eclipse . debug . core . ILaunchConfiguration , java . lang . String ) { org . eclipse . debug . core . ILaunch launch ; org . eclipse . core . runtime . IPath pathToFiles = getPathToFiles ( testName ) ; if ( ! ( ValgrindTestsPlugin . RUN_VALGRIND ) ) { bindLocation ( pathToFiles ) ; } org . eclipse . debug . core . ILaunchConfigurationWorkingCopy wc = config . getWorkingCopy ( ) ; wc . setAttribute ( LaunchConfigurationConstants . ATTR_INTERNAL_OUTPUT_DIR , pathToFiles . toOSString ( ) ) ; wc . doSave ( ) ; org . eclipse . linuxtools . internal . valgrind . tests . ValgrindTestLaunchDelegate delegate = new org . eclipse . linuxtools . internal . valgrind . tests . ValgrindTestLaunchDelegate ( ) ; launch = new org . eclipse . debug . core . Launch ( config , org . eclipse . debug . core . ILaunchManager . PROFILE_MODE , null ) ; org . eclipse . debug . core . DebugPlugin . getDefault ( ) . getLaunchManager ( ) . addLaunch ( launch ) ; launches . add ( launch ) ; delegate . launch ( config , ILaunchManager . PROFILE_MODE , launch , null ) ; if ( ValgrindTestsPlugin . RUN_VALGRIND ) { unbindLocation ( pathToFiles ) ; } return launch ; }", "testMethod": "testLaunchBadVersion ( ) { restoreVersion ( ) ; org . eclipse . debug . core . ILaunchConfiguration config = createConfiguration ( proj . getProject ( ) ) ; saveVersion ( ) ; try { doLaunch ( config , \"testDefaults\" ) ; } catch ( org . eclipse . core . runtime . CoreException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e )", "total": "testLaunchBadVersion ( ) { restoreVersion ( ) ; org . eclipse . debug . core . ILaunchConfiguration config = createConfiguration ( proj . getProject ( ) ) ; saveVersion ( ) ; try { doLaunch ( config , \"testDefaults\" ) ; } catch ( org . eclipse . core . runtime . CoreException e ) { \"<AssertPlaceHolder>\" ; } } doLaunch ( org . eclipse . debug . core . ILaunchConfiguration , java . lang . String ) { org . eclipse . debug . core . ILaunch launch ; org . eclipse . core . runtime . IPath pathToFiles = getPathToFiles ( testName ) ; if ( ! ( ValgrindTestsPlugin . RUN_VALGRIND ) ) { bindLocation ( pathToFiles ) ; } org . eclipse . debug . core . ILaunchConfigurationWorkingCopy wc = config . getWorkingCopy ( ) ; wc . setAttribute ( LaunchConfigurationConstants . ATTR_INTERNAL_OUTPUT_DIR , pathToFiles . toOSString ( ) ) ; wc . doSave ( ) ; org . eclipse . linuxtools . internal . valgrind . tests . ValgrindTestLaunchDelegate delegate = new org . eclipse . linuxtools . internal . valgrind . tests . ValgrindTestLaunchDelegate ( ) ; launch = new org . eclipse . debug . core . Launch ( config , org . eclipse . debug . core . ILaunchManager . PROFILE_MODE , null ) ; org . eclipse . debug . core . DebugPlugin . getDefault ( ) . getLaunchManager ( ) . addLaunch ( launch ) ; launches . add ( launch ) ; delegate . launch ( config , ILaunchManager . PROFILE_MODE , launch , null ) ; if ( ValgrindTestsPlugin . RUN_VALGRIND ) { unbindLocation ( pathToFiles ) ; } return launch ; }", "answer": "org . junit . Assert . assertNotNull ( e )"}
{"focal": "auth ( org . linagora . linshare . core . domain . entities . LdapConnection , java . lang . String , org . linagora . linshare . core . domain . entities . UserLdapPattern , java . lang . String , java . lang . String ) { javax . naming . ldap . LdapContext ldapContext = ( ( javax . naming . ldap . LdapContext ) ( getLdapContext ( ldapConnection , baseDn ) . getReadOnlyContext ( ) ) ) ; java . util . Map < java . lang . String , java . lang . Object > vars = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; vars . put ( \"domain\" , baseDn ) ; vars . put ( \"logger\" , org . linagora . linshare . core . service . impl . LDAPUserQueryServiceImpl . logger ) ; org . linid . dm . authorization . lql . LqlRequestCtx lqlctx = new org . linid . dm . authorization . lql . LqlRequestCtx ( ldapContext , vars , true ) ; org . linid . dm . authorization . lql . dnlist . IDnList dnList = new org . linagora . linshare . ldap . LinShareDnList ( domainPattern . getSearchPageSize ( ) , domainPattern . getSearchSizeLimit ( ) ) ; org . linagora . linshare . core . service . impl . LDAPUserQueryServiceImpl . logger . debug ( ( ( ( ( \"LDAPQueryServiceImpl.authUser:<sp>baseDn:<sp>'\" + baseDn ) + \"'<sp>,<sp>login<sp>:<sp>'\" ) + userLogin ) + \"'\" ) ) ; org . linagora . linshare . core . domain . entities . User user = null ; try { org . linagora . linshare . ldap . JScriptUserLdapQuery query = new org . linagora . linshare . ldap . JScriptUserLdapQuery ( lqlctx , baseDn , domainPattern , dnList ) ; user = query . auth ( ldapConnection , userLogin , userPasswd ) ; } finally { ldapContext . close ( ) ; } return user ; }", "testMethod": "testAuth ( ) { logger . info ( LinShareTestConstants . BEGIN_TEST ) ; java . util . Date date_before = new java . util . Date ( ) ; org . linagora . linshare . core . domain . entities . User user = ldapQueryService . auth ( ldapConn , baseDn , domainPattern , userMail1 , userPassword1 ) ; java . util . Date date_after = new java . util . Date ( ) ; \"<AssertPlaceHolder>\" ; logUser ( user ) ; logger . info ( ( \"fin<sp>test<sp>:<sp>\" + ( java . lang . String . valueOf ( ( ( date_after . getTime ( ) ) - ( date_before . getTime ( ) ) ) ) ) ) ) ; logger . debug ( LinShareTestConstants . END_TEST ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( user )", "total": "testAuth ( ) { logger . info ( LinShareTestConstants . BEGIN_TEST ) ; java . util . Date date_before = new java . util . Date ( ) ; org . linagora . linshare . core . domain . entities . User user = ldapQueryService . auth ( ldapConn , baseDn , domainPattern , userMail1 , userPassword1 ) ; java . util . Date date_after = new java . util . Date ( ) ; \"<AssertPlaceHolder>\" ; logUser ( user ) ; logger . info ( ( \"fin<sp>test<sp>:<sp>\" + ( java . lang . String . valueOf ( ( ( date_after . getTime ( ) ) - ( date_before . getTime ( ) ) ) ) ) ) ) ; logger . debug ( LinShareTestConstants . END_TEST ) ; } auth ( org . linagora . linshare . core . domain . entities . LdapConnection , java . lang . String , org . linagora . linshare . core . domain . entities . UserLdapPattern , java . lang . String , java . lang . String ) { javax . naming . ldap . LdapContext ldapContext = ( ( javax . naming . ldap . LdapContext ) ( getLdapContext ( ldapConnection , baseDn ) . getReadOnlyContext ( ) ) ) ; java . util . Map < java . lang . String , java . lang . Object > vars = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; vars . put ( \"domain\" , baseDn ) ; vars . put ( \"logger\" , org . linagora . linshare . core . service . impl . LDAPUserQueryServiceImpl . logger ) ; org . linid . dm . authorization . lql . LqlRequestCtx lqlctx = new org . linid . dm . authorization . lql . LqlRequestCtx ( ldapContext , vars , true ) ; org . linid . dm . authorization . lql . dnlist . IDnList dnList = new org . linagora . linshare . ldap . LinShareDnList ( domainPattern . getSearchPageSize ( ) , domainPattern . getSearchSizeLimit ( ) ) ; org . linagora . linshare . core . service . impl . LDAPUserQueryServiceImpl . logger . debug ( ( ( ( ( \"LDAPQueryServiceImpl.authUser:<sp>baseDn:<sp>'\" + baseDn ) + \"'<sp>,<sp>login<sp>:<sp>'\" ) + userLogin ) + \"'\" ) ) ; org . linagora . linshare . core . domain . entities . User user = null ; try { org . linagora . linshare . ldap . JScriptUserLdapQuery query = new org . linagora . linshare . ldap . JScriptUserLdapQuery ( lqlctx , baseDn , domainPattern , dnList ) ; user = query . auth ( ldapConnection , userLogin , userPasswd ) ; } finally { ldapContext . close ( ) ; } return user ; }", "answer": "org . junit . Assert . assertNotNull ( user )"}
{"focal": "waitForConsistentQuery ( org . sagebionetworks . repo . model . UserInfo , org . sagebionetworks . repo . model . table . Query , org . sagebionetworks . repo . model . table . QueryOptions ) { long start = java . lang . System . currentTimeMillis ( ) ; while ( true ) { try { org . sagebionetworks . repo . model . table . QueryResultBundle queryResult = tableQueryManger . querySinglePage ( mockProgressCallbackVoid , user , query , options ) ; return queryResult . getQueryResult ( ) ; } catch ( org . sagebionetworks . workers . util . semaphore . LockUnavilableException e ) { System . out . println ( ( \"Waiting<sp>for<sp>table<sp>lock:<sp>\" + ( e . getLocalizedMessage ( ) ) ) ) ; } catch ( org . sagebionetworks . repo . model . table . TableUnavailableException e ) { System . out . println ( ( \"Waiting<sp>for<sp>table<sp>index<sp>worker<sp>to<sp>build<sp>table.<sp>Status:<sp>\" + ( e . getStatus ( ) ) ) ) ; } org . junit . Assert . assertTrue ( \"Timed<sp>out<sp>waiting<sp>for<sp>table<sp>index<sp>worker<sp>to<sp>make<sp>the<sp>table<sp>available.\" , ( ( ( java . lang . System . currentTimeMillis ( ) ) - start ) < ( org . sagebionetworks . table . worker . TableWorkerIntegrationTest . MAX_WAIT_MS ) ) ) ; java . lang . Thread . sleep ( 1000 ) ; } }", "testMethod": "testPLFM_5240Open ( ) { createSchemaOneOfEachType ( ) ; createTableWithSchema ( ) ; grantReadToPublicOnTable ( ) ; org . sagebionetworks . repo . model . DataType dataType = org . sagebionetworks . repo . model . DataType . OPEN_DATA ; entityManager . changeEntityDataType ( adminUserInfo , tableId , dataType ) ; java . lang . String sql = \"select<sp>row_id<sp>from<sp>\" + ( tableId ) ; query . setSql ( sql ) ; query . setLimit ( 8L ) ; org . sagebionetworks . repo . model . table . QueryResult results = waitForConsistentQuery ( anonymousUser , query , queryOptions ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( results )", "total": "testPLFM_5240Open ( ) { createSchemaOneOfEachType ( ) ; createTableWithSchema ( ) ; grantReadToPublicOnTable ( ) ; org . sagebionetworks . repo . model . DataType dataType = org . sagebionetworks . repo . model . DataType . OPEN_DATA ; entityManager . changeEntityDataType ( adminUserInfo , tableId , dataType ) ; java . lang . String sql = \"select<sp>row_id<sp>from<sp>\" + ( tableId ) ; query . setSql ( sql ) ; query . setLimit ( 8L ) ; org . sagebionetworks . repo . model . table . QueryResult results = waitForConsistentQuery ( anonymousUser , query , queryOptions ) ; \"<AssertPlaceHolder>\" ; } waitForConsistentQuery ( org . sagebionetworks . repo . model . UserInfo , org . sagebionetworks . repo . model . table . Query , org . sagebionetworks . repo . model . table . QueryOptions ) { long start = java . lang . System . currentTimeMillis ( ) ; while ( true ) { try { org . sagebionetworks . repo . model . table . QueryResultBundle queryResult = tableQueryManger . querySinglePage ( mockProgressCallbackVoid , user , query , options ) ; return queryResult . getQueryResult ( ) ; } catch ( org . sagebionetworks . workers . util . semaphore . LockUnavilableException e ) { System . out . println ( ( \"Waiting<sp>for<sp>table<sp>lock:<sp>\" + ( e . getLocalizedMessage ( ) ) ) ) ; } catch ( org . sagebionetworks . repo . model . table . TableUnavailableException e ) { System . out . println ( ( \"Waiting<sp>for<sp>table<sp>index<sp>worker<sp>to<sp>build<sp>table.<sp>Status:<sp>\" + ( e . getStatus ( ) ) ) ) ; } org . junit . Assert . assertTrue ( \"Timed<sp>out<sp>waiting<sp>for<sp>table<sp>index<sp>worker<sp>to<sp>make<sp>the<sp>table<sp>available.\" , ( ( ( java . lang . System . currentTimeMillis ( ) ) - start ) < ( org . sagebionetworks . table . worker . TableWorkerIntegrationTest . MAX_WAIT_MS ) ) ) ; java . lang . Thread . sleep ( 1000 ) ; } }", "answer": "org . junit . Assert . assertNotNull ( results )"}
{"focal": "put ( K , T ) { this . mMap . put ( theRef , new net . violet . db . cache . CacheReference < K , T > ( theRef , theRecord , this . mReferenceQueue ) ) ; this . mLinkedMap . put ( theRef , theRecord ) ; }", "testMethod": "testNoSuchNews ( ) { final net . violet . platform . api . actions . Action theAction = new net . violet . platform . api . actions . news . Get ( ) ; final net . violet . platform . api . callers . APICaller caller = getPublicApplicationAPICaller ( ) ; final java . util . Map < java . lang . String , java . lang . Object > theParams = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; theParams . put ( \"id\" , \"news\" ) ; final net . violet . platform . api . actions . ActionParam theActionParam = new net . violet . platform . api . actions . ActionParam ( caller , theParams ) ; final java . lang . Object theResult = theAction . processRequest ( theActionParam ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( theResult )", "total": "testNoSuchNews ( ) { final net . violet . platform . api . actions . Action theAction = new net . violet . platform . api . actions . news . Get ( ) ; final net . violet . platform . api . callers . APICaller caller = getPublicApplicationAPICaller ( ) ; final java . util . Map < java . lang . String , java . lang . Object > theParams = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; theParams . put ( \"id\" , \"news\" ) ; final net . violet . platform . api . actions . ActionParam theActionParam = new net . violet . platform . api . actions . ActionParam ( caller , theParams ) ; final java . lang . Object theResult = theAction . processRequest ( theActionParam ) ; \"<AssertPlaceHolder>\" ; } put ( K , T ) { this . mMap . put ( theRef , new net . violet . db . cache . CacheReference < K , T > ( theRef , theRecord , this . mReferenceQueue ) ) ; this . mLinkedMap . put ( theRef , theRecord ) ; }", "answer": "org . junit . Assert . assertNotNull ( theResult )"}
{"focal": "getUserRolesByExternalID ( java . lang . Long ) { org . apache . ranger . rest . VXStringList vXStringList = new org . apache . ranger . rest . VXStringList ( ) ; vXStringList = xUserMgr . getUserRolesByExternalID ( userId ) ; return vXStringList ; }", "testMethod": "test42getUserRolesByExternalID ( ) { destroySession ( ) ; setup ( ) ; org . apache . ranger . db . XXPortalUserRoleDao xPortalUserRoleDao = org . mockito . Mockito . mock ( org . apache . ranger . db . XXPortalUserRoleDao . class ) ; org . apache . ranger . view . VXUser vXUser = vxUser ( ) ; org . apache . ranger . view . VXPortalUser userProfile = userProfile ( ) ; java . util . List < org . apache . ranger . view . VXString > vStringRolesList = new java . util . ArrayList < org . apache . ranger . view . VXString > ( ) ; org . apache . ranger . view . VXString vXStringObj = new org . apache . ranger . view . VXString ( ) ; vXStringObj . setValue ( \"ROLE_USER\" ) ; vStringRolesList . add ( vXStringObj ) ; java . util . List < org . apache . ranger . entity . XXPortalUserRole > xPortalUserRoleList = new java . util . ArrayList < org . apache . ranger . entity . XXPortalUserRole > ( ) ; org . apache . ranger . entity . XXPortalUserRole XXPortalUserRole = new org . apache . ranger . entity . XXPortalUserRole ( ) ; XXPortalUserRole . setId ( org . apache . ranger . biz . TestXUserMgr . userId ) ; XXPortalUserRole . setUserId ( org . apache . ranger . biz . TestXUserMgr . userId ) ; XXPortalUserRole . setUserRole ( \"ROLE_USER\" ) ; xPortalUserRoleList . add ( XXPortalUserRole ) ; java . util . List < org . apache . ranger . entity . XXUserPermission > xUserPermissionsList = new java . util . ArrayList < org . apache . ranger . entity . XXUserPermission > ( ) ; org . apache . ranger . entity . XXUserPermission xUserPermissionObj = xxUserPermission ( ) ; xUserPermissionsList . add ( xUserPermissionObj ) ; java . util . List < org . apache . ranger . entity . XXGroupPermission > xGroupPermissionList = new java . util . ArrayList < org . apache . ranger . entity . XXGroupPermission > ( ) ; org . apache . ranger . entity . XXGroupPermission xGroupPermissionObj = xxGroupPermission ( ) ; xGroupPermissionList . add ( xGroupPermissionObj ) ; java . util . List < org . apache . ranger . view . VXGroupPermission > groupPermList = new java . util . ArrayList < org . apache . ranger . view . VXGroupPermission > ( ) ; org . apache . ranger . view . VXGroupPermission groupPermission = vxGroupPermission ( ) ; groupPermList . add ( groupPermission ) ; org . mockito . Mockito . when ( daoManager . getXXPortalUserRole ( ) ) . thenReturn ( xPortalUserRoleDao ) ; org . mockito . Mockito . when ( xPortalUserRoleDao . findByUserId ( org . apache . ranger . biz . TestXUserMgr . userId ) ) . thenReturn ( xPortalUserRoleList ) ; org . mockito . Mockito . when ( xUserMgr . getXUser ( org . apache . ranger . biz . TestXUserMgr . userId ) ) . thenReturn ( vXUser ) ; org . mockito . Mockito . when ( userMgr . getUserProfileByLoginId ( vXUser . getName ( ) ) ) . thenReturn ( userProfile ) ; java . util . List < java . lang . String > permissionList = new java . util . ArrayList < java . lang . String > ( ) ; permissionList . add ( RangerConstants . MODULE_USER_GROUPS ) ; org . apache . ranger . view . VXUser loggedInUser = vxUser ( ) ; java . util . List < java . lang . String > loggedInUserRole = new java . util . ArrayList < java . lang . String > ( ) ; loggedInUserRole . add ( RangerConstants . ROLE_ADMIN ) ; loggedInUser . setId ( 8L ) ; loggedInUser . setName ( \"testuser\" ) ; loggedInUser . setUserRoleList ( loggedInUserRole ) ; org . mockito . Mockito . when ( xUserService . getXUserByUserName ( \"admin\" ) ) . thenReturn ( loggedInUser ) ; org . apache . ranger . db . XXModuleDefDao mockxxModuleDefDao = org . mockito . Mockito . mock ( org . apache . ranger . db . XXModuleDefDao . class ) ; org . mockito . Mockito . when ( daoManager . getXXModuleDef ( ) ) . thenReturn ( mockxxModuleDefDao ) ; org . mockito . Mockito . when ( mockxxModuleDefDao . findAccessibleModulesByUserId ( 8L , 8L ) ) . thenReturn ( permissionList ) ; org . apache . ranger . view . VXStringList vXStringList = xUserMgr . getUserRolesByExternalID ( org . apache . ranger . biz . TestXUserMgr . userId ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . when ( restErrorUtil . createRESTException ( \"Please<sp>provide<sp>a<sp>valid<sp>ID\" , MessageEnums . INVALID_INPUT_DATA ) ) . thenThrow ( new javax . ws . rs . WebApplicationException ( ) ) ; thrown . expect ( javax . ws . rs . WebApplicationException . class ) ; org . mockito . Mockito . when ( xUserService . readResourceWithOutLogin ( ( ( java . lang . Long ) ( org . mockito . Mockito . any ( ) ) ) ) ) . thenReturn ( null ) ; xUserMgr . getUserRolesByExternalID ( org . apache . ranger . biz . TestXUserMgr . userId ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( vXStringList )", "total": "test42getUserRolesByExternalID ( ) { destroySession ( ) ; setup ( ) ; org . apache . ranger . db . XXPortalUserRoleDao xPortalUserRoleDao = org . mockito . Mockito . mock ( org . apache . ranger . db . XXPortalUserRoleDao . class ) ; org . apache . ranger . view . VXUser vXUser = vxUser ( ) ; org . apache . ranger . view . VXPortalUser userProfile = userProfile ( ) ; java . util . List < org . apache . ranger . view . VXString > vStringRolesList = new java . util . ArrayList < org . apache . ranger . view . VXString > ( ) ; org . apache . ranger . view . VXString vXStringObj = new org . apache . ranger . view . VXString ( ) ; vXStringObj . setValue ( \"ROLE_USER\" ) ; vStringRolesList . add ( vXStringObj ) ; java . util . List < org . apache . ranger . entity . XXPortalUserRole > xPortalUserRoleList = new java . util . ArrayList < org . apache . ranger . entity . XXPortalUserRole > ( ) ; org . apache . ranger . entity . XXPortalUserRole XXPortalUserRole = new org . apache . ranger . entity . XXPortalUserRole ( ) ; XXPortalUserRole . setId ( org . apache . ranger . biz . TestXUserMgr . userId ) ; XXPortalUserRole . setUserId ( org . apache . ranger . biz . TestXUserMgr . userId ) ; XXPortalUserRole . setUserRole ( \"ROLE_USER\" ) ; xPortalUserRoleList . add ( XXPortalUserRole ) ; java . util . List < org . apache . ranger . entity . XXUserPermission > xUserPermissionsList = new java . util . ArrayList < org . apache . ranger . entity . XXUserPermission > ( ) ; org . apache . ranger . entity . XXUserPermission xUserPermissionObj = xxUserPermission ( ) ; xUserPermissionsList . add ( xUserPermissionObj ) ; java . util . List < org . apache . ranger . entity . XXGroupPermission > xGroupPermissionList = new java . util . ArrayList < org . apache . ranger . entity . XXGroupPermission > ( ) ; org . apache . ranger . entity . XXGroupPermission xGroupPermissionObj = xxGroupPermission ( ) ; xGroupPermissionList . add ( xGroupPermissionObj ) ; java . util . List < org . apache . ranger . view . VXGroupPermission > groupPermList = new java . util . ArrayList < org . apache . ranger . view . VXGroupPermission > ( ) ; org . apache . ranger . view . VXGroupPermission groupPermission = vxGroupPermission ( ) ; groupPermList . add ( groupPermission ) ; org . mockito . Mockito . when ( daoManager . getXXPortalUserRole ( ) ) . thenReturn ( xPortalUserRoleDao ) ; org . mockito . Mockito . when ( xPortalUserRoleDao . findByUserId ( org . apache . ranger . biz . TestXUserMgr . userId ) ) . thenReturn ( xPortalUserRoleList ) ; org . mockito . Mockito . when ( xUserMgr . getXUser ( org . apache . ranger . biz . TestXUserMgr . userId ) ) . thenReturn ( vXUser ) ; org . mockito . Mockito . when ( userMgr . getUserProfileByLoginId ( vXUser . getName ( ) ) ) . thenReturn ( userProfile ) ; java . util . List < java . lang . String > permissionList = new java . util . ArrayList < java . lang . String > ( ) ; permissionList . add ( RangerConstants . MODULE_USER_GROUPS ) ; org . apache . ranger . view . VXUser loggedInUser = vxUser ( ) ; java . util . List < java . lang . String > loggedInUserRole = new java . util . ArrayList < java . lang . String > ( ) ; loggedInUserRole . add ( RangerConstants . ROLE_ADMIN ) ; loggedInUser . setId ( 8L ) ; loggedInUser . setName ( \"testuser\" ) ; loggedInUser . setUserRoleList ( loggedInUserRole ) ; org . mockito . Mockito . when ( xUserService . getXUserByUserName ( \"admin\" ) ) . thenReturn ( loggedInUser ) ; org . apache . ranger . db . XXModuleDefDao mockxxModuleDefDao = org . mockito . Mockito . mock ( org . apache . ranger . db . XXModuleDefDao . class ) ; org . mockito . Mockito . when ( daoManager . getXXModuleDef ( ) ) . thenReturn ( mockxxModuleDefDao ) ; org . mockito . Mockito . when ( mockxxModuleDefDao . findAccessibleModulesByUserId ( 8L , 8L ) ) . thenReturn ( permissionList ) ; org . apache . ranger . view . VXStringList vXStringList = xUserMgr . getUserRolesByExternalID ( org . apache . ranger . biz . TestXUserMgr . userId ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . when ( restErrorUtil . createRESTException ( \"Please<sp>provide<sp>a<sp>valid<sp>ID\" , MessageEnums . INVALID_INPUT_DATA ) ) . thenThrow ( new javax . ws . rs . WebApplicationException ( ) ) ; thrown . expect ( javax . ws . rs . WebApplicationException . class ) ; org . mockito . Mockito . when ( xUserService . readResourceWithOutLogin ( ( ( java . lang . Long ) ( org . mockito . Mockito . any ( ) ) ) ) ) . thenReturn ( null ) ; xUserMgr . getUserRolesByExternalID ( org . apache . ranger . biz . TestXUserMgr . userId ) ; } getUserRolesByExternalID ( java . lang . Long ) { org . apache . ranger . rest . VXStringList vXStringList = new org . apache . ranger . rest . VXStringList ( ) ; vXStringList = xUserMgr . getUserRolesByExternalID ( userId ) ; return vXStringList ; }", "answer": "org . junit . Assert . assertNotNull ( vXStringList )"}
{"focal": "findMetaMember ( org . adoptopenjdk . jitwatch . model . MemberSignatureParts ) { org . adoptopenjdk . jitwatch . model . IMetaMember result = null ; org . adoptopenjdk . jitwatch . model . MetaClass metaClass = packageManager . getMetaClass ( msp . getFullyQualifiedClassName ( ) ) ; if ( metaClass == null ) { if ( DEBUG_LOGGING ) { org . adoptopenjdk . jitwatch . model . JITDataModel . logger . debug ( \"No<sp>metaClass<sp>found,<sp>trying<sp>late<sp>load<sp>{}\" , msp . getFullyQualifiedClassName ( ) ) ; } metaClass = org . adoptopenjdk . jitwatch . util . ParseUtil . lateLoadMetaClass ( this , msp . getFullyQualifiedClassName ( ) ) ; } if ( metaClass != null ) { java . util . List < org . adoptopenjdk . jitwatch . model . IMetaMember > metaList = metaClass . getMetaMembers ( ) ; if ( DEBUG_LOGGING ) { org . adoptopenjdk . jitwatch . model . JITDataModel . logger . debug ( \"Comparing<sp>msp<sp>against<sp>{}<sp>members<sp>of<sp>metaClass<sp>{}\" , metaList . size ( ) , metaClass . toString ( ) ) ; } for ( org . adoptopenjdk . jitwatch . model . IMetaMember member : metaList ) { if ( member . matchesSignature ( msp , true ) ) { result = member ; break ; } } } else { if ( DEBUG_LOGGING ) { org . adoptopenjdk . jitwatch . model . JITDataModel . logger . debug ( \"No<sp>metaClass<sp>found<sp>for<sp>fqClassName<sp>{}\" , msp . getFullyQualifiedClassName ( ) ) ; } } return result ; }", "testMethod": "testRegressionStringIndexOf ( ) { org . adoptopenjdk . jitwatch . model . JITDataModel model = new org . adoptopenjdk . jitwatch . model . JITDataModel ( ) ; model . buildAndGetMetaClass ( java . lang . String . class ) ; org . adoptopenjdk . jitwatch . model . MemberSignatureParts msp = org . adoptopenjdk . jitwatch . model . MemberSignatureParts . fromLogCompilationSignature ( \"java.lang.String<sp>indexOf<sp>(II)I\" ) ; org . adoptopenjdk . jitwatch . model . IMetaMember member = model . findMetaMember ( msp ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( member )", "total": "testRegressionStringIndexOf ( ) { org . adoptopenjdk . jitwatch . model . JITDataModel model = new org . adoptopenjdk . jitwatch . model . JITDataModel ( ) ; model . buildAndGetMetaClass ( java . lang . String . class ) ; org . adoptopenjdk . jitwatch . model . MemberSignatureParts msp = org . adoptopenjdk . jitwatch . model . MemberSignatureParts . fromLogCompilationSignature ( \"java.lang.String<sp>indexOf<sp>(II)I\" ) ; org . adoptopenjdk . jitwatch . model . IMetaMember member = model . findMetaMember ( msp ) ; \"<AssertPlaceHolder>\" ; } findMetaMember ( org . adoptopenjdk . jitwatch . model . MemberSignatureParts ) { org . adoptopenjdk . jitwatch . model . IMetaMember result = null ; org . adoptopenjdk . jitwatch . model . MetaClass metaClass = packageManager . getMetaClass ( msp . getFullyQualifiedClassName ( ) ) ; if ( metaClass == null ) { if ( DEBUG_LOGGING ) { org . adoptopenjdk . jitwatch . model . JITDataModel . logger . debug ( \"No<sp>metaClass<sp>found,<sp>trying<sp>late<sp>load<sp>{}\" , msp . getFullyQualifiedClassName ( ) ) ; } metaClass = org . adoptopenjdk . jitwatch . util . ParseUtil . lateLoadMetaClass ( this , msp . getFullyQualifiedClassName ( ) ) ; } if ( metaClass != null ) { java . util . List < org . adoptopenjdk . jitwatch . model . IMetaMember > metaList = metaClass . getMetaMembers ( ) ; if ( DEBUG_LOGGING ) { org . adoptopenjdk . jitwatch . model . JITDataModel . logger . debug ( \"Comparing<sp>msp<sp>against<sp>{}<sp>members<sp>of<sp>metaClass<sp>{}\" , metaList . size ( ) , metaClass . toString ( ) ) ; } for ( org . adoptopenjdk . jitwatch . model . IMetaMember member : metaList ) { if ( member . matchesSignature ( msp , true ) ) { result = member ; break ; } } } else { if ( DEBUG_LOGGING ) { org . adoptopenjdk . jitwatch . model . JITDataModel . logger . debug ( \"No<sp>metaClass<sp>found<sp>for<sp>fqClassName<sp>{}\" , msp . getFullyQualifiedClassName ( ) ) ; } } return result ; }", "answer": "org . junit . Assert . assertNotNull ( member )"}
{"focal": "getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "testMethod": "shouldThrowExceptionIfStorePropertiesAreNull ( ) { try { uk . gov . gchq . gaffer . operation . export . resultcache . handler . util . GafferResultCacheUtil . createGraph ( \"graphId\" , null , GafferResultCacheUtil . DEFAULT_TIME_TO_LIVE ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final java . lang . IllegalArgumentException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "shouldThrowExceptionIfStorePropertiesAreNull ( ) { try { uk . gov . gchq . gaffer . operation . export . resultcache . handler . util . GafferResultCacheUtil . createGraph ( \"graphId\" , null , GafferResultCacheUtil . DEFAULT_TIME_TO_LIVE ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final java . lang . IllegalArgumentException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "getCANInfoByName ( java . lang . String ) { com . bitplan . can4eve . CANInfo result = this . canInfoByName . get ( canInfoName ) ; if ( result == null ) throw new java . lang . RuntimeException ( ( ( ( \"Misconfigured<sp>canValue<sp>\" + canInfoName ) + \"<sp>missing<sp>canInfo<sp>in<sp>vehicle<sp>Group<sp>\" ) + ( getName ( ) ) ) ) ; return result ; }", "testMethod": "testBarChartJavaFx ( ) { com . bitplan . can4eve . VehicleGroup vg = com . bitplan . can4eve . VehicleGroup . get ( \"Triplet\" ) ; com . bitplan . can4eve . CANInfo cellInfo = vg . getCANInfoByName ( \"CellTemperature\" ) ; \"<AssertPlaceHolder>\" ; com . bitplan . can4eve . CANValue . DoubleValue cellTempValue = new com . bitplan . can4eve . CANValue . DoubleValue ( cellInfo ) ; com . bitplan . can4eve . gui . javafx . CANProperty < com . bitplan . can4eve . CANValue . DoubleValue , java . lang . Double > cellTemp = new com . bitplan . can4eve . gui . javafx . CANProperty < com . bitplan . can4eve . CANValue . DoubleValue , java . lang . Double > ( cellTempValue , new javafx . beans . property . SimpleDoubleProperty ( ) ) ; randomValues ( cellTemp ) ; java . lang . String title = \"Cell<sp>Temperature\" ; java . lang . String xTitle = \"cell\" ; java . lang . String yTitle = \"<sp>Celsius\" ; final com . bitplan . obdii . javafx . JFXCanCellStatePlot valuePlot = new com . bitplan . obdii . javafx . JFXCanCellStatePlot ( title , xTitle , yTitle , cellTemp , 2.0 , 0.5 ) ; valuePlot . updateOn ( cellTemp . getUpdateCountProperty ( ) ) ; com . bitplan . javafx . SampleApp sampleApp = new com . bitplan . javafx . SampleApp ( \"Cell<sp>Temperature\" , valuePlot . getBarChart ( ) ) ; sampleApp . show ( ) ; sampleApp . waitOpen ( ) ; int loops = 4 ; for ( int j = 0 ; j < loops ; j ++ ) { randomValues ( cellTemp ) ; java . lang . Thread . sleep ( ( ( com . bitplan . obdii . TestAppGUI . SHOW_TIME ) / loops ) ) ; } sampleApp . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( cellInfo )", "total": "testBarChartJavaFx ( ) { com . bitplan . can4eve . VehicleGroup vg = com . bitplan . can4eve . VehicleGroup . get ( \"Triplet\" ) ; com . bitplan . can4eve . CANInfo cellInfo = vg . getCANInfoByName ( \"CellTemperature\" ) ; \"<AssertPlaceHolder>\" ; com . bitplan . can4eve . CANValue . DoubleValue cellTempValue = new com . bitplan . can4eve . CANValue . DoubleValue ( cellInfo ) ; com . bitplan . can4eve . gui . javafx . CANProperty < com . bitplan . can4eve . CANValue . DoubleValue , java . lang . Double > cellTemp = new com . bitplan . can4eve . gui . javafx . CANProperty < com . bitplan . can4eve . CANValue . DoubleValue , java . lang . Double > ( cellTempValue , new javafx . beans . property . SimpleDoubleProperty ( ) ) ; randomValues ( cellTemp ) ; java . lang . String title = \"Cell<sp>Temperature\" ; java . lang . String xTitle = \"cell\" ; java . lang . String yTitle = \"<sp>Celsius\" ; final com . bitplan . obdii . javafx . JFXCanCellStatePlot valuePlot = new com . bitplan . obdii . javafx . JFXCanCellStatePlot ( title , xTitle , yTitle , cellTemp , 2.0 , 0.5 ) ; valuePlot . updateOn ( cellTemp . getUpdateCountProperty ( ) ) ; com . bitplan . javafx . SampleApp sampleApp = new com . bitplan . javafx . SampleApp ( \"Cell<sp>Temperature\" , valuePlot . getBarChart ( ) ) ; sampleApp . show ( ) ; sampleApp . waitOpen ( ) ; int loops = 4 ; for ( int j = 0 ; j < loops ; j ++ ) { randomValues ( cellTemp ) ; java . lang . Thread . sleep ( ( ( com . bitplan . obdii . TestAppGUI . SHOW_TIME ) / loops ) ) ; } sampleApp . close ( ) ; } getCANInfoByName ( java . lang . String ) { com . bitplan . can4eve . CANInfo result = this . canInfoByName . get ( canInfoName ) ; if ( result == null ) throw new java . lang . RuntimeException ( ( ( ( \"Misconfigured<sp>canValue<sp>\" + canInfoName ) + \"<sp>missing<sp>canInfo<sp>in<sp>vehicle<sp>Group<sp>\" ) + ( getName ( ) ) ) ) ; return result ; }", "answer": "org . junit . Assert . assertNotNull ( cellInfo )"}
{"focal": "getUitTeVoerenRegelsVoorVerwerking ( nl . bzk . brp . model . algemeen . stamgegeven . ber . SoortBericht ) { return java . util . Collections . unmodifiableList ( dezeOfLegeLijst ( regelsVoorVerwerking . get ( soortBericht ) ) ) ; }", "testMethod": "testGetUitTeVoerenRegelsVoorVerwerking ( ) { final java . util . List < nl . bzk . brp . business . regels . RegelInterface > uitTeVoerenRegelsVoorVerwerking = getBedrijfsregelManagerImpl ( ) . getUitTeVoerenRegelsVoorVerwerking ( SoortBericht . LVG_SYN_REGISTREER_AFNEMERINDICATIE ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( uitTeVoerenRegelsVoorVerwerking )", "total": "testGetUitTeVoerenRegelsVoorVerwerking ( ) { final java . util . List < nl . bzk . brp . business . regels . RegelInterface > uitTeVoerenRegelsVoorVerwerking = getBedrijfsregelManagerImpl ( ) . getUitTeVoerenRegelsVoorVerwerking ( SoortBericht . LVG_SYN_REGISTREER_AFNEMERINDICATIE ) ; \"<AssertPlaceHolder>\" ; } getUitTeVoerenRegelsVoorVerwerking ( nl . bzk . brp . model . algemeen . stamgegeven . ber . SoortBericht ) { return java . util . Collections . unmodifiableList ( dezeOfLegeLijst ( regelsVoorVerwerking . get ( soortBericht ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( uitTeVoerenRegelsVoorVerwerking )"}
{"focal": "newCloudSdkUpdateJob ( ) { return new com . google . cloud . tools . eclipse . sdk . internal . CloudSdkUpdateJob ( consoleStream , new java . util . concurrent . locks . ReentrantReadWriteLock ( ) ) { @ com . google . cloud . tools . eclipse . sdk . internal . Override protected com . google . cloud . tools . managedcloudsdk . ManagedCloudSdk getManagedCloudSdk ( ) throws com . google . cloud . tools . managedcloudsdk . UnsupportedOsException { return managedCloudSdk ; } } ; }", "testMethod": "testGetManagedCloudSdk ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( newCloudSdkUpdateJob ( ) . getManagedCloudSdk ( ) )", "total": "testGetManagedCloudSdk ( ) { \"<AssertPlaceHolder>\" ; } newCloudSdkUpdateJob ( ) { return new com . google . cloud . tools . eclipse . sdk . internal . CloudSdkUpdateJob ( consoleStream , new java . util . concurrent . locks . ReentrantReadWriteLock ( ) ) { @ com . google . cloud . tools . eclipse . sdk . internal . Override protected com . google . cloud . tools . managedcloudsdk . ManagedCloudSdk getManagedCloudSdk ( ) throws com . google . cloud . tools . managedcloudsdk . UnsupportedOsException { return managedCloudSdk ; } } ; }", "answer": "org . junit . Assert . assertNotNull ( newCloudSdkUpdateJob ( ) . getManagedCloudSdk ( ) )"}
{"focal": "aspect ( java . lang . String ) { org . jinstagram . utils . Preconditions . checkEmptyString ( aspect , \"Invalid<sp>'aspect'<sp>key\" ) ; this . params . put ( Constants . ASPECT , aspect ) ; return this ; }", "testMethod": "testAspect ( ) { org . jinstagram . realtime . InstagramSubscription fixture = new org . jinstagram . realtime . InstagramSubscription ( ) ; java . lang . String aspect = \"\" ; org . jinstagram . realtime . InstagramSubscription result = fixture . aspect ( aspect ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testAspect ( ) { org . jinstagram . realtime . InstagramSubscription fixture = new org . jinstagram . realtime . InstagramSubscription ( ) ; java . lang . String aspect = \"\" ; org . jinstagram . realtime . InstagramSubscription result = fixture . aspect ( aspect ) ; \"<AssertPlaceHolder>\" ; } aspect ( java . lang . String ) { org . jinstagram . utils . Preconditions . checkEmptyString ( aspect , \"Invalid<sp>'aspect'<sp>key\" ) ; this . params . put ( Constants . ASPECT , aspect ) ; return this ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "write ( byte [ ] , int , int ) { out . write ( pBytes , pOffset , pLength ) ; bytesWritten += pLength ; }", "testMethod": "testWriteByteArrayNegativeOffset ( ) { java . io . OutputStream os = makeObject ( ) ; try { os . write ( new byte [ 5 ] , ( - 3 ) , 5 ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>accept<sp>negative<sp>offset\" ) ; } catch ( java . io . IOException e ) { org . junit . Assert . fail ( ( \"Should<sp>not<sp>throw<sp>IOException<sp>negative<sp>offset:<sp>\" + ( e . getMessage ( ) ) ) ) ; } catch ( java . lang . IndexOutOfBoundsException e ) { \"<AssertPlaceHolder>\" ; } catch ( java . lang . RuntimeException e ) { org . junit . Assert . fail ( ( ( ( \"Should<sp>only<sp>throw<sp>IndexOutOfBoundsException:<sp>\" + ( e . getClass ( ) ) ) + \":<sp>\" ) + ( e . getMessage ( ) ) ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e )", "total": "testWriteByteArrayNegativeOffset ( ) { java . io . OutputStream os = makeObject ( ) ; try { os . write ( new byte [ 5 ] , ( - 3 ) , 5 ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>accept<sp>negative<sp>offset\" ) ; } catch ( java . io . IOException e ) { org . junit . Assert . fail ( ( \"Should<sp>not<sp>throw<sp>IOException<sp>negative<sp>offset:<sp>\" + ( e . getMessage ( ) ) ) ) ; } catch ( java . lang . IndexOutOfBoundsException e ) { \"<AssertPlaceHolder>\" ; } catch ( java . lang . RuntimeException e ) { org . junit . Assert . fail ( ( ( ( \"Should<sp>only<sp>throw<sp>IndexOutOfBoundsException:<sp>\" + ( e . getClass ( ) ) ) + \":<sp>\" ) + ( e . getMessage ( ) ) ) ) ; } } write ( byte [ ] , int , int ) { out . write ( pBytes , pOffset , pLength ) ; bytesWritten += pLength ; }", "answer": "org . junit . Assert . assertNotNull ( e )"}
{"focal": "getBuilder ( ) { return org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ; }", "testMethod": "testNewReaction ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . AbstractChemObjectBuilderTest . rootObject . getBuilder ( ) ; org . openscience . cdk . interfaces . IReaction reaction = builder . newInstance ( org . openscience . cdk . interfaces . IReaction . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( reaction )", "total": "testNewReaction ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . AbstractChemObjectBuilderTest . rootObject . getBuilder ( ) ; org . openscience . cdk . interfaces . IReaction reaction = builder . newInstance ( org . openscience . cdk . interfaces . IReaction . class ) ; \"<AssertPlaceHolder>\" ; } getBuilder ( ) { return org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( reaction )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . Facility f = new org . oscarehr . common . model . Facility ( ) ; f . setDescription ( \"test\" ) ; f . setDisabled ( false ) ; f . setName ( \"test\" ) ; f . setOcanServiceOrgNumber ( \"0\" ) ; f . setOrgId ( 0 ) ; f . setSectorId ( 0 ) ; facilityDao . persist ( f ) ; org . oscarehr . common . model . Demographic d = new org . oscarehr . common . model . Demographic ( ) ; d . setFirstName ( \"a\" ) ; d . setLastName ( \"b\" ) ; d . setMiddleNames ( \"\" ) ; d . setYearOfBirth ( \"2000\" ) ; d . setMonthOfBirth ( \"1\" ) ; d . setDateOfBirth ( \"1\" ) ; d . setSex ( \"M\" ) ; demographicDao . save ( d ) ; org . oscarehr . common . model . IntegratorConsentComplexExitInterview entity = new org . oscarehr . common . model . IntegratorConsentComplexExitInterview ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; org . oscarehr . common . model . FacilityDemographicPrimaryKey id = new org . oscarehr . common . model . FacilityDemographicPrimaryKey ( ) ; id . setDemographicId ( d . getDemographicNo ( ) ) ; id . setFacilityId ( f . getId ( ) ) ; entity . setId ( id ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . Facility f = new org . oscarehr . common . model . Facility ( ) ; f . setDescription ( \"test\" ) ; f . setDisabled ( false ) ; f . setName ( \"test\" ) ; f . setOcanServiceOrgNumber ( \"0\" ) ; f . setOrgId ( 0 ) ; f . setSectorId ( 0 ) ; facilityDao . persist ( f ) ; org . oscarehr . common . model . Demographic d = new org . oscarehr . common . model . Demographic ( ) ; d . setFirstName ( \"a\" ) ; d . setLastName ( \"b\" ) ; d . setMiddleNames ( \"\" ) ; d . setYearOfBirth ( \"2000\" ) ; d . setMonthOfBirth ( \"1\" ) ; d . setDateOfBirth ( \"1\" ) ; d . setSex ( \"M\" ) ; demographicDao . save ( d ) ; org . oscarehr . common . model . IntegratorConsentComplexExitInterview entity = new org . oscarehr . common . model . IntegratorConsentComplexExitInterview ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; org . oscarehr . common . model . FacilityDemographicPrimaryKey id = new org . oscarehr . common . model . FacilityDemographicPrimaryKey ( ) ; id . setDemographicId ( d . getDemographicNo ( ) ) ; id . setFacilityId ( f . getId ( ) ) ; entity . setId ( id ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "convertToArrayFrom ( java . lang . String ) { javax . json . JsonReader reader = javax . json . Json . createReader ( new java . io . StringReader ( rawValue ) ) ; return reader . readArray ( ) ; }", "testMethod": "all ( ) { this . put ( ) ; java . lang . String rawContent = this . tut . path ( com . abien . airhacks . satellite . cache . boundary . QueueGridResourceIT . QUEUE_CACHE_TYPE ) . path ( com . abien . airhacks . satellite . cache . boundary . QueueGridResourceIT . A_QUEUE_STORE ) . request ( MediaType . TEXT_PLAIN ) . get ( java . lang . String . class ) ; javax . json . JsonArray array = com . abien . airhacks . satellite . RESTSupport . convertToArrayFrom ( rawContent ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( array )", "total": "all ( ) { this . put ( ) ; java . lang . String rawContent = this . tut . path ( com . abien . airhacks . satellite . cache . boundary . QueueGridResourceIT . QUEUE_CACHE_TYPE ) . path ( com . abien . airhacks . satellite . cache . boundary . QueueGridResourceIT . A_QUEUE_STORE ) . request ( MediaType . TEXT_PLAIN ) . get ( java . lang . String . class ) ; javax . json . JsonArray array = com . abien . airhacks . satellite . RESTSupport . convertToArrayFrom ( rawContent ) ; \"<AssertPlaceHolder>\" ; } convertToArrayFrom ( java . lang . String ) { javax . json . JsonReader reader = javax . json . Json . createReader ( new java . io . StringReader ( rawValue ) ) ; return reader . readArray ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( array )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testEdita ( ) { log . debug ( \"Test<sp>'edita'\" ) ; mx . edu . um . mateo . contabilidad . facturas . model . ProveedorFacturas usuario = ( ( mx . edu . um . mateo . contabilidad . facturas . model . ProveedorFacturas ) ( obtieneProveedor ( ) ) ) ; mx . edu . um . mateo . contabilidad . facturas . model . InformeProveedor informeProveedor = new mx . edu . um . mateo . contabilidad . facturas . model . InformeProveedor ( ) ; informeProveedor = new mx . edu . um . mateo . contabilidad . facturas . model . InformeProveedor ( ) ; informeProveedor . setEmpresa ( usuario . getEmpresa ( ) ) ; informeProveedor . setFechaInforme ( new java . util . Date ( ) ) ; informeProveedor . setNombreProveedor ( \"LAla\" ) ; informeProveedor . setStatus ( \"A\" ) ; informeProveedor . setProveedorFacturas ( usuario ) ; currentSession ( ) . save ( informeProveedor ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . PATH_INFORMEPROVEEDOR_EDITA ) + \"/\" ) + ( informeProveedor . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_INFORMEPROVEEDOR_EDITA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_INFORMEPROVEEDOR ) ) . andExpect ( model ( ) . attribute ( Constantes . ADDATTRIBUTE_INFORMEPROVEEDOR , informeProveedor ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( informeProveedor . getId ( ) )", "total": "testEdita ( ) { log . debug ( \"Test<sp>'edita'\" ) ; mx . edu . um . mateo . contabilidad . facturas . model . ProveedorFacturas usuario = ( ( mx . edu . um . mateo . contabilidad . facturas . model . ProveedorFacturas ) ( obtieneProveedor ( ) ) ) ; mx . edu . um . mateo . contabilidad . facturas . model . InformeProveedor informeProveedor = new mx . edu . um . mateo . contabilidad . facturas . model . InformeProveedor ( ) ; informeProveedor = new mx . edu . um . mateo . contabilidad . facturas . model . InformeProveedor ( ) ; informeProveedor . setEmpresa ( usuario . getEmpresa ( ) ) ; informeProveedor . setFechaInforme ( new java . util . Date ( ) ) ; informeProveedor . setNombreProveedor ( \"LAla\" ) ; informeProveedor . setStatus ( \"A\" ) ; informeProveedor . setProveedorFacturas ( usuario ) ; currentSession ( ) . save ( informeProveedor ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . PATH_INFORMEPROVEEDOR_EDITA ) + \"/\" ) + ( informeProveedor . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_INFORMEPROVEEDOR_EDITA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_INFORMEPROVEEDOR ) ) . andExpect ( model ( ) . attribute ( Constantes . ADDATTRIBUTE_INFORMEPROVEEDOR , informeProveedor ) ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( informeProveedor . getId ( ) )"}
{"focal": "getPKP ( ) { return cz . tomasdvorak . eet . client . utils . StringUtils . toBase64 ( request . getKontrolniKody ( ) . getPkp ( ) . getValue ( ) ) ; }", "testMethod": "testAsyncCommunicationTimeout ( ) { final cz . etrzby . xml . TrzbaDataType data = getData ( 1 ) ; final cz . tomasdvorak . eet . client . EETClient eetClient = getService ( new cz . tomasdvorak . eet . client . dto . WebserviceConfiguration ( 1L ) ) ; final cz . etrzby . xml . TrzbaType request = eetClient . prepareFirstRequest ( data , CommunicationMode . REAL ) ; eetClient . sendAsync ( request , EndpointType . PLAYGROUND , new cz . tomasdvorak . eet . client . dto . ResponseCallback ( ) { @ cz . tomasdvorak . eet . client . Override public void onComplete ( final cz . tomasdvorak . eet . client . dto . SubmitResult result ) { org . junit . Assert . fail ( \"Should<sp>be<sp>handled<sp>in<sp>onError<sp>method\" ) ; } @ cz . tomasdvorak . eet . client . Override public void onError ( final cz . tomasdvorak . eet . client . exceptions . CommunicationException cause ) { org . junit . Assert . fail ( \"Should<sp>be<sp>handled<sp>in<sp>onTimeout\" ) ; } @ cz . tomasdvorak . eet . client . Override public void onTimeout ( final cz . tomasdvorak . eet . client . exceptions . CommunicationTimeoutException cause ) { \"<AssertPlaceHolder>\" ; } } ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( cause . getPKP ( ) )", "total": "testAsyncCommunicationTimeout ( ) { final cz . etrzby . xml . TrzbaDataType data = getData ( 1 ) ; final cz . tomasdvorak . eet . client . EETClient eetClient = getService ( new cz . tomasdvorak . eet . client . dto . WebserviceConfiguration ( 1L ) ) ; final cz . etrzby . xml . TrzbaType request = eetClient . prepareFirstRequest ( data , CommunicationMode . REAL ) ; eetClient . sendAsync ( request , EndpointType . PLAYGROUND , new cz . tomasdvorak . eet . client . dto . ResponseCallback ( ) { @ cz . tomasdvorak . eet . client . Override public void onComplete ( final cz . tomasdvorak . eet . client . dto . SubmitResult result ) { org . junit . Assert . fail ( \"Should<sp>be<sp>handled<sp>in<sp>onError<sp>method\" ) ; } @ cz . tomasdvorak . eet . client . Override public void onError ( final cz . tomasdvorak . eet . client . exceptions . CommunicationException cause ) { org . junit . Assert . fail ( \"Should<sp>be<sp>handled<sp>in<sp>onTimeout\" ) ; } @ cz . tomasdvorak . eet . client . Override public void onTimeout ( final cz . tomasdvorak . eet . client . exceptions . CommunicationTimeoutException cause ) { \"<AssertPlaceHolder>\" ; } } ) ; } getPKP ( ) { return cz . tomasdvorak . eet . client . utils . StringUtils . toBase64 ( request . getKontrolniKody ( ) . getPkp ( ) . getValue ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( cause . getPKP ( ) )"}
{"focal": "getFieldPopulator ( org . drools . workbench . models . testscenarios . shared . Field ) { if ( field instanceof org . drools . workbench . models . testscenarios . shared . FieldData ) { org . drools . workbench . models . testscenarios . shared . FieldData fieldData = ( ( org . drools . workbench . models . testscenarios . shared . FieldData ) ( field ) ) ; if ( ( fieldData . getValue ( ) ) == null ) { throw new java . lang . IllegalArgumentException ( \"Field<sp>value<sp>can<sp>not<sp>be<sp>null\" ) ; } else { return getFieldDataPopulator ( factObject , fieldData ) ; } } else if ( field instanceof org . drools . workbench . models . testscenarios . shared . FactAssignmentField ) { return new org . drools . workbench . models . testscenarios . backend . populators . FactAssignmentFieldPopulator ( factObject , ( ( org . drools . workbench . models . testscenarios . shared . FactAssignmentField ) ( field ) ) , typeResolver ) ; } else if ( field instanceof org . drools . workbench . models . testscenarios . shared . CollectionFieldData ) { return new org . drools . workbench . models . testscenarios . backend . populators . CollectionFieldPopulator ( factObject , ( ( org . drools . workbench . models . testscenarios . shared . CollectionFieldData ) ( field ) ) ) ; } throw new java . lang . IllegalArgumentException ( ( \"Unknown<sp>field<sp>type<sp>\" + ( field . getClass ( ) ) ) ) ; }", "testMethod": "testFactAssignmentField ( ) { org . drools . workbench . models . testscenarios . shared . FactAssignmentField field = new org . drools . workbench . models . testscenarios . shared . FactAssignmentField ( ) ; field . setFact ( new org . drools . workbench . models . testscenarios . shared . Fact ( ) ) ; org . mockito . Mockito . < java . lang . Class > when ( typeResolver . resolveType ( org . mockito . Matchers . < java . lang . String > any ( ) ) ) . thenReturn ( org . drools . workbench . models . testscenarios . backend . Cheese . class ) ; org . drools . workbench . models . testscenarios . backend . populators . FieldPopulator fieldPopulator = fieldPopulatorFactory . getFieldPopulator ( field ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( fieldPopulator )", "total": "testFactAssignmentField ( ) { org . drools . workbench . models . testscenarios . shared . FactAssignmentField field = new org . drools . workbench . models . testscenarios . shared . FactAssignmentField ( ) ; field . setFact ( new org . drools . workbench . models . testscenarios . shared . Fact ( ) ) ; org . mockito . Mockito . < java . lang . Class > when ( typeResolver . resolveType ( org . mockito . Matchers . < java . lang . String > any ( ) ) ) . thenReturn ( org . drools . workbench . models . testscenarios . backend . Cheese . class ) ; org . drools . workbench . models . testscenarios . backend . populators . FieldPopulator fieldPopulator = fieldPopulatorFactory . getFieldPopulator ( field ) ; \"<AssertPlaceHolder>\" ; } getFieldPopulator ( org . drools . workbench . models . testscenarios . shared . Field ) { if ( field instanceof org . drools . workbench . models . testscenarios . shared . FieldData ) { org . drools . workbench . models . testscenarios . shared . FieldData fieldData = ( ( org . drools . workbench . models . testscenarios . shared . FieldData ) ( field ) ) ; if ( ( fieldData . getValue ( ) ) == null ) { throw new java . lang . IllegalArgumentException ( \"Field<sp>value<sp>can<sp>not<sp>be<sp>null\" ) ; } else { return getFieldDataPopulator ( factObject , fieldData ) ; } } else if ( field instanceof org . drools . workbench . models . testscenarios . shared . FactAssignmentField ) { return new org . drools . workbench . models . testscenarios . backend . populators . FactAssignmentFieldPopulator ( factObject , ( ( org . drools . workbench . models . testscenarios . shared . FactAssignmentField ) ( field ) ) , typeResolver ) ; } else if ( field instanceof org . drools . workbench . models . testscenarios . shared . CollectionFieldData ) { return new org . drools . workbench . models . testscenarios . backend . populators . CollectionFieldPopulator ( factObject , ( ( org . drools . workbench . models . testscenarios . shared . CollectionFieldData ) ( field ) ) ) ; } throw new java . lang . IllegalArgumentException ( ( \"Unknown<sp>field<sp>type<sp>\" + ( field . getClass ( ) ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( fieldPopulator )"}
{"focal": "getInstance ( ) { return org . apache . servicecomb . config . client . ParseConfigUtils . INSTANCE ; }", "testMethod": "testMicroserviceInstanceResponse ( ) { org . apache . servicecomb . serviceregistry . api . registry . MicroserviceInstance microserviceInstance = new org . apache . servicecomb . serviceregistry . api . registry . MicroserviceInstance ( ) ; org . apache . servicecomb . serviceregistry . api . response . MicroserviceInstanceResponse microserviceInstanceResponse = new org . apache . servicecomb . serviceregistry . api . response . MicroserviceInstanceResponse ( ) ; microserviceInstanceResponse . setInstance ( microserviceInstance ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( microserviceInstanceResponse . getInstance ( ) )", "total": "testMicroserviceInstanceResponse ( ) { org . apache . servicecomb . serviceregistry . api . registry . MicroserviceInstance microserviceInstance = new org . apache . servicecomb . serviceregistry . api . registry . MicroserviceInstance ( ) ; org . apache . servicecomb . serviceregistry . api . response . MicroserviceInstanceResponse microserviceInstanceResponse = new org . apache . servicecomb . serviceregistry . api . response . MicroserviceInstanceResponse ( ) ; microserviceInstanceResponse . setInstance ( microserviceInstance ) ; \"<AssertPlaceHolder>\" ; } getInstance ( ) { return org . apache . servicecomb . config . client . ParseConfigUtils . INSTANCE ; }", "answer": "org . junit . Assert . assertNotNull ( microserviceInstanceResponse . getInstance ( ) )"}
{"focal": "createEntityManagerFactory ( java . lang . String , java . util . Map ) { synchronized ( this ) { try { javax . persistence . EntityManagerFactory emf = new com . impetus . kundera . persistence . EntityManagerFactoryImpl ( persistenceUnit , map ) ; return emf ; } catch ( com . impetus . kundera . configure . PersistenceUnitConfigurationException pcex ) { com . impetus . kundera . KunderaPersistence . logger . error ( \"EntityManagerFactory<sp>not<sp>created,<sp>returning<sp>null.\" ) ; return null ; } } }", "testMethod": "testValidate ( ) { try { java . util . Map props = new java . util . HashMap ( ) ; props . put ( PersistenceProperties . KUNDERA_DDL_AUTO_PREPARE , \"validate\" ) ; emf = javax . persistence . Persistence . createEntityManagerFactory ( persistenceUnit , props ) ; org . junit . Assert . fail ( \"Schema<sp>generation<sp>exception<sp>should<sp>have<sp>been<sp>thrown<sp>since<sp>schema<sp>doesn't<sp>exist\" ) ; } catch ( java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e )", "total": "testValidate ( ) { try { java . util . Map props = new java . util . HashMap ( ) ; props . put ( PersistenceProperties . KUNDERA_DDL_AUTO_PREPARE , \"validate\" ) ; emf = javax . persistence . Persistence . createEntityManagerFactory ( persistenceUnit , props ) ; org . junit . Assert . fail ( \"Schema<sp>generation<sp>exception<sp>should<sp>have<sp>been<sp>thrown<sp>since<sp>schema<sp>doesn't<sp>exist\" ) ; } catch ( java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; } } createEntityManagerFactory ( java . lang . String , java . util . Map ) { synchronized ( this ) { try { javax . persistence . EntityManagerFactory emf = new com . impetus . kundera . persistence . EntityManagerFactoryImpl ( persistenceUnit , map ) ; return emf ; } catch ( com . impetus . kundera . configure . PersistenceUnitConfigurationException pcex ) { com . impetus . kundera . KunderaPersistence . logger . error ( \"EntityManagerFactory<sp>not<sp>created,<sp>returning<sp>null.\" ) ; return null ; } } }", "answer": "org . junit . Assert . assertNotNull ( e )"}
{"focal": "getStream ( java . lang . String ) { return cn . hutool . core . io . resource . ResourceUtil . getResourceObj ( resurce ) . getStream ( ) ; }", "testMethod": "readPublicKeyTest ( ) { java . security . PublicKey publicKey = cn . hutool . crypto . BCUtil . readPublicKey ( cn . hutool . core . io . resource . ResourceUtil . getStream ( \"test_public_key.csr\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( publicKey )", "total": "readPublicKeyTest ( ) { java . security . PublicKey publicKey = cn . hutool . crypto . BCUtil . readPublicKey ( cn . hutool . core . io . resource . ResourceUtil . getStream ( \"test_public_key.csr\" ) ) ; \"<AssertPlaceHolder>\" ; } getStream ( java . lang . String ) { return cn . hutool . core . io . resource . ResourceUtil . getResourceObj ( resurce ) . getStream ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( publicKey )"}
{"focal": "create ( java . lang . Class ) { return new org . openscience . cdk . tools . SystemOutLoggingTool ( sourceClass ) ; }", "testMethod": "testCreate ( ) { org . openscience . cdk . tools . ILoggingTool logger = org . openscience . cdk . tools . SystemOutLoggingTool . create ( this . getClass ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( logger )", "total": "testCreate ( ) { org . openscience . cdk . tools . ILoggingTool logger = org . openscience . cdk . tools . SystemOutLoggingTool . create ( this . getClass ( ) ) ; \"<AssertPlaceHolder>\" ; } create ( java . lang . Class ) { return new org . openscience . cdk . tools . SystemOutLoggingTool ( sourceClass ) ; }", "answer": "org . junit . Assert . assertNotNull ( logger )"}
{"focal": "handleException ( java . lang . Exception ) { com . runabove . error . LoggerErrorHandler . LOG . error ( \"Exception<sp>\" , exception ) ; }", "testMethod": "testSigningClient ( ) { com . runabove . SigningTest . LOG . info ( \"Signing<sp>Client<sp>test\" ) ; com . runabove . client . SigningClient sc = new com . runabove . client . SigningClient ( new com . runabove . MockClient ( ) , null , null , null , new com . runabove . error . ExceptionHandler ( ) { public java . lang . Throwable handleError ( retrofit . RetrofitError arg0 ) { return null ; } public void handleException ( java . lang . Exception exception ) { } } ) ; try { retrofit . client . Response rs = sc . execute ( new retrofit . client . Request ( \"GET\" , \"/test\" , java . util . Collections . EMPTY_LIST , new retrofit . mime . TypedByteArray ( \"application/json\" , \"\" . getBytes ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; } catch ( java . io . IOException e ) { com . runabove . SigningTest . LOG . error ( \"Signing<sp>Client<sp>test<sp>error\" , e ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( rs )", "total": "testSigningClient ( ) { com . runabove . SigningTest . LOG . info ( \"Signing<sp>Client<sp>test\" ) ; com . runabove . client . SigningClient sc = new com . runabove . client . SigningClient ( new com . runabove . MockClient ( ) , null , null , null , new com . runabove . error . ExceptionHandler ( ) { public java . lang . Throwable handleError ( retrofit . RetrofitError arg0 ) { return null ; } public void handleException ( java . lang . Exception exception ) { } } ) ; try { retrofit . client . Response rs = sc . execute ( new retrofit . client . Request ( \"GET\" , \"/test\" , java . util . Collections . EMPTY_LIST , new retrofit . mime . TypedByteArray ( \"application/json\" , \"\" . getBytes ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; } catch ( java . io . IOException e ) { com . runabove . SigningTest . LOG . error ( \"Signing<sp>Client<sp>test<sp>error\" , e ) ; } } handleException ( java . lang . Exception ) { com . runabove . error . LoggerErrorHandler . LOG . error ( \"Exception<sp>\" , exception ) ; }", "answer": "org . junit . Assert . assertNotNull ( rs )"}
{"focal": "getSuccessiveFailedTimes ( java . lang . String ) { final int defaultValue = 5 ; java . lang . String p = org . apache . servicecomb . loadbalance . Configuration . getStringProperty ( \"5\" , ( ( ( ( org . apache . servicecomb . loadbalance . Configuration . PROP_ROOT ) + microservice ) + \".\" ) + ( org . apache . servicecomb . loadbalance . Configuration . SUCCESSIVE_FAILED_TIMES ) ) , ( ( org . apache . servicecomb . loadbalance . Configuration . PROP_ROOT ) + ( org . apache . servicecomb . loadbalance . Configuration . SUCCESSIVE_FAILED_TIMES ) ) ) ; try { return java . lang . Integer . parseInt ( p ) ; } catch ( java . lang . NumberFormatException e ) { return defaultValue ; } }", "testMethod": "testGetSuccessiveFailedTimes ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( Configuration . INSTANCE . getSuccessiveFailedTimes ( \"test\" ) )", "total": "testGetSuccessiveFailedTimes ( ) { \"<AssertPlaceHolder>\" ; } getSuccessiveFailedTimes ( java . lang . String ) { final int defaultValue = 5 ; java . lang . String p = org . apache . servicecomb . loadbalance . Configuration . getStringProperty ( \"5\" , ( ( ( ( org . apache . servicecomb . loadbalance . Configuration . PROP_ROOT ) + microservice ) + \".\" ) + ( org . apache . servicecomb . loadbalance . Configuration . SUCCESSIVE_FAILED_TIMES ) ) , ( ( org . apache . servicecomb . loadbalance . Configuration . PROP_ROOT ) + ( org . apache . servicecomb . loadbalance . Configuration . SUCCESSIVE_FAILED_TIMES ) ) ) ; try { return java . lang . Integer . parseInt ( p ) ; } catch ( java . lang . NumberFormatException e ) { return defaultValue ; } }", "answer": "org . junit . Assert . assertNotNull ( Configuration . INSTANCE . getSuccessiveFailedTimes ( \"test\" ) )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . BedDemographicStatus entity = new org . oscarehr . common . model . BedDemographicStatus ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . BedDemographicStatus entity = new org . oscarehr . common . model . BedDemographicStatus ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "create ( ) { return this . create ( null , null , null , null ) ; }", "testMethod": "firstTest ( ) { com . microsoft . azure . management . signalr . v2018_03_01_preview . SignalRTest . rgName = com . microsoft . azure . arm . utils . SdkContext . randomResourceName ( \"rg\" , 20 ) ; com . microsoft . azure . management . resources . ResourceGroup group = com . microsoft . azure . management . signalr . v2018_03_01_preview . SignalRTest . resourceManager . resourceGroups ( ) . define ( com . microsoft . azure . management . signalr . v2018_03_01_preview . SignalRTest . rgName ) . withRegion ( Region . US_WEST . toString ( ) ) . create ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( group )", "total": "firstTest ( ) { com . microsoft . azure . management . signalr . v2018_03_01_preview . SignalRTest . rgName = com . microsoft . azure . arm . utils . SdkContext . randomResourceName ( \"rg\" , 20 ) ; com . microsoft . azure . management . resources . ResourceGroup group = com . microsoft . azure . management . signalr . v2018_03_01_preview . SignalRTest . resourceManager . resourceGroups ( ) . define ( com . microsoft . azure . management . signalr . v2018_03_01_preview . SignalRTest . rgName ) . withRegion ( Region . US_WEST . toString ( ) ) . create ( ) ; \"<AssertPlaceHolder>\" ; } create ( ) { return this . create ( null , null , null , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( group )"}
{"focal": "jsonFromClasspath ( java . lang . String ) { try { return fromInputStream ( getClass ( ) . getResourceAsStream ( ( ( \"/json/\" + pathToJson ) + \".json\" ) ) ) ; } catch ( java . io . IOException e ) { throw new java . lang . IllegalStateException ( \"Unable<sp>to<sp>load<sp>JSON<sp>from<sp>the<sp>classpath\" , e ) ; } }", "testMethod": "check_2_5_simple ( ) { com . restfb . types . OpenGraphRating exampleRating = createJsonMapper ( ) . toJavaObject ( jsonFromClasspath ( \"v2_5/open-graph-rating-simple\" ) , com . restfb . types . OpenGraphRating . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( exampleRating )", "total": "check_2_5_simple ( ) { com . restfb . types . OpenGraphRating exampleRating = createJsonMapper ( ) . toJavaObject ( jsonFromClasspath ( \"v2_5/open-graph-rating-simple\" ) , com . restfb . types . OpenGraphRating . class ) ; \"<AssertPlaceHolder>\" ; } jsonFromClasspath ( java . lang . String ) { try { return fromInputStream ( getClass ( ) . getResourceAsStream ( ( ( \"/json/\" + pathToJson ) + \".json\" ) ) ) ; } catch ( java . io . IOException e ) { throw new java . lang . IllegalStateException ( \"Unable<sp>to<sp>load<sp>JSON<sp>from<sp>the<sp>classpath\" , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( exampleRating )"}
{"focal": "getPages ( ) { return new org . sejda . sambox . pdmodel . PDPageTree ( ( ( org . sejda . sambox . cos . COSDictionary ) ( root . getDictionaryObject ( COSName . PAGES ) ) ) , document ) ; }", "testMethod": "wrongMultipleLevel ( ) { try ( org . sejda . sambox . pdmodel . PDDocument doc = org . sejda . sambox . input . PDFParser . parse ( org . sejda . io . SeekableSources . inMemorySeekableSourceFrom ( org . sejda . sambox . pdmodel . PDPageTreeTest . class . getResourceAsStream ( \"page_tree_multiple_levels_wrong_kid_type.pdf\" ) ) ) ) { for ( org . sejda . sambox . pdmodel . PDPage page : doc . getPages ( ) ) { \"<AssertPlaceHolder>\" ; } } }", "assertLine": "org . junit . Assert . assertNotNull ( page )", "total": "wrongMultipleLevel ( ) { try ( org . sejda . sambox . pdmodel . PDDocument doc = org . sejda . sambox . input . PDFParser . parse ( org . sejda . io . SeekableSources . inMemorySeekableSourceFrom ( org . sejda . sambox . pdmodel . PDPageTreeTest . class . getResourceAsStream ( \"page_tree_multiple_levels_wrong_kid_type.pdf\" ) ) ) ) { for ( org . sejda . sambox . pdmodel . PDPage page : doc . getPages ( ) ) { \"<AssertPlaceHolder>\" ; } } } getPages ( ) { return new org . sejda . sambox . pdmodel . PDPageTree ( ( ( org . sejda . sambox . cos . COSDictionary ) ( root . getDictionaryObject ( COSName . PAGES ) ) ) , document ) ; }", "answer": "org . junit . Assert . assertNotNull ( page )"}
{"focal": "setBackgroundShape ( java . util . function . Supplier ) { backgroundShapeSupplier = shapeSupplier ; return this ; }", "testMethod": "testSelectedStateShadow ( ) { when ( handler . getShapeState ( ) ) . thenReturn ( ShapeState . SELECTED ) ; tested . setBackgroundShape ( ( ) -> backgroundShape ) ; \"<AssertPlaceHolder>\" ; this . onComplete . execute ( ) ; verify ( backgroundShape , times ( 1 ) ) . setShadow ( anyString ( ) , anyInt ( ) , anyDouble ( ) , anyDouble ( ) ) ; verify ( backgroundShape , never ( ) ) . removeShadow ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( onComplete )", "total": "testSelectedStateShadow ( ) { when ( handler . getShapeState ( ) ) . thenReturn ( ShapeState . SELECTED ) ; tested . setBackgroundShape ( ( ) -> backgroundShape ) ; \"<AssertPlaceHolder>\" ; this . onComplete . execute ( ) ; verify ( backgroundShape , times ( 1 ) ) . setShadow ( anyString ( ) , anyInt ( ) , anyDouble ( ) , anyDouble ( ) ) ; verify ( backgroundShape , never ( ) ) . removeShadow ( ) ; } setBackgroundShape ( java . util . function . Supplier ) { backgroundShapeSupplier = shapeSupplier ; return this ; }", "answer": "org . junit . Assert . assertNotNull ( onComplete )"}
{"focal": "getFirstDescendantOfType ( java . lang . Class ) { return net . sourceforge . pmd . lang . ast . AbstractNode . getFirstDescendantOfType ( descendantType , this ) ; }", "testMethod": "testExample1 ( ) { java . lang . String code = org . apache . commons . io . IOUtils . toString ( this . getClass ( ) . getResourceAsStream ( \"SelectIntoWithGroupBy1.pls\" ) , StandardCharsets . UTF_8 ) ; net . sourceforge . pmd . lang . plsql . ast . ASTInput input = parsePLSQL ( code ) ; net . sourceforge . pmd . lang . plsql . ast . ASTGroupByClause groupByClause = input . getFirstDescendantOfType ( net . sourceforge . pmd . lang . plsql . ast . ASTGroupByClause . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( groupByClause )", "total": "testExample1 ( ) { java . lang . String code = org . apache . commons . io . IOUtils . toString ( this . getClass ( ) . getResourceAsStream ( \"SelectIntoWithGroupBy1.pls\" ) , StandardCharsets . UTF_8 ) ; net . sourceforge . pmd . lang . plsql . ast . ASTInput input = parsePLSQL ( code ) ; net . sourceforge . pmd . lang . plsql . ast . ASTGroupByClause groupByClause = input . getFirstDescendantOfType ( net . sourceforge . pmd . lang . plsql . ast . ASTGroupByClause . class ) ; \"<AssertPlaceHolder>\" ; } getFirstDescendantOfType ( java . lang . Class ) { return net . sourceforge . pmd . lang . ast . AbstractNode . getFirstDescendantOfType ( descendantType , this ) ; }", "answer": "org . junit . Assert . assertNotNull ( groupByClause )"}
{"focal": "getAverageLengthWithBlankRows ( ) { java . lang . String sql = ( ( ( ( ( ( ( ( \"SELECT<sp>t.*<sp>FROM(SELECT<sp>CAST(SUM(LENGTH(\" + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \"))<sp>/<sp>(COUNT(<%=__COLUMN_NAMES__%><sp>)*1.00)+0.99<sp>as<sp>int)<sp>c,\" ) + \"CAST(SUM(LENGTH(\" ) + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \"))<sp>/<sp>(COUNT(<%=__COLUMN_NAMES__%>)*1.00)<sp>as<sp>int)<sp>f<sp>\" ) + \"FROM<sp><%=__TABLE_NAME__%><sp>WHERE(<%=__COLUMN_NAMES__%><sp>IS<sp>NOT<sp>NULL))<sp>e,<sp><%=__TABLE_NAME__%><sp>t<sp>\" ) + \"WHERE<sp><%=__COLUMN_NAMES__%><sp>IS<sp>NOT<sp>NULL<sp>AND<sp>LENGTH(\" ) + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \")<sp>BETWEEN<sp>f<sp>AND<sp>c\" ; return sql ; }", "testMethod": "testGetAverageLengthWithBlankRows ( ) { try { org . talend . dq . dbms . DbmsLanguage dbms = getMysqlDbmsLanguage ( ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( dbms . getAverageLengthWithBlankRows ( ) )", "total": "testGetAverageLengthWithBlankRows ( ) { try { org . talend . dq . dbms . DbmsLanguage dbms = getMysqlDbmsLanguage ( ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } } getAverageLengthWithBlankRows ( ) { java . lang . String sql = ( ( ( ( ( ( ( ( \"SELECT<sp>t.*<sp>FROM(SELECT<sp>CAST(SUM(LENGTH(\" + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \"))<sp>/<sp>(COUNT(<%=__COLUMN_NAMES__%><sp>)*1.00)+0.99<sp>as<sp>int)<sp>c,\" ) + \"CAST(SUM(LENGTH(\" ) + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \"))<sp>/<sp>(COUNT(<%=__COLUMN_NAMES__%>)*1.00)<sp>as<sp>int)<sp>f<sp>\" ) + \"FROM<sp><%=__TABLE_NAME__%><sp>WHERE(<%=__COLUMN_NAMES__%><sp>IS<sp>NOT<sp>NULL))<sp>e,<sp><%=__TABLE_NAME__%><sp>t<sp>\" ) + \"WHERE<sp><%=__COLUMN_NAMES__%><sp>IS<sp>NOT<sp>NULL<sp>AND<sp>LENGTH(\" ) + ( trimIfBlank ( \"<%=__COLUMN_NAMES__%>\" ) ) ) + \")<sp>BETWEEN<sp>f<sp>AND<sp>c\" ; return sql ; }", "answer": "org . junit . Assert . assertNotNull ( dbms . getAverageLengthWithBlankRows ( ) )"}
{"focal": "reindex ( fr . gouv . vitam . common . database . parameter . IndexParameters ) { fr . gouv . vitam . common . ParametersChecker . checkParameter ( \"The<sp>options<sp>are<sp>mandatory\" , indexParam ) ; javax . ws . rs . core . Response response = null ; try { response = performRequest ( javax . ws . rs . HttpMethod . POST , fr . gouv . vitam . metadata . client . MetaDataClientRest . REINDEX_URI , null , indexParam , javax . ws . rs . core . MediaType . APPLICATION_JSON_TYPE , javax . ws . rs . core . MediaType . APPLICATION_JSON_TYPE ) ; return response . readEntity ( com . fasterxml . jackson . databind . JsonNode . class ) ; } catch ( fr . gouv . vitam . common . exception . VitamClientInternalException e ) { throw new fr . gouv . vitam . metadata . api . exception . MetaDataClientServerException ( \"Internal<sp>Server<sp>Error\" , e ) ; } finally { consumeAnyEntityAndClose ( response ) ; } }", "testMethod": "launchReindexationTest ( ) { when ( fr . gouv . vitam . metadata . client . MetaDataClientRestTest . mock . post ( ) ) . thenReturn ( javax . ws . rs . core . Response . status ( Status . CREATED ) . entity ( fr . gouv . vitam . common . json . JsonHandler . createObjectNode ( ) ) . build ( ) ) ; com . fasterxml . jackson . databind . JsonNode resp = fr . gouv . vitam . metadata . client . MetaDataClientRestTest . client . reindex ( new fr . gouv . vitam . common . database . parameter . IndexParameters ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( resp )", "total": "launchReindexationTest ( ) { when ( fr . gouv . vitam . metadata . client . MetaDataClientRestTest . mock . post ( ) ) . thenReturn ( javax . ws . rs . core . Response . status ( Status . CREATED ) . entity ( fr . gouv . vitam . common . json . JsonHandler . createObjectNode ( ) ) . build ( ) ) ; com . fasterxml . jackson . databind . JsonNode resp = fr . gouv . vitam . metadata . client . MetaDataClientRestTest . client . reindex ( new fr . gouv . vitam . common . database . parameter . IndexParameters ( ) ) ; \"<AssertPlaceHolder>\" ; } reindex ( fr . gouv . vitam . common . database . parameter . IndexParameters ) { fr . gouv . vitam . common . ParametersChecker . checkParameter ( \"The<sp>options<sp>are<sp>mandatory\" , indexParam ) ; javax . ws . rs . core . Response response = null ; try { response = performRequest ( javax . ws . rs . HttpMethod . POST , fr . gouv . vitam . metadata . client . MetaDataClientRest . REINDEX_URI , null , indexParam , javax . ws . rs . core . MediaType . APPLICATION_JSON_TYPE , javax . ws . rs . core . MediaType . APPLICATION_JSON_TYPE ) ; return response . readEntity ( com . fasterxml . jackson . databind . JsonNode . class ) ; } catch ( fr . gouv . vitam . common . exception . VitamClientInternalException e ) { throw new fr . gouv . vitam . metadata . api . exception . MetaDataClientServerException ( \"Internal<sp>Server<sp>Error\" , e ) ; } finally { consumeAnyEntityAndClose ( response ) ; } }", "answer": "org . junit . Assert . assertNotNull ( resp )"}
{"focal": "getAdapter ( java . lang . Class ) { T result = super . getAdapter ( adapter ) ; if ( adapter == ( com . eclipsesource . tabris . internal . DrawingsCache . class ) ) { result = ( ( T ) ( cache ) ) ; } else if ( adapter == ( java . util . List . class ) ) { return ( ( T ) ( drawListeners ) ) ; } return result ; }", "testMethod": "testCanGetDescriptor ( ) { com . eclipsesource . tabris . ui . UIConfiguration configuration = new com . eclipsesource . tabris . ui . UIConfiguration ( ) ; com . eclipsesource . tabris . internal . ui . UIDescriptor uiDescriptor = configuration . getAdapter ( com . eclipsesource . tabris . internal . ui . UIDescriptor . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( uiDescriptor )", "total": "testCanGetDescriptor ( ) { com . eclipsesource . tabris . ui . UIConfiguration configuration = new com . eclipsesource . tabris . ui . UIConfiguration ( ) ; com . eclipsesource . tabris . internal . ui . UIDescriptor uiDescriptor = configuration . getAdapter ( com . eclipsesource . tabris . internal . ui . UIDescriptor . class ) ; \"<AssertPlaceHolder>\" ; } getAdapter ( java . lang . Class ) { T result = super . getAdapter ( adapter ) ; if ( adapter == ( com . eclipsesource . tabris . internal . DrawingsCache . class ) ) { result = ( ( T ) ( cache ) ) ; } else if ( adapter == ( java . util . List . class ) ) { return ( ( T ) ( drawListeners ) ) ; } return result ; }", "answer": "org . junit . Assert . assertNotNull ( uiDescriptor )"}
{"focal": "create ( net . magja . service . order . OrderForm ) { try { java . lang . String result = soapClient . callSingle ( ResourcePath . SalesOrderCreate , orderForm . serializeToApi ( ) ) ; return result ; } catch ( org . apache . axis2 . AxisFault e ) { log . debug ( ( \"Error<sp>when<sp>creating<sp>OrderForm<sp>\" + orderForm ) , e ) ; throw new net . magja . service . ServiceException ( ( \"Error<sp>when<sp>creating<sp>OrderForm<sp>\" + orderForm ) , e ) ; } }", "testMethod": "createValidOrderFormShouldSucceed ( ) { com . google . common . collect . ImmutableList < net . magja . model . order . OrderFormItem > items = com . google . common . collect . ImmutableList . of ( new net . magja . model . order . OrderFormItem ( 1566L , 1.0 ) , new net . magja . model . order . OrderFormItem ( 1556L , 1.0 ) ) ; long customerId = 3L ; net . magja . model . order . OrderForm orderForm = new net . magja . model . order . OrderForm ( customerId , \"IDR\" , items ) ; java . lang . Object order = service . create ( orderForm ) ; System . out . println ( ( \"Order<sp>Id<sp>\" + order ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( order )", "total": "createValidOrderFormShouldSucceed ( ) { com . google . common . collect . ImmutableList < net . magja . model . order . OrderFormItem > items = com . google . common . collect . ImmutableList . of ( new net . magja . model . order . OrderFormItem ( 1566L , 1.0 ) , new net . magja . model . order . OrderFormItem ( 1556L , 1.0 ) ) ; long customerId = 3L ; net . magja . model . order . OrderForm orderForm = new net . magja . model . order . OrderForm ( customerId , \"IDR\" , items ) ; java . lang . Object order = service . create ( orderForm ) ; System . out . println ( ( \"Order<sp>Id<sp>\" + order ) ) ; \"<AssertPlaceHolder>\" ; } create ( net . magja . service . order . OrderForm ) { try { java . lang . String result = soapClient . callSingle ( ResourcePath . SalesOrderCreate , orderForm . serializeToApi ( ) ) ; return result ; } catch ( org . apache . axis2 . AxisFault e ) { log . debug ( ( \"Error<sp>when<sp>creating<sp>OrderForm<sp>\" + orderForm ) , e ) ; throw new net . magja . service . ServiceException ( ( \"Error<sp>when<sp>creating<sp>OrderForm<sp>\" + orderForm ) , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( order )"}
{"focal": "newMessage ( ) { return new org . eclipse . kapua . service . device . call . message . kura . KuraMessage ( ) ; }", "testMethod": "newMessage ( ) { org . eclipse . kapua . message . KapuaMessage < ? , ? > message = kapuaMessageFactory . newMessage ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( message )", "total": "newMessage ( ) { org . eclipse . kapua . message . KapuaMessage < ? , ? > message = kapuaMessageFactory . newMessage ( ) ; \"<AssertPlaceHolder>\" ; } newMessage ( ) { return new org . eclipse . kapua . service . device . call . message . kura . KuraMessage ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( message )"}
{"focal": "getCapabilities ( net . opengis . cat . csw . v_2_0_2 . GetCapabilitiesType ) { capabilitiesType = buildCapabilitiesType ( ) ; if ( ( request . getAcceptVersions ( ) ) != null ) { validateVersion ( request . getAcceptVersions ( ) . toString ( ) ) ; } java . util . List < java . lang . String > sectionList = null ; if ( ( request . getSections ( ) ) != null ) { sectionList = request . getSections ( ) . getSection ( ) ; } return buildCapabilitiesType ( sectionList ) ; }", "testMethod": "testGetCapabilitiesTypeNoSections ( ) { net . opengis . cat . csw . v_2_0_2 . GetCapabilitiesType gct = createDefaultGetCapabilitiesType ( ) ; gct . setSections ( null ) ; net . opengis . cat . csw . v_2_0_2 . CapabilitiesType ct = null ; try { ct = org . codice . ddf . spatial . ogc . csw . catalog . endpoint . TestCswEndpoint . csw . getCapabilities ( gct ) ; } catch ( org . codice . ddf . spatial . ogc . csw . catalog . common . CswException e ) { org . junit . Assert . fail ( ( \"CswException<sp>caught<sp>during<sp>getCapabilities<sp>GET<sp>request:<sp>\" + ( e . getMessage ( ) ) ) ) ; } \"<AssertPlaceHolder>\" ; verifyOperationsMetadata ( ct ) ; verifyServiceIdentification ( ct ) ; verifyServiceProvider ( ct ) ; verifyFilterCapabilities ( ct ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( ct )", "total": "testGetCapabilitiesTypeNoSections ( ) { net . opengis . cat . csw . v_2_0_2 . GetCapabilitiesType gct = createDefaultGetCapabilitiesType ( ) ; gct . setSections ( null ) ; net . opengis . cat . csw . v_2_0_2 . CapabilitiesType ct = null ; try { ct = org . codice . ddf . spatial . ogc . csw . catalog . endpoint . TestCswEndpoint . csw . getCapabilities ( gct ) ; } catch ( org . codice . ddf . spatial . ogc . csw . catalog . common . CswException e ) { org . junit . Assert . fail ( ( \"CswException<sp>caught<sp>during<sp>getCapabilities<sp>GET<sp>request:<sp>\" + ( e . getMessage ( ) ) ) ) ; } \"<AssertPlaceHolder>\" ; verifyOperationsMetadata ( ct ) ; verifyServiceIdentification ( ct ) ; verifyServiceProvider ( ct ) ; verifyFilterCapabilities ( ct ) ; } getCapabilities ( net . opengis . cat . csw . v_2_0_2 . GetCapabilitiesType ) { capabilitiesType = buildCapabilitiesType ( ) ; if ( ( request . getAcceptVersions ( ) ) != null ) { validateVersion ( request . getAcceptVersions ( ) . toString ( ) ) ; } java . util . List < java . lang . String > sectionList = null ; if ( ( request . getSections ( ) ) != null ) { sectionList = request . getSections ( ) . getSection ( ) ; } return buildCapabilitiesType ( sectionList ) ; }", "answer": "org . junit . Assert . assertNotNull ( ct )"}
{"focal": "getProperty ( java . lang . String ) { final boolean isCore = uk . gov . gchq . gaffer . rest . service . v2 . PropertiesServiceV2 . CORE_EXPOSED_PROPERTIES . containsKey ( propertyName ) ; boolean isExposed = isCore ; if ( ! isExposed ) { final java . lang . String propertiesList = java . lang . System . getProperty ( uk . gov . gchq . gaffer . rest . service . v2 . PropertiesServiceV2 . EXPOSED_PROPERTIES ) ; if ( null != propertiesList ) { final java . lang . String [ ] props = propertiesList . split ( \",\" ) ; isExposed = org . apache . commons . lang3 . ArrayUtils . contains ( props , propertyName ) ; } } java . lang . String prop ; if ( isExposed ) { prop = java . lang . System . getProperty ( propertyName ) ; if ( ( null == prop ) && isCore ) { prop = uk . gov . gchq . gaffer . rest . service . v2 . PropertiesServiceV2 . CORE_EXPOSED_PROPERTIES . get ( propertyName ) ; } } else { prop = null ; } final javax . ws . rs . core . Response . ResponseBuilder builder = ( null == prop ) ? javax . ws . rs . core . Response . status ( 404 ) . entity ( new uk . gov . gchq . gaffer . core . exception . Error . ErrorBuilder ( ) . status ( Status . NOT_FOUND ) . statusCode ( 404 ) . simpleMessage ( ( ( \"Property:<sp>\" + propertyName ) + \"<sp>could<sp>not<sp>be<sp>found.\" ) ) . build ( ) ) . type ( MediaType . APPLICATION_JSON_TYPE ) : javax . ws . rs . core . Response . ok ( prop ) . type ( MediaType . TEXT_PLAIN_TYPE ) ; return builder . header ( ServiceConstants . GAFFER_MEDIA_TYPE_HEADER , ServiceConstants . GAFFER_MEDIA_TYPE ) . build ( ) ; }", "testMethod": "shouldGetKorypheVersion ( ) { final javax . ws . rs . core . Response response = client . getProperty ( SystemProperty . KORYPHE_VERSION ) ; final java . lang . String propertyValue = response . readEntity ( java . lang . String . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( propertyValue )", "total": "shouldGetKorypheVersion ( ) { final javax . ws . rs . core . Response response = client . getProperty ( SystemProperty . KORYPHE_VERSION ) ; final java . lang . String propertyValue = response . readEntity ( java . lang . String . class ) ; \"<AssertPlaceHolder>\" ; } getProperty ( java . lang . String ) { final boolean isCore = uk . gov . gchq . gaffer . rest . service . v2 . PropertiesServiceV2 . CORE_EXPOSED_PROPERTIES . containsKey ( propertyName ) ; boolean isExposed = isCore ; if ( ! isExposed ) { final java . lang . String propertiesList = java . lang . System . getProperty ( uk . gov . gchq . gaffer . rest . service . v2 . PropertiesServiceV2 . EXPOSED_PROPERTIES ) ; if ( null != propertiesList ) { final java . lang . String [ ] props = propertiesList . split ( \",\" ) ; isExposed = org . apache . commons . lang3 . ArrayUtils . contains ( props , propertyName ) ; } } java . lang . String prop ; if ( isExposed ) { prop = java . lang . System . getProperty ( propertyName ) ; if ( ( null == prop ) && isCore ) { prop = uk . gov . gchq . gaffer . rest . service . v2 . PropertiesServiceV2 . CORE_EXPOSED_PROPERTIES . get ( propertyName ) ; } } else { prop = null ; } final javax . ws . rs . core . Response . ResponseBuilder builder = ( null == prop ) ? javax . ws . rs . core . Response . status ( 404 ) . entity ( new uk . gov . gchq . gaffer . core . exception . Error . ErrorBuilder ( ) . status ( Status . NOT_FOUND ) . statusCode ( 404 ) . simpleMessage ( ( ( \"Property:<sp>\" + propertyName ) + \"<sp>could<sp>not<sp>be<sp>found.\" ) ) . build ( ) ) . type ( MediaType . APPLICATION_JSON_TYPE ) : javax . ws . rs . core . Response . ok ( prop ) . type ( MediaType . TEXT_PLAIN_TYPE ) ; return builder . header ( ServiceConstants . GAFFER_MEDIA_TYPE_HEADER , ServiceConstants . GAFFER_MEDIA_TYPE ) . build ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( propertyValue )"}
{"focal": "execHttpGetString ( java . lang . String ) { return org . apache . jena . riot . web . HttpOp . execHttpGetString ( url , null ) ; }", "testMethod": "embedded_07 ( ) { org . apache . jena . sparql . core . DatasetGraph dsg = org . apache . jena . fuseki . main . TestEmbeddedFuseki . dataset ( ) ; int port = org . apache . jena . atlas . web . WebLib . choosePort ( ) ; org . apache . jena . fuseki . main . FusekiServer server = org . apache . jena . fuseki . main . FusekiServer . create ( ) . port ( port ) . add ( \"/ds0\" , dsg ) . enablePing ( true ) . build ( ) ; server . start ( ) ; java . lang . String x = org . apache . jena . riot . web . HttpOp . execHttpGetString ( ( ( \"http://localhost:\" + port ) + \"/$/ping\" ) ) ; \"<AssertPlaceHolder>\" ; server . stop ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( x )", "total": "embedded_07 ( ) { org . apache . jena . sparql . core . DatasetGraph dsg = org . apache . jena . fuseki . main . TestEmbeddedFuseki . dataset ( ) ; int port = org . apache . jena . atlas . web . WebLib . choosePort ( ) ; org . apache . jena . fuseki . main . FusekiServer server = org . apache . jena . fuseki . main . FusekiServer . create ( ) . port ( port ) . add ( \"/ds0\" , dsg ) . enablePing ( true ) . build ( ) ; server . start ( ) ; java . lang . String x = org . apache . jena . riot . web . HttpOp . execHttpGetString ( ( ( \"http://localhost:\" + port ) + \"/$/ping\" ) ) ; \"<AssertPlaceHolder>\" ; server . stop ( ) ; } execHttpGetString ( java . lang . String ) { return org . apache . jena . riot . web . HttpOp . execHttpGetString ( url , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( x )"}
{"focal": "createTrustManagerFactory ( ) { return ( getProvider ( ) ) != null ? javax . net . ssl . TrustManagerFactory . getInstance ( getAlgorithm ( ) , getProvider ( ) ) : javax . net . ssl . TrustManagerFactory . getInstance ( getAlgorithm ( ) ) ; }", "testMethod": "testExplicitAlgorithm ( ) { factoryBean . setAlgorithm ( javax . net . ssl . TrustManagerFactory . getDefaultAlgorithm ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( factoryBean . createTrustManagerFactory ( ) )", "total": "testExplicitAlgorithm ( ) { factoryBean . setAlgorithm ( javax . net . ssl . TrustManagerFactory . getDefaultAlgorithm ( ) ) ; \"<AssertPlaceHolder>\" ; } createTrustManagerFactory ( ) { return ( getProvider ( ) ) != null ? javax . net . ssl . TrustManagerFactory . getInstance ( getAlgorithm ( ) , getProvider ( ) ) : javax . net . ssl . TrustManagerFactory . getInstance ( getAlgorithm ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( factoryBean . createTrustManagerFactory ( ) )"}
{"focal": "pick ( long , java . util . concurrent . TimeUnit ) { org . apache . twill . discovery . Discoverable discoverable = pick ( ) ; if ( discoverable != null ) { return discoverable ; } final com . google . common . util . concurrent . SettableFuture < org . apache . twill . discovery . Discoverable > future = com . google . common . util . concurrent . SettableFuture . create ( ) ; org . apache . twill . common . Cancellable cancellable = serviceDiscoveredSupplier . get ( ) . watchChanges ( ( serviceDiscovered ) -> java . util . Optional . ofNullable ( pick ( serviceDiscovered ) ) . ifPresent ( future :: set ) , Threads . SAME_THREAD_EXECUTOR ) ; try { return future . get ( timeout , timeoutUnit ) ; } catch ( java . lang . Exception e ) { return null ; } finally { cancellable . cancel ( ) ; } }", "testMethod": "testProgramDiscovery ( ) { com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( new io . cdap . cdap . common . guice . ConfigModule ( io . cdap . cdap . common . guice . ZKDiscoveryModuleTest . cConf ) , new io . cdap . cdap . common . guice . ZKClientModule ( ) , new io . cdap . cdap . common . guice . ZKDiscoveryModule ( ) ) ; org . apache . twill . zookeeper . ZKClientService zkClient = injector . getInstance ( org . apache . twill . zookeeper . ZKClientService . class ) ; zkClient . startAndWait ( ) ; try { io . cdap . cdap . proto . id . ProgramId programId = NamespaceId . DEFAULT . app ( \"app\" ) . service ( \"service\" ) ; java . lang . String twillNamespace = injector . getInstance ( io . cdap . cdap . common . conf . CConfiguration . class ) . get ( Constants . CFG_TWILL_ZK_NAMESPACE ) ; org . apache . twill . zookeeper . ZKClient twillZKClient = org . apache . twill . zookeeper . ZKClients . namespace ( zkClient , ( ( twillNamespace + \"/\" ) + ( io . cdap . cdap . common . twill . TwillAppNames . toTwillAppName ( programId ) ) ) ) ; java . lang . String discoverableName = io . cdap . cdap . common . service . ServiceDiscoverable . getName ( programId ) ; try ( org . apache . twill . discovery . ZKDiscoveryService twillDiscoveryService = new org . apache . twill . discovery . ZKDiscoveryService ( twillZKClient ) ) { java . net . InetSocketAddress socketAddr = new java . net . InetSocketAddress ( java . net . InetAddress . getLoopbackAddress ( ) , 43210 ) ; org . apache . twill . common . Cancellable cancellable = twillDiscoveryService . register ( new org . apache . twill . discovery . Discoverable ( discoverableName , socketAddr ) ) ; try { org . apache . twill . discovery . DiscoveryServiceClient discoveryServiceClient = injector . getInstance ( org . apache . twill . discovery . DiscoveryServiceClient . class ) ; org . apache . twill . discovery . Discoverable discoverable = new io . cdap . cdap . common . discovery . RandomEndpointStrategy ( ( ) -> discoveryServiceClient . discover ( discoverableName ) ) . pick ( 10 , TimeUnit . SECONDS ) ; \"<AssertPlaceHolder>\" ; } finally { cancellable . cancel ( ) ; } } } finally { zkClient . stopAndWait ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( discoverable )", "total": "testProgramDiscovery ( ) { com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( new io . cdap . cdap . common . guice . ConfigModule ( io . cdap . cdap . common . guice . ZKDiscoveryModuleTest . cConf ) , new io . cdap . cdap . common . guice . ZKClientModule ( ) , new io . cdap . cdap . common . guice . ZKDiscoveryModule ( ) ) ; org . apache . twill . zookeeper . ZKClientService zkClient = injector . getInstance ( org . apache . twill . zookeeper . ZKClientService . class ) ; zkClient . startAndWait ( ) ; try { io . cdap . cdap . proto . id . ProgramId programId = NamespaceId . DEFAULT . app ( \"app\" ) . service ( \"service\" ) ; java . lang . String twillNamespace = injector . getInstance ( io . cdap . cdap . common . conf . CConfiguration . class ) . get ( Constants . CFG_TWILL_ZK_NAMESPACE ) ; org . apache . twill . zookeeper . ZKClient twillZKClient = org . apache . twill . zookeeper . ZKClients . namespace ( zkClient , ( ( twillNamespace + \"/\" ) + ( io . cdap . cdap . common . twill . TwillAppNames . toTwillAppName ( programId ) ) ) ) ; java . lang . String discoverableName = io . cdap . cdap . common . service . ServiceDiscoverable . getName ( programId ) ; try ( org . apache . twill . discovery . ZKDiscoveryService twillDiscoveryService = new org . apache . twill . discovery . ZKDiscoveryService ( twillZKClient ) ) { java . net . InetSocketAddress socketAddr = new java . net . InetSocketAddress ( java . net . InetAddress . getLoopbackAddress ( ) , 43210 ) ; org . apache . twill . common . Cancellable cancellable = twillDiscoveryService . register ( new org . apache . twill . discovery . Discoverable ( discoverableName , socketAddr ) ) ; try { org . apache . twill . discovery . DiscoveryServiceClient discoveryServiceClient = injector . getInstance ( org . apache . twill . discovery . DiscoveryServiceClient . class ) ; org . apache . twill . discovery . Discoverable discoverable = new io . cdap . cdap . common . discovery . RandomEndpointStrategy ( ( ) -> discoveryServiceClient . discover ( discoverableName ) ) . pick ( 10 , TimeUnit . SECONDS ) ; \"<AssertPlaceHolder>\" ; } finally { cancellable . cancel ( ) ; } } } finally { zkClient . stopAndWait ( ) ; } } pick ( long , java . util . concurrent . TimeUnit ) { org . apache . twill . discovery . Discoverable discoverable = pick ( ) ; if ( discoverable != null ) { return discoverable ; } final com . google . common . util . concurrent . SettableFuture < org . apache . twill . discovery . Discoverable > future = com . google . common . util . concurrent . SettableFuture . create ( ) ; org . apache . twill . common . Cancellable cancellable = serviceDiscoveredSupplier . get ( ) . watchChanges ( ( serviceDiscovered ) -> java . util . Optional . ofNullable ( pick ( serviceDiscovered ) ) . ifPresent ( future :: set ) , Threads . SAME_THREAD_EXECUTOR ) ; try { return future . get ( timeout , timeoutUnit ) ; } catch ( java . lang . Exception e ) { return null ; } finally { cancellable . cancel ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( discoverable )"}
{"focal": "loadSchemaTypes ( java . lang . String , com . eviware . soapui . impl . wsdl . support . xsd . SchemaLoader ) { com . eviware . soapui . SoapUIExtensionClassLoader . SoapUIClassLoaderState state = com . eviware . soapui . SoapUIExtensionClassLoader . ensure ( ) ; try { com . eviware . soapui . impl . wsdl . support . xsd . SchemaUtils . log . info ( ( ( \"Loading<sp>schema<sp>types<sp>from<sp>[\" + wsdlUrl ) + \"]\" ) ) ; java . util . ArrayList < org . apache . xmlbeans . XmlObject > schemas = new java . util . ArrayList < org . apache . xmlbeans . XmlObject > ( com . eviware . soapui . impl . wsdl . support . xsd . SchemaUtils . getSchemas ( wsdlUrl , loader ) . values ( ) ) ; return com . eviware . soapui . impl . wsdl . support . xsd . SchemaUtils . buildSchemaTypes ( schemas ) ; } catch ( java . lang . Exception e ) { com . eviware . soapui . SoapUI . logError ( e ) ; if ( e instanceof com . eviware . soapui . impl . wsdl . support . xsd . SchemaException ) { throw ( ( com . eviware . soapui . impl . wsdl . support . xsd . SchemaException ) ( e ) ) ; } else { throw new com . eviware . soapui . impl . wsdl . support . xsd . SchemaException ( \"Error<sp>loading<sp>schema<sp>types\" , e ) ; } } finally { state . restore ( ) ; } }", "testMethod": "testLoadNS ( ) { com . eviware . soapui . SoapUI . initDefaultCore ( ) ; java . lang . String wsdlUriString = com . eviware . soapui . impl . wsdl . support . SchemaUtilsDefaultNSTest . class . getResource ( \"/chameleon/chameleon.wsdl\" ) . toString ( ) ; org . apache . xmlbeans . SchemaTypeSystem sts = com . eviware . soapui . impl . wsdl . support . xsd . SchemaUtils . loadSchemaTypes ( wsdlUriString , new com . eviware . soapui . impl . wsdl . support . wsdl . UrlWsdlLoader ( wsdlUriString ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( sts )", "total": "testLoadNS ( ) { com . eviware . soapui . SoapUI . initDefaultCore ( ) ; java . lang . String wsdlUriString = com . eviware . soapui . impl . wsdl . support . SchemaUtilsDefaultNSTest . class . getResource ( \"/chameleon/chameleon.wsdl\" ) . toString ( ) ; org . apache . xmlbeans . SchemaTypeSystem sts = com . eviware . soapui . impl . wsdl . support . xsd . SchemaUtils . loadSchemaTypes ( wsdlUriString , new com . eviware . soapui . impl . wsdl . support . wsdl . UrlWsdlLoader ( wsdlUriString ) ) ; \"<AssertPlaceHolder>\" ; } loadSchemaTypes ( java . lang . String , com . eviware . soapui . impl . wsdl . support . xsd . SchemaLoader ) { com . eviware . soapui . SoapUIExtensionClassLoader . SoapUIClassLoaderState state = com . eviware . soapui . SoapUIExtensionClassLoader . ensure ( ) ; try { com . eviware . soapui . impl . wsdl . support . xsd . SchemaUtils . log . info ( ( ( \"Loading<sp>schema<sp>types<sp>from<sp>[\" + wsdlUrl ) + \"]\" ) ) ; java . util . ArrayList < org . apache . xmlbeans . XmlObject > schemas = new java . util . ArrayList < org . apache . xmlbeans . XmlObject > ( com . eviware . soapui . impl . wsdl . support . xsd . SchemaUtils . getSchemas ( wsdlUrl , loader ) . values ( ) ) ; return com . eviware . soapui . impl . wsdl . support . xsd . SchemaUtils . buildSchemaTypes ( schemas ) ; } catch ( java . lang . Exception e ) { com . eviware . soapui . SoapUI . logError ( e ) ; if ( e instanceof com . eviware . soapui . impl . wsdl . support . xsd . SchemaException ) { throw ( ( com . eviware . soapui . impl . wsdl . support . xsd . SchemaException ) ( e ) ) ; } else { throw new com . eviware . soapui . impl . wsdl . support . xsd . SchemaException ( \"Error<sp>loading<sp>schema<sp>types\" , e ) ; } } finally { state . restore ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( sts )"}
{"focal": "build ( ) { if ( isBuilt ) { throw new java . lang . IllegalStateException ( \"cannot<sp>build<sp>more<sp>than<sp>once.<sp>All<sp>objects<sp>are<sp>use-once\" ) ; } isBuilt = true ; return com . oracle . adbaoverjdbc . DataSource . newDataSource ( defaultSessionProperties , requiredSessionProperties ) ; }", "testMethod": "sqlOperation ( ) { java . util . Properties props = new java . util . Properties ( ) ; jdk . incubator . sql2 . DataSourceFactory factory = jdk . incubator . sql2 . DataSourceFactory . newFactory ( com . oracle . adbaoverjdbc . test . FirstLight . FACTORY_NAME ) ; jdk . incubator . sql2 . DataSource ds = factory . builder ( ) . url ( com . oracle . adbaoverjdbc . test . FirstLight . URL ) . username ( com . oracle . adbaoverjdbc . test . FirstLight . USER ) . password ( com . oracle . adbaoverjdbc . test . FirstLight . PASSWORD ) . sessionProperty ( com . oracle . adbaoverjdbc . JdbcConnectionProperties . JDBC_CONNECTION_PROPERTIES , props ) . build ( ) ; jdk . incubator . sql2 . Session session = ds . getSession ( ( t ) -> System . out . println ( ( \"ERROR:<sp>\" + ( t . getMessage ( ) ) ) ) ) ; try { \"<AssertPlaceHolder>\" ; session . operation ( com . oracle . adbaoverjdbc . test . FirstLight . TRIVIAL ) . submit ( ) ; } java . util . concurrent . ForkJoinPool . commonPool ( ) . awaitQuiescence ( 1 , TimeUnit . MINUTES ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( session )", "total": "sqlOperation ( ) { java . util . Properties props = new java . util . Properties ( ) ; jdk . incubator . sql2 . DataSourceFactory factory = jdk . incubator . sql2 . DataSourceFactory . newFactory ( com . oracle . adbaoverjdbc . test . FirstLight . FACTORY_NAME ) ; jdk . incubator . sql2 . DataSource ds = factory . builder ( ) . url ( com . oracle . adbaoverjdbc . test . FirstLight . URL ) . username ( com . oracle . adbaoverjdbc . test . FirstLight . USER ) . password ( com . oracle . adbaoverjdbc . test . FirstLight . PASSWORD ) . sessionProperty ( com . oracle . adbaoverjdbc . JdbcConnectionProperties . JDBC_CONNECTION_PROPERTIES , props ) . build ( ) ; jdk . incubator . sql2 . Session session = ds . getSession ( ( t ) -> System . out . println ( ( \"ERROR:<sp>\" + ( t . getMessage ( ) ) ) ) ) ; try { \"<AssertPlaceHolder>\" ; session . operation ( com . oracle . adbaoverjdbc . test . FirstLight . TRIVIAL ) . submit ( ) ; } java . util . concurrent . ForkJoinPool . commonPool ( ) . awaitQuiescence ( 1 , TimeUnit . MINUTES ) ; } build ( ) { if ( isBuilt ) { throw new java . lang . IllegalStateException ( \"cannot<sp>build<sp>more<sp>than<sp>once.<sp>All<sp>objects<sp>are<sp>use-once\" ) ; } isBuilt = true ; return com . oracle . adbaoverjdbc . DataSource . newDataSource ( defaultSessionProperties , requiredSessionProperties ) ; }", "answer": "org . junit . Assert . assertNotNull ( session )"}
{"focal": "getOverlap ( long , long ) { if ( end < start ) { throw new java . lang . IllegalArgumentException ( ( ( ( \"end<sp>is<sp>less<sp>than<sp>start:<sp>\" + end ) + \"<sp>start:<sp>\" ) + start ) ) ; } for ( T cur : scheduledObservations . values ( ) ) { if ( ( ( cur . getStartTimeMillis ( ) ) < start ) && ( start < ( cur . getEndTimeMillis ( ) ) ) ) { return cur ; } if ( ( ( cur . getStartTimeMillis ( ) ) < end ) && ( end < ( cur . getEndTimeMillis ( ) ) ) ) { return cur ; } } return null ; }", "testMethod": "testFullOverlap ( ) { ru . r2cloud . DefaultScheduleEntry entry = ru . r2cloud . satellite . ScheduleTest . create ( ) ; entry . setStartTimeMillis ( 0 ) ; entry . setEndTimeMillis ( 4 ) ; schedule . add ( entry ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( schedule . getOverlap ( 1 , 3 ) )", "total": "testFullOverlap ( ) { ru . r2cloud . DefaultScheduleEntry entry = ru . r2cloud . satellite . ScheduleTest . create ( ) ; entry . setStartTimeMillis ( 0 ) ; entry . setEndTimeMillis ( 4 ) ; schedule . add ( entry ) ; \"<AssertPlaceHolder>\" ; } getOverlap ( long , long ) { if ( end < start ) { throw new java . lang . IllegalArgumentException ( ( ( ( \"end<sp>is<sp>less<sp>than<sp>start:<sp>\" + end ) + \"<sp>start:<sp>\" ) + start ) ) ; } for ( T cur : scheduledObservations . values ( ) ) { if ( ( ( cur . getStartTimeMillis ( ) ) < start ) && ( start < ( cur . getEndTimeMillis ( ) ) ) ) { return cur ; } if ( ( ( cur . getStartTimeMillis ( ) ) < end ) && ( end < ( cur . getEndTimeMillis ( ) ) ) ) { return cur ; } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( schedule . getOverlap ( 1 , 3 ) )"}
{"focal": "onFlushDirty ( java . lang . Object , java . io . Serializable , java . lang . Object [ ] , java . lang . Object [ ] , java . lang . String [ ] , org . hibernate . type . Type [ ] ) { return removeMillisecondsFromDateFields ( currentState ) ; }", "testMethod": "onFlushDirty_shouldAddPersonDateChangedForPerson ( ) { org . openmrs . api . db . hibernate . AuditableInterceptor interceptor = new org . openmrs . api . db . hibernate . AuditableInterceptor ( ) ; org . openmrs . Person person = new org . openmrs . Person ( ) ; java . lang . String [ ] propertyNames = new java . lang . String [ ] { \"personDateChanged\" } ; java . lang . Object [ ] currentState = new java . lang . Object [ ] { null } ; interceptor . onFlushDirty ( person , null , currentState , null , propertyNames , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( currentState [ 0 ] )", "total": "onFlushDirty_shouldAddPersonDateChangedForPerson ( ) { org . openmrs . api . db . hibernate . AuditableInterceptor interceptor = new org . openmrs . api . db . hibernate . AuditableInterceptor ( ) ; org . openmrs . Person person = new org . openmrs . Person ( ) ; java . lang . String [ ] propertyNames = new java . lang . String [ ] { \"personDateChanged\" } ; java . lang . Object [ ] currentState = new java . lang . Object [ ] { null } ; interceptor . onFlushDirty ( person , null , currentState , null , propertyNames , null ) ; \"<AssertPlaceHolder>\" ; } onFlushDirty ( java . lang . Object , java . io . Serializable , java . lang . Object [ ] , java . lang . Object [ ] , java . lang . String [ ] , org . hibernate . type . Type [ ] ) { return removeMillisecondsFromDateFields ( currentState ) ; }", "answer": "org . junit . Assert . assertNotNull ( currentState [ 0 ] )"}
{"focal": "verwerkBericht ( nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterVerzoekBericht ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType type = new nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType ( ) ; type . setGemeenteRegister ( new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteRegisterType ( ) ) ; final java . util . List < nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType > gemeentenList = type . getGemeenteRegister ( ) . getGemeente ( ) ; for ( final nl . bzk . migratiebrp . synchronisatie . dal . domein . brp . kern . entity . Gemeente gemeente : brpDalService . geefAlleGemeenten ( ) ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType gemeenteType = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; gemeenteType . setGemeenteCode ( asGemeenteCode ( gemeente . getCode ( ) ) ) ; gemeenteType . setPartijCode ( asPartijCode ( gemeente . getPartij ( ) . getCode ( ) ) ) ; if ( ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) ) != null ) { gemeenteType . setDatumBrp ( java . math . BigInteger . valueOf ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) . longValue ( ) ) ) ; } gemeentenList . add ( gemeenteType ) ; } final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType rni = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; rni . setGemeenteCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_GEMEENTE_CODE ) ; rni . setPartijCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_PARTIJ_CODE ) ; gemeentenList . add ( rni ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht antwoord = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht ( type ) ; antwoord . setStatus ( StatusType . OK ) ; antwoord . setMessageId ( nl . bzk . migratiebrp . synchronisatie . runtime . util . MessageId . generateSyncMessageId ( ) ) ; antwoord . setCorrelationId ( verzoek . getMessageId ( ) ) ; return antwoord ; }", "testMethod": "testVerwerkLeesUitBrpVerzoekFout ( ) { when ( persoonslijstService . bevraagPersoonslijst ( nl . bzk . migratiebrp . synchronisatie . runtime . service . LeesUitBrpServiceTest . ANUMMER ) ) . thenThrow ( new java . lang . RuntimeException ( nl . bzk . migratiebrp . synchronisatie . runtime . service . LeesUitBrpServiceTest . TEST_DATABASE_FOUT ) ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesUitBrpVerzoekBericht leesUitBrpVerzoekBericht = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesUitBrpVerzoekBericht ( nl . bzk . migratiebrp . synchronisatie . runtime . service . LeesUitBrpServiceTest . ANUMMER ) ; leesUitBrpVerzoekBericht . setMessageId ( java . util . UUID . randomUUID ( ) . toString ( ) ) ; try { leesUitBrpService . verwerkBericht ( leesUitBrpVerzoekBericht ) ; org . junit . Assert . fail ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; } verify ( converteerBrpNaarLo3Service , never ( ) ) . converteerBrpPersoonslijst ( nl . bzk . migratiebrp . synchronisatie . runtime . service . LeesUitBrpServiceTest . DUMMY_BRP_PL ) ; verify ( persoonslijstService , times ( 1 ) ) . bevraagPersoonslijst ( nl . bzk . migratiebrp . synchronisatie . runtime . service . LeesUitBrpServiceTest . ANUMMER ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" , e )", "total": "testVerwerkLeesUitBrpVerzoekFout ( ) { when ( persoonslijstService . bevraagPersoonslijst ( nl . bzk . migratiebrp . synchronisatie . runtime . service . LeesUitBrpServiceTest . ANUMMER ) ) . thenThrow ( new java . lang . RuntimeException ( nl . bzk . migratiebrp . synchronisatie . runtime . service . LeesUitBrpServiceTest . TEST_DATABASE_FOUT ) ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesUitBrpVerzoekBericht leesUitBrpVerzoekBericht = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesUitBrpVerzoekBericht ( nl . bzk . migratiebrp . synchronisatie . runtime . service . LeesUitBrpServiceTest . ANUMMER ) ; leesUitBrpVerzoekBericht . setMessageId ( java . util . UUID . randomUUID ( ) . toString ( ) ) ; try { leesUitBrpService . verwerkBericht ( leesUitBrpVerzoekBericht ) ; org . junit . Assert . fail ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; } verify ( converteerBrpNaarLo3Service , never ( ) ) . converteerBrpPersoonslijst ( nl . bzk . migratiebrp . synchronisatie . runtime . service . LeesUitBrpServiceTest . DUMMY_BRP_PL ) ; verify ( persoonslijstService , times ( 1 ) ) . bevraagPersoonslijst ( nl . bzk . migratiebrp . synchronisatie . runtime . service . LeesUitBrpServiceTest . ANUMMER ) ; } verwerkBericht ( nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterVerzoekBericht ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType type = new nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType ( ) ; type . setGemeenteRegister ( new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteRegisterType ( ) ) ; final java . util . List < nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType > gemeentenList = type . getGemeenteRegister ( ) . getGemeente ( ) ; for ( final nl . bzk . migratiebrp . synchronisatie . dal . domein . brp . kern . entity . Gemeente gemeente : brpDalService . geefAlleGemeenten ( ) ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType gemeenteType = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; gemeenteType . setGemeenteCode ( asGemeenteCode ( gemeente . getCode ( ) ) ) ; gemeenteType . setPartijCode ( asPartijCode ( gemeente . getPartij ( ) . getCode ( ) ) ) ; if ( ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) ) != null ) { gemeenteType . setDatumBrp ( java . math . BigInteger . valueOf ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) . longValue ( ) ) ) ; } gemeentenList . add ( gemeenteType ) ; } final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType rni = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; rni . setGemeenteCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_GEMEENTE_CODE ) ; rni . setPartijCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_PARTIJ_CODE ) ; gemeentenList . add ( rni ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht antwoord = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht ( type ) ; antwoord . setStatus ( StatusType . OK ) ; antwoord . setMessageId ( nl . bzk . migratiebrp . synchronisatie . runtime . util . MessageId . generateSyncMessageId ( ) ) ; antwoord . setCorrelationId ( verzoek . getMessageId ( ) ) ; return antwoord ; }", "answer": "org . junit . Assert . assertNotNull ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" , e )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testEdita ( ) { log . debug ( \"Test<sp>'edita'\" ) ; mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; mx . edu . um . mateo . rh . model . Categoria categoria = new mx . edu . um . mateo . rh . model . Categoria ( ) ; categoria . setNombre ( \"Test\" ) ; categoria . setStatus ( \"A\" ) ; categoriaDao . graba ( categoria , usuario ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . PATH_CATEGORIA_EDITA ) + \"/\" ) + ( categoria . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_CATEGORIA_EDITA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_CATEGORIA ) ) . andExpect ( model ( ) . attribute ( Constantes . ADDATTRIBUTE_CATEGORIA , categoria ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( categoria . getId ( ) )", "total": "testEdita ( ) { log . debug ( \"Test<sp>'edita'\" ) ; mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; mx . edu . um . mateo . rh . model . Categoria categoria = new mx . edu . um . mateo . rh . model . Categoria ( ) ; categoria . setNombre ( \"Test\" ) ; categoria . setStatus ( \"A\" ) ; categoriaDao . graba ( categoria , usuario ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . PATH_CATEGORIA_EDITA ) + \"/\" ) + ( categoria . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_CATEGORIA_EDITA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_CATEGORIA ) ) . andExpect ( model ( ) . attribute ( Constantes . ADDATTRIBUTE_CATEGORIA , categoria ) ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( categoria . getId ( ) )"}
{"focal": "getFeatures ( ) { return features ; }", "testMethod": "testSearchSync ( ) { try { java . util . HashMap < java . lang . String , java . lang . String [ ] > params = new java . util . HashMap < java . lang . String , java . lang . String [ ] > ( ) ; params . put ( \"limit\" , new java . lang . String [ ] { \"10\" } ) ; java . lang . String jsonString = com . simplegeo . client . SimpleGeoStorageClientTest . client . search ( 37.761809 , ( - 122.422832 ) , \"casey.testing.layer\" , params ) ; com . simplegeo . client . types . FeatureCollection featureCollection = com . simplegeo . client . types . FeatureCollection . fromJSONString ( jsonString ) ; \"<AssertPlaceHolder>\" ; } catch ( java . io . IOException e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } catch ( org . json . JSONException e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( featureCollection . getFeatures ( ) )", "total": "testSearchSync ( ) { try { java . util . HashMap < java . lang . String , java . lang . String [ ] > params = new java . util . HashMap < java . lang . String , java . lang . String [ ] > ( ) ; params . put ( \"limit\" , new java . lang . String [ ] { \"10\" } ) ; java . lang . String jsonString = com . simplegeo . client . SimpleGeoStorageClientTest . client . search ( 37.761809 , ( - 122.422832 ) , \"casey.testing.layer\" , params ) ; com . simplegeo . client . types . FeatureCollection featureCollection = com . simplegeo . client . types . FeatureCollection . fromJSONString ( jsonString ) ; \"<AssertPlaceHolder>\" ; } catch ( java . io . IOException e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } catch ( org . json . JSONException e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } } getFeatures ( ) { return features ; }", "answer": "org . junit . Assert . assertNotNull ( featureCollection . getFeatures ( ) )"}
{"focal": "getFacet ( java . lang . Class ) { final org . apache . isis . core . metamodel . facetapi . FacetHolder facetHolder = getAction ( ) ; return facetHolder . getFacet ( facetType ) ; }", "testMethod": "testPluralFaced ( ) { final org . apache . isis . core . metamodel . facetapi . Facet facet = specification . getFacet ( org . apache . isis . core . metamodel . facets . object . plural . PluralFacet . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( facet )", "total": "testPluralFaced ( ) { final org . apache . isis . core . metamodel . facetapi . Facet facet = specification . getFacet ( org . apache . isis . core . metamodel . facets . object . plural . PluralFacet . class ) ; \"<AssertPlaceHolder>\" ; } getFacet ( java . lang . Class ) { final org . apache . isis . core . metamodel . facetapi . FacetHolder facetHolder = getAction ( ) ; return facetHolder . getFacet ( facetType ) ; }", "answer": "org . junit . Assert . assertNotNull ( facet )"}
{"focal": "getProvider ( java . lang . String ) { javax . ws . rs . client . WebTarget target = client . target ( ( ( ( ( ( restUrl ) + \"/\" ) + ( org . theeuropeanlibrary . repox . rest . pathOptions . ProviderOptionListContainer . PROVIDERS ) ) + \"/\" ) + providerId ) ) ; javax . ws . rs . core . Response response = target . request ( MediaType . APPLICATION_JSON ) . get ( ) ; if ( ( response . getStatus ( ) ) == 404 ) { org . theeuropeanlibrary . repox . rest . pathOptions . Result errorMessage = response . readEntity ( org . theeuropeanlibrary . repox . rest . pathOptions . Result . class ) ; eu . europeana . repox . rest . client . accessors . ProvidersAccessor . LOGGER . warn ( ( \"getProvider(..)<sp>failure!<sp>:<sp>\" + ( errorMessage . getResult ( ) ) ) ) ; throw new pt . utl . ist . util . exceptions . DoesNotExistException ( errorMessage . getResult ( ) ) ; } pt . utl . ist . dataProvider . DataProvider provider = response . readEntity ( pt . utl . ist . dataProvider . DataProvider . class ) ; eu . europeana . repox . rest . client . accessors . ProvidersAccessor . LOGGER . info ( \"getProvider(..)<sp>success!\" ) ; return provider ; }", "testMethod": "testGetProvider ( ) { org . mockito . Mockito . when ( eu . europeana . repox . rest . client . accessors . ProvidersAccessorTest . response . getStatus ( ) ) . thenReturn ( 200 ) ; org . mockito . Mockito . when ( eu . europeana . repox . rest . client . accessors . ProvidersAccessorTest . response . readEntity ( pt . utl . ist . dataProvider . DataProvider . class ) ) . thenReturn ( new pt . utl . ist . dataProvider . DataProvider ( ) ) ; pt . utl . ist . dataProvider . DataProvider dataProvider = eu . europeana . repox . rest . client . accessors . ProvidersAccessorTest . pa . getProvider ( \"Pr0\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dataProvider )", "total": "testGetProvider ( ) { org . mockito . Mockito . when ( eu . europeana . repox . rest . client . accessors . ProvidersAccessorTest . response . getStatus ( ) ) . thenReturn ( 200 ) ; org . mockito . Mockito . when ( eu . europeana . repox . rest . client . accessors . ProvidersAccessorTest . response . readEntity ( pt . utl . ist . dataProvider . DataProvider . class ) ) . thenReturn ( new pt . utl . ist . dataProvider . DataProvider ( ) ) ; pt . utl . ist . dataProvider . DataProvider dataProvider = eu . europeana . repox . rest . client . accessors . ProvidersAccessorTest . pa . getProvider ( \"Pr0\" ) ; \"<AssertPlaceHolder>\" ; } getProvider ( java . lang . String ) { javax . ws . rs . client . WebTarget target = client . target ( ( ( ( ( ( restUrl ) + \"/\" ) + ( org . theeuropeanlibrary . repox . rest . pathOptions . ProviderOptionListContainer . PROVIDERS ) ) + \"/\" ) + providerId ) ) ; javax . ws . rs . core . Response response = target . request ( MediaType . APPLICATION_JSON ) . get ( ) ; if ( ( response . getStatus ( ) ) == 404 ) { org . theeuropeanlibrary . repox . rest . pathOptions . Result errorMessage = response . readEntity ( org . theeuropeanlibrary . repox . rest . pathOptions . Result . class ) ; eu . europeana . repox . rest . client . accessors . ProvidersAccessor . LOGGER . warn ( ( \"getProvider(..)<sp>failure!<sp>:<sp>\" + ( errorMessage . getResult ( ) ) ) ) ; throw new pt . utl . ist . util . exceptions . DoesNotExistException ( errorMessage . getResult ( ) ) ; } pt . utl . ist . dataProvider . DataProvider provider = response . readEntity ( pt . utl . ist . dataProvider . DataProvider . class ) ; eu . europeana . repox . rest . client . accessors . ProvidersAccessor . LOGGER . info ( \"getProvider(..)<sp>success!\" ) ; return provider ; }", "answer": "org . junit . Assert . assertNotNull ( dataProvider )"}
{"focal": "fail ( java . lang . Throwable ) { super . setException ( failure ) ; }", "testMethod": "testFailOnCorruptedZip ( ) { io . fabric8 . api . FabricService mockFabricService = org . mockito . Mockito . mock ( io . fabric8 . api . FabricService . class ) ; when ( mockFabricService . getMavenRepoUploadURI ( ) ) . thenReturn ( new java . net . URI ( \"http://dummy\" ) ) ; io . fabric8 . service . PatchServiceImpl patchService = new io . fabric8 . service . PatchServiceImpl ( mockFabricService ) ; io . fabric8 . api . Version version = org . mockito . Mockito . mock ( io . fabric8 . api . Version . class ) ; java . net . URL url = getClass ( ) . getClassLoader ( ) . getResource ( \"corrupted_archive.zip\" ) ; try { patchService . applyPatch ( version , url , \"not_relevant\" , \"not_relevant\" ) ; org . junit . Assert . fail ( \"Expected<sp>PatchException<sp>has<sp>not<sp>been<sp>triggered.\" ) ; } catch ( io . fabric8 . api . PatchException e ) { \"<AssertPlaceHolder>\" ; e . printStackTrace ( ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( ( \"Note<sp>the<sp>expected<sp>exception:<sp>\" + e ) ) ; e . printStackTrace ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e )", "total": "testFailOnCorruptedZip ( ) { io . fabric8 . api . FabricService mockFabricService = org . mockito . Mockito . mock ( io . fabric8 . api . FabricService . class ) ; when ( mockFabricService . getMavenRepoUploadURI ( ) ) . thenReturn ( new java . net . URI ( \"http://dummy\" ) ) ; io . fabric8 . service . PatchServiceImpl patchService = new io . fabric8 . service . PatchServiceImpl ( mockFabricService ) ; io . fabric8 . api . Version version = org . mockito . Mockito . mock ( io . fabric8 . api . Version . class ) ; java . net . URL url = getClass ( ) . getClassLoader ( ) . getResource ( \"corrupted_archive.zip\" ) ; try { patchService . applyPatch ( version , url , \"not_relevant\" , \"not_relevant\" ) ; org . junit . Assert . fail ( \"Expected<sp>PatchException<sp>has<sp>not<sp>been<sp>triggered.\" ) ; } catch ( io . fabric8 . api . PatchException e ) { \"<AssertPlaceHolder>\" ; e . printStackTrace ( ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( ( \"Note<sp>the<sp>expected<sp>exception:<sp>\" + e ) ) ; e . printStackTrace ( ) ; } } fail ( java . lang . Throwable ) { super . setException ( failure ) ; }", "answer": "org . junit . Assert . assertNotNull ( e )"}
{"focal": "getInstance ( ) { return org . owasp . dependencycheck . data . cpe . CpeMemoryIndex . INSTANCE ; }", "testMethod": "testGetInstance ( ) { org . owasp . dependencycheck . data . cpe . CpeMemoryIndex result = org . owasp . dependencycheck . data . cpe . CpeMemoryIndex . getInstance ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetInstance ( ) { org . owasp . dependencycheck . data . cpe . CpeMemoryIndex result = org . owasp . dependencycheck . data . cpe . CpeMemoryIndex . getInstance ( ) ; \"<AssertPlaceHolder>\" ; } getInstance ( ) { return org . owasp . dependencycheck . data . cpe . CpeMemoryIndex . INSTANCE ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "create ( ) { return this . create ( null , null , null , null ) ; }", "testMethod": "firstTest ( ) { com . microsoft . azure . management . dns . v2017_10_01 . NetworkTest . rgName = com . microsoft . azure . arm . utils . SdkContext . randomResourceName ( \"rg\" , 20 ) ; com . microsoft . azure . management . resources . ResourceGroup group = com . microsoft . azure . management . dns . v2017_10_01 . NetworkTest . resourceManager . resourceGroups ( ) . define ( com . microsoft . azure . management . dns . v2017_10_01 . NetworkTest . rgName ) . withRegion ( Region . US_WEST . toString ( ) ) . create ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( group )", "total": "firstTest ( ) { com . microsoft . azure . management . dns . v2017_10_01 . NetworkTest . rgName = com . microsoft . azure . arm . utils . SdkContext . randomResourceName ( \"rg\" , 20 ) ; com . microsoft . azure . management . resources . ResourceGroup group = com . microsoft . azure . management . dns . v2017_10_01 . NetworkTest . resourceManager . resourceGroups ( ) . define ( com . microsoft . azure . management . dns . v2017_10_01 . NetworkTest . rgName ) . withRegion ( Region . US_WEST . toString ( ) ) . create ( ) ; \"<AssertPlaceHolder>\" ; } create ( ) { return this . create ( null , null , null , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( group )"}
{"focal": "getCoreSession ( ) { org . nuxeo . ecm . core . api . CoreSession coreSession ; java . util . Map < java . lang . String , java . io . Serializable > props = getProperties ( ) ; coreSession = ( ( org . nuxeo . ecm . core . api . CoreSession ) ( props . get ( org . nuxeo . ecm . platform . query . nxql . CoreQueryAndFetchPageProvider . CORE_SESSION_PROPERTY ) ) ) ; return coreSession ; }", "testMethod": "testAcquireThroughSessionId ( ) { org . nuxeo . ecm . core . api . DocumentModel file = session . createDocumentModel ( \"/\" , \"file\" , \"File\" ) ; file = session . createDocument ( file ) ; session . save ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( file . getCoreSession ( ) )", "total": "testAcquireThroughSessionId ( ) { org . nuxeo . ecm . core . api . DocumentModel file = session . createDocumentModel ( \"/\" , \"file\" , \"File\" ) ; file = session . createDocument ( file ) ; session . save ( ) ; \"<AssertPlaceHolder>\" ; } getCoreSession ( ) { org . nuxeo . ecm . core . api . CoreSession coreSession ; java . util . Map < java . lang . String , java . io . Serializable > props = getProperties ( ) ; coreSession = ( ( org . nuxeo . ecm . core . api . CoreSession ) ( props . get ( org . nuxeo . ecm . platform . query . nxql . CoreQueryAndFetchPageProvider . CORE_SESSION_PROPERTY ) ) ) ; return coreSession ; }", "answer": "org . junit . Assert . assertNotNull ( file . getCoreSession ( ) )"}
{"focal": "getRolePolicy ( java . lang . String ) { java . lang . String resource = com . aliyun . odps . rest . ResourceBuilder . buildRoleResource ( project , roleName ) ; java . util . Map < java . lang . String , java . lang . String > params = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; params . put ( \"policy\" , null ) ; com . aliyun . odps . commons . transport . Response response = client . request ( resource , \"GET\" , params , null , null ) ; try { return new java . lang . String ( response . getBody ( ) , \"UTF-8\" ) ; } catch ( java . io . UnsupportedEncodingException e ) { throw new com . aliyun . odps . OdpsException ( \"Can't<sp>parse<sp>response!\" , e ) ; } }", "testMethod": "testGetRolePolicy ( ) { java . lang . String result = sm . getRolePolicy ( \"admin\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetRolePolicy ( ) { java . lang . String result = sm . getRolePolicy ( \"admin\" ) ; \"<AssertPlaceHolder>\" ; } getRolePolicy ( java . lang . String ) { java . lang . String resource = com . aliyun . odps . rest . ResourceBuilder . buildRoleResource ( project , roleName ) ; java . util . Map < java . lang . String , java . lang . String > params = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; params . put ( \"policy\" , null ) ; com . aliyun . odps . commons . transport . Response response = client . request ( resource , \"GET\" , params , null , null ) ; try { return new java . lang . String ( response . getBody ( ) , \"UTF-8\" ) ; } catch ( java . io . UnsupportedEncodingException e ) { throw new com . aliyun . odps . OdpsException ( \"Can't<sp>parse<sp>response!\" , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "isValidCurrentCheckpoint ( java . lang . Object , java . util . Map ) { final java . lang . String datePattern = getDatePattern ( context ) ; final java . lang . String lastCheckpoint = context . get ( \"lastCheckpoint\" ) ; int isValid = 0 ; try { final java . util . Date lastCheckpointAsDate = new java . text . SimpleDateFormat ( datePattern ) . parse ( lastCheckpoint ) ; final java . util . Date currentCheckpointAsDate = new java . text . SimpleDateFormat ( datePattern ) . parse ( ( ( java . lang . String ) ( currentCheckpoint ) ) ) ; isValid = currentCheckpointAsDate . compareTo ( lastCheckpointAsDate ) ; } catch ( java . text . ParseException e ) { e . printStackTrace ( ) ; } return isValid > 0 ; }", "testMethod": "testIsValidCurrentCheckpoint ( ) { java . lang . Boolean filter = dateCheckpointType . isValidCurrentCheckpoint ( currentCheckPoint , context ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( filter )", "total": "testIsValidCurrentCheckpoint ( ) { java . lang . Boolean filter = dateCheckpointType . isValidCurrentCheckpoint ( currentCheckPoint , context ) ; \"<AssertPlaceHolder>\" ; } isValidCurrentCheckpoint ( java . lang . Object , java . util . Map ) { final java . lang . String datePattern = getDatePattern ( context ) ; final java . lang . String lastCheckpoint = context . get ( \"lastCheckpoint\" ) ; int isValid = 0 ; try { final java . util . Date lastCheckpointAsDate = new java . text . SimpleDateFormat ( datePattern ) . parse ( lastCheckpoint ) ; final java . util . Date currentCheckpointAsDate = new java . text . SimpleDateFormat ( datePattern ) . parse ( ( ( java . lang . String ) ( currentCheckpoint ) ) ) ; isValid = currentCheckpointAsDate . compareTo ( lastCheckpointAsDate ) ; } catch ( java . text . ParseException e ) { e . printStackTrace ( ) ; } return isValid > 0 ; }", "answer": "org . junit . Assert . assertNotNull ( filter )"}
{"focal": "getTuples ( ) { return tuplesHolder . getTuples ( ) ; }", "testMethod": "testBug21159Values ( ) { System . out . println ( \"lexicon-test2.xml\" 1 ) ; java . lang . String [ ] filenames = new java . lang . String [ ] { \"tuples-test1.xml\" , \"tuples-test2.xml\" , \"lexicon-test2.xml\" 0 , \"lexicon-test2.xml\" 3 , \"lexicon-test1.xml\" , \"lexicon-test2.xml\" } ; com . marklogic . client . DatabaseClient client = getDatabaseClient ( \"rest-admin\" , \"x\" , getConnType ( ) ) ; com . marklogic . client . admin . ServerConfigurationManager srvMgr = client . newServerConfigManager ( ) ; srvMgr . readConfiguration ( ) ; srvMgr . setQueryOptionValidation ( true ) ; srvMgr . writeConfiguration ( ) ; for ( java . lang . String filename : filenames ) { writeDocumentUsingInputStreamHandle ( client , filename , \"/raw-combined-query/\" , \"XML\" ) ; } java . io . File file = new java . io . File ( \"lexicon-test2.xml\" 2 ) ; java . lang . String combinedQuery = convertFileToString ( file ) ; com . marklogic . client . query . RawCombinedQueryDefinition rawCombinedQueryDefinition ; com . marklogic . client . query . QueryManager queryMgr = client . newQueryManager ( ) ; rawCombinedQueryDefinition = queryMgr . newRawCombinedQueryDefinition ( new com . marklogic . client . io . StringHandle ( combinedQuery ) . withMimetype ( \"application/xml\" ) ) ; com . marklogic . client . io . StringHandle stringResults = null ; com . marklogic . client . query . ValuesDefinition vdef = queryMgr . newValuesDefinition ( \"n-way\" ) ; vdef . setQueryDefinition ( rawCombinedQueryDefinition ) ; stringResults = queryMgr . tuples ( vdef , new com . marklogic . client . io . StringHandle ( ) ) ; System . out . println ( stringResults . get ( ) ) ; com . marklogic . client . io . TuplesHandle tuplesResults = queryMgr . tuples ( vdef , new com . marklogic . client . io . TuplesHandle ( ) ) ; com . marklogic . client . query . Tuple [ ] tuples = tuplesResults . getTuples ( ) ; \"<AssertPlaceHolder>\" ; client . release ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( tuples )", "total": "testBug21159Values ( ) { System . out . println ( \"lexicon-test2.xml\" 1 ) ; java . lang . String [ ] filenames = new java . lang . String [ ] { \"tuples-test1.xml\" , \"tuples-test2.xml\" , \"lexicon-test2.xml\" 0 , \"lexicon-test2.xml\" 3 , \"lexicon-test1.xml\" , \"lexicon-test2.xml\" } ; com . marklogic . client . DatabaseClient client = getDatabaseClient ( \"rest-admin\" , \"x\" , getConnType ( ) ) ; com . marklogic . client . admin . ServerConfigurationManager srvMgr = client . newServerConfigManager ( ) ; srvMgr . readConfiguration ( ) ; srvMgr . setQueryOptionValidation ( true ) ; srvMgr . writeConfiguration ( ) ; for ( java . lang . String filename : filenames ) { writeDocumentUsingInputStreamHandle ( client , filename , \"/raw-combined-query/\" , \"XML\" ) ; } java . io . File file = new java . io . File ( \"lexicon-test2.xml\" 2 ) ; java . lang . String combinedQuery = convertFileToString ( file ) ; com . marklogic . client . query . RawCombinedQueryDefinition rawCombinedQueryDefinition ; com . marklogic . client . query . QueryManager queryMgr = client . newQueryManager ( ) ; rawCombinedQueryDefinition = queryMgr . newRawCombinedQueryDefinition ( new com . marklogic . client . io . StringHandle ( combinedQuery ) . withMimetype ( \"application/xml\" ) ) ; com . marklogic . client . io . StringHandle stringResults = null ; com . marklogic . client . query . ValuesDefinition vdef = queryMgr . newValuesDefinition ( \"n-way\" ) ; vdef . setQueryDefinition ( rawCombinedQueryDefinition ) ; stringResults = queryMgr . tuples ( vdef , new com . marklogic . client . io . StringHandle ( ) ) ; System . out . println ( stringResults . get ( ) ) ; com . marklogic . client . io . TuplesHandle tuplesResults = queryMgr . tuples ( vdef , new com . marklogic . client . io . TuplesHandle ( ) ) ; com . marklogic . client . query . Tuple [ ] tuples = tuplesResults . getTuples ( ) ; \"<AssertPlaceHolder>\" ; client . release ( ) ; } getTuples ( ) { return tuplesHolder . getTuples ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( tuples )"}
{"focal": "findZielobjektTypAll ( ) { return findZielobjektTyp ( sernet . gs . reveng . importData . GSVampire . QUERY_ZIELOBJEKT_TYP ) ; }", "testMethod": "testFindBausteinMassnahmenByZielobjekt ( ) { java . util . List < sernet . gs . reveng . importData . ZielobjektTypeResult > findZielobjektTypAll = vampire . findZielobjektTypAll ( ) ; for ( sernet . gs . reveng . importData . ZielobjektTypeResult zielobjektTypeResult : findZielobjektTypAll ) { sernet . gs . reveng . NZielobjekt zielobjekt = zielobjektTypeResult . zielobjekt ; \"<AssertPlaceHolder>\" ; java . util . List < sernet . gs . reveng . importData . BausteineMassnahmenResult > massnahmenByZielobjekt = vampire . findBausteinMassnahmenByZielobjekt ( zielobjekt ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( zielobjekt )", "total": "testFindBausteinMassnahmenByZielobjekt ( ) { java . util . List < sernet . gs . reveng . importData . ZielobjektTypeResult > findZielobjektTypAll = vampire . findZielobjektTypAll ( ) ; for ( sernet . gs . reveng . importData . ZielobjektTypeResult zielobjektTypeResult : findZielobjektTypAll ) { sernet . gs . reveng . NZielobjekt zielobjekt = zielobjektTypeResult . zielobjekt ; \"<AssertPlaceHolder>\" ; java . util . List < sernet . gs . reveng . importData . BausteineMassnahmenResult > massnahmenByZielobjekt = vampire . findBausteinMassnahmenByZielobjekt ( zielobjekt ) ; } } findZielobjektTypAll ( ) { return findZielobjektTyp ( sernet . gs . reveng . importData . GSVampire . QUERY_ZIELOBJEKT_TYP ) ; }", "answer": "org . junit . Assert . assertNotNull ( zielobjekt )"}
{"focal": "getInstance ( ) { if ( ( com . github . jqudt . onto . UnitFactory . factory ) == null ) com . github . jqudt . onto . UnitFactory . factory = new com . github . jqudt . onto . UnitFactory ( ) ; return com . github . jqudt . onto . UnitFactory . factory ; }", "testMethod": "testGetInstance ( ) { com . github . jqudt . onto . UnitFactory factory = com . github . jqudt . onto . UnitFactory . getInstance ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( factory )", "total": "testGetInstance ( ) { com . github . jqudt . onto . UnitFactory factory = com . github . jqudt . onto . UnitFactory . getInstance ( ) ; \"<AssertPlaceHolder>\" ; } getInstance ( ) { if ( ( com . github . jqudt . onto . UnitFactory . factory ) == null ) com . github . jqudt . onto . UnitFactory . factory = new com . github . jqudt . onto . UnitFactory ( ) ; return com . github . jqudt . onto . UnitFactory . factory ; }", "answer": "org . junit . Assert . assertNotNull ( factory )"}
{"focal": "getStatus ( long ) { return new alluxio . job . wire . JobInfo ( retryRPC ( new alluxio . client . job . RpcCallable < alluxio . grpc . JobInfo > ( ) { public alluxio . job . wire . JobInfo call ( ) throws io . grpc . StatusRuntimeException { return mClient . getJobStatus ( alluxio . grpc . GetJobStatusPRequest . newBuilder ( ) . setJobId ( jobId ) . build ( ) ) . getJobInfo ( ) ; } } ) ) ; }", "testMethod": "createFile ( ) { java . lang . String uniqPath = alluxio . util . io . PathUtils . uniqPath ( ) ; for ( int k = 1 ; k < 5 ; k ++ ) { alluxio . AlluxioURI uri = new alluxio . AlluxioURI ( ( uniqPath + k ) ) ; mFileSystem . createFile ( uri , mWriteBoth ) . close ( ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( mFileSystem . getStatus ( uri ) )", "total": "createFile ( ) { java . lang . String uniqPath = alluxio . util . io . PathUtils . uniqPath ( ) ; for ( int k = 1 ; k < 5 ; k ++ ) { alluxio . AlluxioURI uri = new alluxio . AlluxioURI ( ( uniqPath + k ) ) ; mFileSystem . createFile ( uri , mWriteBoth ) . close ( ) ; \"<AssertPlaceHolder>\" ; } } getStatus ( long ) { return new alluxio . job . wire . JobInfo ( retryRPC ( new alluxio . client . job . RpcCallable < alluxio . grpc . JobInfo > ( ) { public alluxio . job . wire . JobInfo call ( ) throws io . grpc . StatusRuntimeException { return mClient . getJobStatus ( alluxio . grpc . GetJobStatusPRequest . newBuilder ( ) . setJobId ( jobId ) . build ( ) ) . getJobInfo ( ) ; } } ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( mFileSystem . getStatus ( uri ) )"}
{"focal": "getValue ( ) { return field . stringValue ( ) ; }", "testMethod": "testInvalidValue ( ) { net . ontopia . topicmaps . rest . model . VariantName variant = get ( \"4\" , net . ontopia . topicmaps . rest . model . VariantName . class ) ; variant . setValue ( null ) ; net . ontopia . topicmaps . rest . model . VariantName changed = post ( \"4\" , variant , net . ontopia . topicmaps . rest . model . VariantName . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( changed . getValue ( ) )", "total": "testInvalidValue ( ) { net . ontopia . topicmaps . rest . model . VariantName variant = get ( \"4\" , net . ontopia . topicmaps . rest . model . VariantName . class ) ; variant . setValue ( null ) ; net . ontopia . topicmaps . rest . model . VariantName changed = post ( \"4\" , variant , net . ontopia . topicmaps . rest . model . VariantName . class ) ; \"<AssertPlaceHolder>\" ; } getValue ( ) { return field . stringValue ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( changed . getValue ( ) )"}
{"focal": "get ( com . google . appengine . api . datastore . Key ) { return com . google . appengine . tck . modules . support . LibHelper . ds . get ( key ) ; }", "testMethod": "testSmoke ( ) { final com . google . appengine . api . datastore . DatastoreService ds = com . google . appengine . api . datastore . DatastoreServiceFactory . getDatastoreService ( ) ; com . google . appengine . api . datastore . Key key = ds . put ( new com . google . appengine . api . datastore . Entity ( \"NsTest\" ) ) ; try { \"<AssertPlaceHolder>\" ; } finally { ds . delete ( key ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( ds . get ( key ) )", "total": "testSmoke ( ) { final com . google . appengine . api . datastore . DatastoreService ds = com . google . appengine . api . datastore . DatastoreServiceFactory . getDatastoreService ( ) ; com . google . appengine . api . datastore . Key key = ds . put ( new com . google . appengine . api . datastore . Entity ( \"NsTest\" ) ) ; try { \"<AssertPlaceHolder>\" ; } finally { ds . delete ( key ) ; } } get ( com . google . appengine . api . datastore . Key ) { return com . google . appengine . tck . modules . support . LibHelper . ds . get ( key ) ; }", "answer": "org . junit . Assert . assertNotNull ( ds . get ( key ) )"}
{"focal": "toString ( ) { return fName ; }", "testMethod": "testToString_withDefs ( ) { java . lang . String result = charArrayFixture . toString ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testToString_withDefs ( ) { java . lang . String result = charArrayFixture . toString ( ) ; \"<AssertPlaceHolder>\" ; } toString ( ) { return fName ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "parseStatement ( java . lang . String ) { try { reinit ( sqlText ) ; return parser . parseStatement ( sqlText , parameterList ) ; } catch ( com . bj58 . sql . parser . ParseException ex ) { throw new com . bj58 . sql . parser . SQLParserException ( com . bj58 . sql . parser . SQLParser . standardizeEol ( ex . getMessage ( ) ) , ex , com . bj58 . sql . parser . SQLParser . tokenErrorPosition ( ex . currentToken , sqlText ) ) ; } catch ( com . bj58 . sql . parser . TokenMgrError ex ) { parser = null ; if ( ( ex . errorCode ) == ( TokenMgrError . LEXICAL_ERROR ) ) throw new com . bj58 . sql . parser . SQLParserException ( ex . getMessage ( ) , ex , com . bj58 . sql . parser . SQLParser . lineColumnErrorPosition ( ex . errorLine , ex . errorColumn , sqlText ) ) ; else throw new com . bj58 . sql . StandardException ( ex ) ; } }", "testMethod": "testOrderBy ( ) { com . bj58 . sql . parser . SQLParser parser = new com . bj58 . sql . parser . SQLParser ( ) ; com . bj58 . sql . parser . StatementNode node = parser . parseStatement ( \"select<sp>count(*)<sp>from<sp>table1<sp>join<sp>table2<sp>on<sp>t=a<sp>join<sp>table3<sp>on<sp>t=b<sp>order<sp>by<sp>name<sp>desc\" ) ; \"<AssertPlaceHolder>\" ; com . bj58 . sql . unparser . NodeToString nodeToStr = new com . bj58 . sql . unparser . NodeToString ( ) ; System . out . println ( nodeToStr . toString ( node ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( node )", "total": "testOrderBy ( ) { com . bj58 . sql . parser . SQLParser parser = new com . bj58 . sql . parser . SQLParser ( ) ; com . bj58 . sql . parser . StatementNode node = parser . parseStatement ( \"select<sp>count(*)<sp>from<sp>table1<sp>join<sp>table2<sp>on<sp>t=a<sp>join<sp>table3<sp>on<sp>t=b<sp>order<sp>by<sp>name<sp>desc\" ) ; \"<AssertPlaceHolder>\" ; com . bj58 . sql . unparser . NodeToString nodeToStr = new com . bj58 . sql . unparser . NodeToString ( ) ; System . out . println ( nodeToStr . toString ( node ) ) ; } parseStatement ( java . lang . String ) { try { reinit ( sqlText ) ; return parser . parseStatement ( sqlText , parameterList ) ; } catch ( com . bj58 . sql . parser . ParseException ex ) { throw new com . bj58 . sql . parser . SQLParserException ( com . bj58 . sql . parser . SQLParser . standardizeEol ( ex . getMessage ( ) ) , ex , com . bj58 . sql . parser . SQLParser . tokenErrorPosition ( ex . currentToken , sqlText ) ) ; } catch ( com . bj58 . sql . parser . TokenMgrError ex ) { parser = null ; if ( ( ex . errorCode ) == ( TokenMgrError . LEXICAL_ERROR ) ) throw new com . bj58 . sql . parser . SQLParserException ( ex . getMessage ( ) , ex , com . bj58 . sql . parser . SQLParser . lineColumnErrorPosition ( ex . errorLine , ex . errorColumn , sqlText ) ) ; else throw new com . bj58 . sql . StandardException ( ex ) ; } }", "answer": "org . junit . Assert . assertNotNull ( node )"}
{"focal": "get ( ) { return this . jobClient . getJob ( jobId ) ; }", "testMethod": "getInvokeJobClient ( ) { final java . lang . String connectionString = \"validConnectionString\" ; new tests . unit . com . microsoft . azure . sdk . iot . service . devicetwin . NonStrictExpectations ( ) { { com . microsoft . azure . sdk . iot . service . jobs . JobClient . createFromConnectionString ( connectionString ) ; result = mockedJobClient ; mockedJobClient . getJob ( ( ( java . lang . String ) ( any ) ) ) ; result = mockedJobResult ; times = 1 ; } } ; com . microsoft . azure . sdk . iot . service . devicetwin . Job job = tests . unit . com . microsoft . azure . sdk . iot . service . devicetwin . Deencapsulation . newInstance ( com . microsoft . azure . sdk . iot . service . devicetwin . Job . class , new java . lang . Class [ ] { java . lang . String . class } , connectionString ) ; com . microsoft . azure . sdk . iot . service . jobs . JobResult jobResult = job . get ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( jobResult )", "total": "getInvokeJobClient ( ) { final java . lang . String connectionString = \"validConnectionString\" ; new tests . unit . com . microsoft . azure . sdk . iot . service . devicetwin . NonStrictExpectations ( ) { { com . microsoft . azure . sdk . iot . service . jobs . JobClient . createFromConnectionString ( connectionString ) ; result = mockedJobClient ; mockedJobClient . getJob ( ( ( java . lang . String ) ( any ) ) ) ; result = mockedJobResult ; times = 1 ; } } ; com . microsoft . azure . sdk . iot . service . devicetwin . Job job = tests . unit . com . microsoft . azure . sdk . iot . service . devicetwin . Deencapsulation . newInstance ( com . microsoft . azure . sdk . iot . service . devicetwin . Job . class , new java . lang . Class [ ] { java . lang . String . class } , connectionString ) ; com . microsoft . azure . sdk . iot . service . jobs . JobResult jobResult = job . get ( ) ; \"<AssertPlaceHolder>\" ; } get ( ) { return this . jobClient . getJob ( jobId ) ; }", "answer": "org . junit . Assert . assertNotNull ( jobResult )"}
{"focal": "openSessionAs ( java . lang . String ) { return org . nuxeo . ecm . core . api . CoreInstance . openCoreSession ( session . getRepositoryName ( ) , username ) ; }", "testMethod": "nonAuthorizedUserShouldNotBeAbleToPutNewParameter ( ) { addReadForEveryone ( org . nuxeo . ecm . localconf . CHILD_WORKSPACE_REF ) ; try ( org . nuxeo . ecm . core . api . CloseableCoreSession newSession = openSessionAs ( \"user1\" ) ) { org . nuxeo . ecm . automation . OperationContext ctx = new org . nuxeo . ecm . automation . OperationContext ( newSession ) ; \"<AssertPlaceHolder>\" ; org . nuxeo . ecm . automation . OperationChain chain = new org . nuxeo . ecm . automation . OperationChain ( \"testPutSimpleConfigurationParametersChain\" ) ; chain . add ( FetchDocument . ID ) . set ( \"value\" , org . nuxeo . ecm . localconf . CHILD_WORKSPACE_REF ) ; chain . add ( PutSimpleConfParam . ID ) . set ( \"key\" , \"key1\" ) . set ( \"value\" , \"value1\" ) ; service . run ( ctx , chain ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( ctx )", "total": "nonAuthorizedUserShouldNotBeAbleToPutNewParameter ( ) { addReadForEveryone ( org . nuxeo . ecm . localconf . CHILD_WORKSPACE_REF ) ; try ( org . nuxeo . ecm . core . api . CloseableCoreSession newSession = openSessionAs ( \"user1\" ) ) { org . nuxeo . ecm . automation . OperationContext ctx = new org . nuxeo . ecm . automation . OperationContext ( newSession ) ; \"<AssertPlaceHolder>\" ; org . nuxeo . ecm . automation . OperationChain chain = new org . nuxeo . ecm . automation . OperationChain ( \"testPutSimpleConfigurationParametersChain\" ) ; chain . add ( FetchDocument . ID ) . set ( \"value\" , org . nuxeo . ecm . localconf . CHILD_WORKSPACE_REF ) ; chain . add ( PutSimpleConfParam . ID ) . set ( \"key\" , \"key1\" ) . set ( \"value\" , \"value1\" ) ; service . run ( ctx , chain ) ; } } openSessionAs ( java . lang . String ) { return org . nuxeo . ecm . core . api . CoreInstance . openCoreSession ( session . getRepositoryName ( ) , username ) ; }", "answer": "org . junit . Assert . assertNotNull ( ctx )"}
{"focal": "toBytes ( double ) { return hBaseBytesUtilShim . toBytes ( var1 ) ; }", "testMethod": "decodeBooleanIntoObject ( ) { stubValueMeta . setType ( 4 ) ; java . lang . Object str = stubValueMeta . decodeColumnValue ( org . apache . hadoop . hbase . util . Bytes . toBytes ( 1 ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( str )", "total": "decodeBooleanIntoObject ( ) { stubValueMeta . setType ( 4 ) ; java . lang . Object str = stubValueMeta . decodeColumnValue ( org . apache . hadoop . hbase . util . Bytes . toBytes ( 1 ) ) ; \"<AssertPlaceHolder>\" ; } toBytes ( double ) { return hBaseBytesUtilShim . toBytes ( var1 ) ; }", "answer": "org . junit . Assert . assertNotNull ( str )"}
{"focal": "waitForFaultMessage ( ) { waitFor ( _faults , 1 ) ; return this ; }", "testMethod": "faultChainContinuesOnFault ( ) { org . switchyard . ExchangeHandler badHandler = new org . switchyard . BaseHandler ( ) { @ org . switchyard . internal . Override public void handleFault ( org . switchyard . Exchange exchange ) { throw new java . lang . RuntimeException ( \"oops!\" ) ; } } ; org . switchyard . MockHandler goodHandler = new org . switchyard . MockHandler ( ) ; _chain . addFirst ( \"first\" , badHandler ) ; _chain . addLast ( \"second\" , goodHandler ) ; org . switchyard . MockDomain domain = new org . switchyard . MockDomain ( ) ; org . switchyard . ServiceReference reference = domain . createInOnlyService ( new javax . xml . namespace . QName ( \"bar\" ) ) ; org . switchyard . spi . Dispatcher dispatch = domain . getBus ( ) . createDispatcher ( reference ) ; org . switchyard . Exchange ex = new org . switchyard . internal . ExchangeImpl ( domain , dispatch ) . consumer ( reference , new org . switchyard . metadata . InOnlyOperation ( \"foo\" ) ) ; _chain . handleFault ( ex ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( goodHandler . waitForFaultMessage ( ) )", "total": "faultChainContinuesOnFault ( ) { org . switchyard . ExchangeHandler badHandler = new org . switchyard . BaseHandler ( ) { @ org . switchyard . internal . Override public void handleFault ( org . switchyard . Exchange exchange ) { throw new java . lang . RuntimeException ( \"oops!\" ) ; } } ; org . switchyard . MockHandler goodHandler = new org . switchyard . MockHandler ( ) ; _chain . addFirst ( \"first\" , badHandler ) ; _chain . addLast ( \"second\" , goodHandler ) ; org . switchyard . MockDomain domain = new org . switchyard . MockDomain ( ) ; org . switchyard . ServiceReference reference = domain . createInOnlyService ( new javax . xml . namespace . QName ( \"bar\" ) ) ; org . switchyard . spi . Dispatcher dispatch = domain . getBus ( ) . createDispatcher ( reference ) ; org . switchyard . Exchange ex = new org . switchyard . internal . ExchangeImpl ( domain , dispatch ) . consumer ( reference , new org . switchyard . metadata . InOnlyOperation ( \"foo\" ) ) ; _chain . handleFault ( ex ) ; \"<AssertPlaceHolder>\" ; } waitForFaultMessage ( ) { waitFor ( _faults , 1 ) ; return this ; }", "answer": "org . junit . Assert . assertNotNull ( goodHandler . waitForFaultMessage ( ) )"}
{"focal": "getStats ( ) { return io . datakernel . inspector . BaseInspector . lookup ( inspector , io . datakernel . eventloop . EventloopStats . class ) ; }", "testMethod": "testClientWithMaxKeepAliveRequests ( ) { client . withMaxKeepAliveRequests ( 5 ) ; io . datakernel . http . AsyncHttpServer server = io . datakernel . http . AsyncHttpServer . create ( io . datakernel . eventloop . Eventloop . getCurrentEventloop ( ) , ( request ) -> io . datakernel . async . Promise . of ( io . datakernel . http . HttpResponse . ok200 ( ) ) ) . withListenPort ( io . datakernel . http . AbstractHttpConnectionTest . PORT ) ; server . listen ( ) ; \"<AssertPlaceHolder>\" ; checkMaxKeepAlive ( 5 , server , client . getStats ( ) . getConnected ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( client . getStats ( ) )", "total": "testClientWithMaxKeepAliveRequests ( ) { client . withMaxKeepAliveRequests ( 5 ) ; io . datakernel . http . AsyncHttpServer server = io . datakernel . http . AsyncHttpServer . create ( io . datakernel . eventloop . Eventloop . getCurrentEventloop ( ) , ( request ) -> io . datakernel . async . Promise . of ( io . datakernel . http . HttpResponse . ok200 ( ) ) ) . withListenPort ( io . datakernel . http . AbstractHttpConnectionTest . PORT ) ; server . listen ( ) ; \"<AssertPlaceHolder>\" ; checkMaxKeepAlive ( 5 , server , client . getStats ( ) . getConnected ( ) ) ; } getStats ( ) { return io . datakernel . inspector . BaseInspector . lookup ( inspector , io . datakernel . eventloop . EventloopStats . class ) ; }", "answer": "org . junit . Assert . assertNotNull ( client . getStats ( ) )"}
{"focal": "attachLogicalNode ( java . lang . String , com . noctarius . snowcast . impl . SequencerDefinition ) { long epochOffset = sequencerDefinition . getEpoch ( ) . getEpochOffset ( ) ; int maxLogicalNodeCount = sequencerDefinition . getMaxLogicalNodeCount ( ) ; short backupCount = sequencerDefinition . getBackupCount ( ) ; com . hazelcast . client . impl . protocol . ClientMessage request = com . hazelcast . client . impl . protocol . codec . SnowcastAttachLogicalNodeCodec . encodeRequest ( sequencerName , epochOffset , maxLogicalNodeCount , backupCount ) ; com . hazelcast . client . impl . protocol . ClientMessage response = invoke ( sequencerName , request ) ; return com . hazelcast . client . impl . protocol . codec . SnowcastAttachLogicalNodeCodec . decodeResponse ( response ) . response ; }", "testMethod": "test_unfreeze_partition ( ) { com . noctarius . snowcast . impl . SequencerDefinition definition = new com . noctarius . snowcast . impl . SequencerDefinition ( \"empty\" , com . noctarius . snowcast . SnowcastEpoch . byTimestamp ( 1 ) , 128 , ( ( short ) ( 1 ) ) ) ; com . hazelcast . nio . Address address1 = new com . hazelcast . nio . Address ( \"localhost\" , 1000 ) ; com . hazelcast . nio . Address address2 = new com . hazelcast . nio . Address ( \"localhost\" , 1002 ) ; com . noctarius . snowcast . impl . SequencerPartition partition = new com . noctarius . snowcast . impl . SequencerPartition ( 1 ) ; java . lang . Integer logicalNodeId = partition . attachLogicalNode ( definition , address1 ) ; \"<AssertPlaceHolder>\" ; partition . freeze ( ) ; try { partition . attachLogicalNode ( definition , address2 ) ; org . junit . Assert . fail ( \"Partition<sp>is<sp>not<sp>successfully<sp>frozen\" ) ; } catch ( com . noctarius . snowcast . SnowcastIllegalStateException e ) { } partition . unfreeze ( ) ; partition . attachLogicalNode ( definition , address2 ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( logicalNodeId )", "total": "test_unfreeze_partition ( ) { com . noctarius . snowcast . impl . SequencerDefinition definition = new com . noctarius . snowcast . impl . SequencerDefinition ( \"empty\" , com . noctarius . snowcast . SnowcastEpoch . byTimestamp ( 1 ) , 128 , ( ( short ) ( 1 ) ) ) ; com . hazelcast . nio . Address address1 = new com . hazelcast . nio . Address ( \"localhost\" , 1000 ) ; com . hazelcast . nio . Address address2 = new com . hazelcast . nio . Address ( \"localhost\" , 1002 ) ; com . noctarius . snowcast . impl . SequencerPartition partition = new com . noctarius . snowcast . impl . SequencerPartition ( 1 ) ; java . lang . Integer logicalNodeId = partition . attachLogicalNode ( definition , address1 ) ; \"<AssertPlaceHolder>\" ; partition . freeze ( ) ; try { partition . attachLogicalNode ( definition , address2 ) ; org . junit . Assert . fail ( \"Partition<sp>is<sp>not<sp>successfully<sp>frozen\" ) ; } catch ( com . noctarius . snowcast . SnowcastIllegalStateException e ) { } partition . unfreeze ( ) ; partition . attachLogicalNode ( definition , address2 ) ; } attachLogicalNode ( java . lang . String , com . noctarius . snowcast . impl . SequencerDefinition ) { long epochOffset = sequencerDefinition . getEpoch ( ) . getEpochOffset ( ) ; int maxLogicalNodeCount = sequencerDefinition . getMaxLogicalNodeCount ( ) ; short backupCount = sequencerDefinition . getBackupCount ( ) ; com . hazelcast . client . impl . protocol . ClientMessage request = com . hazelcast . client . impl . protocol . codec . SnowcastAttachLogicalNodeCodec . encodeRequest ( sequencerName , epochOffset , maxLogicalNodeCount , backupCount ) ; com . hazelcast . client . impl . protocol . ClientMessage response = invoke ( sequencerName , request ) ; return com . hazelcast . client . impl . protocol . codec . SnowcastAttachLogicalNodeCodec . decodeResponse ( response ) . response ; }", "answer": "org . junit . Assert . assertNotNull ( logicalNodeId )"}
{"focal": "getAll ( ) { java . util . ArrayList < E > list = new java . util . ArrayList < E > ( ) ; for ( E element : listElements ) { if ( element != null ) { list . add ( element ) ; } } return list ; }", "testMethod": "testGetAll001 ( ) { javax . naming . ldap . LdapName ln = new javax . naming . ldap . LdapName ( \"\" ) ; java . util . Enumeration < java . lang . String > x = ln . getAll ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( x )", "total": "testGetAll001 ( ) { javax . naming . ldap . LdapName ln = new javax . naming . ldap . LdapName ( \"\" ) ; java . util . Enumeration < java . lang . String > x = ln . getAll ( ) ; \"<AssertPlaceHolder>\" ; } getAll ( ) { java . util . ArrayList < E > list = new java . util . ArrayList < E > ( ) ; for ( E element : listElements ) { if ( element != null ) { list . add ( element ) ; } } return list ; }", "answer": "org . junit . Assert . assertNotNull ( x )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . ScratchPad entity = new org . oscarehr . common . model . ScratchPad ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . ScratchPad entity = new org . oscarehr . common . model . ScratchPad ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "translate ( java . lang . Class ) { return new com . codiform . moo . curry . Translate < T > ( translatorFactory , destinationClass ) ; }", "testMethod": "testMooTranslateCanCreateCurriedTranslate ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( moo . translate ( java . lang . String . class ) )", "total": "testMooTranslateCanCreateCurriedTranslate ( ) { \"<AssertPlaceHolder>\" ; } translate ( java . lang . Class ) { return new com . codiform . moo . curry . Translate < T > ( translatorFactory , destinationClass ) ; }", "answer": "org . junit . Assert . assertNotNull ( moo . translate ( java . lang . String . class ) )"}
{"focal": "getSubOptions ( java . lang . Class ) { return subOptionsClass != null ? getProperty ( subOptionsClass . getName ( ) ) : null ; }", "testMethod": "anonymousSubOptions ( ) { options . subOptions ( new java . io . Serializable ( ) { } ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( options . getSubOptions ( java . io . Serializable . class ) )", "total": "anonymousSubOptions ( ) { options . subOptions ( new java . io . Serializable ( ) { } ) ; \"<AssertPlaceHolder>\" ; } getSubOptions ( java . lang . Class ) { return subOptionsClass != null ? getProperty ( subOptionsClass . getName ( ) ) : null ; }", "answer": "org . junit . Assert . assertNotNull ( options . getSubOptions ( java . io . Serializable . class ) )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "debieraMostrarListaDeTipoColportor ( ) { mx . edu . um . mateo . colportor . test . TipoColportorControllerTest . log . debug ( \"Debiera<sp>monstrar<sp>lista<sp>TipoColportor\" ) ; for ( int i = 0 ; i < 20 ; i ++ ) { mx . edu . um . mateo . colportor . model . TipoColportor tipoColportor = new mx . edu . um . mateo . colportor . model . TipoColportor ( ( \"test\" + i ) , \"A\" ) ; tipoColportorDao . crea ( tipoColportor ) ; \"<AssertPlaceHolder>\" ; } this . mockMvc . perform ( get ( Constantes . PATH_TIPO_COLPORTOR ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_TIPO_COLPORTOR_LISTA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_TIPO_COLPORTOR ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINACION ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINAS ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINA ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( tipoColportor . getId ( ) )", "total": "debieraMostrarListaDeTipoColportor ( ) { mx . edu . um . mateo . colportor . test . TipoColportorControllerTest . log . debug ( \"Debiera<sp>monstrar<sp>lista<sp>TipoColportor\" ) ; for ( int i = 0 ; i < 20 ; i ++ ) { mx . edu . um . mateo . colportor . model . TipoColportor tipoColportor = new mx . edu . um . mateo . colportor . model . TipoColportor ( ( \"test\" + i ) , \"A\" ) ; tipoColportorDao . crea ( tipoColportor ) ; \"<AssertPlaceHolder>\" ; } this . mockMvc . perform ( get ( Constantes . PATH_TIPO_COLPORTOR ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_TIPO_COLPORTOR_LISTA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_TIPO_COLPORTOR ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINACION ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINAS ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_PAGINA ) ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( tipoColportor . getId ( ) )"}
{"focal": "createDatabaseConnectionExtraOptionsEntry ( ) { return new org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . DatabaseConnection . ExtraOptions . Entry ( ) ; }", "testMethod": "testCreateDatabaseConnectionExtraOptionsEntry ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( factory . createDatabaseConnectionExtraOptionsEntry ( ) )", "total": "testCreateDatabaseConnectionExtraOptionsEntry ( ) { \"<AssertPlaceHolder>\" ; } createDatabaseConnectionExtraOptionsEntry ( ) { return new org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . DatabaseConnection . ExtraOptions . Entry ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( factory . createDatabaseConnectionExtraOptionsEntry ( ) )"}
{"focal": "getMetaData ( ) { return null ; }", "testMethod": "testGetMetaData ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( rs . getMetaData ( ) )", "total": "testGetMetaData ( ) { \"<AssertPlaceHolder>\" ; } getMetaData ( ) { return null ; }", "answer": "org . junit . Assert . assertNotNull ( rs . getMetaData ( ) )"}
{"focal": "transform ( org . apache . camel . Message , java . lang . String , java . lang . String , ddf . mime . MimeTypeToTransformerMapper ) { javax . activation . MimeType derivedMimeType = null ; try ( java . io . InputStream message = in . getBody ( java . io . InputStream . class ) ; org . codice . ddf . platform . util . TemporaryFileBackedOutputStream tfbos = new org . codice . ddf . platform . util . TemporaryFileBackedOutputStream ( ) ) { if ( message == null ) { throw new ddf . catalog . transform . CatalogTransformerException ( \"Message<sp>body<sp>was<sp>null;<sp>unable<sp>to<sp>generate<sp>Metacard!\" ) ; } org . apache . commons . io . IOUtils . copy ( message , tfbos ) ; java . lang . String fileExtensionHeader = getHeaderAsStringAndRemove ( in , ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . FILE_EXTENSION_HEADER ) ; if ( org . apache . commons . lang . StringUtils . isNotEmpty ( fileExtensionHeader ) ) { java . util . Optional < java . lang . String > fileMimeType = getMimeTypeFor ( tfbos . asByteSource ( ) . openBufferedStream ( ) , fileExtensionHeader ) ; if ( fileMimeType . isPresent ( ) ) { ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . LOGGER . trace ( \"Setting<sp>mimetype<sp>to<sp>[{}]<sp>from<sp>Message<sp>header<sp>[{}]\" , fileMimeType . get ( ) , ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . FILE_EXTENSION_HEADER ) ; derivedMimeType = new javax . activation . MimeType ( fileMimeType . get ( ) ) ; } } if ( derivedMimeType == null ) { if ( org . apache . commons . lang . StringUtils . isNotEmpty ( mimeType ) ) { if ( org . apache . commons . lang . StringUtils . isNotEmpty ( transformerId ) ) { derivedMimeType = new javax . activation . MimeType ( ( ( ( ( mimeType + \";\" ) + ( ddf . mime . MimeTypeToTransformerMapper . ID_KEY ) ) + \"=\" ) + transformerId ) ) ; ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . LOGGER . trace ( \"Using<sp>mimeType<sp>to<sp>[{}]\" , derivedMimeType ) ; } else { ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . LOGGER . trace ( \"Using<sp>CatalogEndpoint's<sp>configured<sp>mimeType<sp>[{}]\" , mimeType ) ; derivedMimeType = new javax . activation . MimeType ( mimeType ) ; } } else { ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . LOGGER . debug ( \"Unable<sp>to<sp>determine<sp>mimeType.<sp>Defaulting<sp>to<sp>[{}]\" , ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . DEFAULT_MIME_TYPE ) ; derivedMimeType = new javax . activation . MimeType ( ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . DEFAULT_MIME_TYPE ) ; } } java . lang . String metacardUpdateID = getHeaderAsStringAndRemove ( in , ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . METACARD_ID_HEADER ) ; return generateMetacard ( derivedMimeType , mapper , tfbos , metacardUpdateID ) . orElseThrow ( ( ) -> new ddf . catalog . transform . CatalogTransformerException ( java . lang . String . format ( \"Did<sp>not<sp>find<sp>an<sp>InputTransformer<sp>for<sp>MIME<sp>Type<sp>[%s]<sp>and<sp>%s<sp>[%s]\" , mimeType , MimeTypeToTransformerMapper . ID_KEY , transformerId ) ) ) ; } catch ( java . io . IOException e ) { throw new ddf . catalog . transform . CatalogTransformerException ( \"Unable<sp>to<sp>transform<sp>incoming<sp>product\" , e ) ; } }", "testMethod": "testQueryTransform ( ) { org . osgi . framework . BundleContext context = mock ( org . osgi . framework . BundleContext . class ) ; ddf . catalog . transform . QueryResponseTransformer transformer = mock ( ddf . catalog . transform . QueryResponseTransformer . class ) ; org . osgi . framework . ServiceReference reference = mock ( org . osgi . framework . ServiceReference . class ) ; org . osgi . framework . ServiceReference [ ] serviceReferences = new org . osgi . framework . ServiceReference [ ] { reference } ; when ( context . getServiceReferences ( anyString ( ) , anyString ( ) ) ) . thenReturn ( serviceReferences ) ; when ( context . getService ( isA ( org . osgi . framework . ServiceReference . class ) ) ) . thenReturn ( transformer ) ; when ( transformer . transform ( isA ( ddf . catalog . operation . SourceResponse . class ) , isA ( java . util . Map . class ) ) ) . thenReturn ( new ddf . catalog . data . impl . BinaryContentImpl ( null ) ) ; ddf . catalog . CatalogFramework framework = this . createDummyCatalogFramework ( provider , storageProvider , context , eventAdmin , true ) ; ddf . catalog . operation . SourceResponse response = new ddf . catalog . operation . impl . SourceResponseImpl ( null , null ) ; ddf . catalog . data . BinaryContent content = framework . transform ( response , \"NONE\" , new java . util . HashMap < java . lang . String , java . io . Serializable > ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( content )", "total": "testQueryTransform ( ) { org . osgi . framework . BundleContext context = mock ( org . osgi . framework . BundleContext . class ) ; ddf . catalog . transform . QueryResponseTransformer transformer = mock ( ddf . catalog . transform . QueryResponseTransformer . class ) ; org . osgi . framework . ServiceReference reference = mock ( org . osgi . framework . ServiceReference . class ) ; org . osgi . framework . ServiceReference [ ] serviceReferences = new org . osgi . framework . ServiceReference [ ] { reference } ; when ( context . getServiceReferences ( anyString ( ) , anyString ( ) ) ) . thenReturn ( serviceReferences ) ; when ( context . getService ( isA ( org . osgi . framework . ServiceReference . class ) ) ) . thenReturn ( transformer ) ; when ( transformer . transform ( isA ( ddf . catalog . operation . SourceResponse . class ) , isA ( java . util . Map . class ) ) ) . thenReturn ( new ddf . catalog . data . impl . BinaryContentImpl ( null ) ) ; ddf . catalog . CatalogFramework framework = this . createDummyCatalogFramework ( provider , storageProvider , context , eventAdmin , true ) ; ddf . catalog . operation . SourceResponse response = new ddf . catalog . operation . impl . SourceResponseImpl ( null , null ) ; ddf . catalog . data . BinaryContent content = framework . transform ( response , \"NONE\" , new java . util . HashMap < java . lang . String , java . io . Serializable > ( ) ) ; \"<AssertPlaceHolder>\" ; } transform ( org . apache . camel . Message , java . lang . String , java . lang . String , ddf . mime . MimeTypeToTransformerMapper ) { javax . activation . MimeType derivedMimeType = null ; try ( java . io . InputStream message = in . getBody ( java . io . InputStream . class ) ; org . codice . ddf . platform . util . TemporaryFileBackedOutputStream tfbos = new org . codice . ddf . platform . util . TemporaryFileBackedOutputStream ( ) ) { if ( message == null ) { throw new ddf . catalog . transform . CatalogTransformerException ( \"Message<sp>body<sp>was<sp>null;<sp>unable<sp>to<sp>generate<sp>Metacard!\" ) ; } org . apache . commons . io . IOUtils . copy ( message , tfbos ) ; java . lang . String fileExtensionHeader = getHeaderAsStringAndRemove ( in , ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . FILE_EXTENSION_HEADER ) ; if ( org . apache . commons . lang . StringUtils . isNotEmpty ( fileExtensionHeader ) ) { java . util . Optional < java . lang . String > fileMimeType = getMimeTypeFor ( tfbos . asByteSource ( ) . openBufferedStream ( ) , fileExtensionHeader ) ; if ( fileMimeType . isPresent ( ) ) { ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . LOGGER . trace ( \"Setting<sp>mimetype<sp>to<sp>[{}]<sp>from<sp>Message<sp>header<sp>[{}]\" , fileMimeType . get ( ) , ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . FILE_EXTENSION_HEADER ) ; derivedMimeType = new javax . activation . MimeType ( fileMimeType . get ( ) ) ; } } if ( derivedMimeType == null ) { if ( org . apache . commons . lang . StringUtils . isNotEmpty ( mimeType ) ) { if ( org . apache . commons . lang . StringUtils . isNotEmpty ( transformerId ) ) { derivedMimeType = new javax . activation . MimeType ( ( ( ( ( mimeType + \";\" ) + ( ddf . mime . MimeTypeToTransformerMapper . ID_KEY ) ) + \"=\" ) + transformerId ) ) ; ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . LOGGER . trace ( \"Using<sp>mimeType<sp>to<sp>[{}]\" , derivedMimeType ) ; } else { ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . LOGGER . trace ( \"Using<sp>CatalogEndpoint's<sp>configured<sp>mimeType<sp>[{}]\" , mimeType ) ; derivedMimeType = new javax . activation . MimeType ( mimeType ) ; } } else { ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . LOGGER . debug ( \"Unable<sp>to<sp>determine<sp>mimeType.<sp>Defaulting<sp>to<sp>[{}]\" , ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . DEFAULT_MIME_TYPE ) ; derivedMimeType = new javax . activation . MimeType ( ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . DEFAULT_MIME_TYPE ) ; } } java . lang . String metacardUpdateID = getHeaderAsStringAndRemove ( in , ddf . camel . component . catalog . inputtransformer . InputTransformerProducer . METACARD_ID_HEADER ) ; return generateMetacard ( derivedMimeType , mapper , tfbos , metacardUpdateID ) . orElseThrow ( ( ) -> new ddf . catalog . transform . CatalogTransformerException ( java . lang . String . format ( \"Did<sp>not<sp>find<sp>an<sp>InputTransformer<sp>for<sp>MIME<sp>Type<sp>[%s]<sp>and<sp>%s<sp>[%s]\" , mimeType , MimeTypeToTransformerMapper . ID_KEY , transformerId ) ) ) ; } catch ( java . io . IOException e ) { throw new ddf . catalog . transform . CatalogTransformerException ( \"Unable<sp>to<sp>transform<sp>incoming<sp>product\" , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( content )"}
{"focal": "clientBuilder ( boolean ) { return ssl ? com . questdb . net . http . HttpServerTest . createHttpClient_AcceptsUntrustedCerts ( ) : org . apache . http . impl . client . HttpClientBuilder . create ( ) ; }", "testMethod": "testMaxConnections ( ) { final com . questdb . ServerConfiguration configuration = new com . questdb . ServerConfiguration ( new com . questdb . net . http . File ( com . questdb . net . http . HttpServerTest . resourceFile ( \"/site\" ) , \"conf/questdb.conf\" ) ) ; com . questdb . BootstrapEnv env = new com . questdb . BootstrapEnv ( ) ; env . configuration = configuration ; env . configuration . setHttpMaxConnections ( 1 ) ; env . matcher = new com . questdb . net . http . SimpleUrlMatcher ( ) { { setDefaultHandler ( new com . questdb . net . http . handlers . StaticContentHandler ( env ) ) ; } } ; com . questdb . net . http . HttpServer server = new com . questdb . net . http . HttpServer ( env ) ; server . start ( ) ; try { \"<AssertPlaceHolder>\" ; try { com . questdb . net . http . HttpServerTest . clientBuilder ( true ) . build ( ) . execute ( new org . apache . http . client . methods . HttpGet ( \"https://localhost:9000/upload.html\" ) ) ; org . junit . Assert . fail ( \"Expected<sp>server<sp>to<sp>reject<sp>connection\" ) ; } catch ( java . lang . Exception ignored ) { } } finally { server . halt ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( com . questdb . net . http . HttpServerTest . clientBuilder ( true ) . build ( ) . execute ( new org . apache . http . client . methods . HttpGet ( \"https://localhost:9000/upload.html\" ) ) )", "total": "testMaxConnections ( ) { final com . questdb . ServerConfiguration configuration = new com . questdb . ServerConfiguration ( new com . questdb . net . http . File ( com . questdb . net . http . HttpServerTest . resourceFile ( \"/site\" ) , \"conf/questdb.conf\" ) ) ; com . questdb . BootstrapEnv env = new com . questdb . BootstrapEnv ( ) ; env . configuration = configuration ; env . configuration . setHttpMaxConnections ( 1 ) ; env . matcher = new com . questdb . net . http . SimpleUrlMatcher ( ) { { setDefaultHandler ( new com . questdb . net . http . handlers . StaticContentHandler ( env ) ) ; } } ; com . questdb . net . http . HttpServer server = new com . questdb . net . http . HttpServer ( env ) ; server . start ( ) ; try { \"<AssertPlaceHolder>\" ; try { com . questdb . net . http . HttpServerTest . clientBuilder ( true ) . build ( ) . execute ( new org . apache . http . client . methods . HttpGet ( \"https://localhost:9000/upload.html\" ) ) ; org . junit . Assert . fail ( \"Expected<sp>server<sp>to<sp>reject<sp>connection\" ) ; } catch ( java . lang . Exception ignored ) { } } finally { server . halt ( ) ; } } clientBuilder ( boolean ) { return ssl ? com . questdb . net . http . HttpServerTest . createHttpClient_AcceptsUntrustedCerts ( ) : org . apache . http . impl . client . HttpClientBuilder . create ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( com . questdb . net . http . HttpServerTest . clientBuilder ( true ) . build ( ) . execute ( new org . apache . http . client . methods . HttpGet ( \"https://localhost:9000/upload.html\" ) ) )"}
{"focal": "getAllConnections ( java . lang . String , boolean ) { if ( \"String\" . equals ( type ) ) { type = null ; } java . util . List < com . streamreduce . core . model . Connection > connections = connectionDAO . allConnectionsOfType ( type ) ; return toJSON ( connections , summary ) ; }", "testMethod": "testGetAllConnections ( ) { org . mockito . Mockito . when ( mockConnectionDAO . allConnectionsOfType ( null ) ) . thenReturn ( feedConnections ) ; java . lang . String s = connectionManagementService . getAllConnections ( null , true ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( s )", "total": "testGetAllConnections ( ) { org . mockito . Mockito . when ( mockConnectionDAO . allConnectionsOfType ( null ) ) . thenReturn ( feedConnections ) ; java . lang . String s = connectionManagementService . getAllConnections ( null , true ) ; \"<AssertPlaceHolder>\" ; } getAllConnections ( java . lang . String , boolean ) { if ( \"String\" . equals ( type ) ) { type = null ; } java . util . List < com . streamreduce . core . model . Connection > connections = connectionDAO . allConnectionsOfType ( type ) ; return toJSON ( connections , summary ) ; }", "answer": "org . junit . Assert . assertNotNull ( s )"}
{"focal": "getClassLoader ( ) { return null ; }", "testMethod": "testTransformFilter ( ) { com . amadeus . session . agent . SessionSupportTransformer sct = new com . amadeus . session . agent . SessionSupportTransformer ( false ) ; java . lang . Class < com . amadeus . session . agent . MockFilter > clazz = com . amadeus . session . agent . MockFilter . class ; java . io . InputStream is = clazz . getClassLoader ( ) . getResourceAsStream ( \"com/amadeus/session/agent/MockFilter.class\" ) ; java . security . ProtectionDomain protectionDomain = mock ( java . security . ProtectionDomain . class ) ; byte [ ] classfileBuffer = com . amadeus . session . agent . TestServletContextAndFilterTransformer . readFully ( is ) ; byte [ ] result = sct . transform ( clazz . getClassLoader ( ) , clazz . getName ( ) , clazz , protectionDomain , classfileBuffer ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testTransformFilter ( ) { com . amadeus . session . agent . SessionSupportTransformer sct = new com . amadeus . session . agent . SessionSupportTransformer ( false ) ; java . lang . Class < com . amadeus . session . agent . MockFilter > clazz = com . amadeus . session . agent . MockFilter . class ; java . io . InputStream is = clazz . getClassLoader ( ) . getResourceAsStream ( \"com/amadeus/session/agent/MockFilter.class\" ) ; java . security . ProtectionDomain protectionDomain = mock ( java . security . ProtectionDomain . class ) ; byte [ ] classfileBuffer = com . amadeus . session . agent . TestServletContextAndFilterTransformer . readFully ( is ) ; byte [ ] result = sct . transform ( clazz . getClassLoader ( ) , clazz . getName ( ) , clazz , protectionDomain , classfileBuffer ) ; \"<AssertPlaceHolder>\" ; } getClassLoader ( ) { return null ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "parse ( java . lang . String ) { java . util . Map < com . stratio . decision . utils . DecisionSyntaxParser . Command , java . util . regex . Pattern > commandPatterns = new java . util . HashMap ( ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . ADD_QUERY , java . util . regex . Pattern . compile ( \"(create)(.*)\" 9 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . ALTER , java . util . regex . Pattern . compile ( \"(alter)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . COLUMNS , java . util . regex . Pattern . compile ( \"(create)(.*)\" 5 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . CREATE , java . util . regex . Pattern . compile ( \"(create)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . DROP , java . util . regex . Pattern . compile ( \"(drop)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . INDEX_START , java . util . regex . Pattern . compile ( \"(index<sp>start)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . INDEX_STOP , java . util . regex . Pattern . compile ( \"(index<sp>start)(.*)\" 0 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . INSERT , java . util . regex . Pattern . compile ( \"(create)(.*)\" 2 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . LIST , java . util . regex . Pattern . compile ( \"(create)(.*)\" 6 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . LISTEN_START , java . util . regex . Pattern . compile ( \"(listen<sp>start)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . LISTEN_STOP , java . util . regex . Pattern . compile ( \"(listen<sp>stop)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . REMOVE_QUERY , java . util . regex . Pattern . compile ( \"(remove<sp>query)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_CASSANDRA_START , java . util . regex . Pattern . compile ( \"(create)(.*)\" 3 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_CASSANDRA_STOP , java . util . regex . Pattern . compile ( \"(create)(.*)\" 1 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_MONGO_START , java . util . regex . Pattern . compile ( \"(index<sp>start)(.*)\" 1 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_MONGO_STOP , java . util . regex . Pattern . compile ( \"(save<sp>mongo<sp>stop)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_SOLR_START , java . util . regex . Pattern . compile ( \"(save<sp>solr<sp>start)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_SOLR_STOP , java . util . regex . Pattern . compile ( \"(create)(.*)\" 7 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . HELP , java . util . regex . Pattern . compile ( \"(create)(.*)\" 4 ) ) ; java . lang . String inputNormalized = input . toLowerCase ( ) . trim ( ) ; for ( Map . Entry < com . stratio . decision . utils . DecisionSyntaxParser . Command , java . util . regex . Pattern > p : commandPatterns . entrySet ( ) ) { java . util . regex . Matcher matcher = p . getValue ( ) . matcher ( inputNormalized ) ; if ( matcher . find ( ) ) { java . lang . String filtered = \"(create)(.*)\" 0 ; if ( ( matcher . groupCount ( ) ) > 1 ) { filtered = matcher . group ( 2 ) ; } switch ( p . getKey ( ) ) { case ADD_QUERY : return addQuery ( filtered ) ; case ALTER : return alterStream ( filtered ) ; case COLUMNS : return columns ( filtered ) ; case CREATE : return create ( filtered ) ; case DROP : return drop ( filtered ) ; case INDEX_START : return indexStart ( filtered ) ; case INDEX_STOP : return indexStop ( filtered ) ; case INSERT : return insert ( filtered ) ; case LIST : return list ( filtered ) ; case LISTEN_START : return listenStart ( filtered ) ; case LISTEN_STOP : return listenStop ( filtered ) ; case REMOVE_QUERY : return removeQuery ( filtered ) ; case SAVE_CASSANDRA_START : return saveCassandraStart ( filtered ) ; case SAVE_CASSANDRA_STOP : return saveCassandraStop ( filtered ) ; case SAVE_MONGO_START : return saveMongoStart ( filtered ) ; case SAVE_MONGO_STOP : return saveMongoStop ( filtered ) ; case SAVE_SOLR_START : return saveSolrStart ( filtered ) ; case SAVE_SOLR_STOP : return saveSolrStop ( filtered ) ;", "testMethod": "parseAgentStartWrongFile ( ) { java . lang . String command = \"agent<sp>start<sp>--file<sp>/wrong/path/file<sp>--port<sp>1000\" ; try { parser . parse ( command ) ; org . junit . Assert . fail ( ) ; } catch ( com . stratio . ingestion . utils . IngestionParserException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e )", "total": "parseAgentStartWrongFile ( ) { java . lang . String command = \"agent<sp>start<sp>--file<sp>/wrong/path/file<sp>--port<sp>1000\" ; try { parser . parse ( command ) ; org . junit . Assert . fail ( ) ; } catch ( com . stratio . ingestion . utils . IngestionParserException e ) { \"<AssertPlaceHolder>\" ; } } parse ( java . lang . String ) { java . util . Map < com . stratio . decision . utils . DecisionSyntaxParser . Command , java . util . regex . Pattern > commandPatterns = new java . util . HashMap ( ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . ADD_QUERY , java . util . regex . Pattern . compile ( \"(create)(.*)\" 9 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . ALTER , java . util . regex . Pattern . compile ( \"(alter)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . COLUMNS , java . util . regex . Pattern . compile ( \"(create)(.*)\" 5 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . CREATE , java . util . regex . Pattern . compile ( \"(create)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . DROP , java . util . regex . Pattern . compile ( \"(drop)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . INDEX_START , java . util . regex . Pattern . compile ( \"(index<sp>start)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . INDEX_STOP , java . util . regex . Pattern . compile ( \"(index<sp>start)(.*)\" 0 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . INSERT , java . util . regex . Pattern . compile ( \"(create)(.*)\" 2 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . LIST , java . util . regex . Pattern . compile ( \"(create)(.*)\" 6 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . LISTEN_START , java . util . regex . Pattern . compile ( \"(listen<sp>start)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . LISTEN_STOP , java . util . regex . Pattern . compile ( \"(listen<sp>stop)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . REMOVE_QUERY , java . util . regex . Pattern . compile ( \"(remove<sp>query)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_CASSANDRA_START , java . util . regex . Pattern . compile ( \"(create)(.*)\" 3 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_CASSANDRA_STOP , java . util . regex . Pattern . compile ( \"(create)(.*)\" 1 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_MONGO_START , java . util . regex . Pattern . compile ( \"(index<sp>start)(.*)\" 1 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_MONGO_STOP , java . util . regex . Pattern . compile ( \"(save<sp>mongo<sp>stop)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_SOLR_START , java . util . regex . Pattern . compile ( \"(save<sp>solr<sp>start)(.*)\" ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . SAVE_SOLR_STOP , java . util . regex . Pattern . compile ( \"(create)(.*)\" 7 ) ) ; commandPatterns . put ( com . stratio . decision . utils . DecisionSyntaxParser . Command . HELP , java . util . regex . Pattern . compile ( \"(create)(.*)\" 4 ) ) ; java . lang . String inputNormalized = input . toLowerCase ( ) . trim ( ) ; for ( Map . Entry < com . stratio . decision . utils . DecisionSyntaxParser . Command , java . util . regex . Pattern > p : commandPatterns . entrySet ( ) ) { java . util . regex . Matcher matcher = p . getValue ( ) . matcher ( inputNormalized ) ; if ( matcher . find ( ) ) { java . lang . String filtered = \"(create)(.*)\" 0 ; if ( ( matcher . groupCount ( ) ) > 1 ) { filtered = matcher . group ( 2 ) ; } switch ( p . getKey ( ) ) { case ADD_QUERY : return addQuery ( filtered ) ; case ALTER : return alterStream ( filtered ) ; case COLUMNS : return columns ( filtered ) ; case CREATE : return create ( filtered ) ; case DROP : return drop ( filtered ) ; case INDEX_START : return indexStart ( filtered ) ; case INDEX_STOP : return indexStop ( filtered ) ; case INSERT : return insert ( filtered ) ; case LIST : return list ( filtered ) ; case LISTEN_START : return listenStart ( filtered ) ; case LISTEN_STOP : return listenStop ( filtered ) ; case REMOVE_QUERY : return removeQuery ( filtered ) ; case SAVE_CASSANDRA_START : return saveCassandraStart ( filtered ) ; case SAVE_CASSANDRA_STOP : return saveCassandraStop ( filtered ) ; case SAVE_MONGO_START : return saveMongoStart ( filtered ) ; case SAVE_MONGO_STOP : return saveMongoStop ( filtered ) ; case SAVE_SOLR_START : return saveSolrStart ( filtered ) ; case SAVE_SOLR_STOP : return saveSolrStop ( filtered ) ;", "answer": "org . junit . Assert . assertNotNull ( e )"}
{"focal": "deserialize ( java . lang . Class , byte [ ] , int ) { TResult result1 = super . deserialize ( manifest , body , size ) ; TResult result2 = super . deserialize ( manifest , new java . io . ByteArrayInputStream ( body , 0 , size ) , buffer ) ; if ( manifest . isArray ( ) ) { if ( ( manifest . getComponentType ( ) ) == ( double . class ) ) { com . dslplatform . json . generated . types . DoubleAsserts . assertNullableArrayOfOneEquals ( ( ( double [ ] ) ( result1 ) ) , ( ( double [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( float . class ) ) { com . dslplatform . json . generated . types . FloatAsserts . assertNullableArrayOfOneEquals ( ( ( float [ ] ) ( result1 ) ) , ( ( float [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( int . class ) ) { com . dslplatform . json . generated . types . IntegerAsserts . assertNullableArrayOfOneEquals ( ( ( int [ ] ) ( result1 ) ) , ( ( int [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( long . class ) ) { com . dslplatform . json . generated . types . LongAsserts . assertNullableArrayOfOneEquals ( ( ( long [ ] ) ( result1 ) ) , ( ( long [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( boolean . class ) ) { com . dslplatform . json . generated . types . BooleanAsserts . assertNullableArrayOfOneEquals ( ( ( boolean [ ] ) ( result1 ) ) , ( ( boolean [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( byte . class ) ) { com . dslplatform . json . generated . types . BinaryAsserts . assertNullableEquals ( ( ( byte [ ] ) ( result1 ) ) , ( ( byte [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( java . awt . image . BufferedImage . class ) ) { com . dslplatform . json . generated . types . ImageAsserts . assertNullableArrayOfNullableEquals ( ( ( java . awt . image . BufferedImage [ ] ) ( result1 ) ) , ( ( java . awt . image . BufferedImage [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( org . w3c . dom . Element . class ) ) { com . dslplatform . json . generated . types . XmlAsserts . assertNullableArrayOfNullableEquals ( ( ( org . w3c . dom . Element [ ] ) ( result1 ) ) , ( ( org . w3c . dom . Element [ ] ) ( result2 ) ) ) ; } else { org . junit . Assert . assertArrayEquals ( ( ( java . lang . Object [ ] ) ( result1 ) ) , ( ( java . lang . Object [ ] ) ( result2 ) ) ) ; } } else if ( manifest == ( java . awt . image . BufferedImage . class ) ) { com . dslplatform . json . generated . types . ImageAsserts . assertNullableEquals ( ( ( java . awt . image . BufferedImage ) ( result1 ) ) , ( ( java . awt . image . BufferedImage ) ( result2 ) ) ) ; } else if ( manifest == ( org . w3c . dom . Element . class ) ) { com . dslplatform . json . generated . types . XmlAsserts . assertNullableEquals ( ( ( org . w3c . dom . Element ) ( result1 ) ) , ( ( org . w3c . dom . Element ) ( result2 ) ) ) ; } else { org . junit . Assert . assertEquals ( result1 , result2 ) ; } return result1 ; }", "testMethod": "classWithUnusedProperty ( ) { byte [ ] bytes = \"{\\\"p1\\\":123,\\\"p2\\\":\\\"abc\\\"}\" . getBytes ( \"UTF-8\" ) ; com . dslplatform . json . ObjectFormatTest . UnusedProperty deser = dslJsonFull . deserialize ( com . dslplatform . json . ObjectFormatTest . UnusedProperty . class , bytes , bytes . length ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( deser )", "total": "classWithUnusedProperty ( ) { byte [ ] bytes = \"{\\\"p1\\\":123,\\\"p2\\\":\\\"abc\\\"}\" . getBytes ( \"UTF-8\" ) ; com . dslplatform . json . ObjectFormatTest . UnusedProperty deser = dslJsonFull . deserialize ( com . dslplatform . json . ObjectFormatTest . UnusedProperty . class , bytes , bytes . length ) ; \"<AssertPlaceHolder>\" ; } deserialize ( java . lang . Class , byte [ ] , int ) { TResult result1 = super . deserialize ( manifest , body , size ) ; TResult result2 = super . deserialize ( manifest , new java . io . ByteArrayInputStream ( body , 0 , size ) , buffer ) ; if ( manifest . isArray ( ) ) { if ( ( manifest . getComponentType ( ) ) == ( double . class ) ) { com . dslplatform . json . generated . types . DoubleAsserts . assertNullableArrayOfOneEquals ( ( ( double [ ] ) ( result1 ) ) , ( ( double [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( float . class ) ) { com . dslplatform . json . generated . types . FloatAsserts . assertNullableArrayOfOneEquals ( ( ( float [ ] ) ( result1 ) ) , ( ( float [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( int . class ) ) { com . dslplatform . json . generated . types . IntegerAsserts . assertNullableArrayOfOneEquals ( ( ( int [ ] ) ( result1 ) ) , ( ( int [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( long . class ) ) { com . dslplatform . json . generated . types . LongAsserts . assertNullableArrayOfOneEquals ( ( ( long [ ] ) ( result1 ) ) , ( ( long [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( boolean . class ) ) { com . dslplatform . json . generated . types . BooleanAsserts . assertNullableArrayOfOneEquals ( ( ( boolean [ ] ) ( result1 ) ) , ( ( boolean [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( byte . class ) ) { com . dslplatform . json . generated . types . BinaryAsserts . assertNullableEquals ( ( ( byte [ ] ) ( result1 ) ) , ( ( byte [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( java . awt . image . BufferedImage . class ) ) { com . dslplatform . json . generated . types . ImageAsserts . assertNullableArrayOfNullableEquals ( ( ( java . awt . image . BufferedImage [ ] ) ( result1 ) ) , ( ( java . awt . image . BufferedImage [ ] ) ( result2 ) ) ) ; } else if ( ( manifest . getComponentType ( ) ) == ( org . w3c . dom . Element . class ) ) { com . dslplatform . json . generated . types . XmlAsserts . assertNullableArrayOfNullableEquals ( ( ( org . w3c . dom . Element [ ] ) ( result1 ) ) , ( ( org . w3c . dom . Element [ ] ) ( result2 ) ) ) ; } else { org . junit . Assert . assertArrayEquals ( ( ( java . lang . Object [ ] ) ( result1 ) ) , ( ( java . lang . Object [ ] ) ( result2 ) ) ) ; } } else if ( manifest == ( java . awt . image . BufferedImage . class ) ) { com . dslplatform . json . generated . types . ImageAsserts . assertNullableEquals ( ( ( java . awt . image . BufferedImage ) ( result1 ) ) , ( ( java . awt . image . BufferedImage ) ( result2 ) ) ) ; } else if ( manifest == ( org . w3c . dom . Element . class ) ) { com . dslplatform . json . generated . types . XmlAsserts . assertNullableEquals ( ( ( org . w3c . dom . Element ) ( result1 ) ) , ( ( org . w3c . dom . Element ) ( result2 ) ) ) ; } else { org . junit . Assert . assertEquals ( result1 , result2 ) ; } return result1 ; }", "answer": "org . junit . Assert . assertNotNull ( deser )"}
{"focal": "findByUserName ( java . lang . String ) { try { java . util . List < de . jetwick . data . JUser > list = new java . util . ArrayList < de . jetwick . data . JUser > ( ) ; query ( list , new de . jetwick . es . TweetQuery ( ) . addFilterQuery ( \"user\" , uName . toLowerCase ( ) ) . setSize ( 10 ) ) ; if ( list . isEmpty ( ) ) return null ; return list . get ( 0 ) ; } catch ( java . lang . Exception ex ) { throw new java . lang . RuntimeException ( ex ) ; } }", "testMethod": "testIdVsName ( ) { de . jetwick . data . JTweet fTweet = createTweet ( 5 , \"@karsten<sp>bla<sp>bli\" , \"peter\" ) ; twSearch . testUpdate ( fTweet ) ; fTweet = createTweet ( 6 , \"@peter<sp>bla<sp>bli\" , \"karsten\" ) ; twSearch . testUpdate ( fTweet ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( twSearch . findByUserName ( \"karsten\" ) )", "total": "testIdVsName ( ) { de . jetwick . data . JTweet fTweet = createTweet ( 5 , \"@karsten<sp>bla<sp>bli\" , \"peter\" ) ; twSearch . testUpdate ( fTweet ) ; fTweet = createTweet ( 6 , \"@peter<sp>bla<sp>bli\" , \"karsten\" ) ; twSearch . testUpdate ( fTweet ) ; \"<AssertPlaceHolder>\" ; } findByUserName ( java . lang . String ) { try { java . util . List < de . jetwick . data . JUser > list = new java . util . ArrayList < de . jetwick . data . JUser > ( ) ; query ( list , new de . jetwick . es . TweetQuery ( ) . addFilterQuery ( \"user\" , uName . toLowerCase ( ) ) . setSize ( 10 ) ) ; if ( list . isEmpty ( ) ) return null ; return list . get ( 0 ) ; } catch ( java . lang . Exception ex ) { throw new java . lang . RuntimeException ( ex ) ; } }", "answer": "org . junit . Assert . assertNotNull ( twSearch . findByUserName ( \"karsten\" ) )"}
{"focal": "accumulate ( long , long , java . time . Duration ) { if ( ! ( this . singleThreadedReader ) ) { throw new java . lang . IllegalStateException ( \"Accumulate<sp>is<sp>only<sp>supported<sp>in<sp>single<sp>reader<sp>mode.\" ) ; } if ( ! ( this . isRunning ( ) ) ) { return null ; } io . nats . client . impl . NatsMessage msg = this . queue . poll ( ) ; if ( msg == null ) { msg = waitForTimeout ( timeout ) ; if ( ( ! ( this . isRunning ( ) ) ) || ( msg == null ) ) { return null ; } } long size = msg . getSizeInBytes ( ) ; if ( ( maxMessages <= 1 ) || ( size >= maxSize ) ) { this . sizeInBytes . addAndGet ( ( - size ) ) ; this . length . decrementAndGet ( ) ; signalIfNotEmpty ( ) ; return msg ; } long count = 1 ; io . nats . client . impl . NatsMessage cursor = msg ; while ( cursor != null ) { io . nats . client . impl . NatsMessage next = this . queue . peek ( ) ; if ( next != null ) { long s = next . getSizeInBytes ( ) ; if ( ( maxSize < 0 ) || ( ( size + s ) < maxSize ) ) { size += s ; count ++ ; cursor . next = this . queue . poll ( ) ; cursor = cursor . next ; if ( count == maxMessages ) { break ; } } else { break ; } } else { break ; } } this . sizeInBytes . addAndGet ( ( - size ) ) ; this . length . addAndGet ( ( - count ) ) ; signalIfNotEmpty ( ) ; return msg ; }", "testMethod": "testMultiAccumulate ( ) { io . nats . client . impl . MessageQueue q = new io . nats . client . impl . MessageQueue ( true ) ; q . push ( new io . nats . client . impl . NatsMessage ( \"PING\" ) ) ; q . push ( new io . nats . client . impl . NatsMessage ( \"PING\" ) ) ; q . push ( new io . nats . client . impl . NatsMessage ( \"PING\" ) ) ; io . nats . client . impl . NatsMessage msg = q . accumulate ( 100 , 3 , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( msg )", "total": "testMultiAccumulate ( ) { io . nats . client . impl . MessageQueue q = new io . nats . client . impl . MessageQueue ( true ) ; q . push ( new io . nats . client . impl . NatsMessage ( \"PING\" ) ) ; q . push ( new io . nats . client . impl . NatsMessage ( \"PING\" ) ) ; q . push ( new io . nats . client . impl . NatsMessage ( \"PING\" ) ) ; io . nats . client . impl . NatsMessage msg = q . accumulate ( 100 , 3 , null ) ; \"<AssertPlaceHolder>\" ; } accumulate ( long , long , java . time . Duration ) { if ( ! ( this . singleThreadedReader ) ) { throw new java . lang . IllegalStateException ( \"Accumulate<sp>is<sp>only<sp>supported<sp>in<sp>single<sp>reader<sp>mode.\" ) ; } if ( ! ( this . isRunning ( ) ) ) { return null ; } io . nats . client . impl . NatsMessage msg = this . queue . poll ( ) ; if ( msg == null ) { msg = waitForTimeout ( timeout ) ; if ( ( ! ( this . isRunning ( ) ) ) || ( msg == null ) ) { return null ; } } long size = msg . getSizeInBytes ( ) ; if ( ( maxMessages <= 1 ) || ( size >= maxSize ) ) { this . sizeInBytes . addAndGet ( ( - size ) ) ; this . length . decrementAndGet ( ) ; signalIfNotEmpty ( ) ; return msg ; } long count = 1 ; io . nats . client . impl . NatsMessage cursor = msg ; while ( cursor != null ) { io . nats . client . impl . NatsMessage next = this . queue . peek ( ) ; if ( next != null ) { long s = next . getSizeInBytes ( ) ; if ( ( maxSize < 0 ) || ( ( size + s ) < maxSize ) ) { size += s ; count ++ ; cursor . next = this . queue . poll ( ) ; cursor = cursor . next ; if ( count == maxMessages ) { break ; } } else { break ; } } else { break ; } } this . sizeInBytes . addAndGet ( ( - size ) ) ; this . length . addAndGet ( ( - count ) ) ; signalIfNotEmpty ( ) ; return msg ; }", "answer": "org . junit . Assert . assertNotNull ( msg )"}
{"focal": "executeIRODSQuery ( org . irods . jargon . core . query . AbstractIRODSGenQuery , int ) { org . irods . jargon . core . pub . IRODSGenQueryExecutorImpl . log . info ( \"executeIRODSQuery()\" ) ; return executeIRODSQueryInZone ( irodsQuery , continueIndex , null ) ; }", "testMethod": "testExecuteIRODSQueryBuilderQueryWithOrderByDesc ( ) { org . irods . jargon . core . query . IRODSGenQueryBuilder builder = new org . irods . jargon . core . query . IRODSGenQueryBuilder ( true , null ) ; final java . lang . String zoneKey = org . irods . jargon . core . pub . IRODSGenQueryExecutorImplTest . testingProperties . getProperty ( TestingPropertiesHelper . IRODS_ZONE_KEY ) . trim ( ) ; builder . addSelectAsGenQueryValue ( RodsGenQueryEnum . COL_R_RESC_NAME ) . addSelectAsGenQueryValue ( RodsGenQueryEnum . COL_R_ZONE_NAME ) . addConditionAsGenQueryField ( RodsGenQueryEnum . COL_R_ZONE_NAME , QueryConditionOperators . EQUAL , zoneKey ) . addOrderByGenQueryField ( RodsGenQueryEnum . COL_R_RESC_NAME , GenQueryOrderByField . OrderByType . DESC ) ; org . irods . jargon . core . connection . IRODSAccount irodsAccount = org . irods . jargon . core . pub . IRODSGenQueryExecutorImplTest . testingPropertiesHelper . buildIRODSAccountFromTestProperties ( org . irods . jargon . core . pub . IRODSGenQueryExecutorImplTest . testingProperties ) ; org . irods . jargon . core . pub . IRODSAccessObjectFactory accessObjectFactory = org . irods . jargon . core . pub . IRODSGenQueryExecutorImplTest . irodsFileSystem . getIRODSAccessObjectFactory ( ) ; org . irods . jargon . core . pub . IRODSGenQueryExecutor irodsGenQueryExecutor = accessObjectFactory . getIRODSGenQueryExecutor ( irodsAccount ) ; org . irods . jargon . core . query . IRODSGenQueryFromBuilder query = builder . exportIRODSQueryFromBuilder ( 50 ) ; org . irods . jargon . core . query . IRODSQueryResultSetInterface resultSet = irodsGenQueryExecutor . executeIRODSQuery ( query , 0 ) ; \"<AssertPlaceHolder>\" ; java . lang . String last = \"\" ; java . lang . String current = \"\" ; for ( org . irods . jargon . core . query . IRODSQueryResultRow row : resultSet . getResults ( ) ) { current = row . getColumn ( 0 ) ; if ( ! ( last . isEmpty ( ) ) ) { current . compareTo ( last ) ; } last = current ; } }", "assertLine": "org . junit . Assert . assertNotNull ( resultSet )", "total": "testExecuteIRODSQueryBuilderQueryWithOrderByDesc ( ) { org . irods . jargon . core . query . IRODSGenQueryBuilder builder = new org . irods . jargon . core . query . IRODSGenQueryBuilder ( true , null ) ; final java . lang . String zoneKey = org . irods . jargon . core . pub . IRODSGenQueryExecutorImplTest . testingProperties . getProperty ( TestingPropertiesHelper . IRODS_ZONE_KEY ) . trim ( ) ; builder . addSelectAsGenQueryValue ( RodsGenQueryEnum . COL_R_RESC_NAME ) . addSelectAsGenQueryValue ( RodsGenQueryEnum . COL_R_ZONE_NAME ) . addConditionAsGenQueryField ( RodsGenQueryEnum . COL_R_ZONE_NAME , QueryConditionOperators . EQUAL , zoneKey ) . addOrderByGenQueryField ( RodsGenQueryEnum . COL_R_RESC_NAME , GenQueryOrderByField . OrderByType . DESC ) ; org . irods . jargon . core . connection . IRODSAccount irodsAccount = org . irods . jargon . core . pub . IRODSGenQueryExecutorImplTest . testingPropertiesHelper . buildIRODSAccountFromTestProperties ( org . irods . jargon . core . pub . IRODSGenQueryExecutorImplTest . testingProperties ) ; org . irods . jargon . core . pub . IRODSAccessObjectFactory accessObjectFactory = org . irods . jargon . core . pub . IRODSGenQueryExecutorImplTest . irodsFileSystem . getIRODSAccessObjectFactory ( ) ; org . irods . jargon . core . pub . IRODSGenQueryExecutor irodsGenQueryExecutor = accessObjectFactory . getIRODSGenQueryExecutor ( irodsAccount ) ; org . irods . jargon . core . query . IRODSGenQueryFromBuilder query = builder . exportIRODSQueryFromBuilder ( 50 ) ; org . irods . jargon . core . query . IRODSQueryResultSetInterface resultSet = irodsGenQueryExecutor . executeIRODSQuery ( query , 0 ) ; \"<AssertPlaceHolder>\" ; java . lang . String last = \"\" ; java . lang . String current = \"\" ; for ( org . irods . jargon . core . query . IRODSQueryResultRow row : resultSet . getResults ( ) ) { current = row . getColumn ( 0 ) ; if ( ! ( last . isEmpty ( ) ) ) { current . compareTo ( last ) ; } last = current ; } } executeIRODSQuery ( org . irods . jargon . core . query . AbstractIRODSGenQuery , int ) { org . irods . jargon . core . pub . IRODSGenQueryExecutorImpl . log . info ( \"executeIRODSQuery()\" ) ; return executeIRODSQueryInZone ( irodsQuery , continueIndex , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( resultSet )"}
{"focal": "getHeader ( java . lang . String ) { java . lang . String [ ] s = headerMap . get ( name ) ; return ( s == null ) || ( ( s . length ) == 0 ) ? null : s [ 0 ] ; }", "testMethod": "sb08_ResponseHeader_onPojo_value ( ) { org . apache . juneau . rest . annotation . HeaderInfo x = org . apache . juneau . rest . annotation . ResponseHeaderAnnotationTest . sb . getResponseInfo ( \"/sb08\" , \"get\" , 200 ) . getHeader ( \"H\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( x )", "total": "sb08_ResponseHeader_onPojo_value ( ) { org . apache . juneau . rest . annotation . HeaderInfo x = org . apache . juneau . rest . annotation . ResponseHeaderAnnotationTest . sb . getResponseInfo ( \"/sb08\" , \"get\" , 200 ) . getHeader ( \"H\" ) ; \"<AssertPlaceHolder>\" ; } getHeader ( java . lang . String ) { java . lang . String [ ] s = headerMap . get ( name ) ; return ( s == null ) || ( ( s . length ) == 0 ) ? null : s [ 0 ] ; }", "answer": "org . junit . Assert . assertNotNull ( x )"}
{"focal": "write ( org . apache . hadoop . io . Text , org . apache . hadoop . io . Text ) { writer . append ( converter . convert ( ( readKey ? key . toString ( ) : value . toString ( ) ) ) ) ; }", "testMethod": "testWriteWithCounter ( ) { eu . dnetlib . iis . common . schemas . Identifier identifier = eu . dnetlib . iis . common . schemas . Identifier . newBuilder ( ) . setId ( \"id-1\" ) . build ( ) ; java . lang . String namedOutputMeta = \"meta\" ; java . lang . String namedOutputFault = \"fault\" ; org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( ) ; conf . setBoolean ( eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs . COUNTERS_ENABLED , true ) ; conf . set ( eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs . MULTIPLE_OUTPUTS , ( ( namedOutputMeta + '<sp>' ) + namedOutputFault ) ) ; conf . setClass ( ( ( ( eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs . MO_PREFIX ) + namedOutputMeta ) + ( eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs . FORMAT ) ) , eu . dnetlib . iis . common . javamapreduce . hack . MockOutputFormat . class , org . apache . hadoop . mapreduce . OutputFormat . class ) ; doReturn ( eu . dnetlib . iis . common . javamapreduce . hack . MockOutputFormat . class ) . when ( context ) . getOutputFormatClass ( ) ; doReturn ( conf ) . when ( context ) . getConfiguration ( ) ; doReturn ( counter ) . when ( context ) . getCounter ( eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs . COUNTERS_GROUP , namedOutputMeta ) ; doReturn ( taskAttemptId ) . when ( context ) . getTaskAttemptID ( ) ; doReturn ( new org . apache . hadoop . mapreduce . JobID ( ) ) . when ( taskAttemptId ) . getJobID ( ) ; eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs multipleOutputs = new eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs ( context ) ; org . apache . hadoop . mapreduce . RecordWriter < ? , ? > recordWriter = multipleOutputs . getRecordWriter ( context , namedOutputMeta ) ; multipleOutputs . write ( namedOutputMeta , identifier ) ; \"<AssertPlaceHolder>\" ; verify ( counter , times ( 1 ) ) . increment ( 1 ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( recordWriter )", "total": "testWriteWithCounter ( ) { eu . dnetlib . iis . common . schemas . Identifier identifier = eu . dnetlib . iis . common . schemas . Identifier . newBuilder ( ) . setId ( \"id-1\" ) . build ( ) ; java . lang . String namedOutputMeta = \"meta\" ; java . lang . String namedOutputFault = \"fault\" ; org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( ) ; conf . setBoolean ( eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs . COUNTERS_ENABLED , true ) ; conf . set ( eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs . MULTIPLE_OUTPUTS , ( ( namedOutputMeta + '<sp>' ) + namedOutputFault ) ) ; conf . setClass ( ( ( ( eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs . MO_PREFIX ) + namedOutputMeta ) + ( eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs . FORMAT ) ) , eu . dnetlib . iis . common . javamapreduce . hack . MockOutputFormat . class , org . apache . hadoop . mapreduce . OutputFormat . class ) ; doReturn ( eu . dnetlib . iis . common . javamapreduce . hack . MockOutputFormat . class ) . when ( context ) . getOutputFormatClass ( ) ; doReturn ( conf ) . when ( context ) . getConfiguration ( ) ; doReturn ( counter ) . when ( context ) . getCounter ( eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs . COUNTERS_GROUP , namedOutputMeta ) ; doReturn ( taskAttemptId ) . when ( context ) . getTaskAttemptID ( ) ; doReturn ( new org . apache . hadoop . mapreduce . JobID ( ) ) . when ( taskAttemptId ) . getJobID ( ) ; eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs multipleOutputs = new eu . dnetlib . iis . common . javamapreduce . hack . AvroMultipleOutputs ( context ) ; org . apache . hadoop . mapreduce . RecordWriter < ? , ? > recordWriter = multipleOutputs . getRecordWriter ( context , namedOutputMeta ) ; multipleOutputs . write ( namedOutputMeta , identifier ) ; \"<AssertPlaceHolder>\" ; verify ( counter , times ( 1 ) ) . increment ( 1 ) ; } write ( org . apache . hadoop . io . Text , org . apache . hadoop . io . Text ) { writer . append ( converter . convert ( ( readKey ? key . toString ( ) : value . toString ( ) ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( recordWriter )"}
{"focal": "getUserDefinedVariablesAsProperty ( ) { return getProperty ( this . getClass ( ) . getSimpleName ( ) ) ; }", "testMethod": "testGetUserDefinedVariablesAsProperty ( ) { System . out . println ( \"getUserDefinedVariablesAsProperty\" ) ; org . apache . jmeter . config . Arguments vars = new org . apache . jmeter . config . Arguments ( ) ; vars . addArgument ( \"key\" , \"value\" ) ; instance . setUserDefinedVariables ( vars ) ; org . apache . jmeter . testelement . property . JMeterProperty result = instance . getUserDefinedVariablesAsProperty ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetUserDefinedVariablesAsProperty ( ) { System . out . println ( \"getUserDefinedVariablesAsProperty\" ) ; org . apache . jmeter . config . Arguments vars = new org . apache . jmeter . config . Arguments ( ) ; vars . addArgument ( \"key\" , \"value\" ) ; instance . setUserDefinedVariables ( vars ) ; org . apache . jmeter . testelement . property . JMeterProperty result = instance . getUserDefinedVariablesAsProperty ( ) ; \"<AssertPlaceHolder>\" ; } getUserDefinedVariablesAsProperty ( ) { return getProperty ( this . getClass ( ) . getSimpleName ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getDefaultPaymentConfiguration ( ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "testMethod": "getDefaultPaymentConfiguration_asReseller ( ) { container . login ( givenReseller ( ) . getKey ( ) , UserRoleType . RESELLER_MANAGER . name ( ) ) ; java . util . Set < org . oscm . internal . vo . VOPaymentType > list = as . getDefaultPaymentConfiguration ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( list )", "total": "getDefaultPaymentConfiguration_asReseller ( ) { container . login ( givenReseller ( ) . getKey ( ) , UserRoleType . RESELLER_MANAGER . name ( ) ) ; java . util . Set < org . oscm . internal . vo . VOPaymentType > list = as . getDefaultPaymentConfiguration ( ) ; \"<AssertPlaceHolder>\" ; } getDefaultPaymentConfiguration ( ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( list )"}
{"focal": "getValue ( org . oscm . app . vmware . business . VMwareValue$Unit ) { if ( ( targetUnit != null ) && ( ( unit ) != null ) ) { double pow = java . lang . Math . pow ( 1024 , ( ( unit . factor ) - ( targetUnit . factor ) ) ) ; return ( value ) * pow ; } return value ; }", "testMethod": "testSerializeVOServiceComplex2 ( ) { java . lang . String serializedData = getSerializedDataFromFile ( \"SerializedVOService.xml\" ) ; org . oscm . domobjects . TriggerProcessParameter param = new org . oscm . domobjects . TriggerProcessParameter ( ) ; param . getDataContainer ( ) . setSerializedValue ( org . oscm . encrypter . AESEncrypter . encrypt ( serializedData ) ) ; org . oscm . internal . vo . VOService service = org . oscm . domobjects . TriggerProcessParameterData . getVOFromSerialization ( org . oscm . internal . vo . VOService . class , param . getValue ( java . lang . String . class ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( service )", "total": "testSerializeVOServiceComplex2 ( ) { java . lang . String serializedData = getSerializedDataFromFile ( \"SerializedVOService.xml\" ) ; org . oscm . domobjects . TriggerProcessParameter param = new org . oscm . domobjects . TriggerProcessParameter ( ) ; param . getDataContainer ( ) . setSerializedValue ( org . oscm . encrypter . AESEncrypter . encrypt ( serializedData ) ) ; org . oscm . internal . vo . VOService service = org . oscm . domobjects . TriggerProcessParameterData . getVOFromSerialization ( org . oscm . internal . vo . VOService . class , param . getValue ( java . lang . String . class ) ) ; \"<AssertPlaceHolder>\" ; } getValue ( org . oscm . app . vmware . business . VMwareValue$Unit ) { if ( ( targetUnit != null ) && ( ( unit ) != null ) ) { double pow = java . lang . Math . pow ( 1024 , ( ( unit . factor ) - ( targetUnit . factor ) ) ) ; return ( value ) * pow ; } return value ; }", "answer": "org . junit . Assert . assertNotNull ( service )"}
{"focal": "setUpExperiment ( java . lang . String [ ] ) { org . eclipse . tracecompass . tmf . core . trace . ITmfTrace [ ] traces = new org . eclipse . tracecompass . tmf . core . trace . ITmfTrace [ traceFiles . length ] ; int i = 0 ; for ( java . lang . String traceFile : traceFiles ) { org . eclipse . tracecompass . analysis . os . linux . core . tests . stubs . trace . TmfXmlKernelTraceStub trace = new org . eclipse . tracecompass . analysis . os . linux . core . tests . stubs . trace . TmfXmlKernelTraceStub ( ) ; org . eclipse . core . runtime . IPath filePath = org . eclipse . tracecompass . lttng2 . kernel . core . tests . Activator . getAbsoluteFilePath ( traceFile ) ; org . eclipse . core . runtime . IStatus status = trace . validate ( null , filePath . toOSString ( ) ) ; if ( ! ( status . isOK ( ) ) ) { org . junit . Assert . fail ( status . getException ( ) . getMessage ( ) ) ; } trace . initTrace ( null , filePath . toOSString ( ) , org . eclipse . tracecompass . tmf . core . event . ITmfEvent . class ) ; traces [ ( i ++ ) ] = trace ; } org . eclipse . tracecompass . tmf . core . trace . experiment . TmfExperiment experiment = new org . eclipse . tracecompass . tmf . core . trace . experiment . TmfExperiment ( org . eclipse . tracecompass . tmf . core . event . ITmfEvent . class , org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . EXPERIMENT , traces , org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . BLOCK_SIZE , null ) ; experiment . traceOpened ( new org . eclipse . tracecompass . tmf . core . signal . TmfTraceOpenedSignal ( this , experiment , null ) ) ; org . eclipse . tracecompass . tmf . core . analysis . IAnalysisModule module = null ; for ( org . eclipse . tracecompass . tmf . core . analysis . IAnalysisModule mod : org . eclipse . tracecompass . tmf . core . trace . TmfTraceUtils . getAnalysisModulesOfClass ( experiment , org . eclipse . tracecompass . analysis . graph . core . building . TmfGraphBuilderModule . class ) ) { module = mod ; } org . junit . Assert . assertNotNull ( module ) ; module . schedule ( ) ; org . junit . Assert . assertTrue ( module . waitForCompletion ( ) ) ; return experiment ; }", "testMethod": "testNetworkExchangeOneTraceSoftirq ( ) { org . eclipse . tracecompass . tmf . core . trace . ITmfTrace experiment = setUpExperiment ( \"testfiles/graph/simple_network_client.xml\" ) ; \"<AssertPlaceHolder>\" ; try { org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . internalTestNetworkExchangeOneTraceSoftirq ( experiment ) ; } finally { experiment . dispose ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( experiment )", "total": "testNetworkExchangeOneTraceSoftirq ( ) { org . eclipse . tracecompass . tmf . core . trace . ITmfTrace experiment = setUpExperiment ( \"testfiles/graph/simple_network_client.xml\" ) ; \"<AssertPlaceHolder>\" ; try { org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . internalTestNetworkExchangeOneTraceSoftirq ( experiment ) ; } finally { experiment . dispose ( ) ; } } setUpExperiment ( java . lang . String [ ] ) { org . eclipse . tracecompass . tmf . core . trace . ITmfTrace [ ] traces = new org . eclipse . tracecompass . tmf . core . trace . ITmfTrace [ traceFiles . length ] ; int i = 0 ; for ( java . lang . String traceFile : traceFiles ) { org . eclipse . tracecompass . analysis . os . linux . core . tests . stubs . trace . TmfXmlKernelTraceStub trace = new org . eclipse . tracecompass . analysis . os . linux . core . tests . stubs . trace . TmfXmlKernelTraceStub ( ) ; org . eclipse . core . runtime . IPath filePath = org . eclipse . tracecompass . lttng2 . kernel . core . tests . Activator . getAbsoluteFilePath ( traceFile ) ; org . eclipse . core . runtime . IStatus status = trace . validate ( null , filePath . toOSString ( ) ) ; if ( ! ( status . isOK ( ) ) ) { org . junit . Assert . fail ( status . getException ( ) . getMessage ( ) ) ; } trace . initTrace ( null , filePath . toOSString ( ) , org . eclipse . tracecompass . tmf . core . event . ITmfEvent . class ) ; traces [ ( i ++ ) ] = trace ; } org . eclipse . tracecompass . tmf . core . trace . experiment . TmfExperiment experiment = new org . eclipse . tracecompass . tmf . core . trace . experiment . TmfExperiment ( org . eclipse . tracecompass . tmf . core . event . ITmfEvent . class , org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . EXPERIMENT , traces , org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . BLOCK_SIZE , null ) ; experiment . traceOpened ( new org . eclipse . tracecompass . tmf . core . signal . TmfTraceOpenedSignal ( this , experiment , null ) ) ; org . eclipse . tracecompass . tmf . core . analysis . IAnalysisModule module = null ; for ( org . eclipse . tracecompass . tmf . core . analysis . IAnalysisModule mod : org . eclipse . tracecompass . tmf . core . trace . TmfTraceUtils . getAnalysisModulesOfClass ( experiment , org . eclipse . tracecompass . analysis . graph . core . building . TmfGraphBuilderModule . class ) ) { module = mod ; } org . junit . Assert . assertNotNull ( module ) ; module . schedule ( ) ; org . junit . Assert . assertTrue ( module . waitForCompletion ( ) ) ; return experiment ; }", "answer": "org . junit . Assert . assertNotNull ( experiment )"}
{"focal": "getAtom ( int ) { if ( ( idx < 0 ) || ( idx >= ( atomCount ) ) ) throw new java . lang . IndexOutOfBoundsException ( ( ( ( \"Atom<sp>index<sp>out<sp>of<sp>bounds:<sp>0<sp><=<sp>\" + idx ) + \"<sp><<sp>\" ) + ( atomCount ) ) ) ; return atoms [ idx ] ; }", "testMethod": "testTetrahedralChirality_IAtom_arrayIAtom_ITetrahedralChirality_Stereo ( ) { org . openscience . cdk . stereo . TetrahedralChirality chirality = new org . openscience . cdk . stereo . TetrahedralChirality ( org . openscience . cdk . stereo . TetrahedralChiralityTest . molecule . getAtom ( 1 ) , org . openscience . cdk . stereo . TetrahedralChiralityTest . ligands , org . openscience . cdk . interfaces . ITetrahedralChirality . Stereo . CLOCKWISE ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( chirality )", "total": "testTetrahedralChirality_IAtom_arrayIAtom_ITetrahedralChirality_Stereo ( ) { org . openscience . cdk . stereo . TetrahedralChirality chirality = new org . openscience . cdk . stereo . TetrahedralChirality ( org . openscience . cdk . stereo . TetrahedralChiralityTest . molecule . getAtom ( 1 ) , org . openscience . cdk . stereo . TetrahedralChiralityTest . ligands , org . openscience . cdk . interfaces . ITetrahedralChirality . Stereo . CLOCKWISE ) ; \"<AssertPlaceHolder>\" ; } getAtom ( int ) { if ( ( idx < 0 ) || ( idx >= ( atomCount ) ) ) throw new java . lang . IndexOutOfBoundsException ( ( ( ( \"Atom<sp>index<sp>out<sp>of<sp>bounds:<sp>0<sp><=<sp>\" + idx ) + \"<sp><<sp>\" ) + ( atomCount ) ) ) ; return atoms [ idx ] ; }", "answer": "org . junit . Assert . assertNotNull ( chirality )"}
{"focal": "getMetaData ( ) { checkClosed ( ) ; return new com . impossibl . postgres . jdbc . PGResultSetMetaData ( statement . connection , scroller . getResultFields ( ) , context . getCustomTypeMap ( ) ) ; }", "testMethod": "testProcedures ( ) { java . sql . DatabaseMetaData dbmd = con . getMetaData ( ) ; \"<AssertPlaceHolder>\" ; java . sql . ResultSet rs = dbmd . getProcedures ( null , null , null ) ; checkResultSetColumnLabels ( rs , \"PROCEDURE_CAT\" , \"PROCEDURE_SCHEM\" , \"PROCEDURE_NAME\" , null , null , null , \"REMARKS\" , \"PROCEDURE_TYPE\" , \"SPECIFIC_NAME\" ) ; rs . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( dbmd )", "total": "testProcedures ( ) { java . sql . DatabaseMetaData dbmd = con . getMetaData ( ) ; \"<AssertPlaceHolder>\" ; java . sql . ResultSet rs = dbmd . getProcedures ( null , null , null ) ; checkResultSetColumnLabels ( rs , \"PROCEDURE_CAT\" , \"PROCEDURE_SCHEM\" , \"PROCEDURE_NAME\" , null , null , null , \"REMARKS\" , \"PROCEDURE_TYPE\" , \"SPECIFIC_NAME\" ) ; rs . close ( ) ; } getMetaData ( ) { checkClosed ( ) ; return new com . impossibl . postgres . jdbc . PGResultSetMetaData ( statement . connection , scroller . getResultFields ( ) , context . getCustomTypeMap ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( dbmd )"}
{"focal": "findFile ( java . lang . String ) { java . io . File file = new java . io . File ( filename ) ; try { if ( ! ( file . exists ( ) ) ) { file = fr . gouv . vitam . common . PropertiesUtils . fileFromConfigFolder ( filename ) ; if ( ! ( file . exists ( ) ) ) { file = fr . gouv . vitam . common . PropertiesUtils . getResourceFile ( filename ) ; } } } catch ( final java . io . FileNotFoundException e ) { SysErrLogger . FAKE_LOGGER . ignoreLog ( e ) ; throw new java . io . FileNotFoundException ( ( \"File<sp>not<sp>found:<sp>\" + filename ) ) ; } if ( ! ( file . exists ( ) ) ) { throw new java . io . FileNotFoundException ( ( \"File<sp>not<sp>found:<sp>\" + filename ) ) ; } return file ; }", "testMethod": "getObjectWithdot ( ) { try ( java . io . FileInputStream in = new java . io . FileInputStream ( fr . gouv . vitam . common . PropertiesUtils . findFile ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . ARCHIVE_FILE_TXT ) ) ) { \"<AssertPlaceHolder>\" ; io . restassured . RestAssured . with ( ) . header ( GlobalDataRest . X_TENANT_ID , \"1\" ) . header ( GlobalDataRest . VITAM_CONTENT_LENGTH , \"8766\" ) . header ( GlobalDataRest . X_DIGEST_ALGORITHM , DigestType . SHA512 . getName ( ) ) . contentType ( MediaType . APPLICATION_OCTET_STREAM ) . content ( in ) . when ( ) . put ( ( ( ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECTS_URI ) + ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_TYPE_URI ) ) + ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_ID_URI ) ) , fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_CODE , \"id1.xml\" ) ; } checkOfferDatabaseExistingDocument ( \"1_object\" , \"id1.xml\" ) ; io . restassured . RestAssured . given ( ) . header ( GlobalDataRest . X_TENANT_ID , \"1\" ) . contentType ( MediaType . APPLICATION_JSON ) . then ( ) . statusCode ( Status . OK . getStatusCode ( ) ) . when ( ) . get ( ( ( ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECTS_URI ) + ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_TYPE_URI ) ) + ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_ID_URI ) ) , fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_CODE , \"id1.xml\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( in )", "total": "getObjectWithdot ( ) { try ( java . io . FileInputStream in = new java . io . FileInputStream ( fr . gouv . vitam . common . PropertiesUtils . findFile ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . ARCHIVE_FILE_TXT ) ) ) { \"<AssertPlaceHolder>\" ; io . restassured . RestAssured . with ( ) . header ( GlobalDataRest . X_TENANT_ID , \"1\" ) . header ( GlobalDataRest . VITAM_CONTENT_LENGTH , \"8766\" ) . header ( GlobalDataRest . X_DIGEST_ALGORITHM , DigestType . SHA512 . getName ( ) ) . contentType ( MediaType . APPLICATION_OCTET_STREAM ) . content ( in ) . when ( ) . put ( ( ( ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECTS_URI ) + ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_TYPE_URI ) ) + ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_ID_URI ) ) , fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_CODE , \"id1.xml\" ) ; } checkOfferDatabaseExistingDocument ( \"1_object\" , \"id1.xml\" ) ; io . restassured . RestAssured . given ( ) . header ( GlobalDataRest . X_TENANT_ID , \"1\" ) . contentType ( MediaType . APPLICATION_JSON ) . then ( ) . statusCode ( Status . OK . getStatusCode ( ) ) . when ( ) . get ( ( ( ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECTS_URI ) + ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_TYPE_URI ) ) + ( fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_ID_URI ) ) , fr . gouv . vitam . storage . offers . common . rest . DefaultOfferResourceTest . OBJECT_CODE , \"id1.xml\" ) ; } findFile ( java . lang . String ) { java . io . File file = new java . io . File ( filename ) ; try { if ( ! ( file . exists ( ) ) ) { file = fr . gouv . vitam . common . PropertiesUtils . fileFromConfigFolder ( filename ) ; if ( ! ( file . exists ( ) ) ) { file = fr . gouv . vitam . common . PropertiesUtils . getResourceFile ( filename ) ; } } } catch ( final java . io . FileNotFoundException e ) { SysErrLogger . FAKE_LOGGER . ignoreLog ( e ) ; throw new java . io . FileNotFoundException ( ( \"File<sp>not<sp>found:<sp>\" + filename ) ) ; } if ( ! ( file . exists ( ) ) ) { throw new java . io . FileNotFoundException ( ( \"File<sp>not<sp>found:<sp>\" + filename ) ) ; } return file ; }", "answer": "org . junit . Assert . assertNotNull ( in )"}
{"focal": "getContentView ( java . lang . String ) { return contentViews . get ( id ) ; }", "testMethod": "testCoreQueryWithSimpleDocumentModel ( ) { org . junit . Assume . assumeTrue ( coreFeature . getStorageConfiguration ( ) . supportsMultipleFulltextIndexes ( ) ) ; org . nuxeo . ecm . platform . contentview . jsf . ContentView contentView = service . getContentView ( \"CURRENT_DOCUMENT_CHILDREN_WITH_SIMPLE_DOC_MODEL\" ) ; \"<AssertPlaceHolder>\" ; java . lang . String parentIdParam = session . getRootDocument ( ) . getId ( ) ; org . nuxeo . ecm . platform . query . api . PageProvider < org . nuxeo . ecm . core . api . DocumentModel > pp = ( ( org . nuxeo . ecm . platform . query . api . PageProvider < org . nuxeo . ecm . core . api . DocumentModel > ) ( contentView . getPageProviderWithParams ( parentIdParam ) ) ) ; pp . setSearchDocumentModel ( new org . nuxeo . ecm . core . api . impl . SimpleDocumentModel ( ) ) ; checkCoreQueryWithSimpleDocumentModel ( parentIdParam , pp ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( contentView )", "total": "testCoreQueryWithSimpleDocumentModel ( ) { org . junit . Assume . assumeTrue ( coreFeature . getStorageConfiguration ( ) . supportsMultipleFulltextIndexes ( ) ) ; org . nuxeo . ecm . platform . contentview . jsf . ContentView contentView = service . getContentView ( \"CURRENT_DOCUMENT_CHILDREN_WITH_SIMPLE_DOC_MODEL\" ) ; \"<AssertPlaceHolder>\" ; java . lang . String parentIdParam = session . getRootDocument ( ) . getId ( ) ; org . nuxeo . ecm . platform . query . api . PageProvider < org . nuxeo . ecm . core . api . DocumentModel > pp = ( ( org . nuxeo . ecm . platform . query . api . PageProvider < org . nuxeo . ecm . core . api . DocumentModel > ) ( contentView . getPageProviderWithParams ( parentIdParam ) ) ) ; pp . setSearchDocumentModel ( new org . nuxeo . ecm . core . api . impl . SimpleDocumentModel ( ) ) ; checkCoreQueryWithSimpleDocumentModel ( parentIdParam , pp ) ; } getContentView ( java . lang . String ) { return contentViews . get ( id ) ; }", "answer": "org . junit . Assert . assertNotNull ( contentView )"}
{"focal": "build ( ) { return org . opendaylight . yangtools . yang . data . api . FixedYangInstanceIdentifier . create ( path , hash . build ( ) ) ; }", "testMethod": "revIncludeOnly ( ) { org . opendaylight . yangtools . yang . parser . stmt . reactor . ReactorDeclaredModel result = org . opendaylight . yangtools . yang . parser . rfc7950 . reactor . RFC7950Reactors . defaultReactor ( ) . newBuild ( ) . addSources ( org . opendaylight . yangtools . yang . stmt . IncludeRevisionsTest . SUBMOD_ONLY_REV , org . opendaylight . yangtools . yang . stmt . IncludeRevisionsTest . SUBMOD_ONLY_ROOT ) . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "revIncludeOnly ( ) { org . opendaylight . yangtools . yang . parser . stmt . reactor . ReactorDeclaredModel result = org . opendaylight . yangtools . yang . parser . rfc7950 . reactor . RFC7950Reactors . defaultReactor ( ) . newBuild ( ) . addSources ( org . opendaylight . yangtools . yang . stmt . IncludeRevisionsTest . SUBMOD_ONLY_REV , org . opendaylight . yangtools . yang . stmt . IncludeRevisionsTest . SUBMOD_ONLY_ROOT ) . build ( ) ; \"<AssertPlaceHolder>\" ; } build ( ) { return org . opendaylight . yangtools . yang . data . api . FixedYangInstanceIdentifier . create ( path , hash . build ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getMenu ( ) { return menu ; }", "testMethod": "testOnStartup ( ) { screen . init ( ) ; screen . onStartup ( ) ; verify ( explorer , times ( 1 ) ) . refresh ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( screen . getMenu ( ) )", "total": "testOnStartup ( ) { screen . init ( ) ; screen . onStartup ( ) ; verify ( explorer , times ( 1 ) ) . refresh ( ) ; \"<AssertPlaceHolder>\" ; } getMenu ( ) { return menu ; }", "answer": "org . junit . Assert . assertNotNull ( screen . getMenu ( ) )"}
{"focal": "getComment ( ) { return comment ; }", "testMethod": "commentTest ( ) { org . marc . everest . rmim . uv . cdar2 . pocd_mt000040uv . EntryRelationship entryRelationship = org . oscarehr . e2e . model . export . body . ImmunizationsModelTest . immunizationsModel . getComment ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entryRelationship )", "total": "commentTest ( ) { org . marc . everest . rmim . uv . cdar2 . pocd_mt000040uv . EntryRelationship entryRelationship = org . oscarehr . e2e . model . export . body . ImmunizationsModelTest . immunizationsModel . getComment ( ) ; \"<AssertPlaceHolder>\" ; } getComment ( ) { return comment ; }", "answer": "org . junit . Assert . assertNotNull ( entryRelationship )"}
{"focal": "newInstance ( ) { return org . apache . james . mime4j . dom . ServiceLoader . load ( org . apache . james . mime4j . dom . MessageServiceFactory . class ) ; }", "testMethod": "testNewInstance ( ) { org . apache . james . mime4j . dom . MessageServiceFactory factory = org . apache . james . mime4j . dom . MessageServiceFactory . newInstance ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( factory )", "total": "testNewInstance ( ) { org . apache . james . mime4j . dom . MessageServiceFactory factory = org . apache . james . mime4j . dom . MessageServiceFactory . newInstance ( ) ; \"<AssertPlaceHolder>\" ; } newInstance ( ) { return org . apache . james . mime4j . dom . ServiceLoader . load ( org . apache . james . mime4j . dom . MessageServiceFactory . class ) ; }", "answer": "org . junit . Assert . assertNotNull ( factory )"}
{"focal": "list ( ) { java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.care.account.list\" ) ; java . lang . String response = wxClient . get ( url ) ; com . riversoft . weixin . mp . care . Accounts . logger . debug ( \"list<sp>care<sp>accounts<sp>:{}\" , response ) ; com . riversoft . weixin . mp . care . Accounts . CareListResponse careListResponse = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . fromJson ( response , com . riversoft . weixin . mp . care . Accounts . CareListResponse . class ) ; return careListResponse . getList ( ) ; }", "testMethod": "testList ( ) { java . util . List < com . riversoft . weixin . mp . menu . Menu > menus = com . riversoft . weixin . mp . menu . Menus . defaultMenus ( ) . list ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( menus )", "total": "testList ( ) { java . util . List < com . riversoft . weixin . mp . menu . Menu > menus = com . riversoft . weixin . mp . menu . Menus . defaultMenus ( ) . list ( ) ; \"<AssertPlaceHolder>\" ; } list ( ) { java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.care.account.list\" ) ; java . lang . String response = wxClient . get ( url ) ; com . riversoft . weixin . mp . care . Accounts . logger . debug ( \"list<sp>care<sp>accounts<sp>:{}\" , response ) ; com . riversoft . weixin . mp . care . Accounts . CareListResponse careListResponse = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . fromJson ( response , com . riversoft . weixin . mp . care . Accounts . CareListResponse . class ) ; return careListResponse . getList ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( menus )"}
{"focal": "importTrustCertificate ( java . lang . String , java . lang . String ) { java . security . cert . Certificate certificate = org . sonatype . nexus . ssl . CertificateUtil . decodePEMFormattedCertificate ( certificateInPEM ) ; importTrustCertificate ( certificate , alias ) ; }", "testMethod": "importTrustCertificate_throwCertificateEncodingExceptionWhileCalculateSha1 ( ) { when ( certificate . getEncoded ( ) ) . thenThrow ( new java . security . cert . CertificateEncodingException ( \"Throwing<sp>exception<sp>for<sp>test\" ) ) ; java . security . cert . Certificate certAdded = underTest . importTrustCertificate ( certificate , \"test\" ) ; \"<AssertPlaceHolder>\" ; verify ( keyStoreManager ) . importTrustCertificate ( certificate , \"test\" ) ; verify ( databaseFreezeService ) . checkUnfrozen ( \"Unable<sp>to<sp>import<sp>a<sp>certificate<sp>while<sp>database<sp>is<sp>frozen.\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( certAdded )", "total": "importTrustCertificate_throwCertificateEncodingExceptionWhileCalculateSha1 ( ) { when ( certificate . getEncoded ( ) ) . thenThrow ( new java . security . cert . CertificateEncodingException ( \"Throwing<sp>exception<sp>for<sp>test\" ) ) ; java . security . cert . Certificate certAdded = underTest . importTrustCertificate ( certificate , \"test\" ) ; \"<AssertPlaceHolder>\" ; verify ( keyStoreManager ) . importTrustCertificate ( certificate , \"test\" ) ; verify ( databaseFreezeService ) . checkUnfrozen ( \"Unable<sp>to<sp>import<sp>a<sp>certificate<sp>while<sp>database<sp>is<sp>frozen.\" ) ; } importTrustCertificate ( java . lang . String , java . lang . String ) { java . security . cert . Certificate certificate = org . sonatype . nexus . ssl . CertificateUtil . decodePEMFormattedCertificate ( certificateInPEM ) ; importTrustCertificate ( certificate , alias ) ; }", "answer": "org . junit . Assert . assertNotNull ( certAdded )"}
{"focal": "getName ( ) { return m_name ; }", "testMethod": "testInstanceCreation ( ) { java . lang . String in = \"org.apache.felix.ipojo.runtime.core.test.components.InstantiateSimple-0\" ; org . osgi . framework . ServiceReference ref = ipojoHelper . getServiceReferenceByName ( org . apache . felix . ipojo . architecture . Architecture . class . getName ( ) , in ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ref )", "total": "testInstanceCreation ( ) { java . lang . String in = \"org.apache.felix.ipojo.runtime.core.test.components.InstantiateSimple-0\" ; org . osgi . framework . ServiceReference ref = ipojoHelper . getServiceReferenceByName ( org . apache . felix . ipojo . architecture . Architecture . class . getName ( ) , in ) ; \"<AssertPlaceHolder>\" ; } getName ( ) { return m_name ; }", "answer": "org . junit . Assert . assertNotNull ( ref )"}
{"focal": "getValue ( ) { return this . value ; }", "testMethod": "removeDecisionTable ( ) { final org . drools . workbench . screens . guided . dtable . client . widget . table . GuidedDecisionTableView . Presenter dtPresenter = makeDecisionTable ( ) ; final org . mockito . ArgumentCaptor < com . google . gwt . user . client . Command > afterRemovalCommandCaptor = org . mockito . ArgumentCaptor . forClass ( com . google . gwt . user . client . Command . class ) ; presenter . removeDecisionTable ( dtPresenter ) ; verify ( view , times ( 1 ) ) . removeDecisionTable ( eq ( dtPresenter . getView ( ) ) , afterRemovalCommandCaptor . capture ( ) ) ; final com . google . gwt . user . client . Command afterRemovalCommand = afterRemovalCommandCaptor . getValue ( ) ; \"<AssertPlaceHolder>\" ; afterRemovalCommand . execute ( ) ; verify ( dtPresenter , times ( 1 ) ) . onClose ( ) ; verify ( presenter , times ( 1 ) ) . removeLinksForDecisionTable ( eq ( dtPresenter ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( afterRemovalCommand )", "total": "removeDecisionTable ( ) { final org . drools . workbench . screens . guided . dtable . client . widget . table . GuidedDecisionTableView . Presenter dtPresenter = makeDecisionTable ( ) ; final org . mockito . ArgumentCaptor < com . google . gwt . user . client . Command > afterRemovalCommandCaptor = org . mockito . ArgumentCaptor . forClass ( com . google . gwt . user . client . Command . class ) ; presenter . removeDecisionTable ( dtPresenter ) ; verify ( view , times ( 1 ) ) . removeDecisionTable ( eq ( dtPresenter . getView ( ) ) , afterRemovalCommandCaptor . capture ( ) ) ; final com . google . gwt . user . client . Command afterRemovalCommand = afterRemovalCommandCaptor . getValue ( ) ; \"<AssertPlaceHolder>\" ; afterRemovalCommand . execute ( ) ; verify ( dtPresenter , times ( 1 ) ) . onClose ( ) ; verify ( presenter , times ( 1 ) ) . removeLinksForDecisionTable ( eq ( dtPresenter ) ) ; } getValue ( ) { return this . value ; }", "answer": "org . junit . Assert . assertNotNull ( afterRemovalCommand )"}
{"focal": "get ( java . lang . String , java . lang . String ) { java . lang . String value = map . get ( name ) ; if ( value == null ) { return defaultValue ; } else { return value ; } }", "testMethod": "deleteAndQueryInA_2 ( ) { final com . google . appengine . api . datastore . Entity entity = getService ( ) . get ( com . google . appengine . api . datastore . KeyFactory . createKey ( \"QT\" , 3 ) ) ; \"<AssertPlaceHolder>\" ; org . jboss . test . capedwarf . cluster . test . QueryTest . wrap ( new java . util . concurrent . Callable < java . lang . Void > ( ) { @ org . jboss . test . capedwarf . cluster . test . Override public org . jboss . test . capedwarf . cluster . test . Void call ( ) throws org . jboss . test . capedwarf . cluster . test . Exception { getService ( ) . delete ( entity . getKey ( ) ) ; return null ; } @ org . jboss . test . capedwarf . cluster . test . Override public java . lang . String toString ( ) { return \"deleteAndQueryInA_2\" ; } } ) ; com . google . appengine . api . datastore . Query query = new com . google . appengine . api . datastore . Query ( \"QT\" ) ; for ( com . google . appengine . api . datastore . Entity e : getService ( ) . prepare ( query ) . asIterable ( FetchOptions . Builder . withChunkSize ( 10 ) ) ) { org . junit . Assert . fail ( ( \"Should<sp>not<sp>be<sp>here:<sp>\" + e ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( entity )", "total": "deleteAndQueryInA_2 ( ) { final com . google . appengine . api . datastore . Entity entity = getService ( ) . get ( com . google . appengine . api . datastore . KeyFactory . createKey ( \"QT\" , 3 ) ) ; \"<AssertPlaceHolder>\" ; org . jboss . test . capedwarf . cluster . test . QueryTest . wrap ( new java . util . concurrent . Callable < java . lang . Void > ( ) { @ org . jboss . test . capedwarf . cluster . test . Override public org . jboss . test . capedwarf . cluster . test . Void call ( ) throws org . jboss . test . capedwarf . cluster . test . Exception { getService ( ) . delete ( entity . getKey ( ) ) ; return null ; } @ org . jboss . test . capedwarf . cluster . test . Override public java . lang . String toString ( ) { return \"deleteAndQueryInA_2\" ; } } ) ; com . google . appengine . api . datastore . Query query = new com . google . appengine . api . datastore . Query ( \"QT\" ) ; for ( com . google . appengine . api . datastore . Entity e : getService ( ) . prepare ( query ) . asIterable ( FetchOptions . Builder . withChunkSize ( 10 ) ) ) { org . junit . Assert . fail ( ( \"Should<sp>not<sp>be<sp>here:<sp>\" + e ) ) ; } } get ( java . lang . String , java . lang . String ) { java . lang . String value = map . get ( name ) ; if ( value == null ) { return defaultValue ; } else { return value ; } }", "answer": "org . junit . Assert . assertNotNull ( entity )"}
{"focal": "getMessage ( ) { return super . getMessage ( ) ; }", "testMethod": "testWrongCredentialsReq ( ) { try { esride . opendatabridge . agolclient . AgolGenerateTokenRequest req = new esride . opendatabridge . agolclient . AgolGenerateTokenRequest ( wrongParamMap . get ( \"username\" ) , wrongParamMap . get ( \"password\" ) , wrongParamMap . get ( \"referer\" ) , wrongParamMap . get ( \"url\" ) ) ; req . excReqWithJsonResp ( httpRequest , objectMapper ) ; org . junit . Assert . fail ( \"Should<sp>throw<sp>IOException\" ) ; } catch ( java . lang . IllegalArgumentException ex ) { org . junit . Assert . fail ( ex . getMessage ( ) ) ; } catch ( java . io . IOException ex ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( ex )", "total": "testWrongCredentialsReq ( ) { try { esride . opendatabridge . agolclient . AgolGenerateTokenRequest req = new esride . opendatabridge . agolclient . AgolGenerateTokenRequest ( wrongParamMap . get ( \"username\" ) , wrongParamMap . get ( \"password\" ) , wrongParamMap . get ( \"referer\" ) , wrongParamMap . get ( \"url\" ) ) ; req . excReqWithJsonResp ( httpRequest , objectMapper ) ; org . junit . Assert . fail ( \"Should<sp>throw<sp>IOException\" ) ; } catch ( java . lang . IllegalArgumentException ex ) { org . junit . Assert . fail ( ex . getMessage ( ) ) ; } catch ( java . io . IOException ex ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return super . getMessage ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( ex )"}
{"focal": "get ( java . lang . String ) { java . lang . String json = \"{\\\"card_id\\\":\\\"%s\\\"}\" ; com . riversoft . weixin . mp . card . Cards . logger . debug ( \"get<sp>card:<sp>{}\" , cardId ) ; java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.card.get\" ) ; java . lang . String response = wxClient . post ( url , java . lang . String . format ( json , cardId ) ) ; com . riversoft . weixin . mp . card . Cards . CardWrapper cardWrapper = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . fromJson ( response , com . riversoft . weixin . mp . card . Cards . CardWrapper . class ) ; return cardWrapper . getCard ( ) ; }", "testMethod": "testUpdate ( ) { com . riversoft . weixin . qy . agent . bean . Agent agent = com . riversoft . weixin . qy . agent . Agents . defaultAgents ( ) . get ( 45 ) ; agent . setName ( agent . getName ( ) ) ; agent . setDescription ( agent . getDescription ( ) ) ; com . riversoft . weixin . qy . agent . Agents . defaultAgents ( ) . update ( agent ) ; agent = com . riversoft . weixin . qy . agent . Agents . defaultAgents ( ) . get ( 45 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( agent )", "total": "testUpdate ( ) { com . riversoft . weixin . qy . agent . bean . Agent agent = com . riversoft . weixin . qy . agent . Agents . defaultAgents ( ) . get ( 45 ) ; agent . setName ( agent . getName ( ) ) ; agent . setDescription ( agent . getDescription ( ) ) ; com . riversoft . weixin . qy . agent . Agents . defaultAgents ( ) . update ( agent ) ; agent = com . riversoft . weixin . qy . agent . Agents . defaultAgents ( ) . get ( 45 ) ; \"<AssertPlaceHolder>\" ; } get ( java . lang . String ) { java . lang . String json = \"{\\\"card_id\\\":\\\"%s\\\"}\" ; com . riversoft . weixin . mp . card . Cards . logger . debug ( \"get<sp>card:<sp>{}\" , cardId ) ; java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.card.get\" ) ; java . lang . String response = wxClient . post ( url , java . lang . String . format ( json , cardId ) ) ; com . riversoft . weixin . mp . card . Cards . CardWrapper cardWrapper = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . fromJson ( response , com . riversoft . weixin . mp . card . Cards . CardWrapper . class ) ; return cardWrapper . getCard ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( agent )"}
{"focal": "toMetadata ( java . nio . file . Path ) { final org . apache . sis . metadata . iso . DefaultMetadata metadata = new org . apache . sis . metadata . iso . DefaultMetadata ( ) ; org . w3c . dom . Document doc = org . geotoolkit . util . DomUtilities . read ( cbersData ) ; final org . w3c . dom . Element root = doc . getDocumentElement ( ) ; org . w3c . dom . Element tmp = null ; final org . w3c . dom . Element img = org . geotoolkit . util . DomUtilities . firstElement ( doc . getDocumentElement ( ) , \"row\" 8 ) ; final org . apache . sis . metadata . iso . identification . DefaultDataIdentification identificationInfo = new org . apache . sis . metadata . iso . identification . DefaultDataIdentification ( ) ; final org . apache . sis . metadata . iso . spatial . DefaultGeorectified spatialRep = new org . apache . sis . metadata . iso . spatial . DefaultGeorectified ( ) ; final org . apache . sis . metadata . iso . citation . DefaultCitation citation = new org . apache . sis . metadata . iso . citation . DefaultCitation ( ) ; final org . apache . sis . metadata . iso . citation . DefaultResponsibleParty responsibleParty = new org . apache . sis . metadata . iso . citation . DefaultResponsibleParty ( ) ; final org . apache . sis . metadata . iso . content . DefaultImageDescription contentInfo = new org . apache . sis . metadata . iso . content . DefaultImageDescription ( ) ; final org . apache . sis . metadata . iso . quality . DefaultDataQuality qualityInfo = new org . apache . sis . metadata . iso . quality . DefaultDataQuality ( ) ; final org . apache . sis . metadata . iso . lineage . DefaultLineage lineage = new org . apache . sis . metadata . iso . lineage . DefaultLineage ( ) ; final org . apache . sis . metadata . iso . lineage . DefaultProcessStep processStep = new org . apache . sis . metadata . iso . lineage . DefaultProcessStep ( ) ; final org . apache . sis . metadata . iso . lineage . DefaultProcessing processInfo = new org . apache . sis . metadata . iso . lineage . DefaultProcessing ( ) ; final org . apache . sis . metadata . iso . citation . DefaultCitation softwareReference = new org . apache . sis . metadata . iso . citation . DefaultCitation ( ) ; final org . apache . sis . metadata . iso . citation . DefaultResponsibleParty processor = new org . apache . sis . metadata . iso . citation . DefaultResponsibleParty ( ) ; final org . apache . sis . metadata . iso . acquisition . DefaultAcquisitionInformation acquisitionInfo = new org . apache . sis . metadata . iso . acquisition . DefaultAcquisitionInformation ( ) ; final org . apache . sis . metadata . iso . acquisition . DefaultInstrument instrument = new org . apache . sis . metadata . iso . acquisition . DefaultInstrument ( ) ; final org . apache . sis . metadata . iso . acquisition . DefaultPlatform platform = new org . apache . sis . metadata . iso . acquisition . DefaultPlatform ( ) ; org . apache . sis . metadata . iso . DefaultMetadata isoData = new org . apache . sis . metadata . iso . DefaultMetadata ( ) ; metadata . getSpatialRepresentationInfo ( ) . add ( spatialRep ) ; metadata . getIdentificationInfo ( ) . add ( identificationInfo ) ; metadata . getDataQualityInfo ( ) . add ( qualityInfo ) ; metadata . getAcquisitionInformation ( ) . add ( acquisitionInfo ) ; qualityInfo . setLineage ( lineage ) ; lineage . getProcessSteps ( ) . add ( processStep ) ; identificationInfo . setCitation ( citation ) ; identificationInfo . getPointOfContacts ( ) . add ( responsibleParty ) ; processInfo . getSoftwareReferences ( ) . add ( softwareReference ) ; processStep . setProcessingInformation ( processInfo ) ; acquisitionInfo . getInstruments ( ) . add ( instrument ) ; acquisitionInfo . getPlatforms ( ) . add ( platform ) ; platform . setCitation ( new org . apache . sis . metadata . iso . citation . DefaultCitation ( \"CBERS\" ) ) ; final org . geotoolkit . temporal . object . ISODateParser fp = new org . geotoolkit . temporal . object . ISODateParser ( ) ; if ( img != null ) { org . w3c . dom . Element path = org . geotoolkit . util . DomUtilities . firstElement ( img , \"instrument\" 7 ) ; org . w3c . dom . Element row = org . geotoolkit . util . DomUtilities . firstElement ( img , \"row\" ) ; if ( ( path != null ) && ( row != null ) ) { java . lang . String code = ( ( path . getTextContent ( ) ) + '-' ) + ( row . getTextContent ( ) ) ; org . apache . sis . metadata . iso . extent . DefaultExtent extent = new org . apache . sis . metadata . iso . extent . DefaultExtent ( ) ; extent . getIdentifiers ( ) .", "testMethod": "CBERSTest ( ) { final java . nio . file . Path f = java . nio . file . Paths . get ( org . geotoolkit . metadata . cbers . CBERSTest . class . getResource ( \"/org/geotoolkit/metadata/cbers/CBERS_2B_CCD1XS_20080708_094_109_L2_BAND2.xml\" ) . toURI ( ) ) ; final org . opengis . metadata . Metadata meta = org . geotoolkit . metadata . cbers . CBERS . toMetadata ( f ) ; \"<AssertPlaceHolder>\" ; System . out . println ( meta . toString ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( meta )", "total": "CBERSTest ( ) { final java . nio . file . Path f = java . nio . file . Paths . get ( org . geotoolkit . metadata . cbers . CBERSTest . class . getResource ( \"/org/geotoolkit/metadata/cbers/CBERS_2B_CCD1XS_20080708_094_109_L2_BAND2.xml\" ) . toURI ( ) ) ; final org . opengis . metadata . Metadata meta = org . geotoolkit . metadata . cbers . CBERS . toMetadata ( f ) ; \"<AssertPlaceHolder>\" ; System . out . println ( meta . toString ( ) ) ; } toMetadata ( java . nio . file . Path ) { final org . apache . sis . metadata . iso . DefaultMetadata metadata = new org . apache . sis . metadata . iso . DefaultMetadata ( ) ; org . w3c . dom . Document doc = org . geotoolkit . util . DomUtilities . read ( cbersData ) ; final org . w3c . dom . Element root = doc . getDocumentElement ( ) ; org . w3c . dom . Element tmp = null ; final org . w3c . dom . Element img = org . geotoolkit . util . DomUtilities . firstElement ( doc . getDocumentElement ( ) , \"row\" 8 ) ; final org . apache . sis . metadata . iso . identification . DefaultDataIdentification identificationInfo = new org . apache . sis . metadata . iso . identification . DefaultDataIdentification ( ) ; final org . apache . sis . metadata . iso . spatial . DefaultGeorectified spatialRep = new org . apache . sis . metadata . iso . spatial . DefaultGeorectified ( ) ; final org . apache . sis . metadata . iso . citation . DefaultCitation citation = new org . apache . sis . metadata . iso . citation . DefaultCitation ( ) ; final org . apache . sis . metadata . iso . citation . DefaultResponsibleParty responsibleParty = new org . apache . sis . metadata . iso . citation . DefaultResponsibleParty ( ) ; final org . apache . sis . metadata . iso . content . DefaultImageDescription contentInfo = new org . apache . sis . metadata . iso . content . DefaultImageDescription ( ) ; final org . apache . sis . metadata . iso . quality . DefaultDataQuality qualityInfo = new org . apache . sis . metadata . iso . quality . DefaultDataQuality ( ) ; final org . apache . sis . metadata . iso . lineage . DefaultLineage lineage = new org . apache . sis . metadata . iso . lineage . DefaultLineage ( ) ; final org . apache . sis . metadata . iso . lineage . DefaultProcessStep processStep = new org . apache . sis . metadata . iso . lineage . DefaultProcessStep ( ) ; final org . apache . sis . metadata . iso . lineage . DefaultProcessing processInfo = new org . apache . sis . metadata . iso . lineage . DefaultProcessing ( ) ; final org . apache . sis . metadata . iso . citation . DefaultCitation softwareReference = new org . apache . sis . metadata . iso . citation . DefaultCitation ( ) ; final org . apache . sis . metadata . iso . citation . DefaultResponsibleParty processor = new org . apache . sis . metadata . iso . citation . DefaultResponsibleParty ( ) ; final org . apache . sis . metadata . iso . acquisition . DefaultAcquisitionInformation acquisitionInfo = new org . apache . sis . metadata . iso . acquisition . DefaultAcquisitionInformation ( ) ; final org . apache . sis . metadata . iso . acquisition . DefaultInstrument instrument = new org . apache . sis . metadata . iso . acquisition . DefaultInstrument ( ) ; final org . apache . sis . metadata . iso . acquisition . DefaultPlatform platform = new org . apache . sis . metadata . iso . acquisition . DefaultPlatform ( ) ; org . apache . sis . metadata . iso . DefaultMetadata isoData = new org . apache . sis . metadata . iso . DefaultMetadata ( ) ; metadata . getSpatialRepresentationInfo ( ) . add ( spatialRep ) ; metadata . getIdentificationInfo ( ) . add ( identificationInfo ) ; metadata . getDataQualityInfo ( ) . add ( qualityInfo ) ; metadata . getAcquisitionInformation ( ) . add ( acquisitionInfo ) ; qualityInfo . setLineage ( lineage ) ; lineage . getProcessSteps ( ) . add ( processStep ) ; identificationInfo . setCitation ( citation ) ; identificationInfo . getPointOfContacts ( ) . add ( responsibleParty ) ; processInfo . getSoftwareReferences ( ) . add ( softwareReference ) ; processStep . setProcessingInformation ( processInfo ) ; acquisitionInfo . getInstruments ( ) . add ( instrument ) ; acquisitionInfo . getPlatforms ( ) . add ( platform ) ; platform . setCitation ( new org . apache . sis . metadata . iso . citation . DefaultCitation ( \"CBERS\" ) ) ; final org . geotoolkit . temporal . object . ISODateParser fp = new org . geotoolkit . temporal . object . ISODateParser ( ) ; if ( img != null ) { org . w3c . dom . Element path = org . geotoolkit . util . DomUtilities . firstElement ( img , \"instrument\" 7 ) ; org . w3c . dom . Element row = org . geotoolkit . util . DomUtilities . firstElement ( img , \"row\" ) ; if ( ( path != null ) && ( row != null ) ) { java . lang . String code = ( ( path . getTextContent ( ) ) + '-' ) + ( row . getTextContent ( ) ) ; org . apache . sis . metadata . iso . extent . DefaultExtent extent = new org . apache . sis . metadata . iso . extent . DefaultExtent ( ) ; extent . getIdentifiers ( ) .", "answer": "org . junit . Assert . assertNotNull ( meta )"}
{"focal": "getTaskActionToolbox ( ) { return taskActionToolbox ; }", "testMethod": "testWithLockType ( ) { final org . apache . druid . indexing . common . task . Task task = org . apache . druid . indexing . common . task . NoopTask . create ( ) ; final org . apache . druid . indexing . common . actions . LockAcquireAction action = new org . apache . druid . indexing . common . actions . LockAcquireAction ( org . apache . druid . indexing . common . TaskLockType . EXCLUSIVE , org . apache . druid . java . util . common . Intervals . of ( \"2017-01-01/2017-01-02\" ) , 1000 ) ; actionTestKit . getTaskLockbox ( ) . add ( task ) ; final org . apache . druid . indexing . common . TaskLock lock = action . perform ( task , actionTestKit . getTaskActionToolbox ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( lock )", "total": "testWithLockType ( ) { final org . apache . druid . indexing . common . task . Task task = org . apache . druid . indexing . common . task . NoopTask . create ( ) ; final org . apache . druid . indexing . common . actions . LockAcquireAction action = new org . apache . druid . indexing . common . actions . LockAcquireAction ( org . apache . druid . indexing . common . TaskLockType . EXCLUSIVE , org . apache . druid . java . util . common . Intervals . of ( \"2017-01-01/2017-01-02\" ) , 1000 ) ; actionTestKit . getTaskLockbox ( ) . add ( task ) ; final org . apache . druid . indexing . common . TaskLock lock = action . perform ( task , actionTestKit . getTaskActionToolbox ( ) ) ; \"<AssertPlaceHolder>\" ; } getTaskActionToolbox ( ) { return taskActionToolbox ; }", "answer": "org . junit . Assert . assertNotNull ( lock )"}
{"focal": "getSoftwareIdentifiers ( ) { return java . util . Collections . unmodifiableSet ( new java . util . TreeSet ( softwareIdentifiers ) ) ; }", "testMethod": "testGetSoftwareIdentifiers ( ) { org . owasp . dependencycheck . dependency . Dependency instance = new org . owasp . dependencycheck . dependency . Dependency ( ) ; java . util . Set < org . owasp . dependencycheck . dependency . naming . Identifier > result = instance . getSoftwareIdentifiers ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetSoftwareIdentifiers ( ) { org . owasp . dependencycheck . dependency . Dependency instance = new org . owasp . dependencycheck . dependency . Dependency ( ) ; java . util . Set < org . owasp . dependencycheck . dependency . naming . Identifier > result = instance . getSoftwareIdentifiers ( ) ; \"<AssertPlaceHolder>\" ; } getSoftwareIdentifiers ( ) { return java . util . Collections . unmodifiableSet ( new java . util . TreeSet ( softwareIdentifiers ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getViewMap ( ) { return getViewMap ( true ) ; }", "testMethod": "testViewMapPostConstructViewMapEvent ( ) { javax . faces . context . FacesContext facesContext = org . easymock . EasyMock . createMock ( javax . faces . context . FacesContext . class ) ; javax . faces . application . Application application = org . easymock . EasyMock . createMock ( javax . faces . application . Application . class ) ; javax . faces . context . ExternalContext externalContext = org . easymock . EasyMock . createMock ( javax . faces . context . ExternalContext . class ) ; javax . servlet . http . HttpSession httpSession = org . easymock . EasyMock . createMock ( javax . servlet . http . HttpSession . class ) ; setFacesContext ( facesContext ) ; expect ( facesContext . getExternalContext ( ) ) . andReturn ( externalContext ) . anyTimes ( ) ; expect ( externalContext . getApplicationMap ( ) ) . andReturn ( null ) . anyTimes ( ) ; replay ( facesContext , externalContext ) ; javax . faces . component . UIViewRoot viewRoot = new javax . faces . component . UIViewRoot ( ) ; verify ( facesContext , externalContext ) ; reset ( facesContext , externalContext ) ; expect ( facesContext . getApplication ( ) ) . andReturn ( application ) . anyTimes ( ) ; expect ( application . getProjectStage ( ) ) . andReturn ( ProjectStage . UnitTest ) ; application . publishEvent ( facesContext , javax . faces . event . PostConstructViewMapEvent . class , javax . faces . component . UIViewRoot . class , viewRoot ) ; replay ( facesContext , application , externalContext , httpSession ) ; java . util . Map < java . lang . String , java . lang . Object > viewMap = viewRoot . getViewMap ( ) ; \"<AssertPlaceHolder>\" ; verify ( facesContext , application , externalContext , httpSession ) ; setFacesContext ( null ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( viewMap )", "total": "testViewMapPostConstructViewMapEvent ( ) { javax . faces . context . FacesContext facesContext = org . easymock . EasyMock . createMock ( javax . faces . context . FacesContext . class ) ; javax . faces . application . Application application = org . easymock . EasyMock . createMock ( javax . faces . application . Application . class ) ; javax . faces . context . ExternalContext externalContext = org . easymock . EasyMock . createMock ( javax . faces . context . ExternalContext . class ) ; javax . servlet . http . HttpSession httpSession = org . easymock . EasyMock . createMock ( javax . servlet . http . HttpSession . class ) ; setFacesContext ( facesContext ) ; expect ( facesContext . getExternalContext ( ) ) . andReturn ( externalContext ) . anyTimes ( ) ; expect ( externalContext . getApplicationMap ( ) ) . andReturn ( null ) . anyTimes ( ) ; replay ( facesContext , externalContext ) ; javax . faces . component . UIViewRoot viewRoot = new javax . faces . component . UIViewRoot ( ) ; verify ( facesContext , externalContext ) ; reset ( facesContext , externalContext ) ; expect ( facesContext . getApplication ( ) ) . andReturn ( application ) . anyTimes ( ) ; expect ( application . getProjectStage ( ) ) . andReturn ( ProjectStage . UnitTest ) ; application . publishEvent ( facesContext , javax . faces . event . PostConstructViewMapEvent . class , javax . faces . component . UIViewRoot . class , viewRoot ) ; replay ( facesContext , application , externalContext , httpSession ) ; java . util . Map < java . lang . String , java . lang . Object > viewMap = viewRoot . getViewMap ( ) ; \"<AssertPlaceHolder>\" ; verify ( facesContext , application , externalContext , httpSession ) ; setFacesContext ( null ) ; } getViewMap ( ) { return getViewMap ( true ) ; }", "answer": "org . junit . Assert . assertNotNull ( viewMap )"}
{"focal": "maakKopieMetDefaultGroep80 ( ) { if ( ! ( isGroep80Leeg ( ) ) ) { throw new java . lang . IllegalStateException ( \"Groep<sp>80<sp>is<sp>niet<sp>leeg.\" ) ; } return new nl . moderniseringgba . migratie . conversie . model . lo3 . categorie . Lo3InschrijvingInhoud ( datumIngangBlokkering , datumOpschortingBijhouding , redenOpschortingBijhoudingCode , datumEersteInschrijving , gemeentePKCode , indicatieGeheimCode , nl . moderniseringgba . migratie . conversie . model . lo3 . categorie . Lo3InschrijvingInhoud . DEFAULT_VERSIENUMMER , nl . moderniseringgba . migratie . conversie . model . lo3 . categorie . Lo3InschrijvingInhoud . DEFAULT_DATUMTIJDSTEMPEL , indicatiePKVolledigGeconverteerdCode ) ; }", "testMethod": "testMaakKopieMetDefaultGroep80Fout3 ( ) { final nl . bzk . migratiebrp . conversie . model . lo3 . categorie . Lo3InschrijvingInhoud groep80Gevuld = new nl . bzk . migratiebrp . conversie . model . lo3 . categorie . Lo3InschrijvingInhoud ( null , null , null , null , null , null , null , null , null , new nl . bzk . migratiebrp . conversie . model . lo3 . element . Lo3Datumtijdstempel ( 1L ) , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( groep80Gevuld . maakKopieMetDefaultGroep80 ( ) )", "total": "testMaakKopieMetDefaultGroep80Fout3 ( ) { final nl . bzk . migratiebrp . conversie . model . lo3 . categorie . Lo3InschrijvingInhoud groep80Gevuld = new nl . bzk . migratiebrp . conversie . model . lo3 . categorie . Lo3InschrijvingInhoud ( null , null , null , null , null , null , null , null , null , new nl . bzk . migratiebrp . conversie . model . lo3 . element . Lo3Datumtijdstempel ( 1L ) , null ) ; \"<AssertPlaceHolder>\" ; } maakKopieMetDefaultGroep80 ( ) { if ( ! ( isGroep80Leeg ( ) ) ) { throw new java . lang . IllegalStateException ( \"Groep<sp>80<sp>is<sp>niet<sp>leeg.\" ) ; } return new nl . moderniseringgba . migratie . conversie . model . lo3 . categorie . Lo3InschrijvingInhoud ( datumIngangBlokkering , datumOpschortingBijhouding , redenOpschortingBijhoudingCode , datumEersteInschrijving , gemeentePKCode , indicatieGeheimCode , nl . moderniseringgba . migratie . conversie . model . lo3 . categorie . Lo3InschrijvingInhoud . DEFAULT_VERSIENUMMER , nl . moderniseringgba . migratie . conversie . model . lo3 . categorie . Lo3InschrijvingInhoud . DEFAULT_DATUMTIJDSTEMPEL , indicatiePKVolledigGeconverteerdCode ) ; }", "answer": "org . junit . Assert . assertNotNull ( groep80Gevuld . maakKopieMetDefaultGroep80 ( ) )"}
{"focal": "getRelationshipByUuid ( java . lang . String , javax . servlet . http . HttpServletRequest ) { initRelationshipController ( ) ; org . openmrs . Relationship relationship = service . getRelationshipByUuid ( uuid ) ; return gson . toJson ( getRelationshipAsSimpleObject ( relationship ) ) ; }", "testMethod": "testGetRelationshipByUuid ( ) { java . lang . String result = controller . getRelationshipByUuid ( \"c18717dd-5d78-4a0e-84fc-ee62c5f0676a\" , request ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetRelationshipByUuid ( ) { java . lang . String result = controller . getRelationshipByUuid ( \"c18717dd-5d78-4a0e-84fc-ee62c5f0676a\" , request ) ; \"<AssertPlaceHolder>\" ; } getRelationshipByUuid ( java . lang . String , javax . servlet . http . HttpServletRequest ) { initRelationshipController ( ) ; org . openmrs . Relationship relationship = service . getRelationshipByUuid ( uuid ) ; return gson . toJson ( getRelationshipAsSimpleObject ( relationship ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getServiceAlertBeanAsPtSituationElementStructure ( org . onebusaway . transit_data . model . service_alerts . ServiceAlertBean ) { uk . org . siri . siri_2 . PtSituationElementStructure ptSit = new uk . org . siri . siri_2 . PtSituationElementStructure ( ) ; uk . org . siri . siri_2 . EntryQualifierStructure value = new uk . org . siri . siri_2 . EntryQualifierStructure ( ) ; value . setValue ( serviceAlert . getId ( ) ) ; ptSit . setSituationNumber ( value ) ; if ( ( serviceAlert . getCreationTime ( ) ) != 0 ) ptSit . setCreationTime ( org . onebusaway . nyc . presentation . impl . DateUtil . toXmlGregorianCalendar ( serviceAlert . getCreationTime ( ) ) ) ; handleDescriptions ( serviceAlert , ptSit ) ; handleOtherFields ( serviceAlert , ptSit ) ; handleAffects ( serviceAlert , ptSit ) ; handleConsequences ( serviceAlert , ptSit ) ; return ptSit ; }", "testMethod": "testGetServiceAlertBeanAsPtSituationElementStructure ( ) { org . onebusaway . transit_data . model . service_alerts . ServiceAlertBean serviceAlertBean = new org . onebusaway . transit_data . model . service_alerts . ServiceAlertBean ( ) ; uk . org . siri . siri . PtSituationElementStructure structure = getServiceAlertBeanAsPtSituationElementStructure ( serviceAlertBean ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( structure )", "total": "testGetServiceAlertBeanAsPtSituationElementStructure ( ) { org . onebusaway . transit_data . model . service_alerts . ServiceAlertBean serviceAlertBean = new org . onebusaway . transit_data . model . service_alerts . ServiceAlertBean ( ) ; uk . org . siri . siri . PtSituationElementStructure structure = getServiceAlertBeanAsPtSituationElementStructure ( serviceAlertBean ) ; \"<AssertPlaceHolder>\" ; } getServiceAlertBeanAsPtSituationElementStructure ( org . onebusaway . transit_data . model . service_alerts . ServiceAlertBean ) { uk . org . siri . siri_2 . PtSituationElementStructure ptSit = new uk . org . siri . siri_2 . PtSituationElementStructure ( ) ; uk . org . siri . siri_2 . EntryQualifierStructure value = new uk . org . siri . siri_2 . EntryQualifierStructure ( ) ; value . setValue ( serviceAlert . getId ( ) ) ; ptSit . setSituationNumber ( value ) ; if ( ( serviceAlert . getCreationTime ( ) ) != 0 ) ptSit . setCreationTime ( org . onebusaway . nyc . presentation . impl . DateUtil . toXmlGregorianCalendar ( serviceAlert . getCreationTime ( ) ) ) ; handleDescriptions ( serviceAlert , ptSit ) ; handleOtherFields ( serviceAlert , ptSit ) ; handleAffects ( serviceAlert , ptSit ) ; handleConsequences ( serviceAlert , ptSit ) ; return ptSit ; }", "answer": "org . junit . Assert . assertNotNull ( structure )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateAllergiesReactionsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ihe . AllergiesReactionsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ihe . builder . IHEBuilderFactory . createAllergiesReactionsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ihe . AllergiesReactionsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateAllergiesReactionsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ihe . AllergiesReactionsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ihe . builder . IHEBuilderFactory . createAllergiesReactionsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ihe . AllergiesReactionsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "searchFlow ( java . lang . String ) { java . util . List < org . openehealth . ipf . commons . flow . domain . Flow > results = ( ( java . util . List ) ( hibernateTemplate . execute ( new org . springframework . orm . hibernate3 . HibernateCallback ( ) { public java . lang . Object doInHibernate ( org . hibernate . Session session ) { return searchCallback . findFlowsByMessageQuery ( session , content ) ; } } ) ) ) ; if ( results . isEmpty ( ) ) { return null ; } else if ( ( results . size ( ) ) == 1 ) { return results . get ( 0 ) ; } org . junit . Assert . fail ( \"more<sp>than<sp>one<sp>flow<sp>returned\" ) ; return null ; }", "testMethod": "testReplayFlowWithMessage ( ) { java . lang . String searchKey = \"testReplayFlowWithMessage\" ; java . lang . Long id = persistFlowWithText ( searchKey ) ; testTransactionManager . commitTransaction ( ) ; testTransactionManager . beginTransaction ( ) ; org . openehealth . ipf . commons . flow . domain . Flow flow = flowRepository . find ( id ) ; flow . setAckCountExpected ( 1 ) ; flow . prepareReplay ( ) ; testTransactionManager . commitTransaction ( ) ; testTransactionManager . beginTransaction ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( searchFlow ( searchKey ) )", "total": "testReplayFlowWithMessage ( ) { java . lang . String searchKey = \"testReplayFlowWithMessage\" ; java . lang . Long id = persistFlowWithText ( searchKey ) ; testTransactionManager . commitTransaction ( ) ; testTransactionManager . beginTransaction ( ) ; org . openehealth . ipf . commons . flow . domain . Flow flow = flowRepository . find ( id ) ; flow . setAckCountExpected ( 1 ) ; flow . prepareReplay ( ) ; testTransactionManager . commitTransaction ( ) ; testTransactionManager . beginTransaction ( ) ; \"<AssertPlaceHolder>\" ; } searchFlow ( java . lang . String ) { java . util . List < org . openehealth . ipf . commons . flow . domain . Flow > results = ( ( java . util . List ) ( hibernateTemplate . execute ( new org . springframework . orm . hibernate3 . HibernateCallback ( ) { public java . lang . Object doInHibernate ( org . hibernate . Session session ) { return searchCallback . findFlowsByMessageQuery ( session , content ) ; } } ) ) ) ; if ( results . isEmpty ( ) ) { return null ; } else if ( ( results . size ( ) ) == 1 ) { return results . get ( 0 ) ; } org . junit . Assert . fail ( \"more<sp>than<sp>one<sp>flow<sp>returned\" ) ; return null ; }", "answer": "org . junit . Assert . assertNotNull ( searchFlow ( searchKey ) )"}
{"focal": "getCurrentUser ( ) { java . security . AccessControlContext context = java . security . AccessController . getContext ( ) ; javax . security . auth . Subject subject = javax . security . auth . Subject . getSubject ( context ) ; if ( ( subject == null ) || ( subject . getPrincipals ( org . apache . hadoop . security . User . class ) . isEmpty ( ) ) ) { return org . apache . hadoop . security . UserGroupInformation . getLoginUser ( ) ; } else { return new org . apache . hadoop . security . UserGroupInformation ( subject ) ; } }", "testMethod": "testCancelTokenSingleManager ( ) { for ( int i = 0 ; i < ( org . apache . hadoop . security . token . delegation . TestZKDelegationTokenSecretManager . TEST_RETRIES ) ; i ++ ) { org . apache . hadoop . security . token . delegation . web . DelegationTokenManager tm1 = null ; java . lang . String connectString = zkServer . getConnectString ( ) ; org . apache . hadoop . conf . Configuration conf = getSecretConf ( connectString ) ; tm1 = new org . apache . hadoop . security . token . delegation . web . DelegationTokenManager ( conf , new org . apache . hadoop . io . Text ( \"foo\" ) ) ; tm1 . init ( ) ; org . apache . hadoop . security . token . Token < org . apache . hadoop . security . token . delegation . web . DelegationTokenIdentifier > token = ( ( org . apache . hadoop . security . token . Token < org . apache . hadoop . security . token . delegation . web . DelegationTokenIdentifier > ) ( tm1 . createToken ( org . apache . hadoop . security . UserGroupInformation . getCurrentUser ( ) , \"foo\" ) ) ) ; \"<AssertPlaceHolder>\" ; tm1 . cancelToken ( token , \"foo\" ) ; try { verifyTokenFail ( tm1 , token ) ; org . junit . Assert . fail ( \"Expected<sp>InvalidToken\" ) ; } catch ( org . apache . hadoop . security . token . SecretManager it ) { it . printStackTrace ( ) ; } verifyDestroy ( tm1 , conf ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( token )", "total": "testCancelTokenSingleManager ( ) { for ( int i = 0 ; i < ( org . apache . hadoop . security . token . delegation . TestZKDelegationTokenSecretManager . TEST_RETRIES ) ; i ++ ) { org . apache . hadoop . security . token . delegation . web . DelegationTokenManager tm1 = null ; java . lang . String connectString = zkServer . getConnectString ( ) ; org . apache . hadoop . conf . Configuration conf = getSecretConf ( connectString ) ; tm1 = new org . apache . hadoop . security . token . delegation . web . DelegationTokenManager ( conf , new org . apache . hadoop . io . Text ( \"foo\" ) ) ; tm1 . init ( ) ; org . apache . hadoop . security . token . Token < org . apache . hadoop . security . token . delegation . web . DelegationTokenIdentifier > token = ( ( org . apache . hadoop . security . token . Token < org . apache . hadoop . security . token . delegation . web . DelegationTokenIdentifier > ) ( tm1 . createToken ( org . apache . hadoop . security . UserGroupInformation . getCurrentUser ( ) , \"foo\" ) ) ) ; \"<AssertPlaceHolder>\" ; tm1 . cancelToken ( token , \"foo\" ) ; try { verifyTokenFail ( tm1 , token ) ; org . junit . Assert . fail ( \"Expected<sp>InvalidToken\" ) ; } catch ( org . apache . hadoop . security . token . SecretManager it ) { it . printStackTrace ( ) ; } verifyDestroy ( tm1 , conf ) ; } } getCurrentUser ( ) { java . security . AccessControlContext context = java . security . AccessController . getContext ( ) ; javax . security . auth . Subject subject = javax . security . auth . Subject . getSubject ( context ) ; if ( ( subject == null ) || ( subject . getPrincipals ( org . apache . hadoop . security . User . class ) . isEmpty ( ) ) ) { return org . apache . hadoop . security . UserGroupInformation . getLoginUser ( ) ; } else { return new org . apache . hadoop . security . UserGroupInformation ( subject ) ; } }", "answer": "org . junit . Assert . assertNotNull ( token )"}
{"focal": "getInitializationError ( ) { edu . illinois . library . cantaloupe . processor . ImageMagickProcessor . initialize ( ) ; return edu . illinois . library . cantaloupe . processor . ImageMagickProcessor . initializationError ; }", "testMethod": "testGetInitializationErrorWithMissingBinaries ( ) { edu . illinois . library . cantaloupe . config . Configuration . getInstance ( ) . setProperty ( Key . FFMPEGPROCESSOR_PATH_TO_BINARIES , \"/bogus/bogus/bogus\" ) ; edu . illinois . library . cantaloupe . processor . FfmpegProcessor . resetInitialization ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance . getInitializationError ( ) )", "total": "testGetInitializationErrorWithMissingBinaries ( ) { edu . illinois . library . cantaloupe . config . Configuration . getInstance ( ) . setProperty ( Key . FFMPEGPROCESSOR_PATH_TO_BINARIES , \"/bogus/bogus/bogus\" ) ; edu . illinois . library . cantaloupe . processor . FfmpegProcessor . resetInitialization ( ) ; \"<AssertPlaceHolder>\" ; } getInitializationError ( ) { edu . illinois . library . cantaloupe . processor . ImageMagickProcessor . initialize ( ) ; return edu . illinois . library . cantaloupe . processor . ImageMagickProcessor . initializationError ; }", "answer": "org . junit . Assert . assertNotNull ( instance . getInitializationError ( ) )"}
{"focal": "latitute ( java . lang . String ) { org . jinstagram . utils . Preconditions . checkValidLatLong ( latitude , \"Invalid<sp>'lat'<sp>key\" ) ; this . params . put ( Constants . LATITUDE , latitude ) ; return this ; }", "testMethod": "testLatitute ( ) { org . jinstagram . realtime . InstagramSubscription fixture = new org . jinstagram . realtime . InstagramSubscription ( ) ; java . lang . String latitude = \"\" ; org . jinstagram . realtime . InstagramSubscription result = fixture . latitute ( latitude ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testLatitute ( ) { org . jinstagram . realtime . InstagramSubscription fixture = new org . jinstagram . realtime . InstagramSubscription ( ) ; java . lang . String latitude = \"\" ; org . jinstagram . realtime . InstagramSubscription result = fixture . latitute ( latitude ) ; \"<AssertPlaceHolder>\" ; } latitute ( java . lang . String ) { org . jinstagram . utils . Preconditions . checkValidLatLong ( latitude , \"Invalid<sp>'lat'<sp>key\" ) ; this . params . put ( Constants . LATITUDE , latitude ) ; return this ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getResourceBundle ( ) { return this . logger . getResourceBundle ( ) ; }", "testMethod": "testGetResourceBundle_1 ( ) { final org . apache . shindig . gadgets . oauth2 . logger . FilteredLogger fixture = org . apache . shindig . gadgets . oauth2 . logger . FilteredLogger . getFilteredLogger ( \"\" ) ; final java . util . ResourceBundle result = fixture . getResourceBundle ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetResourceBundle_1 ( ) { final org . apache . shindig . gadgets . oauth2 . logger . FilteredLogger fixture = org . apache . shindig . gadgets . oauth2 . logger . FilteredLogger . getFilteredLogger ( \"\" ) ; final java . util . ResourceBundle result = fixture . getResourceBundle ( ) ; \"<AssertPlaceHolder>\" ; } getResourceBundle ( ) { return this . logger . getResourceBundle ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "buildPrimitiveArraysJSON ( ) { com . liferay . portal . json . FooBean3 fooBean3 = new com . liferay . portal . json . FooBean3 ( ) ; initializePrimitiveArrays ( fooBean3 ) ; return com . liferay . portal . kernel . json . JSONFactoryUtil . serialize ( fooBean3 ) ; }", "testMethod": "testSerializePrimitiveArrays ( ) { java . lang . String json = buildPrimitiveArraysJSON ( ) ; \"<AssertPlaceHolder>\" ; checkJSONPrimitiveArrays ( json ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( json )", "total": "testSerializePrimitiveArrays ( ) { java . lang . String json = buildPrimitiveArraysJSON ( ) ; \"<AssertPlaceHolder>\" ; checkJSONPrimitiveArrays ( json ) ; } buildPrimitiveArraysJSON ( ) { com . liferay . portal . json . FooBean3 fooBean3 = new com . liferay . portal . json . FooBean3 ( ) ; initializePrimitiveArrays ( fooBean3 ) ; return com . liferay . portal . kernel . json . JSONFactoryUtil . serialize ( fooBean3 ) ; }", "answer": "org . junit . Assert . assertNotNull ( json )"}
{"focal": "getMessageDeliveryStatus ( ) { return messageDeliveryStatus ; }", "testMethod": "testGetNotificationMessageDelivery_validId ( ) { org . kuali . rice . ken . service . NotificationMessageDeliveryService nSvc = services . getNotificationMessageDeliveryService ( ) ; org . kuali . rice . ken . bo . NotificationMessageDelivery nmd = nSvc . getNotificationMessageDelivery ( TestConstants . VALID_MESSAGE_DELIVERY_ID ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( nmd . getMessageDeliveryStatus ( ) )", "total": "testGetNotificationMessageDelivery_validId ( ) { org . kuali . rice . ken . service . NotificationMessageDeliveryService nSvc = services . getNotificationMessageDeliveryService ( ) ; org . kuali . rice . ken . bo . NotificationMessageDelivery nmd = nSvc . getNotificationMessageDelivery ( TestConstants . VALID_MESSAGE_DELIVERY_ID ) ; \"<AssertPlaceHolder>\" ; } getMessageDeliveryStatus ( ) { return messageDeliveryStatus ; }", "answer": "org . junit . Assert . assertNotNull ( nmd . getMessageDeliveryStatus ( ) )"}
{"focal": "findBgs ( ) { javax . persistence . Query q = createQuery ( \"t\" , \"t.exp1<sp>=<sp>:s<sp>OR<sp>t.exp2<sp>=<sp>:s<sp>OR<sp>t.exp3<sp>=<sp>:s<sp>OR<sp>t.exp4<sp>=<sp>:s<sp>OR<sp>t.exp5<sp>=<sp>:s<sp>OR<sp>t.exp6<sp>=<sp>:s<sp>OR<sp>t.exp7<sp>=<sp>:s\" ) ; q . setParameter ( \"s\" , \"BG\" ) ; return q . getResultList ( ) ; }", "testMethod": "testFindBgs ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dao . findBgs ( ) )", "total": "testFindBgs ( ) { \"<AssertPlaceHolder>\" ; } findBgs ( ) { javax . persistence . Query q = createQuery ( \"t\" , \"t.exp1<sp>=<sp>:s<sp>OR<sp>t.exp2<sp>=<sp>:s<sp>OR<sp>t.exp3<sp>=<sp>:s<sp>OR<sp>t.exp4<sp>=<sp>:s<sp>OR<sp>t.exp5<sp>=<sp>:s<sp>OR<sp>t.exp6<sp>=<sp>:s<sp>OR<sp>t.exp7<sp>=<sp>:s\" ) ; q . setParameter ( \"s\" , \"BG\" ) ; return q . getResultList ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( dao . findBgs ( ) )"}
{"focal": "addFeature ( de . devsurf . injection . guice . scanner . features . ScannerFeature ) { _collector . addScannerFeature ( listener ) ; }", "testMethod": "createDynamicModule ( ) { de . devsurf . injection . guice . scanner . StartupModule startup = de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . asm . ASMClasspathScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( de . devsurf . injection . guice . test . configuration . classpath . ClasspathConfigTests . class ) ) ; startup . addFeature ( de . devsurf . injection . guice . configuration . features . ConfigurationFeature . class ) ; com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( startup ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( injector )", "total": "createDynamicModule ( ) { de . devsurf . injection . guice . scanner . StartupModule startup = de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . asm . ASMClasspathScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( de . devsurf . injection . guice . test . configuration . classpath . ClasspathConfigTests . class ) ) ; startup . addFeature ( de . devsurf . injection . guice . configuration . features . ConfigurationFeature . class ) ; com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( startup ) ; \"<AssertPlaceHolder>\" ; } addFeature ( de . devsurf . injection . guice . scanner . features . ScannerFeature ) { _collector . addScannerFeature ( listener ) ; }", "answer": "org . junit . Assert . assertNotNull ( injector )"}
{"focal": "getBrandById ( java . lang . Integer ) { com . micro . rent . pc . entity . Brand brand = brandDao . queryById ( id ) ; return brand ; }", "testMethod": "queryBrand ( ) { java . lang . Integer id = 1 ; com . micro . rent . pc . entity . Brand wrap = brandService . getBrandById ( id ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( wrap )", "total": "queryBrand ( ) { java . lang . Integer id = 1 ; com . micro . rent . pc . entity . Brand wrap = brandService . getBrandById ( id ) ; \"<AssertPlaceHolder>\" ; } getBrandById ( java . lang . Integer ) { com . micro . rent . pc . entity . Brand brand = brandDao . queryById ( id ) ; return brand ; }", "answer": "org . junit . Assert . assertNotNull ( wrap )"}
{"focal": "getCode ( ) { return code ; }", "testMethod": "testInvalidClientSecret ( ) { java . lang . String code = authClient . authorizeClient ( clientEntity , \"test1<sp>test2\" ) . getCode ( ) ; \"<AssertPlaceHolder>\" ; restClient . setFollowRedirects ( false ) ; com . github . hburgmeier . jerseyoauth2 . testsuite . base . client . ResourceClient client = new com . github . hburgmeier . jerseyoauth2 . testsuite . base . client . ResourceClient ( clientEntity . getClientId ( ) , \"Invalid\" , \"test1<sp>test2\" ) ; try { client . getAccessToken ( code ) ; org . junit . Assert . fail ( ) ; } catch ( com . github . hburgmeier . jerseyoauth2 . client . scribe . TokenExtractorException e ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( code )", "total": "testInvalidClientSecret ( ) { java . lang . String code = authClient . authorizeClient ( clientEntity , \"test1<sp>test2\" ) . getCode ( ) ; \"<AssertPlaceHolder>\" ; restClient . setFollowRedirects ( false ) ; com . github . hburgmeier . jerseyoauth2 . testsuite . base . client . ResourceClient client = new com . github . hburgmeier . jerseyoauth2 . testsuite . base . client . ResourceClient ( clientEntity . getClientId ( ) , \"Invalid\" , \"test1<sp>test2\" ) ; try { client . getAccessToken ( code ) ; org . junit . Assert . fail ( ) ; } catch ( com . github . hburgmeier . jerseyoauth2 . client . scribe . TokenExtractorException e ) { } } getCode ( ) { return code ; }", "answer": "org . junit . Assert . assertNotNull ( code )"}
{"focal": "getConfiguration ( ) { return configuration ; }", "testMethod": "testGetPlanPolicy ( ) { when ( securityContext . hasPermission ( anyObject ( ) , anyString ( ) ) ) . thenReturn ( true ) ; when ( storage . getPlanVersion ( anyString ( ) , anyString ( ) , anyString ( ) ) ) . thenReturn ( new com . t1t . apim . beans . plans . PlanVersionBean ( ) ) ; com . t1t . apim . facades . PolicyBean pb = new com . t1t . apim . facades . PolicyBean ( ) ; pb . setType ( PolicyType . Plan ) ; pb . setOrganizationId ( \"someorg\" ) ; pb . setEntityId ( \"someplan\" ) ; pb . setEntityVersion ( \"someversion\" ) ; pb . setConfiguration ( \"someconfiguration\" ) ; when ( storage . getPolicy ( anyObject ( ) , anyString ( ) , anyString ( ) , anyString ( ) , anyLong ( ) ) ) . thenReturn ( pb ) ; orgFacade . getPlanPolicy ( \"someorg\" , \"someplan\" , \"someversion\" , 1000 ) ; verify ( storage ) . getPolicy ( PolicyType . Plan , \"someorg\" , \"someplan\" , \"someversion\" , 1000L ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pb . getConfiguration ( ) )", "total": "testGetPlanPolicy ( ) { when ( securityContext . hasPermission ( anyObject ( ) , anyString ( ) ) ) . thenReturn ( true ) ; when ( storage . getPlanVersion ( anyString ( ) , anyString ( ) , anyString ( ) ) ) . thenReturn ( new com . t1t . apim . beans . plans . PlanVersionBean ( ) ) ; com . t1t . apim . facades . PolicyBean pb = new com . t1t . apim . facades . PolicyBean ( ) ; pb . setType ( PolicyType . Plan ) ; pb . setOrganizationId ( \"someorg\" ) ; pb . setEntityId ( \"someplan\" ) ; pb . setEntityVersion ( \"someversion\" ) ; pb . setConfiguration ( \"someconfiguration\" ) ; when ( storage . getPolicy ( anyObject ( ) , anyString ( ) , anyString ( ) , anyString ( ) , anyLong ( ) ) ) . thenReturn ( pb ) ; orgFacade . getPlanPolicy ( \"someorg\" , \"someplan\" , \"someversion\" , 1000 ) ; verify ( storage ) . getPolicy ( PolicyType . Plan , \"someorg\" , \"someplan\" , \"someversion\" , 1000L ) ; \"<AssertPlaceHolder>\" ; } getConfiguration ( ) { return configuration ; }", "answer": "org . junit . Assert . assertNotNull ( pb . getConfiguration ( ) )"}
{"focal": "getVendorInstance ( ) { return hazelcastInstance ; }", "testMethod": "test ( ) { com . hazelcast . simulator . vendors . VendorDriver < com . hazelcast . core . HazelcastInstance > driverAtCoordinator = new com . hazelcast . simulator . vendors . HazelcastDriver ( ) . setAll ( simulatorProperties . asPublicMap ( ) ) . setAgents ( singletonList ( agent ) ) . set ( \"CONFIG\" , fileAsText ( ( ( com . hazelcast . simulator . TestEnvironmentUtils . localResourceDirectory ( ) ) + \"/hazelcast.xml\" ) ) ) ; com . hazelcast . simulator . agent . workerprocess . WorkerParameters workerParameters = driverAtCoordinator . loadWorkerParameters ( \"member\" , agent . getAddressIndex ( ) ) ; for ( Map . Entry < java . lang . String , java . lang . String > entry : workerParameters . entrySet ( ) ) { java . lang . String key = entry . getKey ( ) ; if ( key . startsWith ( \"file:\" ) ) { writeText ( entry . getValue ( ) , new java . io . File ( getUserDir ( ) , key . substring ( 5 , key . length ( ) ) ) ) ; } } com . hazelcast . simulator . vendors . VendorDriver < com . hazelcast . core . HazelcastInstance > driverAtWorker = new com . hazelcast . simulator . vendors . HazelcastDriver ( ) . setAll ( workerParameters . asMap ( ) ) ; driverAtWorker . startVendorInstance ( ) ; com . hazelcast . core . HazelcastInstance hz = driverAtWorker . getVendorInstance ( ) ; \"<AssertPlaceHolder>\" ; driverAtWorker . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( hz )", "total": "test ( ) { com . hazelcast . simulator . vendors . VendorDriver < com . hazelcast . core . HazelcastInstance > driverAtCoordinator = new com . hazelcast . simulator . vendors . HazelcastDriver ( ) . setAll ( simulatorProperties . asPublicMap ( ) ) . setAgents ( singletonList ( agent ) ) . set ( \"CONFIG\" , fileAsText ( ( ( com . hazelcast . simulator . TestEnvironmentUtils . localResourceDirectory ( ) ) + \"/hazelcast.xml\" ) ) ) ; com . hazelcast . simulator . agent . workerprocess . WorkerParameters workerParameters = driverAtCoordinator . loadWorkerParameters ( \"member\" , agent . getAddressIndex ( ) ) ; for ( Map . Entry < java . lang . String , java . lang . String > entry : workerParameters . entrySet ( ) ) { java . lang . String key = entry . getKey ( ) ; if ( key . startsWith ( \"file:\" ) ) { writeText ( entry . getValue ( ) , new java . io . File ( getUserDir ( ) , key . substring ( 5 , key . length ( ) ) ) ) ; } } com . hazelcast . simulator . vendors . VendorDriver < com . hazelcast . core . HazelcastInstance > driverAtWorker = new com . hazelcast . simulator . vendors . HazelcastDriver ( ) . setAll ( workerParameters . asMap ( ) ) ; driverAtWorker . startVendorInstance ( ) ; com . hazelcast . core . HazelcastInstance hz = driverAtWorker . getVendorInstance ( ) ; \"<AssertPlaceHolder>\" ; driverAtWorker . close ( ) ; } getVendorInstance ( ) { return hazelcastInstance ; }", "answer": "org . junit . Assert . assertNotNull ( hz )"}
{"focal": "functionName ( org . opengis . feature . type . Name , int ) { return new org . geotools . filter . capability . FunctionNameImpl ( name , nargs ) ; }", "testMethod": "testFunctionMetaInfo ( ) { org . opengis . filter . capability . FunctionName functionName = ff . functionName ( \"listMultiply\" , 2 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( functionName )", "total": "testFunctionMetaInfo ( ) { org . opengis . filter . capability . FunctionName functionName = ff . functionName ( \"listMultiply\" , 2 ) ; \"<AssertPlaceHolder>\" ; } functionName ( org . opengis . feature . type . Name , int ) { return new org . geotools . filter . capability . FunctionNameImpl ( name , nargs ) ; }", "answer": "org . junit . Assert . assertNotNull ( functionName )"}
{"focal": "createPentahoMapReduceJobBuilder ( org . pentaho . di . core . logging . LogChannelInterface , org . pentaho . di . core . variables . VariableSpace ) { org . pentaho . di . core . plugins . PluginInterface pluginInterface = pluginRegistry . findPluginWithId ( org . pentaho . di . core . plugins . LifecyclePluginType . class , HadoopSpoonPlugin . PLUGIN_ID ) ; java . util . Properties pmrProperties ; try { pmrProperties = pluginPropertiesUtil . loadPluginProperties ( pluginInterface ) ; return new org . pentaho . big . data . impl . shim . mapreduce . PentahoMapReduceJobBuilderImpl ( namedCluster , hadoopConfiguration , log , variableSpace , pluginInterface , pmrProperties , visitorServices ) ; } catch ( org . pentaho . di . core . exception . KettleFileException e ) { throw new java . io . IOException ( e ) ; } }", "testMethod": "testCreatePmrJobBuilder ( ) { org . pentaho . di . core . plugins . PluginInterface pluginInterface = mock ( org . pentaho . di . core . plugins . PluginInterface . class ) ; when ( pluginInterface . getPluginDirectory ( ) ) . thenReturn ( new java . net . URL ( \"file:///path\" ) ) ; when ( pluginRegistry . findPluginWithId ( org . pentaho . di . core . plugins . LifecyclePluginType . class , HadoopSpoonPlugin . PLUGIN_ID ) ) . thenReturn ( pluginInterface ) ; org . pentaho . bigdata . api . mapreduce . PentahoMapReduceJobBuilder jobBuilder = mapReduceService . createPentahoMapReduceJobBuilder ( mock ( org . pentaho . di . core . logging . LogChannelInterface . class ) , mock ( org . pentaho . di . core . variables . VariableSpace . class ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( jobBuilder )", "total": "testCreatePmrJobBuilder ( ) { org . pentaho . di . core . plugins . PluginInterface pluginInterface = mock ( org . pentaho . di . core . plugins . PluginInterface . class ) ; when ( pluginInterface . getPluginDirectory ( ) ) . thenReturn ( new java . net . URL ( \"file:///path\" ) ) ; when ( pluginRegistry . findPluginWithId ( org . pentaho . di . core . plugins . LifecyclePluginType . class , HadoopSpoonPlugin . PLUGIN_ID ) ) . thenReturn ( pluginInterface ) ; org . pentaho . bigdata . api . mapreduce . PentahoMapReduceJobBuilder jobBuilder = mapReduceService . createPentahoMapReduceJobBuilder ( mock ( org . pentaho . di . core . logging . LogChannelInterface . class ) , mock ( org . pentaho . di . core . variables . VariableSpace . class ) ) ; \"<AssertPlaceHolder>\" ; } createPentahoMapReduceJobBuilder ( org . pentaho . di . core . logging . LogChannelInterface , org . pentaho . di . core . variables . VariableSpace ) { org . pentaho . di . core . plugins . PluginInterface pluginInterface = pluginRegistry . findPluginWithId ( org . pentaho . di . core . plugins . LifecyclePluginType . class , HadoopSpoonPlugin . PLUGIN_ID ) ; java . util . Properties pmrProperties ; try { pmrProperties = pluginPropertiesUtil . loadPluginProperties ( pluginInterface ) ; return new org . pentaho . big . data . impl . shim . mapreduce . PentahoMapReduceJobBuilderImpl ( namedCluster , hadoopConfiguration , log , variableSpace , pluginInterface , pmrProperties , visitorServices ) ; } catch ( org . pentaho . di . core . exception . KettleFileException e ) { throw new java . io . IOException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( jobBuilder )"}
{"focal": "fail ( java . lang . Throwable ) { for ( org . neo4j . kernel . impl . api . index . MultipleIndexPopulator . IndexPopulation population : populations ) { fail ( population , failure ) ; } }", "testMethod": "extensionShouldHavePublicNoArgConstructor ( ) { org . neo4j . kernel . extension . KernelExtensionFactory < ? > instance = null ; try { instance = newInstance ( ) ; } catch ( java . lang . IllegalArgumentException failure ) { failure . printStackTrace ( ) ; org . junit . Assert . fail ( \"Contract<sp>violation:<sp>extension<sp>class<sp>must<sp>have<sp>public<sp>no-arg<sp>constructor<sp>(Exception<sp>in<sp>stderr)\" ) ; } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance )", "total": "extensionShouldHavePublicNoArgConstructor ( ) { org . neo4j . kernel . extension . KernelExtensionFactory < ? > instance = null ; try { instance = newInstance ( ) ; } catch ( java . lang . IllegalArgumentException failure ) { failure . printStackTrace ( ) ; org . junit . Assert . fail ( \"Contract<sp>violation:<sp>extension<sp>class<sp>must<sp>have<sp>public<sp>no-arg<sp>constructor<sp>(Exception<sp>in<sp>stderr)\" ) ; } \"<AssertPlaceHolder>\" ; } fail ( java . lang . Throwable ) { for ( org . neo4j . kernel . impl . api . index . MultipleIndexPopulator . IndexPopulation population : populations ) { fail ( population , failure ) ; } }", "answer": "org . junit . Assert . assertNotNull ( instance )"}
{"focal": "getQueryRestrictionStrategy ( org . geosdi . geoplatform . gui . shared . wfs . WFSOperatorType ) { checkArgument ( ( operatorType != null ) , \"The<sp>Parameter<sp>operatorType<sp>must<sp>not<sp>be<sp>null.\" ) ; org . geosdi . geoplatform . connector . server . request . v110 . query . repository . QueryRestrictionRepository . logger . trace ( \"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Try<sp>to<sp>find<sp>QueryRestrictionStrategy<sp>with<sp>Key<sp>:<sp>{}\\n\" , operatorType ) ; return org . geosdi . geoplatform . connector . server . request . v110 . query . repository . QueryRestrictionRepository . queryRestrictionStrategies . get ( operatorType ) ; }", "testMethod": "f_loadQueryRestrictionStrategyAsLessTest ( ) { org . geosdi . geoplatform . connector . server . request . v110 . query . repository . QueryRestrictionStrategy < org . geosdi . geoplatform . xml . filter . v110 . ComparisonOpsType > lessStrategy = org . geosdi . geoplatform . connector . wfs . services . WFSQueryRestrictionRepositoryTest . store . getQueryRestrictionStrategy ( org . geosdi . geoplatform . connector . wfs . services . LESS ) ; \"<AssertPlaceHolder>\" ; org . geosdi . geoplatform . connector . wfs . services . WFSQueryRestrictionRepositoryTest . logger . info ( \"################################LESS_STRATEGY<sp>:<sp>{}\\n\" , lessStrategy ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( lessStrategy )", "total": "f_loadQueryRestrictionStrategyAsLessTest ( ) { org . geosdi . geoplatform . connector . server . request . v110 . query . repository . QueryRestrictionStrategy < org . geosdi . geoplatform . xml . filter . v110 . ComparisonOpsType > lessStrategy = org . geosdi . geoplatform . connector . wfs . services . WFSQueryRestrictionRepositoryTest . store . getQueryRestrictionStrategy ( org . geosdi . geoplatform . connector . wfs . services . LESS ) ; \"<AssertPlaceHolder>\" ; org . geosdi . geoplatform . connector . wfs . services . WFSQueryRestrictionRepositoryTest . logger . info ( \"################################LESS_STRATEGY<sp>:<sp>{}\\n\" , lessStrategy ) ; } getQueryRestrictionStrategy ( org . geosdi . geoplatform . gui . shared . wfs . WFSOperatorType ) { checkArgument ( ( operatorType != null ) , \"The<sp>Parameter<sp>operatorType<sp>must<sp>not<sp>be<sp>null.\" ) ; org . geosdi . geoplatform . connector . server . request . v110 . query . repository . QueryRestrictionRepository . logger . trace ( \"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Try<sp>to<sp>find<sp>QueryRestrictionStrategy<sp>with<sp>Key<sp>:<sp>{}\\n\" , operatorType ) ; return org . geosdi . geoplatform . connector . server . request . v110 . query . repository . QueryRestrictionRepository . queryRestrictionStrategies . get ( operatorType ) ; }", "answer": "org . junit . Assert . assertNotNull ( lessStrategy )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateAssessmentAndPlanSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ihe . AssessmentAndPlanSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ihe . builder . IHEBuilderFactory . createAssessmentAndPlanSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ihe . AssessmentAndPlanSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateAssessmentAndPlanSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ihe . AssessmentAndPlanSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ihe . builder . IHEBuilderFactory . createAssessmentAndPlanSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ihe . AssessmentAndPlanSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "createFastqWriter ( ) { return new org . biojava . nbio . genome . io . fastq . IlluminaFastqWriter ( ) ; }", "testMethod": "testCreateFastqWriter ( ) { org . biojava . nbio . genome . io . fastq . FastqWriter writer = createFastqWriter ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( writer )", "total": "testCreateFastqWriter ( ) { org . biojava . nbio . genome . io . fastq . FastqWriter writer = createFastqWriter ( ) ; \"<AssertPlaceHolder>\" ; } createFastqWriter ( ) { return new org . biojava . nbio . genome . io . fastq . IlluminaFastqWriter ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( writer )"}
{"focal": "selectItem ( org . codehaus . preon . el . Expression ) { java . lang . Class < ? > type = this . field . getType ( ) ; return new org . codehaus . preon . el . ctx . ArrayElementReference < T > ( this , type . getComponentType ( ) , index , context ) ; }", "testMethod": "testSelectIndex ( ) { java . lang . String index = \"pi\" ; org . codehaus . preon . el . Reference selected1 = createMock ( org . codehaus . preon . el . Reference . class ) ; org . codehaus . preon . el . Reference selected2 = createMock ( org . codehaus . preon . el . Reference . class ) ; expect ( reference1 . getReferenceContext ( ) ) . andReturn ( context ) ; expect ( reference2 . getReferenceContext ( ) ) . andReturn ( context ) ; expect ( reference1 . getType ( ) ) . andReturn ( java . lang . String . class ) ; expect ( reference2 . getType ( ) ) . andReturn ( java . lang . String . class ) ; expect ( selected1 . getType ( ) ) . andReturn ( java . lang . String . class ) ; expect ( selected2 . getType ( ) ) . andReturn ( java . lang . String . class ) ; expect ( reference1 . selectItem ( index ) ) . andReturn ( selected1 ) ; expect ( reference2 . selectItem ( index ) ) . andReturn ( selected2 ) ; expect ( selected1 . getReferenceContext ( ) ) . andReturn ( context ) ; expect ( selected2 . getReferenceContext ( ) ) . andReturn ( context ) ; replay ( reference1 , reference2 , selected1 , selected2 ) ; org . codehaus . preon . el . ctx . MultiReference multi = new org . codehaus . preon . el . ctx . MultiReference ( reference1 , reference2 ) ; \"<AssertPlaceHolder>\" ; verify ( reference1 , reference2 , selected1 , selected2 ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( multi . selectItem ( index ) )", "total": "testSelectIndex ( ) { java . lang . String index = \"pi\" ; org . codehaus . preon . el . Reference selected1 = createMock ( org . codehaus . preon . el . Reference . class ) ; org . codehaus . preon . el . Reference selected2 = createMock ( org . codehaus . preon . el . Reference . class ) ; expect ( reference1 . getReferenceContext ( ) ) . andReturn ( context ) ; expect ( reference2 . getReferenceContext ( ) ) . andReturn ( context ) ; expect ( reference1 . getType ( ) ) . andReturn ( java . lang . String . class ) ; expect ( reference2 . getType ( ) ) . andReturn ( java . lang . String . class ) ; expect ( selected1 . getType ( ) ) . andReturn ( java . lang . String . class ) ; expect ( selected2 . getType ( ) ) . andReturn ( java . lang . String . class ) ; expect ( reference1 . selectItem ( index ) ) . andReturn ( selected1 ) ; expect ( reference2 . selectItem ( index ) ) . andReturn ( selected2 ) ; expect ( selected1 . getReferenceContext ( ) ) . andReturn ( context ) ; expect ( selected2 . getReferenceContext ( ) ) . andReturn ( context ) ; replay ( reference1 , reference2 , selected1 , selected2 ) ; org . codehaus . preon . el . ctx . MultiReference multi = new org . codehaus . preon . el . ctx . MultiReference ( reference1 , reference2 ) ; \"<AssertPlaceHolder>\" ; verify ( reference1 , reference2 , selected1 , selected2 ) ; } selectItem ( org . codehaus . preon . el . Expression ) { java . lang . Class < ? > type = this . field . getType ( ) ; return new org . codehaus . preon . el . ctx . ArrayElementReference < T > ( this , type . getComponentType ( ) , index , context ) ; }", "answer": "org . junit . Assert . assertNotNull ( multi . selectItem ( index ) )"}
{"focal": "trainModel ( opennlp . tools . util . model . ModelType , opennlp . tools . chunker . ChunkerFactory ) { return opennlp . tools . chunker . ChunkerME . train ( \"eng\" , opennlp . tools . chunker . ChunkerFactoryTest . createSampleStream ( ) , opennlp . tools . util . TrainingParameters . defaultParams ( ) , factory ) ; }", "testMethod": "testTrainModelReturnsAQNModel ( ) { opennlp . tools . ml . model . RealValueFileEventStream rvfes1 = new opennlp . tools . ml . model . RealValueFileEventStream ( \"src/test/resources/data/opennlp/maxent/real-valued-weights-training-data.txt\" ) ; testDataIndexer . index ( rvfes1 ) ; opennlp . tools . ml . maxent . quasinewton . QNModel trainedModel = new opennlp . tools . ml . maxent . quasinewton . QNTrainer ( false ) . trainModel ( opennlp . tools . ml . maxent . quasinewton . QNTrainerTest . ITERATIONS , testDataIndexer ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( trainedModel )", "total": "testTrainModelReturnsAQNModel ( ) { opennlp . tools . ml . model . RealValueFileEventStream rvfes1 = new opennlp . tools . ml . model . RealValueFileEventStream ( \"src/test/resources/data/opennlp/maxent/real-valued-weights-training-data.txt\" ) ; testDataIndexer . index ( rvfes1 ) ; opennlp . tools . ml . maxent . quasinewton . QNModel trainedModel = new opennlp . tools . ml . maxent . quasinewton . QNTrainer ( false ) . trainModel ( opennlp . tools . ml . maxent . quasinewton . QNTrainerTest . ITERATIONS , testDataIndexer ) ; \"<AssertPlaceHolder>\" ; } trainModel ( opennlp . tools . util . model . ModelType , opennlp . tools . chunker . ChunkerFactory ) { return opennlp . tools . chunker . ChunkerME . train ( \"eng\" , opennlp . tools . chunker . ChunkerFactoryTest . createSampleStream ( ) , opennlp . tools . util . TrainingParameters . defaultParams ( ) , factory ) ; }", "answer": "org . junit . Assert . assertNotNull ( trainedModel )"}
{"focal": "maybeChooseServiceConfig ( java . util . Map , java . util . Random , java . lang . String ) { for ( java . util . Map . Entry < java . lang . String , ? > entry : choice . entrySet ( ) ) { com . google . common . base . Verify . verify ( io . grpc . internal . DnsNameResolver . SERVICE_CONFIG_CHOICE_KEYS . contains ( entry . getKey ( ) ) , \"Bad<sp>key:<sp>%s\" , entry ) ; } java . util . List < java . lang . String > clientLanguages = io . grpc . internal . DnsNameResolver . getClientLanguagesFromChoice ( choice ) ; if ( ( clientLanguages != null ) && ( ! ( clientLanguages . isEmpty ( ) ) ) ) { boolean javaPresent = false ; for ( java . lang . String lang : clientLanguages ) { if ( \"java\" . equalsIgnoreCase ( lang ) ) { javaPresent = true ; break ; } } if ( ! javaPresent ) { return null ; } } java . lang . Double percentage = io . grpc . internal . DnsNameResolver . getPercentageFromChoice ( choice ) ; if ( percentage != null ) { int pct = percentage . intValue ( ) ; com . google . common . base . Verify . verify ( ( ( pct >= 0 ) && ( pct <= 100 ) ) , \"Bad<sp>percentage:<sp>%s\" , percentage ) ; if ( ( random . nextInt ( 100 ) ) >= pct ) { return null ; } } java . util . List < java . lang . String > clientHostnames = io . grpc . internal . DnsNameResolver . getHostnamesFromChoice ( choice ) ; if ( ( clientHostnames != null ) && ( ! ( clientHostnames . isEmpty ( ) ) ) ) { boolean hostnamePresent = false ; for ( java . lang . String clientHostname : clientHostnames ) { if ( clientHostname . equals ( hostname ) ) { hostnamePresent = true ; break ; } } if ( ! hostnamePresent ) { return null ; } } java . util . Map < java . lang . String , ? > sc = io . grpc . internal . ServiceConfigUtil . getObject ( choice , io . grpc . internal . DnsNameResolver . SERVICE_CONFIG_CHOICE_SERVICE_CONFIG_KEY ) ; if ( sc == null ) { throw new com . google . common . base . VerifyException ( java . lang . String . format ( \"key<sp>'%s'<sp>missing<sp>in<sp>'%s'\" , choice , io . grpc . internal . DnsNameResolver . SERVICE_CONFIG_CHOICE_SERVICE_CONFIG_KEY ) ) ; } return sc ; }", "testMethod": "maybeChooseServiceConfig_hostnameMatches ( ) { java . util . Map < java . lang . String , java . lang . Object > choice = new java . util . LinkedHashMap ( ) ; java . util . List < java . lang . String > hosts = new java . util . ArrayList ( ) ; hosts . add ( \"localhost\" ) ; choice . put ( \"clientHostname\" , hosts ) ; choice . put ( \"serviceConfig\" , serviceConfig ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( io . grpc . internal . DnsNameResolver . maybeChooseServiceConfig ( choice , new java . util . Random ( ) , \"localhost\" ) )", "total": "maybeChooseServiceConfig_hostnameMatches ( ) { java . util . Map < java . lang . String , java . lang . Object > choice = new java . util . LinkedHashMap ( ) ; java . util . List < java . lang . String > hosts = new java . util . ArrayList ( ) ; hosts . add ( \"localhost\" ) ; choice . put ( \"clientHostname\" , hosts ) ; choice . put ( \"serviceConfig\" , serviceConfig ) ; \"<AssertPlaceHolder>\" ; } maybeChooseServiceConfig ( java . util . Map , java . util . Random , java . lang . String ) { for ( java . util . Map . Entry < java . lang . String , ? > entry : choice . entrySet ( ) ) { com . google . common . base . Verify . verify ( io . grpc . internal . DnsNameResolver . SERVICE_CONFIG_CHOICE_KEYS . contains ( entry . getKey ( ) ) , \"Bad<sp>key:<sp>%s\" , entry ) ; } java . util . List < java . lang . String > clientLanguages = io . grpc . internal . DnsNameResolver . getClientLanguagesFromChoice ( choice ) ; if ( ( clientLanguages != null ) && ( ! ( clientLanguages . isEmpty ( ) ) ) ) { boolean javaPresent = false ; for ( java . lang . String lang : clientLanguages ) { if ( \"java\" . equalsIgnoreCase ( lang ) ) { javaPresent = true ; break ; } } if ( ! javaPresent ) { return null ; } } java . lang . Double percentage = io . grpc . internal . DnsNameResolver . getPercentageFromChoice ( choice ) ; if ( percentage != null ) { int pct = percentage . intValue ( ) ; com . google . common . base . Verify . verify ( ( ( pct >= 0 ) && ( pct <= 100 ) ) , \"Bad<sp>percentage:<sp>%s\" , percentage ) ; if ( ( random . nextInt ( 100 ) ) >= pct ) { return null ; } } java . util . List < java . lang . String > clientHostnames = io . grpc . internal . DnsNameResolver . getHostnamesFromChoice ( choice ) ; if ( ( clientHostnames != null ) && ( ! ( clientHostnames . isEmpty ( ) ) ) ) { boolean hostnamePresent = false ; for ( java . lang . String clientHostname : clientHostnames ) { if ( clientHostname . equals ( hostname ) ) { hostnamePresent = true ; break ; } } if ( ! hostnamePresent ) { return null ; } } java . util . Map < java . lang . String , ? > sc = io . grpc . internal . ServiceConfigUtil . getObject ( choice , io . grpc . internal . DnsNameResolver . SERVICE_CONFIG_CHOICE_SERVICE_CONFIG_KEY ) ; if ( sc == null ) { throw new com . google . common . base . VerifyException ( java . lang . String . format ( \"key<sp>'%s'<sp>missing<sp>in<sp>'%s'\" , choice , io . grpc . internal . DnsNameResolver . SERVICE_CONFIG_CHOICE_SERVICE_CONFIG_KEY ) ) ; } return sc ; }", "answer": "org . junit . Assert . assertNotNull ( io . grpc . internal . DnsNameResolver . maybeChooseServiceConfig ( choice , new java . util . Random ( ) , \"localhost\" ) )"}
{"focal": "next ( ) { return false ; }", "testMethod": "iterate ( ) { com . mysema . commons . lang . CloseableIterator < com . querydsl . jpa . Cat > cats = query ( ) . from ( com . querydsl . jpa . JPABase . cat ) . select ( com . querydsl . jpa . JPABase . cat ) . iterate ( ) ; while ( cats . hasNext ( ) ) { com . querydsl . jpa . Cat cat = cats . next ( ) ; \"<AssertPlaceHolder>\" ; } cats . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( cat )", "total": "iterate ( ) { com . mysema . commons . lang . CloseableIterator < com . querydsl . jpa . Cat > cats = query ( ) . from ( com . querydsl . jpa . JPABase . cat ) . select ( com . querydsl . jpa . JPABase . cat ) . iterate ( ) ; while ( cats . hasNext ( ) ) { com . querydsl . jpa . Cat cat = cats . next ( ) ; \"<AssertPlaceHolder>\" ; } cats . close ( ) ; } next ( ) { return false ; }", "answer": "org . junit . Assert . assertNotNull ( cat )"}
{"focal": "getPatientsFindings ( java . lang . String , java . lang . Class ) { java . util . List < ch . elexis . core . findings . IFinding > ret = new java . util . ArrayList ( ) ; if ( ( patientId != null ) && ( ! ( patientId . isEmpty ( ) ) ) ) { if ( filter . isAssignableFrom ( ch . elexis . core . findings . IEncounter . class ) ) { ret . addAll ( getEncounters ( patientId ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . ICondition . class ) ) { ret . addAll ( getConditions ( patientId ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . IClinicalImpression . class ) ) { ret . addAll ( getClinicalImpressions ( patientId , null ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . IObservation . class ) ) { ret . addAll ( getObservations ( patientId , null ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . IProcedureRequest . class ) ) { ret . addAll ( getProcedureRequests ( patientId , null ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . IFamilyMemberHistory . class ) ) { ret . addAll ( getFamilyMemberHistory ( patientId ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . IAllergyIntolerance . class ) ) { ret . addAll ( getAllergyIntolerance ( patientId ) ) ; } } return ( ( java . util . List < T > ) ( ret ) ) ; }", "testMethod": "getFindingsForPatient ( ) { java . util . List < ch . elexis . core . findings . IFinding > finding = ch . elexis . core . findings . FindingsServiceComponent . getService ( ) . getPatientsFindings ( \"abc\" , ch . elexis . core . findings . IFinding . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( finding )", "total": "getFindingsForPatient ( ) { java . util . List < ch . elexis . core . findings . IFinding > finding = ch . elexis . core . findings . FindingsServiceComponent . getService ( ) . getPatientsFindings ( \"abc\" , ch . elexis . core . findings . IFinding . class ) ; \"<AssertPlaceHolder>\" ; } getPatientsFindings ( java . lang . String , java . lang . Class ) { java . util . List < ch . elexis . core . findings . IFinding > ret = new java . util . ArrayList ( ) ; if ( ( patientId != null ) && ( ! ( patientId . isEmpty ( ) ) ) ) { if ( filter . isAssignableFrom ( ch . elexis . core . findings . IEncounter . class ) ) { ret . addAll ( getEncounters ( patientId ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . ICondition . class ) ) { ret . addAll ( getConditions ( patientId ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . IClinicalImpression . class ) ) { ret . addAll ( getClinicalImpressions ( patientId , null ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . IObservation . class ) ) { ret . addAll ( getObservations ( patientId , null ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . IProcedureRequest . class ) ) { ret . addAll ( getProcedureRequests ( patientId , null ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . IFamilyMemberHistory . class ) ) { ret . addAll ( getFamilyMemberHistory ( patientId ) ) ; } if ( filter . isAssignableFrom ( ch . elexis . core . findings . IAllergyIntolerance . class ) ) { ret . addAll ( getAllergyIntolerance ( patientId ) ) ; } } return ( ( java . util . List < T > ) ( ret ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( finding )"}
{"focal": "checkSize ( java . util . Map ) { bytesUsed += org . sagebionetworks . repo . model . query . jdo . SizeLimitRowMapper . getRowSizeBytes ( rowMap ) ; if ( ( bytesUsed ) > ( maxBytes ) ) { throw new java . lang . IllegalArgumentException ( ( ( \"The<sp>results<sp>of<sp>this<sp>query<sp>exceeded<sp>the<sp>maximum<sp>number<sp>of<sp>allowable<sp>bytes:<sp>\" + ( maxBytes ) ) + \".<sp>Please<sp>try<sp>the<sp>query<sp>again<sp>with<sp>a<sp>smaller<sp>page<sp>size<sp>or<sp>limit<sp>the<sp>columns<sp>returned<sp>in<sp>the<sp>select<sp>clause.\" ) ) ; } return rowMap ; }", "testMethod": "testCheckSizUnderLimit ( ) { org . sagebionetworks . repo . model . query . jdo . SizeLimitRowMapper mapper = new org . sagebionetworks . repo . model . query . jdo . SizeLimitRowMapper ( 102 ) ; byte [ ] some = new byte [ 100 ] ; java . util . Map < java . lang . String , java . lang . Object > row = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; row . put ( \"someKey\" , some ) ; row . put ( \"secondKey\" , \"a\" ) ; row = mapper . checkSize ( row ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( row )", "total": "testCheckSizUnderLimit ( ) { org . sagebionetworks . repo . model . query . jdo . SizeLimitRowMapper mapper = new org . sagebionetworks . repo . model . query . jdo . SizeLimitRowMapper ( 102 ) ; byte [ ] some = new byte [ 100 ] ; java . util . Map < java . lang . String , java . lang . Object > row = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; row . put ( \"someKey\" , some ) ; row . put ( \"secondKey\" , \"a\" ) ; row = mapper . checkSize ( row ) ; \"<AssertPlaceHolder>\" ; } checkSize ( java . util . Map ) { bytesUsed += org . sagebionetworks . repo . model . query . jdo . SizeLimitRowMapper . getRowSizeBytes ( rowMap ) ; if ( ( bytesUsed ) > ( maxBytes ) ) { throw new java . lang . IllegalArgumentException ( ( ( \"The<sp>results<sp>of<sp>this<sp>query<sp>exceeded<sp>the<sp>maximum<sp>number<sp>of<sp>allowable<sp>bytes:<sp>\" + ( maxBytes ) ) + \".<sp>Please<sp>try<sp>the<sp>query<sp>again<sp>with<sp>a<sp>smaller<sp>page<sp>size<sp>or<sp>limit<sp>the<sp>columns<sp>returned<sp>in<sp>the<sp>select<sp>clause.\" ) ) ; } return rowMap ; }", "answer": "org . junit . Assert . assertNotNull ( row )"}
{"focal": "getAction ( ) { return action ; }", "testMethod": "getAction ( ) { for ( final net . ripe . db . whois . update . domain . Keyword keyword : net . ripe . db . whois . update . domain . Keyword . values ( ) ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( keyword . getAction ( ) )", "total": "getAction ( ) { for ( final net . ripe . db . whois . update . domain . Keyword keyword : net . ripe . db . whois . update . domain . Keyword . values ( ) ) { \"<AssertPlaceHolder>\" ; } } getAction ( ) { return action ; }", "answer": "org . junit . Assert . assertNotNull ( keyword . getAction ( ) )"}
{"focal": "getInputTypes ( ) { return delegateProvider . getInputTypes ( ) ; }", "testMethod": "getInputTypes ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( spi . getInputTypes ( ) )", "total": "getInputTypes ( ) { \"<AssertPlaceHolder>\" ; } getInputTypes ( ) { return delegateProvider . getInputTypes ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( spi . getInputTypes ( ) )"}
{"focal": "getMetaData ( ) { checkClosed ( ) ; if ( ( rsMetaData ) == null ) { rsMetaData = createMetaData ( ) ; } return rsMetaData ; }", "testMethod": "testProcedures ( ) { java . sql . DatabaseMetaData dbmd = con . getMetaData ( ) ; \"<AssertPlaceHolder>\" ; java . sql . ResultSet rs = dbmd . getProcedures ( null , null , null ) ; rs . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( dbmd )", "total": "testProcedures ( ) { java . sql . DatabaseMetaData dbmd = con . getMetaData ( ) ; \"<AssertPlaceHolder>\" ; java . sql . ResultSet rs = dbmd . getProcedures ( null , null , null ) ; rs . close ( ) ; } getMetaData ( ) { checkClosed ( ) ; if ( ( rsMetaData ) == null ) { rsMetaData = createMetaData ( ) ; } return rsMetaData ; }", "answer": "org . junit . Assert . assertNotNull ( dbmd )"}
{"focal": "directory ( java . io . File ) { if ( ( directory == null ) || ( ! ( directory . isDirectory ( ) ) ) ) { throw new java . lang . IllegalArgumentException ( ( \"A<sp>not<sp>null<sp>directory<sp>instance<sp>is<sp>expected.<sp>Path:<sp>\" + directory ) ) ; } return new org . sejda . model . output . FileOrDirectoryTaskOutput ( directory ) ; }", "testMethod": "dirFactoryValidDirectory ( ) { when ( directory . isDirectory ( ) ) . thenReturn ( Boolean . TRUE ) ; org . sejda . model . output . FileOrDirectoryTaskOutput instance = org . sejda . model . output . FileOrDirectoryTaskOutput . directory ( directory ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance )", "total": "dirFactoryValidDirectory ( ) { when ( directory . isDirectory ( ) ) . thenReturn ( Boolean . TRUE ) ; org . sejda . model . output . FileOrDirectoryTaskOutput instance = org . sejda . model . output . FileOrDirectoryTaskOutput . directory ( directory ) ; \"<AssertPlaceHolder>\" ; } directory ( java . io . File ) { if ( ( directory == null ) || ( ! ( directory . isDirectory ( ) ) ) ) { throw new java . lang . IllegalArgumentException ( ( \"A<sp>not<sp>null<sp>directory<sp>instance<sp>is<sp>expected.<sp>Path:<sp>\" + directory ) ) ; } return new org . sejda . model . output . FileOrDirectoryTaskOutput ( directory ) ; }", "answer": "org . junit . Assert . assertNotNull ( instance )"}
{"focal": "getAllOs ( ) { java . util . List < com . intel . mtwilson . datatypes . OsData > allOsData = new java . util . ArrayList < com . intel . mtwilson . datatypes . OsData > ( ) ; try { java . util . List < com . intel . mtwilson . as . data . TblOs > allRecords = tblOsJpaController . findTblOsEntities ( ) ; for ( com . intel . mtwilson . as . data . TblOs tblOs : allRecords ) { com . intel . mtwilson . datatypes . OsData osData = new com . intel . mtwilson . datatypes . OsData ( tblOs . getName ( ) , tblOs . getVersion ( ) , tblOs . getDescription ( ) ) ; allOsData . add ( osData ) ; } } catch ( com . intel . mountwilson . as . common . ASException ase ) { throw ase ; } catch ( java . lang . Exception e ) { com . intel . mtwilson . wlm . business . OsBO . log . error ( \"Error<sp>during<sp>retrieval<sp>of<sp>OS<sp>details.\" , e ) ; throw new com . intel . mountwilson . as . common . ASException ( com . intel . mtwilson . i18n . ErrorCode . WS_OS_RETRIEVAL_ERROR , e . getClass ( ) . getSimpleName ( ) ) ; } return allOsData ; }", "testMethod": "testGetAllOs ( ) { System . out . println ( \"getAllOs\" ) ; com . intel . mtwilson . wlm . business . OsBO instance = new com . intel . mtwilson . wlm . business . OsBO ( ) ; java . util . List result = instance . getAllOs ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetAllOs ( ) { System . out . println ( \"getAllOs\" ) ; com . intel . mtwilson . wlm . business . OsBO instance = new com . intel . mtwilson . wlm . business . OsBO ( ) ; java . util . List result = instance . getAllOs ( ) ; \"<AssertPlaceHolder>\" ; } getAllOs ( ) { java . util . List < com . intel . mtwilson . datatypes . OsData > allOsData = new java . util . ArrayList < com . intel . mtwilson . datatypes . OsData > ( ) ; try { java . util . List < com . intel . mtwilson . as . data . TblOs > allRecords = tblOsJpaController . findTblOsEntities ( ) ; for ( com . intel . mtwilson . as . data . TblOs tblOs : allRecords ) { com . intel . mtwilson . datatypes . OsData osData = new com . intel . mtwilson . datatypes . OsData ( tblOs . getName ( ) , tblOs . getVersion ( ) , tblOs . getDescription ( ) ) ; allOsData . add ( osData ) ; } } catch ( com . intel . mountwilson . as . common . ASException ase ) { throw ase ; } catch ( java . lang . Exception e ) { com . intel . mtwilson . wlm . business . OsBO . log . error ( \"Error<sp>during<sp>retrieval<sp>of<sp>OS<sp>details.\" , e ) ; throw new com . intel . mountwilson . as . common . ASException ( com . intel . mtwilson . i18n . ErrorCode . WS_OS_RETRIEVAL_ERROR , e . getClass ( ) . getSimpleName ( ) ) ; } return allOsData ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "initialize ( be . tomcools . dropwizard . websocket . WebsocketConfiguration , io . dropwizard . jetty . MutableServletContextHandler ) { try { return new be . tomcools . dropwizard . websocket . handling . WebsocketContainer ( configuration , org . eclipse . jetty . websocket . jsr356 . server . deploy . WebSocketServerContainerInitializer . configureContext ( contextHandler ) ) ; } catch ( java . lang . Exception e ) { throw new java . lang . IllegalStateException ( \"Could<sp>not<sp>initialize<sp>contexthandler<sp>to<sp>enable<sp>Websockets\" , e ) ; } }", "testMethod": "whenSomethingGoesWrongDuringInitializeThrowsIllegalStateException ( ) { when ( servletContextHandler . getServer ( ) ) . thenThrow ( javax . servlet . ServletException . class ) ; be . tomcools . dropwizard . websocket . handling . WebsocketContainer container = sut . initialize ( configuration , servletContextHandler ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( container )", "total": "whenSomethingGoesWrongDuringInitializeThrowsIllegalStateException ( ) { when ( servletContextHandler . getServer ( ) ) . thenThrow ( javax . servlet . ServletException . class ) ; be . tomcools . dropwizard . websocket . handling . WebsocketContainer container = sut . initialize ( configuration , servletContextHandler ) ; \"<AssertPlaceHolder>\" ; } initialize ( be . tomcools . dropwizard . websocket . WebsocketConfiguration , io . dropwizard . jetty . MutableServletContextHandler ) { try { return new be . tomcools . dropwizard . websocket . handling . WebsocketContainer ( configuration , org . eclipse . jetty . websocket . jsr356 . server . deploy . WebSocketServerContainerInitializer . configureContext ( contextHandler ) ) ; } catch ( java . lang . Exception e ) { throw new java . lang . IllegalStateException ( \"Could<sp>not<sp>initialize<sp>contexthandler<sp>to<sp>enable<sp>Websockets\" , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( container )"}
{"focal": "get ( int ) { if ( finishedLocalRows ) { return super . get ( columnIndex ) ; } else { return currentRow [ columnIndex ] ; } }", "testMethod": "testGet ( ) { mockHelper . replayAll ( ) ; classUnderTest . setTableInfo ( mockTableInfo ) ; mockHelper . verifyAll ( ) ; classUnderTest . next ( null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( classUnderTest . get ( 0 ) )", "total": "testGet ( ) { mockHelper . replayAll ( ) ; classUnderTest . setTableInfo ( mockTableInfo ) ; mockHelper . verifyAll ( ) ; classUnderTest . next ( null ) ; \"<AssertPlaceHolder>\" ; } get ( int ) { if ( finishedLocalRows ) { return super . get ( columnIndex ) ; } else { return currentRow [ columnIndex ] ; } }", "answer": "org . junit . Assert . assertNotNull ( classUnderTest . get ( 0 ) )"}
{"focal": "getCpt ( ) { return cpt ; }", "testMethod": "convertEPMLToYAWL ( ) { org . apromore . service . model . CanonisedProcess canonised = canoniseEPMLProcess ( \"models/1An_ka9y.epml\" ) ; if ( org . apromore . service . impl . CanoniserServiceImplIntgTest . LOGGER . isDebugEnabled ( ) ) { saveCanonisedProcess ( canonised , \"1An_ka9y.cpf\" ) ; } org . apromore . service . model . DecanonisedProcess decanonisedYAWL = cSrv . deCanonise ( \"YAWL<sp>2.2\" , canonised . getCpt ( ) , null , new java . util . HashSet < org . apromore . plugin . property . RequestParameterType < ? > > ( ) ) ; \"<AssertPlaceHolder>\" ; if ( org . apromore . service . impl . CanoniserServiceImplIntgTest . LOGGER . isDebugEnabled ( ) ) { saveDecanonisedProcess ( decanonisedYAWL , \"1An_ka9y.yawl\" ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( decanonisedYAWL )", "total": "convertEPMLToYAWL ( ) { org . apromore . service . model . CanonisedProcess canonised = canoniseEPMLProcess ( \"models/1An_ka9y.epml\" ) ; if ( org . apromore . service . impl . CanoniserServiceImplIntgTest . LOGGER . isDebugEnabled ( ) ) { saveCanonisedProcess ( canonised , \"1An_ka9y.cpf\" ) ; } org . apromore . service . model . DecanonisedProcess decanonisedYAWL = cSrv . deCanonise ( \"YAWL<sp>2.2\" , canonised . getCpt ( ) , null , new java . util . HashSet < org . apromore . plugin . property . RequestParameterType < ? > > ( ) ) ; \"<AssertPlaceHolder>\" ; if ( org . apromore . service . impl . CanoniserServiceImplIntgTest . LOGGER . isDebugEnabled ( ) ) { saveDecanonisedProcess ( decanonisedYAWL , \"1An_ka9y.yawl\" ) ; } } getCpt ( ) { return cpt ; }", "answer": "org . junit . Assert . assertNotNull ( decanonisedYAWL )"}
{"focal": "get ( java . lang . Object ) { java . security . Provider p = getProvider ( ) ; if ( p != null ) { return p . get ( key ) ; } else { return null ; } }", "testMethod": "testSignatureDirectReference ( ) { org . w3c . dom . Document doc = org . apache . wss4j . dom . common . SOAPUtil . toSOAPPart ( SOAPUtil . SAMPLE_SOAP_MSG ) ; org . apache . wss4j . dom . message . WSSecHeader secHeader = new org . apache . wss4j . dom . message . WSSecHeader ( doc ) ; secHeader . insertSecurityHeader ( ) ; org . apache . wss4j . dom . message . WSSecSignature sign = new org . apache . wss4j . dom . message . WSSecSignature ( secHeader ) ; sign . setUserInfo ( \"wss40\" , \"security\" ) ; sign . setKeyIdentifierType ( WSConstants . BST_DIRECT_REFERENCE ) ; org . w3c . dom . Document signedDoc = sign . build ( crypto ) ; if ( org . apache . wss4j . dom . message . SignatureCertTest . LOG . isDebugEnabled ( ) ) { java . lang . String outputString = org . apache . wss4j . common . util . XMLUtils . prettyDocumentToString ( signedDoc ) ; org . apache . wss4j . dom . message . SignatureCertTest . LOG . debug ( outputString ) ; } org . apache . wss4j . dom . handler . WSHandlerResult results = verify ( signedDoc , cryptoCA ) ; org . apache . wss4j . dom . engine . WSSecurityEngineResult result = results . getActionResults ( ) . get ( WSConstants . SIGN ) . get ( 0 ) ; java . security . cert . X509Certificate cert = ( ( java . security . cert . X509Certificate ) ( result . get ( WSSecurityEngineResult . TAG_X509_CERTIFICATE ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( cert )", "total": "testSignatureDirectReference ( ) { org . w3c . dom . Document doc = org . apache . wss4j . dom . common . SOAPUtil . toSOAPPart ( SOAPUtil . SAMPLE_SOAP_MSG ) ; org . apache . wss4j . dom . message . WSSecHeader secHeader = new org . apache . wss4j . dom . message . WSSecHeader ( doc ) ; secHeader . insertSecurityHeader ( ) ; org . apache . wss4j . dom . message . WSSecSignature sign = new org . apache . wss4j . dom . message . WSSecSignature ( secHeader ) ; sign . setUserInfo ( \"wss40\" , \"security\" ) ; sign . setKeyIdentifierType ( WSConstants . BST_DIRECT_REFERENCE ) ; org . w3c . dom . Document signedDoc = sign . build ( crypto ) ; if ( org . apache . wss4j . dom . message . SignatureCertTest . LOG . isDebugEnabled ( ) ) { java . lang . String outputString = org . apache . wss4j . common . util . XMLUtils . prettyDocumentToString ( signedDoc ) ; org . apache . wss4j . dom . message . SignatureCertTest . LOG . debug ( outputString ) ; } org . apache . wss4j . dom . handler . WSHandlerResult results = verify ( signedDoc , cryptoCA ) ; org . apache . wss4j . dom . engine . WSSecurityEngineResult result = results . getActionResults ( ) . get ( WSConstants . SIGN ) . get ( 0 ) ; java . security . cert . X509Certificate cert = ( ( java . security . cert . X509Certificate ) ( result . get ( WSSecurityEngineResult . TAG_X509_CERTIFICATE ) ) ) ; \"<AssertPlaceHolder>\" ; } get ( java . lang . Object ) { java . security . Provider p = getProvider ( ) ; if ( p != null ) { return p . get ( key ) ; } else { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( cert )"}
{"focal": "getSchema ( ) { if ( ( org . jpmml . model . JAXBUtil . schema ) == null ) { javax . xml . validation . SchemaFactory schemaFactory = javax . xml . validation . SchemaFactory . newInstance ( XMLConstants . W3C_XML_SCHEMA_NS_URI ) ; java . net . URL url = org . dmg . pmml . ObjectFactory . class . getResource ( \"/pmml.xsd\" ) ; if ( url == null ) { throw new java . io . FileNotFoundException ( ) ; } org . jpmml . model . JAXBUtil . schema = schemaFactory . newSchema ( url ) ; } return org . jpmml . model . JAXBUtil . schema ; }", "testMethod": "hasSchema ( ) { javax . xml . validation . Schema schema = org . jpmml . model . JAXBUtil . getSchema ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( schema )", "total": "hasSchema ( ) { javax . xml . validation . Schema schema = org . jpmml . model . JAXBUtil . getSchema ( ) ; \"<AssertPlaceHolder>\" ; } getSchema ( ) { if ( ( org . jpmml . model . JAXBUtil . schema ) == null ) { javax . xml . validation . SchemaFactory schemaFactory = javax . xml . validation . SchemaFactory . newInstance ( XMLConstants . W3C_XML_SCHEMA_NS_URI ) ; java . net . URL url = org . dmg . pmml . ObjectFactory . class . getResource ( \"/pmml.xsd\" ) ; if ( url == null ) { throw new java . io . FileNotFoundException ( ) ; } org . jpmml . model . JAXBUtil . schema = schemaFactory . newSchema ( url ) ; } return org . jpmml . model . JAXBUtil . schema ; }", "answer": "org . junit . Assert . assertNotNull ( schema )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateVitalSignsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . hitsp . VitalSignsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . hitsp . builder . HITSPBuilderFactory . createVitalSignsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . hitsp . VitalSignsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateVitalSignsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . hitsp . VitalSignsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . hitsp . builder . HITSPBuilderFactory . createVitalSignsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . hitsp . VitalSignsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "select ( java . lang . Class , java . lang . String , java . lang . Object [ ] ) { return com . jajja . jorm . Record . transaction ( clazz ) . select ( clazz , sql , params ) ; }", "testMethod": "t03_columns ( ) { com . jajja . jorm . Transaction moria = psql . Moria . open ( ) ; try { moria . Goblin goblin = moria . select ( moria . Goblin . class , \"SELECT<sp>*<sp>FROM<sp>#1#<sp>WHERE<sp>name<sp>=<sp>'Bolg'\" , moria . Goblin . class ) ; \"<AssertPlaceHolder>\" ; } catch ( java . sql . SQLException e ) { log . error ( \"Fail<sp>caused<sp>by<sp>SQL<sp>exception\" , e ) ; org . junit . Assert . fail ( ) ; moria . rollback ( ) ; } finally { moria . close ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( goblin )", "total": "t03_columns ( ) { com . jajja . jorm . Transaction moria = psql . Moria . open ( ) ; try { moria . Goblin goblin = moria . select ( moria . Goblin . class , \"SELECT<sp>*<sp>FROM<sp>#1#<sp>WHERE<sp>name<sp>=<sp>'Bolg'\" , moria . Goblin . class ) ; \"<AssertPlaceHolder>\" ; } catch ( java . sql . SQLException e ) { log . error ( \"Fail<sp>caused<sp>by<sp>SQL<sp>exception\" , e ) ; org . junit . Assert . fail ( ) ; moria . rollback ( ) ; } finally { moria . close ( ) ; } } select ( java . lang . Class , java . lang . String , java . lang . Object [ ] ) { return com . jajja . jorm . Record . transaction ( clazz ) . select ( clazz , sql , params ) ; }", "answer": "org . junit . Assert . assertNotNull ( goblin )"}
{"focal": "getFeatures ( ) { return features ; }", "testMethod": "testSearchByMyIPSync ( ) { try { java . lang . String jsonString = com . simplegeo . client . SimpleGeoStorageClientTest . client . searchByMyIP ( \"casey.testing.layer\" , null ) ; com . simplegeo . client . types . FeatureCollection featureCollection = com . simplegeo . client . types . FeatureCollection . fromJSONString ( jsonString ) ; \"<AssertPlaceHolder>\" ; } catch ( java . io . IOException e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } catch ( org . json . JSONException e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( featureCollection . getFeatures ( ) )", "total": "testSearchByMyIPSync ( ) { try { java . lang . String jsonString = com . simplegeo . client . SimpleGeoStorageClientTest . client . searchByMyIP ( \"casey.testing.layer\" , null ) ; com . simplegeo . client . types . FeatureCollection featureCollection = com . simplegeo . client . types . FeatureCollection . fromJSONString ( jsonString ) ; \"<AssertPlaceHolder>\" ; } catch ( java . io . IOException e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } catch ( org . json . JSONException e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } } getFeatures ( ) { return features ; }", "answer": "org . junit . Assert . assertNotNull ( featureCollection . getFeatures ( ) )"}
{"focal": "forText ( ) { return new org . uberfire . ext . editor . commons . client . file . exports . TextFileExport ( ) ; }", "testMethod": "ProduceTextFileSaverTest ( ) { org . uberfire . ext . editor . commons . client . file . exports . TextFileExport textFileSaver = fs . forText ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( textFileSaver )", "total": "ProduceTextFileSaverTest ( ) { org . uberfire . ext . editor . commons . client . file . exports . TextFileExport textFileSaver = fs . forText ( ) ; \"<AssertPlaceHolder>\" ; } forText ( ) { return new org . uberfire . ext . editor . commons . client . file . exports . TextFileExport ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( textFileSaver )"}
{"focal": "getMessages ( ) { return messages ; }", "testMethod": "structKeyHashedSideBySide ( ) { java . lang . String script = \"funkstruct<sp>=<sp>{<sp>'#method##route#'<sp>:<sp>target<sp>};\" ; cfml . CFSCRIPTParser . ScriptBlockContext scriptStatement = parseScript ( script ) ; if ( ( fCfmlParser . getMessages ( ) . size ( ) ) > 0 ) { org . junit . Assert . fail ( ( \"whoops!<sp>\" + ( fCfmlParser . getMessages ( ) ) ) ) ; } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( scriptStatement )", "total": "structKeyHashedSideBySide ( ) { java . lang . String script = \"funkstruct<sp>=<sp>{<sp>'#method##route#'<sp>:<sp>target<sp>};\" ; cfml . CFSCRIPTParser . ScriptBlockContext scriptStatement = parseScript ( script ) ; if ( ( fCfmlParser . getMessages ( ) . size ( ) ) > 0 ) { org . junit . Assert . fail ( ( \"whoops!<sp>\" + ( fCfmlParser . getMessages ( ) ) ) ) ; } \"<AssertPlaceHolder>\" ; } getMessages ( ) { return messages ; }", "answer": "org . junit . Assert . assertNotNull ( scriptStatement )"}
{"focal": "getCacheControl ( javax . servlet . http . HttpServletRequest , javax . servlet . http . HttpServletResponse , java . lang . Object ) { if ( ( handler == null ) || ( ! ( handler instanceof org . springframework . web . method . HandlerMethod ) ) ) { return null ; } final org . springframework . web . method . HandlerMethod handlerMethod = ( ( org . springframework . web . method . HandlerMethod ) ( handler ) ) ; net . rossillo . spring . web . mvc . CacheControl cacheControl = handlerMethod . getMethodAnnotation ( net . rossillo . spring . web . mvc . CacheControl . class ) ; if ( cacheControl == null ) { return handlerMethod . getBeanType ( ) . getAnnotation ( net . rossillo . spring . web . mvc . CacheControl . class ) ; } return cacheControl ; }", "testMethod": "testHandleWithDefaultPolicy ( ) { final org . springframework . web . method . HandlerMethod handler = new org . springframework . web . method . HandlerMethod ( controller , controller . getClass ( ) . getMethod ( \"handleWithDefaultPolicy\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( interceptor . getCacheControl ( null , null , handler ) )", "total": "testHandleWithDefaultPolicy ( ) { final org . springframework . web . method . HandlerMethod handler = new org . springframework . web . method . HandlerMethod ( controller , controller . getClass ( ) . getMethod ( \"handleWithDefaultPolicy\" ) ) ; \"<AssertPlaceHolder>\" ; } getCacheControl ( javax . servlet . http . HttpServletRequest , javax . servlet . http . HttpServletResponse , java . lang . Object ) { if ( ( handler == null ) || ( ! ( handler instanceof org . springframework . web . method . HandlerMethod ) ) ) { return null ; } final org . springframework . web . method . HandlerMethod handlerMethod = ( ( org . springframework . web . method . HandlerMethod ) ( handler ) ) ; net . rossillo . spring . web . mvc . CacheControl cacheControl = handlerMethod . getMethodAnnotation ( net . rossillo . spring . web . mvc . CacheControl . class ) ; if ( cacheControl == null ) { return handlerMethod . getBeanType ( ) . getAnnotation ( net . rossillo . spring . web . mvc . CacheControl . class ) ; } return cacheControl ; }", "answer": "org . junit . Assert . assertNotNull ( interceptor . getCacheControl ( null , null , handler ) )"}
{"focal": "searchRangerServices ( org . apache . ranger . plugin . util . SearchFilter ) { org . apache . ranger . view . RangerServiceList retList = new org . apache . ranger . view . RangerServiceList ( ) ; int startIndex = searchFilter . getStartIndex ( ) ; int pageSize = searchFilter . getMaxRows ( ) ; searchFilter . setStartIndex ( 0 ) ; searchFilter . setMaxRows ( Integer . MAX_VALUE ) ; java . util . List < T > xSvcList = searchResources ( searchFilter , searchFields , sortFields , retList ) ; java . util . List < T > permittedServices = new java . util . ArrayList < T > ( ) ; for ( T xSvc : xSvcList ) { if ( bizUtil . hasAccess ( xSvc , null ) ) { permittedServices . add ( xSvc ) ; } } if ( ! ( permittedServices . isEmpty ( ) ) ) { populatePageList ( permittedServices , startIndex , pageSize , retList ) ; } return retList ; }", "testMethod": "test3searchRangerServices ( ) { org . apache . ranger . plugin . util . SearchFilter searchFilter = new org . apache . ranger . plugin . util . SearchFilter ( ) ; searchFilter . setParam ( SearchFilter . POLICY_NAME , \"policyName\" ) ; searchFilter . setParam ( SearchFilter . SERVICE_NAME , \"serviceName\" ) ; org . apache . ranger . view . RangerServiceList dbRangerServiceList = rangerServiceService . searchRangerServices ( searchFilter ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dbRangerServiceList )", "total": "test3searchRangerServices ( ) { org . apache . ranger . plugin . util . SearchFilter searchFilter = new org . apache . ranger . plugin . util . SearchFilter ( ) ; searchFilter . setParam ( SearchFilter . POLICY_NAME , \"policyName\" ) ; searchFilter . setParam ( SearchFilter . SERVICE_NAME , \"serviceName\" ) ; org . apache . ranger . view . RangerServiceList dbRangerServiceList = rangerServiceService . searchRangerServices ( searchFilter ) ; \"<AssertPlaceHolder>\" ; } searchRangerServices ( org . apache . ranger . plugin . util . SearchFilter ) { org . apache . ranger . view . RangerServiceList retList = new org . apache . ranger . view . RangerServiceList ( ) ; int startIndex = searchFilter . getStartIndex ( ) ; int pageSize = searchFilter . getMaxRows ( ) ; searchFilter . setStartIndex ( 0 ) ; searchFilter . setMaxRows ( Integer . MAX_VALUE ) ; java . util . List < T > xSvcList = searchResources ( searchFilter , searchFields , sortFields , retList ) ; java . util . List < T > permittedServices = new java . util . ArrayList < T > ( ) ; for ( T xSvc : xSvcList ) { if ( bizUtil . hasAccess ( xSvc , null ) ) { permittedServices . add ( xSvc ) ; } } if ( ! ( permittedServices . isEmpty ( ) ) ) { populatePageList ( permittedServices , startIndex , pageSize , retList ) ; } return retList ; }", "answer": "org . junit . Assert . assertNotNull ( dbRangerServiceList )"}
{"focal": "getCFPageCoverage ( java . lang . String ) { synchronized ( pages ) { for ( org . kacperus . cf . coverage . TemplateStatistics page : pages ) { if ( page . getTemplatePath ( ) . equals ( pagePath ) ) { return page ; } } } return null ; }", "testMethod": "testMarkLineAsCovered ( ) { tool . markLineAsCovered ( templatePath1 , 1 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( tool . getCFPageCoverage ( templatePath1 ) )", "total": "testMarkLineAsCovered ( ) { tool . markLineAsCovered ( templatePath1 , 1 ) ; \"<AssertPlaceHolder>\" ; } getCFPageCoverage ( java . lang . String ) { synchronized ( pages ) { for ( org . kacperus . cf . coverage . TemplateStatistics page : pages ) { if ( page . getTemplatePath ( ) . equals ( pagePath ) ) { return page ; } } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( tool . getCFPageCoverage ( templatePath1 ) )"}
{"focal": "h2 ( ) { org . junit . Assert . assertNotNull ( EmbeddedDatabaseRule . Builder . h2 ( ) ) ; }", "testMethod": "withInitialSqlFromResourceNullBoth ( ) { final org . zapodot . junit . db . EmbeddedDatabaseRule . Builder builder = org . zapodot . junit . db . EmbeddedDatabaseRule . h2 ( ) ; \"<AssertPlaceHolder>\" ; builder . withInitialSqlFromResource ( null , null ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( builder )", "total": "withInitialSqlFromResourceNullBoth ( ) { final org . zapodot . junit . db . EmbeddedDatabaseRule . Builder builder = org . zapodot . junit . db . EmbeddedDatabaseRule . h2 ( ) ; \"<AssertPlaceHolder>\" ; builder . withInitialSqlFromResource ( null , null ) ; } h2 ( ) { org . junit . Assert . assertNotNull ( EmbeddedDatabaseRule . Builder . h2 ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( builder )"}
{"focal": "iterator ( ) { return new java . util . Iterator < T > ( ) { java . util . Iterator < ? > iterator = iterable . iterator ( ) ; @ org . sagebionetworks . collections . Override public boolean hasNext ( ) { return iterator . hasNext ( ) ; } @ org . sagebionetworks . collections . SuppressWarnings ( \"unchecked\" ) @ org . sagebionetworks . collections . Override public T next ( ) { return ( ( T ) ( iterator . next ( ) ) ) ; } @ org . sagebionetworks . collections . Override public void remove ( ) { iterator . remove ( ) ; } } ; }", "testMethod": "testAppendRowsAsStreamPLFM_3155TableNoRows ( ) { when ( mockTruthDao . getMaxRowId ( tableId ) ) . thenReturn ( ( - 1L ) ) ; java . lang . String etag = \"etag\" ; org . sagebionetworks . repo . model . table . RowReferenceSet results = new org . sagebionetworks . repo . model . table . RowReferenceSet ( ) ; org . sagebionetworks . repo . model . table . TableUpdateResponse response = manager . appendRowsAsStream ( user , tableId , models , sparseChangeSetWithRowIds . writeToDto ( ) . getRows ( ) . iterator ( ) , etag , results , mockProgressCallback , transactionId ) ; \"<AssertPlaceHolder>\" ; long idsToReserve = sparseChangeSetWithRowIds . getRowCount ( ) ; verify ( mockTruthDao ) . reserveIdsInRange ( tableId , idsToReserve ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testAppendRowsAsStreamPLFM_3155TableNoRows ( ) { when ( mockTruthDao . getMaxRowId ( tableId ) ) . thenReturn ( ( - 1L ) ) ; java . lang . String etag = \"etag\" ; org . sagebionetworks . repo . model . table . RowReferenceSet results = new org . sagebionetworks . repo . model . table . RowReferenceSet ( ) ; org . sagebionetworks . repo . model . table . TableUpdateResponse response = manager . appendRowsAsStream ( user , tableId , models , sparseChangeSetWithRowIds . writeToDto ( ) . getRows ( ) . iterator ( ) , etag , results , mockProgressCallback , transactionId ) ; \"<AssertPlaceHolder>\" ; long idsToReserve = sparseChangeSetWithRowIds . getRowCount ( ) ; verify ( mockTruthDao ) . reserveIdsInRange ( tableId , idsToReserve ) ; } iterator ( ) { return new java . util . Iterator < T > ( ) { java . util . Iterator < ? > iterator = iterable . iterator ( ) ; @ org . sagebionetworks . collections . Override public boolean hasNext ( ) { return iterator . hasNext ( ) ; } @ org . sagebionetworks . collections . SuppressWarnings ( \"unchecked\" ) @ org . sagebionetworks . collections . Override public T next ( ) { return ( ( T ) ( iterator . next ( ) ) ) ; } @ org . sagebionetworks . collections . Override public void remove ( ) { iterator . remove ( ) ; } } ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "pathrep ( ) { org . neo4j . graphdb . Node a = node ( 0 , properties ( ) ) ; org . neo4j . graphdb . Node b = node ( 1 , properties ( ) ) ; org . neo4j . graphdb . Node c = node ( 2 , properties ( ) ) ; org . neo4j . graphdb . Node d = node ( 3 , properties ( ) ) ; org . neo4j . graphdb . Relationship ab = relationship ( 17 , a , \"LOVES\" , b ) ; org . neo4j . graphdb . Relationship cb = relationship ( 18 , c , \"HATES\" , b ) ; org . neo4j . graphdb . Relationship cd = relationship ( 19 , c , \"KNOWS\" , d ) ; return new org . neo4j . server . rest . repr . PathRepresentation ( path ( a , link ( ab , b ) , link ( cb , c ) , link ( cd , d ) ) ) ; }", "testMethod": "shouldHaveLength ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pathrep ( ) . length ( ) )", "total": "shouldHaveLength ( ) { \"<AssertPlaceHolder>\" ; } pathrep ( ) { org . neo4j . graphdb . Node a = node ( 0 , properties ( ) ) ; org . neo4j . graphdb . Node b = node ( 1 , properties ( ) ) ; org . neo4j . graphdb . Node c = node ( 2 , properties ( ) ) ; org . neo4j . graphdb . Node d = node ( 3 , properties ( ) ) ; org . neo4j . graphdb . Relationship ab = relationship ( 17 , a , \"LOVES\" , b ) ; org . neo4j . graphdb . Relationship cb = relationship ( 18 , c , \"HATES\" , b ) ; org . neo4j . graphdb . Relationship cd = relationship ( 19 , c , \"KNOWS\" , d ) ; return new org . neo4j . server . rest . repr . PathRepresentation ( path ( a , link ( ab , b ) , link ( cb , c ) , link ( cd , d ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( pathrep ( ) . length ( ) )"}
{"focal": "size ( ) { for ( int k = 0 ; true ; k ++ ) { if ( ( ! ( secureStorage . contains ( org . societies . security . digsig . trust . Keywords . certificate ( k ) ) ) ) && ( ! ( secureStorage . contains ( org . societies . security . digsig . trust . Keywords . key ( k ) ) ) ) ) { return k ; } } }", "testMethod": "testAddCisActivity ( ) { org . societies . platform . activityfeed . ActivityFeedTest . LOG . info ( \"filterValue\" 3 ) ; actFeed . setId ( \"filterValue\" 0 ) ; actFeed . startUp ( sessionFactory ) ; java . lang . String actor = \"filterValue\" 2 ; java . lang . String verb = \"published\" ; org . societies . api . activity . IActivity iact = new org . societies . activity . model . Activity ( ) ; iact . setActor ( actor ) ; iact . setPublished ( java . lang . Long . toString ( java . lang . System . currentTimeMillis ( ) ) ) ; iact . setVerb ( verb ) ; iact . setObject ( \"filterValue\" 5 ) ; iact . setTarget ( \"testTarget\" ) ; actFeed . addActivityToDB ( iact ) ; java . util . List < org . societies . api . activity . IActivity > results = null ; try { org . json . JSONObject searchQuery = new org . json . JSONObject ( ) ; java . lang . String timeSeries = \"filterValue\" 4 + ( java . lang . Long . toString ( java . lang . System . currentTimeMillis ( ) ) ) ; try { searchQuery . append ( \"filterBy\" , \"actor\" ) ; searchQuery . append ( \"filterOp\" , \"equals\" ) ; searchQuery . append ( \"filterValue\" , actor ) ; } catch ( org . json . JSONException e ) { e . printStackTrace ( ) ; } org . societies . platform . activityfeed . ActivityFeedTest . LOG . info ( ( ( ( \"sending<sp>timeSeries:<sp>\" + timeSeries ) + \"<sp>act<sp>published:<sp>\" ) + ( iact . getPublished ( ) ) ) ) ; results = actFeed . getActivitiesFromDB ( searchQuery . toString ( ) , timeSeries ) ; org . societies . platform . activityfeed . ActivityFeedTest . LOG . info ( ( \"filterValue\" 1 + ( results . size ( ) ) ) ) ; } catch ( java . lang . Exception e ) { org . societies . platform . activityfeed . ActivityFeedTest . LOG . error ( \"exception<sp>in<sp>test:\" , e ) ; } \"<AssertPlaceHolder>\" ; assert ( results . size ( ) ) > 0 ; assert results . get ( 0 ) . getActor ( ) . equals ( actor ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( results )", "total": "testAddCisActivity ( ) { org . societies . platform . activityfeed . ActivityFeedTest . LOG . info ( \"filterValue\" 3 ) ; actFeed . setId ( \"filterValue\" 0 ) ; actFeed . startUp ( sessionFactory ) ; java . lang . String actor = \"filterValue\" 2 ; java . lang . String verb = \"published\" ; org . societies . api . activity . IActivity iact = new org . societies . activity . model . Activity ( ) ; iact . setActor ( actor ) ; iact . setPublished ( java . lang . Long . toString ( java . lang . System . currentTimeMillis ( ) ) ) ; iact . setVerb ( verb ) ; iact . setObject ( \"filterValue\" 5 ) ; iact . setTarget ( \"testTarget\" ) ; actFeed . addActivityToDB ( iact ) ; java . util . List < org . societies . api . activity . IActivity > results = null ; try { org . json . JSONObject searchQuery = new org . json . JSONObject ( ) ; java . lang . String timeSeries = \"filterValue\" 4 + ( java . lang . Long . toString ( java . lang . System . currentTimeMillis ( ) ) ) ; try { searchQuery . append ( \"filterBy\" , \"actor\" ) ; searchQuery . append ( \"filterOp\" , \"equals\" ) ; searchQuery . append ( \"filterValue\" , actor ) ; } catch ( org . json . JSONException e ) { e . printStackTrace ( ) ; } org . societies . platform . activityfeed . ActivityFeedTest . LOG . info ( ( ( ( \"sending<sp>timeSeries:<sp>\" + timeSeries ) + \"<sp>act<sp>published:<sp>\" ) + ( iact . getPublished ( ) ) ) ) ; results = actFeed . getActivitiesFromDB ( searchQuery . toString ( ) , timeSeries ) ; org . societies . platform . activityfeed . ActivityFeedTest . LOG . info ( ( \"filterValue\" 1 + ( results . size ( ) ) ) ) ; } catch ( java . lang . Exception e ) { org . societies . platform . activityfeed . ActivityFeedTest . LOG . error ( \"exception<sp>in<sp>test:\" , e ) ; } \"<AssertPlaceHolder>\" ; assert ( results . size ( ) ) > 0 ; assert results . get ( 0 ) . getActor ( ) . equals ( actor ) ; } size ( ) { for ( int k = 0 ; true ; k ++ ) { if ( ( ! ( secureStorage . contains ( org . societies . security . digsig . trust . Keywords . certificate ( k ) ) ) ) && ( ! ( secureStorage . contains ( org . societies . security . digsig . trust . Keywords . key ( k ) ) ) ) ) { return k ; } } }", "answer": "org . junit . Assert . assertNotNull ( results )"}
{"focal": "create ( boolean ) { return org . jboss . windup . util . ExecutionStatistics . performBenchmarked ( ( ( org . jboss . windup . graph . GraphContextFactory . class . getName ( ) ) + \".create(Path)\" ) , ( ) -> { org . jboss . windup . graph . GraphContext graphContext = new org . jboss . windup . graph . GraphContextImpl ( getFurnace ( ) , getGraphTypeManager ( ) , getGraphApiCompositeClassLoaderProvider ( ) , getTempGraphDirectory ( ) ) . create ( enableListeners ) ; graphMap . put ( graphContext . getGraphDirectory ( ) . toString ( ) , graphContext ) ; return graphContext ; } ) ; }", "testMethod": "testEventGraph ( ) { try ( org . jboss . windup . graph . GraphContext context = factory . create ( true ) ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( context )", "total": "testEventGraph ( ) { try ( org . jboss . windup . graph . GraphContext context = factory . create ( true ) ) { \"<AssertPlaceHolder>\" ; } } create ( boolean ) { return org . jboss . windup . util . ExecutionStatistics . performBenchmarked ( ( ( org . jboss . windup . graph . GraphContextFactory . class . getName ( ) ) + \".create(Path)\" ) , ( ) -> { org . jboss . windup . graph . GraphContext graphContext = new org . jboss . windup . graph . GraphContextImpl ( getFurnace ( ) , getGraphTypeManager ( ) , getGraphApiCompositeClassLoaderProvider ( ) , getTempGraphDirectory ( ) ) . create ( enableListeners ) ; graphMap . put ( graphContext . getGraphDirectory ( ) . toString ( ) , graphContext ) ; return graphContext ; } ) ; }", "answer": "org . junit . Assert . assertNotNull ( context )"}
{"focal": "rangeTerm ( java . lang . String , boolean , boolean ) { return new com . liferay . portal . search . internal . query . RangeTermQueryImpl ( field , includesLower , includesUpper ) ; }", "testMethod": "testRangeTermQuery1 ( ) { boolean includesLower = true ; boolean includesUpper = true ; com . liferay . portal . search . query . RangeTermQuery rangeTermQuery = com . liferay . portal . search . query . test . QueriesInstantiationTest . _queries . rangeTerm ( \"field\" , includesLower , includesUpper ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( rangeTermQuery )", "total": "testRangeTermQuery1 ( ) { boolean includesLower = true ; boolean includesUpper = true ; com . liferay . portal . search . query . RangeTermQuery rangeTermQuery = com . liferay . portal . search . query . test . QueriesInstantiationTest . _queries . rangeTerm ( \"field\" , includesLower , includesUpper ) ; \"<AssertPlaceHolder>\" ; } rangeTerm ( java . lang . String , boolean , boolean ) { return new com . liferay . portal . search . internal . query . RangeTermQueryImpl ( field , includesLower , includesUpper ) ; }", "answer": "org . junit . Assert . assertNotNull ( rangeTermQuery )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . HashAudit entity = new org . oscarehr . common . model . HashAudit ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . HashAudit entity = new org . oscarehr . common . model . HashAudit ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "createProcessor ( com . streamsets . pipeline . api . Stage$Context , com . streamsets . pipeline . hbase . api . common . processor . HBaseLookupConfig , com . streamsets . pipeline . stage . common . ErrorRecordHandler ) { return com . streamsets . pipeline . hbase . api . HBaseFactory . hBaseProvider . createProcessor ( context , conf , errorRecordHandler ) ; }", "testMethod": "testFactoryProcessor ( ) { com . streamsets . pipeline . hbase . api . HBaseProcessor processor = com . streamsets . pipeline . hbase . api . HBaseFactory . createProcessor ( null , null , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( processor )", "total": "testFactoryProcessor ( ) { com . streamsets . pipeline . hbase . api . HBaseProcessor processor = com . streamsets . pipeline . hbase . api . HBaseFactory . createProcessor ( null , null , null ) ; \"<AssertPlaceHolder>\" ; } createProcessor ( com . streamsets . pipeline . api . Stage$Context , com . streamsets . pipeline . hbase . api . common . processor . HBaseLookupConfig , com . streamsets . pipeline . stage . common . ErrorRecordHandler ) { return com . streamsets . pipeline . hbase . api . HBaseFactory . hBaseProvider . createProcessor ( context , conf , errorRecordHandler ) ; }", "answer": "org . junit . Assert . assertNotNull ( processor )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "persist ( ) { org . superbiz . dynamic . User u = new org . superbiz . dynamic . User ( ) ; org . superbiz . dynamic . DynamicUserDaoTest . dao . save ( u ) ; \"<AssertPlaceHolder>\" ; org . superbiz . dynamic . DynamicUserDaoTest . util . remove ( u ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( u . getId ( ) )", "total": "persist ( ) { org . superbiz . dynamic . User u = new org . superbiz . dynamic . User ( ) ; org . superbiz . dynamic . DynamicUserDaoTest . dao . save ( u ) ; \"<AssertPlaceHolder>\" ; org . superbiz . dynamic . DynamicUserDaoTest . util . remove ( u ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( u . getId ( ) )"}
{"focal": "compileRegex ( java . lang . String ) { try { if ( ( regexp != null ) && ( ! ( regexp . trim ( ) . equals ( \"\" ) ) ) ) { return java . util . regex . Pattern . compile ( regexp , Pattern . CASE_INSENSITIVE ) ; } else { return null ; } } catch ( java . lang . RuntimeException e ) { return null ; } }", "testMethod": "compileRegexShouldCompile ( ) { java . util . regex . Pattern pattern = com . gisgraphy . importer . ImporterHelper . compileRegex ( \"ATM|FOREST$\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pattern )", "total": "compileRegexShouldCompile ( ) { java . util . regex . Pattern pattern = com . gisgraphy . importer . ImporterHelper . compileRegex ( \"ATM|FOREST$\" ) ; \"<AssertPlaceHolder>\" ; } compileRegex ( java . lang . String ) { try { if ( ( regexp != null ) && ( ! ( regexp . trim ( ) . equals ( \"\" ) ) ) ) { return java . util . regex . Pattern . compile ( regexp , Pattern . CASE_INSENSITIVE ) ; } else { return null ; } } catch ( java . lang . RuntimeException e ) { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( pattern )"}
{"focal": "getOne ( ) { return one ; }", "testMethod": "twiceInnerMapperAwareConverterMapping ( ) { com . github . dozermapper . core . vo . mapperaware . MapperAwareSimpleSrc src = new com . github . dozermapper . core . vo . mapperaware . MapperAwareSimpleSrc ( ) ; src . setOne ( new com . github . dozermapper . core . vo . mapperaware . MapperAwareSimpleInternal ( ) ) ; com . github . dozermapper . core . vo . mapperaware . MapperAwareSimpleDest dst = new com . github . dozermapper . core . vo . mapperaware . MapperAwareSimpleDest ( ) ; mapper . map ( src , dst ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dst . getOne ( ) )", "total": "twiceInnerMapperAwareConverterMapping ( ) { com . github . dozermapper . core . vo . mapperaware . MapperAwareSimpleSrc src = new com . github . dozermapper . core . vo . mapperaware . MapperAwareSimpleSrc ( ) ; src . setOne ( new com . github . dozermapper . core . vo . mapperaware . MapperAwareSimpleInternal ( ) ) ; com . github . dozermapper . core . vo . mapperaware . MapperAwareSimpleDest dst = new com . github . dozermapper . core . vo . mapperaware . MapperAwareSimpleDest ( ) ; mapper . map ( src , dst ) ; \"<AssertPlaceHolder>\" ; } getOne ( ) { return one ; }", "answer": "org . junit . Assert . assertNotNull ( dst . getOne ( ) )"}
{"focal": "verwerkBericht ( nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterVerzoekBericht ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType type = new nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType ( ) ; type . setGemeenteRegister ( new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteRegisterType ( ) ) ; final java . util . List < nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType > gemeentenList = type . getGemeenteRegister ( ) . getGemeente ( ) ; for ( final nl . bzk . migratiebrp . synchronisatie . dal . domein . brp . kern . entity . Gemeente gemeente : brpDalService . geefAlleGemeenten ( ) ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType gemeenteType = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; gemeenteType . setGemeenteCode ( asGemeenteCode ( gemeente . getCode ( ) ) ) ; gemeenteType . setPartijCode ( asPartijCode ( gemeente . getPartij ( ) . getCode ( ) ) ) ; if ( ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) ) != null ) { gemeenteType . setDatumBrp ( java . math . BigInteger . valueOf ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) . longValue ( ) ) ) ; } gemeentenList . add ( gemeenteType ) ; } final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType rni = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; rni . setGemeenteCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_GEMEENTE_CODE ) ; rni . setPartijCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_PARTIJ_CODE ) ; gemeentenList . add ( rni ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht antwoord = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht ( type ) ; antwoord . setStatus ( StatusType . OK ) ; antwoord . setMessageId ( nl . bzk . migratiebrp . synchronisatie . runtime . util . MessageId . generateSyncMessageId ( ) ) ; antwoord . setCorrelationId ( verzoek . getMessageId ( ) ) ; return antwoord ; }", "testMethod": "testDeblokkeringAntwoordFout ( ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . DeblokkeringVerzoekType deblokkeringVerzoekType = new nl . bzk . migratiebrp . bericht . model . sync . generated . DeblokkeringVerzoekType ( ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . DeblokkeringVerzoekBericht deblokkeringInfoVerzoek = new nl . bzk . migratiebrp . bericht . model . sync . impl . DeblokkeringVerzoekBericht ( deblokkeringVerzoekType ) ; deblokkeringInfoVerzoek . setMessageId ( java . util . UUID . randomUUID ( ) . toString ( ) ) ; try { when ( brpDalService . vraagOpBlokkering ( null ) ) . thenCallRealMethod ( ) ; deblokkeringVerzoekService . verwerkBericht ( deblokkeringInfoVerzoek ) ; org . junit . Assert . fail ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" , e )", "total": "testDeblokkeringAntwoordFout ( ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . DeblokkeringVerzoekType deblokkeringVerzoekType = new nl . bzk . migratiebrp . bericht . model . sync . generated . DeblokkeringVerzoekType ( ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . DeblokkeringVerzoekBericht deblokkeringInfoVerzoek = new nl . bzk . migratiebrp . bericht . model . sync . impl . DeblokkeringVerzoekBericht ( deblokkeringVerzoekType ) ; deblokkeringInfoVerzoek . setMessageId ( java . util . UUID . randomUUID ( ) . toString ( ) ) ; try { when ( brpDalService . vraagOpBlokkering ( null ) ) . thenCallRealMethod ( ) ; deblokkeringVerzoekService . verwerkBericht ( deblokkeringInfoVerzoek ) ; org . junit . Assert . fail ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; } } verwerkBericht ( nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterVerzoekBericht ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType type = new nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType ( ) ; type . setGemeenteRegister ( new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteRegisterType ( ) ) ; final java . util . List < nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType > gemeentenList = type . getGemeenteRegister ( ) . getGemeente ( ) ; for ( final nl . bzk . migratiebrp . synchronisatie . dal . domein . brp . kern . entity . Gemeente gemeente : brpDalService . geefAlleGemeenten ( ) ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType gemeenteType = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; gemeenteType . setGemeenteCode ( asGemeenteCode ( gemeente . getCode ( ) ) ) ; gemeenteType . setPartijCode ( asPartijCode ( gemeente . getPartij ( ) . getCode ( ) ) ) ; if ( ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) ) != null ) { gemeenteType . setDatumBrp ( java . math . BigInteger . valueOf ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) . longValue ( ) ) ) ; } gemeentenList . add ( gemeenteType ) ; } final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType rni = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; rni . setGemeenteCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_GEMEENTE_CODE ) ; rni . setPartijCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_PARTIJ_CODE ) ; gemeentenList . add ( rni ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht antwoord = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht ( type ) ; antwoord . setStatus ( StatusType . OK ) ; antwoord . setMessageId ( nl . bzk . migratiebrp . synchronisatie . runtime . util . MessageId . generateSyncMessageId ( ) ) ; antwoord . setCorrelationId ( verzoek . getMessageId ( ) ) ; return antwoord ; }", "answer": "org . junit . Assert . assertNotNull ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" , e )"}
{"focal": "getHeaderFooterProperties ( ) { return new org . apache . poi . xssf . usermodel . XSSFHeaderFooterProperties ( getSheetTypeHeaderFooter ( ) ) ; }", "testMethod": "testGetHeaderFooterProperties ( ) { try ( org . apache . poi . xssf . usermodel . XSSFWorkbook wb = new org . apache . poi . xssf . usermodel . XSSFWorkbook ( ) ) { org . apache . poi . xssf . usermodel . XSSFSheet sh = wb . createSheet ( ) ; org . apache . poi . xssf . usermodel . XSSFHeaderFooterProperties hfProp = sh . getHeaderFooterProperties ( ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( hfProp )", "total": "testGetHeaderFooterProperties ( ) { try ( org . apache . poi . xssf . usermodel . XSSFWorkbook wb = new org . apache . poi . xssf . usermodel . XSSFWorkbook ( ) ) { org . apache . poi . xssf . usermodel . XSSFSheet sh = wb . createSheet ( ) ; org . apache . poi . xssf . usermodel . XSSFHeaderFooterProperties hfProp = sh . getHeaderFooterProperties ( ) ; \"<AssertPlaceHolder>\" ; } } getHeaderFooterProperties ( ) { return new org . apache . poi . xssf . usermodel . XSSFHeaderFooterProperties ( getSheetTypeHeaderFooter ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( hfProp )"}
{"focal": "generate ( java . lang . String ) { if ( ( null == source ) || ( source . isEmpty ( ) ) ) { throw new info . smart_tools . smartactors . base . exception . invalid_argument_exception . InvalidArgumentException ( \"Source<sp>code<sp>should<sp>not<sp>be<sp>null<sp>or<sp>empty.\" ) ; } java . lang . String packageName = getFirstSubstringByPattern ( source , java . util . regex . Pattern . compile ( \"package\\\\s+([\\\\w\\\\.]+)\" ) ) ; java . lang . String className = getFirstSubstringByPattern ( source , java . util . regex . Pattern . compile ( \"(?:class|interface)\\\\s+(\\\\w+)\" ) ) ; if ( ( null == packageName ) || ( packageName . isEmpty ( ) ) ) { throw new info . smart_tools . smartactors . base . exception . invalid_argument_exception . InvalidArgumentException ( \"Source<sp>code<sp>doesn't<sp>contain<sp>package<sp>name.\" ) ; } if ( ( null == className ) || ( className . isEmpty ( ) ) ) { throw new info . smart_tools . smartactors . base . exception . invalid_argument_exception . InvalidArgumentException ( \"Source<sp>code<sp>doesn't<sp>contain<sp>class.\" ) ; } try { java . lang . String fullClassName = ( packageName + \".\" ) + className ; java . lang . Class < ? > compiledClass = this . compiler . compile ( fullClassName , source ) ; return compiledClass ; } catch ( java . lang . Throwable e ) { throw new info . smart_tools . smartactors . utility_tool . interfaces . iclass_generator . exception . ClassGenerationException ( \"Could<sp>not<sp>generate<sp>class.\" , e ) ; } }", "testMethod": "checkClassGenerationWithUsingJarFile ( ) { java . lang . String pathToJar = this . getClass ( ) . getClassLoader ( ) . getResource ( \"ifield_name.jar\" ) . getFile ( ) ; java . util . jar . JarFile jarFile = new java . util . jar . JarFile ( pathToJar ) ; java . util . Enumeration < java . util . jar . JarEntry > e = jarFile . entries ( ) ; java . net . URL [ ] urls = new java . net . URL [ ] { new java . net . URL ( ( ( \"jar:file:\" + pathToJar ) + \"!/\" ) ) } ; java . net . URLClassLoader cl = java . net . URLClassLoader . newInstance ( urls ) ; while ( e . hasMoreElements ( ) ) { java . util . jar . JarEntry je = e . nextElement ( ) ; if ( ( je . isDirectory ( ) ) || ( ! ( je . getName ( ) . endsWith ( \".class\" ) ) ) ) { continue ; } java . lang . String className = je . getName ( ) . substring ( 0 , ( ( je . getName ( ) . length ( ) ) - 6 ) ) ; className = className . replace ( '/' , '.' ) ; java . lang . Class c = cl . loadClass ( className ) ; } info . smart_tools . smartactors . utility_tool . class_generator_with_java_compile_api . ClassGenerator classGenerator = new info . smart_tools . smartactors . utility_tool . class_generator_with_java_compile_api . ClassGenerator ( cl ) ; java . lang . String testSample = \"ifield_name.jar\" 2 + ( ( ( ( ( ( ( \"import<sp>info.smart_tools.smartactors.utility_tool.class_generator_with_java_compile_api.TestInterface;\\n\" + \"import<sp>info.smart_tools.smartactors.core.ifield_name.IFieldName;\\n\" ) + \"ifield_name.jar\" 1 ) + \"<sp>private<sp>int<sp>a;\\n\" ) + \"<sp>public<sp>Integer<sp>getA()<sp>{\\n\" ) + \"<sp>return<sp>a;\\n\" ) + \"ifield_name.jar\" 0 ) + \"}\\n\" ) ; java . lang . Class newClass = classGenerator . generate ( testSample ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( newClass )", "total": "checkClassGenerationWithUsingJarFile ( ) { java . lang . String pathToJar = this . getClass ( ) . getClassLoader ( ) . getResource ( \"ifield_name.jar\" ) . getFile ( ) ; java . util . jar . JarFile jarFile = new java . util . jar . JarFile ( pathToJar ) ; java . util . Enumeration < java . util . jar . JarEntry > e = jarFile . entries ( ) ; java . net . URL [ ] urls = new java . net . URL [ ] { new java . net . URL ( ( ( \"jar:file:\" + pathToJar ) + \"!/\" ) ) } ; java . net . URLClassLoader cl = java . net . URLClassLoader . newInstance ( urls ) ; while ( e . hasMoreElements ( ) ) { java . util . jar . JarEntry je = e . nextElement ( ) ; if ( ( je . isDirectory ( ) ) || ( ! ( je . getName ( ) . endsWith ( \".class\" ) ) ) ) { continue ; } java . lang . String className = je . getName ( ) . substring ( 0 , ( ( je . getName ( ) . length ( ) ) - 6 ) ) ; className = className . replace ( '/' , '.' ) ; java . lang . Class c = cl . loadClass ( className ) ; } info . smart_tools . smartactors . utility_tool . class_generator_with_java_compile_api . ClassGenerator classGenerator = new info . smart_tools . smartactors . utility_tool . class_generator_with_java_compile_api . ClassGenerator ( cl ) ; java . lang . String testSample = \"ifield_name.jar\" 2 + ( ( ( ( ( ( ( \"import<sp>info.smart_tools.smartactors.utility_tool.class_generator_with_java_compile_api.TestInterface;\\n\" + \"import<sp>info.smart_tools.smartactors.core.ifield_name.IFieldName;\\n\" ) + \"ifield_name.jar\" 1 ) + \"<sp>private<sp>int<sp>a;\\n\" ) + \"<sp>public<sp>Integer<sp>getA()<sp>{\\n\" ) + \"<sp>return<sp>a;\\n\" ) + \"ifield_name.jar\" 0 ) + \"}\\n\" ) ; java . lang . Class newClass = classGenerator . generate ( testSample ) ; \"<AssertPlaceHolder>\" ; } generate ( java . lang . String ) { if ( ( null == source ) || ( source . isEmpty ( ) ) ) { throw new info . smart_tools . smartactors . base . exception . invalid_argument_exception . InvalidArgumentException ( \"Source<sp>code<sp>should<sp>not<sp>be<sp>null<sp>or<sp>empty.\" ) ; } java . lang . String packageName = getFirstSubstringByPattern ( source , java . util . regex . Pattern . compile ( \"package\\\\s+([\\\\w\\\\.]+)\" ) ) ; java . lang . String className = getFirstSubstringByPattern ( source , java . util . regex . Pattern . compile ( \"(?:class|interface)\\\\s+(\\\\w+)\" ) ) ; if ( ( null == packageName ) || ( packageName . isEmpty ( ) ) ) { throw new info . smart_tools . smartactors . base . exception . invalid_argument_exception . InvalidArgumentException ( \"Source<sp>code<sp>doesn't<sp>contain<sp>package<sp>name.\" ) ; } if ( ( null == className ) || ( className . isEmpty ( ) ) ) { throw new info . smart_tools . smartactors . base . exception . invalid_argument_exception . InvalidArgumentException ( \"Source<sp>code<sp>doesn't<sp>contain<sp>class.\" ) ; } try { java . lang . String fullClassName = ( packageName + \".\" ) + className ; java . lang . Class < ? > compiledClass = this . compiler . compile ( fullClassName , source ) ; return compiledClass ; } catch ( java . lang . Throwable e ) { throw new info . smart_tools . smartactors . utility_tool . interfaces . iclass_generator . exception . ClassGenerationException ( \"Could<sp>not<sp>generate<sp>class.\" , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( newClass )"}
{"focal": "getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "testMethod": "shouldFailTableValidationWhenTableDoesntHaveCoprocessor ( ) { final uk . gov . gchq . gaffer . hbasestore . SingleUseMiniHBaseStore store = new uk . gov . gchq . gaffer . hbasestore . SingleUseMiniHBaseStore ( ) ; final uk . gov . gchq . gaffer . store . schema . Schema schema = new uk . gov . gchq . gaffer . store . schema . Schema . Builder ( ) . type ( TestTypes . ID_STRING , new uk . gov . gchq . gaffer . store . schema . TypeDefinition . Builder ( ) . aggregateFunction ( new uk . gov . gchq . koryphe . impl . binaryoperator . StringConcat ( ) ) . clazz ( java . lang . String . class ) . build ( ) ) . type ( TestTypes . DIRECTED_TRUE , uk . gov . gchq . gaffer . hbasestore . util . Boolean . class ) . edge ( TestGroups . EDGE , new uk . gov . gchq . gaffer . store . schema . SchemaEdgeDefinition . Builder ( ) . source ( TestTypes . ID_STRING ) . destination ( TestTypes . ID_STRING ) . directed ( TestTypes . DIRECTED_TRUE ) . build ( ) ) . build ( ) ; final uk . gov . gchq . gaffer . hbasestore . HBaseProperties props = uk . gov . gchq . gaffer . hbasestore . HBaseProperties . loadStoreProperties ( uk . gov . gchq . gaffer . commonutil . StreamUtil . storeProps ( uk . gov . gchq . gaffer . hbasestore . util . TableUtilsTest . class ) ) ; store . initialise ( uk . gov . gchq . gaffer . hbasestore . util . TableUtilsTest . GRAPH_ID , schema , props ) ; final org . apache . hadoop . hbase . TableName tableName = store . getTableName ( ) ; try ( final org . apache . hadoop . hbase . client . Admin admin = store . getConnection ( ) . getAdmin ( ) ) { final org . apache . hadoop . hbase . HTableDescriptor descriptor = admin . getTableDescriptor ( tableName ) ; descriptor . removeCoprocessor ( uk . gov . gchq . gaffer . hbasestore . coprocessor . GafferCoprocessor . class . getName ( ) ) ; admin . modifyTable ( tableName , descriptor ) ; } catch ( uk . gov . gchq . gaffer . store . StoreException | java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } try { uk . gov . gchq . gaffer . hbasestore . utils . TableUtils . ensureTableExists ( store ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final uk . gov . gchq . gaffer . store . StoreException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "shouldFailTableValidationWhenTableDoesntHaveCoprocessor ( ) { final uk . gov . gchq . gaffer . hbasestore . SingleUseMiniHBaseStore store = new uk . gov . gchq . gaffer . hbasestore . SingleUseMiniHBaseStore ( ) ; final uk . gov . gchq . gaffer . store . schema . Schema schema = new uk . gov . gchq . gaffer . store . schema . Schema . Builder ( ) . type ( TestTypes . ID_STRING , new uk . gov . gchq . gaffer . store . schema . TypeDefinition . Builder ( ) . aggregateFunction ( new uk . gov . gchq . koryphe . impl . binaryoperator . StringConcat ( ) ) . clazz ( java . lang . String . class ) . build ( ) ) . type ( TestTypes . DIRECTED_TRUE , uk . gov . gchq . gaffer . hbasestore . util . Boolean . class ) . edge ( TestGroups . EDGE , new uk . gov . gchq . gaffer . store . schema . SchemaEdgeDefinition . Builder ( ) . source ( TestTypes . ID_STRING ) . destination ( TestTypes . ID_STRING ) . directed ( TestTypes . DIRECTED_TRUE ) . build ( ) ) . build ( ) ; final uk . gov . gchq . gaffer . hbasestore . HBaseProperties props = uk . gov . gchq . gaffer . hbasestore . HBaseProperties . loadStoreProperties ( uk . gov . gchq . gaffer . commonutil . StreamUtil . storeProps ( uk . gov . gchq . gaffer . hbasestore . util . TableUtilsTest . class ) ) ; store . initialise ( uk . gov . gchq . gaffer . hbasestore . util . TableUtilsTest . GRAPH_ID , schema , props ) ; final org . apache . hadoop . hbase . TableName tableName = store . getTableName ( ) ; try ( final org . apache . hadoop . hbase . client . Admin admin = store . getConnection ( ) . getAdmin ( ) ) { final org . apache . hadoop . hbase . HTableDescriptor descriptor = admin . getTableDescriptor ( tableName ) ; descriptor . removeCoprocessor ( uk . gov . gchq . gaffer . hbasestore . coprocessor . GafferCoprocessor . class . getName ( ) ) ; admin . modifyTable ( tableName , descriptor ) ; } catch ( uk . gov . gchq . gaffer . store . StoreException | java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } try { uk . gov . gchq . gaffer . hbasestore . utils . TableUtils . ensureTableExists ( store ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final uk . gov . gchq . gaffer . store . StoreException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "getAttributes ( javax . naming . Name ) { javax . naming . directory . Attributes attrs = null ; try { attrs = org . apache . directory . server . core . api . entry . ServerEntryUtils . toBasicAttributes ( doLookupOperation ( buildTarget ( org . apache . directory . api . ldap . util . JndiUtils . fromName ( name ) ) ) ) ; } catch ( java . lang . Exception e ) { org . apache . directory . api . ldap . util . JndiUtils . wrap ( e ) ; } return attrs ; }", "testMethod": "testLookupPerfJNDI ( ) { javax . naming . ldap . LdapContext ctx = org . apache . directory . server . operations . lookup . LookupPerfIT . getWiredContext ( ldapServer , null ) ; javax . naming . directory . Attributes result = ctx . getAttributes ( \"uid=admin,ou=system\" ) ; \"<AssertPlaceHolder>\" ; long t0 = java . lang . System . currentTimeMillis ( ) ; for ( int i = 0 ; i < 50 ; i ++ ) { for ( int j = 0 ; j < 10000 ; j ++ ) { ctx . getAttributes ( \"uid=admin,ou=system\" ) ; } System . out . print ( \".\" ) ; } long t1 = java . lang . System . currentTimeMillis ( ) ; System . out . println ( ( \"Delta<sp>:<sp>\" + ( t1 - t0 ) ) ) ; ctx . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testLookupPerfJNDI ( ) { javax . naming . ldap . LdapContext ctx = org . apache . directory . server . operations . lookup . LookupPerfIT . getWiredContext ( ldapServer , null ) ; javax . naming . directory . Attributes result = ctx . getAttributes ( \"uid=admin,ou=system\" ) ; \"<AssertPlaceHolder>\" ; long t0 = java . lang . System . currentTimeMillis ( ) ; for ( int i = 0 ; i < 50 ; i ++ ) { for ( int j = 0 ; j < 10000 ; j ++ ) { ctx . getAttributes ( \"uid=admin,ou=system\" ) ; } System . out . print ( \".\" ) ; } long t1 = java . lang . System . currentTimeMillis ( ) ; System . out . println ( ( \"Delta<sp>:<sp>\" + ( t1 - t0 ) ) ) ; ctx . close ( ) ; } getAttributes ( javax . naming . Name ) { javax . naming . directory . Attributes attrs = null ; try { attrs = org . apache . directory . server . core . api . entry . ServerEntryUtils . toBasicAttributes ( doLookupOperation ( buildTarget ( org . apache . directory . api . ldap . util . JndiUtils . fromName ( name ) ) ) ) ; } catch ( java . lang . Exception e ) { org . apache . directory . api . ldap . util . JndiUtils . wrap ( e ) ; } return attrs ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "configure ( ) { bind ( org . apache . struts2 . dispatcher . ng . filter . StrutsPrepareFilter . class ) . asEagerSingleton ( ) ; bind ( com . opensymphony . sitemesh . webapp . SiteMeshFilter . class ) . asEagerSingleton ( ) ; bind ( org . apache . struts2 . dispatcher . ng . filter . StrutsExecuteFilter . class ) . asEagerSingleton ( ) ; bind ( com . fiveamsolutions . plc . web . filter . PLCUserFilter . class ) . asEagerSingleton ( ) ; requestStaticInjection ( com . fiveamsolutions . plc . jaas . PLCLoginModule . class ) ; }", "testMethod": "testModule ( ) { final javax . persistence . EntityManager em = mock ( javax . persistence . EntityManager . class ) ; com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( new com . fiveamsolutions . plc . data . validator . ValidatorModule ( ) , new com . google . inject . AbstractModule ( ) { @ com . fiveamsolutions . plc . data . validator . Override protected void configure ( ) { bind ( javax . persistence . EntityManager . class ) . toInstance ( em ) ; } } ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( injector )", "total": "testModule ( ) { final javax . persistence . EntityManager em = mock ( javax . persistence . EntityManager . class ) ; com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( new com . fiveamsolutions . plc . data . validator . ValidatorModule ( ) , new com . google . inject . AbstractModule ( ) { @ com . fiveamsolutions . plc . data . validator . Override protected void configure ( ) { bind ( javax . persistence . EntityManager . class ) . toInstance ( em ) ; } } ) ; \"<AssertPlaceHolder>\" ; } configure ( ) { bind ( org . apache . struts2 . dispatcher . ng . filter . StrutsPrepareFilter . class ) . asEagerSingleton ( ) ; bind ( com . opensymphony . sitemesh . webapp . SiteMeshFilter . class ) . asEagerSingleton ( ) ; bind ( org . apache . struts2 . dispatcher . ng . filter . StrutsExecuteFilter . class ) . asEagerSingleton ( ) ; bind ( com . fiveamsolutions . plc . web . filter . PLCUserFilter . class ) . asEagerSingleton ( ) ; requestStaticInjection ( com . fiveamsolutions . plc . jaas . PLCLoginModule . class ) ; }", "answer": "org . junit . Assert . assertNotNull ( injector )"}
{"focal": "getResponse ( ) { return _response ; }", "testMethod": "testAddWidget ( ) { com . agiletec . aps . system . services . user . UserDetails user = new org . entando . entando . web . utils . OAuth2TestUtils . UserBuilder ( \"jack_bauer\" , \"0x24\" ) . grantedToRoleAdmin ( ) . build ( ) ; java . lang . String accessToken = mockOAuthInterceptor ( user ) ; this . controller . setWidgetValidator ( new org . entando . entando . web . widget . validator . WidgetValidator ( ) ) ; org . springframework . test . web . servlet . ResultActions result = mockMvc . perform ( post ( \"/widgets\" ) . contentType ( MediaType . APPLICATION_JSON ) . content ( convertObjectToJsonBytes ( createMockRequest ( ) ) ) . header ( \"Authorization\" , ( \"Bearer<sp>\" + accessToken ) ) ) ; java . lang . String response = result . andReturn ( ) . getResponse ( ) . getContentAsString ( ) ; result . andExpect ( status ( ) . isOk ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testAddWidget ( ) { com . agiletec . aps . system . services . user . UserDetails user = new org . entando . entando . web . utils . OAuth2TestUtils . UserBuilder ( \"jack_bauer\" , \"0x24\" ) . grantedToRoleAdmin ( ) . build ( ) ; java . lang . String accessToken = mockOAuthInterceptor ( user ) ; this . controller . setWidgetValidator ( new org . entando . entando . web . widget . validator . WidgetValidator ( ) ) ; org . springframework . test . web . servlet . ResultActions result = mockMvc . perform ( post ( \"/widgets\" ) . contentType ( MediaType . APPLICATION_JSON ) . content ( convertObjectToJsonBytes ( createMockRequest ( ) ) ) . header ( \"Authorization\" , ( \"Bearer<sp>\" + accessToken ) ) ) ; java . lang . String response = result . andReturn ( ) . getResponse ( ) . getContentAsString ( ) ; result . andExpect ( status ( ) . isOk ( ) ) ; \"<AssertPlaceHolder>\" ; } getResponse ( ) { return _response ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "getAcsResponse ( com . aliyuncs . AcsRequest ) { com . aliyuncs . HttpResponse baseResponse = this . doAction ( request ) ; return parseAcsResponse ( request , baseResponse ) ; }", "testMethod": "ecsMetaServerStsTokenTest ( ) { com . aliyuncs . profile . DefaultProfile profile = com . aliyuncs . profile . DefaultProfile . getProfile ( this . regionId ) ; com . aliyuncs . auth . InstanceProfileCredentialsProvider provider = new com . aliyuncs . auth . InstanceProfileCredentialsProvider ( \"alice\" ) ; com . aliyuncs . DefaultAcsClient client = new com . aliyuncs . DefaultAcsClient ( profile , provider ) ; com . aliyuncs . ecs . model . v20140526 . DescribeInstancesRequest request = new com . aliyuncs . ecs . model . v20140526 . DescribeInstancesRequest ( ) ; com . aliyuncs . ecs . model . v20140526 . DescribeInstancesResponse response = client . getAcsResponse ( request ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "ecsMetaServerStsTokenTest ( ) { com . aliyuncs . profile . DefaultProfile profile = com . aliyuncs . profile . DefaultProfile . getProfile ( this . regionId ) ; com . aliyuncs . auth . InstanceProfileCredentialsProvider provider = new com . aliyuncs . auth . InstanceProfileCredentialsProvider ( \"alice\" ) ; com . aliyuncs . DefaultAcsClient client = new com . aliyuncs . DefaultAcsClient ( profile , provider ) ; com . aliyuncs . ecs . model . v20140526 . DescribeInstancesRequest request = new com . aliyuncs . ecs . model . v20140526 . DescribeInstancesRequest ( ) ; com . aliyuncs . ecs . model . v20140526 . DescribeInstancesResponse response = client . getAcsResponse ( request ) ; \"<AssertPlaceHolder>\" ; } getAcsResponse ( com . aliyuncs . AcsRequest ) { com . aliyuncs . HttpResponse baseResponse = this . doAction ( request ) ; return parseAcsResponse ( request , baseResponse ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "load ( ) { java . io . File file = new java . io . File ( fileName ) ; try { com . fasterxml . jackson . databind . JsonNode node = null ; if ( ( file . exists ( ) ) && ( ( file . length ( ) ) > 0 ) ) { node = mapper . readTree ( file ) ; configuration . prepareInitializers ( ) ; if ( node . has ( \"policy-type\" 7 ) ) { java . util . Iterator < com . fasterxml . jackson . databind . JsonNode > it = node . get ( \"policy-type\" 7 ) . iterator ( ) ; java . util . Collection < org . walkmod . conf . entities . PluginConfig > pluginList = new java . util . LinkedList < org . walkmod . conf . entities . PluginConfig > ( ) ; while ( it . hasNext ( ) ) { com . fasterxml . jackson . databind . JsonNode current = it . next ( ) ; java . lang . String pluginId = current . asText ( ) ; java . lang . String [ ] split = pluginId . split ( \":\" ) ; if ( ( split . length ) > 3 ) { } else { java . lang . String groupId ; java . lang . String artifactId ; java . lang . String version ; groupId = split [ 0 ] ; artifactId = split [ 1 ] ; version = split [ 2 ] ; org . walkmod . conf . entities . PluginConfig plugin = new org . walkmod . conf . entities . impl . PluginConfigImpl ( ) ; plugin . setGroupId ( groupId ) ; plugin . setArtifactId ( artifactId ) ; plugin . setVersion ( version ) ; pluginList . add ( plugin ) ; } } configuration . setPlugins ( pluginList ) ; } if ( node . has ( \"policy-type\" 9 ) ) { java . util . Iterator < com . fasterxml . jackson . databind . JsonNode > it = node . get ( \"policy-type\" 9 ) . iterator ( ) ; java . util . List < java . lang . String > modules = new java . util . LinkedList < java . lang . String > ( ) ; configuration . setModules ( modules ) ; while ( it . hasNext ( ) ) { com . fasterxml . jackson . databind . JsonNode current = it . next ( ) ; modules . add ( current . asText ( ) ) ; } configuration . setModules ( modules ) ; } if ( node . has ( \"merge-policies\" ) ) { java . util . Iterator < com . fasterxml . jackson . databind . JsonNode > it = node . get ( \"merge-policies\" ) . iterator ( ) ; java . util . Collection < org . walkmod . conf . entities . MergePolicyConfig > mergePolicies = new java . util . LinkedList < org . walkmod . conf . entities . MergePolicyConfig > ( ) ; while ( it . hasNext ( ) ) { com . fasterxml . jackson . databind . JsonNode next = it . next ( ) ; if ( next . has ( \"policy-type\" 1 ) ) { org . walkmod . conf . entities . MergePolicyConfig mergeCfg = new org . walkmod . conf . entities . impl . MergePolicyConfigImpl ( ) ; mergeCfg . setName ( next . get ( \"policy-type\" 8 ) . asText ( ) ) ; mergeCfg . setDefaultObjectPolicy ( next . get ( \"policy-type\" 5 ) . asText ( ) ) ; mergeCfg . setDefaultTypePolicy ( next . get ( \"default-type-policy\" ) . asText ( ) ) ; if ( next . has ( \"policy-type\" 1 ) ) { java . util . Iterator < com . fasterxml . jackson . databind . JsonNode > it2 = next . get ( \"policy-type\" 1 ) . iterator ( ) ; java . util . Map < java . lang . String , java . lang . String > policies = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; while ( it2 . hasNext ( ) ) { com . fasterxml . jackson . databind . JsonNode nextPolicy = it2 . next ( ) ; java . lang . String objectType = nextPolicy . get ( \"policy-type\" 6 ) . asText ( ) ; java . lang . String policyType = nextPolicy . get ( \"policy-type\" ) . asText ( ) ; policies . put ( objectType , policyType ) ; } mergeCfg . setPolicyEntries ( policies ) ; } mergePolicies . add ( mergeCfg ) ; } } configuration . setMergePolicies ( mergePolicies ) ; } if ( node . has (", "testMethod": "testInvalidPlugins ( ) { org . walkmod . conf . providers . IvyConfigurationProvider provider = new org . walkmod . conf . providers . IvyConfigurationProvider ( ) ; org . walkmod . conf . entities . Configuration conf = new org . walkmod . conf . entities . impl . ConfigurationImpl ( ) ; provider . init ( conf ) ; org . walkmod . conf . entities . PluginConfig pc = new org . walkmod . conf . entities . impl . PluginConfigImpl ( ) ; pc . setGroupId ( \"foo\" ) ; pc . setArtifactId ( \"bar\" ) ; pc . setVersion ( \"10\" ) ; conf . setPlugins ( new java . util . LinkedList ( ) ) ; conf . getPlugins ( ) . add ( pc ) ; java . lang . Exception exception = null ; try { provider . load ( ) ; } catch ( org . walkmod . conf . ConfigurationException e ) { exception = e ; } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( exception )", "total": "testInvalidPlugins ( ) { org . walkmod . conf . providers . IvyConfigurationProvider provider = new org . walkmod . conf . providers . IvyConfigurationProvider ( ) ; org . walkmod . conf . entities . Configuration conf = new org . walkmod . conf . entities . impl . ConfigurationImpl ( ) ; provider . init ( conf ) ; org . walkmod . conf . entities . PluginConfig pc = new org . walkmod . conf . entities . impl . PluginConfigImpl ( ) ; pc . setGroupId ( \"foo\" ) ; pc . setArtifactId ( \"bar\" ) ; pc . setVersion ( \"10\" ) ; conf . setPlugins ( new java . util . LinkedList ( ) ) ; conf . getPlugins ( ) . add ( pc ) ; java . lang . Exception exception = null ; try { provider . load ( ) ; } catch ( org . walkmod . conf . ConfigurationException e ) { exception = e ; } \"<AssertPlaceHolder>\" ; } load ( ) { java . io . File file = new java . io . File ( fileName ) ; try { com . fasterxml . jackson . databind . JsonNode node = null ; if ( ( file . exists ( ) ) && ( ( file . length ( ) ) > 0 ) ) { node = mapper . readTree ( file ) ; configuration . prepareInitializers ( ) ; if ( node . has ( \"policy-type\" 7 ) ) { java . util . Iterator < com . fasterxml . jackson . databind . JsonNode > it = node . get ( \"policy-type\" 7 ) . iterator ( ) ; java . util . Collection < org . walkmod . conf . entities . PluginConfig > pluginList = new java . util . LinkedList < org . walkmod . conf . entities . PluginConfig > ( ) ; while ( it . hasNext ( ) ) { com . fasterxml . jackson . databind . JsonNode current = it . next ( ) ; java . lang . String pluginId = current . asText ( ) ; java . lang . String [ ] split = pluginId . split ( \":\" ) ; if ( ( split . length ) > 3 ) { } else { java . lang . String groupId ; java . lang . String artifactId ; java . lang . String version ; groupId = split [ 0 ] ; artifactId = split [ 1 ] ; version = split [ 2 ] ; org . walkmod . conf . entities . PluginConfig plugin = new org . walkmod . conf . entities . impl . PluginConfigImpl ( ) ; plugin . setGroupId ( groupId ) ; plugin . setArtifactId ( artifactId ) ; plugin . setVersion ( version ) ; pluginList . add ( plugin ) ; } } configuration . setPlugins ( pluginList ) ; } if ( node . has ( \"policy-type\" 9 ) ) { java . util . Iterator < com . fasterxml . jackson . databind . JsonNode > it = node . get ( \"policy-type\" 9 ) . iterator ( ) ; java . util . List < java . lang . String > modules = new java . util . LinkedList < java . lang . String > ( ) ; configuration . setModules ( modules ) ; while ( it . hasNext ( ) ) { com . fasterxml . jackson . databind . JsonNode current = it . next ( ) ; modules . add ( current . asText ( ) ) ; } configuration . setModules ( modules ) ; } if ( node . has ( \"merge-policies\" ) ) { java . util . Iterator < com . fasterxml . jackson . databind . JsonNode > it = node . get ( \"merge-policies\" ) . iterator ( ) ; java . util . Collection < org . walkmod . conf . entities . MergePolicyConfig > mergePolicies = new java . util . LinkedList < org . walkmod . conf . entities . MergePolicyConfig > ( ) ; while ( it . hasNext ( ) ) { com . fasterxml . jackson . databind . JsonNode next = it . next ( ) ; if ( next . has ( \"policy-type\" 1 ) ) { org . walkmod . conf . entities . MergePolicyConfig mergeCfg = new org . walkmod . conf . entities . impl . MergePolicyConfigImpl ( ) ; mergeCfg . setName ( next . get ( \"policy-type\" 8 ) . asText ( ) ) ; mergeCfg . setDefaultObjectPolicy ( next . get ( \"policy-type\" 5 ) . asText ( ) ) ; mergeCfg . setDefaultTypePolicy ( next . get ( \"default-type-policy\" ) . asText ( ) ) ; if ( next . has ( \"policy-type\" 1 ) ) { java . util . Iterator < com . fasterxml . jackson . databind . JsonNode > it2 = next . get ( \"policy-type\" 1 ) . iterator ( ) ; java . util . Map < java . lang . String , java . lang . String > policies = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; while ( it2 . hasNext ( ) ) { com . fasterxml . jackson . databind . JsonNode nextPolicy = it2 . next ( ) ; java . lang . String objectType = nextPolicy . get ( \"policy-type\" 6 ) . asText ( ) ; java . lang . String policyType = nextPolicy . get ( \"policy-type\" ) . asText ( ) ; policies . put ( objectType , policyType ) ; } mergeCfg . setPolicyEntries ( policies ) ; } mergePolicies . add ( mergeCfg ) ; } } configuration . setMergePolicies ( mergePolicies ) ; } if ( node . has (", "answer": "org . junit . Assert . assertNotNull ( exception )"}
{"focal": "getValue ( ) { return select . getFirstSelectedOption ( ) . getText ( ) ; }", "testMethod": "setValue_readWriteNotNullable_nullShouldFail ( ) { com . vaadin . v7 . data . util . sqlcontainer . ColumnProperty cp = new com . vaadin . v7 . data . util . sqlcontainer . ColumnProperty ( \"NAME\" , false , true , false , false , \"Ville\" , java . lang . String . class ) ; com . vaadin . v7 . data . util . sqlcontainer . SQLContainer container = org . easymock . EasyMock . createMock ( com . vaadin . v7 . data . util . sqlcontainer . SQLContainer . class ) ; com . vaadin . v7 . data . util . sqlcontainer . RowItem owner = new com . vaadin . v7 . data . util . sqlcontainer . RowItem ( container , new com . vaadin . v7 . data . util . sqlcontainer . RowId ( new java . lang . Object [ ] { 1 } ) , java . util . Arrays . asList ( cp ) ) ; container . itemChangeNotification ( owner ) ; org . easymock . EasyMock . replay ( container ) ; cp . setValue ( null ) ; \"<AssertPlaceHolder>\" ; org . easymock . EasyMock . verify ( container ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( cp . getValue ( ) )", "total": "setValue_readWriteNotNullable_nullShouldFail ( ) { com . vaadin . v7 . data . util . sqlcontainer . ColumnProperty cp = new com . vaadin . v7 . data . util . sqlcontainer . ColumnProperty ( \"NAME\" , false , true , false , false , \"Ville\" , java . lang . String . class ) ; com . vaadin . v7 . data . util . sqlcontainer . SQLContainer container = org . easymock . EasyMock . createMock ( com . vaadin . v7 . data . util . sqlcontainer . SQLContainer . class ) ; com . vaadin . v7 . data . util . sqlcontainer . RowItem owner = new com . vaadin . v7 . data . util . sqlcontainer . RowItem ( container , new com . vaadin . v7 . data . util . sqlcontainer . RowId ( new java . lang . Object [ ] { 1 } ) , java . util . Arrays . asList ( cp ) ) ; container . itemChangeNotification ( owner ) ; org . easymock . EasyMock . replay ( container ) ; cp . setValue ( null ) ; \"<AssertPlaceHolder>\" ; org . easymock . EasyMock . verify ( container ) ; } getValue ( ) { return select . getFirstSelectedOption ( ) . getText ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( cp . getValue ( ) )"}
{"focal": "getBytes ( ) { return this . body ; }", "testMethod": "getRequestSucceed ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . DeviceRegistrationState ) { final java . lang . String id = \"id-1\" ; final java . lang . String registrationPath = \"registrations/\" + id ; final java . lang . String resultPayload = \"validJson\" ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . RegistrationStatusManager registrationStatusManager = createRegistrationStatusManager ( ) ; new tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . StrictExpectations ( ) { { mockedContractApiHttp . request ( HttpMethod . GET , registrationPath , null , \"\" ) ; result = mockedHttpResponse ; times = 1 ; mockedHttpResponse . getBody ( ) ; result = resultPayload . getBytes ( ) ; times = 1 ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . newInstance ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . DeviceRegistrationState . class , resultPayload ) ; result = mockedDeviceRegistrationState ; times = 1 ; } } ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . DeviceRegistrationState response = tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . invoke ( registrationStatusManager , \"get\" , new java . lang . Class [ ] { java . lang . String . class } , id ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "getRequestSucceed ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . DeviceRegistrationState ) { final java . lang . String id = \"id-1\" ; final java . lang . String registrationPath = \"registrations/\" + id ; final java . lang . String resultPayload = \"validJson\" ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . RegistrationStatusManager registrationStatusManager = createRegistrationStatusManager ( ) ; new tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . StrictExpectations ( ) { { mockedContractApiHttp . request ( HttpMethod . GET , registrationPath , null , \"\" ) ; result = mockedHttpResponse ; times = 1 ; mockedHttpResponse . getBody ( ) ; result = resultPayload . getBytes ( ) ; times = 1 ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . newInstance ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . DeviceRegistrationState . class , resultPayload ) ; result = mockedDeviceRegistrationState ; times = 1 ; } } ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . DeviceRegistrationState response = tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . invoke ( registrationStatusManager , \"get\" , new java . lang . Class [ ] { java . lang . String . class } , id ) ; \"<AssertPlaceHolder>\" ; } getBytes ( ) { return this . body ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "from ( java . lang . String , java . lang . String ) { return org . jboss . forge . furnace . addons . AddonId . from ( name , version , null ) ; }", "testMethod": "shouldBeAbleToEnhanceAddonId ( ) { java . lang . ClassLoader loader = org . jboss . forge . furnace . addons . AddonId . class . getClassLoader ( ) ; org . jboss . forge . furnace . addons . AddonId enhanced = org . jboss . forge . furnace . proxy . ClassLoaderAdapterBuilder . callingLoader ( loader ) . delegateLoader ( new java . net . URLClassLoader ( new java . net . URL [ ] { new java . net . URL ( \"file:///\" ) } ) ) . enhance ( org . jboss . forge . furnace . addons . AddonId . from ( \"a\" , \"1\" ) , org . jboss . forge . furnace . addons . AddonId . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( enhanced )", "total": "shouldBeAbleToEnhanceAddonId ( ) { java . lang . ClassLoader loader = org . jboss . forge . furnace . addons . AddonId . class . getClassLoader ( ) ; org . jboss . forge . furnace . addons . AddonId enhanced = org . jboss . forge . furnace . proxy . ClassLoaderAdapterBuilder . callingLoader ( loader ) . delegateLoader ( new java . net . URLClassLoader ( new java . net . URL [ ] { new java . net . URL ( \"file:///\" ) } ) ) . enhance ( org . jboss . forge . furnace . addons . AddonId . from ( \"a\" , \"1\" ) , org . jboss . forge . furnace . addons . AddonId . class ) ; \"<AssertPlaceHolder>\" ; } from ( java . lang . String , java . lang . String ) { return org . jboss . forge . furnace . addons . AddonId . from ( name , version , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( enhanced )"}
{"focal": "createCriteria ( java . lang . Class ) { return com . uaihebert . uaicriteria . UaiCriteriaFactory . createQueryCriteria ( entityManager , classToUse ) ; }", "testMethod": "isCreatingCriteria ( ) { final com . uaihebert . uaicriteria . UaiCriteria < com . uaihebert . model . test . RegularEntityOne > uaiCriteria = createCriteria ( com . uaihebert . model . test . RegularEntityOne . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( uaiCriteria )", "total": "isCreatingCriteria ( ) { final com . uaihebert . uaicriteria . UaiCriteria < com . uaihebert . model . test . RegularEntityOne > uaiCriteria = createCriteria ( com . uaihebert . model . test . RegularEntityOne . class ) ; \"<AssertPlaceHolder>\" ; } createCriteria ( java . lang . Class ) { return com . uaihebert . uaicriteria . UaiCriteriaFactory . createQueryCriteria ( entityManager , classToUse ) ; }", "answer": "org . junit . Assert . assertNotNull ( uaiCriteria )"}
{"focal": "getModulesService ( ) { return org . jboss . capedwarf . aspects . proxy . AspectFactory . createProxy ( com . google . appengine . api . modules . ModulesService . class , new org . jboss . capedwarf . modules . CapedwarfModulesService ( ) ) ; }", "testMethod": "testBasics ( ) { com . google . appengine . api . modules . ModulesService service = com . google . appengine . api . modules . ModulesServiceFactory . getModulesService ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( service )", "total": "testBasics ( ) { com . google . appengine . api . modules . ModulesService service = com . google . appengine . api . modules . ModulesServiceFactory . getModulesService ( ) ; \"<AssertPlaceHolder>\" ; } getModulesService ( ) { return org . jboss . capedwarf . aspects . proxy . AspectFactory . createProxy ( com . google . appengine . api . modules . ModulesService . class , new org . jboss . capedwarf . modules . CapedwarfModulesService ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( service )"}
{"focal": "moduleInitInfo ( ) { return marytts . server . MaryProperties . getList ( \"modules.classes.list\" ) ; }", "testMethod": "hasModules ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( marytts . server . MaryProperties . moduleInitInfo ( ) )", "total": "hasModules ( ) { \"<AssertPlaceHolder>\" ; } moduleInitInfo ( ) { return marytts . server . MaryProperties . getList ( \"modules.classes.list\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( marytts . server . MaryProperties . moduleInitInfo ( ) )"}
{"focal": "read ( java . nio . CharBuffer ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "testMethod": "testTomTomRoute8 ( ) { java . io . File source = new java . io . File ( ( ( TEST_PATH ) + \"from8.itn\" ) ) ; slash . navigation . itn . ParserResult result = parser . read ( source ) ; \"<AssertPlaceHolder>\" ; slash . navigation . itn . BaseRoute < slash . navigation . itn . BaseNavigationPosition , slash . navigation . itn . BaseNavigationFormat > route = result . getTheRoute ( ) ; slash . navigation . itn . TomTomRouteFormatIT . checkUmlauts ( route ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testTomTomRoute8 ( ) { java . io . File source = new java . io . File ( ( ( TEST_PATH ) + \"from8.itn\" ) ) ; slash . navigation . itn . ParserResult result = parser . read ( source ) ; \"<AssertPlaceHolder>\" ; slash . navigation . itn . BaseRoute < slash . navigation . itn . BaseNavigationPosition , slash . navigation . itn . BaseNavigationFormat > route = result . getTheRoute ( ) ; slash . navigation . itn . TomTomRouteFormatIT . checkUmlauts ( route ) ; } read ( java . nio . CharBuffer ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "verwerkBericht ( nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterVerzoekBericht ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType type = new nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType ( ) ; type . setGemeenteRegister ( new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteRegisterType ( ) ) ; final java . util . List < nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType > gemeentenList = type . getGemeenteRegister ( ) . getGemeente ( ) ; for ( final nl . bzk . migratiebrp . synchronisatie . dal . domein . brp . kern . entity . Gemeente gemeente : brpDalService . geefAlleGemeenten ( ) ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType gemeenteType = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; gemeenteType . setGemeenteCode ( asGemeenteCode ( gemeente . getCode ( ) ) ) ; gemeenteType . setPartijCode ( asPartijCode ( gemeente . getPartij ( ) . getCode ( ) ) ) ; if ( ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) ) != null ) { gemeenteType . setDatumBrp ( java . math . BigInteger . valueOf ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) . longValue ( ) ) ) ; } gemeentenList . add ( gemeenteType ) ; } final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType rni = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; rni . setGemeenteCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_GEMEENTE_CODE ) ; rni . setPartijCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_PARTIJ_CODE ) ; gemeentenList . add ( rni ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht antwoord = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht ( type ) ; antwoord . setStatus ( StatusType . OK ) ; antwoord . setMessageId ( nl . bzk . migratiebrp . synchronisatie . runtime . util . MessageId . generateSyncMessageId ( ) ) ; antwoord . setCorrelationId ( verzoek . getMessageId ( ) ) ; return antwoord ; }", "testMethod": "testException ( ) { org . mockito . Mockito . when ( brpDalService . geefAlleGbaAutorisaties ( ) ) . thenThrow ( new java . lang . RuntimeException ( \"Messsage\" ) ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesAutorisatieRegisterVerzoekBericht verzoek = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesAutorisatieRegisterVerzoekBericht ( ) ; try { subject . verwerkBericht ( verzoek ) ; org . junit . Assert . fail ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" , e )", "total": "testException ( ) { org . mockito . Mockito . when ( brpDalService . geefAlleGbaAutorisaties ( ) ) . thenThrow ( new java . lang . RuntimeException ( \"Messsage\" ) ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesAutorisatieRegisterVerzoekBericht verzoek = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesAutorisatieRegisterVerzoekBericht ( ) ; try { subject . verwerkBericht ( verzoek ) ; org . junit . Assert . fail ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; } } verwerkBericht ( nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterVerzoekBericht ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType type = new nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType ( ) ; type . setGemeenteRegister ( new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteRegisterType ( ) ) ; final java . util . List < nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType > gemeentenList = type . getGemeenteRegister ( ) . getGemeente ( ) ; for ( final nl . bzk . migratiebrp . synchronisatie . dal . domein . brp . kern . entity . Gemeente gemeente : brpDalService . geefAlleGemeenten ( ) ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType gemeenteType = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; gemeenteType . setGemeenteCode ( asGemeenteCode ( gemeente . getCode ( ) ) ) ; gemeenteType . setPartijCode ( asPartijCode ( gemeente . getPartij ( ) . getCode ( ) ) ) ; if ( ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) ) != null ) { gemeenteType . setDatumBrp ( java . math . BigInteger . valueOf ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) . longValue ( ) ) ) ; } gemeentenList . add ( gemeenteType ) ; } final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType rni = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; rni . setGemeenteCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_GEMEENTE_CODE ) ; rni . setPartijCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_PARTIJ_CODE ) ; gemeentenList . add ( rni ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht antwoord = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht ( type ) ; antwoord . setStatus ( StatusType . OK ) ; antwoord . setMessageId ( nl . bzk . migratiebrp . synchronisatie . runtime . util . MessageId . generateSyncMessageId ( ) ) ; antwoord . setCorrelationId ( verzoek . getMessageId ( ) ) ; return antwoord ; }", "answer": "org . junit . Assert . assertNotNull ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" , e )"}
{"focal": "execHttpPostStream ( java . lang . String , java . lang . String , java . lang . String , java . lang . String ) { return org . apache . jena . riot . web . HttpOp . execHttpPostStream ( url , contentType , content , acceptType , null , null ) ; }", "testMethod": "ds_query_by_post_1 ( ) { java . lang . String u = org . apache . jena . fuseki . ServerCtl . urlDataset ( ) ; try ( org . apache . jena . atlas . web . TypedInputStream in = org . apache . jena . riot . web . HttpOp . execHttpPostStream ( u , WebContent . contentTypeSPARQLQuery , \"ASK{}\" , \"*\" ) ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( in )", "total": "ds_query_by_post_1 ( ) { java . lang . String u = org . apache . jena . fuseki . ServerCtl . urlDataset ( ) ; try ( org . apache . jena . atlas . web . TypedInputStream in = org . apache . jena . riot . web . HttpOp . execHttpPostStream ( u , WebContent . contentTypeSPARQLQuery , \"ASK{}\" , \"*\" ) ) { \"<AssertPlaceHolder>\" ; } } execHttpPostStream ( java . lang . String , java . lang . String , java . lang . String , java . lang . String ) { return org . apache . jena . riot . web . HttpOp . execHttpPostStream ( url , contentType , content , acceptType , null , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( in )"}
{"focal": "getVSystemTemplateConfiguration ( org . oscm . app . iaas . PropertyHandler ) { org . oscm . app . ror . data . LPlatformDescriptorConfiguration conf = mock ( org . oscm . app . ror . data . LPlatformDescriptorConfiguration . class ) ; final org . apache . commons . configuration . HierarchicalConfiguration hc = new org . apache . commons . configuration . HierarchicalConfiguration ( ) ; hc . addProperty ( \"nics.nic.networkId\" , \"456\" ) ; when ( conf . getNetworks ( ) ) . thenReturn ( java . util . Arrays . asList ( new org . oscm . app . iaas . data . Network ( \"kcuf\" , \"123\" , \"456\" , 6 ) ) ) ; when ( conf . getVServers ( ) ) . thenAnswer ( new org . mockito . stubbing . Answer < java . util . List < ? extends org . oscm . app . iaas . data . VServerConfiguration > > ( ) { @ org . oscm . app . ror . controller . Override public java . util . List < ? extends org . oscm . app . iaas . data . VServerConfiguration > answer ( org . mockito . invocation . InvocationOnMock invocation ) throws java . lang . Throwable { return java . util . Arrays . asList ( new org . oscm . app . ror . data . LServerConfiguration ( hc ) ) ; } } ) ; return conf ; }", "testMethod": "getTemplateConfiguration ( ) { prepareVdcClientWithTemplateDescriptor ( ) ; org . oscm . app . iaas . data . VSystemTemplateConfiguration templateConfiguration = rorVSystemCommunication . getVSystemTemplateConfiguration ( properties ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( templateConfiguration )", "total": "getTemplateConfiguration ( ) { prepareVdcClientWithTemplateDescriptor ( ) ; org . oscm . app . iaas . data . VSystemTemplateConfiguration templateConfiguration = rorVSystemCommunication . getVSystemTemplateConfiguration ( properties ) ; \"<AssertPlaceHolder>\" ; } getVSystemTemplateConfiguration ( org . oscm . app . iaas . PropertyHandler ) { org . oscm . app . ror . data . LPlatformDescriptorConfiguration conf = mock ( org . oscm . app . ror . data . LPlatformDescriptorConfiguration . class ) ; final org . apache . commons . configuration . HierarchicalConfiguration hc = new org . apache . commons . configuration . HierarchicalConfiguration ( ) ; hc . addProperty ( \"nics.nic.networkId\" , \"456\" ) ; when ( conf . getNetworks ( ) ) . thenReturn ( java . util . Arrays . asList ( new org . oscm . app . iaas . data . Network ( \"kcuf\" , \"123\" , \"456\" , 6 ) ) ) ; when ( conf . getVServers ( ) ) . thenAnswer ( new org . mockito . stubbing . Answer < java . util . List < ? extends org . oscm . app . iaas . data . VServerConfiguration > > ( ) { @ org . oscm . app . ror . controller . Override public java . util . List < ? extends org . oscm . app . iaas . data . VServerConfiguration > answer ( org . mockito . invocation . InvocationOnMock invocation ) throws java . lang . Throwable { return java . util . Arrays . asList ( new org . oscm . app . ror . data . LServerConfiguration ( hc ) ) ; } } ) ; return conf ; }", "answer": "org . junit . Assert . assertNotNull ( templateConfiguration )"}
{"focal": "getCorpus ( com . ibm . watson . speech_to_text . v1 . model . GetCorpusOptions ) { com . ibm . cloud . sdk . core . util . Validator . notNull ( getCorpusOptions , \"getCorpusOptions<sp>cannot<sp>be<sp>null\" ) ; java . lang . String [ ] pathSegments = new java . lang . String [ ] { \"v1/customizations\" , \"corpora\" } ; java . lang . String [ ] pathParameters = new java . lang . String [ ] { getCorpusOptions . customizationId ( ) , getCorpusOptions . corpusName ( ) } ; com . ibm . cloud . sdk . core . http . RequestBuilder builder = com . ibm . cloud . sdk . core . http . RequestBuilder . get ( com . ibm . cloud . sdk . core . http . RequestBuilder . constructHttpUrl ( getEndPoint ( ) , pathSegments , pathParameters ) ) ; java . util . Map < java . lang . String , java . lang . String > sdkHeaders = com . ibm . watson . common . SdkCommon . getSdkHeaders ( \"speech_to_text\" , \"v1\" , \"getCorpus\" ) ; for ( java . util . Map . Entry < java . lang . String , java . lang . String > header : sdkHeaders . entrySet ( ) ) { builder . header ( header . getKey ( ) , header . getValue ( ) ) ; } builder . header ( \"Accept\" , \"application/json\" ) ; return createServiceCall ( builder . build ( ) , com . ibm . cloud . sdk . core . util . ResponseConverterUtils . getObject ( com . ibm . watson . speech_to_text . v1 . model . Corpus . class ) ) ; }", "testMethod": "testGetCorpus ( ) { com . ibm . watson . speech_to_text . v1 . model . GetCorpusOptions getOptions = new com . ibm . watson . speech_to_text . v1 . model . GetCorpusOptions . Builder ( ) . corpusName ( \"foo3\" ) . customizationId ( customizationId ) . build ( ) ; com . ibm . watson . speech_to_text . v1 . model . Corpus result = service . getCorpus ( getOptions ) . execute ( ) . getResult ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetCorpus ( ) { com . ibm . watson . speech_to_text . v1 . model . GetCorpusOptions getOptions = new com . ibm . watson . speech_to_text . v1 . model . GetCorpusOptions . Builder ( ) . corpusName ( \"foo3\" ) . customizationId ( customizationId ) . build ( ) ; com . ibm . watson . speech_to_text . v1 . model . Corpus result = service . getCorpus ( getOptions ) . execute ( ) . getResult ( ) ; \"<AssertPlaceHolder>\" ; } getCorpus ( com . ibm . watson . speech_to_text . v1 . model . GetCorpusOptions ) { com . ibm . cloud . sdk . core . util . Validator . notNull ( getCorpusOptions , \"getCorpusOptions<sp>cannot<sp>be<sp>null\" ) ; java . lang . String [ ] pathSegments = new java . lang . String [ ] { \"v1/customizations\" , \"corpora\" } ; java . lang . String [ ] pathParameters = new java . lang . String [ ] { getCorpusOptions . customizationId ( ) , getCorpusOptions . corpusName ( ) } ; com . ibm . cloud . sdk . core . http . RequestBuilder builder = com . ibm . cloud . sdk . core . http . RequestBuilder . get ( com . ibm . cloud . sdk . core . http . RequestBuilder . constructHttpUrl ( getEndPoint ( ) , pathSegments , pathParameters ) ) ; java . util . Map < java . lang . String , java . lang . String > sdkHeaders = com . ibm . watson . common . SdkCommon . getSdkHeaders ( \"speech_to_text\" , \"v1\" , \"getCorpus\" ) ; for ( java . util . Map . Entry < java . lang . String , java . lang . String > header : sdkHeaders . entrySet ( ) ) { builder . header ( header . getKey ( ) , header . getValue ( ) ) ; } builder . header ( \"Accept\" , \"application/json\" ) ; return createServiceCall ( builder . build ( ) , com . ibm . cloud . sdk . core . util . ResponseConverterUtils . getObject ( com . ibm . watson . speech_to_text . v1 . model . Corpus . class ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "handler ( boolean , java . util . concurrent . atomic . AtomicReference , java . lang . String ) { descs . clear ( ) ; return ( r ) -> { if ( r . hasException ( ) ) { com . vmware . admiral . compute . container . host . failIteration ( r . getException ( ) ) ; return ; } if ( ( q != null ) && ( ( q . get ( ) ) == null ) ) { try { com . vmware . xenon . services . common . QueryTask queryTask = getDocumentNoWait ( . class , link ) ; q . set ( queryTask ) ; } catch ( ignore ) { } } if ( r . hasResult ( ) ) { descs . add ( r . getResult ( ) ) ; if ( singleResult ) { com . vmware . admiral . compute . container . host . completeIteration ( ) ; } } else { com . vmware . admiral . compute . container . host . completeIteration ( ) ; } } ; }", "testMethod": "testQueryTaskDeleted ( ) { final java . lang . String queryTaskDocumentSelfLink = com . vmware . xenon . common . UriUtils . buildUriPath ( ServiceUriPaths . CORE_QUERY_TASKS , \"/testQueryTaskResultLimit\" ) ; final java . lang . String queryTaskLink = queryTaskDocumentSelfLink + 1 ; com . vmware . xenon . services . common . QueryTask . QuerySpecification qs = new com . vmware . xenon . services . common . QueryTask . QuerySpecification ( ) ; qs . query = Query . Builder . create ( ) . addKindFieldClause ( com . vmware . admiral . compute . container . ContainerDescriptionService . ContainerDescription . class ) . build ( ) ; com . vmware . xenon . services . common . QueryTask qt = com . vmware . xenon . services . common . QueryTask . create ( qs ) ; qt . documentSelfLink = queryTaskLink ; int fiveSec = 5000000 ; qt . documentExpirationTimeMicros = com . vmware . admiral . common . util . ServiceUtils . getExpirationTimeFromNowInMicros ( fiveSec ) ; final java . util . concurrent . atomic . AtomicReference < com . vmware . xenon . services . common . QueryTask > q = new java . util . concurrent . atomic . AtomicReference ( ) ; host . testStart ( 1 ) ; new com . vmware . admiral . common . util . ServiceDocumentQuery ( host , com . vmware . admiral . compute . container . ContainerDescriptionService . ContainerDescription . class ) . query ( qt , handler ( false , q , qt . documentSelfLink ) ) ; host . testWait ( ) ; qt = q . getAndSet ( null ) ; \"<AssertPlaceHolder>\" ; waitFor ( ( ) -> { com . vmware . xenon . services . common . QueryTask queryTask = getDocumentNoWait ( . class , queryTaskLink ) ; return queryTask == null ; } ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( qt )", "total": "testQueryTaskDeleted ( ) { final java . lang . String queryTaskDocumentSelfLink = com . vmware . xenon . common . UriUtils . buildUriPath ( ServiceUriPaths . CORE_QUERY_TASKS , \"/testQueryTaskResultLimit\" ) ; final java . lang . String queryTaskLink = queryTaskDocumentSelfLink + 1 ; com . vmware . xenon . services . common . QueryTask . QuerySpecification qs = new com . vmware . xenon . services . common . QueryTask . QuerySpecification ( ) ; qs . query = Query . Builder . create ( ) . addKindFieldClause ( com . vmware . admiral . compute . container . ContainerDescriptionService . ContainerDescription . class ) . build ( ) ; com . vmware . xenon . services . common . QueryTask qt = com . vmware . xenon . services . common . QueryTask . create ( qs ) ; qt . documentSelfLink = queryTaskLink ; int fiveSec = 5000000 ; qt . documentExpirationTimeMicros = com . vmware . admiral . common . util . ServiceUtils . getExpirationTimeFromNowInMicros ( fiveSec ) ; final java . util . concurrent . atomic . AtomicReference < com . vmware . xenon . services . common . QueryTask > q = new java . util . concurrent . atomic . AtomicReference ( ) ; host . testStart ( 1 ) ; new com . vmware . admiral . common . util . ServiceDocumentQuery ( host , com . vmware . admiral . compute . container . ContainerDescriptionService . ContainerDescription . class ) . query ( qt , handler ( false , q , qt . documentSelfLink ) ) ; host . testWait ( ) ; qt = q . getAndSet ( null ) ; \"<AssertPlaceHolder>\" ; waitFor ( ( ) -> { com . vmware . xenon . services . common . QueryTask queryTask = getDocumentNoWait ( . class , queryTaskLink ) ; return queryTask == null ; } ) ; } handler ( boolean , java . util . concurrent . atomic . AtomicReference , java . lang . String ) { descs . clear ( ) ; return ( r ) -> { if ( r . hasException ( ) ) { com . vmware . admiral . compute . container . host . failIteration ( r . getException ( ) ) ; return ; } if ( ( q != null ) && ( ( q . get ( ) ) == null ) ) { try { com . vmware . xenon . services . common . QueryTask queryTask = getDocumentNoWait ( . class , link ) ; q . set ( queryTask ) ; } catch ( ignore ) { } } if ( r . hasResult ( ) ) { descs . add ( r . getResult ( ) ) ; if ( singleResult ) { com . vmware . admiral . compute . container . host . completeIteration ( ) ; } } else { com . vmware . admiral . compute . container . host . completeIteration ( ) ; } } ; }", "answer": "org . junit . Assert . assertNotNull ( qt )"}
{"focal": "readMetadata ( org . apache . olingo . odata2 . api . uri . info . GetMetadataUriInfo , java . lang . String ) { final org . apache . olingo . odata2 . api . edm . EdmServiceMetadata edmServiceMetadata = getContext ( ) . getService ( ) . getEntityDataModel ( ) . getServiceMetadata ( ) ; return org . apache . olingo . odata2 . api . processor . ODataResponse . status ( HttpStatusCodes . OK ) . header ( ODataHttpHeaders . DATASERVICEVERSION , edmServiceMetadata . getDataServiceVersion ( ) ) . entity ( edmServiceMetadata . getMetadata ( ) ) . build ( ) ; }", "testMethod": "twoEdmxWithoutValidation ( ) { org . apache . olingo . odata2 . core . ep . consumer . XmlMetadataConsumer parser = new org . apache . olingo . odata2 . core . ep . consumer . XmlMetadataConsumer ( ) ; javax . xml . stream . XMLStreamReader reader = createStreamReader ( edmxRefFor1680364709 ) ; org . apache . olingo . odata2 . api . edm . provider . DataServices result = parser . readMetadata ( reader , false ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "twoEdmxWithoutValidation ( ) { org . apache . olingo . odata2 . core . ep . consumer . XmlMetadataConsumer parser = new org . apache . olingo . odata2 . core . ep . consumer . XmlMetadataConsumer ( ) ; javax . xml . stream . XMLStreamReader reader = createStreamReader ( edmxRefFor1680364709 ) ; org . apache . olingo . odata2 . api . edm . provider . DataServices result = parser . readMetadata ( reader , false ) ; \"<AssertPlaceHolder>\" ; } readMetadata ( org . apache . olingo . odata2 . api . uri . info . GetMetadataUriInfo , java . lang . String ) { final org . apache . olingo . odata2 . api . edm . EdmServiceMetadata edmServiceMetadata = getContext ( ) . getService ( ) . getEntityDataModel ( ) . getServiceMetadata ( ) ; return org . apache . olingo . odata2 . api . processor . ODataResponse . status ( HttpStatusCodes . OK ) . header ( ODataHttpHeaders . DATASERVICEVERSION , edmServiceMetadata . getDataServiceVersion ( ) ) . entity ( edmServiceMetadata . getMetadata ( ) ) . build ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getStdOut ( ) { return new java . lang . String ( stdOut . toByteArray ( ) ) ; }", "testMethod": "testNoOutPutFile ( ) { java . lang . String [ ] args = new java . lang . String [ ] { \"-o\" , getLocation ( \"nooutput.wsdl\" ) , \"org.apache.hello_world_soap_http.Greeter\" } ; org . apache . cxf . tools . common . CommandInterfaceUtils . commandCommonMain ( ) ; org . apache . cxf . tools . java2ws . JavaToWS j2w = new org . apache . cxf . tools . java2ws . JavaToWS ( args ) ; try { j2w . run ( ) ; } catch ( java . lang . Throwable ex ) { System . err . println ( ( \"JavaToWS<sp>Error:<sp>\" + ( ex . toString ( ) ) ) ) ; System . err . println ( ) ; } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( getStdOut ( ) )", "total": "testNoOutPutFile ( ) { java . lang . String [ ] args = new java . lang . String [ ] { \"-o\" , getLocation ( \"nooutput.wsdl\" ) , \"org.apache.hello_world_soap_http.Greeter\" } ; org . apache . cxf . tools . common . CommandInterfaceUtils . commandCommonMain ( ) ; org . apache . cxf . tools . java2ws . JavaToWS j2w = new org . apache . cxf . tools . java2ws . JavaToWS ( args ) ; try { j2w . run ( ) ; } catch ( java . lang . Throwable ex ) { System . err . println ( ( \"JavaToWS<sp>Error:<sp>\" + ( ex . toString ( ) ) ) ) ; System . err . println ( ) ; } \"<AssertPlaceHolder>\" ; } getStdOut ( ) { return new java . lang . String ( stdOut . toByteArray ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( getStdOut ( ) )"}
{"focal": "buildGenericApplication ( org . multibit . platform . GenericApplicationSpecification ) { if ( org . multibit . platform . builder . OSUtils . isMac ( ) ) { return buildMacApplication ( specification ) ; } if ( org . multibit . platform . builder . OSUtils . isLinux ( ) ) { return buildLinuxApplication ( specification ) ; } if ( org . multibit . platform . builder . OSUtils . isSolaris ( ) ) { return buildSolarisApplication ( specification ) ; } if ( org . multibit . platform . builder . OSUtils . isUnix ( ) ) { return buildUnixApplication ( specification ) ; } if ( org . multibit . platform . builder . OSUtils . isWindows ( ) ) { return buildWindowsApplication ( specification ) ; } return buildUnknownApplication ( specification ) ; }", "testMethod": "testMac ( ) { org . multibit . platform . GenericApplicationSpecification specification = new org . multibit . platform . GenericApplicationSpecification ( ) ; org . multibit . platform . GenericApplication testObject = GenericApplicationFactory . INSTANCE . buildGenericApplication ( specification ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( testObject )", "total": "testMac ( ) { org . multibit . platform . GenericApplicationSpecification specification = new org . multibit . platform . GenericApplicationSpecification ( ) ; org . multibit . platform . GenericApplication testObject = GenericApplicationFactory . INSTANCE . buildGenericApplication ( specification ) ; \"<AssertPlaceHolder>\" ; } buildGenericApplication ( org . multibit . platform . GenericApplicationSpecification ) { if ( org . multibit . platform . builder . OSUtils . isMac ( ) ) { return buildMacApplication ( specification ) ; } if ( org . multibit . platform . builder . OSUtils . isLinux ( ) ) { return buildLinuxApplication ( specification ) ; } if ( org . multibit . platform . builder . OSUtils . isSolaris ( ) ) { return buildSolarisApplication ( specification ) ; } if ( org . multibit . platform . builder . OSUtils . isUnix ( ) ) { return buildUnixApplication ( specification ) ; } if ( org . multibit . platform . builder . OSUtils . isWindows ( ) ) { return buildWindowsApplication ( specification ) ; } return buildUnknownApplication ( specification ) ; }", "answer": "org . junit . Assert . assertNotNull ( testObject )"}
{"focal": "getProxy ( java . lang . Class ) { notNull ( \"distributedServiceClass\" , distributedServiceClass ) ; java . lang . Object proxy = proxies . get ( distributedServiceClass ) ; if ( proxy == null ) { com . hazelblast . client . impl . ProxyProviderImpl . DistributedServiceInvocationHandler invocationHandler = buildDistributedServiceInvocationHandler ( distributedServiceClass ) ; proxy = java . lang . reflect . Proxy . newProxyInstance ( distributedServiceClass . getClassLoader ( ) , new java . lang . Class [ ] { distributedServiceClass } , invocationHandler ) ; java . lang . Object oldProxy = proxies . putIfAbsent ( distributedServiceClass , proxy ) ; proxy = ( oldProxy == null ) ? proxy : oldProxy ; } return ( ( T ) ( proxy ) ) ; }", "testMethod": "methodWithoutArguments ( ) { com . hazelblast . client . impl . ProxyProviderImpl proxyProvider = new com . hazelblast . client . impl . ProxyProviderImpl ( com . hazelblast . client . impl . LoadBalanced_Test . hazelcastInstance ) ; com . hazelblast . client . impl . LoadBalanced_Test . LoadBalancedMethodWithoutArguments p = proxyProvider . getProxy ( com . hazelblast . client . impl . LoadBalanced_Test . LoadBalancedMethodWithoutArguments . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( p )", "total": "methodWithoutArguments ( ) { com . hazelblast . client . impl . ProxyProviderImpl proxyProvider = new com . hazelblast . client . impl . ProxyProviderImpl ( com . hazelblast . client . impl . LoadBalanced_Test . hazelcastInstance ) ; com . hazelblast . client . impl . LoadBalanced_Test . LoadBalancedMethodWithoutArguments p = proxyProvider . getProxy ( com . hazelblast . client . impl . LoadBalanced_Test . LoadBalancedMethodWithoutArguments . class ) ; \"<AssertPlaceHolder>\" ; } getProxy ( java . lang . Class ) { notNull ( \"distributedServiceClass\" , distributedServiceClass ) ; java . lang . Object proxy = proxies . get ( distributedServiceClass ) ; if ( proxy == null ) { com . hazelblast . client . impl . ProxyProviderImpl . DistributedServiceInvocationHandler invocationHandler = buildDistributedServiceInvocationHandler ( distributedServiceClass ) ; proxy = java . lang . reflect . Proxy . newProxyInstance ( distributedServiceClass . getClassLoader ( ) , new java . lang . Class [ ] { distributedServiceClass } , invocationHandler ) ; java . lang . Object oldProxy = proxies . putIfAbsent ( distributedServiceClass , proxy ) ; proxy = ( oldProxy == null ) ? proxy : oldProxy ; } return ( ( T ) ( proxy ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( p )"}
{"focal": "getPathParams ( ) { return pathParams ; }", "testMethod": "testGetPathParams ( ) { java . util . Map < java . lang . String , java . lang . String > value = requestmeta . getPathParams ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( value )", "total": "testGetPathParams ( ) { java . util . Map < java . lang . String , java . lang . String > value = requestmeta . getPathParams ( ) ; \"<AssertPlaceHolder>\" ; } getPathParams ( ) { return pathParams ; }", "answer": "org . junit . Assert . assertNotNull ( value )"}
{"focal": "toXHTMLOptions ( fr . opensagres . xdocreport . converter . Options ) { if ( options == null ) { return null ; } java . lang . Object value = options . getSubOptions ( fr . opensagres . poi . xwpf . converter . xhtml . XHTMLOptions . class ) ; if ( value instanceof fr . opensagres . poi . xwpf . converter . xhtml . XHTMLOptions ) { return ( ( fr . opensagres . poi . xwpf . converter . xhtml . XHTMLOptions ) ( value ) ) ; } fr . opensagres . poi . xwpf . converter . xhtml . XHTMLOptions xhtmlOptions = fr . opensagres . poi . xwpf . converter . xhtml . XHTMLOptions . create ( ) ; final fr . opensagres . xdocreport . converter . IURIResolver resolver = fr . opensagres . xdocreport . converter . OptionsHelper . getURIResolver ( options ) ; if ( resolver != null ) { xhtmlOptions . URIResolver ( new fr . opensagres . poi . xwpf . converter . core . IURIResolver ( ) { public fr . opensagres . xdocreport . converter . docx . poi . xhtml . String resolve ( java . lang . String uri ) { return resolver . resolve ( uri ) ; } } ) ; } return xhtmlOptions ; }", "testMethod": "testNotNullOptions ( ) { fr . opensagres . xdocreport . converter . Options options = fr . opensagres . xdocreport . converter . Options . getFrom ( \"ODT\" ) ; fr . opensagres . odfdom . converter . xhtml . XHTMLOptions xhtmlOptions = fr . opensagres . xdocreport . converter . odt . odfdom . xhtml . ODF2XHTMLConverter . getInstance ( ) . toXHTMLOptions ( options ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( xhtmlOptions )", "total": "testNotNullOptions ( ) { fr . opensagres . xdocreport . converter . Options options = fr . opensagres . xdocreport . converter . Options . getFrom ( \"ODT\" ) ; fr . opensagres . odfdom . converter . xhtml . XHTMLOptions xhtmlOptions = fr . opensagres . xdocreport . converter . odt . odfdom . xhtml . ODF2XHTMLConverter . getInstance ( ) . toXHTMLOptions ( options ) ; \"<AssertPlaceHolder>\" ; } toXHTMLOptions ( fr . opensagres . xdocreport . converter . Options ) { if ( options == null ) { return null ; } java . lang . Object value = options . getSubOptions ( fr . opensagres . poi . xwpf . converter . xhtml . XHTMLOptions . class ) ; if ( value instanceof fr . opensagres . poi . xwpf . converter . xhtml . XHTMLOptions ) { return ( ( fr . opensagres . poi . xwpf . converter . xhtml . XHTMLOptions ) ( value ) ) ; } fr . opensagres . poi . xwpf . converter . xhtml . XHTMLOptions xhtmlOptions = fr . opensagres . poi . xwpf . converter . xhtml . XHTMLOptions . create ( ) ; final fr . opensagres . xdocreport . converter . IURIResolver resolver = fr . opensagres . xdocreport . converter . OptionsHelper . getURIResolver ( options ) ; if ( resolver != null ) { xhtmlOptions . URIResolver ( new fr . opensagres . poi . xwpf . converter . core . IURIResolver ( ) { public fr . opensagres . xdocreport . converter . docx . poi . xhtml . String resolve ( java . lang . String uri ) { return resolver . resolve ( uri ) ; } } ) ; } return xhtmlOptions ; }", "answer": "org . junit . Assert . assertNotNull ( xhtmlOptions )"}
{"focal": "getLocationExecutor ( ) { return locationExecutor ; }", "testMethod": "testDestroy ( ) { tested . destroy ( ) ; \"<AssertPlaceHolder>\" ; verify ( tooltip , times ( 1 ) ) . destroy ( ) ; verify ( tooltip , never ( ) ) . hide ( ) ; verify ( tooltip , never ( ) ) . show ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( tested . getLocationExecutor ( ) )", "total": "testDestroy ( ) { tested . destroy ( ) ; \"<AssertPlaceHolder>\" ; verify ( tooltip , times ( 1 ) ) . destroy ( ) ; verify ( tooltip , never ( ) ) . hide ( ) ; verify ( tooltip , never ( ) ) . show ( ) ; } getLocationExecutor ( ) { return locationExecutor ; }", "answer": "org . junit . Assert . assertNotNull ( tested . getLocationExecutor ( ) )"}
{"focal": "getName ( ) { return name ; }", "testMethod": "testManager ( ) { org . cache2k . CacheManager cm = org . cache2k . CacheManager . getInstance ( ( ( ( org . cache2k . impl . serverSide . LegalNamesTest . class . getName ( ) ) + \"-char-\" ) + ( aChar ) ) ) ; javax . management . MBeanInfo inf = org . cache2k . impl . serverSide . JmxSupportTest . getCacheManagerInfo ( cm . getName ( ) ) ; \"<AssertPlaceHolder>\" ; org . cache2k . Cache2kBuilder . forUnknownTypes ( ) . manager ( cm ) . name ( \"dummy\" ) . build ( ) ; cm . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( inf )", "total": "testManager ( ) { org . cache2k . CacheManager cm = org . cache2k . CacheManager . getInstance ( ( ( ( org . cache2k . impl . serverSide . LegalNamesTest . class . getName ( ) ) + \"-char-\" ) + ( aChar ) ) ) ; javax . management . MBeanInfo inf = org . cache2k . impl . serverSide . JmxSupportTest . getCacheManagerInfo ( cm . getName ( ) ) ; \"<AssertPlaceHolder>\" ; org . cache2k . Cache2kBuilder . forUnknownTypes ( ) . manager ( cm ) . name ( \"dummy\" ) . build ( ) ; cm . close ( ) ; } getName ( ) { return name ; }", "answer": "org . junit . Assert . assertNotNull ( inf )"}
{"focal": "getTile ( org . deegree . protocol . wmts . ops . GetTile ) { java . util . Map < java . lang . String , java . lang . String > kvp = buildGetTileKvpMap ( request ) ; if ( ( request . getOverriddenParameters ( ) ) != null ) { for ( java . util . Map . Entry < java . lang . String , java . lang . String > e : request . getOverriddenParameters ( ) . entrySet ( ) ) { if ( kvp . containsKey ( e . getKey ( ) . toLowerCase ( ) ) ) { kvp . put ( e . getKey ( ) . toLowerCase ( ) , e . getValue ( ) ) ; } else kvp . put ( e . getKey ( ) , e . getValue ( ) ) ; } } java . net . URL endPoint = getGetUrl ( WMTSConstants . WMTSRequestType . GetTile . name ( ) ) ; org . deegree . protocol . ows . http . OwsHttpResponse response = httpClient . doGet ( endPoint , kvp , null ) ; response . assertHttpStatus200 ( ) ; response . assertNoXmlContentTypeAndExceptionReport ( ) ; return new org . deegree . protocol . wmts . client . GetTileResponse ( response ) ; }", "testMethod": "testGetTileOK ( ) { java . net . URL responseUrl = org . deegree . protocol . wmts . client . WMTSClientTest . class . getResource ( \"gettile_response1.png\" ) ; httpClientMock . setResponse ( responseUrl , \"image/png\" , 200 ) ; org . deegree . protocol . wmts . ops . GetTile request = buildExampleRequest ( ) ; org . deegree . protocol . wmts . client . GetTileResponse response = client . getTile ( request ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testGetTileOK ( ) { java . net . URL responseUrl = org . deegree . protocol . wmts . client . WMTSClientTest . class . getResource ( \"gettile_response1.png\" ) ; httpClientMock . setResponse ( responseUrl , \"image/png\" , 200 ) ; org . deegree . protocol . wmts . ops . GetTile request = buildExampleRequest ( ) ; org . deegree . protocol . wmts . client . GetTileResponse response = client . getTile ( request ) ; \"<AssertPlaceHolder>\" ; } getTile ( org . deegree . protocol . wmts . ops . GetTile ) { java . util . Map < java . lang . String , java . lang . String > kvp = buildGetTileKvpMap ( request ) ; if ( ( request . getOverriddenParameters ( ) ) != null ) { for ( java . util . Map . Entry < java . lang . String , java . lang . String > e : request . getOverriddenParameters ( ) . entrySet ( ) ) { if ( kvp . containsKey ( e . getKey ( ) . toLowerCase ( ) ) ) { kvp . put ( e . getKey ( ) . toLowerCase ( ) , e . getValue ( ) ) ; } else kvp . put ( e . getKey ( ) , e . getValue ( ) ) ; } } java . net . URL endPoint = getGetUrl ( WMTSConstants . WMTSRequestType . GetTile . name ( ) ) ; org . deegree . protocol . ows . http . OwsHttpResponse response = httpClient . doGet ( endPoint , kvp , null ) ; response . assertHttpStatus200 ( ) ; response . assertNoXmlContentTypeAndExceptionReport ( ) ; return new org . deegree . protocol . wmts . client . GetTileResponse ( response ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "buildEffective ( ) { return root . buildEffective ( ) ; }", "testMethod": "effectiveAugmentFirstTest ( ) { final org . opendaylight . yangtools . yang . model . api . SchemaContext result = org . opendaylight . yangtools . yang . parser . rfc7950 . reactor . RFC7950Reactors . defaultReactor ( ) . newBuild ( ) . addSources ( org . opendaylight . yangtools . yang . stmt . Bug6150Test . TARGET , org . opendaylight . yangtools . yang . stmt . Bug6150Test . AUGMENT_FIRST ) . buildEffective ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "effectiveAugmentFirstTest ( ) { final org . opendaylight . yangtools . yang . model . api . SchemaContext result = org . opendaylight . yangtools . yang . parser . rfc7950 . reactor . RFC7950Reactors . defaultReactor ( ) . newBuild ( ) . addSources ( org . opendaylight . yangtools . yang . stmt . Bug6150Test . TARGET , org . opendaylight . yangtools . yang . stmt . Bug6150Test . AUGMENT_FIRST ) . buildEffective ( ) ; \"<AssertPlaceHolder>\" ; } buildEffective ( ) { return root . buildEffective ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getInstance ( java . lang . Class , java . lang . annotation . Annotation [ ] ) { java . util . Set < javax . enterprise . inject . spi . Bean < ? > > beans = getBeanManager ( ) . getBeans ( type , qualifiers ) ; org . junit . Assert . assertNotNull ( beans ) ; javax . enterprise . inject . spi . Bean < ? > bean = getBeanManager ( ) . resolve ( beans ) ; return ( ( T ) ( getBeanManager ( ) . getReference ( bean , type , getBeanManager ( ) . createCreationalContext ( bean ) ) ) ) ; }", "testMethod": "testProductProducer ( ) { java . util . Collection < java . lang . Class < ? > > beanClasses = new java . util . ArrayList < java . lang . Class < ? > > ( ) ; beanClasses . add ( org . apache . webbeans . test . profields . beans . classproducer . ProductInjectedBean . class ) ; beanClasses . add ( org . apache . webbeans . test . profields . beans . classproducer . MyProductProducer . class ) ; beanClasses . add ( org . apache . webbeans . test . profields . beans . classproducer . MyProductBean . class ) ; startContainer ( beanClasses ) ; org . apache . webbeans . test . profields . beans . classproducer . ProductInjectedBean pib = getInstance ( org . apache . webbeans . test . profields . beans . classproducer . ProductInjectedBean . class , new org . apache . webbeans . annotation . DefaultLiteral ( ) ) ; \"<AssertPlaceHolder>\" ; pib . getX ( ) ; shutDownContainer ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( pib )", "total": "testProductProducer ( ) { java . util . Collection < java . lang . Class < ? > > beanClasses = new java . util . ArrayList < java . lang . Class < ? > > ( ) ; beanClasses . add ( org . apache . webbeans . test . profields . beans . classproducer . ProductInjectedBean . class ) ; beanClasses . add ( org . apache . webbeans . test . profields . beans . classproducer . MyProductProducer . class ) ; beanClasses . add ( org . apache . webbeans . test . profields . beans . classproducer . MyProductBean . class ) ; startContainer ( beanClasses ) ; org . apache . webbeans . test . profields . beans . classproducer . ProductInjectedBean pib = getInstance ( org . apache . webbeans . test . profields . beans . classproducer . ProductInjectedBean . class , new org . apache . webbeans . annotation . DefaultLiteral ( ) ) ; \"<AssertPlaceHolder>\" ; pib . getX ( ) ; shutDownContainer ( ) ; } getInstance ( java . lang . Class , java . lang . annotation . Annotation [ ] ) { java . util . Set < javax . enterprise . inject . spi . Bean < ? > > beans = getBeanManager ( ) . getBeans ( type , qualifiers ) ; org . junit . Assert . assertNotNull ( beans ) ; javax . enterprise . inject . spi . Bean < ? > bean = getBeanManager ( ) . resolve ( beans ) ; return ( ( T ) ( getBeanManager ( ) . getReference ( bean , type , getBeanManager ( ) . createCreationalContext ( bean ) ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( pib )"}
{"focal": "getChildren ( org . pentaho . platform . api . repository2 . unified . RepositoryRequest ) { return getChildren ( repositoryRequest . getPath ( ) , repositoryRequest . getChildNodeFilter ( ) , repositoryRequest . isShowHidden ( ) ) ; }", "testMethod": "testImportLocalizedPropertiesFiles_en_us ( ) { org . pentaho . platform . util . messages . LocaleHelper . setLocale ( new java . util . Locale ( \"en_US\" ) ) ; org . pentaho . platform . api . repository2 . unified . IUnifiedRepository mockUnifiedRepository = mock ( org . pentaho . platform . api . repository2 . unified . IUnifiedRepository . class ) ; org . pentaho . platform . plugin . services . importer . RepositoryFileImportBundle mockLocale = mock ( org . pentaho . platform . plugin . services . importer . RepositoryFileImportBundle . class ) ; java . util . Properties mockProperties = mock ( java . util . Properties . class ) ; setInternalState ( localeImportHandler , \"unifiedRepository\" , mockUnifiedRepository ) ; when ( mockLocale . getName ( ) ) . thenReturn ( \"Some<sp>File<sp>Name\" ) ; when ( mockLocale . getFile ( ) ) . thenReturn ( mock ( org . pentaho . platform . api . repository2 . unified . RepositoryFile . class ) ) ; when ( mockLocale . getFile ( ) . getName ( ) ) . thenReturn ( \"someFile_en_US.properties\" ) ; java . lang . String propertiesContent = \"description=Some<sp>Description\\n\" + \"title=Some<sp>Title\" ; org . pentaho . platform . plugin . services . importer . RepositoryFileImportBundle importBundle = createBundle ( propertiesContent , \"someFile.xaction\" ) ; when ( mockUnifiedRepository . getFile ( anyString ( ) ) ) . thenReturn ( importBundle . getFile ( ) ) ; java . util . List < org . pentaho . platform . api . repository2 . unified . RepositoryFile > localeFolderChildren = new java . util . ArrayList ( ) ; localeFolderChildren . add ( importBundle . getFile ( ) ) ; when ( mockUnifiedRepository . getChildren ( anyInt ( ) ) ) . thenReturn ( localeFolderChildren ) ; org . pentaho . platform . api . repository2 . unified . RepositoryFile localeParent = localeImportHandler . getLocaleParent ( mockLocale , mockProperties ) ; verify ( mockUnifiedRepository , times ( 1 ) ) . getFile ( anyString ( ) ) ; verify ( mockUnifiedRepository , times ( 1 ) ) . getChildren ( anyInt ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( localeParent )", "total": "testImportLocalizedPropertiesFiles_en_us ( ) { org . pentaho . platform . util . messages . LocaleHelper . setLocale ( new java . util . Locale ( \"en_US\" ) ) ; org . pentaho . platform . api . repository2 . unified . IUnifiedRepository mockUnifiedRepository = mock ( org . pentaho . platform . api . repository2 . unified . IUnifiedRepository . class ) ; org . pentaho . platform . plugin . services . importer . RepositoryFileImportBundle mockLocale = mock ( org . pentaho . platform . plugin . services . importer . RepositoryFileImportBundle . class ) ; java . util . Properties mockProperties = mock ( java . util . Properties . class ) ; setInternalState ( localeImportHandler , \"unifiedRepository\" , mockUnifiedRepository ) ; when ( mockLocale . getName ( ) ) . thenReturn ( \"Some<sp>File<sp>Name\" ) ; when ( mockLocale . getFile ( ) ) . thenReturn ( mock ( org . pentaho . platform . api . repository2 . unified . RepositoryFile . class ) ) ; when ( mockLocale . getFile ( ) . getName ( ) ) . thenReturn ( \"someFile_en_US.properties\" ) ; java . lang . String propertiesContent = \"description=Some<sp>Description\\n\" + \"title=Some<sp>Title\" ; org . pentaho . platform . plugin . services . importer . RepositoryFileImportBundle importBundle = createBundle ( propertiesContent , \"someFile.xaction\" ) ; when ( mockUnifiedRepository . getFile ( anyString ( ) ) ) . thenReturn ( importBundle . getFile ( ) ) ; java . util . List < org . pentaho . platform . api . repository2 . unified . RepositoryFile > localeFolderChildren = new java . util . ArrayList ( ) ; localeFolderChildren . add ( importBundle . getFile ( ) ) ; when ( mockUnifiedRepository . getChildren ( anyInt ( ) ) ) . thenReturn ( localeFolderChildren ) ; org . pentaho . platform . api . repository2 . unified . RepositoryFile localeParent = localeImportHandler . getLocaleParent ( mockLocale , mockProperties ) ; verify ( mockUnifiedRepository , times ( 1 ) ) . getFile ( anyString ( ) ) ; verify ( mockUnifiedRepository , times ( 1 ) ) . getChildren ( anyInt ( ) ) ; \"<AssertPlaceHolder>\" ; } getChildren ( org . pentaho . platform . api . repository2 . unified . RepositoryRequest ) { return getChildren ( repositoryRequest . getPath ( ) , repositoryRequest . getChildNodeFilter ( ) , repositoryRequest . isShowHidden ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( localeParent )"}
{"focal": "count ( ) { java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.poi.list\" ) ; java . lang . String json = \"{\\\"begin\\\":%s,\\\"limit\\\":%s}\" ; com . riversoft . weixin . mp . poi . Pois . logger . debug ( \"count<sp>poi:<sp>{}\" , java . lang . String . format ( json , 0 , 1 ) ) ; java . lang . String response = wxClient . post ( url , java . lang . String . format ( json , 0 , 1 ) ) ; java . util . Map < java . lang . String , java . lang . Object > result = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . json2Map ( response ) ; if ( result . containsKey ( \"total_count\" ) ) { return ( ( java . lang . Integer ) ( result . get ( \"total_count\" ) ) ) ; } else { throw new com . riversoft . weixin . common . exception . WxRuntimeException ( 999 , \"count<sp>pois<sp>failed.\" ) ; } }", "testMethod": "testCount ( ) { com . riversoft . weixin . mp . media . bean . Counts counts = com . riversoft . weixin . mp . media . Materials . defaultMaterials ( ) . count ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( counts )", "total": "testCount ( ) { com . riversoft . weixin . mp . media . bean . Counts counts = com . riversoft . weixin . mp . media . Materials . defaultMaterials ( ) . count ( ) ; \"<AssertPlaceHolder>\" ; } count ( ) { java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.poi.list\" ) ; java . lang . String json = \"{\\\"begin\\\":%s,\\\"limit\\\":%s}\" ; com . riversoft . weixin . mp . poi . Pois . logger . debug ( \"count<sp>poi:<sp>{}\" , java . lang . String . format ( json , 0 , 1 ) ) ; java . lang . String response = wxClient . post ( url , java . lang . String . format ( json , 0 , 1 ) ) ; java . util . Map < java . lang . String , java . lang . Object > result = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . json2Map ( response ) ; if ( result . containsKey ( \"total_count\" ) ) { return ( ( java . lang . Integer ) ( result . get ( \"total_count\" ) ) ) ; } else { throw new com . riversoft . weixin . common . exception . WxRuntimeException ( 999 , \"count<sp>pois<sp>failed.\" ) ; } }", "answer": "org . junit . Assert . assertNotNull ( counts )"}
{"focal": "getScreenshotImages ( int ) { java . util . ArrayList < java . awt . image . BufferedImage > images = new java . util . ArrayList < java . awt . image . BufferedImage > ( ) ; if ( ( this . store . get ( time ) ) != null ) { java . util . ArrayList < com . bixly . pastevid . editors . ScreenshotFile > files = this . store . get ( time ) ; for ( com . bixly . pastevid . editors . ScreenshotFile file : files ) { try { if ( ( ! ( file . exists ( ) ) ) || ( file . isFlagged ( ) ) ) { continue ; } images . add ( javax . imageio . ImageIO . read ( file ) ) ; } catch ( java . lang . NullPointerException e ) { log ( ( \"Could<sp>not<sp>locate<sp>file:<sp>\" + ( file . getAbsolutePath ( ) ) ) ) ; } catch ( java . io . IOException e ) { log ( e ) ; } } } return images ; }", "testMethod": "testGetScreenshotImages ( ) { System . out . println ( \"getScreenshotImages\" ) ; int seconds = 0 ; long milliSeconds = 0L ; java . io . File screenshotFile = null ; com . bixly . pastevid . recorders . VideoCache instance = new com . bixly . pastevid . recorders . VideoCache ( ) ; screenshotFile = generateTestImage ( ) ; instance . addScreenshot ( seconds , milliSeconds , screenshotFile ) ; \"<AssertPlaceHolder>\" ; screenshotFile . delete ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance . getScreenshotImages ( 0 ) )", "total": "testGetScreenshotImages ( ) { System . out . println ( \"getScreenshotImages\" ) ; int seconds = 0 ; long milliSeconds = 0L ; java . io . File screenshotFile = null ; com . bixly . pastevid . recorders . VideoCache instance = new com . bixly . pastevid . recorders . VideoCache ( ) ; screenshotFile = generateTestImage ( ) ; instance . addScreenshot ( seconds , milliSeconds , screenshotFile ) ; \"<AssertPlaceHolder>\" ; screenshotFile . delete ( ) ; } getScreenshotImages ( int ) { java . util . ArrayList < java . awt . image . BufferedImage > images = new java . util . ArrayList < java . awt . image . BufferedImage > ( ) ; if ( ( this . store . get ( time ) ) != null ) { java . util . ArrayList < com . bixly . pastevid . editors . ScreenshotFile > files = this . store . get ( time ) ; for ( com . bixly . pastevid . editors . ScreenshotFile file : files ) { try { if ( ( ! ( file . exists ( ) ) ) || ( file . isFlagged ( ) ) ) { continue ; } images . add ( javax . imageio . ImageIO . read ( file ) ) ; } catch ( java . lang . NullPointerException e ) { log ( ( \"Could<sp>not<sp>locate<sp>file:<sp>\" + ( file . getAbsolutePath ( ) ) ) ) ; } catch ( java . io . IOException e ) { log ( e ) ; } } } return images ; }", "answer": "org . junit . Assert . assertNotNull ( instance . getScreenshotImages ( 0 ) )"}
{"focal": "of ( T [ ] , int , int ) { return one . util . streamex . StreamEx . of ( one . util . streamex . Arrays . spliterator ( array , startInclusive , endExclusive ) ) ; }", "testMethod": "testSpliteratorConsumed ( ) { one . util . streamex . StreamEx < java . lang . Integer > s = one . util . streamex . StreamEx . of ( 1 , 2 , 3 ) ; \"<AssertPlaceHolder>\" ; s . spliterator ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( s . spliterator ( ) )", "total": "testSpliteratorConsumed ( ) { one . util . streamex . StreamEx < java . lang . Integer > s = one . util . streamex . StreamEx . of ( 1 , 2 , 3 ) ; \"<AssertPlaceHolder>\" ; s . spliterator ( ) ; } of ( T [ ] , int , int ) { return one . util . streamex . StreamEx . of ( one . util . streamex . Arrays . spliterator ( array , startInclusive , endExclusive ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( s . spliterator ( ) )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateReasonForVisitSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . cdt . ReasonForVisitSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . cdt . builder . CDTBuilderFactory . createReasonForVisitSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . cdt . ReasonForVisitSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateReasonForVisitSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . cdt . ReasonForVisitSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . cdt . builder . CDTBuilderFactory . createReasonForVisitSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . cdt . ReasonForVisitSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "getFirstHeader ( java . lang . String ) { return ( headergroup ) != null ? headergroup . getFirstHeader ( name ) : null ; }", "testMethod": "test304ResponseWithDateHeaderForwardedFromOriginIncludesDateHeader ( ) { request . setHeader ( \"If-None-Match\" , \"\\\"etag\\\"\" ) ; originResponse = new org . apache . hc . core5 . http . message . BasicClassicHttpResponse ( org . apache . hc . core5 . http . HttpStatus . SC_NOT_MODIFIED , \"Not<sp>Modified\" ) ; originResponse . setHeader ( \"Date\" , org . apache . hc . client5 . http . utils . DateUtils . formatDate ( new java . util . Date ( ) ) ) ; originResponse . setHeader ( \"Server\" , \"MockServer/1.0\" ) ; originResponse . setHeader ( \"ETag\" , \"\\\"etag\\\"\" ) ; org . easymock . EasyMock . expect ( mockExecChain . proceed ( org . easymock . EasyMock . isA ( org . apache . hc . core5 . http . ClassicHttpRequest . class ) , org . easymock . EasyMock . isA ( ExecChain . Scope . class ) ) ) . andReturn ( originResponse ) ; replayMocks ( ) ; final org . apache . hc . core5 . http . ClassicHttpResponse result = execute ( request ) ; verifyMocks ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result . getFirstHeader ( \"Date\" ) )", "total": "test304ResponseWithDateHeaderForwardedFromOriginIncludesDateHeader ( ) { request . setHeader ( \"If-None-Match\" , \"\\\"etag\\\"\" ) ; originResponse = new org . apache . hc . core5 . http . message . BasicClassicHttpResponse ( org . apache . hc . core5 . http . HttpStatus . SC_NOT_MODIFIED , \"Not<sp>Modified\" ) ; originResponse . setHeader ( \"Date\" , org . apache . hc . client5 . http . utils . DateUtils . formatDate ( new java . util . Date ( ) ) ) ; originResponse . setHeader ( \"Server\" , \"MockServer/1.0\" ) ; originResponse . setHeader ( \"ETag\" , \"\\\"etag\\\"\" ) ; org . easymock . EasyMock . expect ( mockExecChain . proceed ( org . easymock . EasyMock . isA ( org . apache . hc . core5 . http . ClassicHttpRequest . class ) , org . easymock . EasyMock . isA ( ExecChain . Scope . class ) ) ) . andReturn ( originResponse ) ; replayMocks ( ) ; final org . apache . hc . core5 . http . ClassicHttpResponse result = execute ( request ) ; verifyMocks ( ) ; \"<AssertPlaceHolder>\" ; } getFirstHeader ( java . lang . String ) { return ( headergroup ) != null ? headergroup . getFirstHeader ( name ) : null ; }", "answer": "org . junit . Assert . assertNotNull ( result . getFirstHeader ( \"Date\" ) )"}
{"focal": "fromProductionResource ( ) { return new com . hartwig . hmftools . patientdb . curators . TreatmentCurator ( com . hartwig . hmftools . patientdb . curators . TreatmentCurator . TREATMENT_MAPPING_RESOURCE ) ; }", "testMethod": "canCreateFromProductionResource ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . hartwig . hmftools . patientdb . curators . TreatmentCurator . fromProductionResource ( ) )", "total": "canCreateFromProductionResource ( ) { \"<AssertPlaceHolder>\" ; } fromProductionResource ( ) { return new com . hartwig . hmftools . patientdb . curators . TreatmentCurator ( com . hartwig . hmftools . patientdb . curators . TreatmentCurator . TREATMENT_MAPPING_RESOURCE ) ; }", "answer": "org . junit . Assert . assertNotNull ( com . hartwig . hmftools . patientdb . curators . TreatmentCurator . fromProductionResource ( ) )"}
{"focal": "get ( java . lang . String ) { return com . jogamp . opengl . GLProfile . get ( com . jogamp . opengl . GLProfile . defaultDevice , profile ) ; }", "testMethod": "test01DefaultOffscreenSupersampling ( ) { final com . jogamp . opengl . GLProfile glp = com . jogamp . opengl . GLProfile . get ( GLProfile . GL2 ) ; \"<AssertPlaceHolder>\" ; final com . jogamp . opengl . GLCapabilities glCap = new com . jogamp . opengl . GLCapabilities ( glp ) ; test ( glCap ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( glp )", "total": "test01DefaultOffscreenSupersampling ( ) { final com . jogamp . opengl . GLProfile glp = com . jogamp . opengl . GLProfile . get ( GLProfile . GL2 ) ; \"<AssertPlaceHolder>\" ; final com . jogamp . opengl . GLCapabilities glCap = new com . jogamp . opengl . GLCapabilities ( glp ) ; test ( glCap ) ; } get ( java . lang . String ) { return com . jogamp . opengl . GLProfile . get ( com . jogamp . opengl . GLProfile . defaultDevice , profile ) ; }", "answer": "org . junit . Assert . assertNotNull ( glp )"}
{"focal": "viewActivities ( java . lang . String ) { checkProfileStatus ( orcid ) ; org . orcid . jaxb . model . v3 . release . record . summary . ActivitiesSummary as = activitiesSummaryManagerReadOnly . getPublicActivitiesSummary ( orcid , filterVersionOfIdentifiers ) ; publicAPISecurityManagerV3 . filter ( as ) ; org . orcid . api . common . util . v3 . ActivityUtils . cleanEmptyFields ( as ) ; org . orcid . api . common . util . v3 . ActivityUtils . setPathToActivity ( as , orcid ) ; org . orcid . core . version . impl . Api3_0LastModifiedDatesHelper . calculateLastModified ( as ) ; sourceUtilsReadOnly . setSourceName ( as ) ; return javax . ws . rs . core . Response . ok ( as ) . build ( ) ; }", "testMethod": "testFindActivityDetails ( ) { javax . ws . rs . core . Response response = serviceDelegator . viewActivities ( ORCID ) ; \"<AssertPlaceHolder>\" ; org . orcid . jaxb . model . record . summary_v2 . ActivitiesSummary summary = ( ( org . orcid . jaxb . model . record . summary_v2 . ActivitiesSummary ) ( response . getEntity ( ) ) ) ; validateActivities ( summary ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testFindActivityDetails ( ) { javax . ws . rs . core . Response response = serviceDelegator . viewActivities ( ORCID ) ; \"<AssertPlaceHolder>\" ; org . orcid . jaxb . model . record . summary_v2 . ActivitiesSummary summary = ( ( org . orcid . jaxb . model . record . summary_v2 . ActivitiesSummary ) ( response . getEntity ( ) ) ) ; validateActivities ( summary ) ; } viewActivities ( java . lang . String ) { checkProfileStatus ( orcid ) ; org . orcid . jaxb . model . v3 . release . record . summary . ActivitiesSummary as = activitiesSummaryManagerReadOnly . getPublicActivitiesSummary ( orcid , filterVersionOfIdentifiers ) ; publicAPISecurityManagerV3 . filter ( as ) ; org . orcid . api . common . util . v3 . ActivityUtils . cleanEmptyFields ( as ) ; org . orcid . api . common . util . v3 . ActivityUtils . setPathToActivity ( as , orcid ) ; org . orcid . core . version . impl . Api3_0LastModifiedDatesHelper . calculateLastModified ( as ) ; sourceUtilsReadOnly . setSourceName ( as ) ; return javax . ws . rs . core . Response . ok ( as ) . build ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "getDescription ( ) { if ( ( description ) == null ) { description = org . junit . runner . Description . createSuiteDescription ( getName ( ) , cucumberScenarioOutline . getGherkinModel ( ) ) ; for ( org . junit . runner . Runner child : getChildren ( ) ) { description . addChild ( describeChild ( child ) ) ; } } return description ; }", "testMethod": "givenValidRestScenarioOutlineRunner_whenGetDescription_thenDescriptionIsReturned ( ) { givenValidRestScenarioOutlineRunner ( ) ; org . junit . runner . Description description = restScenarioOutlineRunner . getDescription ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( description )", "total": "givenValidRestScenarioOutlineRunner_whenGetDescription_thenDescriptionIsReturned ( ) { givenValidRestScenarioOutlineRunner ( ) ; org . junit . runner . Description description = restScenarioOutlineRunner . getDescription ( ) ; \"<AssertPlaceHolder>\" ; } getDescription ( ) { if ( ( description ) == null ) { description = org . junit . runner . Description . createSuiteDescription ( getName ( ) , cucumberScenarioOutline . getGherkinModel ( ) ) ; for ( org . junit . runner . Runner child : getChildren ( ) ) { description . addChild ( describeChild ( child ) ) ; } } return description ; }", "answer": "org . junit . Assert . assertNotNull ( description )"}
{"focal": "getArgumentDesc ( ) { return kg . apc . jmeter . timers . functions . TSTFeedback . desc ; }", "testMethod": "testGetArgumentDesc ( ) { System . out . println ( \"getArgumentDesc\" ) ; kg . apc . jmeter . functions . FifoPop instance = new kg . apc . jmeter . functions . FifoPop ( ) ; java . util . List result = instance . getArgumentDesc ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetArgumentDesc ( ) { System . out . println ( \"getArgumentDesc\" ) ; kg . apc . jmeter . functions . FifoPop instance = new kg . apc . jmeter . functions . FifoPop ( ) ; java . util . List result = instance . getArgumentDesc ( ) ; \"<AssertPlaceHolder>\" ; } getArgumentDesc ( ) { return kg . apc . jmeter . timers . functions . TSTFeedback . desc ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "persist ( T extends net . rrm . ehour . domain . DomainObject ) { return restoreDao . persist ( object ) ; }", "testMethod": "shouldSave ( ) { net . rrm . ehour . domain . BinaryConfiguration config = new net . rrm . ehour . domain . BinaryConfiguration ( ) ; config . setConfigKey ( \"test\" ) ; config . setConfigValue ( new byte [ ] { 0 , 1 , 2 } ) ; dao . persist ( config ) ; net . rrm . ehour . domain . BinaryConfiguration configuration = dao . findById ( \"test\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( configuration )", "total": "shouldSave ( ) { net . rrm . ehour . domain . BinaryConfiguration config = new net . rrm . ehour . domain . BinaryConfiguration ( ) ; config . setConfigKey ( \"test\" ) ; config . setConfigValue ( new byte [ ] { 0 , 1 , 2 } ) ; dao . persist ( config ) ; net . rrm . ehour . domain . BinaryConfiguration configuration = dao . findById ( \"test\" ) ; \"<AssertPlaceHolder>\" ; } persist ( T extends net . rrm . ehour . domain . DomainObject ) { return restoreDao . persist ( object ) ; }", "answer": "org . junit . Assert . assertNotNull ( configuration )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . PMmodule . model . Criteria entity = new org . oscarehr . PMmodule . model . Criteria ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . PMmodule . model . Criteria entity = new org . oscarehr . PMmodule . model . Criteria ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "readHDU ( ) { if ( ( ( this . dataStr ) == null ) || ( this . atEOF ) ) { if ( ( this . dataStr ) == null ) { nom . tam . fits . Fits . LOG . warning ( \"trying<sp>to<sp>read<sp>a<sp>hdu,<sp>without<sp>an<sp>input<sp>source!\" ) ; } return null ; } if ( ( ( this . dataStr ) instanceof nom . tam . util . RandomAccess ) && ( ( this . lastFileOffset ) > 0 ) ) { nom . tam . fits . FitsUtil . reposition ( this . dataStr , this . lastFileOffset ) ; } nom . tam . fits . Header hdr = nom . tam . fits . Header . readHeader ( this . dataStr ) ; if ( hdr == null ) { this . atEOF = true ; return null ; } nom . tam . fits . Data data = hdr . makeData ( ) ; try { data . read ( this . dataStr ) ; } catch ( nom . tam . fits . PaddingException e ) { e . updateHeader ( hdr ) ; if ( ! ( nom . tam . fits . FitsFactory . getAllowTerminalJunk ( ) ) ) { throw e ; } } this . lastFileOffset = nom . tam . fits . FitsUtil . findOffset ( this . dataStr ) ; nom . tam . fits . BasicHDU < nom . tam . fits . Data > nextHDU = nom . tam . fits . FitsFactory . hduFactory ( hdr , data ) ; this . hduList . add ( nextHDU ) ; return nextHDU ; }", "testMethod": "testZCompressionProvider ( ) { java . io . InputStream in = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResourceAsStream ( \"nom/tam/fits/test/test.fits.Z\" ) ; nom . tam . fits . Fits f = null ; try { f = new nom . tam . fits . Fits ( new nom . tam . fits . compress . ZCompressionProvider ( ) . decompress ( in ) ) ; \"<AssertPlaceHolder>\" ; } finally { nom . tam . util . SafeClose . close ( f ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( f . readHDU ( ) )", "total": "testZCompressionProvider ( ) { java . io . InputStream in = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResourceAsStream ( \"nom/tam/fits/test/test.fits.Z\" ) ; nom . tam . fits . Fits f = null ; try { f = new nom . tam . fits . Fits ( new nom . tam . fits . compress . ZCompressionProvider ( ) . decompress ( in ) ) ; \"<AssertPlaceHolder>\" ; } finally { nom . tam . util . SafeClose . close ( f ) ; } } readHDU ( ) { if ( ( ( this . dataStr ) == null ) || ( this . atEOF ) ) { if ( ( this . dataStr ) == null ) { nom . tam . fits . Fits . LOG . warning ( \"trying<sp>to<sp>read<sp>a<sp>hdu,<sp>without<sp>an<sp>input<sp>source!\" ) ; } return null ; } if ( ( ( this . dataStr ) instanceof nom . tam . util . RandomAccess ) && ( ( this . lastFileOffset ) > 0 ) ) { nom . tam . fits . FitsUtil . reposition ( this . dataStr , this . lastFileOffset ) ; } nom . tam . fits . Header hdr = nom . tam . fits . Header . readHeader ( this . dataStr ) ; if ( hdr == null ) { this . atEOF = true ; return null ; } nom . tam . fits . Data data = hdr . makeData ( ) ; try { data . read ( this . dataStr ) ; } catch ( nom . tam . fits . PaddingException e ) { e . updateHeader ( hdr ) ; if ( ! ( nom . tam . fits . FitsFactory . getAllowTerminalJunk ( ) ) ) { throw e ; } } this . lastFileOffset = nom . tam . fits . FitsUtil . findOffset ( this . dataStr ) ; nom . tam . fits . BasicHDU < nom . tam . fits . Data > nextHDU = nom . tam . fits . FitsFactory . hduFactory ( hdr , data ) ; this . hduList . add ( nextHDU ) ; return nextHDU ; }", "answer": "org . junit . Assert . assertNotNull ( f . readHDU ( ) )"}
{"focal": "rebootDroplet ( java . lang . Integer ) { validateDropletId ( dropletId ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { dropletId } ; return ( ( com . myjeeva . digitalocean . pojo . Action ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . REBOOT_DROPLET , new com . myjeeva . digitalocean . pojo . DropletAction ( com . myjeeva . digitalocean . common . ActionType . REBOOT ) , params ) ) . getData ( ) ) ) ; }", "testMethod": "testRebootDroplet ( ) { com . myjeeva . digitalocean . pojo . Action action = apiClient . rebootDroplet ( 2258136 ) ; \"<AssertPlaceHolder>\" ; log . info ( action . toString ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( action )", "total": "testRebootDroplet ( ) { com . myjeeva . digitalocean . pojo . Action action = apiClient . rebootDroplet ( 2258136 ) ; \"<AssertPlaceHolder>\" ; log . info ( action . toString ( ) ) ; } rebootDroplet ( java . lang . Integer ) { validateDropletId ( dropletId ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { dropletId } ; return ( ( com . myjeeva . digitalocean . pojo . Action ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . REBOOT_DROPLET , new com . myjeeva . digitalocean . pojo . DropletAction ( com . myjeeva . digitalocean . common . ActionType . REBOOT ) , params ) ) . getData ( ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( action )"}
{"focal": "getMetastoreDbUuid ( ) { return rawStore . getMetastoreDbUuid ( ) ; }", "testMethod": "testGetMetastoreUuid ( ) { java . lang . String uuid = org . apache . hadoop . hive . metastore . TestHiveMetaStore . client . getMetastoreDbUuid ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( uuid )", "total": "testGetMetastoreUuid ( ) { java . lang . String uuid = org . apache . hadoop . hive . metastore . TestHiveMetaStore . client . getMetastoreDbUuid ( ) ; \"<AssertPlaceHolder>\" ; } getMetastoreDbUuid ( ) { return rawStore . getMetastoreDbUuid ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( uuid )"}
{"focal": "permissions ( ) { return permissions ; }", "testMethod": "getPermissionOfFile_shouldReturnNotNull ( ) { writeToCache ( \"/file.txt\" ) ; commitToMaster ( ) ; initGitFileSystem ( ) ; java . nio . file . attribute . PosixFileAttributes attributes = readPosixAttributes ( \"/file.txt\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( attributes . permissions ( ) )", "total": "getPermissionOfFile_shouldReturnNotNull ( ) { writeToCache ( \"/file.txt\" ) ; commitToMaster ( ) ; initGitFileSystem ( ) ; java . nio . file . attribute . PosixFileAttributes attributes = readPosixAttributes ( \"/file.txt\" ) ; \"<AssertPlaceHolder>\" ; } permissions ( ) { return permissions ; }", "answer": "org . junit . Assert . assertNotNull ( attributes . permissions ( ) )"}
{"focal": "updateBandwidth ( java . lang . String , org . rackspace . stingray . client . bandwidth . Bandwidth ) { return updateItem ( name , org . rackspace . stingray . client . bandwidth . Bandwidth . class , ClientConstants . BANDWIDTH_PATH , bandwidth ) ; }", "testMethod": "shouldReturnABandwidth ( ) { vsName = \"12345_1234\" ; org . rackspace . stingray . client . bandwidth . Bandwidth bandwidthTwo = stingrayRestClient . updateBandwidth ( vsName , bandwidth ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( bandwidthTwo )", "total": "shouldReturnABandwidth ( ) { vsName = \"12345_1234\" ; org . rackspace . stingray . client . bandwidth . Bandwidth bandwidthTwo = stingrayRestClient . updateBandwidth ( vsName , bandwidth ) ; \"<AssertPlaceHolder>\" ; } updateBandwidth ( java . lang . String , org . rackspace . stingray . client . bandwidth . Bandwidth ) { return updateItem ( name , org . rackspace . stingray . client . bandwidth . Bandwidth . class , ClientConstants . BANDWIDTH_PATH , bandwidth ) ; }", "answer": "org . junit . Assert . assertNotNull ( bandwidthTwo )"}
{"focal": "getCommitter ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment ) { return org . apache . phoenix . hbase . index . write . IndexWriter . getCommitter ( env , org . apache . phoenix . hbase . index . write . TrackingParallelWriterIndexCommitter . class ) ; }", "testMethod": "getDefaultWriter ( ) { org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( false ) ; org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment env = org . mockito . Mockito . mock ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment . class ) ; org . mockito . Mockito . when ( env . getConfiguration ( ) ) . thenReturn ( conf ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . apache . phoenix . hbase . index . write . IndexWriter . getCommitter ( env ) )", "total": "getDefaultWriter ( ) { org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( false ) ; org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment env = org . mockito . Mockito . mock ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment . class ) ; org . mockito . Mockito . when ( env . getConfiguration ( ) ) . thenReturn ( conf ) ; \"<AssertPlaceHolder>\" ; } getCommitter ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment ) { return org . apache . phoenix . hbase . index . write . IndexWriter . getCommitter ( env , org . apache . phoenix . hbase . index . write . TrackingParallelWriterIndexCommitter . class ) ; }", "answer": "org . junit . Assert . assertNotNull ( org . apache . phoenix . hbase . index . write . IndexWriter . getCommitter ( env ) )"}
{"focal": "getEventByUUID ( java . lang . String , java . lang . Long ) { if ( timestamp != null ) { java . lang . String targetDate = org . ff4j . audit . repository . KDF . format ( new java . util . Date ( timestamp . longValue ( ) ) ) ; return searchEventById ( uuid , targetDate ) ; } else { java . util . Set < java . lang . String > searchedDate = new java . util . HashSet < java . lang . String > ( ) ; for ( java . lang . String currentDate : auditTrailEvents . keySet ( ) ) { if ( ! ( searchedDate . contains ( currentDate ) ) ) { org . ff4j . audit . Event evt = searchEventById ( uuid , currentDate ) ; if ( evt != null ) { return evt ; } } searchedDate . add ( currentDate ) ; } for ( java . lang . String currentDate : featureUsageEvents . keySet ( ) ) { if ( ! ( searchedDate . contains ( currentDate ) ) ) { org . ff4j . audit . Event evt = searchEventById ( uuid , currentDate ) ; if ( evt != null ) { return evt ; } } searchedDate . add ( currentDate ) ; } for ( java . lang . String currentDate : checkOffEvents . keySet ( ) ) { if ( ! ( searchedDate . contains ( currentDate ) ) ) { org . ff4j . audit . Event evt = searchEventById ( uuid , currentDate ) ; if ( evt != null ) { return evt ; } } searchedDate . add ( currentDate ) ; } } return null ; }", "testMethod": "testGetEventByUID ( ) { java . lang . String dummyId = \"1234-5678-9012-3456\" ; org . ff4j . audit . Event evt1 = new org . ff4j . audit . Event ( SOURCE_JAVA , TARGET_FEATURE , \"f1\" , ACTION_CREATE ) ; evt1 . setUuid ( dummyId ) ; repo . saveEvent ( evt1 ) ; java . lang . Thread . sleep ( 100 ) ; org . ff4j . audit . Event evt = repo . getEventByUUID ( dummyId , java . lang . System . currentTimeMillis ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( evt )", "total": "testGetEventByUID ( ) { java . lang . String dummyId = \"1234-5678-9012-3456\" ; org . ff4j . audit . Event evt1 = new org . ff4j . audit . Event ( SOURCE_JAVA , TARGET_FEATURE , \"f1\" , ACTION_CREATE ) ; evt1 . setUuid ( dummyId ) ; repo . saveEvent ( evt1 ) ; java . lang . Thread . sleep ( 100 ) ; org . ff4j . audit . Event evt = repo . getEventByUUID ( dummyId , java . lang . System . currentTimeMillis ( ) ) ; \"<AssertPlaceHolder>\" ; } getEventByUUID ( java . lang . String , java . lang . Long ) { if ( timestamp != null ) { java . lang . String targetDate = org . ff4j . audit . repository . KDF . format ( new java . util . Date ( timestamp . longValue ( ) ) ) ; return searchEventById ( uuid , targetDate ) ; } else { java . util . Set < java . lang . String > searchedDate = new java . util . HashSet < java . lang . String > ( ) ; for ( java . lang . String currentDate : auditTrailEvents . keySet ( ) ) { if ( ! ( searchedDate . contains ( currentDate ) ) ) { org . ff4j . audit . Event evt = searchEventById ( uuid , currentDate ) ; if ( evt != null ) { return evt ; } } searchedDate . add ( currentDate ) ; } for ( java . lang . String currentDate : featureUsageEvents . keySet ( ) ) { if ( ! ( searchedDate . contains ( currentDate ) ) ) { org . ff4j . audit . Event evt = searchEventById ( uuid , currentDate ) ; if ( evt != null ) { return evt ; } } searchedDate . add ( currentDate ) ; } for ( java . lang . String currentDate : checkOffEvents . keySet ( ) ) { if ( ! ( searchedDate . contains ( currentDate ) ) ) { org . ff4j . audit . Event evt = searchEventById ( uuid , currentDate ) ; if ( evt != null ) { return evt ; } } searchedDate . add ( currentDate ) ; } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( evt )"}
{"focal": "getFieldFromBean ( java . lang . Class , java . lang . String ) { return com . github . dozermapper . core . util . ReflectionUtils . getFieldFromBean ( clazz , fieldName , clazz ) ; }", "testMethod": "shouldModifyAccessor ( ) { java . lang . reflect . Field field = com . github . dozermapper . core . util . ReflectionUtils . getFieldFromBean ( com . github . dozermapper . core . util . ReflectionUtilsTest . BaseBean . class , \"a\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( field )", "total": "shouldModifyAccessor ( ) { java . lang . reflect . Field field = com . github . dozermapper . core . util . ReflectionUtils . getFieldFromBean ( com . github . dozermapper . core . util . ReflectionUtilsTest . BaseBean . class , \"a\" ) ; \"<AssertPlaceHolder>\" ; } getFieldFromBean ( java . lang . Class , java . lang . String ) { return com . github . dozermapper . core . util . ReflectionUtils . getFieldFromBean ( clazz , fieldName , clazz ) ; }", "answer": "org . junit . Assert . assertNotNull ( field )"}
{"focal": "getFoo ( ) { return foo ; }", "testMethod": "testNamedInjectedFieldUsesFieldName ( org . jboss . weld . tests . resolution . named . NamedBeanConsumer ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( consumer . getFoo ( ) )", "total": "testNamedInjectedFieldUsesFieldName ( org . jboss . weld . tests . resolution . named . NamedBeanConsumer ) { \"<AssertPlaceHolder>\" ; } getFoo ( ) { return foo ; }", "answer": "org . junit . Assert . assertNotNull ( consumer . getFoo ( ) )"}
{"focal": "getPolicies ( javax . servlet . http . HttpServletRequest ) { java . util . List < org . apache . ranger . plugin . model . RangerPolicy > ret = new java . util . ArrayList < org . apache . ranger . plugin . model . RangerPolicy > ( ) ; if ( org . apache . ranger . rest . PublicAPIsv2 . logger . isDebugEnabled ( ) ) { org . apache . ranger . rest . PublicAPIsv2 . logger . debug ( \"==><sp>PublicAPIsv2.getPolicies()\" ) ; } ret = serviceREST . getPolicies ( request ) . getPolicies ( ) ; if ( org . apache . ranger . rest . PublicAPIsv2 . logger . isDebugEnabled ( ) ) { org . apache . ranger . rest . PublicAPIsv2 . logger . debug ( ( ( ( \"<==<sp>PublicAPIsv2.getPolicies(Request:<sp>\" + ( request . getQueryString ( ) ) ) + \"<sp>Result<sp>Size:<sp>\" ) + ( ret . size ( ) ) ) ) ; } return ret ; }", "testMethod": "test30getPolicies ( ) { org . apache . ranger . plugin . util . SearchFilter filter = new org . apache . ranger . plugin . util . SearchFilter ( ) ; filter . setParam ( SearchFilter . POLICY_NAME , \"policyName\" ) ; filter . setParam ( SearchFilter . SERVICE_NAME , \"serviceName\" ) ; java . util . List < org . apache . ranger . plugin . model . RangerPolicy > rangerPolicyLists = new java . util . ArrayList < org . apache . ranger . plugin . model . RangerPolicy > ( ) ; org . apache . ranger . plugin . model . RangerPolicy rangerPolicy = rangerPolicy ( ) ; rangerPolicyLists . add ( rangerPolicy ) ; org . apache . ranger . view . RangerPolicyList policyListObj = new org . apache . ranger . view . RangerPolicyList ( ) ; policyListObj . setPageSize ( 0 ) ; policyListObj . setResultSize ( 1 ) ; policyListObj . setSortBy ( \"asc\" ) ; policyListObj . setSortType ( \"1\" ) ; policyListObj . setStartIndex ( 0 ) ; policyListObj . setTotalCount ( 10 ) ; java . util . List < org . apache . ranger . plugin . model . RangerPolicy > dbRangerPolicy = serviceDBStore . getPolicies ( filter ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dbRangerPolicy )", "total": "test30getPolicies ( ) { org . apache . ranger . plugin . util . SearchFilter filter = new org . apache . ranger . plugin . util . SearchFilter ( ) ; filter . setParam ( SearchFilter . POLICY_NAME , \"policyName\" ) ; filter . setParam ( SearchFilter . SERVICE_NAME , \"serviceName\" ) ; java . util . List < org . apache . ranger . plugin . model . RangerPolicy > rangerPolicyLists = new java . util . ArrayList < org . apache . ranger . plugin . model . RangerPolicy > ( ) ; org . apache . ranger . plugin . model . RangerPolicy rangerPolicy = rangerPolicy ( ) ; rangerPolicyLists . add ( rangerPolicy ) ; org . apache . ranger . view . RangerPolicyList policyListObj = new org . apache . ranger . view . RangerPolicyList ( ) ; policyListObj . setPageSize ( 0 ) ; policyListObj . setResultSize ( 1 ) ; policyListObj . setSortBy ( \"asc\" ) ; policyListObj . setSortType ( \"1\" ) ; policyListObj . setStartIndex ( 0 ) ; policyListObj . setTotalCount ( 10 ) ; java . util . List < org . apache . ranger . plugin . model . RangerPolicy > dbRangerPolicy = serviceDBStore . getPolicies ( filter ) ; \"<AssertPlaceHolder>\" ; } getPolicies ( javax . servlet . http . HttpServletRequest ) { java . util . List < org . apache . ranger . plugin . model . RangerPolicy > ret = new java . util . ArrayList < org . apache . ranger . plugin . model . RangerPolicy > ( ) ; if ( org . apache . ranger . rest . PublicAPIsv2 . logger . isDebugEnabled ( ) ) { org . apache . ranger . rest . PublicAPIsv2 . logger . debug ( \"==><sp>PublicAPIsv2.getPolicies()\" ) ; } ret = serviceREST . getPolicies ( request ) . getPolicies ( ) ; if ( org . apache . ranger . rest . PublicAPIsv2 . logger . isDebugEnabled ( ) ) { org . apache . ranger . rest . PublicAPIsv2 . logger . debug ( ( ( ( \"<==<sp>PublicAPIsv2.getPolicies(Request:<sp>\" + ( request . getQueryString ( ) ) ) + \"<sp>Result<sp>Size:<sp>\" ) + ( ret . size ( ) ) ) ) ; } return ret ; }", "answer": "org . junit . Assert . assertNotNull ( dbRangerPolicy )"}
{"focal": "getName ( ) { return name ; }", "testMethod": "testMoreComplexRulesSerialization ( ) { org . kie . api . KieServices ks = KieServices . Factory . get ( ) ; org . kie . api . io . Resource drlResource = ks . getResources ( ) . newClassPathResource ( \"collect_rules.drl\" , org . drools . persistence . kie . persistence . session . JpaPersistentStatefulSessionTest . class ) ; org . kie . api . builder . KieFileSystem kfs = ks . newKieFileSystem ( ) . write ( \"src/main/resources/r1.drl\" , drlResource ) ; ks . newKieBuilder ( kfs ) . buildAll ( ) ; org . kie . api . KieBase kbase = ks . newKieContainer ( ks . getRepository ( ) . getDefaultReleaseId ( ) ) . getKieBase ( ) ; org . kie . api . runtime . KieSession ksession = ks . getStoreServices ( ) . newKieSession ( kbase , null , env ) ; java . util . List < java . lang . String > list = new java . util . ArrayList < java . lang . String > ( ) ; ksession . setGlobal ( \"list\" , list ) ; org . kie . api . definition . type . FactType hereType = kbase . getFactType ( this . getClass ( ) . getPackage ( ) . getName ( ) , \"Here\" ) ; \"<AssertPlaceHolder>\" ; java . lang . Object here = hereType . newInstance ( ) ; hereType . set ( here , \"place\" , \"office\" ) ; ksession . insert ( here ) ; ksession . fireAllRules ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( hereType )", "total": "testMoreComplexRulesSerialization ( ) { org . kie . api . KieServices ks = KieServices . Factory . get ( ) ; org . kie . api . io . Resource drlResource = ks . getResources ( ) . newClassPathResource ( \"collect_rules.drl\" , org . drools . persistence . kie . persistence . session . JpaPersistentStatefulSessionTest . class ) ; org . kie . api . builder . KieFileSystem kfs = ks . newKieFileSystem ( ) . write ( \"src/main/resources/r1.drl\" , drlResource ) ; ks . newKieBuilder ( kfs ) . buildAll ( ) ; org . kie . api . KieBase kbase = ks . newKieContainer ( ks . getRepository ( ) . getDefaultReleaseId ( ) ) . getKieBase ( ) ; org . kie . api . runtime . KieSession ksession = ks . getStoreServices ( ) . newKieSession ( kbase , null , env ) ; java . util . List < java . lang . String > list = new java . util . ArrayList < java . lang . String > ( ) ; ksession . setGlobal ( \"list\" , list ) ; org . kie . api . definition . type . FactType hereType = kbase . getFactType ( this . getClass ( ) . getPackage ( ) . getName ( ) , \"Here\" ) ; \"<AssertPlaceHolder>\" ; java . lang . Object here = hereType . newInstance ( ) ; hereType . set ( here , \"place\" , \"office\" ) ; ksession . insert ( here ) ; ksession . fireAllRules ( ) ; } getName ( ) { return name ; }", "answer": "org . junit . Assert . assertNotNull ( hereType )"}
{"focal": "createServlet ( java . lang . String ) { try { return java . lang . Class . forName ( className ) . asSubclass ( javax . servlet . Servlet . class ) ; } catch ( java . lang . ClassNotFoundException e ) { org . openqa . grid . web . utils . ExtraServletUtil . log . warning ( ( ( ( \"The<sp>specified<sp>class<sp>:<sp>\" + className ) + \"<sp>cannot<sp>be<sp>instantiated<sp>\" ) + ( e . getMessage ( ) ) ) ) ; } return null ; }", "testMethod": "exists ( ) { java . lang . String s = \"org.openqa.grid.e2e.utils.TestHttpServlet\" ; java . lang . Class < ? extends javax . servlet . Servlet > servlet = org . openqa . grid . web . utils . ExtraServletUtil . createServlet ( s ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( servlet )", "total": "exists ( ) { java . lang . String s = \"org.openqa.grid.e2e.utils.TestHttpServlet\" ; java . lang . Class < ? extends javax . servlet . Servlet > servlet = org . openqa . grid . web . utils . ExtraServletUtil . createServlet ( s ) ; \"<AssertPlaceHolder>\" ; } createServlet ( java . lang . String ) { try { return java . lang . Class . forName ( className ) . asSubclass ( javax . servlet . Servlet . class ) ; } catch ( java . lang . ClassNotFoundException e ) { org . openqa . grid . web . utils . ExtraServletUtil . log . warning ( ( ( ( \"The<sp>specified<sp>class<sp>:<sp>\" + className ) + \"<sp>cannot<sp>be<sp>instantiated<sp>\" ) + ( e . getMessage ( ) ) ) ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( servlet )"}
{"focal": "getService ( java . lang . Class ) { org . nuxeo . runtime . api . ServiceProvider provider = org . nuxeo . runtime . api . DefaultServiceProvider . getProvider ( ) ; if ( provider != null ) { return provider . getService ( serviceClass ) ; } org . nuxeo . runtime . api . Framework . checkRuntimeInitialized ( ) ; return org . nuxeo . runtime . api . Framework . runtime . getService ( serviceClass ) ; }", "testMethod": "testService ( ) { org . nuxeo . ecm . core . api . blobholder . BlobHolderAdapterService bhas = org . nuxeo . runtime . api . Framework . getService ( org . nuxeo . ecm . core . api . blobholder . BlobHolderAdapterService . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( bhas )", "total": "testService ( ) { org . nuxeo . ecm . core . api . blobholder . BlobHolderAdapterService bhas = org . nuxeo . runtime . api . Framework . getService ( org . nuxeo . ecm . core . api . blobholder . BlobHolderAdapterService . class ) ; \"<AssertPlaceHolder>\" ; } getService ( java . lang . Class ) { org . nuxeo . runtime . api . ServiceProvider provider = org . nuxeo . runtime . api . DefaultServiceProvider . getProvider ( ) ; if ( provider != null ) { return provider . getService ( serviceClass ) ; } org . nuxeo . runtime . api . Framework . checkRuntimeInitialized ( ) ; return org . nuxeo . runtime . api . Framework . runtime . getService ( serviceClass ) ; }", "answer": "org . junit . Assert . assertNotNull ( bhas )"}
{"focal": "listGisFiles ( java . lang . String ) { java . io . File dir = new java . io . File ( directoryPath ) ; java . io . File [ ] files = dir . listFiles ( com . gisgraphy . importer . ImporterHelper . gisFileFilter ) ; return files == null ? new java . io . File [ 0 ] : files ; }", "testMethod": "listGisFilesShouldNotReturnNullIfThereIsNoFile ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . gisgraphy . importer . ImporterHelper . listGisFiles ( \"\" ) )", "total": "listGisFilesShouldNotReturnNullIfThereIsNoFile ( ) { \"<AssertPlaceHolder>\" ; } listGisFiles ( java . lang . String ) { java . io . File dir = new java . io . File ( directoryPath ) ; java . io . File [ ] files = dir . listFiles ( com . gisgraphy . importer . ImporterHelper . gisFileFilter ) ; return files == null ? new java . io . File [ 0 ] : files ; }", "answer": "org . junit . Assert . assertNotNull ( com . gisgraphy . importer . ImporterHelper . listGisFiles ( \"\" ) )"}
{"focal": "openConfigFile ( ) { java . lang . String location = java . lang . System . getProperty ( PerfLoggerConstants . CONFIG_FILE_LOCATION_PROP_KEY ) ; if ( location == null ) { ch . sla . jdbcperflogger . DriverConfig . LOGGER . debug ( ( ( ( \"No<sp>System<sp>property<sp>\" + ( PerfLoggerConstants . CONFIG_FILE_LOCATION_PROP_KEY ) ) + \"<sp>defined,<sp>looking<sp>for<sp>config<sp>at<sp>\" ) + ( PerfLoggerConstants . CONFIG_FILE_DEFAULT_LOCATION ) ) ) ; location = PerfLoggerConstants . CONFIG_FILE_DEFAULT_LOCATION ; } java . io . InputStream configFileStream = ch . sla . jdbcperflogger . DriverConfig . openConfigFile ( location ) ; if ( configFileStream == null ) { location = PerfLoggerConstants . CONFIG_FILE_FALLBACK_LOCATION ; configFileStream = ch . sla . jdbcperflogger . DriverConfig . openConfigFile ( location ) ; if ( configFileStream == null ) { throw new java . lang . RuntimeException ( ( \"Unexpected:<sp>cannot<sp>find<sp>\" + ( PerfLoggerConstants . CONFIG_FILE_FALLBACK_LOCATION ) ) ) ; } } ch . sla . jdbcperflogger . DriverConfig . LOGGER . info ( ( \"Using<sp>config<sp>file<sp>\" + location ) ) ; return configFileStream ; }", "testMethod": "testOpenDefaultConfigFile ( ) { final java . io . InputStream is = ch . sla . jdbcperflogger . DriverConfig . openConfigFile ( ) ; \"<AssertPlaceHolder>\" ; is . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( is )", "total": "testOpenDefaultConfigFile ( ) { final java . io . InputStream is = ch . sla . jdbcperflogger . DriverConfig . openConfigFile ( ) ; \"<AssertPlaceHolder>\" ; is . close ( ) ; } openConfigFile ( ) { java . lang . String location = java . lang . System . getProperty ( PerfLoggerConstants . CONFIG_FILE_LOCATION_PROP_KEY ) ; if ( location == null ) { ch . sla . jdbcperflogger . DriverConfig . LOGGER . debug ( ( ( ( \"No<sp>System<sp>property<sp>\" + ( PerfLoggerConstants . CONFIG_FILE_LOCATION_PROP_KEY ) ) + \"<sp>defined,<sp>looking<sp>for<sp>config<sp>at<sp>\" ) + ( PerfLoggerConstants . CONFIG_FILE_DEFAULT_LOCATION ) ) ) ; location = PerfLoggerConstants . CONFIG_FILE_DEFAULT_LOCATION ; } java . io . InputStream configFileStream = ch . sla . jdbcperflogger . DriverConfig . openConfigFile ( location ) ; if ( configFileStream == null ) { location = PerfLoggerConstants . CONFIG_FILE_FALLBACK_LOCATION ; configFileStream = ch . sla . jdbcperflogger . DriverConfig . openConfigFile ( location ) ; if ( configFileStream == null ) { throw new java . lang . RuntimeException ( ( \"Unexpected:<sp>cannot<sp>find<sp>\" + ( PerfLoggerConstants . CONFIG_FILE_FALLBACK_LOCATION ) ) ) ; } } ch . sla . jdbcperflogger . DriverConfig . LOGGER . info ( ( \"Using<sp>config<sp>file<sp>\" + location ) ) ; return configFileStream ; }", "answer": "org . junit . Assert . assertNotNull ( is )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "updateUserWithOnlyDataChanging ( ) { final org . bonitasoft . engine . identity . User user = getIdentityAPI ( ) . createUser ( \"james\" , \"mbp\" ) ; final org . bonitasoft . engine . identity . ContactDataUpdater persoDataUpDescr = buildPersoContactDataUpdater ( ) ; final org . bonitasoft . engine . identity . ContactDataUpdater proDataUpDescr = buildProContactDataUpdater ( ) ; final org . bonitasoft . engine . identity . UserUpdater updater = new org . bonitasoft . engine . identity . UserUpdater ( ) ; updater . setPersonalContactData ( persoDataUpDescr ) ; updater . setProfessionalContactData ( proDataUpDescr ) ; final org . bonitasoft . engine . identity . User updatedUser = getIdentityAPI ( ) . updateUser ( user . getId ( ) , updater ) ; \"<AssertPlaceHolder>\" ; final org . bonitasoft . engine . identity . ContactData persoData = getIdentityAPI ( ) . getUserContactData ( updatedUser . getId ( ) , true ) ; checkPersoUserContactData ( persoData ) ; final org . bonitasoft . engine . identity . ContactData proData = getIdentityAPI ( ) . getUserContactData ( updatedUser . getId ( ) , false ) ; checkProUserContactData ( proData ) ; getIdentityAPI ( ) . deleteUser ( updatedUser . getId ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( updatedUser )", "total": "updateUserWithOnlyDataChanging ( ) { final org . bonitasoft . engine . identity . User user = getIdentityAPI ( ) . createUser ( \"james\" , \"mbp\" ) ; final org . bonitasoft . engine . identity . ContactDataUpdater persoDataUpDescr = buildPersoContactDataUpdater ( ) ; final org . bonitasoft . engine . identity . ContactDataUpdater proDataUpDescr = buildProContactDataUpdater ( ) ; final org . bonitasoft . engine . identity . UserUpdater updater = new org . bonitasoft . engine . identity . UserUpdater ( ) ; updater . setPersonalContactData ( persoDataUpDescr ) ; updater . setProfessionalContactData ( proDataUpDescr ) ; final org . bonitasoft . engine . identity . User updatedUser = getIdentityAPI ( ) . updateUser ( user . getId ( ) , updater ) ; \"<AssertPlaceHolder>\" ; final org . bonitasoft . engine . identity . ContactData persoData = getIdentityAPI ( ) . getUserContactData ( updatedUser . getId ( ) , true ) ; checkPersoUserContactData ( persoData ) ; final org . bonitasoft . engine . identity . ContactData proData = getIdentityAPI ( ) . getUserContactData ( updatedUser . getId ( ) , false ) ; checkProUserContactData ( proData ) ; getIdentityAPI ( ) . deleteUser ( updatedUser . getId ( ) ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( updatedUser )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testCrea ( ) { mx . edu . um . mateo . general . model . Organizacion organizacion = new mx . edu . um . mateo . general . model . Organizacion ( \"tst-01\" , \"test-02\" , \"test-03\" ) ; currentSession ( ) . save ( organizacion ) ; mx . edu . um . mateo . general . model . Empresa empresa = new mx . edu . um . mateo . general . model . Empresa ( \"tst01\" , \"test-02\" , \"test-03\" , \"000000000001\" , organizacion ) ; currentSession ( ) . save ( empresa ) ; mx . edu . um . mateo . rh . model . Nacionalidad nacionalidad = new mx . edu . um . mateo . rh . model . Nacionalidad ( ) ; nacionalidad . setNombre ( \"mexicana\" ) ; nacionalidad . setStatus ( \"A\" ) ; nacionalidad . setEmpresa ( empresa ) ; instance . graba ( nacionalidad , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( nacionalidad . getId ( ) )", "total": "testCrea ( ) { mx . edu . um . mateo . general . model . Organizacion organizacion = new mx . edu . um . mateo . general . model . Organizacion ( \"tst-01\" , \"test-02\" , \"test-03\" ) ; currentSession ( ) . save ( organizacion ) ; mx . edu . um . mateo . general . model . Empresa empresa = new mx . edu . um . mateo . general . model . Empresa ( \"tst01\" , \"test-02\" , \"test-03\" , \"000000000001\" , organizacion ) ; currentSession ( ) . save ( empresa ) ; mx . edu . um . mateo . rh . model . Nacionalidad nacionalidad = new mx . edu . um . mateo . rh . model . Nacionalidad ( ) ; nacionalidad . setNombre ( \"mexicana\" ) ; nacionalidad . setStatus ( \"A\" ) ; nacionalidad . setEmpresa ( empresa ) ; instance . graba ( nacionalidad , null ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( nacionalidad . getId ( ) )"}
{"focal": "createHttpClient ( hudson . plugins . swarm . URL ) { hudson . plugins . swarm . SwarmClient . logger . fine ( \"createHttpClient()<sp>invoked\" ) ; if ( ( options . disableSslVerification ) || ( ! ( options . sslFingerprints . isEmpty ( ) ) ) ) { try { javax . net . ssl . SSLContext ctx = javax . net . ssl . SSLContext . getInstance ( \"TLS\" ) ; java . lang . String trusted = ( options . disableSslVerification ) ? \"\" : options . sslFingerprints ; ctx . init ( new javax . net . ssl . KeyManager [ 0 ] , new javax . net . ssl . TrustManager [ ] { new hudson . plugins . swarm . SwarmClient . DefaultTrustManager ( trusted ) } , new java . security . SecureRandom ( ) ) ; javax . net . ssl . SSLContext . setDefault ( ctx ) ; } catch ( java . security . KeyManagementException e ) { hudson . plugins . swarm . SwarmClient . logger . log ( Level . SEVERE , \"KeyManagementException<sp>occurred\" , e ) ; throw new java . lang . RuntimeException ( e ) ; } catch ( java . security . NoSuchAlgorithmException e ) { hudson . plugins . swarm . SwarmClient . logger . log ( Level . SEVERE , \"NoSuchAlgorithmException<sp>occurred\" , e ) ; throw new java . lang . RuntimeException ( e ) ; } } org . apache . commons . httpclient . HttpClient client = hudson . plugins . swarm . SwarmClient . getGlobalHttpClient ( ) ; if ( ( ( options . username ) != null ) && ( ( options . password ) != null ) ) { hudson . plugins . swarm . SwarmClient . logger . fine ( \"Setting<sp>HttpClient<sp>credentials<sp>based<sp>on<sp>options<sp>passed\" ) ; client . getState ( ) . setCredentials ( new org . apache . commons . httpclient . auth . AuthScope ( urlForAuth . getHost ( ) , urlForAuth . getPort ( ) ) , new org . apache . commons . httpclient . UsernamePasswordCredentials ( options . username , options . password ) ) ; } client . getParams ( ) . setAuthenticationPreemptive ( true ) ; return client ; }", "testMethod": "should_try_to_create_http_connection_on_default_options ( ) { hudson . plugins . swarm . Options options = new hudson . plugins . swarm . Options ( ) ; hudson . plugins . swarm . SwarmClient swc = new hudson . plugins . swarm . SwarmClient ( options ) ; java . net . URL url = null ; try { url = new java . net . URL ( \"http://jenkins:8080\" ) ; } catch ( java . net . MalformedURLException e ) { e . printStackTrace ( ) ; } org . apache . commons . httpclient . HttpClient hc = swc . createHttpClient ( url ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( hc )", "total": "should_try_to_create_http_connection_on_default_options ( ) { hudson . plugins . swarm . Options options = new hudson . plugins . swarm . Options ( ) ; hudson . plugins . swarm . SwarmClient swc = new hudson . plugins . swarm . SwarmClient ( options ) ; java . net . URL url = null ; try { url = new java . net . URL ( \"http://jenkins:8080\" ) ; } catch ( java . net . MalformedURLException e ) { e . printStackTrace ( ) ; } org . apache . commons . httpclient . HttpClient hc = swc . createHttpClient ( url ) ; \"<AssertPlaceHolder>\" ; } createHttpClient ( hudson . plugins . swarm . URL ) { hudson . plugins . swarm . SwarmClient . logger . fine ( \"createHttpClient()<sp>invoked\" ) ; if ( ( options . disableSslVerification ) || ( ! ( options . sslFingerprints . isEmpty ( ) ) ) ) { try { javax . net . ssl . SSLContext ctx = javax . net . ssl . SSLContext . getInstance ( \"TLS\" ) ; java . lang . String trusted = ( options . disableSslVerification ) ? \"\" : options . sslFingerprints ; ctx . init ( new javax . net . ssl . KeyManager [ 0 ] , new javax . net . ssl . TrustManager [ ] { new hudson . plugins . swarm . SwarmClient . DefaultTrustManager ( trusted ) } , new java . security . SecureRandom ( ) ) ; javax . net . ssl . SSLContext . setDefault ( ctx ) ; } catch ( java . security . KeyManagementException e ) { hudson . plugins . swarm . SwarmClient . logger . log ( Level . SEVERE , \"KeyManagementException<sp>occurred\" , e ) ; throw new java . lang . RuntimeException ( e ) ; } catch ( java . security . NoSuchAlgorithmException e ) { hudson . plugins . swarm . SwarmClient . logger . log ( Level . SEVERE , \"NoSuchAlgorithmException<sp>occurred\" , e ) ; throw new java . lang . RuntimeException ( e ) ; } } org . apache . commons . httpclient . HttpClient client = hudson . plugins . swarm . SwarmClient . getGlobalHttpClient ( ) ; if ( ( ( options . username ) != null ) && ( ( options . password ) != null ) ) { hudson . plugins . swarm . SwarmClient . logger . fine ( \"Setting<sp>HttpClient<sp>credentials<sp>based<sp>on<sp>options<sp>passed\" ) ; client . getState ( ) . setCredentials ( new org . apache . commons . httpclient . auth . AuthScope ( urlForAuth . getHost ( ) , urlForAuth . getPort ( ) ) , new org . apache . commons . httpclient . UsernamePasswordCredentials ( options . username , options . password ) ) ; } client . getParams ( ) . setAuthenticationPreemptive ( true ) ; return client ; }", "answer": "org . junit . Assert . assertNotNull ( hc )"}
{"focal": "info ( java . lang . String , com . ctrip . xpipe . redis . console . healthcheck . session . Callbackable ) { com . ctrip . xpipe . redis . console . healthcheck . session . InfoCommand command = new com . ctrip . xpipe . redis . console . healthcheck . session . InfoCommand ( clientPool , infoSection , scheduled , commandTimeOut ) ; silentCommand ( command ) ; com . ctrip . xpipe . api . command . CommandFuture < java . lang . String > future = command . execute ( ) ; future . addListener ( new com . ctrip . xpipe . api . command . CommandFutureListener < java . lang . String > ( ) { @ com . ctrip . xpipe . redis . console . healthcheck . session . Override public void operationComplete ( com . ctrip . xpipe . api . command . CommandFuture < java . lang . String > commandFuture ) throws com . ctrip . xpipe . redis . console . healthcheck . session . Exception { if ( ! ( commandFuture . isSuccess ( ) ) ) { callback . fail ( commandFuture . cause ( ) ) ; } else { callback . success ( commandFuture . get ( ) ) ; } } } ) ; return future ; }", "testMethod": "testRetrieveOrgInfoFromRemote ( ) { java . util . List < com . ctrip . xpipe . redis . console . model . OrganizationTbl > orgs = organizationService . retrieveOrgInfoFromRemote ( ) ; orgs . forEach ( ( org ) -> com . ctrip . xpipe . redis . console . service . impl . logger . info ( \"{}\" , org ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( orgs )", "total": "testRetrieveOrgInfoFromRemote ( ) { java . util . List < com . ctrip . xpipe . redis . console . model . OrganizationTbl > orgs = organizationService . retrieveOrgInfoFromRemote ( ) ; orgs . forEach ( ( org ) -> com . ctrip . xpipe . redis . console . service . impl . logger . info ( \"{}\" , org ) ) ; \"<AssertPlaceHolder>\" ; } info ( java . lang . String , com . ctrip . xpipe . redis . console . healthcheck . session . Callbackable ) { com . ctrip . xpipe . redis . console . healthcheck . session . InfoCommand command = new com . ctrip . xpipe . redis . console . healthcheck . session . InfoCommand ( clientPool , infoSection , scheduled , commandTimeOut ) ; silentCommand ( command ) ; com . ctrip . xpipe . api . command . CommandFuture < java . lang . String > future = command . execute ( ) ; future . addListener ( new com . ctrip . xpipe . api . command . CommandFutureListener < java . lang . String > ( ) { @ com . ctrip . xpipe . redis . console . healthcheck . session . Override public void operationComplete ( com . ctrip . xpipe . api . command . CommandFuture < java . lang . String > commandFuture ) throws com . ctrip . xpipe . redis . console . healthcheck . session . Exception { if ( ! ( commandFuture . isSuccess ( ) ) ) { callback . fail ( commandFuture . cause ( ) ) ; } else { callback . success ( commandFuture . get ( ) ) ; } } } ) ; return future ; }", "answer": "org . junit . Assert . assertNotNull ( orgs )"}
{"focal": "createIterator ( ) { try { return new org . eclipse . tracecompass . internal . tmf . ctf . core . trace . iterator . CtfIterator ( fTrace , this ) ; } catch ( org . eclipse . tracecompass . ctf . core . CTFException e ) { org . eclipse . tracecompass . internal . tmf . ctf . core . Activator . getDefault ( ) . logError ( e . getMessage ( ) , e ) ; } return null ; }", "testMethod": "testCtfIterator_init ( ) { trace . init ( \"test\" ) ; try ( org . eclipse . tracecompass . internal . tmf . ctf . core . trace . iterator . CtfIterator result = ( ( org . eclipse . tracecompass . internal . tmf . ctf . core . trace . iterator . CtfIterator ) ( trace . createIterator ( ) ) ) ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testCtfIterator_init ( ) { trace . init ( \"test\" ) ; try ( org . eclipse . tracecompass . internal . tmf . ctf . core . trace . iterator . CtfIterator result = ( ( org . eclipse . tracecompass . internal . tmf . ctf . core . trace . iterator . CtfIterator ) ( trace . createIterator ( ) ) ) ) { \"<AssertPlaceHolder>\" ; } } createIterator ( ) { try { return new org . eclipse . tracecompass . internal . tmf . ctf . core . trace . iterator . CtfIterator ( fTrace , this ) ; } catch ( org . eclipse . tracecompass . ctf . core . CTFException e ) { org . eclipse . tracecompass . internal . tmf . ctf . core . Activator . getDefault ( ) . logError ( e . getMessage ( ) , e ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getNotesSlide ( org . apache . poi . xslf . usermodel . XSLFSlide ) { org . apache . poi . xslf . usermodel . XSLFNotes notesSlide = slide . getNotes ( ) ; if ( notesSlide == null ) { notesSlide = createNotesSlide ( slide ) ; } return notesSlide ; }", "testMethod": "test60810 ( ) { org . apache . poi . xslf . usermodel . XMLSlideShow ppt = org . apache . poi . xslf . XSLFTestDataSamples . openSampleDocument ( \"60810.pptx\" ) ; for ( org . apache . poi . xslf . usermodel . XSLFSlide slide : ppt . getSlides ( ) ) { org . apache . poi . xslf . usermodel . XSLFNotes notesSlide = ppt . getNotesSlide ( slide ) ; \"<AssertPlaceHolder>\" ; } ppt . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( notesSlide )", "total": "test60810 ( ) { org . apache . poi . xslf . usermodel . XMLSlideShow ppt = org . apache . poi . xslf . XSLFTestDataSamples . openSampleDocument ( \"60810.pptx\" ) ; for ( org . apache . poi . xslf . usermodel . XSLFSlide slide : ppt . getSlides ( ) ) { org . apache . poi . xslf . usermodel . XSLFNotes notesSlide = ppt . getNotesSlide ( slide ) ; \"<AssertPlaceHolder>\" ; } ppt . close ( ) ; } getNotesSlide ( org . apache . poi . xslf . usermodel . XSLFSlide ) { org . apache . poi . xslf . usermodel . XSLFNotes notesSlide = slide . getNotes ( ) ; if ( notesSlide == null ) { notesSlide = createNotesSlide ( slide ) ; } return notesSlide ; }", "answer": "org . junit . Assert . assertNotNull ( notesSlide )"}
{"focal": "jsonFromClasspath ( java . lang . String ) { try { return fromInputStream ( getClass ( ) . getResourceAsStream ( ( ( \"/json/\" + pathToJson ) + \".json\" ) ) ) ; } catch ( java . io . IOException e ) { throw new java . lang . IllegalStateException ( \"Unable<sp>to<sp>load<sp>JSON<sp>from<sp>the<sp>classpath\" , e ) ; } }", "testMethod": "checkLikesObject ( ) { com . restfb . types . Likes likes = createJsonMapper ( ) . toJavaObject ( jsonFromClasspath ( \"v2_5/likes\" ) , com . restfb . types . Likes . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( likes )", "total": "checkLikesObject ( ) { com . restfb . types . Likes likes = createJsonMapper ( ) . toJavaObject ( jsonFromClasspath ( \"v2_5/likes\" ) , com . restfb . types . Likes . class ) ; \"<AssertPlaceHolder>\" ; } jsonFromClasspath ( java . lang . String ) { try { return fromInputStream ( getClass ( ) . getResourceAsStream ( ( ( \"/json/\" + pathToJson ) + \".json\" ) ) ) ; } catch ( java . io . IOException e ) { throw new java . lang . IllegalStateException ( \"Unable<sp>to<sp>load<sp>JSON<sp>from<sp>the<sp>classpath\" , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( likes )"}
{"focal": "getCurrentEvent ( ) { final org . eclipse . tracecompass . ctf . core . trace . CTFStreamInputReader top = super . getPrio ( ) . peek ( ) ; if ( top != null ) { if ( ! ( fCurLocation . equals ( fPreviousLocation ) ) ) { fPreviousLocation = fCurLocation ; fPreviousEvent = fTrace . getEventFactory ( ) . createEvent ( fTrace , checkNotNull ( top . getCurrentEvent ( ) ) , top . getFilename ( ) ) ; } return fPreviousEvent ; } return null ; }", "testMethod": "testGetCurrentEvent ( ) { org . eclipse . tracecompass . tmf . ctf . core . event . CtfTmfEvent result = iterator . getCurrentEvent ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetCurrentEvent ( ) { org . eclipse . tracecompass . tmf . ctf . core . event . CtfTmfEvent result = iterator . getCurrentEvent ( ) ; \"<AssertPlaceHolder>\" ; } getCurrentEvent ( ) { final org . eclipse . tracecompass . ctf . core . trace . CTFStreamInputReader top = super . getPrio ( ) . peek ( ) ; if ( top != null ) { if ( ! ( fCurLocation . equals ( fPreviousLocation ) ) ) { fPreviousLocation = fCurLocation ; fPreviousEvent = fTrace . getEventFactory ( ) . createEvent ( fTrace , checkNotNull ( top . getCurrentEvent ( ) ) , top . getFilename ( ) ) ; } return fPreviousEvent ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "generateQCFailCPCTReport ( java . lang . Double , java . lang . Double , com . hartwig . hmftools . patientreporter . qcfail . QCFailReason ) { com . hartwig . hmftools . patientreporter . SampleReport sampleReport = com . hartwig . hmftools . patientreporter . ImmutableSampleReport . builder ( ) . sampleId ( \"Melanoma\" 0 ) . barcodeTumor ( \"Melanoma\" 1 ) . barcodeReference ( \"FR12123488\" ) . patientTumorLocation ( com . hartwig . hmftools . common . ecrf . projections . ImmutablePatientTumorLocation . of ( \"CPCT02991111\" , \"Skin\" , \"Melanoma\" ) ) . purityShallowSeq ( ( shallowSeqPurity != null ? com . hartwig . hmftools . patientreporter . report . util . PatientReportFormat . formatPercent ( shallowSeqPurity ) : \"Melanoma\" 5 ) ) . pathologyTumorPercentage ( ( pathologyTumorPercentage != null ? com . hartwig . hmftools . patientreporter . report . util . PatientReportFormat . formatPercent ( pathologyTumorPercentage ) : \"Melanoma\" 5 ) ) . tumorArrivalDate ( java . time . LocalDate . parse ( \"Melanoma\" 6 , com . hartwig . hmftools . patientreporter . report . PDFWriterTest . DATE_FORMATTER ) ) . bloodArrivalDate ( java . time . LocalDate . parse ( \"Melanoma\" 3 , com . hartwig . hmftools . patientreporter . report . PDFWriterTest . DATE_FORMATTER ) ) . labProcedures ( \"PREP013V23-QC037V20-SEQ008V25\" ) . addressee ( \"HMF<sp>Testing<sp>Center\" ) . projectName ( \"Melanoma\" 4 ) . requesterName ( \"ContactMe\" ) . requesterEmail ( \"contact@me.com\" ) . submissionId ( \"ABC\" ) . hospitalPatientId ( \"123456\" ) . hospitalPaSampleIdWIDE ( \"Melanoma\" 2 ) . build ( ) ; com . hartwig . hmftools . patientreporter . QCFailReport patientReport = com . hartwig . hmftools . patientreporter . ImmutableQCFailReport . of ( sampleReport , reason , QCFailStudy . CPCT , java . util . Optional . empty ( ) , com . hartwig . hmftools . patientreporter . PatientReporterTestUtil . testBaseReportData ( ) . signaturePath ( ) , com . hartwig . hmftools . patientreporter . PatientReporterTestUtil . testBaseReportData ( ) . logoRVAPath ( ) ) ; return com . hartwig . hmftools . patientreporter . report . PDFWriter . generateQCFailReport ( patientReport ) ; }", "testMethod": "canGenerateLowDNAYieldReport ( ) { net . sf . dynamicreports . jasper . builder . JasperReportBuilder report = com . hartwig . hmftools . patientreporter . report . PDFWriterTest . generateQCFailCPCTReport ( 0.6 , null , QCFailReason . LOW_DNA_YIELD ) ; \"<AssertPlaceHolder>\" ; if ( com . hartwig . hmftools . patientreporter . report . PDFWriterTest . WRITE_TO_PDF ) { report . toPdf ( new java . io . FileOutputStream ( ( ( ( com . hartwig . hmftools . patientreporter . report . PDFWriterTest . REPORT_BASE_DIR ) + ( java . io . File . separator ) ) + \"hmf_low_dna_yield_report.pdf\" ) ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( report )", "total": "canGenerateLowDNAYieldReport ( ) { net . sf . dynamicreports . jasper . builder . JasperReportBuilder report = com . hartwig . hmftools . patientreporter . report . PDFWriterTest . generateQCFailCPCTReport ( 0.6 , null , QCFailReason . LOW_DNA_YIELD ) ; \"<AssertPlaceHolder>\" ; if ( com . hartwig . hmftools . patientreporter . report . PDFWriterTest . WRITE_TO_PDF ) { report . toPdf ( new java . io . FileOutputStream ( ( ( ( com . hartwig . hmftools . patientreporter . report . PDFWriterTest . REPORT_BASE_DIR ) + ( java . io . File . separator ) ) + \"hmf_low_dna_yield_report.pdf\" ) ) ) ; } } generateQCFailCPCTReport ( java . lang . Double , java . lang . Double , com . hartwig . hmftools . patientreporter . qcfail . QCFailReason ) { com . hartwig . hmftools . patientreporter . SampleReport sampleReport = com . hartwig . hmftools . patientreporter . ImmutableSampleReport . builder ( ) . sampleId ( \"Melanoma\" 0 ) . barcodeTumor ( \"Melanoma\" 1 ) . barcodeReference ( \"FR12123488\" ) . patientTumorLocation ( com . hartwig . hmftools . common . ecrf . projections . ImmutablePatientTumorLocation . of ( \"CPCT02991111\" , \"Skin\" , \"Melanoma\" ) ) . purityShallowSeq ( ( shallowSeqPurity != null ? com . hartwig . hmftools . patientreporter . report . util . PatientReportFormat . formatPercent ( shallowSeqPurity ) : \"Melanoma\" 5 ) ) . pathologyTumorPercentage ( ( pathologyTumorPercentage != null ? com . hartwig . hmftools . patientreporter . report . util . PatientReportFormat . formatPercent ( pathologyTumorPercentage ) : \"Melanoma\" 5 ) ) . tumorArrivalDate ( java . time . LocalDate . parse ( \"Melanoma\" 6 , com . hartwig . hmftools . patientreporter . report . PDFWriterTest . DATE_FORMATTER ) ) . bloodArrivalDate ( java . time . LocalDate . parse ( \"Melanoma\" 3 , com . hartwig . hmftools . patientreporter . report . PDFWriterTest . DATE_FORMATTER ) ) . labProcedures ( \"PREP013V23-QC037V20-SEQ008V25\" ) . addressee ( \"HMF<sp>Testing<sp>Center\" ) . projectName ( \"Melanoma\" 4 ) . requesterName ( \"ContactMe\" ) . requesterEmail ( \"contact@me.com\" ) . submissionId ( \"ABC\" ) . hospitalPatientId ( \"123456\" ) . hospitalPaSampleIdWIDE ( \"Melanoma\" 2 ) . build ( ) ; com . hartwig . hmftools . patientreporter . QCFailReport patientReport = com . hartwig . hmftools . patientreporter . ImmutableQCFailReport . of ( sampleReport , reason , QCFailStudy . CPCT , java . util . Optional . empty ( ) , com . hartwig . hmftools . patientreporter . PatientReporterTestUtil . testBaseReportData ( ) . signaturePath ( ) , com . hartwig . hmftools . patientreporter . PatientReporterTestUtil . testBaseReportData ( ) . logoRVAPath ( ) ) ; return com . hartwig . hmftools . patientreporter . report . PDFWriter . generateQCFailReport ( patientReport ) ; }", "answer": "org . junit . Assert . assertNotNull ( report )"}
{"focal": "getUniqueId ( com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . AnalyticsContext ) { if ( ( ( context == null ) || ( ( context . getSystem ( ) ) == null ) ) || ( ( context . getSystem ( ) . getPreferences ( ) ) == null ) ) { android . util . Log . d ( com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . idresolver . SharedPrefsUniqueIdService . TAG , \"Unable<sp>to<sp>generate<sp>unique<sp>id,<sp>context<sp>has<sp>not<sp>been<sp>fully<sp>initialized\" ) ; return com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . idresolver . Id . getEmptyId ( ) ; } com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . idresolver . Id uniqueId = getIdFromPreferences ( context . getSystem ( ) . getPreferences ( ) ) ; if ( uniqueId == ( com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . idresolver . Id . getEmptyId ( ) ) ) { uniqueId = new com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . idresolver . Id ( java . util . UUID . randomUUID ( ) . toString ( ) ) ; storeUniqueId ( context . getSystem ( ) . getPreferences ( ) , uniqueId ) ; } return uniqueId ; }", "testMethod": "getUniqueId_whenIdDoesNotExist_createAndStoreId ( ) { java . lang . String expectedUniqueIdKey = \"UniqueId\" ; when ( mockPreferences . getString ( eq ( expectedUniqueIdKey ) , anyString ( ) ) ) . thenReturn ( null ) ; java . lang . String uniqueId = serviceToTest . getUniqueId ( mockPinpointContext ) ; \"<AssertPlaceHolder>\" ; verify ( mockPreferences , times ( 1 ) ) . putString ( eq ( expectedUniqueIdKey ) , any ( java . lang . String . class ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( uniqueId )", "total": "getUniqueId_whenIdDoesNotExist_createAndStoreId ( ) { java . lang . String expectedUniqueIdKey = \"UniqueId\" ; when ( mockPreferences . getString ( eq ( expectedUniqueIdKey ) , anyString ( ) ) ) . thenReturn ( null ) ; java . lang . String uniqueId = serviceToTest . getUniqueId ( mockPinpointContext ) ; \"<AssertPlaceHolder>\" ; verify ( mockPreferences , times ( 1 ) ) . putString ( eq ( expectedUniqueIdKey ) , any ( java . lang . String . class ) ) ; } getUniqueId ( com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . AnalyticsContext ) { if ( ( ( context == null ) || ( ( context . getSystem ( ) ) == null ) ) || ( ( context . getSystem ( ) . getPreferences ( ) ) == null ) ) { android . util . Log . d ( com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . idresolver . SharedPrefsUniqueIdService . TAG , \"Unable<sp>to<sp>generate<sp>unique<sp>id,<sp>context<sp>has<sp>not<sp>been<sp>fully<sp>initialized\" ) ; return com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . idresolver . Id . getEmptyId ( ) ; } com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . idresolver . Id uniqueId = getIdFromPreferences ( context . getSystem ( ) . getPreferences ( ) ) ; if ( uniqueId == ( com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . idresolver . Id . getEmptyId ( ) ) ) { uniqueId = new com . amazonaws . mobileconnectors . amazonmobileanalytics . internal . core . idresolver . Id ( java . util . UUID . randomUUID ( ) . toString ( ) ) ; storeUniqueId ( context . getSystem ( ) . getPreferences ( ) , uniqueId ) ; } return uniqueId ; }", "answer": "org . junit . Assert . assertNotNull ( uniqueId )"}
{"focal": "getContainerInformation ( java . lang . String ) { java . lang . Integer tenantId = fr . gouv . vitam . common . parameter . ParameterHelper . getTenantParameter ( ) ; if ( fr . gouv . vitam . storage . engine . server . rest . StorageResourceTest . TENANT_ID_E . equals ( tenantId ) ) { throw new fr . gouv . vitam . storage . engine . common . exception . StorageNotFoundException ( \"Not<sp>Found\" ) ; } else if ( fr . gouv . vitam . storage . engine . server . rest . StorageResourceTest . TENANT_ID_A_E . equals ( tenantId ) ) { throw new fr . gouv . vitam . storage . engine . common . exception . StorageTechnicalException ( \"Technical<sp>error\" ) ; } else if ( fr . gouv . vitam . storage . engine . server . rest . StorageResourceTest . TENANT_ID_BAD_REQUEST . equals ( tenantId ) ) { throw new java . lang . IllegalArgumentException ( \"IllegalArgumentException\" ) ; } return null ; }", "testMethod": "getContainerInformationOK ( ) { storage . createContainer ( fr . gouv . vitam . common . storage . cas . container . api . ContentAddressableStorageTestAbstract . CONTAINER_NAME ) ; final fr . gouv . vitam . common . storage . ContainerInformation containerInformation = storage . getContainerInformation ( fr . gouv . vitam . common . storage . cas . container . api . ContentAddressableStorageTestAbstract . CONTAINER_NAME ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( containerInformation )", "total": "getContainerInformationOK ( ) { storage . createContainer ( fr . gouv . vitam . common . storage . cas . container . api . ContentAddressableStorageTestAbstract . CONTAINER_NAME ) ; final fr . gouv . vitam . common . storage . ContainerInformation containerInformation = storage . getContainerInformation ( fr . gouv . vitam . common . storage . cas . container . api . ContentAddressableStorageTestAbstract . CONTAINER_NAME ) ; \"<AssertPlaceHolder>\" ; } getContainerInformation ( java . lang . String ) { java . lang . Integer tenantId = fr . gouv . vitam . common . parameter . ParameterHelper . getTenantParameter ( ) ; if ( fr . gouv . vitam . storage . engine . server . rest . StorageResourceTest . TENANT_ID_E . equals ( tenantId ) ) { throw new fr . gouv . vitam . storage . engine . common . exception . StorageNotFoundException ( \"Not<sp>Found\" ) ; } else if ( fr . gouv . vitam . storage . engine . server . rest . StorageResourceTest . TENANT_ID_A_E . equals ( tenantId ) ) { throw new fr . gouv . vitam . storage . engine . common . exception . StorageTechnicalException ( \"Technical<sp>error\" ) ; } else if ( fr . gouv . vitam . storage . engine . server . rest . StorageResourceTest . TENANT_ID_BAD_REQUEST . equals ( tenantId ) ) { throw new java . lang . IllegalArgumentException ( \"IllegalArgumentException\" ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( containerInformation )"}
{"focal": "getStandardTypes ( ) { return java . util . Arrays . asList ( gov . nysenate . sage . model . district . DistrictType . ASSEMBLY , gov . nysenate . sage . model . district . DistrictType . CONGRESSIONAL , gov . nysenate . sage . model . district . DistrictType . COUNTY , gov . nysenate . sage . model . district . DistrictType . SENATE , gov . nysenate . sage . model . district . DistrictType . SCHOOL , gov . nysenate . sage . model . district . DistrictType . TOWN , gov . nysenate . sage . model . district . DistrictType . ZIP ) ; }", "testMethod": "getDistrictInfoFromPoint ( ) { gov . nysenate . sage . model . district . DistrictInfo dinfo = dsDao . getDistrictInfo ( new gov . nysenate . sage . model . geo . Point ( 42.74117729798573 , ( - 73.66938646729645 ) ) , gov . nysenate . sage . model . district . DistrictType . getStandardTypes ( ) , false , false ) ; long start = new java . util . Date ( ) . getTime ( ) ; gov . nysenate . sage . model . district . DistrictInfo dinfo2 = dsDao . getDistrictInfo ( new gov . nysenate . sage . model . geo . Point ( 42.84117729798573 , ( - 73.66938646729645 ) ) , gov . nysenate . sage . model . district . DistrictType . getStandardTypes ( ) , false , false ) ; long end = new java . util . Date ( ) . getTime ( ) ; logger . debug ( ( \"Elapsed:<sp>\" + ( end - start ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dinfo2 )", "total": "getDistrictInfoFromPoint ( ) { gov . nysenate . sage . model . district . DistrictInfo dinfo = dsDao . getDistrictInfo ( new gov . nysenate . sage . model . geo . Point ( 42.74117729798573 , ( - 73.66938646729645 ) ) , gov . nysenate . sage . model . district . DistrictType . getStandardTypes ( ) , false , false ) ; long start = new java . util . Date ( ) . getTime ( ) ; gov . nysenate . sage . model . district . DistrictInfo dinfo2 = dsDao . getDistrictInfo ( new gov . nysenate . sage . model . geo . Point ( 42.84117729798573 , ( - 73.66938646729645 ) ) , gov . nysenate . sage . model . district . DistrictType . getStandardTypes ( ) , false , false ) ; long end = new java . util . Date ( ) . getTime ( ) ; logger . debug ( ( \"Elapsed:<sp>\" + ( end - start ) ) ) ; \"<AssertPlaceHolder>\" ; } getStandardTypes ( ) { return java . util . Arrays . asList ( gov . nysenate . sage . model . district . DistrictType . ASSEMBLY , gov . nysenate . sage . model . district . DistrictType . CONGRESSIONAL , gov . nysenate . sage . model . district . DistrictType . COUNTY , gov . nysenate . sage . model . district . DistrictType . SENATE , gov . nysenate . sage . model . district . DistrictType . SCHOOL , gov . nysenate . sage . model . district . DistrictType . TOWN , gov . nysenate . sage . model . district . DistrictType . ZIP ) ; }", "answer": "org . junit . Assert . assertNotNull ( dinfo2 )"}
{"focal": "getTextSummary ( ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; if ( ( familyHistory . getFamilyHistory ( ) . getObservation_date ( ) ) != null ) { sb . append ( familyHistory . getFamilyHistory ( ) . getObservation_date ( ) ) ; } if ( ! ( org . oscarehr . e2e . util . EverestUtils . isNullorEmptyorWhitespace ( familyHistory . getFamilyHistory ( ) . getNote ( ) ) ) ) { sb . append ( \"<sp>\" . concat ( familyHistory . getFamilyHistory ( ) . getNote ( ) . replaceAll ( \"\\\\\\\\n\" , \"\\n\" ) ) ) ; } return sb . toString ( ) ; }", "testMethod": "textSummaryNullTest ( ) { java . lang . String text = org . oscarehr . e2e . model . export . body . AlertsModelTest . nullAlertsModel . getTextSummary ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( text )", "total": "textSummaryNullTest ( ) { java . lang . String text = org . oscarehr . e2e . model . export . body . AlertsModelTest . nullAlertsModel . getTextSummary ( ) ; \"<AssertPlaceHolder>\" ; } getTextSummary ( ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; if ( ( familyHistory . getFamilyHistory ( ) . getObservation_date ( ) ) != null ) { sb . append ( familyHistory . getFamilyHistory ( ) . getObservation_date ( ) ) ; } if ( ! ( org . oscarehr . e2e . util . EverestUtils . isNullorEmptyorWhitespace ( familyHistory . getFamilyHistory ( ) . getNote ( ) ) ) ) { sb . append ( \"<sp>\" . concat ( familyHistory . getFamilyHistory ( ) . getNote ( ) . replaceAll ( \"\\\\\\\\n\" , \"\\n\" ) ) ) ; } return sb . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( text )"}
{"focal": "getRoot ( ) { try { java . lang . String root = ( ( java . lang . String ) ( config . getProperty ( \"fs.root\" ) ) ) ; java . io . File file = new java . io . File ( root ) ; if ( ! ( file . exists ( ) ) ) file . mkdirs ( ) ; if ( ! ( file . isDirectory ( ) ) ) throw new java . lang . RuntimeException ( \"Root<sp>must<sp>be<sp>a<sp>directory\" ) ; return file ; } catch ( java . lang . Exception e ) { if ( e instanceof java . lang . RuntimeException ) throw ( ( java . lang . RuntimeException ) ( e ) ) ; throw new java . lang . RuntimeException ( e ) ; } }", "testMethod": "testSection323EmailWithPlus ( ) { org . apache . abdera . i18n . iri . IRI uri = org . apache . abdera . test . parser . stax . FeedValidatorTest . baseURI . resolve ( \"3.2.3/email-with-plus.xml\" ) ; org . apache . abdera . model . Document < org . apache . abdera . model . Feed > doc = parse ( uri ) ; org . apache . abdera . model . Feed feed = doc . getRoot ( ) ; \"<AssertPlaceHolder>\" ; java . util . List < org . apache . abdera . model . Person > contr = feed . getContributors ( ) ; for ( org . apache . abdera . model . Person person : contr ) { new org . apache . abdera . i18n . iri . IRI ( person . getEmail ( ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( feed )", "total": "testSection323EmailWithPlus ( ) { org . apache . abdera . i18n . iri . IRI uri = org . apache . abdera . test . parser . stax . FeedValidatorTest . baseURI . resolve ( \"3.2.3/email-with-plus.xml\" ) ; org . apache . abdera . model . Document < org . apache . abdera . model . Feed > doc = parse ( uri ) ; org . apache . abdera . model . Feed feed = doc . getRoot ( ) ; \"<AssertPlaceHolder>\" ; java . util . List < org . apache . abdera . model . Person > contr = feed . getContributors ( ) ; for ( org . apache . abdera . model . Person person : contr ) { new org . apache . abdera . i18n . iri . IRI ( person . getEmail ( ) ) ; } } getRoot ( ) { try { java . lang . String root = ( ( java . lang . String ) ( config . getProperty ( \"fs.root\" ) ) ) ; java . io . File file = new java . io . File ( root ) ; if ( ! ( file . exists ( ) ) ) file . mkdirs ( ) ; if ( ! ( file . isDirectory ( ) ) ) throw new java . lang . RuntimeException ( \"Root<sp>must<sp>be<sp>a<sp>directory\" ) ; return file ; } catch ( java . lang . Exception e ) { if ( e instanceof java . lang . RuntimeException ) throw ( ( java . lang . RuntimeException ) ( e ) ) ; throw new java . lang . RuntimeException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( feed )"}
{"focal": "get ( java . lang . String ) { return com . jogamp . opengl . GLProfile . get ( com . jogamp . opengl . GLProfile . defaultDevice , profile ) ; }", "testMethod": "test02PBufferOffscreenSupersampling ( ) { final com . jogamp . opengl . GLProfile glp = com . jogamp . opengl . GLProfile . get ( GLProfile . GL2 ) ; \"<AssertPlaceHolder>\" ; final com . jogamp . opengl . GLCapabilities glCap = new com . jogamp . opengl . GLCapabilities ( glp ) ; glCap . setPBuffer ( true ) ; test ( glCap ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( glp )", "total": "test02PBufferOffscreenSupersampling ( ) { final com . jogamp . opengl . GLProfile glp = com . jogamp . opengl . GLProfile . get ( GLProfile . GL2 ) ; \"<AssertPlaceHolder>\" ; final com . jogamp . opengl . GLCapabilities glCap = new com . jogamp . opengl . GLCapabilities ( glp ) ; glCap . setPBuffer ( true ) ; test ( glCap ) ; } get ( java . lang . String ) { return com . jogamp . opengl . GLProfile . get ( com . jogamp . opengl . GLProfile . defaultDevice , profile ) ; }", "answer": "org . junit . Assert . assertNotNull ( glp )"}
{"focal": "getDefault ( ) { if ( ( ( style ) & ( SWT . PUSH ) ) == 0 ) return false ; int bits = org . eclipse . swt . widgets . OS . GetWindowLong ( handle , OS . GWL_STYLE ) ; return ( bits & ( OS . BS_DEFPUSHBUTTON ) ) != 0 ; }", "testMethod": "test_getDefault ( ) { org . eclipse . swt . widgets . Display display = new org . eclipse . swt . widgets . Display ( ) ; try { \"<AssertPlaceHolder>\" ; } finally { display . dispose ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( org . eclipse . swt . widgets . Display . getDefault ( ) )", "total": "test_getDefault ( ) { org . eclipse . swt . widgets . Display display = new org . eclipse . swt . widgets . Display ( ) ; try { \"<AssertPlaceHolder>\" ; } finally { display . dispose ( ) ; } } getDefault ( ) { if ( ( ( style ) & ( SWT . PUSH ) ) == 0 ) return false ; int bits = org . eclipse . swt . widgets . OS . GetWindowLong ( handle , OS . GWL_STYLE ) ; return ( bits & ( OS . BS_DEFPUSHBUTTON ) ) != 0 ; }", "answer": "org . junit . Assert . assertNotNull ( org . eclipse . swt . widgets . Display . getDefault ( ) )"}
{"focal": "getInstance ( javax . enterprise . inject . spi . Bean ) { return ( ( T ) ( manager . getReference ( bean , null , manager . createCreationalContext ( bean ) ) ) ) ; }", "testMethod": "testNonSerializableBaseClassWithSerializableImplWorks ( ) { startContainer ( org . apache . webbeans . test . producer . ProducerPassivationTest . SerializableExtendedClassProducerOwner . class ) ; org . apache . webbeans . test . producer . ProducerPassivationTest . NonSerializableBaseClass instance = getInstance ( org . apache . webbeans . test . producer . ProducerPassivationTest . NonSerializableBaseClass . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance )", "total": "testNonSerializableBaseClassWithSerializableImplWorks ( ) { startContainer ( org . apache . webbeans . test . producer . ProducerPassivationTest . SerializableExtendedClassProducerOwner . class ) ; org . apache . webbeans . test . producer . ProducerPassivationTest . NonSerializableBaseClass instance = getInstance ( org . apache . webbeans . test . producer . ProducerPassivationTest . NonSerializableBaseClass . class ) ; \"<AssertPlaceHolder>\" ; } getInstance ( javax . enterprise . inject . spi . Bean ) { return ( ( T ) ( manager . getReference ( bean , null , manager . createCreationalContext ( bean ) ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( instance )"}
{"focal": "getBeanStatistics ( java . lang . String ) { javax . json . JsonObjectBuilder builder = javax . json . Json . createObjectBuilder ( ) ; javax . json . JsonObject components = collector . fetchApplicationComponents ( applicationName ) ; java . util . Set < Map . Entry < java . lang . String , javax . json . JsonValue > > entrySet = components . entrySet ( ) ; for ( Map . Entry < java . lang . String , javax . json . JsonValue > entry : entrySet ) { java . lang . String beanName = entry . getKey ( ) ; if ( ! ( \"server\" . equals ( beanName ) ) ) { final javax . json . JsonObject beanStatistics = getBeanStatistics ( applicationName , beanName ) ; if ( ( beanName == null ) || ( beanStatistics == null ) ) { LOG . info ( ( ( ( \"!!!NULL<sp>-><sp>Beanname:<sp>\" + beanName ) + \"<sp>-><sp>\" ) + beanStatistics ) ) ; } else { builder . add ( beanName , beanStatistics ) ; } } } return builder . build ( ) ; }", "testMethod": "getBeanStatistics ( ) { javax . json . JsonObject stats = cut . getBeanStatistics ( \"lightfish\" ) ; \"<AssertPlaceHolder>\" ; System . out . println ( ( \"--<sp>getBeanStatistics--<sp>\" + stats ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( stats )", "total": "getBeanStatistics ( ) { javax . json . JsonObject stats = cut . getBeanStatistics ( \"lightfish\" ) ; \"<AssertPlaceHolder>\" ; System . out . println ( ( \"--<sp>getBeanStatistics--<sp>\" + stats ) ) ; } getBeanStatistics ( java . lang . String ) { javax . json . JsonObjectBuilder builder = javax . json . Json . createObjectBuilder ( ) ; javax . json . JsonObject components = collector . fetchApplicationComponents ( applicationName ) ; java . util . Set < Map . Entry < java . lang . String , javax . json . JsonValue > > entrySet = components . entrySet ( ) ; for ( Map . Entry < java . lang . String , javax . json . JsonValue > entry : entrySet ) { java . lang . String beanName = entry . getKey ( ) ; if ( ! ( \"server\" . equals ( beanName ) ) ) { final javax . json . JsonObject beanStatistics = getBeanStatistics ( applicationName , beanName ) ; if ( ( beanName == null ) || ( beanStatistics == null ) ) { LOG . info ( ( ( ( \"!!!NULL<sp>-><sp>Beanname:<sp>\" + beanName ) + \"<sp>-><sp>\" ) + beanStatistics ) ) ; } else { builder . add ( beanName , beanStatistics ) ; } } } return builder . build ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( stats )"}
{"focal": "getCommitTime ( ) { return com . hazelcast . simulator . common . GitInfo . INSTANCE . properties . getProperty ( com . hazelcast . simulator . common . GitInfo . GIT_COMMIT_TIME , com . hazelcast . simulator . common . GitInfo . UNKNOWN ) ; }", "testMethod": "testGetCommitTime ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . hazelcast . simulator . common . GitInfo . getCommitTime ( ) )", "total": "testGetCommitTime ( ) { \"<AssertPlaceHolder>\" ; } getCommitTime ( ) { return com . hazelcast . simulator . common . GitInfo . INSTANCE . properties . getProperty ( com . hazelcast . simulator . common . GitInfo . GIT_COMMIT_TIME , com . hazelcast . simulator . common . GitInfo . UNKNOWN ) ; }", "answer": "org . junit . Assert . assertNotNull ( com . hazelcast . simulator . common . GitInfo . getCommitTime ( ) )"}
{"focal": "getObject ( ) { return getResult ( ) . getObject ( ) ; }", "testMethod": "getAllCampaign ( ) { com . exacttarget . fuelsdk . ETResponse < com . exacttarget . fuelsdk . ETCampaignAsset > response = com . exacttarget . fuelsdk . ETCampaignAssetTest . client . retrieve ( com . exacttarget . fuelsdk . ETCampaignAsset . class ) ; com . exacttarget . fuelsdk . ETResult < com . exacttarget . fuelsdk . ETCampaignAsset > result = response . getResult ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result . getObject ( ) )", "total": "getAllCampaign ( ) { com . exacttarget . fuelsdk . ETResponse < com . exacttarget . fuelsdk . ETCampaignAsset > response = com . exacttarget . fuelsdk . ETCampaignAssetTest . client . retrieve ( com . exacttarget . fuelsdk . ETCampaignAsset . class ) ; com . exacttarget . fuelsdk . ETResult < com . exacttarget . fuelsdk . ETCampaignAsset > result = response . getResult ( ) ; \"<AssertPlaceHolder>\" ; } getObject ( ) { return getResult ( ) . getObject ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( result . getObject ( ) )"}
{"focal": "toString ( ) { return new org . apache . commons . lang . builder . ToStringBuilder ( this ) . append ( \"id\" , getId ( ) ) . append ( \"extid1\" , getExtid1 ( ) ) . append ( \"extid2\" , getExtid2 ( ) ) . append ( \"extid3\" , getExtid3 ( ) ) . append ( \"extid4\" , getExtid4 ( ) ) . append ( \"path\" , getPath ( ) ) . append ( \"timestamp\" , getTimestamp ( ) ) . toString ( ) ; }", "testMethod": "inicializarUnidadesTest ( ) { java . lang . String file = getServicioInicializacionDCO ( ) . getFicheroInicializarUnidadesDCO ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( file . toString ( ) )", "total": "inicializarUnidadesTest ( ) { java . lang . String file = getServicioInicializacionDCO ( ) . getFicheroInicializarUnidadesDCO ( ) ; \"<AssertPlaceHolder>\" ; } toString ( ) { return new org . apache . commons . lang . builder . ToStringBuilder ( this ) . append ( \"id\" , getId ( ) ) . append ( \"extid1\" , getExtid1 ( ) ) . append ( \"extid2\" , getExtid2 ( ) ) . append ( \"extid3\" , getExtid3 ( ) ) . append ( \"extid4\" , getExtid4 ( ) ) . append ( \"path\" , getPath ( ) ) . append ( \"timestamp\" , getTimestamp ( ) ) . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( file . toString ( ) )"}
{"focal": "Setter ( java . lang . Class , java . lang . String ) { com . redhat . application . hystrix . HystrixConfiguration config = com . redhat . application . hystrix . HystrixConfiguration . configs . get ( x ) ; if ( config == null ) { config = new com . redhat . application . hystrix . HystrixConfiguration ( x ) ; com . redhat . application . hystrix . HystrixConfiguration . configs . put ( x , config ) ; } return config . setter ( x , groupName ) ; }", "testMethod": "decrement ( ) { com . netflix . hystrix . HystrixCommand . Setter setter = com . redhat . application . hystrix . HystrixConfiguration . Setter ( com . redhat . application . hystrix . DecrementCommand . class , \"test\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( setter )", "total": "decrement ( ) { com . netflix . hystrix . HystrixCommand . Setter setter = com . redhat . application . hystrix . HystrixConfiguration . Setter ( com . redhat . application . hystrix . DecrementCommand . class , \"test\" ) ; \"<AssertPlaceHolder>\" ; } Setter ( java . lang . Class , java . lang . String ) { com . redhat . application . hystrix . HystrixConfiguration config = com . redhat . application . hystrix . HystrixConfiguration . configs . get ( x ) ; if ( config == null ) { config = new com . redhat . application . hystrix . HystrixConfiguration ( x ) ; com . redhat . application . hystrix . HystrixConfiguration . configs . put ( x , config ) ; } return config . setter ( x , groupName ) ; }", "answer": "org . junit . Assert . assertNotNull ( setter )"}
{"focal": "getFather ( ) { return father ; }", "testMethod": "testDeferLoadAfterResultHandler ( ) { org . apache . ibatis . session . SqlSession sqlSession = org . apache . ibatis . submitted . deferload_common_property . CommonPropertyDeferLoadError . sqlSessionFactory . openSession ( ) ; try { class MyResultHandler implements org . apache . ibatis . session . ResultHandler { java . util . List < org . apache . ibatis . submitted . deferload_common_property . Child > children = new java . util . ArrayList < org . apache . ibatis . submitted . deferload_common_property . Child > ( ) ; public void handleResult ( org . apache . ibatis . session . ResultContext context ) { org . apache . ibatis . submitted . deferload_common_property . Child child = ( ( org . apache . ibatis . submitted . deferload_common_property . Child ) ( context . getResultObject ( ) ) ) ; children . add ( child ) ; } } MyResultHandler myResultHandler = new MyResultHandler ( ) ; sqlSession . select ( \"org.apache.ibatis.submitted.deferload_common_property.ChildMapper.selectAll\" , myResultHandler ) ; for ( org . apache . ibatis . submitted . deferload_common_property . Child child : myResultHandler . children ) { \"<AssertPlaceHolder>\" ; } } finally { sqlSession . close ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( child . getFather ( ) )", "total": "testDeferLoadAfterResultHandler ( ) { org . apache . ibatis . session . SqlSession sqlSession = org . apache . ibatis . submitted . deferload_common_property . CommonPropertyDeferLoadError . sqlSessionFactory . openSession ( ) ; try { class MyResultHandler implements org . apache . ibatis . session . ResultHandler { java . util . List < org . apache . ibatis . submitted . deferload_common_property . Child > children = new java . util . ArrayList < org . apache . ibatis . submitted . deferload_common_property . Child > ( ) ; public void handleResult ( org . apache . ibatis . session . ResultContext context ) { org . apache . ibatis . submitted . deferload_common_property . Child child = ( ( org . apache . ibatis . submitted . deferload_common_property . Child ) ( context . getResultObject ( ) ) ) ; children . add ( child ) ; } } MyResultHandler myResultHandler = new MyResultHandler ( ) ; sqlSession . select ( \"org.apache.ibatis.submitted.deferload_common_property.ChildMapper.selectAll\" , myResultHandler ) ; for ( org . apache . ibatis . submitted . deferload_common_property . Child child : myResultHandler . children ) { \"<AssertPlaceHolder>\" ; } } finally { sqlSession . close ( ) ; } } getFather ( ) { return father ; }", "answer": "org . junit . Assert . assertNotNull ( child . getFather ( ) )"}
{"focal": "findById ( java . lang . String ) { org . apache . commons . lang . Validate . notEmpty ( identifier , \"Domain<sp>identifier<sp>must<sp>be<sp>set.\" ) ; org . linagora . linshare . core . domain . entities . AbstractDomain domain = domainBusinessService . findById ( identifier ) ; return domain ; }", "testMethod": "testUpdateRootDomainFunctionality ( ) { org . linagora . linshare . service . FunctionalityServiceImplTest . logger . info ( LinShareTestConstants . BEGIN_TEST ) ; org . linagora . linshare . core . domain . entities . AbstractDomain domain = abstractDomainRepository . findById ( LoadingServiceTestDatas . rootDomainName ) ; \"<AssertPlaceHolder>\" ; org . linagora . linshare . core . domain . entities . StringValueFunctionality func = ( ( org . linagora . linshare . core . domain . entities . StringValueFunctionality ) ( functionalityService . find ( actor , domain . getUuid ( ) , LoadingServiceTestDatas . TEST_TIME_STAMPING ) ) ) ; func . setValue ( \"plop\" ) ; func . getActivationPolicy ( ) . setPolicy ( Policies . FORBIDDEN ) ; functionalityService . update ( actor , domain . getUuid ( ) , func ) ; org . linagora . linshare . service . FunctionalityServiceImplTest . logger . debug ( LinShareTestConstants . END_TEST ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( domain )", "total": "testUpdateRootDomainFunctionality ( ) { org . linagora . linshare . service . FunctionalityServiceImplTest . logger . info ( LinShareTestConstants . BEGIN_TEST ) ; org . linagora . linshare . core . domain . entities . AbstractDomain domain = abstractDomainRepository . findById ( LoadingServiceTestDatas . rootDomainName ) ; \"<AssertPlaceHolder>\" ; org . linagora . linshare . core . domain . entities . StringValueFunctionality func = ( ( org . linagora . linshare . core . domain . entities . StringValueFunctionality ) ( functionalityService . find ( actor , domain . getUuid ( ) , LoadingServiceTestDatas . TEST_TIME_STAMPING ) ) ) ; func . setValue ( \"plop\" ) ; func . getActivationPolicy ( ) . setPolicy ( Policies . FORBIDDEN ) ; functionalityService . update ( actor , domain . getUuid ( ) , func ) ; org . linagora . linshare . service . FunctionalityServiceImplTest . logger . debug ( LinShareTestConstants . END_TEST ) ; } findById ( java . lang . String ) { org . apache . commons . lang . Validate . notEmpty ( identifier , \"Domain<sp>identifier<sp>must<sp>be<sp>set.\" ) ; org . linagora . linshare . core . domain . entities . AbstractDomain domain = domainBusinessService . findById ( identifier ) ; return domain ; }", "answer": "org . junit . Assert . assertNotNull ( domain )"}
{"focal": "get ( java . lang . String ) { return new org . opennms . netmgt . snmp . SnmpObjId ( oid ) ; }", "testMethod": "testCreateWalkerWithAgentConfig ( ) { org . opennms . netmgt . snmp . SnmpAgentConfig agentConfig = getAgentConfig ( ) ; org . opennms . netmgt . snmp . SnmpWalker walker = org . opennms . netmgt . snmp . SnmpUtils . createWalker ( agentConfig , \"Test\" , new org . opennms . netmgt . snmp . ColumnTracker ( org . opennms . netmgt . snmp . SnmpObjId . get ( \"1.2.3.4\" ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( walker )", "total": "testCreateWalkerWithAgentConfig ( ) { org . opennms . netmgt . snmp . SnmpAgentConfig agentConfig = getAgentConfig ( ) ; org . opennms . netmgt . snmp . SnmpWalker walker = org . opennms . netmgt . snmp . SnmpUtils . createWalker ( agentConfig , \"Test\" , new org . opennms . netmgt . snmp . ColumnTracker ( org . opennms . netmgt . snmp . SnmpObjId . get ( \"1.2.3.4\" ) ) ) ; \"<AssertPlaceHolder>\" ; } get ( java . lang . String ) { return new org . opennms . netmgt . snmp . SnmpObjId ( oid ) ; }", "answer": "org . junit . Assert . assertNotNull ( walker )"}
{"focal": "getInstance ( com . hazelcast . core . IMap ) { return com . hazelcast . simulator . worker . loadsupport . StreamerFactory . getInstance ( map , com . hazelcast . simulator . worker . loadsupport . Streamer . DEFAULT_CONCURRENCY_LEVEL ) ; }", "testMethod": "testGetInstance_withMap ( ) { com . hazelcast . simulator . worker . loadsupport . Streamer streamer = com . hazelcast . simulator . worker . loadsupport . StreamerFactory . getInstance ( iMap ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( streamer )", "total": "testGetInstance_withMap ( ) { com . hazelcast . simulator . worker . loadsupport . Streamer streamer = com . hazelcast . simulator . worker . loadsupport . StreamerFactory . getInstance ( iMap ) ; \"<AssertPlaceHolder>\" ; } getInstance ( com . hazelcast . core . IMap ) { return com . hazelcast . simulator . worker . loadsupport . StreamerFactory . getInstance ( map , com . hazelcast . simulator . worker . loadsupport . Streamer . DEFAULT_CONCURRENCY_LEVEL ) ; }", "answer": "org . junit . Assert . assertNotNull ( streamer )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testVer ( ) { log . debug ( \"Debiera<sp>mostrar<sp>informeMensuals\" ) ; mx . edu . um . mateo . general . model . Usuario colportor = obtieneColportor ( ) ; mx . edu . um . mateo . colportor . model . InformeMensual informe = new mx . edu . um . mateo . colportor . model . InformeMensual ( ( ( mx . edu . um . mateo . colportor . model . Colportor ) ( colportor ) ) , new java . util . Date ( ) , mx . edu . um . mateo . general . utils . Constantes . STATUS_ACTIVO , colportor , new java . util . Date ( ) ) ; currentSession ( ) . save ( informe ) ; \"<AssertPlaceHolder>\" ; this . authenticate ( colportor , colportor . getPassword ( ) , new java . util . ArrayList < org . springframework . security . core . GrantedAuthority > ( colportor . getRoles ( ) ) ) ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . INFORMEMENSUAL_PATH_VER ) + \"/\" ) + ( informe . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . INFORMEMENSUAL_PATH_VER ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . INFORMEMENSUAL ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( informe . getId ( ) )", "total": "testVer ( ) { log . debug ( \"Debiera<sp>mostrar<sp>informeMensuals\" ) ; mx . edu . um . mateo . general . model . Usuario colportor = obtieneColportor ( ) ; mx . edu . um . mateo . colportor . model . InformeMensual informe = new mx . edu . um . mateo . colportor . model . InformeMensual ( ( ( mx . edu . um . mateo . colportor . model . Colportor ) ( colportor ) ) , new java . util . Date ( ) , mx . edu . um . mateo . general . utils . Constantes . STATUS_ACTIVO , colportor , new java . util . Date ( ) ) ; currentSession ( ) . save ( informe ) ; \"<AssertPlaceHolder>\" ; this . authenticate ( colportor , colportor . getPassword ( ) , new java . util . ArrayList < org . springframework . security . core . GrantedAuthority > ( colportor . getRoles ( ) ) ) ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . INFORMEMENSUAL_PATH_VER ) + \"/\" ) + ( informe . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . INFORMEMENSUAL_PATH_VER ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . INFORMEMENSUAL ) ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( informe . getId ( ) )"}
{"focal": "getUserId ( ) { if ( ( com . liferay . portal . kernel . test . util . TestPropsValues . _userId ) == 0 ) { com . liferay . portal . kernel . model . User user = com . liferay . portal . kernel . test . util . TestPropsValues . getUser ( ) ; if ( user != null ) { com . liferay . portal . kernel . test . util . TestPropsValues . _userId = user . getUserId ( ) ; } } return com . liferay . portal . kernel . test . util . TestPropsValues . _userId ; }", "testMethod": "testUpdateQuestion ( ) { java . util . Map < java . util . Locale , java . lang . String > titleMap = createLocalizedMap ( com . liferay . portal . kernel . test . util . RandomTestUtil . randomString ( ) ) ; java . util . Map < java . util . Locale , java . lang . String > descriptionMap = createLocalizedMap ( com . liferay . portal . kernel . test . util . RandomTestUtil . randomString ( ) ) ; int expirationDateHour = 0 ; int expirationDateMinute = 0 ; int expirationDateMonth = 0 ; int expirationDateDay = 0 ; int expirationDateYear = 0 ; boolean neverExpire = true ; java . util . List < com . liferay . polls . model . PollsChoice > pollChoices = new java . util . ArrayList ( ) ; pollChoices . add ( createPollsChoice ( \"A\" ) ) ; pollChoices . add ( createPollsChoice ( \"B\" ) ) ; com . liferay . portal . kernel . service . ServiceContext serviceContext = new com . liferay . portal . kernel . service . ServiceContext ( ) ; com . liferay . polls . model . PollsQuestion pollsQuestion = com . liferay . polls . service . PollsQuestionLocalServiceUtil . addQuestion ( com . liferay . portal . kernel . test . util . TestPropsValues . getUserId ( ) , titleMap , descriptionMap , expirationDateMonth , expirationDateDay , expirationDateYear , expirationDateHour , expirationDateMinute , neverExpire , pollChoices , serviceContext ) ; \"<AssertPlaceHolder>\" ; pollChoices = new java . util . ArrayList ( ) ; pollChoices . add ( createPollsChoice ( \"B\" ) ) ; pollChoices . add ( createPollsChoice ( \"B\" ) ) ; com . liferay . polls . service . PollsQuestionLocalServiceUtil . updateQuestion ( com . liferay . portal . kernel . test . util . TestPropsValues . getUserId ( ) , pollsQuestion . getQuestionId ( ) , titleMap , descriptionMap , expirationDateMonth , expirationDateDay , expirationDateYear , expirationDateHour , expirationDateMinute , neverExpire , pollChoices , serviceContext ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( pollsQuestion )", "total": "testUpdateQuestion ( ) { java . util . Map < java . util . Locale , java . lang . String > titleMap = createLocalizedMap ( com . liferay . portal . kernel . test . util . RandomTestUtil . randomString ( ) ) ; java . util . Map < java . util . Locale , java . lang . String > descriptionMap = createLocalizedMap ( com . liferay . portal . kernel . test . util . RandomTestUtil . randomString ( ) ) ; int expirationDateHour = 0 ; int expirationDateMinute = 0 ; int expirationDateMonth = 0 ; int expirationDateDay = 0 ; int expirationDateYear = 0 ; boolean neverExpire = true ; java . util . List < com . liferay . polls . model . PollsChoice > pollChoices = new java . util . ArrayList ( ) ; pollChoices . add ( createPollsChoice ( \"A\" ) ) ; pollChoices . add ( createPollsChoice ( \"B\" ) ) ; com . liferay . portal . kernel . service . ServiceContext serviceContext = new com . liferay . portal . kernel . service . ServiceContext ( ) ; com . liferay . polls . model . PollsQuestion pollsQuestion = com . liferay . polls . service . PollsQuestionLocalServiceUtil . addQuestion ( com . liferay . portal . kernel . test . util . TestPropsValues . getUserId ( ) , titleMap , descriptionMap , expirationDateMonth , expirationDateDay , expirationDateYear , expirationDateHour , expirationDateMinute , neverExpire , pollChoices , serviceContext ) ; \"<AssertPlaceHolder>\" ; pollChoices = new java . util . ArrayList ( ) ; pollChoices . add ( createPollsChoice ( \"B\" ) ) ; pollChoices . add ( createPollsChoice ( \"B\" ) ) ; com . liferay . polls . service . PollsQuestionLocalServiceUtil . updateQuestion ( com . liferay . portal . kernel . test . util . TestPropsValues . getUserId ( ) , pollsQuestion . getQuestionId ( ) , titleMap , descriptionMap , expirationDateMonth , expirationDateDay , expirationDateYear , expirationDateHour , expirationDateMinute , neverExpire , pollChoices , serviceContext ) ; } getUserId ( ) { if ( ( com . liferay . portal . kernel . test . util . TestPropsValues . _userId ) == 0 ) { com . liferay . portal . kernel . model . User user = com . liferay . portal . kernel . test . util . TestPropsValues . getUser ( ) ; if ( user != null ) { com . liferay . portal . kernel . test . util . TestPropsValues . _userId = user . getUserId ( ) ; } } return com . liferay . portal . kernel . test . util . TestPropsValues . _userId ; }", "answer": "org . junit . Assert . assertNotNull ( pollsQuestion )"}
{"focal": "insertar ( edu . upc . galaxy . entity . Cita ) { edu . upc . galaxy . service . impl . CitasServiceImpl . log . info ( \"Creando<sp>Cita\" ) ; return citaDao . insertar ( Cita ) ; }", "testMethod": "testInsertarUsuario ( ) { edu . upc . galaxy . entity . Usuario usuario = new edu . upc . galaxy . entity . Usuario ( \"admin\" , \"admin@admin.com\" , \"admin\" ) ; java . lang . Integer id = usuarioDao . insertar ( usuario ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( id )", "total": "testInsertarUsuario ( ) { edu . upc . galaxy . entity . Usuario usuario = new edu . upc . galaxy . entity . Usuario ( \"admin\" , \"admin@admin.com\" , \"admin\" ) ; java . lang . Integer id = usuarioDao . insertar ( usuario ) ; \"<AssertPlaceHolder>\" ; } insertar ( edu . upc . galaxy . entity . Cita ) { edu . upc . galaxy . service . impl . CitasServiceImpl . log . info ( \"Creando<sp>Cita\" ) ; return citaDao . insertar ( Cita ) ; }", "answer": "org . junit . Assert . assertNotNull ( id )"}
{"focal": "getPcrManifest ( ) { try { if ( vmware . isModuleAttestationSupportedByVcenter ( vCenterVersion ) ) { com . vmware . vim25 . HostTpmAttestationReport report = vmware . getAttestationReport ( hostMOR ) ; log . debug ( \"Retrieved<sp>HostTpmAttestationReport:<sp>{}\" , report ) ; if ( vmware . isModuleAttestationSupportedByESX ( esxVersion ) ) { pcrManifest = com . intel . mtwilson . agent . vmware . VMWare51Esxi51 . createPcrManifest ( report ) ; } else { } } else if ( vCenterVersion . contains ( \"5.0\" ) ) { com . vmware . vim25 . HostRuntimeInfo runtimeInfo = ( ( com . vmware . vim25 . HostRuntimeInfo ) ( vmware . getMEProperty ( hostMOR . type , hostname , \"runtime\" ) ) ) ; if ( runtimeInfo == null ) { throw new java . lang . IllegalArgumentException ( \"runtime\" 3 ) ; } java . util . List < com . vmware . vim25 . HostTpmDigestInfo > htdis = java . util . Arrays . asList ( runtimeInfo . getTpmPcrValues ( ) ) ; log . debug ( \"Retrieved<sp>HostTpmDigestInfo\" ) ; pcrManifest = com . intel . mtwilson . agent . vmware . VMWare50Esxi50 . createPcrManifest ( htdis ) ; } else { throw new java . lang . UnsupportedOperationException ( \"Not<sp>supported<sp>yet.\" ) ; } } catch ( java . lang . Exception e ) { log . warn ( ( \"runtime\" 1 + ( e . toString ( ) ) ) , e ) ; boolean isTpmPresent = false ; try { if ( isTpmPresent ( ) ) { isTpmPresent = true ; } } catch ( java . lang . Exception e2 ) { throw new java . io . IOException ( ( ( \"runtime\" 0 + ( hostname ) ) + \":<sp>cannot<sp>determine<sp>if<sp>TPM<sp>is<sp>present\" ) , e2 ) ; } throw new java . io . IOException ( ( ( ( ( ( \"runtime\" 0 + ( hostname ) ) + \"runtime\" 2 ) + ( isTpmPresent ? \"TPM<sp>is<sp>present\" : \"TPM<sp>is<sp>not<sp>present\" ) ) + \"runtime\" 2 ) + ( e . toString ( ) ) ) , e ) ; } return pcrManifest ; }", "testMethod": "testHostAgentPcrManifest ( ) { test . policy . TblHosts host = initNewHost ( ) ; com . intel . mtwilson . agent . HostAgentFactory factory = new com . intel . mtwilson . agent . HostAgentFactory ( ) ; com . intel . mtwilson . agent . HostAgent agent = factory . getHostAgent ( host ) ; test . policy . PcrManifest pcrManifest = agent . getPcrManifest ( ) ; \"<AssertPlaceHolder>\" ; for ( int i = 0 ; i < 24 ; i ++ ) { test . policy . Pcr pcr = pcrManifest . getPcr ( i ) ; log . debug ( \"Pcr<sp>{}<sp>=<sp>{}\" , i , pcr . getValue ( ) . toString ( ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( pcrManifest )", "total": "testHostAgentPcrManifest ( ) { test . policy . TblHosts host = initNewHost ( ) ; com . intel . mtwilson . agent . HostAgentFactory factory = new com . intel . mtwilson . agent . HostAgentFactory ( ) ; com . intel . mtwilson . agent . HostAgent agent = factory . getHostAgent ( host ) ; test . policy . PcrManifest pcrManifest = agent . getPcrManifest ( ) ; \"<AssertPlaceHolder>\" ; for ( int i = 0 ; i < 24 ; i ++ ) { test . policy . Pcr pcr = pcrManifest . getPcr ( i ) ; log . debug ( \"Pcr<sp>{}<sp>=<sp>{}\" , i , pcr . getValue ( ) . toString ( ) ) ; } } getPcrManifest ( ) { try { if ( vmware . isModuleAttestationSupportedByVcenter ( vCenterVersion ) ) { com . vmware . vim25 . HostTpmAttestationReport report = vmware . getAttestationReport ( hostMOR ) ; log . debug ( \"Retrieved<sp>HostTpmAttestationReport:<sp>{}\" , report ) ; if ( vmware . isModuleAttestationSupportedByESX ( esxVersion ) ) { pcrManifest = com . intel . mtwilson . agent . vmware . VMWare51Esxi51 . createPcrManifest ( report ) ; } else { } } else if ( vCenterVersion . contains ( \"5.0\" ) ) { com . vmware . vim25 . HostRuntimeInfo runtimeInfo = ( ( com . vmware . vim25 . HostRuntimeInfo ) ( vmware . getMEProperty ( hostMOR . type , hostname , \"runtime\" ) ) ) ; if ( runtimeInfo == null ) { throw new java . lang . IllegalArgumentException ( \"runtime\" 3 ) ; } java . util . List < com . vmware . vim25 . HostTpmDigestInfo > htdis = java . util . Arrays . asList ( runtimeInfo . getTpmPcrValues ( ) ) ; log . debug ( \"Retrieved<sp>HostTpmDigestInfo\" ) ; pcrManifest = com . intel . mtwilson . agent . vmware . VMWare50Esxi50 . createPcrManifest ( htdis ) ; } else { throw new java . lang . UnsupportedOperationException ( \"Not<sp>supported<sp>yet.\" ) ; } } catch ( java . lang . Exception e ) { log . warn ( ( \"runtime\" 1 + ( e . toString ( ) ) ) , e ) ; boolean isTpmPresent = false ; try { if ( isTpmPresent ( ) ) { isTpmPresent = true ; } } catch ( java . lang . Exception e2 ) { throw new java . io . IOException ( ( ( \"runtime\" 0 + ( hostname ) ) + \":<sp>cannot<sp>determine<sp>if<sp>TPM<sp>is<sp>present\" ) , e2 ) ; } throw new java . io . IOException ( ( ( ( ( ( \"runtime\" 0 + ( hostname ) ) + \"runtime\" 2 ) + ( isTpmPresent ? \"TPM<sp>is<sp>present\" : \"TPM<sp>is<sp>not<sp>present\" ) ) + \"runtime\" 2 ) + ( e . toString ( ) ) ) , e ) ; } return pcrManifest ; }", "answer": "org . junit . Assert . assertNotNull ( pcrManifest )"}
{"focal": "retrieveApiKey ( ) { return getJSONEntity ( getAuthEndpoint ( ) , \"/secretKey\" , org . sagebionetworks . repo . model . auth . SecretKey . class ) . getSecretKey ( ) ; }", "testMethod": "testRetrieveApiKey ( ) { java . lang . String apiKey = org . sagebionetworks . IT500SynapseJavaClient . synapseOne . retrieveApiKey ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( apiKey )", "total": "testRetrieveApiKey ( ) { java . lang . String apiKey = org . sagebionetworks . IT500SynapseJavaClient . synapseOne . retrieveApiKey ( ) ; \"<AssertPlaceHolder>\" ; } retrieveApiKey ( ) { return getJSONEntity ( getAuthEndpoint ( ) , \"/secretKey\" , org . sagebionetworks . repo . model . auth . SecretKey . class ) . getSecretKey ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( apiKey )"}
{"focal": "currentSession ( ) { return sessionFactory . getCurrentSession ( ) ; }", "testMethod": "testEdita ( ) { log . debug ( \"Test<sp>'edita'\" ) ; mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; mx . edu . um . mateo . inscripciones . model . AFETipoDescuento afeTipoDescuento ; mx . edu . um . mateo . general . model . Organizacion organizacion = usuario . getEmpresa ( ) . getOrganizacion ( ) ; afeTipoDescuento = new mx . edu . um . mateo . inscripciones . model . AFETipoDescuento ( \"tipoDescuento\" , \"A\" , organizacion ) ; currentSession ( ) . save ( afeTipoDescuento ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . PATH_TIPODESCUENTO_EDITA ) + \"/\" ) + ( afeTipoDescuento . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_TIPODESCUENTO_EDITA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_TIPODESCUENTO ) ) . andExpect ( model ( ) . attribute ( Constantes . ADDATTRIBUTE_TIPODESCUENTO , afeTipoDescuento ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( afeTipoDescuento )", "total": "testEdita ( ) { log . debug ( \"Test<sp>'edita'\" ) ; mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; mx . edu . um . mateo . inscripciones . model . AFETipoDescuento afeTipoDescuento ; mx . edu . um . mateo . general . model . Organizacion organizacion = usuario . getEmpresa ( ) . getOrganizacion ( ) ; afeTipoDescuento = new mx . edu . um . mateo . inscripciones . model . AFETipoDescuento ( \"tipoDescuento\" , \"A\" , organizacion ) ; currentSession ( ) . save ( afeTipoDescuento ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . PATH_TIPODESCUENTO_EDITA ) + \"/\" ) + ( afeTipoDescuento . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_TIPODESCUENTO_EDITA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_TIPODESCUENTO ) ) . andExpect ( model ( ) . attribute ( Constantes . ADDATTRIBUTE_TIPODESCUENTO , afeTipoDescuento ) ) ; } currentSession ( ) { return sessionFactory . getCurrentSession ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( afeTipoDescuento )"}
{"focal": "startProcessInstanceByKey ( java . lang . String ) { return createProcessInstanceByKey ( processDefinitionKey ) . execute ( ) ; }", "testMethod": "testPaAnnotatedEjb ( ) { org . camunda . bpm . engine . runtime . ProcessInstance processInstance = runtimeService . startProcessInstanceByKey ( \"process1\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( processInstance )", "total": "testPaAnnotatedEjb ( ) { org . camunda . bpm . engine . runtime . ProcessInstance processInstance = runtimeService . startProcessInstanceByKey ( \"process1\" ) ; \"<AssertPlaceHolder>\" ; } startProcessInstanceByKey ( java . lang . String ) { return createProcessInstanceByKey ( processDefinitionKey ) . execute ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( processInstance )"}
{"focal": "getRules ( ) { return rules ; }", "testMethod": "getRules_DoesNotReturnNull ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( this . model . getRules ( ) )", "total": "getRules_DoesNotReturnNull ( ) { \"<AssertPlaceHolder>\" ; } getRules ( ) { return rules ; }", "answer": "org . junit . Assert . assertNotNull ( this . model . getRules ( ) )"}
{"focal": "createSettingsPanel ( ) { return new kg . apc . jmeter . vizualizers . JSettingsPanel ( this , ( ( ( ( ( ( ( JSettingsPanel . TIMELINE_OPTION ) | ( JSettingsPanel . GRADIENT_OPTION ) ) | ( JSettingsPanel . FINAL_ZEROING_OPTION ) ) | ( JSettingsPanel . LIMIT_POINT_OPTION ) ) | ( JSettingsPanel . MAXY_OPTION ) ) | ( JSettingsPanel . RELATIVE_TIME_OPTION ) ) | ( JSettingsPanel . MARKERS_OPTION ) ) ) ; }", "testMethod": "testCreateSettingsPanel ( ) { System . out . println ( \"createSettingsPanel\" ) ; kg . apc . jmeter . vizualizers . DbMonGui instance = new kg . apc . jmeter . vizualizers . DbMonGui ( ) ; kg . apc . jmeter . vizualizers . JSettingsPanel result = instance . createSettingsPanel ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testCreateSettingsPanel ( ) { System . out . println ( \"createSettingsPanel\" ) ; kg . apc . jmeter . vizualizers . DbMonGui instance = new kg . apc . jmeter . vizualizers . DbMonGui ( ) ; kg . apc . jmeter . vizualizers . JSettingsPanel result = instance . createSettingsPanel ( ) ; \"<AssertPlaceHolder>\" ; } createSettingsPanel ( ) { return new kg . apc . jmeter . vizualizers . JSettingsPanel ( this , ( ( ( ( ( ( ( JSettingsPanel . TIMELINE_OPTION ) | ( JSettingsPanel . GRADIENT_OPTION ) ) | ( JSettingsPanel . FINAL_ZEROING_OPTION ) ) | ( JSettingsPanel . LIMIT_POINT_OPTION ) ) | ( JSettingsPanel . MAXY_OPTION ) ) | ( JSettingsPanel . RELATIVE_TIME_OPTION ) ) | ( JSettingsPanel . MARKERS_OPTION ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "newMappingStrategy ( ) { return new org . dcache . gplazma . strategies . DefaultMappingStrategy ( ) ; }", "testMethod": "testRequiredConfig ( ) { org . dcache . gplazma . strategies . MappingStrategy strategy = strategyFactory . newMappingStrategy ( ) ; \"<AssertPlaceHolder>\" ; strategy . setPlugins ( successRequiredPlugins ) ; java . util . Set < java . security . Principal > principals = com . google . common . collect . Sets . newHashSet ( ) ; strategy . map ( org . dcache . gplazma . strategies . MappingStrategyMapTests . IGNORING_LOGIN_MONITOR , principals ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( strategy )", "total": "testRequiredConfig ( ) { org . dcache . gplazma . strategies . MappingStrategy strategy = strategyFactory . newMappingStrategy ( ) ; \"<AssertPlaceHolder>\" ; strategy . setPlugins ( successRequiredPlugins ) ; java . util . Set < java . security . Principal > principals = com . google . common . collect . Sets . newHashSet ( ) ; strategy . map ( org . dcache . gplazma . strategies . MappingStrategyMapTests . IGNORING_LOGIN_MONITOR , principals ) ; } newMappingStrategy ( ) { return new org . dcache . gplazma . strategies . DefaultMappingStrategy ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( strategy )"}
{"focal": "getInputStream ( ) { return inputStream ; }", "testMethod": "testCrash_119_expand_dim ( ) { org . nd4j . linalg . factory . Nd4j . create ( 1 ) ; lombok . val tg = org . nd4j . imports . graphmapper . tf . TFGraphMapper . getInstance ( ) . importGraph ( new org . nd4j . linalg . io . ClassPathResource ( \"tf_graphs/examples/expand_dim/frozen_model.pb\" ) . getInputStream ( ) ) ; \"<AssertPlaceHolder>\" ; lombok . val input0 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0.0975336 , 0.76124972 , 0.24693797 , 0.13813169 , 0.33144656 , 0.08299957 , 0.67197708 , 0.8065938 , 0.98274191 , 0.63566073 , 0.21592326 , 0.54902743 } , new int [ ] { 3 , 4 } ) ; tg . associateArrayWithVariable ( input0 , tg . getVariable ( \"input_0\" ) ) ; tg . asFlatFile ( new java . io . File ( \"../../../libnd4j/tests_cpu/resources/expand_dim.fb\" ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( tg )", "total": "testCrash_119_expand_dim ( ) { org . nd4j . linalg . factory . Nd4j . create ( 1 ) ; lombok . val tg = org . nd4j . imports . graphmapper . tf . TFGraphMapper . getInstance ( ) . importGraph ( new org . nd4j . linalg . io . ClassPathResource ( \"tf_graphs/examples/expand_dim/frozen_model.pb\" ) . getInputStream ( ) ) ; \"<AssertPlaceHolder>\" ; lombok . val input0 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0.0975336 , 0.76124972 , 0.24693797 , 0.13813169 , 0.33144656 , 0.08299957 , 0.67197708 , 0.8065938 , 0.98274191 , 0.63566073 , 0.21592326 , 0.54902743 } , new int [ ] { 3 , 4 } ) ; tg . associateArrayWithVariable ( input0 , tg . getVariable ( \"input_0\" ) ) ; tg . asFlatFile ( new java . io . File ( \"../../../libnd4j/tests_cpu/resources/expand_dim.fb\" ) ) ; } getInputStream ( ) { return inputStream ; }", "answer": "org . junit . Assert . assertNotNull ( tg )"}
{"focal": "build ( ) { return org . opendaylight . yangtools . yang . data . api . FixedYangInstanceIdentifier . create ( path , hash . build ( ) ) ; }", "testMethod": "revNowhereTest ( ) { org . opendaylight . yangtools . yang . parser . stmt . reactor . ReactorDeclaredModel result = org . opendaylight . yangtools . yang . parser . rfc7950 . reactor . RFC7950Reactors . defaultReactor ( ) . newBuild ( ) . addSources ( org . opendaylight . yangtools . yang . stmt . IncludeRevisionsTest . NOWHERE_REV , org . opendaylight . yangtools . yang . stmt . IncludeRevisionsTest . NOWHERE_ROOT ) . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "revNowhereTest ( ) { org . opendaylight . yangtools . yang . parser . stmt . reactor . ReactorDeclaredModel result = org . opendaylight . yangtools . yang . parser . rfc7950 . reactor . RFC7950Reactors . defaultReactor ( ) . newBuild ( ) . addSources ( org . opendaylight . yangtools . yang . stmt . IncludeRevisionsTest . NOWHERE_REV , org . opendaylight . yangtools . yang . stmt . IncludeRevisionsTest . NOWHERE_ROOT ) . build ( ) ; \"<AssertPlaceHolder>\" ; } build ( ) { return org . opendaylight . yangtools . yang . data . api . FixedYangInstanceIdentifier . create ( path , hash . build ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getLocale ( ) { return locale ; }", "testMethod": "testApiMisuse10 ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( t . getLocale ( ) )", "total": "testApiMisuse10 ( ) { \"<AssertPlaceHolder>\" ; } getLocale ( ) { return locale ; }", "answer": "org . junit . Assert . assertNotNull ( t . getLocale ( ) )"}
{"focal": "getBridge ( org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . ovsdb . rev150105 . ovsdb . node . attributes . ConnectionInfo ) { return getBridge ( connectionInfo , SouthboundITConstants . BRIDGE_NAME ) ; }", "testMethod": "testAddDeleteBridge ( ) { org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . ovsdb . rev150105 . ovsdb . node . attributes . ConnectionInfo connectionInfo = org . opendaylight . ovsdb . southbound . it . SouthboundIT . getConnectionInfo ( org . opendaylight . ovsdb . southbound . it . SouthboundIT . addressStr , org . opendaylight . ovsdb . southbound . it . SouthboundIT . portNumber ) ; try ( org . opendaylight . ovsdb . southbound . it . SouthboundIT . TestBridge testBridge = new org . opendaylight . ovsdb . southbound . it . SouthboundIT . TestBridge ( connectionInfo , SouthboundITConstants . BRIDGE_NAME ) ) { org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . ovsdb . rev150105 . OvsdbBridgeAugmentation bridge = getBridge ( connectionInfo ) ; \"<AssertPlaceHolder>\" ; org . opendaylight . ovsdb . southbound . it . SouthboundIT . LOG . info ( \"bridge:<sp>{}\" , bridge ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( bridge )", "total": "testAddDeleteBridge ( ) { org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . ovsdb . rev150105 . ovsdb . node . attributes . ConnectionInfo connectionInfo = org . opendaylight . ovsdb . southbound . it . SouthboundIT . getConnectionInfo ( org . opendaylight . ovsdb . southbound . it . SouthboundIT . addressStr , org . opendaylight . ovsdb . southbound . it . SouthboundIT . portNumber ) ; try ( org . opendaylight . ovsdb . southbound . it . SouthboundIT . TestBridge testBridge = new org . opendaylight . ovsdb . southbound . it . SouthboundIT . TestBridge ( connectionInfo , SouthboundITConstants . BRIDGE_NAME ) ) { org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . ovsdb . rev150105 . OvsdbBridgeAugmentation bridge = getBridge ( connectionInfo ) ; \"<AssertPlaceHolder>\" ; org . opendaylight . ovsdb . southbound . it . SouthboundIT . LOG . info ( \"bridge:<sp>{}\" , bridge ) ; } } getBridge ( org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . ovsdb . rev150105 . ovsdb . node . attributes . ConnectionInfo ) { return getBridge ( connectionInfo , SouthboundITConstants . BRIDGE_NAME ) ; }", "answer": "org . junit . Assert . assertNotNull ( bridge )"}
{"focal": "instanceForModifyAddAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>add<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>add<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"add\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "testMethod": "testModifyTicketAddGroupNullGroup ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyAddAccess ( ticketId , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_GROUP , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pi )", "total": "testModifyTicketAddGroupNullGroup ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyAddAccess ( ticketId , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_GROUP , null ) ; \"<AssertPlaceHolder>\" ; } instanceForModifyAddAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>add<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>add<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"add\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "answer": "org . junit . Assert . assertNotNull ( pi )"}
{"focal": "getAdapter ( java . lang . Class ) { T result = super . getAdapter ( adapter ) ; if ( adapter == ( com . eclipsesource . tabris . internal . DrawingsCache . class ) ) { result = ( ( T ) ( cache ) ) ; } else if ( adapter == ( java . util . List . class ) ) { return ( ( T ) ( drawListeners ) ) ; } return result ; }", "testMethod": "testCanCreateDescriptor ( ) { com . eclipsesource . tabris . ui . ActionConfiguration configuration = new com . eclipsesource . tabris . ui . ActionConfiguration ( \"foo\" , com . eclipsesource . tabris . internal . ui . TestAction . class ) ; com . eclipsesource . tabris . internal . ui . ActionDescriptor descriptor = configuration . getAdapter ( com . eclipsesource . tabris . internal . ui . ActionDescriptor . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( descriptor )", "total": "testCanCreateDescriptor ( ) { com . eclipsesource . tabris . ui . ActionConfiguration configuration = new com . eclipsesource . tabris . ui . ActionConfiguration ( \"foo\" , com . eclipsesource . tabris . internal . ui . TestAction . class ) ; com . eclipsesource . tabris . internal . ui . ActionDescriptor descriptor = configuration . getAdapter ( com . eclipsesource . tabris . internal . ui . ActionDescriptor . class ) ; \"<AssertPlaceHolder>\" ; } getAdapter ( java . lang . Class ) { T result = super . getAdapter ( adapter ) ; if ( adapter == ( com . eclipsesource . tabris . internal . DrawingsCache . class ) ) { result = ( ( T ) ( cache ) ) ; } else if ( adapter == ( java . util . List . class ) ) { return ( ( T ) ( drawListeners ) ) ; } return result ; }", "answer": "org . junit . Assert . assertNotNull ( descriptor )"}
{"focal": "getValue ( ) { return this . value ; }", "testMethod": "checkRegisteredNodeMouseDoubleClickHandlerOverHeader ( ) { final org . mockito . ArgumentCaptor < com . ait . lienzo . client . core . event . NodeMouseDoubleClickHandler > nodeMouseDoubleClickHandlerArgumentCaptor = org . mockito . ArgumentCaptor . forClass ( com . ait . lienzo . client . core . event . NodeMouseDoubleClickHandler . class ) ; verify ( view , times ( 1 ) ) . registerNodeMouseDoubleClickHandler ( nodeMouseDoubleClickHandlerArgumentCaptor . capture ( ) ) ; final com . ait . lienzo . client . core . event . NodeMouseDoubleClickHandler nodeMouseDoubleClickHandler = nodeMouseDoubleClickHandlerArgumentCaptor . getValue ( ) ; \"<AssertPlaceHolder>\" ; final com . ait . lienzo . client . core . event . NodeMouseDoubleClickEvent event = mock ( com . ait . lienzo . client . core . event . NodeMouseDoubleClickEvent . class ) ; when ( view . isNodeMouseEventOverCaption ( eq ( event ) ) ) . thenReturn ( true ) ; when ( modellerPresenter . isGridPinned ( ) ) . thenReturn ( false ) ; nodeMouseDoubleClickHandler . onNodeMouseDoubleClick ( event ) ; verify ( dtPresenter , times ( 1 ) ) . enterPinnedMode ( eq ( view ) , any ( com . google . gwt . user . client . Command . class ) ) ; when ( modellerPresenter . isGridPinned ( ) ) . thenReturn ( true ) ; nodeMouseDoubleClickHandler . onNodeMouseDoubleClick ( event ) ; verify ( dtPresenter , times ( 1 ) ) . exitPinnedMode ( any ( com . google . gwt . user . client . Command . class ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( nodeMouseDoubleClickHandler )", "total": "checkRegisteredNodeMouseDoubleClickHandlerOverHeader ( ) { final org . mockito . ArgumentCaptor < com . ait . lienzo . client . core . event . NodeMouseDoubleClickHandler > nodeMouseDoubleClickHandlerArgumentCaptor = org . mockito . ArgumentCaptor . forClass ( com . ait . lienzo . client . core . event . NodeMouseDoubleClickHandler . class ) ; verify ( view , times ( 1 ) ) . registerNodeMouseDoubleClickHandler ( nodeMouseDoubleClickHandlerArgumentCaptor . capture ( ) ) ; final com . ait . lienzo . client . core . event . NodeMouseDoubleClickHandler nodeMouseDoubleClickHandler = nodeMouseDoubleClickHandlerArgumentCaptor . getValue ( ) ; \"<AssertPlaceHolder>\" ; final com . ait . lienzo . client . core . event . NodeMouseDoubleClickEvent event = mock ( com . ait . lienzo . client . core . event . NodeMouseDoubleClickEvent . class ) ; when ( view . isNodeMouseEventOverCaption ( eq ( event ) ) ) . thenReturn ( true ) ; when ( modellerPresenter . isGridPinned ( ) ) . thenReturn ( false ) ; nodeMouseDoubleClickHandler . onNodeMouseDoubleClick ( event ) ; verify ( dtPresenter , times ( 1 ) ) . enterPinnedMode ( eq ( view ) , any ( com . google . gwt . user . client . Command . class ) ) ; when ( modellerPresenter . isGridPinned ( ) ) . thenReturn ( true ) ; nodeMouseDoubleClickHandler . onNodeMouseDoubleClick ( event ) ; verify ( dtPresenter , times ( 1 ) ) . exitPinnedMode ( any ( com . google . gwt . user . client . Command . class ) ) ; } getValue ( ) { return this . value ; }", "answer": "org . junit . Assert . assertNotNull ( nodeMouseDoubleClickHandler )"}
{"focal": "getMessage ( ) { return message ; }", "testMethod": "save_Null ( ) { try { datastore . save ( null ) ; org . junit . Assert . fail ( ) ; } catch ( at . ac . tuwien . infosys . jcloudscale . datastore . api . DatastoreException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "save_Null ( ) { try { datastore . save ( null ) ; org . junit . Assert . fail ( ) ; } catch ( at . ac . tuwien . infosys . jcloudscale . datastore . api . DatastoreException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return message ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "getEncounterType ( java . lang . Integer ) { return dao . getEncounterType ( encounterTypeId ) ; }", "testMethod": "saveEncounterType_shouldThrowErrorWhenTryingToSaveEncounterTypeWhenEncounterTypesAreLocked ( ) { org . openmrs . GlobalProperty gp = new org . openmrs . GlobalProperty ( org . openmrs . util . OpenmrsConstants . GLOBAL_PROPERTY_ENCOUNTER_TYPES_LOCKED ) ; gp . setPropertyValue ( \"true\" ) ; org . openmrs . api . context . Context . getAdministrationService ( ) . saveGlobalProperty ( gp ) ; org . openmrs . api . EncounterService encounterService = org . openmrs . api . context . Context . getEncounterService ( ) ; org . openmrs . EncounterType encounterType = org . openmrs . api . context . Context . getEncounterService ( ) . getEncounterType ( 1 ) ; \"<AssertPlaceHolder>\" ; encounterService . saveEncounterType ( encounterType ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( encounterType )", "total": "saveEncounterType_shouldThrowErrorWhenTryingToSaveEncounterTypeWhenEncounterTypesAreLocked ( ) { org . openmrs . GlobalProperty gp = new org . openmrs . GlobalProperty ( org . openmrs . util . OpenmrsConstants . GLOBAL_PROPERTY_ENCOUNTER_TYPES_LOCKED ) ; gp . setPropertyValue ( \"true\" ) ; org . openmrs . api . context . Context . getAdministrationService ( ) . saveGlobalProperty ( gp ) ; org . openmrs . api . EncounterService encounterService = org . openmrs . api . context . Context . getEncounterService ( ) ; org . openmrs . EncounterType encounterType = org . openmrs . api . context . Context . getEncounterService ( ) . getEncounterType ( 1 ) ; \"<AssertPlaceHolder>\" ; encounterService . saveEncounterType ( encounterType ) ; } getEncounterType ( java . lang . Integer ) { return dao . getEncounterType ( encounterTypeId ) ; }", "answer": "org . junit . Assert . assertNotNull ( encounterType )"}
{"focal": "createParser ( org . eclipse . xtext . parser . antlr . XtextTokenStream ) { return new org . eclipse . xtext . testlanguages . backtracking . parser . antlr . internal . InternalBeeLangTestLanguageParser ( stream , getGrammarAccess ( ) ) ; }", "testMethod": "testSetup ( ) { java . lang . String input = \"\" ; org . eclipse . xtext . testlanguages . xtextgrammar . ide . contentassist . antlr . internal . InternalXtextGrammarTestLanguageParser parser = createParser ( input ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( parser )", "total": "testSetup ( ) { java . lang . String input = \"\" ; org . eclipse . xtext . testlanguages . xtextgrammar . ide . contentassist . antlr . internal . InternalXtextGrammarTestLanguageParser parser = createParser ( input ) ; \"<AssertPlaceHolder>\" ; } createParser ( org . eclipse . xtext . parser . antlr . XtextTokenStream ) { return new org . eclipse . xtext . testlanguages . backtracking . parser . antlr . internal . InternalBeeLangTestLanguageParser ( stream , getGrammarAccess ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( parser )"}
{"focal": "createRegistrationStatusManager ( ) { return tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . invoke ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . RegistrationStatusManager . class , \"createFromContractApiHttp\" , new java . lang . Class [ ] { com . microsoft . azure . sdk . iot . provisioning . service . contract . ContractApiHttp . class } , mockedContractApiHttp ) ; }", "testMethod": "createEnrollmentGroupQuerySucceed ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . QuerySpecification , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Query ) { final java . lang . String enrollmentGroupId = \"enrollmentGroupId-1\" ; final java . lang . String registrationPath = \"registrations/\" + enrollmentGroupId ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . RegistrationStatusManager registrationStatusManager = createRegistrationStatusManager ( ) ; new tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . NonStrictExpectations ( ) { { tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . newInstance ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Query . class , new java . lang . Class [ ] { com . microsoft . azure . sdk . iot . provisioning . service . contract . ContractApiHttp . class , java . lang . String . class , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . QuerySpecification . class , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Integer . class } , mockedContractApiHttp , registrationPath , mockedQuerySpecification , 0 ) ; result = mockedQuery ; times = 1 ; } } ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Query query = tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . invoke ( registrationStatusManager , \"createEnrollmentGroupQuery\" , new java . lang . Class [ ] { tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . QuerySpecification . class , java . lang . String . class , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Integer . class } , mockedQuerySpecification , enrollmentGroupId , 0 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( query )", "total": "createEnrollmentGroupQuerySucceed ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . QuerySpecification , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Query ) { final java . lang . String enrollmentGroupId = \"enrollmentGroupId-1\" ; final java . lang . String registrationPath = \"registrations/\" + enrollmentGroupId ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . RegistrationStatusManager registrationStatusManager = createRegistrationStatusManager ( ) ; new tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . NonStrictExpectations ( ) { { tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . newInstance ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Query . class , new java . lang . Class [ ] { com . microsoft . azure . sdk . iot . provisioning . service . contract . ContractApiHttp . class , java . lang . String . class , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . QuerySpecification . class , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Integer . class } , mockedContractApiHttp , registrationPath , mockedQuerySpecification , 0 ) ; result = mockedQuery ; times = 1 ; } } ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Query query = tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . invoke ( registrationStatusManager , \"createEnrollmentGroupQuery\" , new java . lang . Class [ ] { tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . QuerySpecification . class , java . lang . String . class , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Integer . class } , mockedQuerySpecification , enrollmentGroupId , 0 ) ; \"<AssertPlaceHolder>\" ; } createRegistrationStatusManager ( ) { return tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . invoke ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . RegistrationStatusManager . class , \"createFromContractApiHttp\" , new java . lang . Class [ ] { com . microsoft . azure . sdk . iot . provisioning . service . contract . ContractApiHttp . class } , mockedContractApiHttp ) ; }", "answer": "org . junit . Assert . assertNotNull ( query )"}
{"focal": "writeEntities ( int ) { org . apache . eagle . log . entity . GenericEntityWriter writer = null ; try { writer = new org . apache . eagle . log . entity . GenericEntityWriter ( ed . getService ( ) ) ; } catch ( java . lang . InstantiationException | java . lang . IllegalAccessException e1 ) { org . junit . Assert . fail ( e1 . getMessage ( ) ) ; } if ( org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . isDebugEnabled ( ) ) { org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . debug ( ( ( \"<sp>ms\" 1 + count ) + \"<sp>entities\" ) ) ; } int wroteCount = 0 ; java . util . List < java . lang . String > rowkeys = new java . util . ArrayList < java . lang . String > ( ) ; java . util . List < org . apache . eagle . log . entity . test . TestLogAPIEntity > list = new java . util . ArrayList < org . apache . eagle . log . entity . test . TestLogAPIEntity > ( ) ; for ( int i = 0 ; i <= count ; i ++ ) { org . apache . eagle . log . entity . test . TestLogAPIEntity e = new org . apache . eagle . log . entity . test . TestLogAPIEntity ( ) ; e . setTimestamp ( new java . util . Date ( ) . getTime ( ) ) ; e . setField1 ( i ) ; e . setField2 ( i ) ; e . setField3 ( i ) ; e . setField4 ( ( ( long ) ( i ) ) ) ; e . setField5 ( i ) ; e . setField6 ( ( ( double ) ( i ) ) ) ; e . setField7 ( java . lang . String . valueOf ( i ) ) ; e . setTags ( new java . util . HashMap < java . lang . String , java . lang . String > ( ) ) ; e . getTags ( ) . put ( \"<sp>ms\" 2 , \"index_test_job_id\" ) ; e . getTags ( ) . put ( \"hostname\" , \"<sp>ms\" 3 ) ; e . getTags ( ) . put ( \"<sp>ms\" 0 , java . lang . String . valueOf ( i ) ) ; e . getTags ( ) . put ( \"class\" , e . toString ( ) ) ; list . add ( e ) ; if ( ( list . size ( ) ) >= 1000 ) { try { org . apache . commons . lang . time . StopWatch watch = new org . apache . commons . lang . time . StopWatch ( ) ; watch . start ( ) ; rowkeys . addAll ( writer . write ( list ) ) ; watch . stop ( ) ; wroteCount += list . size ( ) ; if ( org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . isDebugEnabled ( ) ) { org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . debug ( ( ( ( ( ( ( ( \"Wrote<sp>\" + wroteCount ) + \"<sp>/<sp>\" ) + count ) + \"<sp>entities\" ) + \"<sp>in<sp>\" ) + ( watch . getTime ( ) ) ) + \"<sp>ms\" ) ) ; } list . clear ( ) ; } catch ( java . lang . Exception e1 ) { org . junit . Assert . fail ( e1 . getMessage ( ) ) ; } } } try { rowkeys . addAll ( writer . write ( list ) ) ; wroteCount += list . size ( ) ; if ( org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . isDebugEnabled ( ) ) { org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . debug ( ( ( ( ( \"wrote<sp>\" + wroteCount ) + \"<sp>/<sp>\" ) + count ) + \"<sp>entities\" ) ) ; } } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } if ( org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . isDebugEnabled ( ) ) { org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . debug ( ( ( \"done<sp>\" + count ) + \"<sp>entities\" ) ) ; } return rowkeys ; }", "testMethod": "testWrite1MLogAPIEntities ( ) { java . util . Date startTime = new java . util . Date ( ) ; org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . info ( ( \"Start<sp>time:<sp>\" + startTime ) ) ; org . apache . commons . lang . time . StopWatch watch = new org . apache . commons . lang . time . StopWatch ( ) ; watch . start ( ) ; java . util . List < java . lang . String > rowKeys = writeEntities ( 10 ) ; \"<AssertPlaceHolder>\" ; watch . stop ( ) ; java . util . Date endTime = new java . util . Date ( ) ; org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . info ( ( \"End<sp>time:<sp>\" + endTime ) ) ; org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . info ( ( ( \"Totally<sp>take<sp>\" + ( ( ( watch . getTime ( ) ) * 1.0 ) / 1000 ) ) + \"<sp>s\" ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( rowKeys )", "total": "testWrite1MLogAPIEntities ( ) { java . util . Date startTime = new java . util . Date ( ) ; org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . info ( ( \"Start<sp>time:<sp>\" + startTime ) ) ; org . apache . commons . lang . time . StopWatch watch = new org . apache . commons . lang . time . StopWatch ( ) ; watch . start ( ) ; java . util . List < java . lang . String > rowKeys = writeEntities ( 10 ) ; \"<AssertPlaceHolder>\" ; watch . stop ( ) ; java . util . Date endTime = new java . util . Date ( ) ; org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . info ( ( \"End<sp>time:<sp>\" + endTime ) ) ; org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . info ( ( ( \"Totally<sp>take<sp>\" + ( ( ( watch . getTime ( ) ) * 1.0 ) / 1000 ) ) + \"<sp>s\" ) ) ; } writeEntities ( int ) { org . apache . eagle . log . entity . GenericEntityWriter writer = null ; try { writer = new org . apache . eagle . log . entity . GenericEntityWriter ( ed . getService ( ) ) ; } catch ( java . lang . InstantiationException | java . lang . IllegalAccessException e1 ) { org . junit . Assert . fail ( e1 . getMessage ( ) ) ; } if ( org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . isDebugEnabled ( ) ) { org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . debug ( ( ( \"<sp>ms\" 1 + count ) + \"<sp>entities\" ) ) ; } int wroteCount = 0 ; java . util . List < java . lang . String > rowkeys = new java . util . ArrayList < java . lang . String > ( ) ; java . util . List < org . apache . eagle . log . entity . test . TestLogAPIEntity > list = new java . util . ArrayList < org . apache . eagle . log . entity . test . TestLogAPIEntity > ( ) ; for ( int i = 0 ; i <= count ; i ++ ) { org . apache . eagle . log . entity . test . TestLogAPIEntity e = new org . apache . eagle . log . entity . test . TestLogAPIEntity ( ) ; e . setTimestamp ( new java . util . Date ( ) . getTime ( ) ) ; e . setField1 ( i ) ; e . setField2 ( i ) ; e . setField3 ( i ) ; e . setField4 ( ( ( long ) ( i ) ) ) ; e . setField5 ( i ) ; e . setField6 ( ( ( double ) ( i ) ) ) ; e . setField7 ( java . lang . String . valueOf ( i ) ) ; e . setTags ( new java . util . HashMap < java . lang . String , java . lang . String > ( ) ) ; e . getTags ( ) . put ( \"<sp>ms\" 2 , \"index_test_job_id\" ) ; e . getTags ( ) . put ( \"hostname\" , \"<sp>ms\" 3 ) ; e . getTags ( ) . put ( \"<sp>ms\" 0 , java . lang . String . valueOf ( i ) ) ; e . getTags ( ) . put ( \"class\" , e . toString ( ) ) ; list . add ( e ) ; if ( ( list . size ( ) ) >= 1000 ) { try { org . apache . commons . lang . time . StopWatch watch = new org . apache . commons . lang . time . StopWatch ( ) ; watch . start ( ) ; rowkeys . addAll ( writer . write ( list ) ) ; watch . stop ( ) ; wroteCount += list . size ( ) ; if ( org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . isDebugEnabled ( ) ) { org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . debug ( ( ( ( ( ( ( ( \"Wrote<sp>\" + wroteCount ) + \"<sp>/<sp>\" ) + count ) + \"<sp>entities\" ) + \"<sp>in<sp>\" ) + ( watch . getTime ( ) ) ) + \"<sp>ms\" ) ) ; } list . clear ( ) ; } catch ( java . lang . Exception e1 ) { org . junit . Assert . fail ( e1 . getMessage ( ) ) ; } } } try { rowkeys . addAll ( writer . write ( list ) ) ; wroteCount += list . size ( ) ; if ( org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . isDebugEnabled ( ) ) { org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . debug ( ( ( ( ( \"wrote<sp>\" + wroteCount ) + \"<sp>/<sp>\" ) + count ) + \"<sp>entities\" ) ) ; } } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } if ( org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . isDebugEnabled ( ) ) { org . apache . eagle . log . entity . TestHBaseWriteEntitiesPerformance . LOG . debug ( ( ( \"done<sp>\" + count ) + \"<sp>entities\" ) ) ; } return rowkeys ; }", "answer": "org . junit . Assert . assertNotNull ( rowKeys )"}
{"focal": "createMapPath ( java . lang . Class , java . lang . Class , com . querydsl . core . types . PathMetadata ) { return com . querydsl . core . types . dsl . Expressions . mapPath ( keyType , valueType , com . querydsl . core . types . dsl . EntityPathBase . class , metadata ) ; }", "testMethod": "createMapPath ( ) { com . querydsl . core . types . Path < java . util . Map < java . lang . String , java . sql . Timestamp > > path = pathFactory . createMapPath ( java . lang . String . class , java . sql . Timestamp . class , metadata ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( path )", "total": "createMapPath ( ) { com . querydsl . core . types . Path < java . util . Map < java . lang . String , java . sql . Timestamp > > path = pathFactory . createMapPath ( java . lang . String . class , java . sql . Timestamp . class , metadata ) ; \"<AssertPlaceHolder>\" ; } createMapPath ( java . lang . Class , java . lang . Class , com . querydsl . core . types . PathMetadata ) { return com . querydsl . core . types . dsl . Expressions . mapPath ( keyType , valueType , com . querydsl . core . types . dsl . EntityPathBase . class , metadata ) ; }", "answer": "org . junit . Assert . assertNotNull ( path )"}
{"focal": "build ( ) { if ( ( ( method ) == null ) || ( ( uri ) == null ) ) { throw new java . lang . IllegalArgumentException ( ) ; } this . method = method ; this . headers = headers ; this . body = body ; this . uri = uri ; this . contentId = contentId ; return this ; }", "testMethod": "validationOfDoublePropertyDifferentTagHierachy ( ) { java . lang . String room = \"<sp><Name>Room<sp>42</Name>\" 0 + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( \"<sp><Name>Room<sp>42</Name>\" 4 http : com . sap . core . odata . api . edm . EdmEntitySet entitySet = com . sap . core . odata . testutil . mock . MockFacade . getMockEdm ( ) . getDefaultEntityContainer ( ) . getEntitySet ( \"Rooms\" ) ; java . io . InputStream reqContent = createContentAsStream ( room ) ; com . sap . core . odata . core . ep . consumer . XmlEntityConsumer xec = new com . sap . core . odata . core . ep . consumer . XmlEntityConsumer ( ) ; com . sap . core . odata . api . ep . entry . ODataEntry result = xec . readEntry ( entitySet , reqContent , com . sap . core . odata . api . ep . EntityProviderReadProperties . init ( ) . mergeSemantic ( false ) . build ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "validationOfDoublePropertyDifferentTagHierachy ( ) { java . lang . String room = \"<sp><Name>Room<sp>42</Name>\" 0 + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( \"<sp><Name>Room<sp>42</Name>\" 4 http : com . sap . core . odata . api . edm . EdmEntitySet entitySet = com . sap . core . odata . testutil . mock . MockFacade . getMockEdm ( ) . getDefaultEntityContainer ( ) . getEntitySet ( \"Rooms\" ) ; java . io . InputStream reqContent = createContentAsStream ( room ) ; com . sap . core . odata . core . ep . consumer . XmlEntityConsumer xec = new com . sap . core . odata . core . ep . consumer . XmlEntityConsumer ( ) ; com . sap . core . odata . api . ep . entry . ODataEntry result = xec . readEntry ( entitySet , reqContent , com . sap . core . odata . api . ep . EntityProviderReadProperties . init ( ) . mergeSemantic ( false ) . build ( ) ) ; \"<AssertPlaceHolder>\" ; } build ( ) { if ( ( ( method ) == null ) || ( ( uri ) == null ) ) { throw new java . lang . IllegalArgumentException ( ) ; } this . method = method ; this . headers = headers ; this . body = body ; this . uri = uri ; this . contentId = contentId ; return this ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "instanceForModifyRemoveAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>remove<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>remove<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"remove\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "testMethod": "testModifyTicketRemoveUserEmptyTicketId ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyRemoveAccess ( \"\" , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_USER , userName ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pi )", "total": "testModifyTicketRemoveUserEmptyTicketId ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyRemoveAccess ( \"\" , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_USER , userName ) ; \"<AssertPlaceHolder>\" ; } instanceForModifyRemoveAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>remove<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>remove<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"remove\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "answer": "org . junit . Assert . assertNotNull ( pi )"}
{"focal": "getTokenKey ( ) { return tokenString ; }", "testMethod": "testTwoWayTLSAuthenticationCustomGrant ( ) { if ( org . apache . cxf . systest . jaxrs . security . oauth2 . grants . JAXRSOAuth2Test . JPA_PORT . equals ( port ) ) { return ; } java . lang . String address = ( \"https://localhost:\" + ( port ) ) + \"/oauth2/token\" ; org . apache . cxf . jaxrs . client . WebClient wc = createWebClient ( address ) ; org . apache . cxf . rs . security . oauth2 . common . ClientAccessToken at = org . apache . cxf . rs . security . oauth2 . client . OAuthClientUtils . getAccessToken ( wc , new org . apache . cxf . systest . jaxrs . security . oauth2 . grants . JAXRSOAuth2Test . CustomGrant ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( at . getTokenKey ( ) )", "total": "testTwoWayTLSAuthenticationCustomGrant ( ) { if ( org . apache . cxf . systest . jaxrs . security . oauth2 . grants . JAXRSOAuth2Test . JPA_PORT . equals ( port ) ) { return ; } java . lang . String address = ( \"https://localhost:\" + ( port ) ) + \"/oauth2/token\" ; org . apache . cxf . jaxrs . client . WebClient wc = createWebClient ( address ) ; org . apache . cxf . rs . security . oauth2 . common . ClientAccessToken at = org . apache . cxf . rs . security . oauth2 . client . OAuthClientUtils . getAccessToken ( wc , new org . apache . cxf . systest . jaxrs . security . oauth2 . grants . JAXRSOAuth2Test . CustomGrant ( ) ) ; \"<AssertPlaceHolder>\" ; } getTokenKey ( ) { return tokenString ; }", "answer": "org . junit . Assert . assertNotNull ( at . getTokenKey ( ) )"}
{"focal": "executeScript ( java . lang . String ) { return executeScript ( script , null , 0 ) ; }", "testMethod": "testUInt32Array ( ) { com . eclipsesource . v8 . V8Value result = ( ( com . eclipsesource . v8 . V8Value ) ( v8 . executeScript ( \"var<sp>ints<sp>=<sp>new<sp>Uint32Array();<sp>ints\" ) ) ) ; \"<AssertPlaceHolder>\" ; result . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testUInt32Array ( ) { com . eclipsesource . v8 . V8Value result = ( ( com . eclipsesource . v8 . V8Value ) ( v8 . executeScript ( \"var<sp>ints<sp>=<sp>new<sp>Uint32Array();<sp>ints\" ) ) ) ; \"<AssertPlaceHolder>\" ; result . close ( ) ; } executeScript ( java . lang . String ) { return executeScript ( script , null , 0 ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getGrid ( ) { if ( ( grid ) == null ) { final int diameterInTiles = getDiameterInTiles ( ) ; grid = new org . jtrfp . trcl . gpu . SettableTexture [ diameterInTiles ] [ diameterInTiles ] ; } return grid ; }", "testMethod": "testConfigureGridAtNotNull_8_7_8_7 ( ) { final org . jtrfp . trcl . obj . MiniMap mm = getSubject ( ) ; mm . configureGridAt ( 8 , 7 , 16 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( mm . getGrid ( ) [ 8 ] [ 7 ] )", "total": "testConfigureGridAtNotNull_8_7_8_7 ( ) { final org . jtrfp . trcl . obj . MiniMap mm = getSubject ( ) ; mm . configureGridAt ( 8 , 7 , 16 ) ; \"<AssertPlaceHolder>\" ; } getGrid ( ) { if ( ( grid ) == null ) { final int diameterInTiles = getDiameterInTiles ( ) ; grid = new org . jtrfp . trcl . gpu . SettableTexture [ diameterInTiles ] [ diameterInTiles ] ; } return grid ; }", "answer": "org . junit . Assert . assertNotNull ( mm . getGrid ( ) [ 8 ] [ 7 ] )"}
{"focal": "addBond ( int , int , org . openscience . cdk . interfaces . IBond$Order ) { org . openscience . cdk . interfaces . IBond bond = getBuilder ( ) . newInstance ( org . openscience . cdk . interfaces . IBond . class , getAtom ( atom1 ) , getAtom ( atom2 ) , order ) ; addBond ( bond ) ; }", "testMethod": "constructorTest ( ) { org . openscience . cdk . interfaces . IAtomContainer atomContainer = new org . openscience . cdk . AtomContainer ( ) ; atomContainer . addAtom ( new org . openscience . cdk . Atom ( \"C\" ) ) ; atomContainer . addAtom ( new org . openscience . cdk . Atom ( \"O\" ) ) ; atomContainer . addAtom ( new org . openscience . cdk . Atom ( \"S\" ) ) ; atomContainer . addBond ( 0 , 1 , IBond . Order . SINGLE ) ; atomContainer . addBond ( 0 , 2 , IBond . Order . SINGLE ) ; org . openscience . cdk . graph . AtomContainerBondPermutor acbp = new org . openscience . cdk . graph . AtomContainerBondPermutor ( atomContainer ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( acbp )", "total": "constructorTest ( ) { org . openscience . cdk . interfaces . IAtomContainer atomContainer = new org . openscience . cdk . AtomContainer ( ) ; atomContainer . addAtom ( new org . openscience . cdk . Atom ( \"C\" ) ) ; atomContainer . addAtom ( new org . openscience . cdk . Atom ( \"O\" ) ) ; atomContainer . addAtom ( new org . openscience . cdk . Atom ( \"S\" ) ) ; atomContainer . addBond ( 0 , 1 , IBond . Order . SINGLE ) ; atomContainer . addBond ( 0 , 2 , IBond . Order . SINGLE ) ; org . openscience . cdk . graph . AtomContainerBondPermutor acbp = new org . openscience . cdk . graph . AtomContainerBondPermutor ( atomContainer ) ; \"<AssertPlaceHolder>\" ; } addBond ( int , int , org . openscience . cdk . interfaces . IBond$Order ) { org . openscience . cdk . interfaces . IBond bond = getBuilder ( ) . newInstance ( org . openscience . cdk . interfaces . IBond . class , getAtom ( atom1 ) , getAtom ( atom2 ) , order ) ; addBond ( bond ) ; }", "answer": "org . junit . Assert . assertNotNull ( acbp )"}
{"focal": "loadModel ( java . lang . String , java . lang . String ) { org . nd4j . linalg . io . ClassPathResource modelResource = new org . nd4j . linalg . io . ClassPathResource ( modelJsonFilename , classLoader ) ; org . nd4j . linalg . io . ClassPathResource weightResource = new org . nd4j . linalg . io . ClassPathResource ( modelWeightFilename , classLoader ) ; org . deeplearning4j . nn . multilayer . MultiLayerNetwork network = null ; try { network = org . deeplearning4j . nn . modelimport . keras . KerasModelImport . importKerasSequentialModelAndWeights ( modelResource . getFile ( ) . getAbsolutePath ( ) , weightResource . getFile ( ) . getAbsolutePath ( ) , false ) ; } catch ( java . io . IOException | org . deeplearning4j . nn . modelimport . keras . exceptions . InvalidKerasConfigurationException | org . deeplearning4j . nn . modelimport . keras . exceptions . UnsupportedKerasConfigurationException e ) { e . printStackTrace ( ) ; } return network ; }", "testMethod": "testWeightAndJsonWithoutTensorflowScope ( ) { org . deeplearning4j . nn . multilayer . MultiLayerNetwork model = loadModel ( \"modelimport/keras/tfscope/model.json\" , \"modelimport/keras/tfscope/model.weight\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( model )", "total": "testWeightAndJsonWithoutTensorflowScope ( ) { org . deeplearning4j . nn . multilayer . MultiLayerNetwork model = loadModel ( \"modelimport/keras/tfscope/model.json\" , \"modelimport/keras/tfscope/model.weight\" ) ; \"<AssertPlaceHolder>\" ; } loadModel ( java . lang . String , java . lang . String ) { org . nd4j . linalg . io . ClassPathResource modelResource = new org . nd4j . linalg . io . ClassPathResource ( modelJsonFilename , classLoader ) ; org . nd4j . linalg . io . ClassPathResource weightResource = new org . nd4j . linalg . io . ClassPathResource ( modelWeightFilename , classLoader ) ; org . deeplearning4j . nn . multilayer . MultiLayerNetwork network = null ; try { network = org . deeplearning4j . nn . modelimport . keras . KerasModelImport . importKerasSequentialModelAndWeights ( modelResource . getFile ( ) . getAbsolutePath ( ) , weightResource . getFile ( ) . getAbsolutePath ( ) , false ) ; } catch ( java . io . IOException | org . deeplearning4j . nn . modelimport . keras . exceptions . InvalidKerasConfigurationException | org . deeplearning4j . nn . modelimport . keras . exceptions . UnsupportedKerasConfigurationException e ) { e . printStackTrace ( ) ; } return network ; }", "answer": "org . junit . Assert . assertNotNull ( model )"}
{"focal": "userCumulate ( java . lang . String , java . lang . String , me . hao0 . wechat . core . Callback ) { userCumulate ( loadAccessToken ( ) , startDate , endDate , cb ) ; }", "testMethod": "testUserCumulate ( ) { java . util . List < me . hao0 . wechat . model . data . user . UserCumulate > cumulates = wechat . data ( ) . userCumulate ( accessToken , \"2015-09-01\" , \"2015-09-06\" ) ; \"<AssertPlaceHolder>\" ; System . out . println ( cumulates ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( cumulates )", "total": "testUserCumulate ( ) { java . util . List < me . hao0 . wechat . model . data . user . UserCumulate > cumulates = wechat . data ( ) . userCumulate ( accessToken , \"2015-09-01\" , \"2015-09-06\" ) ; \"<AssertPlaceHolder>\" ; System . out . println ( cumulates ) ; } userCumulate ( java . lang . String , java . lang . String , me . hao0 . wechat . core . Callback ) { userCumulate ( loadAccessToken ( ) , startDate , endDate , cb ) ; }", "answer": "org . junit . Assert . assertNotNull ( cumulates )"}
{"focal": "generateQCFailCPCTReport ( java . lang . Double , java . lang . Double , com . hartwig . hmftools . patientreporter . qcfail . QCFailReason ) { com . hartwig . hmftools . patientreporter . SampleReport sampleReport = com . hartwig . hmftools . patientreporter . ImmutableSampleReport . builder ( ) . sampleId ( \"Melanoma\" 0 ) . barcodeTumor ( \"Melanoma\" 1 ) . barcodeReference ( \"FR12123488\" ) . patientTumorLocation ( com . hartwig . hmftools . common . ecrf . projections . ImmutablePatientTumorLocation . of ( \"CPCT02991111\" , \"Skin\" , \"Melanoma\" ) ) . purityShallowSeq ( ( shallowSeqPurity != null ? com . hartwig . hmftools . patientreporter . report . util . PatientReportFormat . formatPercent ( shallowSeqPurity ) : \"Melanoma\" 5 ) ) . pathologyTumorPercentage ( ( pathologyTumorPercentage != null ? com . hartwig . hmftools . patientreporter . report . util . PatientReportFormat . formatPercent ( pathologyTumorPercentage ) : \"Melanoma\" 5 ) ) . tumorArrivalDate ( java . time . LocalDate . parse ( \"Melanoma\" 6 , com . hartwig . hmftools . patientreporter . report . PDFWriterTest . DATE_FORMATTER ) ) . bloodArrivalDate ( java . time . LocalDate . parse ( \"Melanoma\" 3 , com . hartwig . hmftools . patientreporter . report . PDFWriterTest . DATE_FORMATTER ) ) . labProcedures ( \"PREP013V23-QC037V20-SEQ008V25\" ) . addressee ( \"HMF<sp>Testing<sp>Center\" ) . projectName ( \"Melanoma\" 4 ) . requesterName ( \"ContactMe\" ) . requesterEmail ( \"contact@me.com\" ) . submissionId ( \"ABC\" ) . hospitalPatientId ( \"123456\" ) . hospitalPaSampleIdWIDE ( \"Melanoma\" 2 ) . build ( ) ; com . hartwig . hmftools . patientreporter . QCFailReport patientReport = com . hartwig . hmftools . patientreporter . ImmutableQCFailReport . of ( sampleReport , reason , QCFailStudy . CPCT , java . util . Optional . empty ( ) , com . hartwig . hmftools . patientreporter . PatientReporterTestUtil . testBaseReportData ( ) . signaturePath ( ) , com . hartwig . hmftools . patientreporter . PatientReporterTestUtil . testBaseReportData ( ) . logoRVAPath ( ) ) ; return com . hartwig . hmftools . patientreporter . report . PDFWriter . generateQCFailReport ( patientReport ) ; }", "testMethod": "canGeneratePostDNAIsolationFailReport ( ) { net . sf . dynamicreports . jasper . builder . JasperReportBuilder report = com . hartwig . hmftools . patientreporter . report . PDFWriterTest . generateQCFailCPCTReport ( 0.6 , null , QCFailReason . POST_ANALYSIS_FAIL ) ; \"<AssertPlaceHolder>\" ; if ( com . hartwig . hmftools . patientreporter . report . PDFWriterTest . WRITE_TO_PDF ) { report . toPdf ( new java . io . FileOutputStream ( ( ( ( com . hartwig . hmftools . patientreporter . report . PDFWriterTest . REPORT_BASE_DIR ) + ( java . io . File . separator ) ) + \"hmf_post_dna_isolation_fail_report.pdf\" ) ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( report )", "total": "canGeneratePostDNAIsolationFailReport ( ) { net . sf . dynamicreports . jasper . builder . JasperReportBuilder report = com . hartwig . hmftools . patientreporter . report . PDFWriterTest . generateQCFailCPCTReport ( 0.6 , null , QCFailReason . POST_ANALYSIS_FAIL ) ; \"<AssertPlaceHolder>\" ; if ( com . hartwig . hmftools . patientreporter . report . PDFWriterTest . WRITE_TO_PDF ) { report . toPdf ( new java . io . FileOutputStream ( ( ( ( com . hartwig . hmftools . patientreporter . report . PDFWriterTest . REPORT_BASE_DIR ) + ( java . io . File . separator ) ) + \"hmf_post_dna_isolation_fail_report.pdf\" ) ) ) ; } } generateQCFailCPCTReport ( java . lang . Double , java . lang . Double , com . hartwig . hmftools . patientreporter . qcfail . QCFailReason ) { com . hartwig . hmftools . patientreporter . SampleReport sampleReport = com . hartwig . hmftools . patientreporter . ImmutableSampleReport . builder ( ) . sampleId ( \"Melanoma\" 0 ) . barcodeTumor ( \"Melanoma\" 1 ) . barcodeReference ( \"FR12123488\" ) . patientTumorLocation ( com . hartwig . hmftools . common . ecrf . projections . ImmutablePatientTumorLocation . of ( \"CPCT02991111\" , \"Skin\" , \"Melanoma\" ) ) . purityShallowSeq ( ( shallowSeqPurity != null ? com . hartwig . hmftools . patientreporter . report . util . PatientReportFormat . formatPercent ( shallowSeqPurity ) : \"Melanoma\" 5 ) ) . pathologyTumorPercentage ( ( pathologyTumorPercentage != null ? com . hartwig . hmftools . patientreporter . report . util . PatientReportFormat . formatPercent ( pathologyTumorPercentage ) : \"Melanoma\" 5 ) ) . tumorArrivalDate ( java . time . LocalDate . parse ( \"Melanoma\" 6 , com . hartwig . hmftools . patientreporter . report . PDFWriterTest . DATE_FORMATTER ) ) . bloodArrivalDate ( java . time . LocalDate . parse ( \"Melanoma\" 3 , com . hartwig . hmftools . patientreporter . report . PDFWriterTest . DATE_FORMATTER ) ) . labProcedures ( \"PREP013V23-QC037V20-SEQ008V25\" ) . addressee ( \"HMF<sp>Testing<sp>Center\" ) . projectName ( \"Melanoma\" 4 ) . requesterName ( \"ContactMe\" ) . requesterEmail ( \"contact@me.com\" ) . submissionId ( \"ABC\" ) . hospitalPatientId ( \"123456\" ) . hospitalPaSampleIdWIDE ( \"Melanoma\" 2 ) . build ( ) ; com . hartwig . hmftools . patientreporter . QCFailReport patientReport = com . hartwig . hmftools . patientreporter . ImmutableQCFailReport . of ( sampleReport , reason , QCFailStudy . CPCT , java . util . Optional . empty ( ) , com . hartwig . hmftools . patientreporter . PatientReporterTestUtil . testBaseReportData ( ) . signaturePath ( ) , com . hartwig . hmftools . patientreporter . PatientReporterTestUtil . testBaseReportData ( ) . logoRVAPath ( ) ) ; return com . hartwig . hmftools . patientreporter . report . PDFWriter . generateQCFailReport ( patientReport ) ; }", "answer": "org . junit . Assert . assertNotNull ( report )"}
{"focal": "getKieBase ( ) { return null ; }", "testMethod": "testSVM ( ) { setKSession ( getModelSession ( org . kie . pmml . pmml_4_2 . predictive . models . SVMTest . source1 , org . kie . pmml . pmml_4_2 . predictive . models . SVMTest . VERBOSE ) ) ; setKbase ( getKSession ( ) . getKieBase ( ) ) ; org . kie . api . runtime . KieSession kSession = getKSession ( ) ; kSession . fireAllRules ( ) ; org . kie . api . definition . type . FactType ztype = kSession . getKieBase ( ) . getFactType ( org . kie . pmml . pmml_4_2 . predictive . models . SVMTest . packageName , \"Z\" ) ; \"<AssertPlaceHolder>\" ; kSession . getEntryPoint ( \"in_X\" ) . insert ( 0.0 ) ; kSession . getEntryPoint ( \"in_Y\" ) . insert ( 0.0 ) ; kSession . fireAllRules ( ) ; System . out . println ( reportWMObjects ( kSession ) ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"yes\" ) ; kSession . getEntryPoint ( \"in_X\" ) . insert ( 0.23 ) ; kSession . getEntryPoint ( \"in_Y\" ) . insert ( 0.75 ) ; kSession . fireAllRules ( ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"no\" ) ; kSession . getEntryPoint ( \"in_X\" ) . insert ( 0.85 ) ; kSession . fireAllRules ( ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"yes\" ) ; kSession . getEntryPoint ( \"in_Y\" ) . insert ( ( - 0.12 ) ) ; kSession . fireAllRules ( ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"no\" ) ; kSession . getEntryPoint ( \"in_X\" ) . insert ( 7.85 ) ; kSession . fireAllRules ( ) ; System . out . println ( reportWMObjects ( kSession ) ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"no\" ) ; checkGeneratedRules ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( ztype )", "total": "testSVM ( ) { setKSession ( getModelSession ( org . kie . pmml . pmml_4_2 . predictive . models . SVMTest . source1 , org . kie . pmml . pmml_4_2 . predictive . models . SVMTest . VERBOSE ) ) ; setKbase ( getKSession ( ) . getKieBase ( ) ) ; org . kie . api . runtime . KieSession kSession = getKSession ( ) ; kSession . fireAllRules ( ) ; org . kie . api . definition . type . FactType ztype = kSession . getKieBase ( ) . getFactType ( org . kie . pmml . pmml_4_2 . predictive . models . SVMTest . packageName , \"Z\" ) ; \"<AssertPlaceHolder>\" ; kSession . getEntryPoint ( \"in_X\" ) . insert ( 0.0 ) ; kSession . getEntryPoint ( \"in_Y\" ) . insert ( 0.0 ) ; kSession . fireAllRules ( ) ; System . out . println ( reportWMObjects ( kSession ) ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"yes\" ) ; kSession . getEntryPoint ( \"in_X\" ) . insert ( 0.23 ) ; kSession . getEntryPoint ( \"in_Y\" ) . insert ( 0.75 ) ; kSession . fireAllRules ( ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"no\" ) ; kSession . getEntryPoint ( \"in_X\" ) . insert ( 0.85 ) ; kSession . fireAllRules ( ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"yes\" ) ; kSession . getEntryPoint ( \"in_Y\" ) . insert ( ( - 0.12 ) ) ; kSession . fireAllRules ( ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"no\" ) ; kSession . getEntryPoint ( \"in_X\" ) . insert ( 7.85 ) ; kSession . fireAllRules ( ) ; System . out . println ( reportWMObjects ( kSession ) ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"no\" ) ; checkGeneratedRules ( ) ; } getKieBase ( ) { return null ; }", "answer": "org . junit . Assert . assertNotNull ( ztype )"}
{"focal": "getDeserializerFromConf ( org . apache . hadoop . conf . Configuration ) { java . lang . Class < ? extends org . apache . thrift . protocol . TProtocolFactory > protocolFactoryClass = conf . getClass ( PropertyConstants . SERIALIZATION_FACTORY_PARAMETER . txt , com . knewton . mapreduce . util . SerializationUtils . SERIALIZATION_FACTORY_PARAMETER_DEFAULT , org . apache . thrift . protocol . TProtocolFactory . class ) ; org . apache . thrift . protocol . TProtocolFactory protocolFactory = org . apache . hadoop . util . ReflectionUtils . newInstance ( protocolFactoryClass , conf ) ; return new org . apache . thrift . TDeserializer ( protocolFactory ) ; }", "testMethod": "testGetDeserializerFromConf ( ) { org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( false ) ; conf . set ( PropertyConstants . SERIALIZATION_FACTORY_PARAMETER . txt , TCompactProtocol . Factory . class . getName ( ) ) ; org . apache . thrift . TDeserializer deserializer = com . knewton . mapreduce . util . SerializationUtils . getDeserializerFromConf ( conf ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( deserializer )", "total": "testGetDeserializerFromConf ( ) { org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( false ) ; conf . set ( PropertyConstants . SERIALIZATION_FACTORY_PARAMETER . txt , TCompactProtocol . Factory . class . getName ( ) ) ; org . apache . thrift . TDeserializer deserializer = com . knewton . mapreduce . util . SerializationUtils . getDeserializerFromConf ( conf ) ; \"<AssertPlaceHolder>\" ; } getDeserializerFromConf ( org . apache . hadoop . conf . Configuration ) { java . lang . Class < ? extends org . apache . thrift . protocol . TProtocolFactory > protocolFactoryClass = conf . getClass ( PropertyConstants . SERIALIZATION_FACTORY_PARAMETER . txt , com . knewton . mapreduce . util . SerializationUtils . SERIALIZATION_FACTORY_PARAMETER_DEFAULT , org . apache . thrift . protocol . TProtocolFactory . class ) ; org . apache . thrift . protocol . TProtocolFactory protocolFactory = org . apache . hadoop . util . ReflectionUtils . newInstance ( protocolFactoryClass , conf ) ; return new org . apache . thrift . TDeserializer ( protocolFactory ) ; }", "answer": "org . junit . Assert . assertNotNull ( deserializer )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testId ( ) { com . sap . core . odata . ref . model . Room room1 = new com . sap . core . odata . ref . model . Room ( 1 , com . sap . core . odata . ref . model . RoomTest . NAME ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( room1 . getId ( ) )", "total": "testId ( ) { com . sap . core . odata . ref . model . Room room1 = new com . sap . core . odata . ref . model . Room ( 1 , com . sap . core . odata . ref . model . RoomTest . NAME ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( room1 . getId ( ) )"}
{"focal": "findOne ( ) { org . tests . model . basic . EBasicVer doda = new org . tests . model . basic . EBasicVer ( \"doda\" ) ; doda . setDescription ( \"OddButUniqueSillyExample\" ) ; io . ebean . Ebean . save ( doda ) ; io . ebean . cache . ServerCache queryCache = io . ebean . Ebean . getServerCacheManager ( ) . getQueryCache ( org . tests . model . basic . EBasicVer . class ) ; queryCache . getStatistics ( true ) ; java . util . Optional < org . tests . model . basic . EBasicVer > found0 = io . ebean . Ebean . find ( org . tests . model . basic . EBasicVer . class ) . where ( ) . eq ( \"description\" , \"OddButUniqueSillyExample\" ) . setUseQueryCache ( true ) . findOneOrEmpty ( ) ; org . junit . Assert . assertTrue ( found0 . isPresent ( ) ) ; assertHitMiss ( 0 , 1 , queryCache ) ; org . tests . model . basic . EBasicVer found1 = io . ebean . Ebean . find ( org . tests . model . basic . EBasicVer . class ) . where ( ) . eq ( \"description\" , \"OddButUniqueSillyExample\" ) . setUseQueryCache ( true ) . findOne ( ) ; org . junit . Assert . assertNotNull ( found1 ) ; assertHitMiss ( 1 , 0 , queryCache ) ; }", "testMethod": "testNoVersion ( ) { org . tests . model . basic . TMapSuperEntity e = new org . tests . model . basic . TMapSuperEntity ( ) ; e . setName ( \"babanaone\" ) ; io . ebean . Ebean . save ( e ) ; org . tests . model . basic . TMapSuperEntity e2 = io . ebean . Ebean . find ( org . tests . model . basic . TMapSuperEntity . class ) . where ( ) . idEq ( e . getId ( ) ) . select ( \"id,<sp>name\" ) . findOne ( ) ; \"<AssertPlaceHolder>\" ; e2 . setName ( \"banaban2\" ) ; io . ebean . Ebean . save ( e2 ) ; io . ebean . Ebean . delete ( e2 ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( e2 )", "total": "testNoVersion ( ) { org . tests . model . basic . TMapSuperEntity e = new org . tests . model . basic . TMapSuperEntity ( ) ; e . setName ( \"babanaone\" ) ; io . ebean . Ebean . save ( e ) ; org . tests . model . basic . TMapSuperEntity e2 = io . ebean . Ebean . find ( org . tests . model . basic . TMapSuperEntity . class ) . where ( ) . idEq ( e . getId ( ) ) . select ( \"id,<sp>name\" ) . findOne ( ) ; \"<AssertPlaceHolder>\" ; e2 . setName ( \"banaban2\" ) ; io . ebean . Ebean . save ( e2 ) ; io . ebean . Ebean . delete ( e2 ) ; } findOne ( ) { org . tests . model . basic . EBasicVer doda = new org . tests . model . basic . EBasicVer ( \"doda\" ) ; doda . setDescription ( \"OddButUniqueSillyExample\" ) ; io . ebean . Ebean . save ( doda ) ; io . ebean . cache . ServerCache queryCache = io . ebean . Ebean . getServerCacheManager ( ) . getQueryCache ( org . tests . model . basic . EBasicVer . class ) ; queryCache . getStatistics ( true ) ; java . util . Optional < org . tests . model . basic . EBasicVer > found0 = io . ebean . Ebean . find ( org . tests . model . basic . EBasicVer . class ) . where ( ) . eq ( \"description\" , \"OddButUniqueSillyExample\" ) . setUseQueryCache ( true ) . findOneOrEmpty ( ) ; org . junit . Assert . assertTrue ( found0 . isPresent ( ) ) ; assertHitMiss ( 0 , 1 , queryCache ) ; org . tests . model . basic . EBasicVer found1 = io . ebean . Ebean . find ( org . tests . model . basic . EBasicVer . class ) . where ( ) . eq ( \"description\" , \"OddButUniqueSillyExample\" ) . setUseQueryCache ( true ) . findOne ( ) ; org . junit . Assert . assertNotNull ( found1 ) ; assertHitMiss ( 1 , 0 , queryCache ) ; }", "answer": "org . junit . Assert . assertNotNull ( e2 )"}
{"focal": "bindAliasToPrincipal ( org . sagebionetworks . repo . model . principal . PrincipalAlias ) { if ( dto == null ) throw new java . lang . IllegalArgumentException ( \"PrincipalAlais<sp>cannot<sp>be<sp>null\" ) ; if ( ( dto . getAlias ( ) ) == null ) throw new java . lang . IllegalArgumentException ( \"Alias<sp>cannot<sp>be<sp>null\" ) ; try { this . jdbcTemplate . queryForObject ( org . sagebionetworks . repo . model . dbo . principal . PrincipalAliasDaoImpl . SQL_LOCK_PRINCIPAL , org . sagebionetworks . repo . model . dbo . principal . Long . class , dto . getPrincipalId ( ) ) ; } catch ( org . springframework . dao . EmptyResultDataAccessException | java . lang . NullPointerException e ) { throw new org . sagebionetworks . repo . web . NotFoundException ( ( \"A<sp>principal<sp>does<sp>not<sp>exist<sp>with<sp>principalId:<sp>\" + ( dto . getPrincipalId ( ) ) ) ) ; } org . sagebionetworks . repo . model . dbo . principal . DBOPrincipalAlias dbo = org . sagebionetworks . repo . model . dbo . principal . AliasUtils . createDBOFromDTO ( dto ) ; dbo . getAliasType ( ) . validateAlias ( dbo . getAliasDisplay ( ) ) ; org . sagebionetworks . repo . model . principal . PrincipalAlias current = findPrincipalWithAlias ( dto . getAlias ( ) ) ; if ( current != null ) { if ( ! ( current . getPrincipalId ( ) . equals ( dbo . getPrincipalId ( ) ) ) ) throw new org . sagebionetworks . repo . model . NameConflictException ( ( ( \"The<sp>alias:<sp>\" + ( dto . getAlias ( ) ) ) + \"<sp>is<sp>already<sp>in<sp>use.\" ) ) ; if ( ! ( current . getType ( ) . equals ( dto . getType ( ) ) ) ) throw new java . lang . IllegalArgumentException ( ( ( ( ( ( \"Cannot<sp>change<sp>the<sp>type<sp>of<sp>an<sp>alias:<sp>\" + ( dto . getAlias ( ) ) ) + \"<sp>from<sp>\" ) + ( dto . getAlias ( ) ) ) + \"<sp>to<sp>\" ) + ( dbo . getAliasType ( ) ) ) ) ; dbo . setId ( current . getAliasId ( ) ) ; } else { if ( dbo . getAliasType ( ) . isOnePerPrincpal ( ) ) { java . util . List < org . sagebionetworks . repo . model . principal . PrincipalAlias > allOfTypeType = listPrincipalAliases ( dbo . getPrincipalId ( ) , dto . getType ( ) ) ; if ( ( allOfTypeType . size ( ) ) > 1 ) { throw new java . lang . IllegalStateException ( ( ( ( \"Multiple<sp>aliases<sp>were<sp>found<sp>for<sp>principal:<sp>\" + ( dbo . getPrincipalId ( ) ) ) + \"<sp>of<sp>Type:<sp>\" ) + ( dto . getType ( ) ) ) ) ; } if ( ( allOfTypeType . size ( ) ) == 1 ) { dbo . setId ( allOfTypeType . get ( 0 ) . getAliasId ( ) ) ; } else { dbo . setId ( idGenerator . generateNewId ( IdType . PRINCIPAL_ALIAS_ID ) ) ; } } else { dbo . setId ( idGenerator . generateNewId ( IdType . PRINCIPAL_ALIAS_ID ) ) ; } } dbo . setEtag ( java . util . UUID . randomUUID ( ) . toString ( ) ) ; basicDao . createOrUpdate ( dbo ) ; return getPrincipalAlias ( dbo . getId ( ) ) ; }", "testMethod": "testPLFM_2482 ( ) { org . sagebionetworks . repo . model . principal . PrincipalAlias alias = new org . sagebionetworks . repo . model . principal . PrincipalAlias ( ) ; alias . setAlias ( \"james.bond@Spy.org\" ) ; alias . setType ( AliasType . USER_EMAIL ) ; alias . setPrincipalId ( principalId ) ; org . sagebionetworks . repo . model . principal . PrincipalAlias result = principalAliasDao . bindAliasToPrincipal ( alias ) ; \"<AssertPlaceHolder>\" ; alias = new org . sagebionetworks . repo . model . principal . PrincipalAlias ( ) ; alias . setAlias ( \"james.bond@Spy.org\" ) ; alias . setType ( AliasType . USER_EMAIL ) ; alias . setPrincipalId ( principalId2 ) ; principalAliasDao . bindAliasToPrincipal ( alias ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testPLFM_2482 ( ) { org . sagebionetworks . repo . model . principal . PrincipalAlias alias = new org . sagebionetworks . repo . model . principal . PrincipalAlias ( ) ; alias . setAlias ( \"james.bond@Spy.org\" ) ; alias . setType ( AliasType . USER_EMAIL ) ; alias . setPrincipalId ( principalId ) ; org . sagebionetworks . repo . model . principal . PrincipalAlias result = principalAliasDao . bindAliasToPrincipal ( alias ) ; \"<AssertPlaceHolder>\" ; alias = new org . sagebionetworks . repo . model . principal . PrincipalAlias ( ) ; alias . setAlias ( \"james.bond@Spy.org\" ) ; alias . setType ( AliasType . USER_EMAIL ) ; alias . setPrincipalId ( principalId2 ) ; principalAliasDao . bindAliasToPrincipal ( alias ) ; } bindAliasToPrincipal ( org . sagebionetworks . repo . model . principal . PrincipalAlias ) { if ( dto == null ) throw new java . lang . IllegalArgumentException ( \"PrincipalAlais<sp>cannot<sp>be<sp>null\" ) ; if ( ( dto . getAlias ( ) ) == null ) throw new java . lang . IllegalArgumentException ( \"Alias<sp>cannot<sp>be<sp>null\" ) ; try { this . jdbcTemplate . queryForObject ( org . sagebionetworks . repo . model . dbo . principal . PrincipalAliasDaoImpl . SQL_LOCK_PRINCIPAL , org . sagebionetworks . repo . model . dbo . principal . Long . class , dto . getPrincipalId ( ) ) ; } catch ( org . springframework . dao . EmptyResultDataAccessException | java . lang . NullPointerException e ) { throw new org . sagebionetworks . repo . web . NotFoundException ( ( \"A<sp>principal<sp>does<sp>not<sp>exist<sp>with<sp>principalId:<sp>\" + ( dto . getPrincipalId ( ) ) ) ) ; } org . sagebionetworks . repo . model . dbo . principal . DBOPrincipalAlias dbo = org . sagebionetworks . repo . model . dbo . principal . AliasUtils . createDBOFromDTO ( dto ) ; dbo . getAliasType ( ) . validateAlias ( dbo . getAliasDisplay ( ) ) ; org . sagebionetworks . repo . model . principal . PrincipalAlias current = findPrincipalWithAlias ( dto . getAlias ( ) ) ; if ( current != null ) { if ( ! ( current . getPrincipalId ( ) . equals ( dbo . getPrincipalId ( ) ) ) ) throw new org . sagebionetworks . repo . model . NameConflictException ( ( ( \"The<sp>alias:<sp>\" + ( dto . getAlias ( ) ) ) + \"<sp>is<sp>already<sp>in<sp>use.\" ) ) ; if ( ! ( current . getType ( ) . equals ( dto . getType ( ) ) ) ) throw new java . lang . IllegalArgumentException ( ( ( ( ( ( \"Cannot<sp>change<sp>the<sp>type<sp>of<sp>an<sp>alias:<sp>\" + ( dto . getAlias ( ) ) ) + \"<sp>from<sp>\" ) + ( dto . getAlias ( ) ) ) + \"<sp>to<sp>\" ) + ( dbo . getAliasType ( ) ) ) ) ; dbo . setId ( current . getAliasId ( ) ) ; } else { if ( dbo . getAliasType ( ) . isOnePerPrincpal ( ) ) { java . util . List < org . sagebionetworks . repo . model . principal . PrincipalAlias > allOfTypeType = listPrincipalAliases ( dbo . getPrincipalId ( ) , dto . getType ( ) ) ; if ( ( allOfTypeType . size ( ) ) > 1 ) { throw new java . lang . IllegalStateException ( ( ( ( \"Multiple<sp>aliases<sp>were<sp>found<sp>for<sp>principal:<sp>\" + ( dbo . getPrincipalId ( ) ) ) + \"<sp>of<sp>Type:<sp>\" ) + ( dto . getType ( ) ) ) ) ; } if ( ( allOfTypeType . size ( ) ) == 1 ) { dbo . setId ( allOfTypeType . get ( 0 ) . getAliasId ( ) ) ; } else { dbo . setId ( idGenerator . generateNewId ( IdType . PRINCIPAL_ALIAS_ID ) ) ; } } else { dbo . setId ( idGenerator . generateNewId ( IdType . PRINCIPAL_ALIAS_ID ) ) ; } } dbo . setEtag ( java . util . UUID . randomUUID ( ) . toString ( ) ) ; basicDao . createOrUpdate ( dbo ) ; return getPrincipalAlias ( dbo . getId ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getPort ( ) { return port ; }", "testMethod": "testCloseConnection ( ) { handler . initialize ( ) ; new java . net . Socket ( ) . connect ( new java . net . InetSocketAddress ( \"localhost\" , handler . getPort ( ) ) ) ; handler . recheck ( 1000 ) ; handler . closeConnection ( ) ; java . lang . Exception ex = null ; try { new java . net . Socket ( ) . connect ( new java . net . InetSocketAddress ( \"localhost\" , handler . getPort ( ) ) ) ; } catch ( java . io . IOException E ) { ex = E ; } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ex )", "total": "testCloseConnection ( ) { handler . initialize ( ) ; new java . net . Socket ( ) . connect ( new java . net . InetSocketAddress ( \"localhost\" , handler . getPort ( ) ) ) ; handler . recheck ( 1000 ) ; handler . closeConnection ( ) ; java . lang . Exception ex = null ; try { new java . net . Socket ( ) . connect ( new java . net . InetSocketAddress ( \"localhost\" , handler . getPort ( ) ) ) ; } catch ( java . io . IOException E ) { ex = E ; } \"<AssertPlaceHolder>\" ; } getPort ( ) { return port ; }", "answer": "org . junit . Assert . assertNotNull ( ex )"}
{"focal": "createDefinition ( org . eclipse . tracecompass . ctf . core . trace . CTFStreamInputReader , org . eclipse . tracecompass . ctf . core . event . io . BitBuffer , long ) { org . eclipse . tracecompass . ctf . core . event . types . StructDeclaration streamEventContextDecl = streamInputReader . getStreamEventContextDecl ( ) ; @ org . eclipse . jdt . annotation . Nullable final org . eclipse . tracecompass . internal . ctf . core . trace . CTFStream stream = fStream ; final org . eclipse . tracecompass . ctf . core . trace . CTFTrace trace = ( stream == null ) ? null : stream . getTrace ( ) ; org . eclipse . tracecompass . ctf . core . event . types . StructDefinition streamEventContext = ( streamEventContextDecl != null ) ? streamEventContextDecl . createDefinition ( trace , ILexicalScope . STREAM_EVENT_CONTEXT , input ) : null ; org . eclipse . tracecompass . ctf . core . event . types . ICompositeDefinition packetContext = streamInputReader . getCurrentPacketReader ( ) . getCurrentPacketEventHeader ( ) ; org . eclipse . tracecompass . ctf . core . event . types . StructDefinition eventContext = ( ( fContext ) != null ) ? fContext . createDefinition ( trace , ILexicalScope . CONTEXT , input ) : null ; org . eclipse . tracecompass . ctf . core . event . types . StructDefinition eventPayload = ( ( fFields ) != null ) ? fFields . createDefinition ( trace , ILexicalScope . FIELDS , input ) : null ; return new org . eclipse . tracecompass . internal . ctf . core . event . EventDefinition ( this , streamInputReader . getCPU ( ) , timestamp , null , streamEventContext , eventContext , packetContext , eventPayload , streamInputReader . getCurrentPacketReader ( ) . getCurrentPacket ( ) ) ; }", "testMethod": "testCreateDefinition ( ) { org . eclipse . tracecompass . ctf . core . event . scope . IDefinitionScope definitionScope = null ; java . lang . String fieldName = \"id\" ; java . nio . ByteBuffer allocate = java . nio . ByteBuffer . allocate ( 100 ) ; org . eclipse . tracecompass . ctf . core . event . io . BitBuffer bb = new org . eclipse . tracecompass . ctf . core . event . io . BitBuffer ( allocate ) ; org . eclipse . tracecompass . ctf . core . event . types . StringDefinition result = fixture . createDefinition ( definitionScope , fieldName , bb ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testCreateDefinition ( ) { org . eclipse . tracecompass . ctf . core . event . scope . IDefinitionScope definitionScope = null ; java . lang . String fieldName = \"id\" ; java . nio . ByteBuffer allocate = java . nio . ByteBuffer . allocate ( 100 ) ; org . eclipse . tracecompass . ctf . core . event . io . BitBuffer bb = new org . eclipse . tracecompass . ctf . core . event . io . BitBuffer ( allocate ) ; org . eclipse . tracecompass . ctf . core . event . types . StringDefinition result = fixture . createDefinition ( definitionScope , fieldName , bb ) ; \"<AssertPlaceHolder>\" ; } createDefinition ( org . eclipse . tracecompass . ctf . core . trace . CTFStreamInputReader , org . eclipse . tracecompass . ctf . core . event . io . BitBuffer , long ) { org . eclipse . tracecompass . ctf . core . event . types . StructDeclaration streamEventContextDecl = streamInputReader . getStreamEventContextDecl ( ) ; @ org . eclipse . jdt . annotation . Nullable final org . eclipse . tracecompass . internal . ctf . core . trace . CTFStream stream = fStream ; final org . eclipse . tracecompass . ctf . core . trace . CTFTrace trace = ( stream == null ) ? null : stream . getTrace ( ) ; org . eclipse . tracecompass . ctf . core . event . types . StructDefinition streamEventContext = ( streamEventContextDecl != null ) ? streamEventContextDecl . createDefinition ( trace , ILexicalScope . STREAM_EVENT_CONTEXT , input ) : null ; org . eclipse . tracecompass . ctf . core . event . types . ICompositeDefinition packetContext = streamInputReader . getCurrentPacketReader ( ) . getCurrentPacketEventHeader ( ) ; org . eclipse . tracecompass . ctf . core . event . types . StructDefinition eventContext = ( ( fContext ) != null ) ? fContext . createDefinition ( trace , ILexicalScope . CONTEXT , input ) : null ; org . eclipse . tracecompass . ctf . core . event . types . StructDefinition eventPayload = ( ( fFields ) != null ) ? fFields . createDefinition ( trace , ILexicalScope . FIELDS , input ) : null ; return new org . eclipse . tracecompass . internal . ctf . core . event . EventDefinition ( this , streamInputReader . getCPU ( ) , timestamp , null , streamEventContext , eventContext , packetContext , eventPayload , streamInputReader . getCurrentPacketReader ( ) . getCurrentPacket ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getTaskun ( ) { return ( ( com . github . seratch . taskun . scheduler . Taskun ) ( s2Container . getComponent ( com . github . seratch . taskun . scheduler . Taskun . class ) ) ) ; }", "testMethod": "getScheduler_A$ ( ) { com . github . seratch . taskun . inject . GuiceTaskunServletInjector target = new com . github . seratch . taskun . inject . GuiceTaskunServletInjector ( new com . google . inject . AbstractModule ( ) { @ com . github . seratch . taskun . inject . Override protected void configure ( ) { bind ( com . github . seratch . taskun . scheduler . Taskun . class ) . to ( com . github . seratch . taskun . scheduler . impl . TaskunImpl . class ) ; } } ) ; com . github . seratch . taskun . scheduler . Taskun actual = target . getTaskun ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( actual )", "total": "getScheduler_A$ ( ) { com . github . seratch . taskun . inject . GuiceTaskunServletInjector target = new com . github . seratch . taskun . inject . GuiceTaskunServletInjector ( new com . google . inject . AbstractModule ( ) { @ com . github . seratch . taskun . inject . Override protected void configure ( ) { bind ( com . github . seratch . taskun . scheduler . Taskun . class ) . to ( com . github . seratch . taskun . scheduler . impl . TaskunImpl . class ) ; } } ) ; com . github . seratch . taskun . scheduler . Taskun actual = target . getTaskun ( ) ; \"<AssertPlaceHolder>\" ; } getTaskun ( ) { return ( ( com . github . seratch . taskun . scheduler . Taskun ) ( s2Container . getComponent ( com . github . seratch . taskun . scheduler . Taskun . class ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( actual )"}
{"focal": "getInstance ( ) { return org . hivedb . meta . persistence . CachingDataSourceProvider . INSTANCE ; }", "testMethod": "shouldLoadWithAnOutOfServiceNode ( ) { org . hivedb . Hive hive = getHive ( ) ; org . hivedb . meta . Node outOfService = org . hivedb . util . functional . Atom . getFirst ( hive . getNodes ( ) ) ; outOfService . setStatus ( Lockable . Status . unavailable ) ; hive . updateNode ( outOfService ) ; org . hivedb . Hive newHive = org . hivedb . Hive . load ( hive . getUri ( ) , org . hivedb . meta . persistence . CachingDataSourceProvider . getInstance ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( newHive )", "total": "shouldLoadWithAnOutOfServiceNode ( ) { org . hivedb . Hive hive = getHive ( ) ; org . hivedb . meta . Node outOfService = org . hivedb . util . functional . Atom . getFirst ( hive . getNodes ( ) ) ; outOfService . setStatus ( Lockable . Status . unavailable ) ; hive . updateNode ( outOfService ) ; org . hivedb . Hive newHive = org . hivedb . Hive . load ( hive . getUri ( ) , org . hivedb . meta . persistence . CachingDataSourceProvider . getInstance ( ) ) ; \"<AssertPlaceHolder>\" ; } getInstance ( ) { return org . hivedb . meta . persistence . CachingDataSourceProvider . INSTANCE ; }", "answer": "org . junit . Assert . assertNotNull ( newHive )"}
{"focal": "setID ( ) { id = ( it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . GenericGameObject . created ) ++ ; }", "testMethod": "testSheepIntTypeOfSheepTerrain ( ) { int age = 10 ; it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . animals . TypeOfSheep tos = TypeOfSheep . MALESHEEP ; it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . objectsOfGame . Terrain position = it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . objectsOfGame . Terrain . C1 ; it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . animals . Sheep sheep = new it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . animals . Sheep ( age , tos , position ) ; sheep . setID ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( sheep )", "total": "testSheepIntTypeOfSheepTerrain ( ) { int age = 10 ; it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . animals . TypeOfSheep tos = TypeOfSheep . MALESHEEP ; it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . objectsOfGame . Terrain position = it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . objectsOfGame . Terrain . C1 ; it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . animals . Sheep sheep = new it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . animals . Sheep ( age , tos , position ) ; sheep . setID ( ) ; \"<AssertPlaceHolder>\" ; } setID ( ) { id = ( it . polimi . deib . provaFinale2014 . andrea . celli_stefano1 . cereda . gameModel . GenericGameObject . created ) ++ ; }", "answer": "org . junit . Assert . assertNotNull ( sheep )"}
{"focal": "findByRegionGroupAndType ( java . lang . String , java . lang . String , java . lang . String ) { javax . persistence . Query query = entityManager . createQuery ( ( \"SELECT<sp>b<sp>FROM<sp>BillingService<sp>b,<sp>CtlBillingService<sp>c\" + ( \"<sp>WHERE<sp>b.serviceCode=<sp>c.serviceCode<sp>and<sp>b.region=<sp>:region<sp>and<sp>c.serviceGroup=<sp>:serviceGroup<sp>\" + \"<sp>AND<sp>c.serviceType<sp>=<sp>:serviceType<sp>order<sp>by<sp>c.serviceOrder\" ) ) ) ; query . setParameter ( \"region\" , billRegion ) ; query . setParameter ( \"serviceGroup\" , serviceGroup ) ; query . setParameter ( \"serviceType\" , serviceType ) ; return query . getResultList ( ) ; }", "testMethod": "testBillingService ( ) { java . util . List < org . oscarehr . common . model . BillingService > billingServices ; billingServices = dao . findByRegionGroupAndType ( \"REG\" , \"GRP\" , \"TYP\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( billingServices )", "total": "testBillingService ( ) { java . util . List < org . oscarehr . common . model . BillingService > billingServices ; billingServices = dao . findByRegionGroupAndType ( \"REG\" , \"GRP\" , \"TYP\" ) ; \"<AssertPlaceHolder>\" ; } findByRegionGroupAndType ( java . lang . String , java . lang . String , java . lang . String ) { javax . persistence . Query query = entityManager . createQuery ( ( \"SELECT<sp>b<sp>FROM<sp>BillingService<sp>b,<sp>CtlBillingService<sp>c\" + ( \"<sp>WHERE<sp>b.serviceCode=<sp>c.serviceCode<sp>and<sp>b.region=<sp>:region<sp>and<sp>c.serviceGroup=<sp>:serviceGroup<sp>\" + \"<sp>AND<sp>c.serviceType<sp>=<sp>:serviceType<sp>order<sp>by<sp>c.serviceOrder\" ) ) ) ; query . setParameter ( \"region\" , billRegion ) ; query . setParameter ( \"serviceGroup\" , serviceGroup ) ; query . setParameter ( \"serviceType\" , serviceType ) ; return query . getResultList ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( billingServices )"}
{"focal": "instanceForModifyAddAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>add<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>add<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"add\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "testMethod": "testModifyTicketAddHostNullAddType ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyAddAccess ( ticketId , null , hostName ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pi )", "total": "testModifyTicketAddHostNullAddType ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyAddAccess ( ticketId , null , hostName ) ; \"<AssertPlaceHolder>\" ; } instanceForModifyAddAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>add<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>add<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"add\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "answer": "org . junit . Assert . assertNotNull ( pi )"}
{"focal": "getResource ( java . lang . Class , org . eclipse . core . runtime . IProgressMonitor ) { if ( resourceType == ( org . geotools . data . ows . Layer . class ) ) { return ( ( E ) ( this . wmslayer ) ) ; } if ( resourceType == ( org . geotools . data . wms . WebMapServer . class ) ) { return ( ( E ) ( this . wms ) ) ; } return null ; }", "testMethod": "testFrameworkTransactionProtection ( ) { org . geotools . data . FeatureSource < org . opengis . feature . simple . SimpleFeatureType , org . opengis . feature . simple . SimpleFeature > source = layer . getResource ( org . geotools . data . FeatureSource . class , null ) ; \"<AssertPlaceHolder>\" ; org . geotools . data . FeatureStore < org . opengis . feature . simple . SimpleFeatureType , org . opengis . feature . simple . SimpleFeature > store = ( ( org . geotools . data . FeatureStore < org . opengis . feature . simple . SimpleFeatureType , org . opengis . feature . simple . SimpleFeature > ) ( source ) ) ; store . setTransaction ( Transaction . AUTO_COMMIT ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( source )", "total": "testFrameworkTransactionProtection ( ) { org . geotools . data . FeatureSource < org . opengis . feature . simple . SimpleFeatureType , org . opengis . feature . simple . SimpleFeature > source = layer . getResource ( org . geotools . data . FeatureSource . class , null ) ; \"<AssertPlaceHolder>\" ; org . geotools . data . FeatureStore < org . opengis . feature . simple . SimpleFeatureType , org . opengis . feature . simple . SimpleFeature > store = ( ( org . geotools . data . FeatureStore < org . opengis . feature . simple . SimpleFeatureType , org . opengis . feature . simple . SimpleFeature > ) ( source ) ) ; store . setTransaction ( Transaction . AUTO_COMMIT ) ; } getResource ( java . lang . Class , org . eclipse . core . runtime . IProgressMonitor ) { if ( resourceType == ( org . geotools . data . ows . Layer . class ) ) { return ( ( E ) ( this . wmslayer ) ) ; } if ( resourceType == ( org . geotools . data . wms . WebMapServer . class ) ) { return ( ( E ) ( this . wms ) ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( source )"}
{"focal": "getInstance ( java . lang . Class ) { try { org . xwiki . component . manager . ComponentManager componentManager = this . componentManagerProvider . get ( ) ; org . xwiki . rest . XWikiRestComponent component = componentManager . getInstance ( org . xwiki . rest . XWikiRestComponent . class , clazz . getName ( ) ) ; org . xwiki . component . descriptor . ComponentDescriptor < org . xwiki . rest . XWikiRestComponent > componentDescriptor = componentManager . getComponentDescriptor ( org . xwiki . rest . XWikiRestComponent . class , clazz . getName ( ) ) ; org . xwiki . context . ExecutionContext executionContext = this . execution . getContext ( ) ; java . util . List < org . xwiki . rest . XWikiRestComponent > releasableComponentReferences = ( ( java . util . List < org . xwiki . rest . XWikiRestComponent > ) ( executionContext . getProperty ( Constants . RELEASABLE_COMPONENT_REFERENCES ) ) ) ; if ( releasableComponentReferences == null ) { releasableComponentReferences = new java . util . ArrayList ( ) ; executionContext . setProperty ( Constants . RELEASABLE_COMPONENT_REFERENCES , releasableComponentReferences ) ; } if ( ( componentDescriptor . getInstantiationStrategy ( ) ) == ( org . xwiki . component . descriptor . ComponentInstantiationStrategy . PER_LOOKUP ) ) { releasableComponentReferences . add ( component ) ; } return ( ( T ) ( component ) ) ; } catch ( org . xwiki . component . manager . ComponentLookupException e ) { throw new org . restlet . ext . jaxrs . InstantiateException ( e ) ; } }", "testMethod": "testRegisterComponentInSpaceComponentManager ( ) { final org . jmock . States state = getMockery ( ) . states ( \"test\" ) ; getMockery ( ) . checking ( new org . jmock . Expectations ( ) { { allowing ( mockWikiDescriptorManager ) . getCurrentWikiId ( ) ; when ( state . isNot ( \"otherspace\" ) ) ; will ( returnValue ( \"space2\" 3 ) ) ; allowing ( mockCurrentSpaceReferenceProvider ) . get ( ) ; when ( state . isNot ( \"otherspace\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . SpaceReference ( \"space1\" , new org . xwiki . model . reference . WikiReference ( \"space2\" 3 ) ) ) ) ; allowing ( mockCurrentDocumentReferenceProvider ) . get ( ) ; when ( state . isNot ( \"otherspace\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 3 , \"space1\" , \"document1\" ) ) ) ; allowing ( mockDocumentAccessBridge ) . getCurrentUserReference ( ) ; when ( state . isNot ( \"otherspace\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 2 , \"XWiki\" , \"user\" ) ) ) ; } } ) ; org . xwiki . component . manager . ComponentManager userCM = getComponentManager ( ) . getInstance ( org . xwiki . component . manager . ComponentManager . class , \"space\" ) ; org . xwiki . component . descriptor . DefaultComponentDescriptor < org . xwiki . component . internal . ContextComponentManagerTest . Role > cd = new org . xwiki . component . descriptor . DefaultComponentDescriptor < org . xwiki . component . internal . ContextComponentManagerTest . Role > ( ) ; cd . setRoleType ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) ; cd . setImplementation ( org . xwiki . component . internal . ContextComponentManagerTest . RoleImpl . class ) ; userCM . registerComponent ( cd ) ; org . xwiki . component . manager . ComponentManager contextCM = getComponentManager ( ) . getInstance ( org . xwiki . component . manager . ComponentManager . class , \"context\" ) ; \"<AssertPlaceHolder>\" ; state . become ( \"otherspace\" ) ; getMockery ( ) . checking ( new org . jmock . Expectations ( ) { { exactly ( 1 ) . of ( mockDocumentAccessBridge ) . getCurrentUserReference ( ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 2 , \"XWiki\" , \"user\" ) ) ) ; allowing ( mockWikiDescriptorManager ) . getCurrentWikiId ( ) ; will ( returnValue ( \"space2\" 0 ) ) ; allowing ( mockCurrentSpaceReferenceProvider ) . get ( ) ; will ( returnValue ( new org . xwiki . model . reference . SpaceReference ( \"space2\" , new org . xwiki . model . reference . WikiReference ( \"space2\" 0 ) ) ) ) ; allowing ( mockCurrentDocumentReferenceProvider ) . get ( ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 0 , \"space2\" , \"document2\" ) ) ) ; } } ) ; try { contextCM . getInstance ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) ; org . junit . Assert . fail ( \"space2\" 1 ) ; } catch ( org . xwiki . component . manager . ComponentLookupException expected ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( contextCM . getInstance ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) )", "total": "testRegisterComponentInSpaceComponentManager ( ) { final org . jmock . States state = getMockery ( ) . states ( \"test\" ) ; getMockery ( ) . checking ( new org . jmock . Expectations ( ) { { allowing ( mockWikiDescriptorManager ) . getCurrentWikiId ( ) ; when ( state . isNot ( \"otherspace\" ) ) ; will ( returnValue ( \"space2\" 3 ) ) ; allowing ( mockCurrentSpaceReferenceProvider ) . get ( ) ; when ( state . isNot ( \"otherspace\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . SpaceReference ( \"space1\" , new org . xwiki . model . reference . WikiReference ( \"space2\" 3 ) ) ) ) ; allowing ( mockCurrentDocumentReferenceProvider ) . get ( ) ; when ( state . isNot ( \"otherspace\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 3 , \"space1\" , \"document1\" ) ) ) ; allowing ( mockDocumentAccessBridge ) . getCurrentUserReference ( ) ; when ( state . isNot ( \"otherspace\" ) ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 2 , \"XWiki\" , \"user\" ) ) ) ; } } ) ; org . xwiki . component . manager . ComponentManager userCM = getComponentManager ( ) . getInstance ( org . xwiki . component . manager . ComponentManager . class , \"space\" ) ; org . xwiki . component . descriptor . DefaultComponentDescriptor < org . xwiki . component . internal . ContextComponentManagerTest . Role > cd = new org . xwiki . component . descriptor . DefaultComponentDescriptor < org . xwiki . component . internal . ContextComponentManagerTest . Role > ( ) ; cd . setRoleType ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) ; cd . setImplementation ( org . xwiki . component . internal . ContextComponentManagerTest . RoleImpl . class ) ; userCM . registerComponent ( cd ) ; org . xwiki . component . manager . ComponentManager contextCM = getComponentManager ( ) . getInstance ( org . xwiki . component . manager . ComponentManager . class , \"context\" ) ; \"<AssertPlaceHolder>\" ; state . become ( \"otherspace\" ) ; getMockery ( ) . checking ( new org . jmock . Expectations ( ) { { exactly ( 1 ) . of ( mockDocumentAccessBridge ) . getCurrentUserReference ( ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 2 , \"XWiki\" , \"user\" ) ) ) ; allowing ( mockWikiDescriptorManager ) . getCurrentWikiId ( ) ; will ( returnValue ( \"space2\" 0 ) ) ; allowing ( mockCurrentSpaceReferenceProvider ) . get ( ) ; will ( returnValue ( new org . xwiki . model . reference . SpaceReference ( \"space2\" , new org . xwiki . model . reference . WikiReference ( \"space2\" 0 ) ) ) ) ; allowing ( mockCurrentDocumentReferenceProvider ) . get ( ) ; will ( returnValue ( new org . xwiki . model . reference . DocumentReference ( \"space2\" 0 , \"space2\" , \"document2\" ) ) ) ; } } ) ; try { contextCM . getInstance ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) ; org . junit . Assert . fail ( \"space2\" 1 ) ; } catch ( org . xwiki . component . manager . ComponentLookupException expected ) { } } getInstance ( java . lang . Class ) { try { org . xwiki . component . manager . ComponentManager componentManager = this . componentManagerProvider . get ( ) ; org . xwiki . rest . XWikiRestComponent component = componentManager . getInstance ( org . xwiki . rest . XWikiRestComponent . class , clazz . getName ( ) ) ; org . xwiki . component . descriptor . ComponentDescriptor < org . xwiki . rest . XWikiRestComponent > componentDescriptor = componentManager . getComponentDescriptor ( org . xwiki . rest . XWikiRestComponent . class , clazz . getName ( ) ) ; org . xwiki . context . ExecutionContext executionContext = this . execution . getContext ( ) ; java . util . List < org . xwiki . rest . XWikiRestComponent > releasableComponentReferences = ( ( java . util . List < org . xwiki . rest . XWikiRestComponent > ) ( executionContext . getProperty ( Constants . RELEASABLE_COMPONENT_REFERENCES ) ) ) ; if ( releasableComponentReferences == null ) { releasableComponentReferences = new java . util . ArrayList ( ) ; executionContext . setProperty ( Constants . RELEASABLE_COMPONENT_REFERENCES , releasableComponentReferences ) ; } if ( ( componentDescriptor . getInstantiationStrategy ( ) ) == ( org . xwiki . component . descriptor . ComponentInstantiationStrategy . PER_LOOKUP ) ) { releasableComponentReferences . add ( component ) ; } return ( ( T ) ( component ) ) ; } catch ( org . xwiki . component . manager . ComponentLookupException e ) { throw new org . restlet . ext . jaxrs . InstantiateException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( contextCM . getInstance ( org . xwiki . component . internal . ContextComponentManagerTest . Role . class ) )"}
{"focal": "parse ( java . util . Map ) { java . util . Date now = new java . util . Date ( ) ; java . text . DateFormat df = new java . text . SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ssXX\" ) ; java . lang . String timestamp = df . format ( now ) ; for ( java . util . List < java . util . List < java . lang . String > > submissions : body . values ( ) ) { for ( java . util . List < java . lang . String > submission : submissions ) { if ( ( submission . get ( 0 ) ) == null ) { submission . set ( 0 , timestamp ) ; } } } }", "testMethod": "parse ( ) { java . util . Map < com . intuit . wasabi . experimentobjects . Application . Name , java . util . List < java . util . List < java . lang . String > > > body = new java . util . HashMap < com . intuit . wasabi . experimentobjects . Application . Name , java . util . List < java . util . List < java . lang . String > > > ( ) ; java . util . List < java . util . List < java . lang . String > > sub1 = new java . util . ArrayList < java . util . List < java . lang . String > > ( ) ; java . util . List < java . lang . String > subSub1 = new java . util . ArrayList < java . lang . String > ( ) ; subSub1 . add ( null ) ; sub1 . add ( subSub1 ) ; body . put ( com . intuit . wasabi . api . ImpressionsActionsResourceParserTest . TESTAPP , sub1 ) ; com . intuit . wasabi . api . ImpressionsActionsResourceParser . parse ( body ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( subSub1 . get ( 0 ) )", "total": "parse ( ) { java . util . Map < com . intuit . wasabi . experimentobjects . Application . Name , java . util . List < java . util . List < java . lang . String > > > body = new java . util . HashMap < com . intuit . wasabi . experimentobjects . Application . Name , java . util . List < java . util . List < java . lang . String > > > ( ) ; java . util . List < java . util . List < java . lang . String > > sub1 = new java . util . ArrayList < java . util . List < java . lang . String > > ( ) ; java . util . List < java . lang . String > subSub1 = new java . util . ArrayList < java . lang . String > ( ) ; subSub1 . add ( null ) ; sub1 . add ( subSub1 ) ; body . put ( com . intuit . wasabi . api . ImpressionsActionsResourceParserTest . TESTAPP , sub1 ) ; com . intuit . wasabi . api . ImpressionsActionsResourceParser . parse ( body ) ; \"<AssertPlaceHolder>\" ; } parse ( java . util . Map ) { java . util . Date now = new java . util . Date ( ) ; java . text . DateFormat df = new java . text . SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ssXX\" ) ; java . lang . String timestamp = df . format ( now ) ; for ( java . util . List < java . util . List < java . lang . String > > submissions : body . values ( ) ) { for ( java . util . List < java . lang . String > submission : submissions ) { if ( ( submission . get ( 0 ) ) == null ) { submission . set ( 0 , timestamp ) ; } } } }", "answer": "org . junit . Assert . assertNotNull ( subSub1 . get ( 0 ) )"}
{"focal": "parseCommandLine ( java . lang . String [ ] ) { org . apache . commons . cli . Options options = org . evosuite . CommandLineParameters . getCommandLineOptions ( ) ; java . util . List < java . lang . String > javaOpts = new java . util . ArrayList < java . lang . String > ( ) ; java . lang . String version = org . evosuite . EvoSuite . class . getPackage ( ) . getImplementationVersion ( ) ; if ( version == null ) { version = \"num_parallel_clients\" 0 ; } org . apache . commons . cli . CommandLineParser parser = new org . apache . commons . cli . GnuParser ( ) ; try { org . apache . commons . cli . CommandLine line = parser . parse ( options , args ) ; if ( ! ( line . hasOption ( Setup . NAME ) ) ) { if ( line . hasOption ( Help . NAME ) ) { return org . evosuite . executionmode . Help . execute ( options ) ; } if ( line . hasOption ( Setup . NAME ) ) { return org . evosuite . executionmode . Setup . execute ( javaOpts , line ) ; } if ( line . hasOption ( MeasureCoverage . NAME ) ) { return org . evosuite . executionmode . MeasureCoverage . execute ( options , javaOpts , line ) ; } if ( line . hasOption ( ListClasses . NAME ) ) { return org . evosuite . executionmode . ListClasses . execute ( options , line ) ; } if ( line . hasOption ( WriteDependencies . NAME ) ) { return org . evosuite . executionmode . WriteDependencies . execute ( options , javaOpts , line ) ; } if ( line . hasOption ( PrintStats . NAME ) ) { return org . evosuite . executionmode . PrintStats . execute ( options , javaOpts , line ) ; } if ( line . hasOption ( ListParameters . NAME ) ) { return org . evosuite . executionmode . ListParameters . execute ( ) ; } if ( line . hasOption ( Continuous . NAME ) ) { return org . evosuite . executionmode . Continuous . execute ( options , javaOpts , line ) ; } return org . evosuite . executionmode . TestGeneration . executeTestGeneration ( options , javaOpts , line ) ; } catch ( org . apache . commons . cli . ParseException exp ) { org . evosuite . EvoSuite . logger . error ( ( \"Parsing<sp>failed.<sp>Reason:<sp>\" + ( exp . getMessage ( ) ) ) ) ; org . evosuite . executionmode . Help . execute ( options ) ; } return null ; }", "testMethod": "testGenerateUsingDSE ( ) { org . evosuite . Properties . STRATEGY = org . evosuite . Properties . Strategy . DSE ; org . junit . Assume . assumeTrue ( ( ( java . lang . System . getenv ( \"z3_path\" ) ) != null ) ) ; org . evosuite . Properties . Z3_PATH = java . lang . System . getenv ( \"z3_path\" ) ; org . evosuite . EvoSuite evosuite = new org . evosuite . EvoSuite ( ) ; java . lang . String targetClass = com . examples . with . different . packagename . symbolic . Max . class . getCanonicalName ( ) ; org . evosuite . Properties . TARGET_CLASS = targetClass ; java . lang . String [ ] command = new java . lang . String [ ] { \"-generateSuiteUsingDSE\" , \"-class\" , targetClass } ; java . lang . Object result = evosuite . parseCommandLine ( command ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGenerateUsingDSE ( ) { org . evosuite . Properties . STRATEGY = org . evosuite . Properties . Strategy . DSE ; org . junit . Assume . assumeTrue ( ( ( java . lang . System . getenv ( \"z3_path\" ) ) != null ) ) ; org . evosuite . Properties . Z3_PATH = java . lang . System . getenv ( \"z3_path\" ) ; org . evosuite . EvoSuite evosuite = new org . evosuite . EvoSuite ( ) ; java . lang . String targetClass = com . examples . with . different . packagename . symbolic . Max . class . getCanonicalName ( ) ; org . evosuite . Properties . TARGET_CLASS = targetClass ; java . lang . String [ ] command = new java . lang . String [ ] { \"-generateSuiteUsingDSE\" , \"-class\" , targetClass } ; java . lang . Object result = evosuite . parseCommandLine ( command ) ; \"<AssertPlaceHolder>\" ; } parseCommandLine ( java . lang . String [ ] ) { org . apache . commons . cli . Options options = org . evosuite . CommandLineParameters . getCommandLineOptions ( ) ; java . util . List < java . lang . String > javaOpts = new java . util . ArrayList < java . lang . String > ( ) ; java . lang . String version = org . evosuite . EvoSuite . class . getPackage ( ) . getImplementationVersion ( ) ; if ( version == null ) { version = \"num_parallel_clients\" 0 ; } org . apache . commons . cli . CommandLineParser parser = new org . apache . commons . cli . GnuParser ( ) ; try { org . apache . commons . cli . CommandLine line = parser . parse ( options , args ) ; if ( ! ( line . hasOption ( Setup . NAME ) ) ) { if ( line . hasOption ( Help . NAME ) ) { return org . evosuite . executionmode . Help . execute ( options ) ; } if ( line . hasOption ( Setup . NAME ) ) { return org . evosuite . executionmode . Setup . execute ( javaOpts , line ) ; } if ( line . hasOption ( MeasureCoverage . NAME ) ) { return org . evosuite . executionmode . MeasureCoverage . execute ( options , javaOpts , line ) ; } if ( line . hasOption ( ListClasses . NAME ) ) { return org . evosuite . executionmode . ListClasses . execute ( options , line ) ; } if ( line . hasOption ( WriteDependencies . NAME ) ) { return org . evosuite . executionmode . WriteDependencies . execute ( options , javaOpts , line ) ; } if ( line . hasOption ( PrintStats . NAME ) ) { return org . evosuite . executionmode . PrintStats . execute ( options , javaOpts , line ) ; } if ( line . hasOption ( ListParameters . NAME ) ) { return org . evosuite . executionmode . ListParameters . execute ( ) ; } if ( line . hasOption ( Continuous . NAME ) ) { return org . evosuite . executionmode . Continuous . execute ( options , javaOpts , line ) ; } return org . evosuite . executionmode . TestGeneration . executeTestGeneration ( options , javaOpts , line ) ; } catch ( org . apache . commons . cli . ParseException exp ) { org . evosuite . EvoSuite . logger . error ( ( \"Parsing<sp>failed.<sp>Reason:<sp>\" + ( exp . getMessage ( ) ) ) ) ; org . evosuite . executionmode . Help . execute ( options ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "unmarshalAndValidate ( java . lang . String ) { java . net . URI uri = getClass ( ) . getResource ( path ) . toURI ( ) ; return new org . apache . karaf . features . internal . service . RepositoryImpl ( uri , true ) ; }", "testMethod": "testNs10 ( ) { org . apache . karaf . features . Repository features = unmarshalAndValidate ( \"f02.xml\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( features )", "total": "testNs10 ( ) { org . apache . karaf . features . Repository features = unmarshalAndValidate ( \"f02.xml\" ) ; \"<AssertPlaceHolder>\" ; } unmarshalAndValidate ( java . lang . String ) { java . net . URI uri = getClass ( ) . getResource ( path ) . toURI ( ) ; return new org . apache . karaf . features . internal . service . RepositoryImpl ( uri , true ) ; }", "answer": "org . junit . Assert . assertNotNull ( features )"}
{"focal": "instanceForModifyRemoveAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>remove<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>remove<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"remove\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "testMethod": "testModifyTicketRemoveGroup ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyRemoveAccess ( ticketId , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_GROUP , groupName ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pi )", "total": "testModifyTicketRemoveGroup ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyRemoveAccess ( ticketId , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_GROUP , groupName ) ; \"<AssertPlaceHolder>\" ; } instanceForModifyRemoveAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>remove<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>remove<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"remove\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "answer": "org . junit . Assert . assertNotNull ( pi )"}
{"focal": "reserveConnection ( ) { if ( ! ( initialized ) ) { initializeConnections ( ) ; } if ( availableConnections . isEmpty ( ) ) { if ( ( reservedConnections . size ( ) ) < ( maxConnections ) ) { availableConnections . add ( createConnection ( ) ) ; } else { throw new java . sql . SQLException ( \"Connection<sp>limit<sp>has<sp>been<sp>reached.\" ) ; } } java . sql . Connection c = availableConnections . iterator ( ) . next ( ) ; availableConnections . remove ( c ) ; reservedConnections . add ( c ) ; return c ; }", "testMethod": "getCount_normalState_releasesConnection ( ) { com . vaadin . v7 . data . util . sqlcontainer . query . TableQuery tQuery = new com . vaadin . v7 . data . util . sqlcontainer . query . TableQuery ( \"people\" , connectionPool , com . vaadin . v7 . data . util . sqlcontainer . SQLTestsConstants . sqlGen ) ; tQuery . getCount ( ) ; tQuery . getCount ( ) ; java . sql . Connection c = connectionPool . reserveConnection ( ) ; \"<AssertPlaceHolder>\" ; connectionPool . releaseConnection ( c ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( c )", "total": "getCount_normalState_releasesConnection ( ) { com . vaadin . v7 . data . util . sqlcontainer . query . TableQuery tQuery = new com . vaadin . v7 . data . util . sqlcontainer . query . TableQuery ( \"people\" , connectionPool , com . vaadin . v7 . data . util . sqlcontainer . SQLTestsConstants . sqlGen ) ; tQuery . getCount ( ) ; tQuery . getCount ( ) ; java . sql . Connection c = connectionPool . reserveConnection ( ) ; \"<AssertPlaceHolder>\" ; connectionPool . releaseConnection ( c ) ; } reserveConnection ( ) { if ( ! ( initialized ) ) { initializeConnections ( ) ; } if ( availableConnections . isEmpty ( ) ) { if ( ( reservedConnections . size ( ) ) < ( maxConnections ) ) { availableConnections . add ( createConnection ( ) ) ; } else { throw new java . sql . SQLException ( \"Connection<sp>limit<sp>has<sp>been<sp>reached.\" ) ; } } java . sql . Connection c = availableConnections . iterator ( ) . next ( ) ; availableConnections . remove ( c ) ; reservedConnections . add ( c ) ; return c ; }", "answer": "org . junit . Assert . assertNotNull ( c )"}
{"focal": "getUrl ( ) { return url ; }", "testMethod": "testGetUrl_1 ( ) { org . jinstagram . http . Request fixture = new org . jinstagram . http . Request ( Verbs . DELETE , \"\" ) ; fixture . setConnectionKeepAlive ( true ) ; fixture . setCharset ( \"UTF-8\" ) ; fixture . addPayload ( \"Dummy<sp>payload\" ) ; fixture . setConnection ( mockHttpConnection ) ; fixture . setProxy ( org . jinstagram . http . RequestTest . proxy ) ; java . lang . String result = fixture . getUrl ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetUrl_1 ( ) { org . jinstagram . http . Request fixture = new org . jinstagram . http . Request ( Verbs . DELETE , \"\" ) ; fixture . setConnectionKeepAlive ( true ) ; fixture . setCharset ( \"UTF-8\" ) ; fixture . addPayload ( \"Dummy<sp>payload\" ) ; fixture . setConnection ( mockHttpConnection ) ; fixture . setProxy ( org . jinstagram . http . RequestTest . proxy ) ; java . lang . String result = fixture . getUrl ( ) ; \"<AssertPlaceHolder>\" ; } getUrl ( ) { return url ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "setDob ( java . util . Date ) { this . dob = dob ; }", "testMethod": "register ( ) { com . packtpub . techbuzz . entities . User user = new com . packtpub . techbuzz . entities . User ( ) ; user . setPassword ( \"bar\" ) ; user . setFirstName ( \"Mr\" ) ; user . setLastName ( \"Foo\" ) ; user . setEmailId ( \"foo@gmail.com\" ) ; user . setPhone ( \"922221222545\" ) ; user . setDob ( new java . util . Date ( ) ) ; user . setDisabled ( false ) ; com . packtpub . techbuzz . entities . User createdUser = userService . register ( user ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( createdUser )", "total": "register ( ) { com . packtpub . techbuzz . entities . User user = new com . packtpub . techbuzz . entities . User ( ) ; user . setPassword ( \"bar\" ) ; user . setFirstName ( \"Mr\" ) ; user . setLastName ( \"Foo\" ) ; user . setEmailId ( \"foo@gmail.com\" ) ; user . setPhone ( \"922221222545\" ) ; user . setDob ( new java . util . Date ( ) ) ; user . setDisabled ( false ) ; com . packtpub . techbuzz . entities . User createdUser = userService . register ( user ) ; \"<AssertPlaceHolder>\" ; } setDob ( java . util . Date ) { this . dob = dob ; }", "answer": "org . junit . Assert . assertNotNull ( createdUser )"}
{"focal": "getImage ( ) { return null ; }", "testMethod": "testRun_imageLoaded ( ) { loadJob = new com . google . cloud . tools . eclipse . login . ui . LabelImageLoadJob ( url , label ) ; runAndWaitJob ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( label . getImage ( ) )", "total": "testRun_imageLoaded ( ) { loadJob = new com . google . cloud . tools . eclipse . login . ui . LabelImageLoadJob ( url , label ) ; runAndWaitJob ( ) ; \"<AssertPlaceHolder>\" ; } getImage ( ) { return null ; }", "answer": "org . junit . Assert . assertNotNull ( label . getImage ( ) )"}
{"focal": "executeQuery ( javax . persistence . TypedQuery ) { java . util . List < T > ret = null ; ret = qry . getResultList ( ) ; return ret ; }", "testMethod": "testTagBasedPolicyForTable ( ) { java . lang . String url = \"jdbc:hive2://localhost:\" + ( org . apache . ranger . services . hive . HIVERangerAuthorizerTest . port ) ; java . sql . Connection connection = java . sql . DriverManager . getConnection ( url , \"admin\" , \"admin\" ) ; java . sql . Statement statement = connection . createStatement ( ) ; statement . execute ( \"SELECT<sp>*<sp>FROM<sp>words\" 4 ) ; statement . close ( ) ; connection . close ( ) ; final java . lang . String tableUrl = ( \"jdbc:hive2://localhost:\" + ( org . apache . ranger . services . hive . HIVERangerAuthorizerTest . port ) ) + \"SELECT<sp>*<sp>FROM<sp>words\" 7 ; connection = java . sql . DriverManager . getConnection ( tableUrl , \"admin\" , \"admin\" ) ; statement = connection . createStatement ( ) ; statement . execute ( \"CREATE<sp>TABLE<sp>WORDS<sp>(word<sp>STRING,<sp>count<sp>INT)\" ) ; statement . execute ( \"CREATE<sp>TABLE<sp>WORDS2<sp>(word<sp>STRING,<sp>count<sp>INT)\" ) ; statement . close ( ) ; connection . close ( ) ; org . apache . hadoop . security . UserGroupInformation ugi = org . apache . hadoop . security . UserGroupInformation . createUserForTesting ( \"alice\" , new java . lang . String [ ] { \"SELECT<sp>*<sp>FROM<sp>words\" 1 } ) ; ugi . doAs ( new java . security . PrivilegedExceptionAction < java . lang . Void > ( ) { public org . apache . ranger . services . hive . Void run ( ) throws org . apache . ranger . services . hive . Exception { java . sql . Connection connection = java . sql . DriverManager . getConnection ( tableUrl , \"alice\" , \"alice\" ) ; java . sql . Statement statement = connection . createStatement ( ) ; java . sql . ResultSet resultSet = statement . executeQuery ( \"SELECT<sp>*<sp>FROM<sp>words\" ) ; \"<AssertPlaceHolder>\" ; statement . close ( ) ; statement = connection . createStatement ( ) ; try { statement . executeQuery ( \"SELECT<sp>*<sp>FROM<sp>words\" 0 ) ; org . junit . Assert . fail ( \"SELECT<sp>*<sp>FROM<sp>words\" 2 ) ; } catch ( java . sql . SQLException ex ) { } statement . close ( ) ; connection . close ( ) ; return null ; } } ) ; connection = java . sql . DriverManager . getConnection ( tableUrl , \"admin\" , \"admin\" ) ; statement = connection . createStatement ( ) ; statement . execute ( \"SELECT<sp>*<sp>FROM<sp>words\" 3 ) ; statement . execute ( \"drop<sp>TABLE<sp>words2\" ) ; statement . execute ( \"SELECT<sp>*<sp>FROM<sp>words\" 5 ) ; statement . close ( ) ; connection . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( resultSet )", "total": "testTagBasedPolicyForTable ( ) { java . lang . String url = \"jdbc:hive2://localhost:\" + ( org . apache . ranger . services . hive . HIVERangerAuthorizerTest . port ) ; java . sql . Connection connection = java . sql . DriverManager . getConnection ( url , \"admin\" , \"admin\" ) ; java . sql . Statement statement = connection . createStatement ( ) ; statement . execute ( \"SELECT<sp>*<sp>FROM<sp>words\" 4 ) ; statement . close ( ) ; connection . close ( ) ; final java . lang . String tableUrl = ( \"jdbc:hive2://localhost:\" + ( org . apache . ranger . services . hive . HIVERangerAuthorizerTest . port ) ) + \"SELECT<sp>*<sp>FROM<sp>words\" 7 ; connection = java . sql . DriverManager . getConnection ( tableUrl , \"admin\" , \"admin\" ) ; statement = connection . createStatement ( ) ; statement . execute ( \"CREATE<sp>TABLE<sp>WORDS<sp>(word<sp>STRING,<sp>count<sp>INT)\" ) ; statement . execute ( \"CREATE<sp>TABLE<sp>WORDS2<sp>(word<sp>STRING,<sp>count<sp>INT)\" ) ; statement . close ( ) ; connection . close ( ) ; org . apache . hadoop . security . UserGroupInformation ugi = org . apache . hadoop . security . UserGroupInformation . createUserForTesting ( \"alice\" , new java . lang . String [ ] { \"SELECT<sp>*<sp>FROM<sp>words\" 1 } ) ; ugi . doAs ( new java . security . PrivilegedExceptionAction < java . lang . Void > ( ) { public org . apache . ranger . services . hive . Void run ( ) throws org . apache . ranger . services . hive . Exception { java . sql . Connection connection = java . sql . DriverManager . getConnection ( tableUrl , \"alice\" , \"alice\" ) ; java . sql . Statement statement = connection . createStatement ( ) ; java . sql . ResultSet resultSet = statement . executeQuery ( \"SELECT<sp>*<sp>FROM<sp>words\" ) ; \"<AssertPlaceHolder>\" ; statement . close ( ) ; statement = connection . createStatement ( ) ; try { statement . executeQuery ( \"SELECT<sp>*<sp>FROM<sp>words\" 0 ) ; org . junit . Assert . fail ( \"SELECT<sp>*<sp>FROM<sp>words\" 2 ) ; } catch ( java . sql . SQLException ex ) { } statement . close ( ) ; connection . close ( ) ; return null ; } } ) ; connection = java . sql . DriverManager . getConnection ( tableUrl , \"admin\" , \"admin\" ) ; statement = connection . createStatement ( ) ; statement . execute ( \"SELECT<sp>*<sp>FROM<sp>words\" 3 ) ; statement . execute ( \"drop<sp>TABLE<sp>words2\" ) ; statement . execute ( \"SELECT<sp>*<sp>FROM<sp>words\" 5 ) ; statement . close ( ) ; connection . close ( ) ; } executeQuery ( javax . persistence . TypedQuery ) { java . util . List < T > ret = null ; ret = qry . getResultList ( ) ; return ret ; }", "answer": "org . junit . Assert . assertNotNull ( resultSet )"}
{"focal": "toString ( ) { return fName ; }", "testMethod": "testToStringStringArray ( ) { java . lang . String result = stringArrayFixture . toString ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testToStringStringArray ( ) { java . lang . String result = stringArrayFixture . toString ( ) ; \"<AssertPlaceHolder>\" ; } toString ( ) { return fName ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "createAuthConfig ( boolean , boolean , java . util . Map , org . apache . maven . settings . Settings , java . lang . String , java . lang . String ) { io . fabric8 . maven . docker . access . AuthConfig ret = createStandardAuthConfig ( isPush , authConfig , settings , user , registry ) ; if ( ret != null ) { if ( ( registry == null ) || skipExtendedAuth ) { return ret ; } try { return extendedAuthentication ( ret , registry ) ; } catch ( java . io . IOException e ) { throw new org . apache . maven . plugin . MojoExecutionException ( e . getMessage ( ) , e ) ; } } ret = getAuthConfigFromDockerConfig ( registry ) ; if ( ret != null ) { log . debug ( \"AuthConfig:<sp>credentials<sp>from<sp>~/.docker/config.json\" ) ; return ret ; } log . debug ( \"AuthConfig:<sp>no<sp>credentials<sp>found\" ) ; return null ; }", "testMethod": "testFromSettingsSimple ( ) { setupServers ( ) ; io . fabric8 . maven . docker . access . AuthConfig config = factory . createAuthConfig ( isPush , false , null , settings , \"roland\" , \"test.org\" ) ; \"<AssertPlaceHolder>\" ; verifyAuthConfig ( config , \"roland\" , \"secret\" , \"roland@jolokia.org\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( config )", "total": "testFromSettingsSimple ( ) { setupServers ( ) ; io . fabric8 . maven . docker . access . AuthConfig config = factory . createAuthConfig ( isPush , false , null , settings , \"roland\" , \"test.org\" ) ; \"<AssertPlaceHolder>\" ; verifyAuthConfig ( config , \"roland\" , \"secret\" , \"roland@jolokia.org\" ) ; } createAuthConfig ( boolean , boolean , java . util . Map , org . apache . maven . settings . Settings , java . lang . String , java . lang . String ) { io . fabric8 . maven . docker . access . AuthConfig ret = createStandardAuthConfig ( isPush , authConfig , settings , user , registry ) ; if ( ret != null ) { if ( ( registry == null ) || skipExtendedAuth ) { return ret ; } try { return extendedAuthentication ( ret , registry ) ; } catch ( java . io . IOException e ) { throw new org . apache . maven . plugin . MojoExecutionException ( e . getMessage ( ) , e ) ; } } ret = getAuthConfigFromDockerConfig ( registry ) ; if ( ret != null ) { log . debug ( \"AuthConfig:<sp>credentials<sp>from<sp>~/.docker/config.json\" ) ; return ret ; } log . debug ( \"AuthConfig:<sp>no<sp>credentials<sp>found\" ) ; return null ; }", "answer": "org . junit . Assert . assertNotNull ( config )"}
{"focal": "buildDocument ( ) { org . openhealthtools . mdht . uml . cda . ClinicalDocument clinicalDocument = CDAFactory . eINSTANCE . createClinicalDocument ( ) ; construct ( clinicalDocument ) ; return clinicalDocument ; }", "testMethod": "testCreateContinuityOfCareDocumentBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . DocumentBuilder < org . openhealthtools . mdht . uml . cda . ccd . ContinuityOfCareDocument > clinicalDocumentBuilder = org . openhealthtools . mdht . uml . cda . ccd . builder . CCDBuilderFactory . createContinuityOfCareDocumentBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ccd . ContinuityOfCareDocument continuityOfCareDocument = clinicalDocumentBuilder . buildDocument ( ) ; \"<AssertPlaceHolder>\" ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . save ( continuityOfCareDocument , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( continuityOfCareDocument )", "total": "testCreateContinuityOfCareDocumentBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . DocumentBuilder < org . openhealthtools . mdht . uml . cda . ccd . ContinuityOfCareDocument > clinicalDocumentBuilder = org . openhealthtools . mdht . uml . cda . ccd . builder . CCDBuilderFactory . createContinuityOfCareDocumentBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ccd . ContinuityOfCareDocument continuityOfCareDocument = clinicalDocumentBuilder . buildDocument ( ) ; \"<AssertPlaceHolder>\" ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . save ( continuityOfCareDocument , System . out ) ; } buildDocument ( ) { org . openhealthtools . mdht . uml . cda . ClinicalDocument clinicalDocument = CDAFactory . eINSTANCE . createClinicalDocument ( ) ; construct ( clinicalDocument ) ; return clinicalDocument ; }", "answer": "org . junit . Assert . assertNotNull ( continuityOfCareDocument )"}
{"focal": "getBuilder ( ) { return org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ; }", "testMethod": "testNewAtomContainerSet ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . AbstractChemObjectBuilderTest . rootObject . getBuilder ( ) ; org . openscience . cdk . interfaces . IAtomContainerSet set = builder . newInstance ( org . openscience . cdk . interfaces . IAtomContainerSet . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( set )", "total": "testNewAtomContainerSet ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . AbstractChemObjectBuilderTest . rootObject . getBuilder ( ) ; org . openscience . cdk . interfaces . IAtomContainerSet set = builder . newInstance ( org . openscience . cdk . interfaces . IAtomContainerSet . class ) ; \"<AssertPlaceHolder>\" ; } getBuilder ( ) { return org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( set )"}
{"focal": "getOrganizationReference ( org . oscm . domobjects . Organization , org . oscm . domobjects . Organization ) { for ( org . oscm . domobjects . OrganizationReference reference : targetOrganization . getSourcesForType ( OrganizationReferenceType . ON_BEHALF_ACTING ) ) { if ( ( ( reference . getSource ( ) . getKey ( ) ) == ( sourceOrganization . getKey ( ) ) ) && ( ( reference . getTargetKey ( ) ) == ( targetOrganization . getKey ( ) ) ) ) { return reference ; } } return null ; }", "testMethod": "testCreateTwoSubscriptionsBasedOnTwoTechnicalServices_OnBehalf ( ) { java . lang . String subId1 = java . lang . Long . toString ( java . lang . System . currentTimeMillis ( ) ) ; java . lang . String subId2 = java . lang . Long . toString ( ( ( java . lang . System . currentTimeMillis ( ) ) + 1 ) ) ; org . oscm . internal . vo . VOSubscription sub1 = subMgmt . subscribeToService ( org . oscm . test . data . Subscriptions . createVOSubscription ( subId1 ) , org . oscm . serviceprovisioningservice . assembler . ProductAssembler . toVOProduct ( testPrdOnbehalf , new org . oscm . i18nservice . bean . LocalizerFacade ( localizer , \"en\" ) ) , null , null , null , new java . util . ArrayList < org . oscm . internal . vo . VOUda > ( ) ) ; final long sub1Key = sub1 . getKey ( ) ; subMgmt . subscribeToService ( org . oscm . test . data . Subscriptions . createVOSubscription ( subId2 ) , org . oscm . serviceprovisioningservice . assembler . ProductAssembler . toVOProduct ( testPrd2Onbehalf , new org . oscm . i18nservice . bean . LocalizerFacade ( localizer , \"en\" ) ) , null , null , null , new java . util . ArrayList < org . oscm . internal . vo . VOUda > ( ) ) ; runTX ( new java . util . concurrent . Callable < java . lang . Void > ( ) { @ org . oscm . subscriptionservice . bean . Override public org . oscm . subscriptionservice . bean . Void call ( ) throws org . oscm . subscriptionservice . bean . Exception { org . oscm . domobjects . Subscription subscription = mgr . find ( org . oscm . domobjects . Subscription . class , sub1Key ) ; org . oscm . domobjects . Organization sourceOrganization = subscription . getProduct ( ) . getTechnicalProduct ( ) . getOrganization ( ) ; org . oscm . domobjects . Organization targetOrganization = subscription . getOrganization ( ) ; \"<AssertPlaceHolder>\" ; return null ; } } ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( getOrganizationReference ( sourceOrganization , targetOrganization ) )", "total": "testCreateTwoSubscriptionsBasedOnTwoTechnicalServices_OnBehalf ( ) { java . lang . String subId1 = java . lang . Long . toString ( java . lang . System . currentTimeMillis ( ) ) ; java . lang . String subId2 = java . lang . Long . toString ( ( ( java . lang . System . currentTimeMillis ( ) ) + 1 ) ) ; org . oscm . internal . vo . VOSubscription sub1 = subMgmt . subscribeToService ( org . oscm . test . data . Subscriptions . createVOSubscription ( subId1 ) , org . oscm . serviceprovisioningservice . assembler . ProductAssembler . toVOProduct ( testPrdOnbehalf , new org . oscm . i18nservice . bean . LocalizerFacade ( localizer , \"en\" ) ) , null , null , null , new java . util . ArrayList < org . oscm . internal . vo . VOUda > ( ) ) ; final long sub1Key = sub1 . getKey ( ) ; subMgmt . subscribeToService ( org . oscm . test . data . Subscriptions . createVOSubscription ( subId2 ) , org . oscm . serviceprovisioningservice . assembler . ProductAssembler . toVOProduct ( testPrd2Onbehalf , new org . oscm . i18nservice . bean . LocalizerFacade ( localizer , \"en\" ) ) , null , null , null , new java . util . ArrayList < org . oscm . internal . vo . VOUda > ( ) ) ; runTX ( new java . util . concurrent . Callable < java . lang . Void > ( ) { @ org . oscm . subscriptionservice . bean . Override public org . oscm . subscriptionservice . bean . Void call ( ) throws org . oscm . subscriptionservice . bean . Exception { org . oscm . domobjects . Subscription subscription = mgr . find ( org . oscm . domobjects . Subscription . class , sub1Key ) ; org . oscm . domobjects . Organization sourceOrganization = subscription . getProduct ( ) . getTechnicalProduct ( ) . getOrganization ( ) ; org . oscm . domobjects . Organization targetOrganization = subscription . getOrganization ( ) ; \"<AssertPlaceHolder>\" ; return null ; } } ) ; } getOrganizationReference ( org . oscm . domobjects . Organization , org . oscm . domobjects . Organization ) { for ( org . oscm . domobjects . OrganizationReference reference : targetOrganization . getSourcesForType ( OrganizationReferenceType . ON_BEHALF_ACTING ) ) { if ( ( ( reference . getSource ( ) . getKey ( ) ) == ( sourceOrganization . getKey ( ) ) ) && ( ( reference . getTargetKey ( ) ) == ( targetOrganization . getKey ( ) ) ) ) { return reference ; } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( getOrganizationReference ( sourceOrganization , targetOrganization ) )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . RoomBed entity = new org . oscarehr . common . model . RoomBed ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; entity . getId ( ) . setBedId ( 1 ) ; entity . getId ( ) . setRoomId ( 1 ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . RoomBed entity = new org . oscarehr . common . model . RoomBed ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; entity . getId ( ) . setBedId ( 1 ) ; entity . getId ( ) . setRoomId ( 1 ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "getEditingPropertyFields ( java . lang . String , java . lang . String , java . lang . String ) { com . google . gwt . dom . client . LIElement toReturn = getPropertyFields ( itemId , propertyName , propertyValue ) ; editProperties ( itemId ) ; return toReturn ; }", "testMethod": "getEditingPropertyFields ( ) { \"<AssertPlaceHolder>\" ; verify ( propertyEditorPresenter , times ( 1 ) ) . getPropertyFields ( eq ( org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . ITEM_ID ) , eq ( org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . TEST_PROPERTYNAME ) , eq ( org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . TEST_PROPERTYVALUE ) ) ; verify ( propertyEditorPresenter , times ( 1 ) ) . editProperties ( eq ( org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . ITEM_ID ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( propertyEditorPresenter . getEditingPropertyFields ( org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . ITEM_ID , org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . TEST_PROPERTYNAME , org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . TEST_PROPERTYVALUE ) )", "total": "getEditingPropertyFields ( ) { \"<AssertPlaceHolder>\" ; verify ( propertyEditorPresenter , times ( 1 ) ) . getPropertyFields ( eq ( org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . ITEM_ID ) , eq ( org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . TEST_PROPERTYNAME ) , eq ( org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . TEST_PROPERTYVALUE ) ) ; verify ( propertyEditorPresenter , times ( 1 ) ) . editProperties ( eq ( org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . ITEM_ID ) ) ; } getEditingPropertyFields ( java . lang . String , java . lang . String , java . lang . String ) { com . google . gwt . dom . client . LIElement toReturn = getPropertyFields ( itemId , propertyName , propertyValue ) ; editProperties ( itemId ) ; return toReturn ; }", "answer": "org . junit . Assert . assertNotNull ( propertyEditorPresenter . getEditingPropertyFields ( org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . ITEM_ID , org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . TEST_PROPERTYNAME , org . drools . workbench . screens . scenariosimulation . client . collectioneditor . PropertyPresenterTest . TEST_PROPERTYVALUE ) )"}
{"focal": "getOntologyEntryByAcc ( java . lang . String ) { return ( ( T ) ( uk . ac . ebi . bioinvindex . dao . ejb3 . OntologyEntryEJB3DAO . getSession ( ) . createCriteria ( uk . ac . ebi . bioinvindex . dao . ejb3 . OntologyEntryEJB3DAO . getPersistentClass ( ) ) . add ( org . hibernate . criterion . Restrictions . eq ( \"acc\" , acc ) ) . uniqueResult ( ) ) ) ; }", "testMethod": "testGetOntologyEntryByAcc ( ) { uk . ac . ebi . bioinvindex . dao . ejb3 . OntologyEntryEJB3DAO dao = ( ( uk . ac . ebi . bioinvindex . dao . ejb3 . OntologyEntryEJB3DAO ) ( daoFactory . getOntologyEntryDAO ( ) ) ) ; uk . ac . ebi . bioinvindex . model . term . OntologyEntry ontologyEntryByAcc = dao . getOntologyEntryByAcc ( \"OBI-AT1\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ontologyEntryByAcc )", "total": "testGetOntologyEntryByAcc ( ) { uk . ac . ebi . bioinvindex . dao . ejb3 . OntologyEntryEJB3DAO dao = ( ( uk . ac . ebi . bioinvindex . dao . ejb3 . OntologyEntryEJB3DAO ) ( daoFactory . getOntologyEntryDAO ( ) ) ) ; uk . ac . ebi . bioinvindex . model . term . OntologyEntry ontologyEntryByAcc = dao . getOntologyEntryByAcc ( \"OBI-AT1\" ) ; \"<AssertPlaceHolder>\" ; } getOntologyEntryByAcc ( java . lang . String ) { return ( ( T ) ( uk . ac . ebi . bioinvindex . dao . ejb3 . OntologyEntryEJB3DAO . getSession ( ) . createCriteria ( uk . ac . ebi . bioinvindex . dao . ejb3 . OntologyEntryEJB3DAO . getPersistentClass ( ) ) . add ( org . hibernate . criterion . Restrictions . eq ( \"acc\" , acc ) ) . uniqueResult ( ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( ontologyEntryByAcc )"}
{"focal": "getCamelContext ( ) { return camelContext ; }", "testMethod": "testMyMain ( ) { org . apache . camel . test . blueprint . Main main = new org . apache . camel . test . blueprint . Main ( ) ; run ( main ) ; org . apache . camel . CamelContext camelContext = main . getCamelContext ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( camelContext )", "total": "testMyMain ( ) { org . apache . camel . test . blueprint . Main main = new org . apache . camel . test . blueprint . Main ( ) ; run ( main ) ; org . apache . camel . CamelContext camelContext = main . getCamelContext ( ) ; \"<AssertPlaceHolder>\" ; } getCamelContext ( ) { return camelContext ; }", "answer": "org . junit . Assert . assertNotNull ( camelContext )"}
{"focal": "findList ( ) { return server . findList ( this , null ) ; }", "testMethod": "test_upperCaseSql ( ) { org . tests . model . basic . ResetBasicData . reset ( ) ; io . ebean . RawSql rawSql = io . ebean . RawSqlBuilder . parse ( \"select<sp>id,<sp>NAME<sp>from<sp>O_CUSTOMER<sp>\" ) . create ( ) ; io . ebean . Query < org . tests . model . basic . Customer > query = io . ebean . Ebean . find ( org . tests . model . basic . Customer . class ) ; query . setRawSql ( rawSql ) ; query . where ( ) . ilike ( \"name\" , \"r%\" ) ; java . util . List < org . tests . model . basic . Customer > list = query . findList ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( list )", "total": "test_upperCaseSql ( ) { org . tests . model . basic . ResetBasicData . reset ( ) ; io . ebean . RawSql rawSql = io . ebean . RawSqlBuilder . parse ( \"select<sp>id,<sp>NAME<sp>from<sp>O_CUSTOMER<sp>\" ) . create ( ) ; io . ebean . Query < org . tests . model . basic . Customer > query = io . ebean . Ebean . find ( org . tests . model . basic . Customer . class ) ; query . setRawSql ( rawSql ) ; query . where ( ) . ilike ( \"name\" , \"r%\" ) ; java . util . List < org . tests . model . basic . Customer > list = query . findList ( ) ; \"<AssertPlaceHolder>\" ; } findList ( ) { return server . findList ( this , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( list )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . TicklerLink entity = new org . oscarehr . common . model . TicklerLink ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . TicklerLink entity = new org . oscarehr . common . model . TicklerLink ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "getCreatedAt ( ) { return createdAt ; }", "testMethod": "testParseUser ( ) { java . lang . String content = readResource ( \"/weiboclient4j/model/users.json\" ) ; weiboclient4j . model . User user = parseJsonObject ( content , weiboclient4j . model . User . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( user . getCreatedAt ( ) )", "total": "testParseUser ( ) { java . lang . String content = readResource ( \"/weiboclient4j/model/users.json\" ) ; weiboclient4j . model . User user = parseJsonObject ( content , weiboclient4j . model . User . class ) ; \"<AssertPlaceHolder>\" ; } getCreatedAt ( ) { return createdAt ; }", "answer": "org . junit . Assert . assertNotNull ( user . getCreatedAt ( ) )"}
{"focal": "toString ( ) { return ( ( ( \"BuilderNode:<sp>\" + ( this . getClass ( ) . getName ( ) ) ) + \"<sp>(\\\"\" ) + ( getNodeName ( ) ) ) + \"\\\")\" ; }", "testMethod": "testSetPropertyIsNotAllowed ( ) { \"<AssertPlaceHolder>\" ; Characteristics . CDI . setProperty ( \"injection\" , \"true\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( Characteristics . CDI . toString ( ) )", "total": "testSetPropertyIsNotAllowed ( ) { \"<AssertPlaceHolder>\" ; Characteristics . CDI . setProperty ( \"injection\" , \"true\" ) ; } toString ( ) { return ( ( ( \"BuilderNode:<sp>\" + ( this . getClass ( ) . getName ( ) ) ) + \"<sp>(\\\"\" ) + ( getNodeName ( ) ) ) + \"\\\")\" ; }", "answer": "org . junit . Assert . assertNotNull ( Characteristics . CDI . toString ( ) )"}
{"focal": "buildPrimitivesSerializableJSON ( ) { com . liferay . portal . json . FooBean6 fooBean6 = new com . liferay . portal . json . FooBean6 ( ) ; initializePrimitives ( fooBean6 ) ; return com . liferay . portal . kernel . json . JSONFactoryUtil . serialize ( fooBean6 ) ; }", "testMethod": "testSerializePrimitivesSerializable ( ) { java . lang . String json = buildPrimitivesSerializableJSON ( ) ; \"<AssertPlaceHolder>\" ; checkJSONPrimitives ( json ) ; checkJSONSerializableArgument ( json ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( json )", "total": "testSerializePrimitivesSerializable ( ) { java . lang . String json = buildPrimitivesSerializableJSON ( ) ; \"<AssertPlaceHolder>\" ; checkJSONPrimitives ( json ) ; checkJSONSerializableArgument ( json ) ; } buildPrimitivesSerializableJSON ( ) { com . liferay . portal . json . FooBean6 fooBean6 = new com . liferay . portal . json . FooBean6 ( ) ; initializePrimitives ( fooBean6 ) ; return com . liferay . portal . kernel . json . JSONFactoryUtil . serialize ( fooBean6 ) ; }", "answer": "org . junit . Assert . assertNotNull ( json )"}
{"focal": "next ( ) { if ( ! ( hasNext ( ) ) ) { throw new java . util . NoSuchElementException ( ) ; } final java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; while ( ( this . current ) < ( this . length ) ) { final char c = this . path . charAt ( this . current ) ; if ( c == '/' ) { eatUp ( ) ; break ; } sb . append ( c ) ; ( this . current ) ++ ; } return sb . toString ( ) ; }", "testMethod": "testMvn1 ( ) { final org . eclipse . packagedrone . testing . server . channel . ChannelTester ct = org . eclipse . packagedrone . testing . server . channel . ChannelTester . create ( getWebContext ( ) , \"deploy\" 3 ) ; ct . addAspect ( \"mvn\" ) ; ct . addAspect ( \"maven.repo\" ) ; ct . assignDeployGroup ( \"deploy\" 3 ) ; final java . lang . String key = ct . getDeployKeys ( ) . iterator ( ) . next ( ) ; \"<AssertPlaceHolder>\" ; final org . eclipse . aether . RepositorySystem system = org . eclipse . packagedrone . testing . server . maven . MavenUtil . newRepositorySystem ( ) ; final org . eclipse . aether . RepositorySystemSession session = org . eclipse . packagedrone . testing . server . maven . MavenUtil . newRepositorySystemSession ( system ) ; org . eclipse . aether . artifact . Artifact jarArtifact = new org . eclipse . aether . artifact . DefaultArtifact ( \"org.eclipse.packagedrone.testing\" , \"deploy\" 2 , \"\" , \"deploy\" 1 , \"0.0.1-SNAPSHOT\" ) ; jarArtifact = jarArtifact . setFile ( new java . io . File ( org . eclipse . packagedrone . testing . server . channel . MavenTest . TEST_1_JAR ) ) ; org . eclipse . aether . artifact . Artifact pomArtifact = new org . eclipse . aether . util . artifact . SubArtifact ( jarArtifact , \"\" , \"pom\" ) ; pomArtifact = pomArtifact . setFile ( new java . io . File ( org . eclipse . packagedrone . testing . server . channel . MavenTest . TEST_1_POM ) ) ; org . eclipse . aether . artifact . Artifact srcArtifact = new org . eclipse . aether . util . artifact . SubArtifact ( jarArtifact , \"sources\" , \"deploy\" 1 ) ; srcArtifact = srcArtifact . setFile ( new java . io . File ( org . eclipse . packagedrone . testing . server . channel . MavenTest . TEST_1_SOURCES_JAR ) ) ; final org . eclipse . aether . util . repository . AuthenticationBuilder ab = new org . eclipse . aether . util . repository . AuthenticationBuilder ( ) ; ab . addUsername ( \"deploy\" ) ; ab . addPassword ( key ) ; final org . eclipse . aether . repository . Authentication auth = ab . build ( ) ; final org . eclipse . aether . repository . RemoteRepository distRepo = new org . eclipse . aether . repository . RemoteRepository . Builder ( \"test\" , \"default\" , resolve ( java . lang . String . format ( \"deploy\" 0 , ct . getId ( ) ) ) ) . setAuthentication ( auth ) . build ( ) ; final org . eclipse . aether . deployment . DeployRequest deployRequest = new org . eclipse . aether . deployment . DeployRequest ( ) ; deployRequest . addArtifact ( jarArtifact ) . addArtifact ( pomArtifact ) . addArtifact ( srcArtifact ) ; deployRequest . setRepository ( distRepo ) ; system . deploy ( session , deployRequest ) ; testUrl ( java . lang . String . format ( \"deploy\" 0 , ct . getId ( ) ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( key )", "total": "testMvn1 ( ) { final org . eclipse . packagedrone . testing . server . channel . ChannelTester ct = org . eclipse . packagedrone . testing . server . channel . ChannelTester . create ( getWebContext ( ) , \"deploy\" 3 ) ; ct . addAspect ( \"mvn\" ) ; ct . addAspect ( \"maven.repo\" ) ; ct . assignDeployGroup ( \"deploy\" 3 ) ; final java . lang . String key = ct . getDeployKeys ( ) . iterator ( ) . next ( ) ; \"<AssertPlaceHolder>\" ; final org . eclipse . aether . RepositorySystem system = org . eclipse . packagedrone . testing . server . maven . MavenUtil . newRepositorySystem ( ) ; final org . eclipse . aether . RepositorySystemSession session = org . eclipse . packagedrone . testing . server . maven . MavenUtil . newRepositorySystemSession ( system ) ; org . eclipse . aether . artifact . Artifact jarArtifact = new org . eclipse . aether . artifact . DefaultArtifact ( \"org.eclipse.packagedrone.testing\" , \"deploy\" 2 , \"\" , \"deploy\" 1 , \"0.0.1-SNAPSHOT\" ) ; jarArtifact = jarArtifact . setFile ( new java . io . File ( org . eclipse . packagedrone . testing . server . channel . MavenTest . TEST_1_JAR ) ) ; org . eclipse . aether . artifact . Artifact pomArtifact = new org . eclipse . aether . util . artifact . SubArtifact ( jarArtifact , \"\" , \"pom\" ) ; pomArtifact = pomArtifact . setFile ( new java . io . File ( org . eclipse . packagedrone . testing . server . channel . MavenTest . TEST_1_POM ) ) ; org . eclipse . aether . artifact . Artifact srcArtifact = new org . eclipse . aether . util . artifact . SubArtifact ( jarArtifact , \"sources\" , \"deploy\" 1 ) ; srcArtifact = srcArtifact . setFile ( new java . io . File ( org . eclipse . packagedrone . testing . server . channel . MavenTest . TEST_1_SOURCES_JAR ) ) ; final org . eclipse . aether . util . repository . AuthenticationBuilder ab = new org . eclipse . aether . util . repository . AuthenticationBuilder ( ) ; ab . addUsername ( \"deploy\" ) ; ab . addPassword ( key ) ; final org . eclipse . aether . repository . Authentication auth = ab . build ( ) ; final org . eclipse . aether . repository . RemoteRepository distRepo = new org . eclipse . aether . repository . RemoteRepository . Builder ( \"test\" , \"default\" , resolve ( java . lang . String . format ( \"deploy\" 0 , ct . getId ( ) ) ) ) . setAuthentication ( auth ) . build ( ) ; final org . eclipse . aether . deployment . DeployRequest deployRequest = new org . eclipse . aether . deployment . DeployRequest ( ) ; deployRequest . addArtifact ( jarArtifact ) . addArtifact ( pomArtifact ) . addArtifact ( srcArtifact ) ; deployRequest . setRepository ( distRepo ) ; system . deploy ( session , deployRequest ) ; testUrl ( java . lang . String . format ( \"deploy\" 0 , ct . getId ( ) ) ) ; } next ( ) { if ( ! ( hasNext ( ) ) ) { throw new java . util . NoSuchElementException ( ) ; } final java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; while ( ( this . current ) < ( this . length ) ) { final char c = this . path . charAt ( this . current ) ; if ( c == '/' ) { eatUp ( ) ; break ; } sb . append ( c ) ; ( this . current ) ++ ; } return sb . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( key )"}
{"focal": "getModifiedChildListItem ( java . lang . Class , K extends org . opendaylight . yangtools . yang . binding . Identifier ) { return ( ( org . opendaylight . mdsal . binding . api . DataObjectModification < C > ) ( getModifiedChild ( org . opendaylight . yangtools . yang . binding . InstanceIdentifier . IdentifiableItem . of ( listItem , listKey ) ) ) ) ; }", "testMethod": "testTopLevelListener ( ) { final org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . EventCapturingListener < org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . Top > listener = new org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . EventCapturingListener ( ) ; dataBrokerImpl . registerDataTreeChangeListener ( org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . TOP_IDENTIFIER , listener ) ; createAndVerifyTop ( listener ) ; putTx ( org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . BAR_PATH , org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . BAR_DATA ) . commit ( ) . get ( ) ; final org . opendaylight . mdsal . binding . api . DataObjectModification < org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . Top > afterBarPutEvent = com . google . common . collect . Iterables . getOnlyElement ( listener . nextEvent ( ) ) . getRootNode ( ) ; org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . verifyModification ( afterBarPutEvent , org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . TOP_ARGUMENT , ModificationType . SUBTREE_MODIFIED ) ; final org . opendaylight . mdsal . binding . api . DataObjectModification < org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . two . level . list . TopLevelList > barPutMod = afterBarPutEvent . getModifiedChildListItem ( org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . two . level . list . TopLevelList . class , org . opendaylight . mdsal . binding . dom . adapter . test . TOP_BAR_KEY ) ; \"<AssertPlaceHolder>\" ; org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . verifyModification ( barPutMod , org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . BAR_ARGUMENT , ModificationType . WRITE ) ; deleteTx ( org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . BAR_PATH ) . commit ( ) . get ( ) ; final org . opendaylight . mdsal . binding . api . DataObjectModification < org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . Top > afterBarDeleteEvent = com . google . common . collect . Iterables . getOnlyElement ( listener . nextEvent ( ) ) . getRootNode ( ) ; org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . verifyModification ( afterBarDeleteEvent , org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . TOP_ARGUMENT , ModificationType . SUBTREE_MODIFIED ) ; final org . opendaylight . mdsal . binding . api . DataObjectModification < org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . two . level . list . TopLevelList > barDeleteMod = afterBarDeleteEvent . getModifiedChildListItem ( org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . two . level . list . TopLevelList . class , org . opendaylight . mdsal . binding . dom . adapter . test . TOP_BAR_KEY ) ; org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . verifyModification ( barDeleteMod , org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . BAR_ARGUMENT , ModificationType . DELETE ) ; dataBrokerImpl . registerDataTreeChangeListener ( org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . TOP_IDENTIFIER , listener ) . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( barPutMod )", "total": "testTopLevelListener ( ) { final org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . EventCapturingListener < org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . Top > listener = new org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . EventCapturingListener ( ) ; dataBrokerImpl . registerDataTreeChangeListener ( org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . TOP_IDENTIFIER , listener ) ; createAndVerifyTop ( listener ) ; putTx ( org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . BAR_PATH , org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . BAR_DATA ) . commit ( ) . get ( ) ; final org . opendaylight . mdsal . binding . api . DataObjectModification < org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . Top > afterBarPutEvent = com . google . common . collect . Iterables . getOnlyElement ( listener . nextEvent ( ) ) . getRootNode ( ) ; org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . verifyModification ( afterBarPutEvent , org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . TOP_ARGUMENT , ModificationType . SUBTREE_MODIFIED ) ; final org . opendaylight . mdsal . binding . api . DataObjectModification < org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . two . level . list . TopLevelList > barPutMod = afterBarPutEvent . getModifiedChildListItem ( org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . two . level . list . TopLevelList . class , org . opendaylight . mdsal . binding . dom . adapter . test . TOP_BAR_KEY ) ; \"<AssertPlaceHolder>\" ; org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . verifyModification ( barPutMod , org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . BAR_ARGUMENT , ModificationType . WRITE ) ; deleteTx ( org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . BAR_PATH ) . commit ( ) . get ( ) ; final org . opendaylight . mdsal . binding . api . DataObjectModification < org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . Top > afterBarDeleteEvent = com . google . common . collect . Iterables . getOnlyElement ( listener . nextEvent ( ) ) . getRootNode ( ) ; org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . verifyModification ( afterBarDeleteEvent , org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . TOP_ARGUMENT , ModificationType . SUBTREE_MODIFIED ) ; final org . opendaylight . mdsal . binding . api . DataObjectModification < org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . two . level . list . TopLevelList > barDeleteMod = afterBarDeleteEvent . getModifiedChildListItem ( org . opendaylight . yang . gen . v1 . urn . opendaylight . params . xml . ns . yang . mdsal . test . binding . rev140701 . two . level . list . TopLevelList . class , org . opendaylight . mdsal . binding . dom . adapter . test . TOP_BAR_KEY ) ; org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . verifyModification ( barDeleteMod , org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . BAR_ARGUMENT , ModificationType . DELETE ) ; dataBrokerImpl . registerDataTreeChangeListener ( org . opendaylight . mdsal . binding . dom . adapter . test . DataTreeChangeListenerTest . TOP_IDENTIFIER , listener ) . close ( ) ; } getModifiedChildListItem ( java . lang . Class , K extends org . opendaylight . yangtools . yang . binding . Identifier ) { return ( ( org . opendaylight . mdsal . binding . api . DataObjectModification < C > ) ( getModifiedChild ( org . opendaylight . yangtools . yang . binding . InstanceIdentifier . IdentifiableItem . of ( listItem , listKey ) ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( barPutMod )"}
{"focal": "completeAndValidate ( java . lang . String , org . apache . edgent . topology . Topology , org . apache . edgent . topology . TStream , org . apache . edgent . test . connectors . common . ConnectorTestBase$MsgGenerator , int , java . lang . String [ ] ) { completeAndValidate ( true , msg , t , s , mgen , secTimeout , expected ) ; }", "testMethod": "testSimple ( ) { org . apache . edgent . topology . Topology t = newTopology ( \"testSimple\" ) ; java . util . Map < java . lang . String , java . lang . Object > configMap = initRabbitmqConfig ( ) ; org . apache . edgent . test . connectors . rabbitmq . MsgGenerator generator = new org . apache . edgent . test . connectors . rabbitmq . MsgGenerator ( t . getName ( ) ) ; java . lang . String queue = \"testQueue\" ; java . util . List < java . lang . String > msgs = createMsgs ( generator , queue , getMsg1 ( ) , getMsg2 ( ) ) ; org . apache . edgent . topology . TStream < java . lang . String > stream = org . apache . edgent . topology . plumbing . PlumbingStreams . blockingOneShotDelay ( t . collection ( msgs ) , org . apache . edgent . test . connectors . rabbitmq . RabbitmqStreamsTestManual . PUB_DELAY_MSEC , TimeUnit . MILLISECONDS ) ; org . apache . edgent . connectors . rabbitmq . RabbitmqConsumer consumer = new org . apache . edgent . connectors . rabbitmq . RabbitmqConsumer ( t , ( ) -> configMap ) ; org . apache . edgent . topology . TStream < java . lang . String > receivedStream = consumer . subscribe ( ( byte [ ] bytes ) -> new java . lang . String ( bytes ) , queue ) ; org . apache . edgent . connectors . rabbitmq . RabbitmqProducer producer = new org . apache . edgent . connectors . rabbitmq . RabbitmqProducer ( t , ( ) -> configMap ) ; org . apache . edgent . topology . TSink < java . lang . String > sink = producer . publish ( stream , queue , ( java . lang . String s ) -> s . getBytes ( ) ) ; completeAndValidate ( \"\" , t , receivedStream , generator , org . apache . edgent . test . connectors . rabbitmq . RabbitmqStreamsTestManual . SEC_TIMEOUT , msgs . toArray ( new java . lang . String [ 0 ] ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( sink )", "total": "testSimple ( ) { org . apache . edgent . topology . Topology t = newTopology ( \"testSimple\" ) ; java . util . Map < java . lang . String , java . lang . Object > configMap = initRabbitmqConfig ( ) ; org . apache . edgent . test . connectors . rabbitmq . MsgGenerator generator = new org . apache . edgent . test . connectors . rabbitmq . MsgGenerator ( t . getName ( ) ) ; java . lang . String queue = \"testQueue\" ; java . util . List < java . lang . String > msgs = createMsgs ( generator , queue , getMsg1 ( ) , getMsg2 ( ) ) ; org . apache . edgent . topology . TStream < java . lang . String > stream = org . apache . edgent . topology . plumbing . PlumbingStreams . blockingOneShotDelay ( t . collection ( msgs ) , org . apache . edgent . test . connectors . rabbitmq . RabbitmqStreamsTestManual . PUB_DELAY_MSEC , TimeUnit . MILLISECONDS ) ; org . apache . edgent . connectors . rabbitmq . RabbitmqConsumer consumer = new org . apache . edgent . connectors . rabbitmq . RabbitmqConsumer ( t , ( ) -> configMap ) ; org . apache . edgent . topology . TStream < java . lang . String > receivedStream = consumer . subscribe ( ( byte [ ] bytes ) -> new java . lang . String ( bytes ) , queue ) ; org . apache . edgent . connectors . rabbitmq . RabbitmqProducer producer = new org . apache . edgent . connectors . rabbitmq . RabbitmqProducer ( t , ( ) -> configMap ) ; org . apache . edgent . topology . TSink < java . lang . String > sink = producer . publish ( stream , queue , ( java . lang . String s ) -> s . getBytes ( ) ) ; completeAndValidate ( \"\" , t , receivedStream , generator , org . apache . edgent . test . connectors . rabbitmq . RabbitmqStreamsTestManual . SEC_TIMEOUT , msgs . toArray ( new java . lang . String [ 0 ] ) ) ; \"<AssertPlaceHolder>\" ; } completeAndValidate ( java . lang . String , org . apache . edgent . topology . Topology , org . apache . edgent . topology . TStream , org . apache . edgent . test . connectors . common . ConnectorTestBase$MsgGenerator , int , java . lang . String [ ] ) { completeAndValidate ( true , msg , t , s , mgen , secTimeout , expected ) ; }", "answer": "org . junit . Assert . assertNotNull ( sink )"}
{"focal": "getSubOptions ( java . lang . Class ) { return subOptionsClass != null ? getProperty ( subOptionsClass . getName ( ) ) : null ; }", "testMethod": "regularClassSubOptions ( ) { options . subOptions ( new fr . opensagres . xdocreport . converter . ConverterRegistry ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( options . getSubOptions ( fr . opensagres . xdocreport . converter . ConverterRegistry . class ) )", "total": "regularClassSubOptions ( ) { options . subOptions ( new fr . opensagres . xdocreport . converter . ConverterRegistry ( ) ) ; \"<AssertPlaceHolder>\" ; } getSubOptions ( java . lang . Class ) { return subOptionsClass != null ? getProperty ( subOptionsClass . getName ( ) ) : null ; }", "answer": "org . junit . Assert . assertNotNull ( options . getSubOptions ( fr . opensagres . xdocreport . converter . ConverterRegistry . class ) )"}
{"focal": "getHeaderValue ( ) { return ( com . adobe . acs . commons . http . headers . impl . DispatcherMaxAgeHeaderFilter . HEADER_PREFIX ) + ( maxage ) ; }", "testMethod": "testDoActivateSuccess ( ) { when ( componentContext . getProperties ( ) ) . thenReturn ( properties ) ; filter . doActivate ( componentContext ) ; \"<AssertPlaceHolder>\" ; verify ( componentContext ) . getProperties ( ) ; verifyNoMoreInteractions ( componentContext ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( filter . getHeaderValue ( ) )", "total": "testDoActivateSuccess ( ) { when ( componentContext . getProperties ( ) ) . thenReturn ( properties ) ; filter . doActivate ( componentContext ) ; \"<AssertPlaceHolder>\" ; verify ( componentContext ) . getProperties ( ) ; verifyNoMoreInteractions ( componentContext ) ; } getHeaderValue ( ) { return ( com . adobe . acs . commons . http . headers . impl . DispatcherMaxAgeHeaderFilter . HEADER_PREFIX ) + ( maxage ) ; }", "answer": "org . junit . Assert . assertNotNull ( filter . getHeaderValue ( ) )"}
{"focal": "getSongSearcher ( ) { return this . songSearcher ; }", "testMethod": "testGetSongSearcher ( ) { org . bff . javampd . server . MPD mpd = mpdBuilder . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( mpd . getSongSearcher ( ) )", "total": "testGetSongSearcher ( ) { org . bff . javampd . server . MPD mpd = mpdBuilder . build ( ) ; \"<AssertPlaceHolder>\" ; } getSongSearcher ( ) { return this . songSearcher ; }", "answer": "org . junit . Assert . assertNotNull ( mpd . getSongSearcher ( ) )"}
{"focal": "createConnection ( ) { return createConnection ( getUsername ( ) , getPassword ( ) ) ; }", "testMethod": "testCreateConnectionAndStart ( ) { org . apache . qpid . jms . JmsConnectionFactory factory = new org . apache . qpid . jms . JmsConnectionFactory ( getConnectionURI ( true ) ) ; org . apache . qpid . jms . JmsConnection connection = ( ( org . apache . qpid . jms . JmsConnection ) ( factory . createConnection ( ) ) ) ; \"<AssertPlaceHolder>\" ; connection . start ( ) ; connection . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( connection )", "total": "testCreateConnectionAndStart ( ) { org . apache . qpid . jms . JmsConnectionFactory factory = new org . apache . qpid . jms . JmsConnectionFactory ( getConnectionURI ( true ) ) ; org . apache . qpid . jms . JmsConnection connection = ( ( org . apache . qpid . jms . JmsConnection ) ( factory . createConnection ( ) ) ) ; \"<AssertPlaceHolder>\" ; connection . start ( ) ; connection . close ( ) ; } createConnection ( ) { return createConnection ( getUsername ( ) , getPassword ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( connection )"}
{"focal": "retrieveAudits ( gov . hhs . fha . nhinc . common . auditquerylog . QueryAuditEventsRequestType ) { return queryImpl . queryAuditEvents ( req ) ; }", "testMethod": "testAuditRetrieveBasedOnEventBeginDate ( ) { gov . hhs . fha . nhinc . auditquerylog . nhinc . proxy . AuditQueryLogProxyJavaImpl auditImpl = new gov . hhs . fha . nhinc . auditquerylog . nhinc . proxy . AuditQueryLogProxyJavaImpl ( ) ; gov . hhs . fha . nhinc . common . auditquerylog . QueryAuditEventsRequestType request = new gov . hhs . fha . nhinc . common . auditquerylog . QueryAuditEventsRequestType ( ) ; request . setEventBeginDate ( convertDateToXMLGregorianCalendar ( EVENT_TIMESTAMP ) ) ; gov . hhs . fha . nhinc . common . auditquerylog . QueryAuditEventsResponseType response = auditImpl . retrieveAudits ( request ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testAuditRetrieveBasedOnEventBeginDate ( ) { gov . hhs . fha . nhinc . auditquerylog . nhinc . proxy . AuditQueryLogProxyJavaImpl auditImpl = new gov . hhs . fha . nhinc . auditquerylog . nhinc . proxy . AuditQueryLogProxyJavaImpl ( ) ; gov . hhs . fha . nhinc . common . auditquerylog . QueryAuditEventsRequestType request = new gov . hhs . fha . nhinc . common . auditquerylog . QueryAuditEventsRequestType ( ) ; request . setEventBeginDate ( convertDateToXMLGregorianCalendar ( EVENT_TIMESTAMP ) ) ; gov . hhs . fha . nhinc . common . auditquerylog . QueryAuditEventsResponseType response = auditImpl . retrieveAudits ( request ) ; \"<AssertPlaceHolder>\" ; } retrieveAudits ( gov . hhs . fha . nhinc . common . auditquerylog . QueryAuditEventsRequestType ) { return queryImpl . queryAuditEvents ( req ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "serializeStatistics ( com . airhacks . porcupine . execution . entity . Statistics ) { javax . json . JsonObjectBuilder stats = javax . json . Json . createObjectBuilder ( ) ; stats . add ( \"pipelineName\" , statistics . getPipelineName ( ) ) ; final java . lang . String handlerName = statistics . getRejectedExecutionHandlerName ( ) ; if ( handlerName != null ) { stats . add ( \"rejectedExecutionHandlerName\" , handlerName ) ; } stats . add ( \"maximumPoolSize\" 1 , statistics . getActiveThreadCount ( ) ) ; stats . add ( \"completedTaskCount\" , statistics . getCompletedTaskCount ( ) ) ; stats . add ( \"corePoolSize\" , statistics . getCorePoolSize ( ) ) ; stats . add ( \"currentThreadPoolSize\" , statistics . getCurrentThreadPoolSize ( ) ) ; stats . add ( \"maximumPoolSize\" 0 , statistics . getLargestThreadPoolSize ( ) ) ; stats . add ( \"maximumPoolSize\" , statistics . getMaximumPoolSize ( ) ) ; stats . add ( \"rejectedTasks\" , statistics . getRejectedTasks ( ) ) ; stats . add ( \"remainingQueueCapacity\" , statistics . getRemainingQueueCapacity ( ) ) ; stats . add ( \"minQueueCapacity\" , statistics . getMinQueueCapacity ( ) ) ; stats . add ( \"totalNumberOfTasks\" , statistics . getTotalNumberOfTasks ( ) ) ; java . io . StringWriter writer = new java . io . StringWriter ( ) ; try ( javax . json . JsonWriter outputWriter = javax . json . Json . createWriter ( writer ) ) { outputWriter . writeObject ( stats . build ( ) ) ; } return writer . toString ( ) ; }", "testMethod": "serializeStatistics ( ) { com . airhacks . porcupine . execution . entity . Statistics stats = new com . airhacks . porcupine . execution . entity . Statistics ( \"test\" , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , \"duke\" , 9 ) ; java . lang . String result = this . cut . serializeStatistics ( stats ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "serializeStatistics ( ) { com . airhacks . porcupine . execution . entity . Statistics stats = new com . airhacks . porcupine . execution . entity . Statistics ( \"test\" , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , \"duke\" , 9 ) ; java . lang . String result = this . cut . serializeStatistics ( stats ) ; \"<AssertPlaceHolder>\" ; } serializeStatistics ( com . airhacks . porcupine . execution . entity . Statistics ) { javax . json . JsonObjectBuilder stats = javax . json . Json . createObjectBuilder ( ) ; stats . add ( \"pipelineName\" , statistics . getPipelineName ( ) ) ; final java . lang . String handlerName = statistics . getRejectedExecutionHandlerName ( ) ; if ( handlerName != null ) { stats . add ( \"rejectedExecutionHandlerName\" , handlerName ) ; } stats . add ( \"maximumPoolSize\" 1 , statistics . getActiveThreadCount ( ) ) ; stats . add ( \"completedTaskCount\" , statistics . getCompletedTaskCount ( ) ) ; stats . add ( \"corePoolSize\" , statistics . getCorePoolSize ( ) ) ; stats . add ( \"currentThreadPoolSize\" , statistics . getCurrentThreadPoolSize ( ) ) ; stats . add ( \"maximumPoolSize\" 0 , statistics . getLargestThreadPoolSize ( ) ) ; stats . add ( \"maximumPoolSize\" , statistics . getMaximumPoolSize ( ) ) ; stats . add ( \"rejectedTasks\" , statistics . getRejectedTasks ( ) ) ; stats . add ( \"remainingQueueCapacity\" , statistics . getRemainingQueueCapacity ( ) ) ; stats . add ( \"minQueueCapacity\" , statistics . getMinQueueCapacity ( ) ) ; stats . add ( \"totalNumberOfTasks\" , statistics . getTotalNumberOfTasks ( ) ) ; java . io . StringWriter writer = new java . io . StringWriter ( ) ; try ( javax . json . JsonWriter outputWriter = javax . json . Json . createWriter ( writer ) ) { outputWriter . writeObject ( stats . build ( ) ) ; } return writer . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getBatchAssignments ( com . intuit . wasabi . experimentobjects . Application$Name , com . intuit . wasabi . assignmentobjects . User$ID , com . intuit . wasabi . experimentobjects . Context , java . lang . Boolean , com . intuit . wasabi . experimentobjects . ExperimentBatch , java . lang . Boolean , javax . ws . rs . core . HttpHeaders ) { try { com . intuit . wasabi . api . AssignmentsResource . LOGGER . debug ( ( \"getBatchAssignment<sp>userID={},<sp>applicationName={},<sp>context={},<sp>createAssignment={},<sp>\" + \"headers={},<sp>experimentBatch={}\" ) , userID , applicationName , context , createAssignment , headers , experimentBatch ) ; java . util . List < com . intuit . wasabi . assignmentobjects . Assignment > myAssignments = assignments . doBatchAssignments ( userID , applicationName , context , createAssignment , java . lang . Boolean . FALSE , headers , experimentBatch , forceProfileCheck ) ; return httpHeader . headers ( ) . entity ( com . google . common . collect . ImmutableMap . < java . lang . String , java . lang . Object > builder ( ) . put ( \"assignments\" , toBatchAssignmentResponseMap ( myAssignments ) ) . build ( ) ) . build ( ) ; } catch ( java . lang . Exception exception ) { com . intuit . wasabi . api . AssignmentsResource . LOGGER . error ( ( \"getBatchAssignments<sp>failed<sp>for<sp>applicationName={},<sp>userID={},<sp>context={},<sp>\" + \"createAssignment={},<sp>experimentBatch={},<sp>headers={}<sp>with<sp>error:\" ) , applicationName , userID , context , createAssignment , experimentBatch , headers , exception ) ; throw exception ; } }", "testMethod": "getBatchAssignmentExp ( ) { java . util . List < com . intuit . wasabi . assignmentobjects . Assignment > myAssignments = new java . util . ArrayList ( ) ; when ( assignments . doBatchAssignments ( userID , applicationName , context , CREATE , FORCE_IN_EXPERIMENT , headers , experimentBatch , forceProfileCheck ) ) . thenReturn ( myAssignments ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( resource . getBatchAssignments ( applicationName , userID , context , CREATE , experimentBatch , forceProfileCheck , headers ) )", "total": "getBatchAssignmentExp ( ) { java . util . List < com . intuit . wasabi . assignmentobjects . Assignment > myAssignments = new java . util . ArrayList ( ) ; when ( assignments . doBatchAssignments ( userID , applicationName , context , CREATE , FORCE_IN_EXPERIMENT , headers , experimentBatch , forceProfileCheck ) ) . thenReturn ( myAssignments ) ; \"<AssertPlaceHolder>\" ; } getBatchAssignments ( com . intuit . wasabi . experimentobjects . Application$Name , com . intuit . wasabi . assignmentobjects . User$ID , com . intuit . wasabi . experimentobjects . Context , java . lang . Boolean , com . intuit . wasabi . experimentobjects . ExperimentBatch , java . lang . Boolean , javax . ws . rs . core . HttpHeaders ) { try { com . intuit . wasabi . api . AssignmentsResource . LOGGER . debug ( ( \"getBatchAssignment<sp>userID={},<sp>applicationName={},<sp>context={},<sp>createAssignment={},<sp>\" + \"headers={},<sp>experimentBatch={}\" ) , userID , applicationName , context , createAssignment , headers , experimentBatch ) ; java . util . List < com . intuit . wasabi . assignmentobjects . Assignment > myAssignments = assignments . doBatchAssignments ( userID , applicationName , context , createAssignment , java . lang . Boolean . FALSE , headers , experimentBatch , forceProfileCheck ) ; return httpHeader . headers ( ) . entity ( com . google . common . collect . ImmutableMap . < java . lang . String , java . lang . Object > builder ( ) . put ( \"assignments\" , toBatchAssignmentResponseMap ( myAssignments ) ) . build ( ) ) . build ( ) ; } catch ( java . lang . Exception exception ) { com . intuit . wasabi . api . AssignmentsResource . LOGGER . error ( ( \"getBatchAssignments<sp>failed<sp>for<sp>applicationName={},<sp>userID={},<sp>context={},<sp>\" + \"createAssignment={},<sp>experimentBatch={},<sp>headers={}<sp>with<sp>error:\" ) , applicationName , userID , context , createAssignment , experimentBatch , headers , exception ) ; throw exception ; } }", "answer": "org . junit . Assert . assertNotNull ( resource . getBatchAssignments ( applicationName , userID , context , CREATE , experimentBatch , forceProfileCheck , headers ) )"}
{"focal": "forCron ( com . cronutils . model . Cron ) { if ( cron instanceof com . cronutils . model . SingleCron ) { final java . util . Map < com . cronutils . model . field . CronFieldName , com . cronutils . model . field . CronField > fields = cron . retrieveFieldsAsMap ( ) ; final com . cronutils . model . time . ExecutionTimeBuilder executionTimeBuilder = new com . cronutils . model . time . ExecutionTimeBuilder ( cron . getCronDefinition ( ) ) ; for ( final com . cronutils . model . field . CronFieldName name : com . cronutils . model . field . CronFieldName . values ( ) ) { if ( ( fields . get ( name ) ) != null ) { switch ( name ) { case SECOND : executionTimeBuilder . forSecondsMatching ( fields . get ( name ) ) ; break ; case MINUTE : executionTimeBuilder . forMinutesMatching ( fields . get ( name ) ) ; break ; case HOUR : executionTimeBuilder . forHoursMatching ( fields . get ( name ) ) ; break ; case DAY_OF_WEEK : executionTimeBuilder . forDaysOfWeekMatching ( fields . get ( name ) ) ; break ; case DAY_OF_MONTH : executionTimeBuilder . forDaysOfMonthMatching ( fields . get ( name ) ) ; break ; case MONTH : executionTimeBuilder . forMonthsMatching ( fields . get ( name ) ) ; break ; case YEAR : executionTimeBuilder . forYearsMatching ( fields . get ( name ) ) ; break ; case DAY_OF_YEAR : executionTimeBuilder . forDaysOfYearMatching ( fields . get ( name ) ) ; break ; default : break ; } } } return executionTimeBuilder . build ( ) ; } else { return new com . cronutils . model . time . CompositeExecutionTime ( ( ( com . cronutils . model . CompositeCron ) ( cron ) ) . getCrons ( ) . parallelStream ( ) . map ( com . cronutils . model . time . ExecutionTime :: forCron ) . collect ( java . util . stream . Collectors . toList ( ) ) ) ; } }", "testMethod": "testMissingExpressionAndInvalidCharsInErrorMessage ( ) { thrown . expect ( com . cronutils . parser . IllegalArgumentException . class ) ; final java . lang . String cronexpression = \"*<sp>*<sp>-1<sp>*<sp>*<sp>?\" ; thrown . expectMessage ( java . lang . String . format ( \"Failed<sp>to<sp>parse<sp>'%s'.<sp>Invalid<sp>expression!<sp>Expression:<sp>-1<sp>does<sp>not<sp>describe<sp>a<sp>range.<sp>Negative<sp>numbers<sp>are<sp>not<sp>allowed.\" , cronexpression ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . cronutils . model . time . ExecutionTime . forCron ( parser . parse ( cronexpression ) ) )", "total": "testMissingExpressionAndInvalidCharsInErrorMessage ( ) { thrown . expect ( com . cronutils . parser . IllegalArgumentException . class ) ; final java . lang . String cronexpression = \"*<sp>*<sp>-1<sp>*<sp>*<sp>?\" ; thrown . expectMessage ( java . lang . String . format ( \"Failed<sp>to<sp>parse<sp>'%s'.<sp>Invalid<sp>expression!<sp>Expression:<sp>-1<sp>does<sp>not<sp>describe<sp>a<sp>range.<sp>Negative<sp>numbers<sp>are<sp>not<sp>allowed.\" , cronexpression ) ) ; \"<AssertPlaceHolder>\" ; } forCron ( com . cronutils . model . Cron ) { if ( cron instanceof com . cronutils . model . SingleCron ) { final java . util . Map < com . cronutils . model . field . CronFieldName , com . cronutils . model . field . CronField > fields = cron . retrieveFieldsAsMap ( ) ; final com . cronutils . model . time . ExecutionTimeBuilder executionTimeBuilder = new com . cronutils . model . time . ExecutionTimeBuilder ( cron . getCronDefinition ( ) ) ; for ( final com . cronutils . model . field . CronFieldName name : com . cronutils . model . field . CronFieldName . values ( ) ) { if ( ( fields . get ( name ) ) != null ) { switch ( name ) { case SECOND : executionTimeBuilder . forSecondsMatching ( fields . get ( name ) ) ; break ; case MINUTE : executionTimeBuilder . forMinutesMatching ( fields . get ( name ) ) ; break ; case HOUR : executionTimeBuilder . forHoursMatching ( fields . get ( name ) ) ; break ; case DAY_OF_WEEK : executionTimeBuilder . forDaysOfWeekMatching ( fields . get ( name ) ) ; break ; case DAY_OF_MONTH : executionTimeBuilder . forDaysOfMonthMatching ( fields . get ( name ) ) ; break ; case MONTH : executionTimeBuilder . forMonthsMatching ( fields . get ( name ) ) ; break ; case YEAR : executionTimeBuilder . forYearsMatching ( fields . get ( name ) ) ; break ; case DAY_OF_YEAR : executionTimeBuilder . forDaysOfYearMatching ( fields . get ( name ) ) ; break ; default : break ; } } } return executionTimeBuilder . build ( ) ; } else { return new com . cronutils . model . time . CompositeExecutionTime ( ( ( com . cronutils . model . CompositeCron ) ( cron ) ) . getCrons ( ) . parallelStream ( ) . map ( com . cronutils . model . time . ExecutionTime :: forCron ) . collect ( java . util . stream . Collectors . toList ( ) ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( com . cronutils . model . time . ExecutionTime . forCron ( parser . parse ( cronexpression ) ) )"}
{"focal": "getMessage ( ) { return message ; }", "testMethod": "save_ManualNoID ( ) { at . ac . tuwien . infosys . jcloudscale . datastore . test . core . DatastoreImplTest . PersonManual personManual = new at . ac . tuwien . infosys . jcloudscale . datastore . test . core . DatastoreImplTest . PersonManual ( \"John\" , \"Doe\" ) ; try { datastore . save ( personManual ) ; org . junit . Assert . fail ( ) ; } catch ( at . ac . tuwien . infosys . jcloudscale . datastore . api . DatastoreException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "save_ManualNoID ( ) { at . ac . tuwien . infosys . jcloudscale . datastore . test . core . DatastoreImplTest . PersonManual personManual = new at . ac . tuwien . infosys . jcloudscale . datastore . test . core . DatastoreImplTest . PersonManual ( \"John\" , \"Doe\" ) ; try { datastore . save ( personManual ) ; org . junit . Assert . fail ( ) ; } catch ( at . ac . tuwien . infosys . jcloudscale . datastore . api . DatastoreException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return message ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "scheduleAndWait ( org . apache . druid . query . lookup . namespace . ExtractionNamespace , long ) { final org . apache . druid . server . lookup . namespace . cache . CacheScheduler . Entry entry = schedule ( namespace ) ; org . apache . druid . server . lookup . namespace . cache . CacheScheduler . log . debug ( \"Scheduled<sp>new<sp>%s\" , entry ) ; boolean success = false ; try { success = entry . impl . updateCounter . awaitFirstIncrement ( waitForFirstRunMs , TimeUnit . MILLISECONDS ) ; if ( success ) { return entry ; } else { return null ; } } finally { if ( ! success ) { entry . close ( ) ; org . apache . druid . server . lookup . namespace . cache . CacheScheduler . log . error ( \"CacheScheduler[%s]<sp>-<sp>problem<sp>during<sp>start<sp>or<sp>waiting<sp>for<sp>the<sp>first<sp>run\" , entry ) ; } } }", "testMethod": "testDeleteNamespaces ( ) { final java . io . File tmpFile = temporaryFolder . newFile ( ) ; try ( java . io . Writer out = com . google . common . io . Files . newWriter ( tmpFile , StandardCharsets . UTF_8 ) ) { out . write ( org . apache . druid . server . lookup . namespace . NamespacedExtractorModuleTest . mapper . writeValueAsString ( com . google . common . collect . ImmutableMap . of ( \"foo\" , \"bar\" ) ) ) ; } final org . apache . druid . query . lookup . namespace . UriExtractionNamespace namespace = new org . apache . druid . query . lookup . namespace . UriExtractionNamespace ( tmpFile . toURI ( ) , null , null , new org . apache . druid . query . lookup . namespace . UriExtractionNamespace . ObjectMapperFlatDataParser ( org . apache . druid . query . lookup . namespace . UriExtractionNamespaceTest . registerTypes ( new org . apache . druid . jackson . DefaultObjectMapper ( ) ) ) , new org . joda . time . Period ( 0 ) , null ) ; try ( org . apache . druid . server . lookup . namespace . cache . CacheScheduler . Entry entry = scheduler . scheduleAndWait ( namespace , 1000 ) ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( entry )", "total": "testDeleteNamespaces ( ) { final java . io . File tmpFile = temporaryFolder . newFile ( ) ; try ( java . io . Writer out = com . google . common . io . Files . newWriter ( tmpFile , StandardCharsets . UTF_8 ) ) { out . write ( org . apache . druid . server . lookup . namespace . NamespacedExtractorModuleTest . mapper . writeValueAsString ( com . google . common . collect . ImmutableMap . of ( \"foo\" , \"bar\" ) ) ) ; } final org . apache . druid . query . lookup . namespace . UriExtractionNamespace namespace = new org . apache . druid . query . lookup . namespace . UriExtractionNamespace ( tmpFile . toURI ( ) , null , null , new org . apache . druid . query . lookup . namespace . UriExtractionNamespace . ObjectMapperFlatDataParser ( org . apache . druid . query . lookup . namespace . UriExtractionNamespaceTest . registerTypes ( new org . apache . druid . jackson . DefaultObjectMapper ( ) ) ) , new org . joda . time . Period ( 0 ) , null ) ; try ( org . apache . druid . server . lookup . namespace . cache . CacheScheduler . Entry entry = scheduler . scheduleAndWait ( namespace , 1000 ) ) { \"<AssertPlaceHolder>\" ; } } scheduleAndWait ( org . apache . druid . query . lookup . namespace . ExtractionNamespace , long ) { final org . apache . druid . server . lookup . namespace . cache . CacheScheduler . Entry entry = schedule ( namespace ) ; org . apache . druid . server . lookup . namespace . cache . CacheScheduler . log . debug ( \"Scheduled<sp>new<sp>%s\" , entry ) ; boolean success = false ; try { success = entry . impl . updateCounter . awaitFirstIncrement ( waitForFirstRunMs , TimeUnit . MILLISECONDS ) ; if ( success ) { return entry ; } else { return null ; } } finally { if ( ! success ) { entry . close ( ) ; org . apache . druid . server . lookup . namespace . cache . CacheScheduler . log . error ( \"CacheScheduler[%s]<sp>-<sp>problem<sp>during<sp>start<sp>or<sp>waiting<sp>for<sp>the<sp>first<sp>run\" , entry ) ; } } }", "answer": "org . junit . Assert . assertNotNull ( entry )"}
{"focal": "parse ( java . lang . String ) { com . microsoft . azure . sdk . iot . service . FeedbackBatch returnFeedbackBatch = new com . microsoft . azure . sdk . iot . service . FeedbackBatch ( ) ; if ( ! ( com . microsoft . azure . sdk . iot . service . Tools . isNullOrEmpty ( jsonString ) ) ) { if ( jsonString . startsWith ( \"rejected\" 0 ) ) { jsonString = jsonString . substring ( 5 , ( ( jsonString . length ( ) ) - 1 ) ) ; } if ( ! ( jsonString . equals ( \"\" ) ) ) { try ( javax . json . JsonReader jsonReader = javax . json . Json . createReader ( new java . io . StringReader ( jsonString ) ) ) { javax . json . JsonArray jsonArray = jsonReader . readArray ( ) ; java . util . ArrayList < com . microsoft . azure . sdk . iot . service . FeedbackRecord > records = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < ( jsonArray . size ( ) ) ; i ++ ) { javax . json . JsonObject jsonObject = ( ( javax . json . JsonObject ) ( jsonArray . get ( i ) ) ) ; com . microsoft . azure . sdk . iot . service . FeedbackRecord feedbackRecord = new com . microsoft . azure . sdk . iot . service . FeedbackRecord ( ) ; feedbackRecord . setEnqueuedTimeUtc ( java . time . Instant . parse ( com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"enqueuedTimeUtc\" ) ) ) ; java . lang . String originalMessageId = com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"originalMessageId\" ) ; feedbackRecord . setOriginalMessageId ( originalMessageId ) ; feedbackRecord . setCorrelationId ( \"\" ) ; java . lang . String description = com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"description\" ) ; feedbackRecord . setDescription ( description ) ; java . lang . String statusCode = com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"statusCode\" ) ; if ( statusCode . toLowerCase ( ) . equals ( \"rejected\" 1 ) ) { feedbackRecord . setStatusCode ( FeedbackStatusCode . success ) ; } else if ( statusCode . toLowerCase ( ) . equals ( \"expired\" ) ) { feedbackRecord . setStatusCode ( FeedbackStatusCode . expired ) ; } else if ( statusCode . toLowerCase ( ) . equals ( \"deliverycountexceeded\" ) ) { feedbackRecord . setStatusCode ( FeedbackStatusCode . deliveryCountExceeded ) ; } else if ( statusCode . toLowerCase ( ) . equals ( \"rejected\" ) ) { feedbackRecord . setStatusCode ( FeedbackStatusCode . rejected ) ; } else { feedbackRecord . setStatusCode ( FeedbackStatusCode . unknown ) ; } feedbackRecord . setDeviceId ( com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"deviceId\" ) ) ; feedbackRecord . setDeviceGenerationId ( com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"deviceGenerationId\" ) ) ; records . add ( feedbackRecord ) ; } if ( ( records . size ( ) ) > 0 ) { returnFeedbackBatch . setEnqueuedTimeUtc ( records . get ( ( ( records . size ( ) ) - 1 ) ) . getEnqueuedTimeUtc ( ) ) ; returnFeedbackBatch . setUserId ( \"\" ) ; returnFeedbackBatch . setLockToken ( \"\" ) ; returnFeedbackBatch . setRecords ( records ) ; } } } } return returnFeedbackBatch ; }", "testMethod": "json_null ( ) { com . microsoft . azure . sdk . iot . service . FeedbackBatch fbb = new com . microsoft . azure . sdk . iot . service . FeedbackBatch ( ) ; java . lang . String jsonString = null ; com . microsoft . azure . sdk . iot . service . FeedbackBatch feedbackBatch = com . microsoft . azure . sdk . iot . service . FeedbackBatchMessage . parse ( jsonString ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( feedbackBatch )", "total": "json_null ( ) { com . microsoft . azure . sdk . iot . service . FeedbackBatch fbb = new com . microsoft . azure . sdk . iot . service . FeedbackBatch ( ) ; java . lang . String jsonString = null ; com . microsoft . azure . sdk . iot . service . FeedbackBatch feedbackBatch = com . microsoft . azure . sdk . iot . service . FeedbackBatchMessage . parse ( jsonString ) ; \"<AssertPlaceHolder>\" ; } parse ( java . lang . String ) { com . microsoft . azure . sdk . iot . service . FeedbackBatch returnFeedbackBatch = new com . microsoft . azure . sdk . iot . service . FeedbackBatch ( ) ; if ( ! ( com . microsoft . azure . sdk . iot . service . Tools . isNullOrEmpty ( jsonString ) ) ) { if ( jsonString . startsWith ( \"rejected\" 0 ) ) { jsonString = jsonString . substring ( 5 , ( ( jsonString . length ( ) ) - 1 ) ) ; } if ( ! ( jsonString . equals ( \"\" ) ) ) { try ( javax . json . JsonReader jsonReader = javax . json . Json . createReader ( new java . io . StringReader ( jsonString ) ) ) { javax . json . JsonArray jsonArray = jsonReader . readArray ( ) ; java . util . ArrayList < com . microsoft . azure . sdk . iot . service . FeedbackRecord > records = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < ( jsonArray . size ( ) ) ; i ++ ) { javax . json . JsonObject jsonObject = ( ( javax . json . JsonObject ) ( jsonArray . get ( i ) ) ) ; com . microsoft . azure . sdk . iot . service . FeedbackRecord feedbackRecord = new com . microsoft . azure . sdk . iot . service . FeedbackRecord ( ) ; feedbackRecord . setEnqueuedTimeUtc ( java . time . Instant . parse ( com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"enqueuedTimeUtc\" ) ) ) ; java . lang . String originalMessageId = com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"originalMessageId\" ) ; feedbackRecord . setOriginalMessageId ( originalMessageId ) ; feedbackRecord . setCorrelationId ( \"\" ) ; java . lang . String description = com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"description\" ) ; feedbackRecord . setDescription ( description ) ; java . lang . String statusCode = com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"statusCode\" ) ; if ( statusCode . toLowerCase ( ) . equals ( \"rejected\" 1 ) ) { feedbackRecord . setStatusCode ( FeedbackStatusCode . success ) ; } else if ( statusCode . toLowerCase ( ) . equals ( \"expired\" ) ) { feedbackRecord . setStatusCode ( FeedbackStatusCode . expired ) ; } else if ( statusCode . toLowerCase ( ) . equals ( \"deliverycountexceeded\" ) ) { feedbackRecord . setStatusCode ( FeedbackStatusCode . deliveryCountExceeded ) ; } else if ( statusCode . toLowerCase ( ) . equals ( \"rejected\" ) ) { feedbackRecord . setStatusCode ( FeedbackStatusCode . rejected ) ; } else { feedbackRecord . setStatusCode ( FeedbackStatusCode . unknown ) ; } feedbackRecord . setDeviceId ( com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"deviceId\" ) ) ; feedbackRecord . setDeviceGenerationId ( com . microsoft . azure . sdk . iot . service . Tools . getValueFromJsonObject ( jsonObject , \"deviceGenerationId\" ) ) ; records . add ( feedbackRecord ) ; } if ( ( records . size ( ) ) > 0 ) { returnFeedbackBatch . setEnqueuedTimeUtc ( records . get ( ( ( records . size ( ) ) - 1 ) ) . getEnqueuedTimeUtc ( ) ) ; returnFeedbackBatch . setUserId ( \"\" ) ; returnFeedbackBatch . setLockToken ( \"\" ) ; returnFeedbackBatch . setRecords ( records ) ; } } } } return returnFeedbackBatch ; }", "answer": "org . junit . Assert . assertNotNull ( feedbackBatch )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . hospitalReportManager . model . HRMDocumentToProvider entity = new org . oscarehr . hospitalReportManager . model . HRMDocumentToProvider ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . hospitalReportManager . model . HRMDocumentToProvider entity = new org . oscarehr . hospitalReportManager . model . HRMDocumentToProvider ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "executeBackAndForth ( java . lang . Object , com . jd . dd . glowworm . util . Parameters ) { java . lang . Object result = null ; if ( isForFunctionality ) { byte [ ] bytes = com . jd . dd . glowworm . PB . toPBBytes ( obj , parameters ) ; result = com . jd . dd . glowworm . PB . parsePBBytes ( bytes , parameters ) ; return result ; } else { if ( needCompareWithFastJSON ) { return compareWithFastJSON ( obj , parameters ) ; } else { if ( ! ( isFirstExecutation ) ) { for ( int i = preHeatTimes ; i > 0 ; i -- ) { com . jd . dd . glowworm . PB . parsePBBytes ( com . jd . dd . glowworm . PB . toPBBytes ( obj , parameters ) , parameters ) ; } isFirstExecutation = true ; } java . lang . Long start = java . lang . System . currentTimeMillis ( ) ; for ( int i = 0 ; i < ( runTimes ) ; i ++ ) { result = com . jd . dd . glowworm . PB . parsePBBytes ( com . jd . dd . glowworm . PB . toPBBytes ( obj , parameters ) , parameters ) ; } java . lang . Long end = java . lang . System . currentTimeMillis ( ) ; testcase . TestBase . logger . info ( \"+{}<sp>{}<sp><sp>{}ms\" , new java . lang . Object [ ] { result . getClass ( ) . getSimpleName ( ) , result . toString ( ) , end - start } ) ; return result ; } } }", "testMethod": "testTransientBean4 ( ) { testcase . function . TransientBean4 sb = new testcase . function . TransientBean4 ( ) ; sb . setIndex ( 123123 ) ; testcase . function . TransientBean4 result = executeBackAndForth ( sb , testcase . function . TransientBean4 . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testTransientBean4 ( ) { testcase . function . TransientBean4 sb = new testcase . function . TransientBean4 ( ) ; sb . setIndex ( 123123 ) ; testcase . function . TransientBean4 result = executeBackAndForth ( sb , testcase . function . TransientBean4 . class ) ; \"<AssertPlaceHolder>\" ; } executeBackAndForth ( java . lang . Object , com . jd . dd . glowworm . util . Parameters ) { java . lang . Object result = null ; if ( isForFunctionality ) { byte [ ] bytes = com . jd . dd . glowworm . PB . toPBBytes ( obj , parameters ) ; result = com . jd . dd . glowworm . PB . parsePBBytes ( bytes , parameters ) ; return result ; } else { if ( needCompareWithFastJSON ) { return compareWithFastJSON ( obj , parameters ) ; } else { if ( ! ( isFirstExecutation ) ) { for ( int i = preHeatTimes ; i > 0 ; i -- ) { com . jd . dd . glowworm . PB . parsePBBytes ( com . jd . dd . glowworm . PB . toPBBytes ( obj , parameters ) , parameters ) ; } isFirstExecutation = true ; } java . lang . Long start = java . lang . System . currentTimeMillis ( ) ; for ( int i = 0 ; i < ( runTimes ) ; i ++ ) { result = com . jd . dd . glowworm . PB . parsePBBytes ( com . jd . dd . glowworm . PB . toPBBytes ( obj , parameters ) , parameters ) ; } java . lang . Long end = java . lang . System . currentTimeMillis ( ) ; testcase . TestBase . logger . info ( \"+{}<sp>{}<sp><sp>{}ms\" , new java . lang . Object [ ] { result . getClass ( ) . getSimpleName ( ) , result . toString ( ) , end - start } ) ; return result ; } } }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getStatuses ( ) { return statuses ; }", "testMethod": "testReadWithCollectionRelationship ( ) { java . io . InputStream apiResponse = com . github . jasminb . jsonapi . IOUtils . getResource ( \"user-with-statuses.json\" ) ; com . github . jasminb . jsonapi . JSONAPIDocument < com . github . jasminb . jsonapi . models . User > userDocument = converter . readDocument ( apiResponse , com . github . jasminb . jsonapi . models . User . class ) ; com . github . jasminb . jsonapi . models . User user = userDocument . get ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( user . getStatuses ( ) )", "total": "testReadWithCollectionRelationship ( ) { java . io . InputStream apiResponse = com . github . jasminb . jsonapi . IOUtils . getResource ( \"user-with-statuses.json\" ) ; com . github . jasminb . jsonapi . JSONAPIDocument < com . github . jasminb . jsonapi . models . User > userDocument = converter . readDocument ( apiResponse , com . github . jasminb . jsonapi . models . User . class ) ; com . github . jasminb . jsonapi . models . User user = userDocument . get ( ) ; \"<AssertPlaceHolder>\" ; } getStatuses ( ) { return statuses ; }", "answer": "org . junit . Assert . assertNotNull ( user . getStatuses ( ) )"}
{"focal": "getValue ( ) { return value ; }", "testMethod": "userNameMinLength ( ) { org . apache . hadoop . hdfs . web . resources . UserParam userParam = new org . apache . hadoop . hdfs . web . resources . UserParam ( \"a\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( userParam . getValue ( ) )", "total": "userNameMinLength ( ) { org . apache . hadoop . hdfs . web . resources . UserParam userParam = new org . apache . hadoop . hdfs . web . resources . UserParam ( \"a\" ) ; \"<AssertPlaceHolder>\" ; } getValue ( ) { return value ; }", "answer": "org . junit . Assert . assertNotNull ( userParam . getValue ( ) )"}
{"focal": "getBuilder ( ) { return null ; }", "testMethod": "testIsotopeReader_InputStream_IChemObjectBuilder ( ) { org . openscience . cdk . config . isotopes . IsotopeReader reader = new org . openscience . cdk . config . isotopes . IsotopeReader ( new java . io . ByteArrayInputStream ( new byte [ 0 ] ) , new org . openscience . cdk . ChemObject ( ) . getBuilder ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( reader )", "total": "testIsotopeReader_InputStream_IChemObjectBuilder ( ) { org . openscience . cdk . config . isotopes . IsotopeReader reader = new org . openscience . cdk . config . isotopes . IsotopeReader ( new java . io . ByteArrayInputStream ( new byte [ 0 ] ) , new org . openscience . cdk . ChemObject ( ) . getBuilder ( ) ) ; \"<AssertPlaceHolder>\" ; } getBuilder ( ) { return null ; }", "answer": "org . junit . Assert . assertNotNull ( reader )"}
{"focal": "createTokenName ( org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck , org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck ) { java . lang . String methodTokenName = methodAnnotation . value ( ) ; java . lang . String classTokenName = ( classAnnotation == null ) ? \"\" : classAnnotation . value ( ) ; java . lang . StringBuilder tokenNameStringBuilder = new java . lang . StringBuilder ( ) ; if ( ( classTokenName != null ) && ( ! ( classTokenName . isEmpty ( ) ) ) ) { tokenNameStringBuilder . append ( classTokenName ) ; } if ( ( methodTokenName != null ) && ( ! ( methodTokenName . isEmpty ( ) ) ) ) { if ( ( tokenNameStringBuilder . length ( ) ) != 0 ) { tokenNameStringBuilder . append ( \"/\" ) ; } tokenNameStringBuilder . append ( methodTokenName ) ; } if ( ( tokenNameStringBuilder . length ( ) ) == 0 ) { tokenNameStringBuilder . append ( globalTokenName ) ; } return tokenNameStringBuilder . toString ( ) ; }", "testMethod": "testCreateTokenInfoName01 ( ) { org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck methodAnnotation = mock ( org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck . class ) ; org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck classAnnotation = mock ( org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck . class ) ; when ( methodAnnotation . value ( ) ) . thenReturn ( \"test\" ) ; when ( classAnnotation . value ( ) ) . thenReturn ( \"test\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( store . createTokenName ( classAnnotation , methodAnnotation ) )", "total": "testCreateTokenInfoName01 ( ) { org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck methodAnnotation = mock ( org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck . class ) ; org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck classAnnotation = mock ( org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck . class ) ; when ( methodAnnotation . value ( ) ) . thenReturn ( \"test\" ) ; when ( classAnnotation . value ( ) ) . thenReturn ( \"test\" ) ; \"<AssertPlaceHolder>\" ; } createTokenName ( org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck , org . terasoluna . gfw . web . token . transaction . TransactionTokenCheck ) { java . lang . String methodTokenName = methodAnnotation . value ( ) ; java . lang . String classTokenName = ( classAnnotation == null ) ? \"\" : classAnnotation . value ( ) ; java . lang . StringBuilder tokenNameStringBuilder = new java . lang . StringBuilder ( ) ; if ( ( classTokenName != null ) && ( ! ( classTokenName . isEmpty ( ) ) ) ) { tokenNameStringBuilder . append ( classTokenName ) ; } if ( ( methodTokenName != null ) && ( ! ( methodTokenName . isEmpty ( ) ) ) ) { if ( ( tokenNameStringBuilder . length ( ) ) != 0 ) { tokenNameStringBuilder . append ( \"/\" ) ; } tokenNameStringBuilder . append ( methodTokenName ) ; } if ( ( tokenNameStringBuilder . length ( ) ) == 0 ) { tokenNameStringBuilder . append ( globalTokenName ) ; } return tokenNameStringBuilder . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( store . createTokenName ( classAnnotation , methodAnnotation ) )"}
{"focal": "createForm ( org . uberfire . backend . vfs . Path , java . lang . String , org . kie . workbench . common . forms . model . FormModel ) { org . uberfire . java . nio . file . Path kiePath = org . uberfire . backend . server . util . Paths . convert ( path ) . resolve ( formName ) ; try { if ( ioService . exists ( kiePath ) ) { throw new org . uberfire . java . nio . file . FileAlreadyExistsException ( kiePath . toString ( ) ) ; } org . kie . workbench . common . forms . model . FormDefinition form = new org . kie . workbench . common . forms . model . FormDefinition ( formModel ) ; form . setId ( org . kie . workbench . common . forms . services . backend . util . UIDGenerator . generateUID ( ) ) ; form . setName ( formName . substring ( 0 , formName . lastIndexOf ( \".\" ) ) ) ; form . setLayoutTemplate ( new org . uberfire . ext . layout . editor . api . editor . LayoutTemplate ( ) ) ; ioService . write ( kiePath , formDefinitionSerializer . serialize ( form ) , commentedOptionFactory . makeCommentedOption ( \"\" ) ) ; return org . uberfire . backend . server . util . Paths . convert ( kiePath ) ; } catch ( java . lang . Exception e ) { throw org . guvnor . common . services . backend . exceptions . ExceptionUtilities . handleException ( e ) ; } }", "testMethod": "testCreateForm ( ) { when ( formDefinitionSerializer . serialize ( any ( ) ) ) . thenAnswer ( this :: verifyNewForm ) ; org . kie . workbench . common . forms . model . FormModel formModel = mock ( org . kie . workbench . common . forms . model . FormModel . class ) ; org . uberfire . backend . vfs . Path resultPath = formEditorService . createForm ( path , org . kie . workbench . common . forms . editor . backend . service . impl . FormEditorServiceImplTest . FULL_FORM_NAME , formModel ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( resultPath )", "total": "testCreateForm ( ) { when ( formDefinitionSerializer . serialize ( any ( ) ) ) . thenAnswer ( this :: verifyNewForm ) ; org . kie . workbench . common . forms . model . FormModel formModel = mock ( org . kie . workbench . common . forms . model . FormModel . class ) ; org . uberfire . backend . vfs . Path resultPath = formEditorService . createForm ( path , org . kie . workbench . common . forms . editor . backend . service . impl . FormEditorServiceImplTest . FULL_FORM_NAME , formModel ) ; \"<AssertPlaceHolder>\" ; } createForm ( org . uberfire . backend . vfs . Path , java . lang . String , org . kie . workbench . common . forms . model . FormModel ) { org . uberfire . java . nio . file . Path kiePath = org . uberfire . backend . server . util . Paths . convert ( path ) . resolve ( formName ) ; try { if ( ioService . exists ( kiePath ) ) { throw new org . uberfire . java . nio . file . FileAlreadyExistsException ( kiePath . toString ( ) ) ; } org . kie . workbench . common . forms . model . FormDefinition form = new org . kie . workbench . common . forms . model . FormDefinition ( formModel ) ; form . setId ( org . kie . workbench . common . forms . services . backend . util . UIDGenerator . generateUID ( ) ) ; form . setName ( formName . substring ( 0 , formName . lastIndexOf ( \".\" ) ) ) ; form . setLayoutTemplate ( new org . uberfire . ext . layout . editor . api . editor . LayoutTemplate ( ) ) ; ioService . write ( kiePath , formDefinitionSerializer . serialize ( form ) , commentedOptionFactory . makeCommentedOption ( \"\" ) ) ; return org . uberfire . backend . server . util . Paths . convert ( kiePath ) ; } catch ( java . lang . Exception e ) { throw org . guvnor . common . services . backend . exceptions . ExceptionUtilities . handleException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( resultPath )"}
{"focal": "getMessage ( ) { return ( key ) != 0 ? org . apache . sis . util . resources . Errors . format ( key , parameters ) : super . getMessage ( ) ; }", "testMethod": "testEnsureBetweenAndDistinct ( ) { org . apache . sis . util . ArgumentChecks . ensureNonEmpty ( \"dimensions\" , new int [ ] { 2 , 3 , 0 , 1 } , 0 , 4 , true ) ; try { org . apache . sis . util . ArgumentChecks . ensureNonEmpty ( \"dimensions\" , new int [ ] { 2 , 3 , 3 , 1 } , 0 , 4 , true ) ; org . junit . Assert . fail ( \"Expected<sp>an<sp>IllegalArgumentException\" ) ; } catch ( java . lang . IllegalArgumentException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "testEnsureBetweenAndDistinct ( ) { org . apache . sis . util . ArgumentChecks . ensureNonEmpty ( \"dimensions\" , new int [ ] { 2 , 3 , 0 , 1 } , 0 , 4 , true ) ; try { org . apache . sis . util . ArgumentChecks . ensureNonEmpty ( \"dimensions\" , new int [ ] { 2 , 3 , 3 , 1 } , 0 , 4 , true ) ; org . junit . Assert . fail ( \"Expected<sp>an<sp>IllegalArgumentException\" ) ; } catch ( java . lang . IllegalArgumentException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return ( key ) != 0 ? org . apache . sis . util . resources . Errors . format ( key , parameters ) : super . getMessage ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "toolbarDropDownButton ( int ) { org . hamcrest . Matcher matcher = allOf ( widgetOfType ( org . eclipse . swt . widgets . ToolItem . class ) , withStyle ( SWT . DROP_DOWN , \"SWT.DROP_DOWN\" ) ) ; return new org . eclipse . swtbot . swt . finder . widgets . SWTBotToolbarDropDownButton ( ( ( org . eclipse . swt . widgets . ToolItem ) ( widget ( matcher , index ) ) ) , matcher ) ; }", "testMethod": "toolbarDropDownButton ( ) { openSWTBotTestView ( ) ; org . eclipse . swtbot . eclipse . finder . widgets . SWTBotView view = bot . viewByTitle ( \"SWTBot<sp>Test<sp>View\" ) ; org . eclipse . swtbot . swt . finder . widgets . SWTBotToolbarDropDownButton button = view . toolbarDropDownButton ( \"This<sp>represents<sp>a<sp>drop<sp>down<sp>IAction<sp>command.\" ) ; \"<AssertPlaceHolder>\" ; button . click ( ) ; bot . button ( \"OK\" ) . click ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( button )", "total": "toolbarDropDownButton ( ) { openSWTBotTestView ( ) ; org . eclipse . swtbot . eclipse . finder . widgets . SWTBotView view = bot . viewByTitle ( \"SWTBot<sp>Test<sp>View\" ) ; org . eclipse . swtbot . swt . finder . widgets . SWTBotToolbarDropDownButton button = view . toolbarDropDownButton ( \"This<sp>represents<sp>a<sp>drop<sp>down<sp>IAction<sp>command.\" ) ; \"<AssertPlaceHolder>\" ; button . click ( ) ; bot . button ( \"OK\" ) . click ( ) ; } toolbarDropDownButton ( int ) { org . hamcrest . Matcher matcher = allOf ( widgetOfType ( org . eclipse . swt . widgets . ToolItem . class ) , withStyle ( SWT . DROP_DOWN , \"SWT.DROP_DOWN\" ) ) ; return new org . eclipse . swtbot . swt . finder . widgets . SWTBotToolbarDropDownButton ( ( ( org . eclipse . swt . widgets . ToolItem ) ( widget ( matcher , index ) ) ) , matcher ) ; }", "answer": "org . junit . Assert . assertNotNull ( button )"}
{"focal": "findLocation ( double , double ) { java . net . URL url = new java . net . URL ( ( ( ( ( ( org . geosdi . geoplatform . gui . server . service . impl . yahoo . YahooReverseGeocoding . REVERSE_GEOCODER_PREFIX_FOR_XML ) + \"?q=\" ) + ( java . net . URLEncoder . encode ( ( ( lat + \",+\" ) + lon ) , \"UTF-8\" ) ) ) + \"&&locale=it_IT&gflags=R\" ) + \"&appid=oyPe8o3V34EgAqJ2h4KP8KDsxgsYfqncfoLF7nagje.a1wUYJeHBE2aQaua7\" ) ) ; java . net . HttpURLConnection conn = ( ( java . net . HttpURLConnection ) ( url . openConnection ( ) ) ) ; org . geosdi . geoplatform . gui . oxm . model . yahoo . GPYahooGeocodeRoot oxmBean = ( ( org . geosdi . geoplatform . gui . oxm . model . yahoo . GPYahooGeocodeRoot ) ( this . geocoderYahooJaxbMarshaller . unmarshal ( conn . getInputStream ( ) ) ) ) ; if ( oxmBean . getError ( ) . equals ( ResponseStatus . EnumResponseStatus . CODE_NO_ERROR . getValue ( ) ) ) { org . geosdi . geoplatform . gui . oxm . model . yahoo . GPYahooResult result = oxmBean . getResultList ( ) . get ( 0 ) ; return new org . geosdi . geoplatform . gui . client . model . yahoo . YahooGeocodeBean ( result ) ; } return new org . geosdi . geoplatform . gui . client . model . google . GoogleGeocodeBean ( GeocodingKeyValue . ZERO_RESULTS . toString ( ) ) ; }", "testMethod": "testYahooReverseGeocoding ( ) { org . geosdi . geoplatform . gui . client . model . GeocodingBean bean = null ; try { bean = this . yahooReverseGeoding . findLocation ( 40.6372425 , 15.8022214 ) ; } catch ( java . io . IOException e ) { logger . error ( \"IOException<sp>{}\" , e ) ; } \"<AssertPlaceHolder>\" ; logger . info ( \"Locations<sp>*****************<sp>{}\" , bean . getDescription ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( bean )", "total": "testYahooReverseGeocoding ( ) { org . geosdi . geoplatform . gui . client . model . GeocodingBean bean = null ; try { bean = this . yahooReverseGeoding . findLocation ( 40.6372425 , 15.8022214 ) ; } catch ( java . io . IOException e ) { logger . error ( \"IOException<sp>{}\" , e ) ; } \"<AssertPlaceHolder>\" ; logger . info ( \"Locations<sp>*****************<sp>{}\" , bean . getDescription ( ) ) ; } findLocation ( double , double ) { java . net . URL url = new java . net . URL ( ( ( ( ( ( org . geosdi . geoplatform . gui . server . service . impl . yahoo . YahooReverseGeocoding . REVERSE_GEOCODER_PREFIX_FOR_XML ) + \"?q=\" ) + ( java . net . URLEncoder . encode ( ( ( lat + \",+\" ) + lon ) , \"UTF-8\" ) ) ) + \"&&locale=it_IT&gflags=R\" ) + \"&appid=oyPe8o3V34EgAqJ2h4KP8KDsxgsYfqncfoLF7nagje.a1wUYJeHBE2aQaua7\" ) ) ; java . net . HttpURLConnection conn = ( ( java . net . HttpURLConnection ) ( url . openConnection ( ) ) ) ; org . geosdi . geoplatform . gui . oxm . model . yahoo . GPYahooGeocodeRoot oxmBean = ( ( org . geosdi . geoplatform . gui . oxm . model . yahoo . GPYahooGeocodeRoot ) ( this . geocoderYahooJaxbMarshaller . unmarshal ( conn . getInputStream ( ) ) ) ) ; if ( oxmBean . getError ( ) . equals ( ResponseStatus . EnumResponseStatus . CODE_NO_ERROR . getValue ( ) ) ) { org . geosdi . geoplatform . gui . oxm . model . yahoo . GPYahooResult result = oxmBean . getResultList ( ) . get ( 0 ) ; return new org . geosdi . geoplatform . gui . client . model . yahoo . YahooGeocodeBean ( result ) ; } return new org . geosdi . geoplatform . gui . client . model . google . GoogleGeocodeBean ( GeocodingKeyValue . ZERO_RESULTS . toString ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( bean )"}
{"focal": "build ( ) { org . mixer2 . jaxb . xhtml . Table table = new org . mixer2 . jaxb . xhtml . Table ( ) ; org . mixer2 . jaxb . xhtml . Thead _thead = thead . buildThead ( ) ; if ( _thead != null ) { table . setThead ( _thead ) ; } org . mixer2 . jaxb . xhtml . Tfoot _tfoot = tfoot . buildTfoot ( ) ; if ( _tfoot != null ) { table . setTfoot ( _tfoot ) ; } for ( org . mixer2 . xhtml . builder . TableBuilder . tbody _tbody : tbodyList ) { table . getTbody ( ) . add ( _tbody . buildTbody ( ) ) ; } for ( org . mixer2 . xhtml . builder . TableBuilder . tr _tr : trList ) { table . getTr ( ) . add ( _tr . buildTr ( ) ) ; } return table ; }", "testMethod": "nullDataTest ( ) { org . mixer2 . xhtml . builder . TableBuilder tBuilder = new org . mixer2 . xhtml . builder . TableBuilder ( ) ; org . mixer2 . jaxb . xhtml . Table table = tBuilder . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( table )", "total": "nullDataTest ( ) { org . mixer2 . xhtml . builder . TableBuilder tBuilder = new org . mixer2 . xhtml . builder . TableBuilder ( ) ; org . mixer2 . jaxb . xhtml . Table table = tBuilder . build ( ) ; \"<AssertPlaceHolder>\" ; } build ( ) { org . mixer2 . jaxb . xhtml . Table table = new org . mixer2 . jaxb . xhtml . Table ( ) ; org . mixer2 . jaxb . xhtml . Thead _thead = thead . buildThead ( ) ; if ( _thead != null ) { table . setThead ( _thead ) ; } org . mixer2 . jaxb . xhtml . Tfoot _tfoot = tfoot . buildTfoot ( ) ; if ( _tfoot != null ) { table . setTfoot ( _tfoot ) ; } for ( org . mixer2 . xhtml . builder . TableBuilder . tbody _tbody : tbodyList ) { table . getTbody ( ) . add ( _tbody . buildTbody ( ) ) ; } for ( org . mixer2 . xhtml . builder . TableBuilder . tr _tr : trList ) { table . getTr ( ) . add ( _tr . buildTr ( ) ) ; } return table ; }", "answer": "org . junit . Assert . assertNotNull ( table )"}
{"focal": "createKeyFactory ( ) { com . google . cloud . datastore . KeyFactory keyFactory = datastore . newKeyFactory ( ) ; return keyFactory ; }", "testMethod": "testCreateKeyFactory ( ) { com . google . cloud . datastore . KeyFactory keyFactory = com . google . cloud . examples . datastore . snippets . ITDatastoreSnippets . datastoreSnippets . createKeyFactory ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( keyFactory )", "total": "testCreateKeyFactory ( ) { com . google . cloud . datastore . KeyFactory keyFactory = com . google . cloud . examples . datastore . snippets . ITDatastoreSnippets . datastoreSnippets . createKeyFactory ( ) ; \"<AssertPlaceHolder>\" ; } createKeyFactory ( ) { com . google . cloud . datastore . KeyFactory keyFactory = datastore . newKeyFactory ( ) ; return keyFactory ; }", "answer": "org . junit . Assert . assertNotNull ( keyFactory )"}
{"focal": "create ( java . lang . Class ) { return new de . devsurf . injection . guice . scanner . PackageFilter ( clazz . getPackage ( ) . getName ( ) , true ) ; }", "testMethod": "testWithWrongPackage2 ( ) { com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . sonatype . SonatypeScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( \"java\" ) ) ) ; \"<AssertPlaceHolder>\" ; try { de . devsurf . injection . guice . scanner . sonatype . tests . autobind . multiple . MultibindTests . SecondContainer container = injector . getInstance ( de . devsurf . injection . guice . scanner . sonatype . tests . autobind . multiple . MultibindTests . SecondContainer . class ) ; org . junit . Assert . fail ( ( \"The<sp>Scanner<sp>scanned<sp>the<sp>wrong<sp>package,<sp>so<sp>no<sp>Implementation<sp>should<sp>be<sp>bound<sp>to<sp>this<sp>Interface.<sp>Instance<sp>null?<sp>\" + ( container == null ) ) ) ; } catch ( com . google . inject . ConfigurationException e ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( injector )", "total": "testWithWrongPackage2 ( ) { com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . sonatype . SonatypeScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( \"java\" ) ) ) ; \"<AssertPlaceHolder>\" ; try { de . devsurf . injection . guice . scanner . sonatype . tests . autobind . multiple . MultibindTests . SecondContainer container = injector . getInstance ( de . devsurf . injection . guice . scanner . sonatype . tests . autobind . multiple . MultibindTests . SecondContainer . class ) ; org . junit . Assert . fail ( ( \"The<sp>Scanner<sp>scanned<sp>the<sp>wrong<sp>package,<sp>so<sp>no<sp>Implementation<sp>should<sp>be<sp>bound<sp>to<sp>this<sp>Interface.<sp>Instance<sp>null?<sp>\" + ( container == null ) ) ) ; } catch ( com . google . inject . ConfigurationException e ) { } } create ( java . lang . Class ) { return new de . devsurf . injection . guice . scanner . PackageFilter ( clazz . getPackage ( ) . getName ( ) , true ) ; }", "answer": "org . junit . Assert . assertNotNull ( injector )"}
{"focal": "getToken ( java . lang . String ) { return org . nuxeo . runtime . api . Framework . getService ( org . nuxeo . ecm . tokenauth . service . TokenAuthenticationService . class ) . getToken ( username , org . nuxeo . ecm . permissions . TransientUserPermissionHelper . TRANSIENT_APP_NAME , org . nuxeo . ecm . permissions . TransientUserPermissionHelper . TRANSIENT_DEVICE_ID ) ; }", "testMethod": "shouldCreateTokenForTransientUser ( ) { java . lang . String transientUsername = org . nuxeo . ecm . core . api . NuxeoPrincipal . computeTransientUsername ( \"leela@nuxeo.com\" ) ; org . nuxeo . ecm . core . api . security . ACE leelaACE = new org . nuxeo . ecm . core . api . security . ACE ( transientUsername , WRITE , true ) ; org . nuxeo . ecm . core . api . security . ACP acp = doc . getACP ( ) ; acp . addACE ( ACL . LOCAL_ACL , leelaACE ) ; doc . setACP ( acp , true ) ; java . lang . String token = org . nuxeo . ecm . permissions . TransientUserPermissionHelper . getToken ( transientUsername ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( token )", "total": "shouldCreateTokenForTransientUser ( ) { java . lang . String transientUsername = org . nuxeo . ecm . core . api . NuxeoPrincipal . computeTransientUsername ( \"leela@nuxeo.com\" ) ; org . nuxeo . ecm . core . api . security . ACE leelaACE = new org . nuxeo . ecm . core . api . security . ACE ( transientUsername , WRITE , true ) ; org . nuxeo . ecm . core . api . security . ACP acp = doc . getACP ( ) ; acp . addACE ( ACL . LOCAL_ACL , leelaACE ) ; doc . setACP ( acp , true ) ; java . lang . String token = org . nuxeo . ecm . permissions . TransientUserPermissionHelper . getToken ( transientUsername ) ; \"<AssertPlaceHolder>\" ; } getToken ( java . lang . String ) { return org . nuxeo . runtime . api . Framework . getService ( org . nuxeo . ecm . tokenauth . service . TokenAuthenticationService . class ) . getToken ( username , org . nuxeo . ecm . permissions . TransientUserPermissionHelper . TRANSIENT_APP_NAME , org . nuxeo . ecm . permissions . TransientUserPermissionHelper . TRANSIENT_DEVICE_ID ) ; }", "answer": "org . junit . Assert . assertNotNull ( token )"}
{"focal": "getService ( org . glassfish . hk2 . api . ServiceHandle ) { if ( ( root ) instanceof org . jvnet . hk2 . internal . Closeable ) { org . jvnet . hk2 . internal . Closeable closeable = ( ( org . jvnet . hk2 . internal . Closeable ) ( root ) ) ; if ( closeable . isClosed ( ) ) { throw new java . lang . IllegalStateException ( ( \"This<sp>service<sp>has<sp>been<sp>unbound:<sp>\" + ( root ) ) ) ; } } synchronized ( lock ) { if ( serviceDestroyed ) throw new java . lang . IllegalStateException ( \"Service<sp>has<sp>been<sp>disposed\" ) ; if ( serviceSet ) return service ; org . glassfish . hk2 . api . Injectee injectee = getLastInjectee ( ) ; java . lang . Class < ? > requiredClass = ( injectee == null ) ? null : org . glassfish . hk2 . utilities . reflection . ReflectionHelper . getRawClass ( injectee . getRequiredType ( ) ) ; service = org . jvnet . hk2 . internal . Utilities . createService ( root , injectee , locator , handle , requiredClass ) ; serviceSet = true ; return service ; } }", "testMethod": "testForeignDescriptor ( ) { org . glassfish . hk2 . tests . locator . locator . FrenchService fs = org . glassfish . hk2 . tests . locator . locator . LocatorTest . locator . getService ( org . glassfish . hk2 . tests . locator . locator . FrenchService . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( fs )", "total": "testForeignDescriptor ( ) { org . glassfish . hk2 . tests . locator . locator . FrenchService fs = org . glassfish . hk2 . tests . locator . locator . LocatorTest . locator . getService ( org . glassfish . hk2 . tests . locator . locator . FrenchService . class ) ; \"<AssertPlaceHolder>\" ; } getService ( org . glassfish . hk2 . api . ServiceHandle ) { if ( ( root ) instanceof org . jvnet . hk2 . internal . Closeable ) { org . jvnet . hk2 . internal . Closeable closeable = ( ( org . jvnet . hk2 . internal . Closeable ) ( root ) ) ; if ( closeable . isClosed ( ) ) { throw new java . lang . IllegalStateException ( ( \"This<sp>service<sp>has<sp>been<sp>unbound:<sp>\" + ( root ) ) ) ; } } synchronized ( lock ) { if ( serviceDestroyed ) throw new java . lang . IllegalStateException ( \"Service<sp>has<sp>been<sp>disposed\" ) ; if ( serviceSet ) return service ; org . glassfish . hk2 . api . Injectee injectee = getLastInjectee ( ) ; java . lang . Class < ? > requiredClass = ( injectee == null ) ? null : org . glassfish . hk2 . utilities . reflection . ReflectionHelper . getRawClass ( injectee . getRequiredType ( ) ) ; service = org . jvnet . hk2 . internal . Utilities . createService ( root , injectee , locator , handle , requiredClass ) ; serviceSet = true ; return service ; } }", "answer": "org . junit . Assert . assertNotNull ( fs )"}
{"focal": "search ( java . lang . String ) { throw new java . lang . UnsupportedOperationException ( \"HTTP<sp>Live<sp>Streaming<sp>search<sp>not<sp>implemented<sp>yet.\" ) ; }", "testMethod": "testSearch ( ) { com . github . aview . api . html5 . Html5VideoService service = new com . github . aview . api . html5 . Html5VideoService ( ) ; com . github . aview . api . html5 . Html5Series [ ] search = service . search ( \"breaking\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( search )", "total": "testSearch ( ) { com . github . aview . api . html5 . Html5VideoService service = new com . github . aview . api . html5 . Html5VideoService ( ) ; com . github . aview . api . html5 . Html5Series [ ] search = service . search ( \"breaking\" ) ; \"<AssertPlaceHolder>\" ; } search ( java . lang . String ) { throw new java . lang . UnsupportedOperationException ( \"HTTP<sp>Live<sp>Streaming<sp>search<sp>not<sp>implemented<sp>yet.\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( search )"}
{"focal": "get ( java . lang . String ) { return map . get ( key ) ; }", "testMethod": "testCrossOrderOfFakedSellerReceiveConfirmFromBuyer ( ) { vn . com . vndirect . exchangesimulator . model . NewOrderCross order = create2FirmOrderFakedSeller ( ) ; orderController . onEvent ( order ) ; vn . com . vndirect . exchangesimulator . model . NewOrderCross orderConfirm = create2FirmOrderFakedSeller ( ) ; orderConfirm . setCrossType ( \"5\" ) ; orderConfirm . setCrossID ( order . getCrossID ( ) ) ; orderController . onEvent ( orderConfirm ) ; vn . com . vndirect . exchangesimulator . model . ExecutionReport report = ( ( vn . com . vndirect . exchangesimulator . model . ExecutionReport ) ( responses . get ( 1 ) ) ) ; \"<AssertPlaceHolder>\" ; verifyFill ( orderConfirm , report ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( report )", "total": "testCrossOrderOfFakedSellerReceiveConfirmFromBuyer ( ) { vn . com . vndirect . exchangesimulator . model . NewOrderCross order = create2FirmOrderFakedSeller ( ) ; orderController . onEvent ( order ) ; vn . com . vndirect . exchangesimulator . model . NewOrderCross orderConfirm = create2FirmOrderFakedSeller ( ) ; orderConfirm . setCrossType ( \"5\" ) ; orderConfirm . setCrossID ( order . getCrossID ( ) ) ; orderController . onEvent ( orderConfirm ) ; vn . com . vndirect . exchangesimulator . model . ExecutionReport report = ( ( vn . com . vndirect . exchangesimulator . model . ExecutionReport ) ( responses . get ( 1 ) ) ) ; \"<AssertPlaceHolder>\" ; verifyFill ( orderConfirm , report ) ; } get ( java . lang . String ) { return map . get ( key ) ; }", "answer": "org . junit . Assert . assertNotNull ( report )"}
{"focal": "execHttpGet ( java . lang . String ) { org . apache . jena . riot . web . HttpCaptureResponse < org . apache . jena . atlas . web . TypedInputStream > handler = new org . apache . jena . riot . web . HttpOp . CaptureInput ( ) ; org . apache . jena . riot . web . HttpOp . execHttpGet ( url , null , handler , null , null ) ; return handler . get ( ) ; }", "testMethod": "ds_fetch_by_get_1 ( ) { java . lang . String u = org . apache . jena . fuseki . ServerCtl . urlDataset ( ) ; try ( org . apache . jena . atlas . web . TypedInputStream in = org . apache . jena . riot . web . HttpOp . execHttpGet ( u ) ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( in )", "total": "ds_fetch_by_get_1 ( ) { java . lang . String u = org . apache . jena . fuseki . ServerCtl . urlDataset ( ) ; try ( org . apache . jena . atlas . web . TypedInputStream in = org . apache . jena . riot . web . HttpOp . execHttpGet ( u ) ) { \"<AssertPlaceHolder>\" ; } } execHttpGet ( java . lang . String ) { org . apache . jena . riot . web . HttpCaptureResponse < org . apache . jena . atlas . web . TypedInputStream > handler = new org . apache . jena . riot . web . HttpOp . CaptureInput ( ) ; org . apache . jena . riot . web . HttpOp . execHttpGet ( url , null , handler , null , null ) ; return handler . get ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( in )"}
{"focal": "getEnumeration ( ) { checkClosed ( ) ; createConsumer ( ) ; return this ; }", "testMethod": "testCreateQueueBrowserAndEnumeration ( ) { try ( org . apache . qpid . jms . test . testpeer . TestAmqpPeer testPeer = new org . apache . qpid . jms . test . testpeer . TestAmqpPeer ( ) ) { javax . jms . Connection connection = testFixture . establishConnecton ( testPeer ) ; connection . start ( ) ; testPeer . expectBegin ( ) ; javax . jms . Session session = connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; javax . jms . Queue queue = session . createQueue ( \"myQueue\" ) ; testPeer . expectQueueBrowserAttach ( ) ; testPeer . expectLinkFlow ( false , org . hamcrest . Matchers . equalTo ( org . apache . qpid . proton . amqp . UnsignedInteger . valueOf ( JmsDefaultPrefetchPolicy . DEFAULT_QUEUE_BROWSER_PREFETCH ) ) ) ; testPeer . expectDetach ( true , true , true ) ; javax . jms . QueueBrowser browser = session . createBrowser ( queue ) ; java . util . Enumeration < ? > queueView = browser . getEnumeration ( ) ; \"<AssertPlaceHolder>\" ; browser . close ( ) ; testPeer . expectClose ( ) ; connection . close ( ) ; testPeer . waitForAllHandlersToComplete ( 3000 ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( queueView )", "total": "testCreateQueueBrowserAndEnumeration ( ) { try ( org . apache . qpid . jms . test . testpeer . TestAmqpPeer testPeer = new org . apache . qpid . jms . test . testpeer . TestAmqpPeer ( ) ) { javax . jms . Connection connection = testFixture . establishConnecton ( testPeer ) ; connection . start ( ) ; testPeer . expectBegin ( ) ; javax . jms . Session session = connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; javax . jms . Queue queue = session . createQueue ( \"myQueue\" ) ; testPeer . expectQueueBrowserAttach ( ) ; testPeer . expectLinkFlow ( false , org . hamcrest . Matchers . equalTo ( org . apache . qpid . proton . amqp . UnsignedInteger . valueOf ( JmsDefaultPrefetchPolicy . DEFAULT_QUEUE_BROWSER_PREFETCH ) ) ) ; testPeer . expectDetach ( true , true , true ) ; javax . jms . QueueBrowser browser = session . createBrowser ( queue ) ; java . util . Enumeration < ? > queueView = browser . getEnumeration ( ) ; \"<AssertPlaceHolder>\" ; browser . close ( ) ; testPeer . expectClose ( ) ; connection . close ( ) ; testPeer . waitForAllHandlersToComplete ( 3000 ) ; } } getEnumeration ( ) { checkClosed ( ) ; createConsumer ( ) ; return this ; }", "answer": "org . junit . Assert . assertNotNull ( queueView )"}
{"focal": "getNetworks ( ) { return networks ; }", "testMethod": "shouldSendListNetworkAction ( ) { com . devicehive . ListNetworkRequest listNetworkRequest = new com . devicehive . ListNetworkRequest ( ) ; listNetworkRequest . setName ( com . devicehive . UUID . randomUUID ( ) . toString ( ) ) ; com . devicehive . shim . api . Request request = com . devicehive . shim . api . Request . newBuilder ( ) . withBody ( listNetworkRequest ) . build ( ) ; java . util . concurrent . CompletableFuture < com . devicehive . shim . api . Response > future = new java . util . concurrent . CompletableFuture ( ) ; client . call ( request , future :: complete ) ; com . devicehive . shim . api . Response response = future . get ( 10 , TimeUnit . SECONDS ) ; com . devicehive . ListNetworkResponse responseBody = ( ( com . devicehive . ListNetworkResponse ) ( response . getBody ( ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( responseBody . getNetworks ( ) . isEmpty ( ) )", "total": "shouldSendListNetworkAction ( ) { com . devicehive . ListNetworkRequest listNetworkRequest = new com . devicehive . ListNetworkRequest ( ) ; listNetworkRequest . setName ( com . devicehive . UUID . randomUUID ( ) . toString ( ) ) ; com . devicehive . shim . api . Request request = com . devicehive . shim . api . Request . newBuilder ( ) . withBody ( listNetworkRequest ) . build ( ) ; java . util . concurrent . CompletableFuture < com . devicehive . shim . api . Response > future = new java . util . concurrent . CompletableFuture ( ) ; client . call ( request , future :: complete ) ; com . devicehive . shim . api . Response response = future . get ( 10 , TimeUnit . SECONDS ) ; com . devicehive . ListNetworkResponse responseBody = ( ( com . devicehive . ListNetworkResponse ) ( response . getBody ( ) ) ) ; \"<AssertPlaceHolder>\" ; } getNetworks ( ) { return networks ; }", "answer": "org . junit . Assert . assertNotNull ( responseBody . getNetworks ( ) . isEmpty ( ) )"}
{"focal": "currentThreadsWaitingProperty ( ) { final javax . json . JsonObject threadsStatistics = getThreadsStatistics ( ) ; if ( threadsStatistics == null ) { return NOT_AVAILABLE ; } int value = threadsStatistics . getInt ( \"current\" ) ; currentThreadsWaiting . set ( value ) ; return this . currentThreadsWaiting ; }", "testMethod": "currentThreadsWaiting ( ) { org . lightview . business . pool . entity . PoolStatistics poolStats = this . cut . getPoolStats ( \"lightfish\" , \"ConfigurationStore\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( poolStats . currentThreadsWaitingProperty ( ) )", "total": "currentThreadsWaiting ( ) { org . lightview . business . pool . entity . PoolStatistics poolStats = this . cut . getPoolStats ( \"lightfish\" , \"ConfigurationStore\" ) ; \"<AssertPlaceHolder>\" ; } currentThreadsWaitingProperty ( ) { final javax . json . JsonObject threadsStatistics = getThreadsStatistics ( ) ; if ( threadsStatistics == null ) { return NOT_AVAILABLE ; } int value = threadsStatistics . getInt ( \"current\" ) ; currentThreadsWaiting . set ( value ) ; return this . currentThreadsWaiting ; }", "answer": "org . junit . Assert . assertNotNull ( poolStats . currentThreadsWaitingProperty ( ) )"}
{"focal": "newInstance ( java . lang . Class , java . lang . Object [ ] ) { return factory . ofClass ( clazz , params ) ; }", "testMethod": "testNewCrystal_IAtomContainer ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . AbstractChemObjectBuilderTest . rootObject . getBuilder ( ) ; org . openscience . cdk . interfaces . ICrystal crystal = builder . newInstance ( org . openscience . cdk . interfaces . ICrystal . class , builder . newInstance ( org . openscience . cdk . interfaces . IAtomContainer . class ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( crystal )", "total": "testNewCrystal_IAtomContainer ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . AbstractChemObjectBuilderTest . rootObject . getBuilder ( ) ; org . openscience . cdk . interfaces . ICrystal crystal = builder . newInstance ( org . openscience . cdk . interfaces . ICrystal . class , builder . newInstance ( org . openscience . cdk . interfaces . IAtomContainer . class ) ) ; \"<AssertPlaceHolder>\" ; } newInstance ( java . lang . Class , java . lang . Object [ ] ) { return factory . ofClass ( clazz , params ) ; }", "answer": "org . junit . Assert . assertNotNull ( crystal )"}
{"focal": "getFieldProperty ( java . lang . String , java . lang . String ) { return model . getFieldProperty ( fieldName , property ) ; }", "testMethod": "testAddAttributes ( ) { com . liferay . dynamic . data . mapping . kernel . DDMStructure structure = addStructure ( ) ; com . liferay . portal . kernel . search . Document document = new com . liferay . portal . kernel . search . DocumentImpl ( ) ; com . liferay . dynamic . data . mapping . kernel . DDMStructureManagerUtil . addAttributes ( structure . getStructureId ( ) , document , createDDMFormValues ( ) ) ; java . lang . String fieldProperty = structure . getFieldProperty ( \"fieldName\" , \"indexType\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( fieldProperty )", "total": "testAddAttributes ( ) { com . liferay . dynamic . data . mapping . kernel . DDMStructure structure = addStructure ( ) ; com . liferay . portal . kernel . search . Document document = new com . liferay . portal . kernel . search . DocumentImpl ( ) ; com . liferay . dynamic . data . mapping . kernel . DDMStructureManagerUtil . addAttributes ( structure . getStructureId ( ) , document , createDDMFormValues ( ) ) ; java . lang . String fieldProperty = structure . getFieldProperty ( \"fieldName\" , \"indexType\" ) ; \"<AssertPlaceHolder>\" ; } getFieldProperty ( java . lang . String , java . lang . String ) { return model . getFieldProperty ( fieldName , property ) ; }", "answer": "org . junit . Assert . assertNotNull ( fieldProperty )"}
{"focal": "leesGenormalizeerdModel ( java . lang . Integer ) { return em . find ( nl . bzk . brp . model . hisvolledig . impl . kern . RelatieHisVolledigImpl . class , id ) ; }", "testMethod": "haalPersoonOpTest ( ) { final int persoonId = 1 ; final nl . bzk . brp . model . hisvolledig . kern . PersoonHisVolledig jpaEntity = persoonHisVolledigRepository . leesGenormalizeerdModel ( persoonId ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( jpaEntity )", "total": "haalPersoonOpTest ( ) { final int persoonId = 1 ; final nl . bzk . brp . model . hisvolledig . kern . PersoonHisVolledig jpaEntity = persoonHisVolledigRepository . leesGenormalizeerdModel ( persoonId ) ; \"<AssertPlaceHolder>\" ; } leesGenormalizeerdModel ( java . lang . Integer ) { return em . find ( nl . bzk . brp . model . hisvolledig . impl . kern . RelatieHisVolledigImpl . class , id ) ; }", "answer": "org . junit . Assert . assertNotNull ( jpaEntity )"}
{"focal": "getEmployeeByUserName ( java . lang . String ) { return employeeService . getEmployeeByUserName ( userName ) ; }", "testMethod": "getEmployeeByUserName ( ) { employee = employeeService . getEmployeeByUserName ( \"narasappa\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( employee )", "total": "getEmployeeByUserName ( ) { employee = employeeService . getEmployeeByUserName ( \"narasappa\" ) ; \"<AssertPlaceHolder>\" ; } getEmployeeByUserName ( java . lang . String ) { return employeeService . getEmployeeByUserName ( userName ) ; }", "answer": "org . junit . Assert . assertNotNull ( employee )"}
{"focal": "getVideoList ( java . lang . String ) { com . google . api . services . youtube . model . VideoListResponse videosListResponse = this . youtube . videos ( ) . list ( \"snippet,statistics\" ) . setId ( videoId ) . setKey ( config . getApiKey ( ) ) . execute ( ) ; if ( ( videosListResponse . getItems ( ) . size ( ) ) == 0 ) { org . apache . streams . youtube . provider . YoutubeUserActivityCollector . LOGGER . debug ( \"No<sp>Youtube<sp>videos<sp>found<sp>for<sp>videoId:<sp>{}\" , videoId ) ; return new java . util . ArrayList ( ) ; } return videosListResponse . getItems ( ) ; }", "testMethod": "testGetVideos ( ) { org . joda . time . DateTime now = new org . joda . time . DateTime ( java . lang . System . currentTimeMillis ( ) ) ; com . google . api . services . youtube . YouTube youtube = buildYouTube ( 0 , 1 , 0 , now , now . minus ( 10000 ) ) ; java . util . concurrent . BlockingQueue < org . apache . streams . core . StreamsDatum > datumQueue = new org . apache . streams . local . queues . ThroughputQueue ( ) ; org . apache . streams . youtube . provider . YoutubeUserActivityCollector collector = new org . apache . streams . youtube . provider . YoutubeUserActivityCollector ( youtube , datumQueue , new org . apache . streams . util . api . requests . backoff . impl . ExponentialBackOffStrategy ( 2 ) , new org . apache . streams . google . gplus . configuration . UserInfo ( ) . withUserId ( org . apache . streams . youtube . provider . YoutubeUserActivityCollectorTest . USER_ID ) , this . config ) ; java . util . List < com . google . api . services . youtube . model . Video > video = collector . getVideoList ( \"fake_video_id\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( video . get ( 0 ) )", "total": "testGetVideos ( ) { org . joda . time . DateTime now = new org . joda . time . DateTime ( java . lang . System . currentTimeMillis ( ) ) ; com . google . api . services . youtube . YouTube youtube = buildYouTube ( 0 , 1 , 0 , now , now . minus ( 10000 ) ) ; java . util . concurrent . BlockingQueue < org . apache . streams . core . StreamsDatum > datumQueue = new org . apache . streams . local . queues . ThroughputQueue ( ) ; org . apache . streams . youtube . provider . YoutubeUserActivityCollector collector = new org . apache . streams . youtube . provider . YoutubeUserActivityCollector ( youtube , datumQueue , new org . apache . streams . util . api . requests . backoff . impl . ExponentialBackOffStrategy ( 2 ) , new org . apache . streams . google . gplus . configuration . UserInfo ( ) . withUserId ( org . apache . streams . youtube . provider . YoutubeUserActivityCollectorTest . USER_ID ) , this . config ) ; java . util . List < com . google . api . services . youtube . model . Video > video = collector . getVideoList ( \"fake_video_id\" ) ; \"<AssertPlaceHolder>\" ; } getVideoList ( java . lang . String ) { com . google . api . services . youtube . model . VideoListResponse videosListResponse = this . youtube . videos ( ) . list ( \"snippet,statistics\" ) . setId ( videoId ) . setKey ( config . getApiKey ( ) ) . execute ( ) ; if ( ( videosListResponse . getItems ( ) . size ( ) ) == 0 ) { org . apache . streams . youtube . provider . YoutubeUserActivityCollector . LOGGER . debug ( \"No<sp>Youtube<sp>videos<sp>found<sp>for<sp>videoId:<sp>{}\" , videoId ) ; return new java . util . ArrayList ( ) ; } return videosListResponse . getItems ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( video . get ( 0 ) )"}
{"focal": "cache ( java . lang . String ) { checkIgnite ( ) ; return g . cache ( name ) ; }", "testMethod": "testNewCoordinatorCompletedExchange ( ) { spiFactory = TestRecordingCommunicationSpi :: new ; org . apache . ignite . internal . IgniteEx crd = ( ( org . apache . ignite . internal . IgniteEx ) ( startGrid ( \"crd\" ) ) ) ; org . apache . ignite . internal . IgniteEx newCrd = startGrid ( 1 ) ; crd . cluster ( ) . active ( true ) ; org . apache . ignite . internal . processors . affinity . AffinityTopologyVersion joinThirdNodeVer = new org . apache . ignite . internal . processors . affinity . AffinityTopologyVersion ( 3 , 0 ) ; org . apache . ignite . internal . processors . affinity . AffinityTopologyVersion joinFourNodeVer = new org . apache . ignite . internal . processors . affinity . AffinityTopologyVersion ( 4 , 0 ) ; org . apache . ignite . internal . TestRecordingCommunicationSpi spi = org . apache . ignite . internal . TestRecordingCommunicationSpi . spi ( crd ) ; final java . util . concurrent . CountDownLatch sendFullMsgLatch = new java . util . concurrent . CountDownLatch ( 1 ) ; spi . blockMessages ( ( node , msg ) -> { if ( ( msg instanceof org . apache . ignite . internal . processors . cache . distributed . dht . preloader . GridDhtPartitionsFullMessage ) && ( ( node . order ( ) ) > 2 ) ) { try { sendFullMsgLatch . await ( ) ; } catch ( ignored ) { } return true ; } return false ; } ) ; org . apache . ignite . internal . IgniteInternalFuture joinTwoNodesFut = org . apache . ignite . testframework . GridTestUtils . runAsync ( ( ) -> startGridsMultiThreaded ( 2 , 2 ) ) ; org . apache . ignite . internal . processors . cache . GridCachePartitionExchangeManager exchangeMgr = newCrd . context ( ) . cache ( ) . context ( ) . exchange ( ) ; org . apache . ignite . testframework . GridTestUtils . waitForCondition ( ( ) -> ( exchangeMgr . readyAffinityVersion ( ) . compareTo ( joinThirdNodeVer ) ) >= 0 , getTestTimeout ( ) ) ; org . apache . ignite . internal . IgniteInternalFuture startLastNodeFut = org . apache . ignite . testframework . GridTestUtils . runAsync ( ( ) -> startGrid ( 5 ) ) ; org . apache . ignite . testframework . GridTestUtils . waitForCondition ( ( ) -> ( exchangeMgr . lastTopologyFuture ( ) . initialVersion ( ) . compareTo ( joinFourNodeVer ) ) >= 0 , getTestTimeout ( ) ) ; org . apache . ignite . internal . IgniteInternalFuture stopCrdFut = org . apache . ignite . testframework . GridTestUtils . runAsync ( ( ) -> stopGrid ( \"crd\" , true , false ) ) ; org . apache . ignite . internal . util . typedef . internal . U . sleep ( 1000 ) ; sendFullMsgLatch . countDown ( ) ; stopCrdFut . get ( ) ; joinTwoNodesFut . get ( ) ; startLastNodeFut . get ( ) ; awaitPartitionMapExchange ( ) ; for ( org . apache . ignite . Ignite grid : org . apache . ignite . internal . util . typedef . G . allGrids ( ) ) { org . apache . ignite . IgniteCache cache = grid . cache ( org . apache . ignite . internal . processors . cache . PartitionsExchangeCoordinatorFailoverTest . CACHE_NAME ) ; \"<AssertPlaceHolder>\" ; cache . put ( 0 , 0 ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( cache )", "total": "testNewCoordinatorCompletedExchange ( ) { spiFactory = TestRecordingCommunicationSpi :: new ; org . apache . ignite . internal . IgniteEx crd = ( ( org . apache . ignite . internal . IgniteEx ) ( startGrid ( \"crd\" ) ) ) ; org . apache . ignite . internal . IgniteEx newCrd = startGrid ( 1 ) ; crd . cluster ( ) . active ( true ) ; org . apache . ignite . internal . processors . affinity . AffinityTopologyVersion joinThirdNodeVer = new org . apache . ignite . internal . processors . affinity . AffinityTopologyVersion ( 3 , 0 ) ; org . apache . ignite . internal . processors . affinity . AffinityTopologyVersion joinFourNodeVer = new org . apache . ignite . internal . processors . affinity . AffinityTopologyVersion ( 4 , 0 ) ; org . apache . ignite . internal . TestRecordingCommunicationSpi spi = org . apache . ignite . internal . TestRecordingCommunicationSpi . spi ( crd ) ; final java . util . concurrent . CountDownLatch sendFullMsgLatch = new java . util . concurrent . CountDownLatch ( 1 ) ; spi . blockMessages ( ( node , msg ) -> { if ( ( msg instanceof org . apache . ignite . internal . processors . cache . distributed . dht . preloader . GridDhtPartitionsFullMessage ) && ( ( node . order ( ) ) > 2 ) ) { try { sendFullMsgLatch . await ( ) ; } catch ( ignored ) { } return true ; } return false ; } ) ; org . apache . ignite . internal . IgniteInternalFuture joinTwoNodesFut = org . apache . ignite . testframework . GridTestUtils . runAsync ( ( ) -> startGridsMultiThreaded ( 2 , 2 ) ) ; org . apache . ignite . internal . processors . cache . GridCachePartitionExchangeManager exchangeMgr = newCrd . context ( ) . cache ( ) . context ( ) . exchange ( ) ; org . apache . ignite . testframework . GridTestUtils . waitForCondition ( ( ) -> ( exchangeMgr . readyAffinityVersion ( ) . compareTo ( joinThirdNodeVer ) ) >= 0 , getTestTimeout ( ) ) ; org . apache . ignite . internal . IgniteInternalFuture startLastNodeFut = org . apache . ignite . testframework . GridTestUtils . runAsync ( ( ) -> startGrid ( 5 ) ) ; org . apache . ignite . testframework . GridTestUtils . waitForCondition ( ( ) -> ( exchangeMgr . lastTopologyFuture ( ) . initialVersion ( ) . compareTo ( joinFourNodeVer ) ) >= 0 , getTestTimeout ( ) ) ; org . apache . ignite . internal . IgniteInternalFuture stopCrdFut = org . apache . ignite . testframework . GridTestUtils . runAsync ( ( ) -> stopGrid ( \"crd\" , true , false ) ) ; org . apache . ignite . internal . util . typedef . internal . U . sleep ( 1000 ) ; sendFullMsgLatch . countDown ( ) ; stopCrdFut . get ( ) ; joinTwoNodesFut . get ( ) ; startLastNodeFut . get ( ) ; awaitPartitionMapExchange ( ) ; for ( org . apache . ignite . Ignite grid : org . apache . ignite . internal . util . typedef . G . allGrids ( ) ) { org . apache . ignite . IgniteCache cache = grid . cache ( org . apache . ignite . internal . processors . cache . PartitionsExchangeCoordinatorFailoverTest . CACHE_NAME ) ; \"<AssertPlaceHolder>\" ; cache . put ( 0 , 0 ) ; } } cache ( java . lang . String ) { checkIgnite ( ) ; return g . cache ( name ) ; }", "answer": "org . junit . Assert . assertNotNull ( cache )"}
{"focal": "newMappingStrategy ( ) { return new org . dcache . gplazma . strategies . DefaultMappingStrategy ( ) ; }", "testMethod": "testRequisiteConfig ( ) { org . dcache . gplazma . strategies . MappingStrategy strategy = strategyFactory . newMappingStrategy ( ) ; \"<AssertPlaceHolder>\" ; strategy . setPlugins ( successRequisitePlugins ) ; java . util . Set < java . security . Principal > principals = com . google . common . collect . Sets . newHashSet ( ) ; strategy . map ( org . dcache . gplazma . strategies . MappingStrategyMapTests . IGNORING_LOGIN_MONITOR , principals ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( strategy )", "total": "testRequisiteConfig ( ) { org . dcache . gplazma . strategies . MappingStrategy strategy = strategyFactory . newMappingStrategy ( ) ; \"<AssertPlaceHolder>\" ; strategy . setPlugins ( successRequisitePlugins ) ; java . util . Set < java . security . Principal > principals = com . google . common . collect . Sets . newHashSet ( ) ; strategy . map ( org . dcache . gplazma . strategies . MappingStrategyMapTests . IGNORING_LOGIN_MONITOR , principals ) ; } newMappingStrategy ( ) { return new org . dcache . gplazma . strategies . DefaultMappingStrategy ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( strategy )"}
{"focal": "getFile ( ) { return file ; }", "testMethod": "testFindLocalMetadataNoVersion ( ) { addMetadata ( noVerMetadata , null ) ; org . sonatype . aether . repository . LocalMetadataRequest request = new org . sonatype . aether . repository . LocalMetadataRequest ( noVerMetadata , null , testContext ) ; org . sonatype . aether . repository . LocalMetadataResult result = manager . find ( session , request ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result . getFile ( ) )", "total": "testFindLocalMetadataNoVersion ( ) { addMetadata ( noVerMetadata , null ) ; org . sonatype . aether . repository . LocalMetadataRequest request = new org . sonatype . aether . repository . LocalMetadataRequest ( noVerMetadata , null , testContext ) ; org . sonatype . aether . repository . LocalMetadataResult result = manager . find ( session , request ) ; \"<AssertPlaceHolder>\" ; } getFile ( ) { return file ; }", "answer": "org . junit . Assert . assertNotNull ( result . getFile ( ) )"}
{"focal": "encodeOutput ( java . lang . String , org . ccnx . ccn . impl . encoding . GenericXMLEncodable ) { System . out . println ( ( ( ( \"Encoding<sp>\" + typeName ) + \":<sp>\" ) + toEncode ) ) ; java . io . ByteArrayOutputStream baos = new java . io . ByteArrayOutputStream ( ) ; try { toEncode . encode ( baos ) ; } catch ( org . ccnx . ccn . io . content . ContentEncodingException e ) { System . out . println ( ( ( ( \"Exception<sp>\" + ( e . getClass ( ) . getName ( ) ) ) + \",<sp>message:<sp>\" ) + ( e . getMessage ( ) ) ) ) ; e . printStackTrace ( ) ; return null ; } System . out . print ( ( ( \"Encoded<sp>\" + typeName ) + \":<sp>\" ) ) ; System . out . println ( org . ccnx . ccn . impl . support . DataUtils . printHexBytes ( baos . toByteArray ( ) ) ) ; return baos ; }", "testMethod": "testComplexSBVDecodeInputStream ( ) { System . out . println ( ) ; System . out . println ( \"Running:<sp>testComplexSBVDecodeInputStream\" ) ; org . ccnx . ccn . apps . examples . ccnb . StringBinaryVector sbvToEncode = setupSBV ( false , true , true ) ; java . io . ByteArrayOutputStream baos = encodeOutput ( \"StringBinaryVector<sp>(complex)\" , sbvToEncode ) ; \"<AssertPlaceHolder>\" ; org . ccnx . ccn . apps . examples . ccnb . StringBinaryVector sbvToDecodeTo = new org . ccnx . ccn . apps . examples . ccnb . StringBinaryVector ( ) ; decodeOutput ( \"StringBinaryVector<sp>(complex)\" , sbvToDecodeTo , baos ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( baos )", "total": "testComplexSBVDecodeInputStream ( ) { System . out . println ( ) ; System . out . println ( \"Running:<sp>testComplexSBVDecodeInputStream\" ) ; org . ccnx . ccn . apps . examples . ccnb . StringBinaryVector sbvToEncode = setupSBV ( false , true , true ) ; java . io . ByteArrayOutputStream baos = encodeOutput ( \"StringBinaryVector<sp>(complex)\" , sbvToEncode ) ; \"<AssertPlaceHolder>\" ; org . ccnx . ccn . apps . examples . ccnb . StringBinaryVector sbvToDecodeTo = new org . ccnx . ccn . apps . examples . ccnb . StringBinaryVector ( ) ; decodeOutput ( \"StringBinaryVector<sp>(complex)\" , sbvToDecodeTo , baos ) ; } encodeOutput ( java . lang . String , org . ccnx . ccn . impl . encoding . GenericXMLEncodable ) { System . out . println ( ( ( ( \"Encoding<sp>\" + typeName ) + \":<sp>\" ) + toEncode ) ) ; java . io . ByteArrayOutputStream baos = new java . io . ByteArrayOutputStream ( ) ; try { toEncode . encode ( baos ) ; } catch ( org . ccnx . ccn . io . content . ContentEncodingException e ) { System . out . println ( ( ( ( \"Exception<sp>\" + ( e . getClass ( ) . getName ( ) ) ) + \",<sp>message:<sp>\" ) + ( e . getMessage ( ) ) ) ) ; e . printStackTrace ( ) ; return null ; } System . out . print ( ( ( \"Encoded<sp>\" + typeName ) + \":<sp>\" ) ) ; System . out . println ( org . ccnx . ccn . impl . support . DataUtils . printHexBytes ( baos . toByteArray ( ) ) ) ; return baos ; }", "answer": "org . junit . Assert . assertNotNull ( baos )"}
{"focal": "setServletContext ( javax . servlet . ServletContext ) { this . servletContext = servletContext ; }", "testMethod": "repro ( ) { org . springframework . web . context . support . AnnotationConfigWebApplicationContext ctx = new org . springframework . web . context . support . AnnotationConfigWebApplicationContext ( ) ; ctx . setServletContext ( new org . springframework . mock . web . MockServletContext ( ) ) ; ctx . register ( org . springframework . issues . ReproTests . Config . class ) ; ctx . refresh ( ) ; org . springframework . issues . ReproTests . Foo foo = ctx . getBean ( org . springframework . issues . ReproTests . Foo . class ) ; \"<AssertPlaceHolder>\" ; ctx . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( foo )", "total": "repro ( ) { org . springframework . web . context . support . AnnotationConfigWebApplicationContext ctx = new org . springframework . web . context . support . AnnotationConfigWebApplicationContext ( ) ; ctx . setServletContext ( new org . springframework . mock . web . MockServletContext ( ) ) ; ctx . register ( org . springframework . issues . ReproTests . Config . class ) ; ctx . refresh ( ) ; org . springframework . issues . ReproTests . Foo foo = ctx . getBean ( org . springframework . issues . ReproTests . Foo . class ) ; \"<AssertPlaceHolder>\" ; ctx . close ( ) ; } setServletContext ( javax . servlet . ServletContext ) { this . servletContext = servletContext ; }", "answer": "org . junit . Assert . assertNotNull ( foo )"}
{"focal": "getBytes ( ) { return this . body ; }", "testMethod": "createOrUpdateRequestWithEtagSucceed ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollment , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollment ) { final java . lang . String registrationId = \"registrationId-1\" ; final java . lang . String enrollmentPath = \"enrollments/\" + registrationId ; final java . lang . String enrollmentPayload = \"validJson\" ; final java . lang . String resultPayload = \"validJson\" ; final java . lang . String eTag = \"validEtag\" ; final java . util . Map < java . lang . String , java . lang . String > headerParameters = new java . util . HashMap < java . lang . String , java . lang . String > ( ) { { put ( \"If-Match\" , eTag ) ; } } ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollmentManager individualEnrollmentManager = createIndividualEnrollmentManager ( ) ; new tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . StrictExpectations ( ) { { mockedIndividualEnrollment . getRegistrationId ( ) ; result = registrationId ; mockedIndividualEnrollment . toJson ( ) ; result = enrollmentPayload ; mockedIndividualEnrollment . getEtag ( ) ; result = eTag ; times = 2 ; mockedContractApiHttp . request ( HttpMethod . PUT , enrollmentPath , headerParameters , enrollmentPayload ) ; result = mockedHttpResponse ; times = 1 ; mockedHttpResponse . getBody ( ) ; result = resultPayload . getBytes ( ) ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . newInstance ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollment . class , resultPayload ) ; result = mockedIndividualEnrollmentResponse ; } } ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollment response = tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . invoke ( individualEnrollmentManager , \"createOrUpdate\" , new java . lang . Class [ ] { tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollment . class } , mockedIndividualEnrollment ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "createOrUpdateRequestWithEtagSucceed ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollment , tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollment ) { final java . lang . String registrationId = \"registrationId-1\" ; final java . lang . String enrollmentPath = \"enrollments/\" + registrationId ; final java . lang . String enrollmentPayload = \"validJson\" ; final java . lang . String resultPayload = \"validJson\" ; final java . lang . String eTag = \"validEtag\" ; final java . util . Map < java . lang . String , java . lang . String > headerParameters = new java . util . HashMap < java . lang . String , java . lang . String > ( ) { { put ( \"If-Match\" , eTag ) ; } } ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollmentManager individualEnrollmentManager = createIndividualEnrollmentManager ( ) ; new tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . StrictExpectations ( ) { { mockedIndividualEnrollment . getRegistrationId ( ) ; result = registrationId ; mockedIndividualEnrollment . toJson ( ) ; result = enrollmentPayload ; mockedIndividualEnrollment . getEtag ( ) ; result = eTag ; times = 2 ; mockedContractApiHttp . request ( HttpMethod . PUT , enrollmentPath , headerParameters , enrollmentPayload ) ; result = mockedHttpResponse ; times = 1 ; mockedHttpResponse . getBody ( ) ; result = resultPayload . getBytes ( ) ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . newInstance ( tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollment . class , resultPayload ) ; result = mockedIndividualEnrollmentResponse ; } } ; tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollment response = tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . Deencapsulation . invoke ( individualEnrollmentManager , \"createOrUpdate\" , new java . lang . Class [ ] { tests . unit . com . microsoft . azure . sdk . iot . provisioning . service . IndividualEnrollment . class } , mockedIndividualEnrollment ) ; \"<AssertPlaceHolder>\" ; } getBytes ( ) { return this . body ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "render ( org . uberfire . ext . wires . core . grids . client . widget . context . GridHeaderColumnRenderContext , double , double ) { return org . kie . workbench . common . dmn . client . editors . expressions . util . RendererUtils . getEditableHeaderText ( this , context , blockWidth , blockHeight ) ; }", "testMethod": "testDestroy ( ) { final com . ait . lienzo . client . core . shape . Group glyphView = tested . render ( glyph , 100 , 100 ) ; \"<AssertPlaceHolder>\" ; glyphView . removeFromParent ( ) ; verify ( picture , times ( 1 ) ) . removeFromParent ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( glyphView )", "total": "testDestroy ( ) { final com . ait . lienzo . client . core . shape . Group glyphView = tested . render ( glyph , 100 , 100 ) ; \"<AssertPlaceHolder>\" ; glyphView . removeFromParent ( ) ; verify ( picture , times ( 1 ) ) . removeFromParent ( ) ; } render ( org . uberfire . ext . wires . core . grids . client . widget . context . GridHeaderColumnRenderContext , double , double ) { return org . kie . workbench . common . dmn . client . editors . expressions . util . RendererUtils . getEditableHeaderText ( this , context , blockWidth , blockHeight ) ; }", "answer": "org . junit . Assert . assertNotNull ( glyphView )"}
{"focal": "buildEffective ( ) { return root . buildEffective ( ) ; }", "testMethod": "testUnionWithBits ( ) { final org . opendaylight . yangtools . yang . model . api . SchemaContext result = org . opendaylight . yangtools . yang . parser . rfc7950 . reactor . RFC7950Reactors . defaultReactor ( ) . newBuild ( ) . addSource ( org . opendaylight . yangtools . yang . stmt . StmtTestUtils . sourceForResource ( \"/types/union-with-bits/union-bits-model.yang\" ) ) . buildEffective ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testUnionWithBits ( ) { final org . opendaylight . yangtools . yang . model . api . SchemaContext result = org . opendaylight . yangtools . yang . parser . rfc7950 . reactor . RFC7950Reactors . defaultReactor ( ) . newBuild ( ) . addSource ( org . opendaylight . yangtools . yang . stmt . StmtTestUtils . sourceForResource ( \"/types/union-with-bits/union-bits-model.yang\" ) ) . buildEffective ( ) ; \"<AssertPlaceHolder>\" ; } buildEffective ( ) { return root . buildEffective ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getResult ( ) { checkState ( ( ( result ) != null ) , \"Metadata<sp>tree<sp>has<sp>not<sp>been<sp>completely<sp>built\" ) ; return result . getAnnotations ( ) . isEmpty ( ) ? java . util . Optional . empty ( ) : java . util . Optional . of ( result ) ; }", "testMethod": "testInstanceIdentifierPathWithIdentityrefListKey ( ) { final org . opendaylight . yangtools . yang . model . api . SchemaContext schemaContext = org . opendaylight . yangtools . yang . test . util . YangParserTestUtils . parseYangResource ( \"/bug8083/yang/zab.yang\" ) ; final java . lang . String inputJson = org . opendaylight . yangtools . yang . data . codec . gson . TestUtils . loadTextFile ( \"/bug8083/json/zab.json\" ) ; final org . opendaylight . yangtools . yang . data . impl . schema . NormalizedNodeResult result = new org . opendaylight . yangtools . yang . data . impl . schema . NormalizedNodeResult ( ) ; final org . opendaylight . yangtools . yang . data . api . schema . stream . NormalizedNodeStreamWriter streamWriter = org . opendaylight . yangtools . yang . data . impl . schema . ImmutableNormalizedNodeStreamWriter . from ( result ) ; final org . opendaylight . yangtools . yang . data . codec . gson . JsonParserStream jsonParser = org . opendaylight . yangtools . yang . data . codec . gson . JsonParserStream . create ( streamWriter , JSONCodecFactorySupplier . DRAFT_LHOTKA_NETMOD_YANG_JSON_02 . getShared ( schemaContext ) ) ; jsonParser . parse ( new com . google . gson . stream . JsonReader ( new java . io . StringReader ( inputJson ) ) ) ; final org . opendaylight . yangtools . yang . data . api . schema . NormalizedNode < ? , ? > transformedInput = result . getResult ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( transformedInput )", "total": "testInstanceIdentifierPathWithIdentityrefListKey ( ) { final org . opendaylight . yangtools . yang . model . api . SchemaContext schemaContext = org . opendaylight . yangtools . yang . test . util . YangParserTestUtils . parseYangResource ( \"/bug8083/yang/zab.yang\" ) ; final java . lang . String inputJson = org . opendaylight . yangtools . yang . data . codec . gson . TestUtils . loadTextFile ( \"/bug8083/json/zab.json\" ) ; final org . opendaylight . yangtools . yang . data . impl . schema . NormalizedNodeResult result = new org . opendaylight . yangtools . yang . data . impl . schema . NormalizedNodeResult ( ) ; final org . opendaylight . yangtools . yang . data . api . schema . stream . NormalizedNodeStreamWriter streamWriter = org . opendaylight . yangtools . yang . data . impl . schema . ImmutableNormalizedNodeStreamWriter . from ( result ) ; final org . opendaylight . yangtools . yang . data . codec . gson . JsonParserStream jsonParser = org . opendaylight . yangtools . yang . data . codec . gson . JsonParserStream . create ( streamWriter , JSONCodecFactorySupplier . DRAFT_LHOTKA_NETMOD_YANG_JSON_02 . getShared ( schemaContext ) ) ; jsonParser . parse ( new com . google . gson . stream . JsonReader ( new java . io . StringReader ( inputJson ) ) ) ; final org . opendaylight . yangtools . yang . data . api . schema . NormalizedNode < ? , ? > transformedInput = result . getResult ( ) ; \"<AssertPlaceHolder>\" ; } getResult ( ) { checkState ( ( ( result ) != null ) , \"Metadata<sp>tree<sp>has<sp>not<sp>been<sp>completely<sp>built\" ) ; return result . getAnnotations ( ) . isEmpty ( ) ? java . util . Optional . empty ( ) : java . util . Optional . of ( result ) ; }", "answer": "org . junit . Assert . assertNotNull ( transformedInput )"}
{"focal": "requestMemorySegment ( ) { return availableMemorySegments . poll ( ) ; }", "testMethod": "testRequestMemorySegmentsInterruptable ( ) { final int numBuffers = 10 ; org . apache . flink . runtime . io . network . buffer . NetworkBufferPool globalPool = new org . apache . flink . runtime . io . network . buffer . NetworkBufferPool ( numBuffers , 128 ) ; org . apache . flink . core . memory . MemorySegment segment = globalPool . requestMemorySegment ( ) ; \"<AssertPlaceHolder>\" ; final org . apache . flink . core . testutils . OneShotLatch isRunning = new org . apache . flink . core . testutils . OneShotLatch ( ) ; org . apache . flink . core . testutils . CheckedThread asyncRequest = new org . apache . flink . core . testutils . CheckedThread ( ) { @ org . apache . flink . runtime . io . network . buffer . Override public void go ( ) throws org . apache . flink . runtime . io . network . buffer . Exception { isRunning . trigger ( ) ; globalPool . requestMemorySegments ( 10 ) ; } } ; asyncRequest . start ( ) ; isRunning . await ( ) ; java . lang . Thread . sleep ( 10 ) ; globalPool . destroy ( ) ; segment . free ( ) ; expectedException . expect ( org . apache . flink . runtime . io . network . buffer . IllegalStateException . class ) ; expectedException . expectMessage ( \"destroyed\" ) ; try { asyncRequest . sync ( ) ; } finally { globalPool . destroy ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( segment )", "total": "testRequestMemorySegmentsInterruptable ( ) { final int numBuffers = 10 ; org . apache . flink . runtime . io . network . buffer . NetworkBufferPool globalPool = new org . apache . flink . runtime . io . network . buffer . NetworkBufferPool ( numBuffers , 128 ) ; org . apache . flink . core . memory . MemorySegment segment = globalPool . requestMemorySegment ( ) ; \"<AssertPlaceHolder>\" ; final org . apache . flink . core . testutils . OneShotLatch isRunning = new org . apache . flink . core . testutils . OneShotLatch ( ) ; org . apache . flink . core . testutils . CheckedThread asyncRequest = new org . apache . flink . core . testutils . CheckedThread ( ) { @ org . apache . flink . runtime . io . network . buffer . Override public void go ( ) throws org . apache . flink . runtime . io . network . buffer . Exception { isRunning . trigger ( ) ; globalPool . requestMemorySegments ( 10 ) ; } } ; asyncRequest . start ( ) ; isRunning . await ( ) ; java . lang . Thread . sleep ( 10 ) ; globalPool . destroy ( ) ; segment . free ( ) ; expectedException . expect ( org . apache . flink . runtime . io . network . buffer . IllegalStateException . class ) ; expectedException . expectMessage ( \"destroyed\" ) ; try { asyncRequest . sync ( ) ; } finally { globalPool . destroy ( ) ; } } requestMemorySegment ( ) { return availableMemorySegments . poll ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( segment )"}
{"focal": "getRETool ( java . lang . String ) { return relationTool . get ( lang ) ; }", "testMethod": "test ( ) { org . aksw . fox . tools . re . REToolsTest . LOG . info ( \"REToolsTest<sp>start<sp>...\" ) ; final org . aksw . fox . tools . ToolsGenerator toolsGenerator = new org . aksw . fox . tools . ToolsGenerator ( ) ; for ( final java . lang . String lang : org . aksw . fox . tools . ToolsGenerator . usedLang ) { final org . aksw . fox . tools . re . RETools reTools = toolsGenerator . getRETools ( lang ) ; final java . util . List < org . aksw . fox . tools . re . IRE > tools = reTools . getRETool ( lang ) ; \"<AssertPlaceHolder>\" ; } org . aksw . fox . tools . re . REToolsTest . LOG . info ( \"REToolsTest<sp>end.\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( \"test\" , tools )", "total": "test ( ) { org . aksw . fox . tools . re . REToolsTest . LOG . info ( \"REToolsTest<sp>start<sp>...\" ) ; final org . aksw . fox . tools . ToolsGenerator toolsGenerator = new org . aksw . fox . tools . ToolsGenerator ( ) ; for ( final java . lang . String lang : org . aksw . fox . tools . ToolsGenerator . usedLang ) { final org . aksw . fox . tools . re . RETools reTools = toolsGenerator . getRETools ( lang ) ; final java . util . List < org . aksw . fox . tools . re . IRE > tools = reTools . getRETool ( lang ) ; \"<AssertPlaceHolder>\" ; } org . aksw . fox . tools . re . REToolsTest . LOG . info ( \"REToolsTest<sp>end.\" ) ; } getRETool ( java . lang . String ) { return relationTool . get ( lang ) ; }", "answer": "org . junit . Assert . assertNotNull ( \"test\" , tools )"}
{"focal": "get ( ) { java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.menu.get\" ) ; java . lang . String content = wxClient . get ( url ) ; com . riversoft . weixin . mp . menu . Menus . logger . debug ( \"get<sp>default<sp>menu:<sp>{}\" , content ) ; com . riversoft . weixin . mp . menu . Menus . MenuWrapper menuWrapper = com . riversoft . weixin . common . util . JsonMapper . nonEmptyMapper ( ) . fromJson ( content , com . riversoft . weixin . mp . menu . Menus . MenuWrapper . class ) ; return menuWrapper . getMenu ( ) ; }", "testMethod": "testGet ( ) { com . riversoft . weixin . mp . menu . Menu menu = com . riversoft . weixin . mp . menu . Menus . defaultMenus ( ) . get ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( menu )", "total": "testGet ( ) { com . riversoft . weixin . mp . menu . Menu menu = com . riversoft . weixin . mp . menu . Menus . defaultMenus ( ) . get ( ) ; \"<AssertPlaceHolder>\" ; } get ( ) { java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.menu.get\" ) ; java . lang . String content = wxClient . get ( url ) ; com . riversoft . weixin . mp . menu . Menus . logger . debug ( \"get<sp>default<sp>menu:<sp>{}\" , content ) ; com . riversoft . weixin . mp . menu . Menus . MenuWrapper menuWrapper = com . riversoft . weixin . common . util . JsonMapper . nonEmptyMapper ( ) . fromJson ( content , com . riversoft . weixin . mp . menu . Menus . MenuWrapper . class ) ; return menuWrapper . getMenu ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( menu )"}
{"focal": "getStorageLocation ( ) { org . eclipse . core . runtime . IPath tempDir = org . eclipse . core . tests . harness . FileSystemHelper . getTempDir ( ) ; tempDir = tempDir . append ( defaultFileName ) ; return tempDir . toFile ( ) . toURL ( ) ; }", "testMethod": "testPreferences ( ) { java . net . URL location = getStorageLocation ( ) ; \"<AssertPlaceHolder>\" ; { org . eclipse . equinox . security . storage . ISecurePreferences preferences = newPreferences ( getStorageLocation ( ) , getOptions ( ) ) ; fill ( preferences ) ; preferences . flush ( ) ; closePreferences ( preferences ) ; } { org . eclipse . equinox . security . storage . ISecurePreferences preferences = newPreferences ( getStorageLocation ( ) , getOptions ( ) ) ; check ( preferences ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( location )", "total": "testPreferences ( ) { java . net . URL location = getStorageLocation ( ) ; \"<AssertPlaceHolder>\" ; { org . eclipse . equinox . security . storage . ISecurePreferences preferences = newPreferences ( getStorageLocation ( ) , getOptions ( ) ) ; fill ( preferences ) ; preferences . flush ( ) ; closePreferences ( preferences ) ; } { org . eclipse . equinox . security . storage . ISecurePreferences preferences = newPreferences ( getStorageLocation ( ) , getOptions ( ) ) ; check ( preferences ) ; } } getStorageLocation ( ) { org . eclipse . core . runtime . IPath tempDir = org . eclipse . core . tests . harness . FileSystemHelper . getTempDir ( ) ; tempDir = tempDir . append ( defaultFileName ) ; return tempDir . toFile ( ) . toURL ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( location )"}
{"focal": "toString ( ) { return org . apache . commons . lang3 . builder . ReflectionToStringBuilder . toString ( this ) ; }", "testMethod": "testGetFloatingIPActionInfo ( ) { com . myjeeva . digitalocean . pojo . Action action = apiClient . getFloatingIPActionInfo ( \"159.203.146.100\" , 76697074 ) ; log . info ( action . toString ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( action )", "total": "testGetFloatingIPActionInfo ( ) { com . myjeeva . digitalocean . pojo . Action action = apiClient . getFloatingIPActionInfo ( \"159.203.146.100\" , 76697074 ) ; log . info ( action . toString ( ) ) ; \"<AssertPlaceHolder>\" ; } toString ( ) { return org . apache . commons . lang3 . builder . ReflectionToStringBuilder . toString ( this ) ; }", "answer": "org . junit . Assert . assertNotNull ( action )"}
{"focal": "build ( ) { return _identityMessage ; }", "testMethod": "testDoNotBreakWithoutSettingValues ( ) { com . liferay . portal . search . web . internal . modified . facet . display . context . ModifiedFacetCalendarDisplayBuilder modifiedFacetCalendarDisplayBuilder = createDisplayBuilder ( ) ; com . liferay . portal . search . web . internal . modified . facet . display . context . ModifiedFacetCalendarDisplayContext modifiedFacetCalendarDisplayContext = modifiedFacetCalendarDisplayBuilder . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( modifiedFacetCalendarDisplayContext )", "total": "testDoNotBreakWithoutSettingValues ( ) { com . liferay . portal . search . web . internal . modified . facet . display . context . ModifiedFacetCalendarDisplayBuilder modifiedFacetCalendarDisplayBuilder = createDisplayBuilder ( ) ; com . liferay . portal . search . web . internal . modified . facet . display . context . ModifiedFacetCalendarDisplayContext modifiedFacetCalendarDisplayContext = modifiedFacetCalendarDisplayBuilder . build ( ) ; \"<AssertPlaceHolder>\" ; } build ( ) { return _identityMessage ; }", "answer": "org . junit . Assert . assertNotNull ( modifiedFacetCalendarDisplayContext )"}
{"focal": "getII ( java . lang . String ) { org . apache . kylin . invertedindex . IIManager mgr = org . apache . kylin . invertedindex . IIManager . getInstance ( org . apache . kylin . common . KylinConfig . getInstanceFromEnv ( ) ) ; org . apache . kylin . invertedindex . IIInstance ii = mgr . getII ( iiName ) ; if ( ii == null ) throw new java . lang . IllegalArgumentException ( ( \"No<sp>Inverted<sp>Index<sp>found<sp>by<sp>name<sp>\" + iiName ) ) ; return ii ; }", "testMethod": "testCreateIIInstance ( ) { org . apache . kylin . invertedindex . model . IIDesc iiDesc = org . apache . kylin . invertedindex . IIDescManager . getInstance ( getTestConfig ( ) ) . getIIDesc ( \"test_kylin_ii_desc\" ) ; org . apache . kylin . invertedindex . IIInstance ii = org . apache . kylin . invertedindex . IIInstance . create ( \"new<sp>ii\" , \"default\" , iiDesc ) ; org . apache . kylin . invertedindex . IIManager iiMgr = org . apache . kylin . invertedindex . IIManager . getInstance ( getTestConfig ( ) ) ; java . util . List < org . apache . kylin . invertedindex . IIInstance > allIIList = iiMgr . listAllIIs ( ) ; iiMgr . createII ( ii ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( iiMgr . getII ( \"new<sp>ii\" ) )", "total": "testCreateIIInstance ( ) { org . apache . kylin . invertedindex . model . IIDesc iiDesc = org . apache . kylin . invertedindex . IIDescManager . getInstance ( getTestConfig ( ) ) . getIIDesc ( \"test_kylin_ii_desc\" ) ; org . apache . kylin . invertedindex . IIInstance ii = org . apache . kylin . invertedindex . IIInstance . create ( \"new<sp>ii\" , \"default\" , iiDesc ) ; org . apache . kylin . invertedindex . IIManager iiMgr = org . apache . kylin . invertedindex . IIManager . getInstance ( getTestConfig ( ) ) ; java . util . List < org . apache . kylin . invertedindex . IIInstance > allIIList = iiMgr . listAllIIs ( ) ; iiMgr . createII ( ii ) ; \"<AssertPlaceHolder>\" ; } getII ( java . lang . String ) { org . apache . kylin . invertedindex . IIManager mgr = org . apache . kylin . invertedindex . IIManager . getInstance ( org . apache . kylin . common . KylinConfig . getInstanceFromEnv ( ) ) ; org . apache . kylin . invertedindex . IIInstance ii = mgr . getII ( iiName ) ; if ( ii == null ) throw new java . lang . IllegalArgumentException ( ( \"No<sp>Inverted<sp>Index<sp>found<sp>by<sp>name<sp>\" + iiName ) ) ; return ii ; }", "answer": "org . junit . Assert . assertNotNull ( iiMgr . getII ( \"new<sp>ii\" ) )"}
{"focal": "verwerkBericht ( nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterVerzoekBericht ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType type = new nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType ( ) ; type . setGemeenteRegister ( new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteRegisterType ( ) ) ; final java . util . List < nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType > gemeentenList = type . getGemeenteRegister ( ) . getGemeente ( ) ; for ( final nl . bzk . migratiebrp . synchronisatie . dal . domein . brp . kern . entity . Gemeente gemeente : brpDalService . geefAlleGemeenten ( ) ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType gemeenteType = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; gemeenteType . setGemeenteCode ( asGemeenteCode ( gemeente . getCode ( ) ) ) ; gemeenteType . setPartijCode ( asPartijCode ( gemeente . getPartij ( ) . getCode ( ) ) ) ; if ( ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) ) != null ) { gemeenteType . setDatumBrp ( java . math . BigInteger . valueOf ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) . longValue ( ) ) ) ; } gemeentenList . add ( gemeenteType ) ; } final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType rni = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; rni . setGemeenteCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_GEMEENTE_CODE ) ; rni . setPartijCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_PARTIJ_CODE ) ; gemeentenList . add ( rni ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht antwoord = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht ( type ) ; antwoord . setStatus ( StatusType . OK ) ; antwoord . setMessageId ( nl . bzk . migratiebrp . synchronisatie . runtime . util . MessageId . generateSyncMessageId ( ) ) ; antwoord . setCorrelationId ( verzoek . getMessageId ( ) ) ; return antwoord ; }", "testMethod": "testBlokkeringAntwoordFout ( ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . BlokkeringVerzoekType blokkeringVerzoekType = new nl . bzk . migratiebrp . bericht . model . sync . generated . BlokkeringVerzoekType ( ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . BlokkeringVerzoekBericht blokkeringInfoVerzoek = new nl . bzk . migratiebrp . bericht . model . sync . impl . BlokkeringVerzoekBericht ( blokkeringVerzoekType ) ; try { blokkeringVerzoekService . verwerkBericht ( blokkeringInfoVerzoek ) ; org . junit . Assert . fail ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; } verify ( brpDalService , times ( 0 ) ) . vraagOpBlokkering ( null ) ; verify ( brpDalService , times ( 0 ) ) . verwijderBlokkering ( null ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" , e )", "total": "testBlokkeringAntwoordFout ( ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . BlokkeringVerzoekType blokkeringVerzoekType = new nl . bzk . migratiebrp . bericht . model . sync . generated . BlokkeringVerzoekType ( ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . BlokkeringVerzoekBericht blokkeringInfoVerzoek = new nl . bzk . migratiebrp . bericht . model . sync . impl . BlokkeringVerzoekBericht ( blokkeringVerzoekType ) ; try { blokkeringVerzoekService . verwerkBericht ( blokkeringInfoVerzoek ) ; org . junit . Assert . fail ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; } verify ( brpDalService , times ( 0 ) ) . vraagOpBlokkering ( null ) ; verify ( brpDalService , times ( 0 ) ) . verwijderBlokkering ( null ) ; } verwerkBericht ( nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterVerzoekBericht ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType type = new nl . bzk . migratiebrp . bericht . model . sync . generated . LeesGemeenteRegisterAntwoordType ( ) ; type . setGemeenteRegister ( new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteRegisterType ( ) ) ; final java . util . List < nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType > gemeentenList = type . getGemeenteRegister ( ) . getGemeente ( ) ; for ( final nl . bzk . migratiebrp . synchronisatie . dal . domein . brp . kern . entity . Gemeente gemeente : brpDalService . geefAlleGemeenten ( ) ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType gemeenteType = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; gemeenteType . setGemeenteCode ( asGemeenteCode ( gemeente . getCode ( ) ) ) ; gemeenteType . setPartijCode ( asPartijCode ( gemeente . getPartij ( ) . getCode ( ) ) ) ; if ( ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) ) != null ) { gemeenteType . setDatumBrp ( java . math . BigInteger . valueOf ( gemeente . getPartij ( ) . getDatumOvergangNaarBrp ( ) . longValue ( ) ) ) ; } gemeentenList . add ( gemeenteType ) ; } final nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType rni = new nl . bzk . migratiebrp . bericht . model . sync . generated . GemeenteType ( ) ; rni . setGemeenteCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_GEMEENTE_CODE ) ; rni . setPartijCode ( nl . bzk . migratiebrp . synchronisatie . runtime . service . GemeenteRegisterService . RNI_PARTIJ_CODE ) ; gemeentenList . add ( rni ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht antwoord = new nl . bzk . migratiebrp . bericht . model . sync . impl . LeesGemeenteRegisterAntwoordBericht ( type ) ; antwoord . setStatus ( StatusType . OK ) ; antwoord . setMessageId ( nl . bzk . migratiebrp . synchronisatie . runtime . util . MessageId . generateSyncMessageId ( ) ) ; antwoord . setCorrelationId ( verzoek . getMessageId ( ) ) ; return antwoord ; }", "answer": "org . junit . Assert . assertNotNull ( \"Er<sp>zou<sp>een<sp>fout<sp>op<sp>moeten<sp>treden.\" , e )"}
{"focal": "getScriptFile ( ) { final edu . illinois . library . cantaloupe . config . Configuration config = edu . illinois . library . cantaloupe . config . Configuration . getInstance ( ) ; final java . lang . String configValue = config . getString ( Key . DELEGATE_SCRIPT_PATHNAME , \"\" ) ; if ( ! ( configValue . isEmpty ( ) ) ) { java . nio . file . Path script = edu . illinois . library . cantaloupe . script . DelegateProxyService . findScript ( configValue ) ; if ( ! ( java . nio . file . Files . exists ( script ) ) ) { throw new java . nio . file . NoSuchFileException ( ( \"File<sp>not<sp>found:<sp>\" + ( script . toString ( ) ) ) ) ; } return script ; } return null ; }", "testMethod": "testGetScriptFileWithPresentValidScript ( ) { java . nio . file . Path file = edu . illinois . library . cantaloupe . script . DelegateProxyService . getScriptFile ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( file )", "total": "testGetScriptFileWithPresentValidScript ( ) { java . nio . file . Path file = edu . illinois . library . cantaloupe . script . DelegateProxyService . getScriptFile ( ) ; \"<AssertPlaceHolder>\" ; } getScriptFile ( ) { final edu . illinois . library . cantaloupe . config . Configuration config = edu . illinois . library . cantaloupe . config . Configuration . getInstance ( ) ; final java . lang . String configValue = config . getString ( Key . DELEGATE_SCRIPT_PATHNAME , \"\" ) ; if ( ! ( configValue . isEmpty ( ) ) ) { java . nio . file . Path script = edu . illinois . library . cantaloupe . script . DelegateProxyService . findScript ( configValue ) ; if ( ! ( java . nio . file . Files . exists ( script ) ) ) { throw new java . nio . file . NoSuchFileException ( ( \"File<sp>not<sp>found:<sp>\" + ( script . toString ( ) ) ) ) ; } return script ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( file )"}
{"focal": "renderKeySwapMatrix ( nl . cad . tpsparse . decrypt . Key ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( \"<sp>\" ) ; for ( int t = 0 ; t < 16 ; t ++ ) { sb . append ( java . lang . Integer . toHexString ( t ) ) ; sb . append ( \"<sp>\" ) ; } sb . append ( \"\\n\" ) ; for ( int t = 15 ; t >= 0 ; t -- ) { int shuffle = ( key . getWord ( t ) ) & 15 ; sb . append ( java . lang . Integer . toHexString ( t ) ) ; sb . append ( \"<sp>\" ) ; sb . append ( sshuf ( t , shuffle ) ) ; sb . append ( \"\\n\" ) ; } return sb . toString ( ) ; }", "testMethod": "shouldRenderMatrix ( ) { nl . cad . tpsparse . decrypt . Key k = new nl . cad . tpsparse . decrypt . Key ( \"12345678\" ) . init ( ) ; nl . cad . tpsparse . decrypt . KeyAnalyzer ka = new nl . cad . tpsparse . decrypt . KeyAnalyzer ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ka . renderKeySwapMatrix ( k ) )", "total": "shouldRenderMatrix ( ) { nl . cad . tpsparse . decrypt . Key k = new nl . cad . tpsparse . decrypt . Key ( \"12345678\" ) . init ( ) ; nl . cad . tpsparse . decrypt . KeyAnalyzer ka = new nl . cad . tpsparse . decrypt . KeyAnalyzer ( ) ; \"<AssertPlaceHolder>\" ; } renderKeySwapMatrix ( nl . cad . tpsparse . decrypt . Key ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( \"<sp>\" ) ; for ( int t = 0 ; t < 16 ; t ++ ) { sb . append ( java . lang . Integer . toHexString ( t ) ) ; sb . append ( \"<sp>\" ) ; } sb . append ( \"\\n\" ) ; for ( int t = 15 ; t >= 0 ; t -- ) { int shuffle = ( key . getWord ( t ) ) & 15 ; sb . append ( java . lang . Integer . toHexString ( t ) ) ; sb . append ( \"<sp>\" ) ; sb . append ( sshuf ( t , shuffle ) ) ; sb . append ( \"\\n\" ) ; } return sb . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( ka . renderKeySwapMatrix ( k ) )"}
{"focal": "load ( java . io . File ) { try { this . testSet = this . parser . parseFile ( file ) ; } catch ( org . tap4j . parser . ParserException e ) { throw new org . tap4j . consumer . TapConsumerException ( ( ( ( \"Failed<sp>to<sp>parse<sp>file<sp>\" + file ) + \":<sp>\" ) + ( e . getMessage ( ) ) ) , e ) ; } return this . testSet ; }", "testMethod": "testRandomStoutAfterTestPlanAtEnd ( ) { final java . lang . String validTapStream = \"ok<sp>1\\n1..1\\nJust<sp>some<sp>random<sp>stuff<sp>here\" ; final org . tap4j . model . TestSet testSet = getConsumer ( ) . load ( validTapStream ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( testSet )", "total": "testRandomStoutAfterTestPlanAtEnd ( ) { final java . lang . String validTapStream = \"ok<sp>1\\n1..1\\nJust<sp>some<sp>random<sp>stuff<sp>here\" ; final org . tap4j . model . TestSet testSet = getConsumer ( ) . load ( validTapStream ) ; \"<AssertPlaceHolder>\" ; } load ( java . io . File ) { try { this . testSet = this . parser . parseFile ( file ) ; } catch ( org . tap4j . parser . ParserException e ) { throw new org . tap4j . consumer . TapConsumerException ( ( ( ( \"Failed<sp>to<sp>parse<sp>file<sp>\" + file ) + \":<sp>\" ) + ( e . getMessage ( ) ) ) , e ) ; } return this . testSet ; }", "answer": "org . junit . Assert . assertNotNull ( testSet )"}
{"focal": "getTokenKey ( ) { return tokenString ; }", "testMethod": "testSAML2BearerGrant ( ) { java . lang . String address = ( \"https://localhost:\" + ( port ) ) + \"/oauth2/token\" ; org . apache . cxf . jaxrs . client . WebClient wc = createWebClient ( address ) ; org . apache . wss4j . common . crypto . Crypto crypto = new org . apache . cxf . rs . security . common . CryptoLoader ( ) . loadCrypto ( org . apache . cxf . systest . jaxrs . security . oauth2 . grants . JAXRSOAuth2Test . CRYPTO_RESOURCE_PROPERTIES ) ; org . apache . cxf . rs . security . saml . SAMLUtils . SelfSignInfo signInfo = new org . apache . cxf . rs . security . saml . SAMLUtils . SelfSignInfo ( crypto , \"alice\" , \"password\" ) ; org . apache . cxf . systest . jaxrs . security . oauth2 . common . SamlCallbackHandler samlCallbackHandler = new org . apache . cxf . systest . jaxrs . security . oauth2 . common . SamlCallbackHandler ( false ) ; java . lang . String audienceURI = ( \"https://localhost:\" + ( port ) ) + \"/oauth2/token\" ; samlCallbackHandler . setAudience ( audienceURI ) ; org . apache . wss4j . common . saml . SamlAssertionWrapper assertionWrapper = org . apache . cxf . rs . security . saml . SAMLUtils . createAssertion ( samlCallbackHandler , signInfo ) ; org . w3c . dom . Document doc = org . apache . cxf . helpers . DOMUtils . newDocument ( ) ; org . w3c . dom . Element assertionElement = assertionWrapper . toDOM ( doc ) ; java . lang . String assertion = org . apache . wss4j . common . util . DOM2Writer . nodeToString ( assertionElement ) ; org . apache . cxf . rs . security . oauth2 . grants . saml . Saml2BearerGrant grant = new org . apache . cxf . rs . security . oauth2 . grants . saml . Saml2BearerGrant ( assertion ) ; org . apache . cxf . rs . security . oauth2 . common . ClientAccessToken at = org . apache . cxf . rs . security . oauth2 . client . OAuthClientUtils . getAccessToken ( wc , new org . apache . cxf . rs . security . oauth2 . client . Consumer ( \"alice\" , \"alice\" ) , grant , false ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( at . getTokenKey ( ) )", "total": "testSAML2BearerGrant ( ) { java . lang . String address = ( \"https://localhost:\" + ( port ) ) + \"/oauth2/token\" ; org . apache . cxf . jaxrs . client . WebClient wc = createWebClient ( address ) ; org . apache . wss4j . common . crypto . Crypto crypto = new org . apache . cxf . rs . security . common . CryptoLoader ( ) . loadCrypto ( org . apache . cxf . systest . jaxrs . security . oauth2 . grants . JAXRSOAuth2Test . CRYPTO_RESOURCE_PROPERTIES ) ; org . apache . cxf . rs . security . saml . SAMLUtils . SelfSignInfo signInfo = new org . apache . cxf . rs . security . saml . SAMLUtils . SelfSignInfo ( crypto , \"alice\" , \"password\" ) ; org . apache . cxf . systest . jaxrs . security . oauth2 . common . SamlCallbackHandler samlCallbackHandler = new org . apache . cxf . systest . jaxrs . security . oauth2 . common . SamlCallbackHandler ( false ) ; java . lang . String audienceURI = ( \"https://localhost:\" + ( port ) ) + \"/oauth2/token\" ; samlCallbackHandler . setAudience ( audienceURI ) ; org . apache . wss4j . common . saml . SamlAssertionWrapper assertionWrapper = org . apache . cxf . rs . security . saml . SAMLUtils . createAssertion ( samlCallbackHandler , signInfo ) ; org . w3c . dom . Document doc = org . apache . cxf . helpers . DOMUtils . newDocument ( ) ; org . w3c . dom . Element assertionElement = assertionWrapper . toDOM ( doc ) ; java . lang . String assertion = org . apache . wss4j . common . util . DOM2Writer . nodeToString ( assertionElement ) ; org . apache . cxf . rs . security . oauth2 . grants . saml . Saml2BearerGrant grant = new org . apache . cxf . rs . security . oauth2 . grants . saml . Saml2BearerGrant ( assertion ) ; org . apache . cxf . rs . security . oauth2 . common . ClientAccessToken at = org . apache . cxf . rs . security . oauth2 . client . OAuthClientUtils . getAccessToken ( wc , new org . apache . cxf . rs . security . oauth2 . client . Consumer ( \"alice\" , \"alice\" ) , grant , false ) ; \"<AssertPlaceHolder>\" ; } getTokenKey ( ) { return tokenString ; }", "answer": "org . junit . Assert . assertNotNull ( at . getTokenKey ( ) )"}
{"focal": "createTlsPolicy ( com . intel . mtwilson . tls . policy . factory . TlsPolicyChoiceReport ) { try { com . fasterxml . jackson . databind . ObjectMapper mapper = new com . fasterxml . jackson . databind . ObjectMapper ( ) ; com . intel . mtwilson . tls . policy . factory . impl . TxtHostRecordTlsPolicyFactory . log . debug ( \"TxtHostRecordTlsPolicyFactory<sp>createTlsPolicy<sp>with<sp>report:<sp>{}\" , mapper . writeValueAsString ( report ) ) ; } catch ( java . lang . Exception e ) { com . intel . mtwilson . tls . policy . factory . impl . TxtHostRecordTlsPolicyFactory . log . error ( \"TxtHostRecordTlsPolicyFactory<sp>createTlsPolicy<sp>with<sp>report\" ) ; } objectTlsPolicyProvider . setTlsPolicyChoice ( report . getChoice ( ) ) ; return super . createTlsPolicy ( report ) ; }", "testMethod": "testCreatePublicKeyTlsPolicyFromCertificate ( ) { com . intel . mtwilson . tls . policy . TlsPolicyDescriptor tlsPolicyDescriptor = new com . intel . mtwilson . tls . policy . TlsPolicyDescriptor ( ) ; tlsPolicyDescriptor . setPolicyType ( \"public-key\" ) ; tlsPolicyDescriptor . setData ( new java . util . ArrayList < java . lang . String > ( ) ) ; tlsPolicyDescriptor . getData ( ) . add ( \"MIICJTCCAY6gAwIBAgIIebi9bYW6Z4gwDQYJKoZIhvcNAQELBQAwVTELMAkGA1UEBhMCVVMxHDAaBgNVBAoTE1RydXN0ZWQgRGF0YSBDZW50ZXIxEjAQBgNVBAsTCU10IFdpbHNvbjEUMBIGA1UEAwwLQ049c2FtcGxlXzAwHhcNMTQwNzExMTQxNDU5WhcNMTQwNzEyMTQxNDU5WjBVMQswCQYDVQQGEwJVUzEcMBoGA1UEChMTVHJ1c3RlZCBEYXRhIENlbnRlcjESMBAGA1UECxMJTXQgV2lsc29uMRQwEgYDVQQDDAtDTj1zYW1wbGVfMDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA0SLMa7UTLqJVYsPr6wuMn2HaRvpc0N18tqIS23FUnGLCI0wZpV74hUlSjbv5+D/OQOKhHjQzFlUK6dHaa8XFxa8WC633DY+iZNajRsl3XN1W51uQzI1wrxtOQAX7h34XmqM2diGsl4uk/ysiqwS19A2uWRRQ3WeDPzrdnDthpyUCAwEAATANBgkqhkiG9w0BAQsFAAOBgQBLsXUyoCmDXRafdabCE0r2djgCpIT7jxMYkDz67qwUMztwZRbaNF/um05kHDBhZCvoUH/NjWZ/hXnAB7mg+djJOQ2DEa0oi8eRewJE1CLXusp5tJvzkFrgYTQ0eoYnS97QJbNn//LaACKj+7aIdSx1hxKQhWXpir8vvHoLLhdCDQ==\" ) ; com . intel . mtwilson . tls . policy . creator . impl . PublicKeyTlsPolicyCreator creator = new com . intel . mtwilson . tls . policy . creator . impl . PublicKeyTlsPolicyCreator ( ) ; com . intel . dcsg . cpg . tls . policy . impl . PublicKeyTlsPolicy tlsPolicy = creator . createTlsPolicy ( tlsPolicyDescriptor ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( tlsPolicy )", "total": "testCreatePublicKeyTlsPolicyFromCertificate ( ) { com . intel . mtwilson . tls . policy . TlsPolicyDescriptor tlsPolicyDescriptor = new com . intel . mtwilson . tls . policy . TlsPolicyDescriptor ( ) ; tlsPolicyDescriptor . setPolicyType ( \"public-key\" ) ; tlsPolicyDescriptor . setData ( new java . util . ArrayList < java . lang . String > ( ) ) ; tlsPolicyDescriptor . getData ( ) . add ( \"MIICJTCCAY6gAwIBAgIIebi9bYW6Z4gwDQYJKoZIhvcNAQELBQAwVTELMAkGA1UEBhMCVVMxHDAaBgNVBAoTE1RydXN0ZWQgRGF0YSBDZW50ZXIxEjAQBgNVBAsTCU10IFdpbHNvbjEUMBIGA1UEAwwLQ049c2FtcGxlXzAwHhcNMTQwNzExMTQxNDU5WhcNMTQwNzEyMTQxNDU5WjBVMQswCQYDVQQGEwJVUzEcMBoGA1UEChMTVHJ1c3RlZCBEYXRhIENlbnRlcjESMBAGA1UECxMJTXQgV2lsc29uMRQwEgYDVQQDDAtDTj1zYW1wbGVfMDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA0SLMa7UTLqJVYsPr6wuMn2HaRvpc0N18tqIS23FUnGLCI0wZpV74hUlSjbv5+D/OQOKhHjQzFlUK6dHaa8XFxa8WC633DY+iZNajRsl3XN1W51uQzI1wrxtOQAX7h34XmqM2diGsl4uk/ysiqwS19A2uWRRQ3WeDPzrdnDthpyUCAwEAATANBgkqhkiG9w0BAQsFAAOBgQBLsXUyoCmDXRafdabCE0r2djgCpIT7jxMYkDz67qwUMztwZRbaNF/um05kHDBhZCvoUH/NjWZ/hXnAB7mg+djJOQ2DEa0oi8eRewJE1CLXusp5tJvzkFrgYTQ0eoYnS97QJbNn//LaACKj+7aIdSx1hxKQhWXpir8vvHoLLhdCDQ==\" ) ; com . intel . mtwilson . tls . policy . creator . impl . PublicKeyTlsPolicyCreator creator = new com . intel . mtwilson . tls . policy . creator . impl . PublicKeyTlsPolicyCreator ( ) ; com . intel . dcsg . cpg . tls . policy . impl . PublicKeyTlsPolicy tlsPolicy = creator . createTlsPolicy ( tlsPolicyDescriptor ) ; \"<AssertPlaceHolder>\" ; } createTlsPolicy ( com . intel . mtwilson . tls . policy . factory . TlsPolicyChoiceReport ) { try { com . fasterxml . jackson . databind . ObjectMapper mapper = new com . fasterxml . jackson . databind . ObjectMapper ( ) ; com . intel . mtwilson . tls . policy . factory . impl . TxtHostRecordTlsPolicyFactory . log . debug ( \"TxtHostRecordTlsPolicyFactory<sp>createTlsPolicy<sp>with<sp>report:<sp>{}\" , mapper . writeValueAsString ( report ) ) ; } catch ( java . lang . Exception e ) { com . intel . mtwilson . tls . policy . factory . impl . TxtHostRecordTlsPolicyFactory . log . error ( \"TxtHostRecordTlsPolicyFactory<sp>createTlsPolicy<sp>with<sp>report\" ) ; } objectTlsPolicyProvider . setTlsPolicyChoice ( report . getChoice ( ) ) ; return super . createTlsPolicy ( report ) ; }", "answer": "org . junit . Assert . assertNotNull ( tlsPolicy )"}
{"focal": "enterIFrame ( ) { driver . switchTo ( ) . frame ( iFrame ) ; return driver . switchTo ( ) . activeElement ( ) ; }", "testMethod": "iFrameFocus ( ) { \"<AssertPlaceHolder>\" ; iFramePage . leaveIFrame ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( iFramePage . enterIFrame ( ) )", "total": "iFrameFocus ( ) { \"<AssertPlaceHolder>\" ; iFramePage . leaveIFrame ( ) ; } enterIFrame ( ) { driver . switchTo ( ) . frame ( iFrame ) ; return driver . switchTo ( ) . activeElement ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( iFramePage . enterIFrame ( ) )"}
{"focal": "addAct ( org . openhealthtools . mdht . uml . cda . Act ) { org . openhealthtools . mdht . uml . cda . operations . ClinicalStatementOperations . addAct ( this , act ) ; }", "testMethod": "testGetMedicationFullfillmentInstructions ( ) { org . openhealthtools . mdht . uml . cda . ihe . SupplyEntry target = IHEFactory . eINSTANCE . createSupplyEntry ( ) . init ( ) ; org . openhealthtools . mdht . uml . cda . ihe . MedicationFullfillmentInstructions mfi = IHEFactory . eINSTANCE . createMedicationFullfillmentInstructions ( ) . init ( ) ; target . addAct ( mfi ) ; org . openhealthtools . mdht . uml . cda . ihe . MedicationFullfillmentInstructions result = org . openhealthtools . mdht . uml . cda . ihe . operations . SupplyEntryOperations . getMedicationFullfillmentInstructions ( target ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetMedicationFullfillmentInstructions ( ) { org . openhealthtools . mdht . uml . cda . ihe . SupplyEntry target = IHEFactory . eINSTANCE . createSupplyEntry ( ) . init ( ) ; org . openhealthtools . mdht . uml . cda . ihe . MedicationFullfillmentInstructions mfi = IHEFactory . eINSTANCE . createMedicationFullfillmentInstructions ( ) . init ( ) ; target . addAct ( mfi ) ; org . openhealthtools . mdht . uml . cda . ihe . MedicationFullfillmentInstructions result = org . openhealthtools . mdht . uml . cda . ihe . operations . SupplyEntryOperations . getMedicationFullfillmentInstructions ( target ) ; \"<AssertPlaceHolder>\" ; } addAct ( org . openhealthtools . mdht . uml . cda . Act ) { org . openhealthtools . mdht . uml . cda . operations . ClinicalStatementOperations . addAct ( this , act ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "serviceResolved ( java . lang . String , ch . cyberduck . core . Host ) { try { org . junit . Assert . assertNotNull ( host ) ; } catch ( java . lang . AssertionError error ) { failure [ 0 ] = error ; } finally { wait . countDown ( ) ; } }", "testMethod": "testInit ( ) { final ch . cyberduck . core . bonjour . Rendezvous r = new ch . cyberduck . core . bonjour . RendezvousResponder ( ) ; final java . util . concurrent . CountDownLatch wait = new java . util . concurrent . CountDownLatch ( 1 ) ; final java . lang . AssertionError [ ] failure = new java . lang . AssertionError [ 1 ] ; r . addListener ( new ch . cyberduck . core . bonjour . RendezvousListener ( ) { @ ch . cyberduck . core . bonjour . Override public void serviceResolved ( final java . lang . String identifier , final ch . cyberduck . core . Host host ) { try { \"<AssertPlaceHolder>\" ; } catch ( java . lang . AssertionError error ) { failure [ 0 ] = error ; } finally { wait . countDown ( ) ; } } @ ch . cyberduck . core . bonjour . Override public void serviceLost ( final ch . cyberduck . core . Host servicename ) { } } ) ; r . init ( ) ; wait . await ( 5L , TimeUnit . SECONDS ) ; if ( ( failure [ 0 ] ) != null ) { org . junit . Assert . fail ( failure [ 0 ] . getMessage ( ) ) ; } r . quit ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( host )", "total": "testInit ( ) { final ch . cyberduck . core . bonjour . Rendezvous r = new ch . cyberduck . core . bonjour . RendezvousResponder ( ) ; final java . util . concurrent . CountDownLatch wait = new java . util . concurrent . CountDownLatch ( 1 ) ; final java . lang . AssertionError [ ] failure = new java . lang . AssertionError [ 1 ] ; r . addListener ( new ch . cyberduck . core . bonjour . RendezvousListener ( ) { @ ch . cyberduck . core . bonjour . Override public void serviceResolved ( final java . lang . String identifier , final ch . cyberduck . core . Host host ) { try { \"<AssertPlaceHolder>\" ; } catch ( java . lang . AssertionError error ) { failure [ 0 ] = error ; } finally { wait . countDown ( ) ; } } @ ch . cyberduck . core . bonjour . Override public void serviceLost ( final ch . cyberduck . core . Host servicename ) { } } ) ; r . init ( ) ; wait . await ( 5L , TimeUnit . SECONDS ) ; if ( ( failure [ 0 ] ) != null ) { org . junit . Assert . fail ( failure [ 0 ] . getMessage ( ) ) ; } r . quit ( ) ; } serviceResolved ( java . lang . String , ch . cyberduck . core . Host ) { try { org . junit . Assert . assertNotNull ( host ) ; } catch ( java . lang . AssertionError error ) { failure [ 0 ] = error ; } finally { wait . countDown ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( host )"}
{"focal": "createTransactionChain ( org . opendaylight . mdsal . dom . api . DOMTransactionChainListener ) { return new org . opendaylight . mdsal . dom . broker . ShardedDOMTransactionChainAdapter ( newChainIdentifier ( ) , service , listener ) ; }", "testMethod": "testTransactionChainNoConflict ( ) { final org . opendaylight . mdsal . dom . broker . BlockingTransactionChainListener listener = new org . opendaylight . mdsal . dom . broker . BlockingTransactionChainListener ( ) ; final org . opendaylight . mdsal . dom . api . DOMTransactionChain txChain = domBroker . createTransactionChain ( listener ) ; \"<AssertPlaceHolder>\" ; txChain . close ( ) ; listener . getSuccessFuture ( ) . get ( 1000 , TimeUnit . MILLISECONDS ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( txChain )", "total": "testTransactionChainNoConflict ( ) { final org . opendaylight . mdsal . dom . broker . BlockingTransactionChainListener listener = new org . opendaylight . mdsal . dom . broker . BlockingTransactionChainListener ( ) ; final org . opendaylight . mdsal . dom . api . DOMTransactionChain txChain = domBroker . createTransactionChain ( listener ) ; \"<AssertPlaceHolder>\" ; txChain . close ( ) ; listener . getSuccessFuture ( ) . get ( 1000 , TimeUnit . MILLISECONDS ) ; } createTransactionChain ( org . opendaylight . mdsal . dom . api . DOMTransactionChainListener ) { return new org . opendaylight . mdsal . dom . broker . ShardedDOMTransactionChainAdapter ( newChainIdentifier ( ) , service , listener ) ; }", "answer": "org . junit . Assert . assertNotNull ( txChain )"}
{"focal": "parse ( java . lang . String ) { net . sourceforge . pmd . lang . LanguageVersionHandler jspLang = net . sourceforge . pmd . lang . LanguageRegistry . getLanguage ( JspLanguageModule . NAME ) . getDefaultVersion ( ) . getLanguageVersionHandler ( ) ; net . sourceforge . pmd . lang . Parser parser = jspLang . getParser ( jspLang . getDefaultParserOptions ( ) ) ; net . sourceforge . pmd . lang . ast . Node node = parser . parse ( null , new java . io . StringReader ( code ) ) ; return node ; }", "testMethod": "testParser ( ) { final net . sourceforge . pmd . lang . ast . Node node = parse ( net . sourceforge . pmd . lang . vm . VmParserTest . VM_SRC ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( node )", "total": "testParser ( ) { final net . sourceforge . pmd . lang . ast . Node node = parse ( net . sourceforge . pmd . lang . vm . VmParserTest . VM_SRC ) ; \"<AssertPlaceHolder>\" ; } parse ( java . lang . String ) { net . sourceforge . pmd . lang . LanguageVersionHandler jspLang = net . sourceforge . pmd . lang . LanguageRegistry . getLanguage ( JspLanguageModule . NAME ) . getDefaultVersion ( ) . getLanguageVersionHandler ( ) ; net . sourceforge . pmd . lang . Parser parser = jspLang . getParser ( jspLang . getDefaultParserOptions ( ) ) ; net . sourceforge . pmd . lang . ast . Node node = parser . parse ( null , new java . io . StringReader ( code ) ) ; return node ; }", "answer": "org . junit . Assert . assertNotNull ( node )"}
{"focal": "getProperty ( java . lang . String ) { java . lang . String value = null ; try { value = org . easysoa . proxy . core . api . properties . PropertyManager . properties . getProperty ( propertyName ) ; } catch ( java . lang . Exception ex ) { org . easysoa . proxy . core . api . properties . PropertyManager . logger . error ( ( \"An<sp>error<sp>occurs<sp>during<sp>the<sp>load<sp>of<sp>properties<sp>:<sp>\" + ( ex . getMessage ( ) ) ) ) ; org . easysoa . proxy . core . api . properties . PropertyManager . logger . error ( \"null<sp>value<sp>is<sp>returned<sp>!\" ) ; } return value ; }", "testMethod": "testGalaxyDemo ( ) { org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . logger . debug ( \"Sending<sp>Demo<sp>request<sp>!\" ) ; javax . xml . ws . Service jaxwsService = javax . xml . ws . Service . create ( new java . net . URL ( org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . serviceUrl ) , org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . serviceName ) ; javax . xml . ws . Dispatch < javax . xml . soap . SOAPMessage > disp = jaxwsService . createDispatch ( org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . portName , javax . xml . soap . SOAPMessage . class , Service . Mode . MESSAGE ) ; java . io . FileInputStream fis = new java . io . FileInputStream ( new java . io . File ( ( ( java . lang . System . getProperty ( \"user.dir\" ) ) + \"/src/test/resources/galaxyDemoTestMessage.xml\" ) ) ) ; javax . xml . soap . SOAPMessage reqMsg = javax . xml . soap . MessageFactory . newInstance ( ) . createMessage ( null , fis ) ; \"<AssertPlaceHolder>\" ; javax . xml . soap . SOAPMessage response = disp . invoke ( reqMsg ) ; org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . logger . debug ( ( \"Response<sp>:<sp>\" + ( response . getSOAPBody ( ) . getTextContent ( ) . trim ( ) ) ) ) ; org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . logger . debug ( \"Demo<sp>request<sp>sent<sp>!\" ) ; java . lang . Thread . sleep ( 10000 ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( reqMsg )", "total": "testGalaxyDemo ( ) { org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . logger . debug ( \"Sending<sp>Demo<sp>request<sp>!\" ) ; javax . xml . ws . Service jaxwsService = javax . xml . ws . Service . create ( new java . net . URL ( org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . serviceUrl ) , org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . serviceName ) ; javax . xml . ws . Dispatch < javax . xml . soap . SOAPMessage > disp = jaxwsService . createDispatch ( org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . portName , javax . xml . soap . SOAPMessage . class , Service . Mode . MESSAGE ) ; java . io . FileInputStream fis = new java . io . FileInputStream ( new java . io . File ( ( ( java . lang . System . getProperty ( \"user.dir\" ) ) + \"/src/test/resources/galaxyDemoTestMessage.xml\" ) ) ) ; javax . xml . soap . SOAPMessage reqMsg = javax . xml . soap . MessageFactory . newInstance ( ) . createMessage ( null , fis ) ; \"<AssertPlaceHolder>\" ; javax . xml . soap . SOAPMessage response = disp . invoke ( reqMsg ) ; org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . logger . debug ( ( \"Response<sp>:<sp>\" + ( response . getSOAPBody ( ) . getTextContent ( ) . trim ( ) ) ) ) ; org . easysoa . galaxydemotest . standalone . GalaxyDemoTestStarter . logger . debug ( \"Demo<sp>request<sp>sent<sp>!\" ) ; java . lang . Thread . sleep ( 10000 ) ; } getProperty ( java . lang . String ) { java . lang . String value = null ; try { value = org . easysoa . proxy . core . api . properties . PropertyManager . properties . getProperty ( propertyName ) ; } catch ( java . lang . Exception ex ) { org . easysoa . proxy . core . api . properties . PropertyManager . logger . error ( ( \"An<sp>error<sp>occurs<sp>during<sp>the<sp>load<sp>of<sp>properties<sp>:<sp>\" + ( ex . getMessage ( ) ) ) ) ; org . easysoa . proxy . core . api . properties . PropertyManager . logger . error ( \"null<sp>value<sp>is<sp>returned<sp>!\" ) ; } return value ; }", "answer": "org . junit . Assert . assertNotNull ( reqMsg )"}
{"focal": "createSerializedIdentity ( ) { return org . hyperledger . fabric . sdk . transaction . ProtoUtils . createSerializedIdentity ( user ) ; }", "testMethod": "testSerializingAndDeserializingIdentity ( ) { org . hyperledger . fabric . protos . msp . Identities . SerializedIdentity proto = org . hyperledger . fabric . sdk . identity . IdemixIdentitiesTest . signingIdentity . createSerializedIdentity ( ) ; \"<AssertPlaceHolder>\" ; org . hyperledger . fabric . protos . msp . Identities . SerializedIdemixIdentity idemixProto = null ; try { idemixProto = Identities . SerializedIdemixIdentity . parseFrom ( proto . getIdBytes ( ) ) ; } catch ( com . google . protobuf . InvalidProtocolBufferException e ) { org . junit . Assert . fail ( ( \"Could<sp>not<sp>parse<sp>Idemix<sp>Serialized<sp>Identity\" + ( e . getMessage ( ) ) ) ) ; } if ( idemixProto != null ) { new org . apache . milagro . amcl . FP256BN . ECP ( org . apache . milagro . amcl . FP256BN . BIG . fromBytes ( idemixProto . getNymX ( ) . toByteArray ( ) ) , org . apache . milagro . amcl . FP256BN . BIG . fromBytes ( idemixProto . getNymY ( ) . toByteArray ( ) ) ) ; idemixProto . getOu ( ) . toByteArray ( ) ; idemixProto . getRole ( ) . toByteArray ( ) ; try { new org . hyperledger . fabric . sdk . idemix . IdemixSignature ( Idemix . Signature . parseFrom ( idemixProto . getProof ( ) . toByteArray ( ) ) ) ; } catch ( com . google . protobuf . InvalidProtocolBufferException e ) { org . junit . Assert . fail ( ( \"Cannot<sp>deserialize<sp>proof\" + ( e . getMessage ( ) ) ) ) ; } } try { new org . hyperledger . fabric . sdk . identity . IdemixIdentity ( proto ) ; } catch ( org . hyperledger . fabric . sdk . exception . CryptoException | org . hyperledger . fabric . sdk . exception . InvalidArgumentException e ) { org . junit . Assert . fail ( ( \"Cannot<sp>create<sp>Idemix<sp>Identity<sp>from<sp>Proto\" + ( e . getMessage ( ) ) ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( proto )", "total": "testSerializingAndDeserializingIdentity ( ) { org . hyperledger . fabric . protos . msp . Identities . SerializedIdentity proto = org . hyperledger . fabric . sdk . identity . IdemixIdentitiesTest . signingIdentity . createSerializedIdentity ( ) ; \"<AssertPlaceHolder>\" ; org . hyperledger . fabric . protos . msp . Identities . SerializedIdemixIdentity idemixProto = null ; try { idemixProto = Identities . SerializedIdemixIdentity . parseFrom ( proto . getIdBytes ( ) ) ; } catch ( com . google . protobuf . InvalidProtocolBufferException e ) { org . junit . Assert . fail ( ( \"Could<sp>not<sp>parse<sp>Idemix<sp>Serialized<sp>Identity\" + ( e . getMessage ( ) ) ) ) ; } if ( idemixProto != null ) { new org . apache . milagro . amcl . FP256BN . ECP ( org . apache . milagro . amcl . FP256BN . BIG . fromBytes ( idemixProto . getNymX ( ) . toByteArray ( ) ) , org . apache . milagro . amcl . FP256BN . BIG . fromBytes ( idemixProto . getNymY ( ) . toByteArray ( ) ) ) ; idemixProto . getOu ( ) . toByteArray ( ) ; idemixProto . getRole ( ) . toByteArray ( ) ; try { new org . hyperledger . fabric . sdk . idemix . IdemixSignature ( Idemix . Signature . parseFrom ( idemixProto . getProof ( ) . toByteArray ( ) ) ) ; } catch ( com . google . protobuf . InvalidProtocolBufferException e ) { org . junit . Assert . fail ( ( \"Cannot<sp>deserialize<sp>proof\" + ( e . getMessage ( ) ) ) ) ; } } try { new org . hyperledger . fabric . sdk . identity . IdemixIdentity ( proto ) ; } catch ( org . hyperledger . fabric . sdk . exception . CryptoException | org . hyperledger . fabric . sdk . exception . InvalidArgumentException e ) { org . junit . Assert . fail ( ( \"Cannot<sp>create<sp>Idemix<sp>Identity<sp>from<sp>Proto\" + ( e . getMessage ( ) ) ) ) ; } } createSerializedIdentity ( ) { return org . hyperledger . fabric . sdk . transaction . ProtoUtils . createSerializedIdentity ( user ) ; }", "answer": "org . junit . Assert . assertNotNull ( proto )"}
{"focal": "getRunner ( ) { validateNotDestroyed ( ) ; try { return queue . take ( ) . runner ; } catch ( java . lang . InterruptedException e ) { throw new com . streamsets . datacollector . runner . PipelineRuntimeException ( com . streamsets . datacollector . util . ContainerError . CONTAINER_0801 , e ) ; } finally { runtimeStats . setAvailableRunners ( queue . size ( ) ) ; histogram . update ( queue . size ( ) ) ; } }", "testMethod": "testDestroyNotAllReturned ( ) { java . lang . String runner = runnerPool . getRunner ( ) ; \"<AssertPlaceHolder>\" ; runnerPool . destroy ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( runner )", "total": "testDestroyNotAllReturned ( ) { java . lang . String runner = runnerPool . getRunner ( ) ; \"<AssertPlaceHolder>\" ; runnerPool . destroy ( ) ; } getRunner ( ) { validateNotDestroyed ( ) ; try { return queue . take ( ) . runner ; } catch ( java . lang . InterruptedException e ) { throw new com . streamsets . datacollector . runner . PipelineRuntimeException ( com . streamsets . datacollector . util . ContainerError . CONTAINER_0801 , e ) ; } finally { runtimeStats . setAvailableRunners ( queue . size ( ) ) ; histogram . update ( queue . size ( ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( runner )"}
{"focal": "put ( K , T ) { this . mMap . put ( theRef , new net . violet . db . cache . CacheReference < K , T > ( theRef , theRecord , this . mReferenceQueue ) ) ; this . mLinkedMap . put ( theRef , theRecord ) ; }", "testMethod": "testNoSuchProduct ( ) { final net . violet . platform . datamodel . Lang frLang = getSiteFrLang ( ) ; final net . violet . platform . api . actions . Action theAction = new net . violet . platform . api . actions . news . GetNews ( ) ; final net . violet . platform . api . callers . APICaller caller = getPublicApplicationAPICaller ( ) ; final java . util . Map < java . lang . String , java . lang . Object > theParams = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; theParams . put ( \"language\" , frLang . getIsoCode ( ) ) ; theParams . put ( \"product\" , \"inexisting<sp>product<sp>!\" ) ; final net . violet . platform . api . actions . ActionParam theActionParam = new net . violet . platform . api . actions . ActionParam ( caller , theParams ) ; final java . lang . Object theResult = theAction . processRequest ( theActionParam ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( theResult )", "total": "testNoSuchProduct ( ) { final net . violet . platform . datamodel . Lang frLang = getSiteFrLang ( ) ; final net . violet . platform . api . actions . Action theAction = new net . violet . platform . api . actions . news . GetNews ( ) ; final net . violet . platform . api . callers . APICaller caller = getPublicApplicationAPICaller ( ) ; final java . util . Map < java . lang . String , java . lang . Object > theParams = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; theParams . put ( \"language\" , frLang . getIsoCode ( ) ) ; theParams . put ( \"product\" , \"inexisting<sp>product<sp>!\" ) ; final net . violet . platform . api . actions . ActionParam theActionParam = new net . violet . platform . api . actions . ActionParam ( caller , theParams ) ; final java . lang . Object theResult = theAction . processRequest ( theActionParam ) ; \"<AssertPlaceHolder>\" ; } put ( K , T ) { this . mMap . put ( theRef , new net . violet . db . cache . CacheReference < K , T > ( theRef , theRecord , this . mReferenceQueue ) ) ; this . mLinkedMap . put ( theRef , theRecord ) ; }", "answer": "org . junit . Assert . assertNotNull ( theResult )"}
{"focal": "code2Session ( java . lang . String ) { java . lang . String url = com . riversoft . weixin . app . base . WxEndpoint . get ( \"url.user.code2session\" ) ; java . lang . String sessionKey = wxClient . get ( java . lang . String . format ( url , wxClient . getClientId ( ) , wxClient . getClientSecret ( ) , code ) ) ; com . riversoft . weixin . app . user . Users . logger . debug ( \"code<sp>to<sp>session<sp>key:<sp>{}\" , sessionKey ) ; return com . riversoft . weixin . common . util . JsonMapper . nonEmptyMapper ( ) . fromJson ( sessionKey , com . riversoft . weixin . app . user . SessionKey . class ) ; }", "testMethod": "testCode2Session ( ) { com . riversoft . weixin . app . user . SessionKey sessionKey = com . riversoft . weixin . app . user . Users . with ( new com . riversoft . weixin . app . base . AppSetting ( \"appid\" , \"screctkey\" ) ) . code2Session ( \"011RedXY1NegvX0eLWXY1vVfXY1RedXu\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( sessionKey )", "total": "testCode2Session ( ) { com . riversoft . weixin . app . user . SessionKey sessionKey = com . riversoft . weixin . app . user . Users . with ( new com . riversoft . weixin . app . base . AppSetting ( \"appid\" , \"screctkey\" ) ) . code2Session ( \"011RedXY1NegvX0eLWXY1vVfXY1RedXu\" ) ; \"<AssertPlaceHolder>\" ; } code2Session ( java . lang . String ) { java . lang . String url = com . riversoft . weixin . app . base . WxEndpoint . get ( \"url.user.code2session\" ) ; java . lang . String sessionKey = wxClient . get ( java . lang . String . format ( url , wxClient . getClientId ( ) , wxClient . getClientSecret ( ) , code ) ) ; com . riversoft . weixin . app . user . Users . logger . debug ( \"code<sp>to<sp>session<sp>key:<sp>{}\" , sessionKey ) ; return com . riversoft . weixin . common . util . JsonMapper . nonEmptyMapper ( ) . fromJson ( sessionKey , com . riversoft . weixin . app . user . SessionKey . class ) ; }", "answer": "org . junit . Assert . assertNotNull ( sessionKey )"}
{"focal": "readString ( ) { return new java . lang . String ( readBytes ( ) , this . charset ) ; }", "testMethod": "fileReaderTest ( ) { cn . hutool . core . io . file . FileReader fileReader = new cn . hutool . core . io . file . FileReader ( \"test.properties\" ) ; java . lang . String result = fileReader . readString ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "fileReaderTest ( ) { cn . hutool . core . io . file . FileReader fileReader = new cn . hutool . core . io . file . FileReader ( \"test.properties\" ) ; java . lang . String result = fileReader . readString ( ) ; \"<AssertPlaceHolder>\" ; } readString ( ) { return new java . lang . String ( readBytes ( ) , this . charset ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getRecentlyScheduledShards ( ) { return context . getRecentlyScheduledShards ( ) ; }", "testMethod": "getRecentlyScheduledShardsGetsFromContext ( ) { java . util . Collection < java . lang . Integer > recent = service . getRecentlyScheduledShards ( ) ; \"<AssertPlaceHolder>\" ; verify ( context ) . getRecentlyScheduledShards ( ) ; verifyNoMoreInteractions ( context ) ; verifyZeroInteractions ( shardStateManager ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( recent )", "total": "getRecentlyScheduledShardsGetsFromContext ( ) { java . util . Collection < java . lang . Integer > recent = service . getRecentlyScheduledShards ( ) ; \"<AssertPlaceHolder>\" ; verify ( context ) . getRecentlyScheduledShards ( ) ; verifyNoMoreInteractions ( context ) ; verifyZeroInteractions ( shardStateManager ) ; } getRecentlyScheduledShards ( ) { return context . getRecentlyScheduledShards ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( recent )"}
{"focal": "get ( java . lang . String ) { return map . get ( name ) ; }", "testMethod": "testRequestIdIsSet ( ) { java . lang . String requestId = ( ( java . lang . String ) ( com . google . apphosting . api . ApiProxy . getCurrentEnvironment ( ) . getAttributes ( ) . get ( \"com.google.appengine.runtime.request_log_id\" ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( requestId )", "total": "testRequestIdIsSet ( ) { java . lang . String requestId = ( ( java . lang . String ) ( com . google . apphosting . api . ApiProxy . getCurrentEnvironment ( ) . getAttributes ( ) . get ( \"com.google.appengine.runtime.request_log_id\" ) ) ) ; \"<AssertPlaceHolder>\" ; } get ( java . lang . String ) { return map . get ( name ) ; }", "answer": "org . junit . Assert . assertNotNull ( requestId )"}
{"focal": "getUserTags ( java . lang . String ) { java . lang . String tag_userids_uri = getRequestUri ( \"tag_userids_uri\" ) ; com . foxinmy . weixin4j . http . weixin . WeixinResponse response = weixinExecutor . post ( java . lang . String . format ( tag_userids_uri , tokenManager . getAccessToken ( ) ) , java . lang . String . format ( \"{\\\"openid\\\":\\\"%s\\\"}\" , openId ) ) ; return response . getAsJson ( ) . getJSONArray ( \"tagid_list\" ) . toArray ( new java . lang . Integer [ ] { } ) ; }", "testMethod": "getidlist ( ) { java . lang . Integer [ ] tagIds = tagApi . getUserTags ( \"owGBft-GyGJuKXBzpkzrfl-RG8TI\" ) ; \"<AssertPlaceHolder>\" ; System . out . println ( tagIds [ 0 ] ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( tagIds )", "total": "getidlist ( ) { java . lang . Integer [ ] tagIds = tagApi . getUserTags ( \"owGBft-GyGJuKXBzpkzrfl-RG8TI\" ) ; \"<AssertPlaceHolder>\" ; System . out . println ( tagIds [ 0 ] ) ; } getUserTags ( java . lang . String ) { java . lang . String tag_userids_uri = getRequestUri ( \"tag_userids_uri\" ) ; com . foxinmy . weixin4j . http . weixin . WeixinResponse response = weixinExecutor . post ( java . lang . String . format ( tag_userids_uri , tokenManager . getAccessToken ( ) ) , java . lang . String . format ( \"{\\\"openid\\\":\\\"%s\\\"}\" , openId ) ) ; return response . getAsJson ( ) . getJSONArray ( \"tagid_list\" ) . toArray ( new java . lang . Integer [ ] { } ) ; }", "answer": "org . junit . Assert . assertNotNull ( tagIds )"}
{"focal": "getParentArtifactId ( ) { return parentArtifactId ; }", "testMethod": "testSetParentArtifactId ( ) { java . lang . String parentArtifactId = \"something\" ; org . owasp . dependencycheck . xml . pom . Model instance = new org . owasp . dependencycheck . xml . pom . Model ( ) ; instance . setParentArtifactId ( parentArtifactId ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance . getParentArtifactId ( ) )", "total": "testSetParentArtifactId ( ) { java . lang . String parentArtifactId = \"something\" ; org . owasp . dependencycheck . xml . pom . Model instance = new org . owasp . dependencycheck . xml . pom . Model ( ) ; instance . setParentArtifactId ( parentArtifactId ) ; \"<AssertPlaceHolder>\" ; } getParentArtifactId ( ) { return parentArtifactId ; }", "answer": "org . junit . Assert . assertNotNull ( instance . getParentArtifactId ( ) )"}
{"focal": "get ( ) { if ( ( com . vaadin . client . debug . internal . VDebugWindow . instance ) == null ) { com . vaadin . client . debug . internal . VDebugWindow . instance = com . google . gwt . core . shared . GWT . create ( com . vaadin . client . debug . internal . VDebugWindow . class ) ; } return com . vaadin . client . debug . internal . VDebugWindow . instance ; }", "testMethod": "connectorTrackerMemoryLeak ( ) { final com . vaadin . ui . UI ui = new com . vaadin . ui . UI ( ) { @ com . vaadin . ui . Override protected void init ( com . vaadin . server . VaadinRequest request ) { } } ; javax . servlet . ServletConfig servletConfig = new com . vaadin . server . MockServletConfig ( ) ; com . vaadin . server . VaadinServlet servlet = new com . vaadin . server . VaadinServlet ( ) ; servlet . init ( servletConfig ) ; com . vaadin . server . DefaultDeploymentConfiguration deploymentConfiguration = new com . vaadin . server . DefaultDeploymentConfiguration ( com . vaadin . ui . UI . class , new java . util . Properties ( ) ) ; com . vaadin . server . VaadinServletService service = new com . vaadin . server . VaadinServletService ( servlet , deploymentConfiguration ) ; com . vaadin . server . MockVaadinSession session = new com . vaadin . server . MockVaadinSession ( service ) ; session . lock ( ) ; ui . setSession ( session ) ; ui . doInit ( org . mockito . Mockito . mock ( com . vaadin . server . VaadinRequest . class ) , 1 , \"foo\" ) ; session . addUI ( ui ) ; ui . setContent ( createContent ( ) ) ; java . lang . ref . WeakReference < com . vaadin . ui . Component > contentSentToClient = new java . lang . ref . WeakReference ( ui . getContent ( ) ) ; ui . getConnectorTracker ( ) . markClientSideInitialized ( contentSentToClient . get ( ) ) ; session . unlock ( ) ; session . lock ( ) ; ui . setContent ( createContent ( ) ) ; java . lang . ref . WeakReference < com . vaadin . ui . Component > contentOnlyOnServer = new java . lang . ref . WeakReference ( ui . getContent ( ) ) ; ui . setContent ( createContent ( ) ) ; com . vaadin . util . CurrentInstanceTest . waitUntilGarbageCollected ( contentOnlyOnServer ) ; \"<AssertPlaceHolder>\" ; session . unlock ( ) ; com . vaadin . util . CurrentInstanceTest . waitUntilGarbageCollected ( contentSentToClient ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( contentSentToClient . get ( ) )", "total": "connectorTrackerMemoryLeak ( ) { final com . vaadin . ui . UI ui = new com . vaadin . ui . UI ( ) { @ com . vaadin . ui . Override protected void init ( com . vaadin . server . VaadinRequest request ) { } } ; javax . servlet . ServletConfig servletConfig = new com . vaadin . server . MockServletConfig ( ) ; com . vaadin . server . VaadinServlet servlet = new com . vaadin . server . VaadinServlet ( ) ; servlet . init ( servletConfig ) ; com . vaadin . server . DefaultDeploymentConfiguration deploymentConfiguration = new com . vaadin . server . DefaultDeploymentConfiguration ( com . vaadin . ui . UI . class , new java . util . Properties ( ) ) ; com . vaadin . server . VaadinServletService service = new com . vaadin . server . VaadinServletService ( servlet , deploymentConfiguration ) ; com . vaadin . server . MockVaadinSession session = new com . vaadin . server . MockVaadinSession ( service ) ; session . lock ( ) ; ui . setSession ( session ) ; ui . doInit ( org . mockito . Mockito . mock ( com . vaadin . server . VaadinRequest . class ) , 1 , \"foo\" ) ; session . addUI ( ui ) ; ui . setContent ( createContent ( ) ) ; java . lang . ref . WeakReference < com . vaadin . ui . Component > contentSentToClient = new java . lang . ref . WeakReference ( ui . getContent ( ) ) ; ui . getConnectorTracker ( ) . markClientSideInitialized ( contentSentToClient . get ( ) ) ; session . unlock ( ) ; session . lock ( ) ; ui . setContent ( createContent ( ) ) ; java . lang . ref . WeakReference < com . vaadin . ui . Component > contentOnlyOnServer = new java . lang . ref . WeakReference ( ui . getContent ( ) ) ; ui . setContent ( createContent ( ) ) ; com . vaadin . util . CurrentInstanceTest . waitUntilGarbageCollected ( contentOnlyOnServer ) ; \"<AssertPlaceHolder>\" ; session . unlock ( ) ; com . vaadin . util . CurrentInstanceTest . waitUntilGarbageCollected ( contentSentToClient ) ; } get ( ) { if ( ( com . vaadin . client . debug . internal . VDebugWindow . instance ) == null ) { com . vaadin . client . debug . internal . VDebugWindow . instance = com . google . gwt . core . shared . GWT . create ( com . vaadin . client . debug . internal . VDebugWindow . class ) ; } return com . vaadin . client . debug . internal . VDebugWindow . instance ; }", "answer": "org . junit . Assert . assertNotNull ( contentSentToClient . get ( ) )"}
{"focal": "createGerritTriggeredJobForCommentAdded ( org . jvnet . hudson . test . JenkinsRule , java . lang . String ) { return com . sonyericsson . hudson . plugins . gerrit . trigger . mock . DuplicatesUtil . createGerritTriggeredJobForCommentAdded ( rule , name , PluginImpl . DEFAULT_SERVER_NAME ) ; }", "testMethod": "testPopulateDropDown ( ) { @ com . sonyericsson . hudson . plugins . gerrit . trigger . project . SuppressWarnings ( \"unused\" ) java . util . List < com . sonyericsson . hudson . plugins . gerrit . trigger . GerritServer > servers = com . sonyericsson . hudson . plugins . gerrit . trigger . PluginImpl . getInstance ( ) . getServers ( ) ; com . sonyericsson . hudson . plugins . gerrit . trigger . GerritServer server = new com . sonyericsson . hudson . plugins . gerrit . trigger . GerritServer ( com . sonyericsson . hudson . plugins . gerrit . trigger . PluginImpl . DEFAULT_SERVER_NAME ) ; servers . add ( server ) ; server . start ( ) ; hudson . model . FreeStyleProject project = com . sonyericsson . hudson . plugins . gerrit . trigger . mock . DuplicatesUtil . createGerritTriggeredJobForCommentAdded ( j , \"myGerritProject\" ) ; org . jvnet . hudson . test . JenkinsRule . WebClient wc = j . createWebClient ( ) ; com . gargoylesoftware . htmlunit . html . HtmlPage page = wc . goTo ( \"Code-Review\" 0 ) ; java . util . List < com . gargoylesoftware . htmlunit . html . HtmlElement > elements = page . getDocumentElement ( ) . getElementsByAttribute ( \"td\" , \"class\" , \"setting-name\" ) ; com . gargoylesoftware . htmlunit . html . HtmlElement tr = null ; for ( com . gargoylesoftware . htmlunit . html . HtmlElement element : elements ) { if ( \"Verdict<sp>Category\" . equals ( element . getTextContent ( ) ) ) { tr = element . getEnclosingElement ( \"tr\" ) ; break ; } } \"<AssertPlaceHolder>\" ; com . gargoylesoftware . htmlunit . html . HtmlElement settingsMainElement = tr . getOneHtmlElementByAttribute ( \"td\" , \"class\" , \"setting-main\" ) ; com . gargoylesoftware . htmlunit . html . HtmlSelect select = ( ( com . gargoylesoftware . htmlunit . html . HtmlSelect ) ( settingsMainElement . getChildElements ( ) . iterator ( ) . next ( ) ) ) ; java . util . List < java . lang . String > expected = java . util . Arrays . asList ( \"Verified\" , \"Code-Review\" ) ; verifyOptions ( select , expected ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( tr )", "total": "testPopulateDropDown ( ) { @ com . sonyericsson . hudson . plugins . gerrit . trigger . project . SuppressWarnings ( \"unused\" ) java . util . List < com . sonyericsson . hudson . plugins . gerrit . trigger . GerritServer > servers = com . sonyericsson . hudson . plugins . gerrit . trigger . PluginImpl . getInstance ( ) . getServers ( ) ; com . sonyericsson . hudson . plugins . gerrit . trigger . GerritServer server = new com . sonyericsson . hudson . plugins . gerrit . trigger . GerritServer ( com . sonyericsson . hudson . plugins . gerrit . trigger . PluginImpl . DEFAULT_SERVER_NAME ) ; servers . add ( server ) ; server . start ( ) ; hudson . model . FreeStyleProject project = com . sonyericsson . hudson . plugins . gerrit . trigger . mock . DuplicatesUtil . createGerritTriggeredJobForCommentAdded ( j , \"myGerritProject\" ) ; org . jvnet . hudson . test . JenkinsRule . WebClient wc = j . createWebClient ( ) ; com . gargoylesoftware . htmlunit . html . HtmlPage page = wc . goTo ( \"Code-Review\" 0 ) ; java . util . List < com . gargoylesoftware . htmlunit . html . HtmlElement > elements = page . getDocumentElement ( ) . getElementsByAttribute ( \"td\" , \"class\" , \"setting-name\" ) ; com . gargoylesoftware . htmlunit . html . HtmlElement tr = null ; for ( com . gargoylesoftware . htmlunit . html . HtmlElement element : elements ) { if ( \"Verdict<sp>Category\" . equals ( element . getTextContent ( ) ) ) { tr = element . getEnclosingElement ( \"tr\" ) ; break ; } } \"<AssertPlaceHolder>\" ; com . gargoylesoftware . htmlunit . html . HtmlElement settingsMainElement = tr . getOneHtmlElementByAttribute ( \"td\" , \"class\" , \"setting-main\" ) ; com . gargoylesoftware . htmlunit . html . HtmlSelect select = ( ( com . gargoylesoftware . htmlunit . html . HtmlSelect ) ( settingsMainElement . getChildElements ( ) . iterator ( ) . next ( ) ) ) ; java . util . List < java . lang . String > expected = java . util . Arrays . asList ( \"Verified\" , \"Code-Review\" ) ; verifyOptions ( select , expected ) ; } createGerritTriggeredJobForCommentAdded ( org . jvnet . hudson . test . JenkinsRule , java . lang . String ) { return com . sonyericsson . hudson . plugins . gerrit . trigger . mock . DuplicatesUtil . createGerritTriggeredJobForCommentAdded ( rule , name , PluginImpl . DEFAULT_SERVER_NAME ) ; }", "answer": "org . junit . Assert . assertNotNull ( tr )"}
{"focal": "requestMetadata ( vcat . mediawiki . IWiki ) { vcat . mediawiki . Metadata metadata = null ; try { this . metadataCache . purge ( ) ; metadata = this . metadataCache . getMetadata ( wiki ) ; } catch ( vcat . cache . CacheException e ) { vcat . mediawiki . CachedMetadataProvider . LOGGER . warn ( vcat . Messages . getString ( \"CachedMetadataProvider.Warn.Retrieve\" ) , e ) ; } if ( metadata == null ) { try { metadata = this . metadataProvider . requestMetadata ( wiki ) ; this . metadataCache . put ( wiki , metadata ) ; } catch ( vcat . cache . CacheException e ) { throw new vcat . mediawiki . ApiException ( vcat . Messages . getString ( \"CachedMetadataProvider.Warn.Store\" ) , e ) ; } } return metadata ; }", "testMethod": "testRequestMetadata ( ) { vcat . mediawiki . Metadata result = client . requestMetadata ( wiki ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testRequestMetadata ( ) { vcat . mediawiki . Metadata result = client . requestMetadata ( wiki ) ; \"<AssertPlaceHolder>\" ; } requestMetadata ( vcat . mediawiki . IWiki ) { vcat . mediawiki . Metadata metadata = null ; try { this . metadataCache . purge ( ) ; metadata = this . metadataCache . getMetadata ( wiki ) ; } catch ( vcat . cache . CacheException e ) { vcat . mediawiki . CachedMetadataProvider . LOGGER . warn ( vcat . Messages . getString ( \"CachedMetadataProvider.Warn.Retrieve\" ) , e ) ; } if ( metadata == null ) { try { metadata = this . metadataProvider . requestMetadata ( wiki ) ; this . metadataCache . put ( wiki , metadata ) ; } catch ( vcat . cache . CacheException e ) { throw new vcat . mediawiki . ApiException ( vcat . Messages . getString ( \"CachedMetadataProvider.Warn.Store\" ) , e ) ; } } return metadata ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getBrpPersoonslijst ( ) { return asBrpPersoonslijst ( leesUitBrpAntwoordType . getBrpPl ( ) ) ; }", "testMethod": "testBrpPersoonslijstGetter ( ) { final java . lang . String berichtOrigineel = org . apache . commons . io . IOUtils . toString ( nl . moderniseringgba . isc . esb . message . brp . impl . NotificatieVerzoekBerichtTest . class . getResourceAsStream ( \"gerechtelijkeVaststellingVaderschapVerzoekBericht.xml\" ) ) ; final nl . moderniseringgba . isc . esb . message . brp . impl . GerechtelijkeVaststellingVaderschapVerzoekBericht gerechtelijkeVaststellingVaderschapVerzoekBericht = ( ( nl . moderniseringgba . isc . esb . message . brp . impl . GerechtelijkeVaststellingVaderschapVerzoekBericht ) ( factory . getBericht ( berichtOrigineel ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( gerechtelijkeVaststellingVaderschapVerzoekBericht . getBrpPersoonslijst ( ) )", "total": "testBrpPersoonslijstGetter ( ) { final java . lang . String berichtOrigineel = org . apache . commons . io . IOUtils . toString ( nl . moderniseringgba . isc . esb . message . brp . impl . NotificatieVerzoekBerichtTest . class . getResourceAsStream ( \"gerechtelijkeVaststellingVaderschapVerzoekBericht.xml\" ) ) ; final nl . moderniseringgba . isc . esb . message . brp . impl . GerechtelijkeVaststellingVaderschapVerzoekBericht gerechtelijkeVaststellingVaderschapVerzoekBericht = ( ( nl . moderniseringgba . isc . esb . message . brp . impl . GerechtelijkeVaststellingVaderschapVerzoekBericht ) ( factory . getBericht ( berichtOrigineel ) ) ) ; \"<AssertPlaceHolder>\" ; } getBrpPersoonslijst ( ) { return asBrpPersoonslijst ( leesUitBrpAntwoordType . getBrpPl ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( gerechtelijkeVaststellingVaderschapVerzoekBericht . getBrpPersoonslijst ( ) )"}
{"focal": "getPhoto ( ) { final ua . com . alexcoffee . model . photo . Photo photo ; if ( isNotNull ( this . photo ) ) { photo = this . photo ; } else { final ua . com . alexcoffee . model . model . Builder < ua . com . alexcoffee . model . photo . Photo > photoBuilder = ua . com . alexcoffee . model . photo . Photo . getBuilder ( ) ; photo = photoBuilder . build ( ) ; } return photo ; }", "testMethod": "setAndGetPhotoTest ( ) { System . out . print ( \"-><sp>setAndGetPhoto()<sp>-<sp>\" ) ; ua . com . alexcoffee . model . category . Category category = ua . com . alexcoffee . model . category . Category . getBuilder ( ) . build ( ) ; category . setPhoto ( ua . com . alexcoffee . model . photo . Photo . getBuilder ( ) . build ( ) ) ; \"<AssertPlaceHolder>\" ; System . out . println ( \"OK!\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( category . getPhoto ( ) )", "total": "setAndGetPhotoTest ( ) { System . out . print ( \"-><sp>setAndGetPhoto()<sp>-<sp>\" ) ; ua . com . alexcoffee . model . category . Category category = ua . com . alexcoffee . model . category . Category . getBuilder ( ) . build ( ) ; category . setPhoto ( ua . com . alexcoffee . model . photo . Photo . getBuilder ( ) . build ( ) ) ; \"<AssertPlaceHolder>\" ; System . out . println ( \"OK!\" ) ; } getPhoto ( ) { final ua . com . alexcoffee . model . photo . Photo photo ; if ( isNotNull ( this . photo ) ) { photo = this . photo ; } else { final ua . com . alexcoffee . model . model . Builder < ua . com . alexcoffee . model . photo . Photo > photoBuilder = ua . com . alexcoffee . model . photo . Photo . getBuilder ( ) ; photo = photoBuilder . build ( ) ; } return photo ; }", "answer": "org . junit . Assert . assertNotNull ( category . getPhoto ( ) )"}
{"focal": "getRoleByName ( java . lang . String ) { java . util . List roles = getSession ( ) . createCriteria ( org . appfuse . model . Role . class ) . add ( org . hibernate . criterion . Restrictions . eq ( \"name\" , rolename ) ) . list ( ) ; if ( roles . isEmpty ( ) ) { return null ; } else { return ( ( org . appfuse . model . Role ) ( roles . get ( 0 ) ) ) ; } }", "testMethod": "testGetRole ( ) { org . appfuse . model . Role role = dao . getRoleByName ( Constants . USER_ROLE ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( role )", "total": "testGetRole ( ) { org . appfuse . model . Role role = dao . getRoleByName ( Constants . USER_ROLE ) ; \"<AssertPlaceHolder>\" ; } getRoleByName ( java . lang . String ) { java . util . List roles = getSession ( ) . createCriteria ( org . appfuse . model . Role . class ) . add ( org . hibernate . criterion . Restrictions . eq ( \"name\" , rolename ) ) . list ( ) ; if ( roles . isEmpty ( ) ) { return null ; } else { return ( ( org . appfuse . model . Role ) ( roles . get ( 0 ) ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( role )"}
{"focal": "queryByAuditOptions ( java . util . List , java . lang . String , java . util . List , java . util . Date , java . util . Date ) { org . hibernate . Session session = null ; java . util . List < gov . hhs . fha . nhinc . auditrepository . hibernate . AuditRepositoryRecord > queryList = null ; try { session = getSession ( ) ; gov . hhs . fha . nhinc . auditrepository . hibernate . AuditRepositoryDAO . LOG . info ( \"Getting<sp>Record<sp>for<sp>Audit<sp>Query<sp>\" ) ; if ( session != null ) { final org . hibernate . Criteria queryCriteria = session . createCriteria ( gov . hhs . fha . nhinc . auditrepository . hibernate . AuditRepositoryRecord . class ) ; if ( gov . hhs . fha . nhinc . nhinclib . NullChecker . isNotNullish ( eventTypeList ) ) { queryCriteria . add ( org . hibernate . criterion . Restrictions . in ( \"eventType\" , eventTypeList ) ) ; } if ( gov . hhs . fha . nhinc . nhinclib . NullChecker . isNotNullish ( userId ) ) { queryCriteria . add ( org . hibernate . criterion . Restrictions . eq ( \"userId\" , userId ) ) ; } if ( gov . hhs . fha . nhinc . nhinclib . NullChecker . isNotNullish ( remoteHcidList ) ) { queryCriteria . add ( org . hibernate . criterion . Restrictions . in ( \"remoteHcid\" , remoteHcidList ) ) ; } if ( ( startDate != null ) && ( endDate != null ) ) { queryCriteria . add ( org . hibernate . criterion . Expression . between ( \"eventTimestamp\" , startDate , endDate ) ) ; } else if ( startDate != null ) { queryCriteria . add ( org . hibernate . criterion . Restrictions . ge ( \"eventTimestamp\" , startDate ) ) ; } else if ( endDate != null ) { queryCriteria . add ( org . hibernate . criterion . Restrictions . le ( \"eventTimestamp\" , endDate ) ) ; } queryList = queryCriteria . list ( ) ; } } catch ( final org . hibernate . HibernateException e ) { gov . hhs . fha . nhinc . auditrepository . hibernate . AuditRepositoryDAO . LOG . error ( \"Exception<sp>in<sp>AuditLog.get()<sp>occurred<sp>due<sp>to<sp>:<sp>{}\" , e . getLocalizedMessage ( ) , e ) ; } finally { closeSession ( session ) ; } return queryList ; }", "testMethod": "testQueryByEventTypeList ( ) { eventType = new java . util . ArrayList ( java . util . Arrays . asList ( \"DocSubmissionDeferredReq\" , \"DocSubmission\" , \"QueryForDocuments\" ) ) ; responseList = gov . hhs . fha . nhinc . auditrepository . hibernate . AuditRepositoryDAOTest . auditLogDao . queryByAuditOptions ( eventType , userId , remoteHcid , startDate , endDate ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( responseList )", "total": "testQueryByEventTypeList ( ) { eventType = new java . util . ArrayList ( java . util . Arrays . asList ( \"DocSubmissionDeferredReq\" , \"DocSubmission\" , \"QueryForDocuments\" ) ) ; responseList = gov . hhs . fha . nhinc . auditrepository . hibernate . AuditRepositoryDAOTest . auditLogDao . queryByAuditOptions ( eventType , userId , remoteHcid , startDate , endDate ) ; \"<AssertPlaceHolder>\" ; } queryByAuditOptions ( java . util . List , java . lang . String , java . util . List , java . util . Date , java . util . Date ) { org . hibernate . Session session = null ; java . util . List < gov . hhs . fha . nhinc . auditrepository . hibernate . AuditRepositoryRecord > queryList = null ; try { session = getSession ( ) ; gov . hhs . fha . nhinc . auditrepository . hibernate . AuditRepositoryDAO . LOG . info ( \"Getting<sp>Record<sp>for<sp>Audit<sp>Query<sp>\" ) ; if ( session != null ) { final org . hibernate . Criteria queryCriteria = session . createCriteria ( gov . hhs . fha . nhinc . auditrepository . hibernate . AuditRepositoryRecord . class ) ; if ( gov . hhs . fha . nhinc . nhinclib . NullChecker . isNotNullish ( eventTypeList ) ) { queryCriteria . add ( org . hibernate . criterion . Restrictions . in ( \"eventType\" , eventTypeList ) ) ; } if ( gov . hhs . fha . nhinc . nhinclib . NullChecker . isNotNullish ( userId ) ) { queryCriteria . add ( org . hibernate . criterion . Restrictions . eq ( \"userId\" , userId ) ) ; } if ( gov . hhs . fha . nhinc . nhinclib . NullChecker . isNotNullish ( remoteHcidList ) ) { queryCriteria . add ( org . hibernate . criterion . Restrictions . in ( \"remoteHcid\" , remoteHcidList ) ) ; } if ( ( startDate != null ) && ( endDate != null ) ) { queryCriteria . add ( org . hibernate . criterion . Expression . between ( \"eventTimestamp\" , startDate , endDate ) ) ; } else if ( startDate != null ) { queryCriteria . add ( org . hibernate . criterion . Restrictions . ge ( \"eventTimestamp\" , startDate ) ) ; } else if ( endDate != null ) { queryCriteria . add ( org . hibernate . criterion . Restrictions . le ( \"eventTimestamp\" , endDate ) ) ; } queryList = queryCriteria . list ( ) ; } } catch ( final org . hibernate . HibernateException e ) { gov . hhs . fha . nhinc . auditrepository . hibernate . AuditRepositoryDAO . LOG . error ( \"Exception<sp>in<sp>AuditLog.get()<sp>occurred<sp>due<sp>to<sp>:<sp>{}\" , e . getLocalizedMessage ( ) , e ) ; } finally { closeSession ( session ) ; } return queryList ; }", "answer": "org . junit . Assert . assertNotNull ( responseList )"}
{"focal": "get ( java . lang . String , java . lang . String ) { java . lang . String value = map . get ( name ) ; if ( value == null ) { return defaultValue ; } else { return value ; } }", "testMethod": "deleteAndQueryInA ( ) { final com . google . appengine . api . datastore . Entity entity = getService ( ) . get ( com . google . appengine . api . datastore . KeyFactory . createKey ( \"QT\" , 2 ) ) ; \"<AssertPlaceHolder>\" ; org . jboss . test . capedwarf . cluster . test . QueryTest . wrap ( new java . util . concurrent . Callable < java . lang . Void > ( ) { @ org . jboss . test . capedwarf . cluster . test . Override public org . jboss . test . capedwarf . cluster . test . Void call ( ) throws org . jboss . test . capedwarf . cluster . test . Exception { getService ( ) . delete ( entity . getKey ( ) ) ; return null ; } @ org . jboss . test . capedwarf . cluster . test . Override public java . lang . String toString ( ) { return \"deleteAndQueryInA\" ; } } ) ; com . google . appengine . api . datastore . Query query = new com . google . appengine . api . datastore . Query ( \"QT\" ) ; for ( com . google . appengine . api . datastore . Entity e : getService ( ) . prepare ( query ) . asIterable ( FetchOptions . Builder . withChunkSize ( 10 ) ) ) { org . junit . Assert . fail ( ( \"Should<sp>not<sp>be<sp>here:<sp>\" + e ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( entity )", "total": "deleteAndQueryInA ( ) { final com . google . appengine . api . datastore . Entity entity = getService ( ) . get ( com . google . appengine . api . datastore . KeyFactory . createKey ( \"QT\" , 2 ) ) ; \"<AssertPlaceHolder>\" ; org . jboss . test . capedwarf . cluster . test . QueryTest . wrap ( new java . util . concurrent . Callable < java . lang . Void > ( ) { @ org . jboss . test . capedwarf . cluster . test . Override public org . jboss . test . capedwarf . cluster . test . Void call ( ) throws org . jboss . test . capedwarf . cluster . test . Exception { getService ( ) . delete ( entity . getKey ( ) ) ; return null ; } @ org . jboss . test . capedwarf . cluster . test . Override public java . lang . String toString ( ) { return \"deleteAndQueryInA\" ; } } ) ; com . google . appengine . api . datastore . Query query = new com . google . appengine . api . datastore . Query ( \"QT\" ) ; for ( com . google . appengine . api . datastore . Entity e : getService ( ) . prepare ( query ) . asIterable ( FetchOptions . Builder . withChunkSize ( 10 ) ) ) { org . junit . Assert . fail ( ( \"Should<sp>not<sp>be<sp>here:<sp>\" + e ) ) ; } } get ( java . lang . String , java . lang . String ) { java . lang . String value = map . get ( name ) ; if ( value == null ) { return defaultValue ; } else { return value ; } }", "answer": "org . junit . Assert . assertNotNull ( entity )"}
{"focal": "smithWatermanGotoh ( ) { org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringMetrics . smithWatermanGotoh ( ) ) ; }", "testMethod": "smithWatermanGotoh ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringMetrics . smithWatermanGotoh ( ) )", "total": "smithWatermanGotoh ( ) { \"<AssertPlaceHolder>\" ; } smithWatermanGotoh ( ) { org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringMetrics . smithWatermanGotoh ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringMetrics . smithWatermanGotoh ( ) )"}
{"focal": "create ( com . vmware . xenon . services . common . QueryTask ) { return new com . vmware . xenon . common . QueryResultsProcessor ( task , task . results ) ; }", "testMethod": "documentLinks ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . vmware . xenon . common . QueryResultsProcessor . create ( new com . vmware . xenon . services . common . QueryTask ( ) ) . documentLinks ( ) )", "total": "documentLinks ( ) { \"<AssertPlaceHolder>\" ; } create ( com . vmware . xenon . services . common . QueryTask ) { return new com . vmware . xenon . common . QueryResultsProcessor ( task , task . results ) ; }", "answer": "org . junit . Assert . assertNotNull ( com . vmware . xenon . common . QueryResultsProcessor . create ( new com . vmware . xenon . services . common . QueryTask ( ) ) . documentLinks ( ) )"}
{"focal": "reconciliationFrameworkRegistration ( org . opendaylight . openflowplugin . api . openflow . mastership . ReconciliationFrameworkEvent ) { if ( ( rfService ) != null ) { throw new org . opendaylight . openflowplugin . api . openflow . mastership . MastershipChangeException ( \"Reconciliation<sp>framework<sp>already<sp>registered.\" ) ; } else { rfService = reconciliationFrameworkEvent ; return new org . opendaylight . openflowplugin . impl . mastership . ReconciliationFrameworkServiceDelegate ( reconciliationFrameworkEvent , ( ) -> rfService = null ) ; } }", "testMethod": "unregosteringRF ( ) { registrationRF . close ( ) ; org . opendaylight . openflowplugin . api . openflow . mastership . ReconciliationFrameworkRegistration registration1 ; registration1 = manager . reconciliationFrameworkRegistration ( secondEvent ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( registration1 )", "total": "unregosteringRF ( ) { registrationRF . close ( ) ; org . opendaylight . openflowplugin . api . openflow . mastership . ReconciliationFrameworkRegistration registration1 ; registration1 = manager . reconciliationFrameworkRegistration ( secondEvent ) ; \"<AssertPlaceHolder>\" ; } reconciliationFrameworkRegistration ( org . opendaylight . openflowplugin . api . openflow . mastership . ReconciliationFrameworkEvent ) { if ( ( rfService ) != null ) { throw new org . opendaylight . openflowplugin . api . openflow . mastership . MastershipChangeException ( \"Reconciliation<sp>framework<sp>already<sp>registered.\" ) ; } else { rfService = reconciliationFrameworkEvent ; return new org . opendaylight . openflowplugin . impl . mastership . ReconciliationFrameworkServiceDelegate ( reconciliationFrameworkEvent , ( ) -> rfService = null ) ; } }", "answer": "org . junit . Assert . assertNotNull ( registration1 )"}
{"focal": "getComponent ( com . googlecode . jtype . Generic ) { return null ; }", "testMethod": "testResolveFromGrandParentByType ( ) { com . picocontainer . MutablePicoContainer grandParent = new com . picocontainer . DefaultPicoContainer ( ) ; grandParent . addComponent ( com . picocontainer . testmodel . Touchable . class , com . picocontainer . testmodel . SimpleTouchable . class ) ; com . picocontainer . MutablePicoContainer parent = new com . picocontainer . DefaultPicoContainer ( grandParent ) ; com . picocontainer . MutablePicoContainer child = new com . picocontainer . DefaultPicoContainer ( parent ) ; child . addComponent ( com . picocontainer . testmodel . DependsOnTouchable . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( child . getComponent ( com . picocontainer . testmodel . DependsOnTouchable . class ) )", "total": "testResolveFromGrandParentByType ( ) { com . picocontainer . MutablePicoContainer grandParent = new com . picocontainer . DefaultPicoContainer ( ) ; grandParent . addComponent ( com . picocontainer . testmodel . Touchable . class , com . picocontainer . testmodel . SimpleTouchable . class ) ; com . picocontainer . MutablePicoContainer parent = new com . picocontainer . DefaultPicoContainer ( grandParent ) ; com . picocontainer . MutablePicoContainer child = new com . picocontainer . DefaultPicoContainer ( parent ) ; child . addComponent ( com . picocontainer . testmodel . DependsOnTouchable . class ) ; \"<AssertPlaceHolder>\" ; } getComponent ( com . googlecode . jtype . Generic ) { return null ; }", "answer": "org . junit . Assert . assertNotNull ( child . getComponent ( com . picocontainer . testmodel . DependsOnTouchable . class ) )"}
{"focal": "getDimensionalTransform ( javax . measure . Dimension ) { java . util . Map < ? extends javax . measure . Dimension , java . lang . Integer > dimensions = dimension . getBaseDimensions ( ) ; if ( dimensions == null ) return tec . units . ri . AbstractConverter . IDENTITY ; javax . measure . UnitConverter toFundamental = tec . units . ri . AbstractConverter . IDENTITY ; for ( Map . Entry < ? extends javax . measure . Dimension , java . lang . Integer > e : dimensions . entrySet ( ) ) { javax . measure . UnitConverter cvtr = this . getDimensionalTransform ( e . getKey ( ) ) ; if ( ! ( cvtr . isLinear ( ) ) ) throw new java . lang . UnsupportedOperationException ( \"Non-linear<sp>dimensional<sp>transform\" ) ; int pow = e . getValue ( ) ; if ( pow < 0 ) { pow = - pow ; cvtr = cvtr . inverse ( ) ; } for ( int j = 0 ; j < pow ; j ++ ) { toFundamental = toFundamental . concatenate ( cvtr ) ; } } return toFundamental ; }", "testMethod": "testGetDimensionalTransform ( ) { tec . units . ri . spi . DimensionalModel model = new tec . units . ri . spi . TestModel ( ) ; javax . measure . Dimension dim = tec . units . ri . quantity . QuantityDimension . parse ( 'a' ) ; javax . measure . UnitConverter converter = model . getDimensionalTransform ( dim ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( converter )", "total": "testGetDimensionalTransform ( ) { tec . units . ri . spi . DimensionalModel model = new tec . units . ri . spi . TestModel ( ) ; javax . measure . Dimension dim = tec . units . ri . quantity . QuantityDimension . parse ( 'a' ) ; javax . measure . UnitConverter converter = model . getDimensionalTransform ( dim ) ; \"<AssertPlaceHolder>\" ; } getDimensionalTransform ( javax . measure . Dimension ) { java . util . Map < ? extends javax . measure . Dimension , java . lang . Integer > dimensions = dimension . getBaseDimensions ( ) ; if ( dimensions == null ) return tec . units . ri . AbstractConverter . IDENTITY ; javax . measure . UnitConverter toFundamental = tec . units . ri . AbstractConverter . IDENTITY ; for ( Map . Entry < ? extends javax . measure . Dimension , java . lang . Integer > e : dimensions . entrySet ( ) ) { javax . measure . UnitConverter cvtr = this . getDimensionalTransform ( e . getKey ( ) ) ; if ( ! ( cvtr . isLinear ( ) ) ) throw new java . lang . UnsupportedOperationException ( \"Non-linear<sp>dimensional<sp>transform\" ) ; int pow = e . getValue ( ) ; if ( pow < 0 ) { pow = - pow ; cvtr = cvtr . inverse ( ) ; } for ( int j = 0 ; j < pow ; j ++ ) { toFundamental = toFundamental . concatenate ( cvtr ) ; } } return toFundamental ; }", "answer": "org . junit . Assert . assertNotNull ( converter )"}
{"focal": "build ( ) { return new org . restcomm . connect . sms . smpp . SmppInterpreterParams ( configuration , smsService , storage , accountId , version , url , method , fallbackUrl , fallbackMethod ) ; }", "testMethod": "buildUssdStreamEventTest ( ) { org . restcomm . connect . telephony . api . events . UssdStreamEvent expected = org . restcomm . connect . telephony . api . events . UssdStreamEvent . builder ( ) . setTo ( java . util . UUID . randomUUID ( ) . toString ( ) ) . setFrom ( java . util . UUID . randomUUID ( ) . toString ( ) ) . setStatus ( UssdStreamEvent . Status . completed ) . setDirection ( UssdStreamEvent . Direction . inbound ) . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( expected )", "total": "buildUssdStreamEventTest ( ) { org . restcomm . connect . telephony . api . events . UssdStreamEvent expected = org . restcomm . connect . telephony . api . events . UssdStreamEvent . builder ( ) . setTo ( java . util . UUID . randomUUID ( ) . toString ( ) ) . setFrom ( java . util . UUID . randomUUID ( ) . toString ( ) ) . setStatus ( UssdStreamEvent . Status . completed ) . setDirection ( UssdStreamEvent . Direction . inbound ) . build ( ) ; \"<AssertPlaceHolder>\" ; } build ( ) { return new org . restcomm . connect . sms . smpp . SmppInterpreterParams ( configuration , smsService , storage , accountId , version , url , method , fallbackUrl , fallbackMethod ) ; }", "answer": "org . junit . Assert . assertNotNull ( expected )"}
{"focal": "getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "testMethod": "shouldThrowExceptionWithInvalidGraphId ( ) { try { graphLibrary . add ( ( ( uk . gov . gchq . gaffer . store . library . AbstractGraphLibraryTest . TEST_GRAPH_ID ) + \"@#\" ) , schema , storeProperties ) ; org . junit . Assert . fail ( uk . gov . gchq . gaffer . store . library . AbstractGraphLibraryTest . EXCEPTION_EXPECTED ) ; } catch ( final java . lang . IllegalArgumentException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "shouldThrowExceptionWithInvalidGraphId ( ) { try { graphLibrary . add ( ( ( uk . gov . gchq . gaffer . store . library . AbstractGraphLibraryTest . TEST_GRAPH_ID ) + \"@#\" ) , schema , storeProperties ) ; org . junit . Assert . fail ( uk . gov . gchq . gaffer . store . library . AbstractGraphLibraryTest . EXCEPTION_EXPECTED ) ; } catch ( final java . lang . IllegalArgumentException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "getClassLoader ( ) { return getClass ( ) . getClassLoader ( ) ; }", "testMethod": "testResolveMandatoryClassClassLoaderType ( ) { org . apache . camel . impl . DefaultClassResolver resolver = new org . apache . camel . impl . DefaultClassResolver ( ) ; java . lang . Class < java . lang . Integer > clazz = resolver . resolveMandatoryClass ( \"java.lang.Integer\" , org . apache . camel . impl . Integer . class , org . apache . camel . impl . DefaultClassResolverTest . class . getClassLoader ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( clazz )", "total": "testResolveMandatoryClassClassLoaderType ( ) { org . apache . camel . impl . DefaultClassResolver resolver = new org . apache . camel . impl . DefaultClassResolver ( ) ; java . lang . Class < java . lang . Integer > clazz = resolver . resolveMandatoryClass ( \"java.lang.Integer\" , org . apache . camel . impl . Integer . class , org . apache . camel . impl . DefaultClassResolverTest . class . getClassLoader ( ) ) ; \"<AssertPlaceHolder>\" ; } getClassLoader ( ) { return getClass ( ) . getClassLoader ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( clazz )"}
{"focal": "find ( java . lang . Long ) { return entityManager . find ( org . syncope . core . persistence . beans . Report . class , id ) ; }", "testMethod": "saveWithExistingName ( ) { org . syncope . core . persistence . beans . Report report = reportDAO . find ( 1L ) ; \"<AssertPlaceHolder>\" ; java . lang . String name = report . getName ( ) ; report = new org . syncope . core . persistence . beans . Report ( ) ; report . setName ( name ) ; reportDAO . save ( report ) ; reportDAO . flush ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( report )", "total": "saveWithExistingName ( ) { org . syncope . core . persistence . beans . Report report = reportDAO . find ( 1L ) ; \"<AssertPlaceHolder>\" ; java . lang . String name = report . getName ( ) ; report = new org . syncope . core . persistence . beans . Report ( ) ; report . setName ( name ) ; reportDAO . save ( report ) ; reportDAO . flush ( ) ; } find ( java . lang . Long ) { return entityManager . find ( org . syncope . core . persistence . beans . Report . class , id ) ; }", "answer": "org . junit . Assert . assertNotNull ( report )"}
{"focal": "exists ( ) { return false ; }", "testMethod": "existsMatch ( ) { org . springframework . ws . test . support . matcher . XPathExpectationsHelper helper = new org . springframework . ws . test . support . matcher . XPathExpectationsHelper ( \"//b\" ) ; org . springframework . ws . test . support . matcher . WebServiceMessageMatcher matcher = helper . exists ( ) ; \"<AssertPlaceHolder>\" ; org . springframework . ws . WebServiceMessage message = createMock ( org . springframework . ws . WebServiceMessage . class ) ; expect ( message . getPayloadSource ( ) ) . andReturn ( new org . springframework . xml . transform . StringSource ( \"<a><b/></a>\" ) ) ; replay ( message ) ; matcher . match ( message ) ; verify ( message ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( matcher )", "total": "existsMatch ( ) { org . springframework . ws . test . support . matcher . XPathExpectationsHelper helper = new org . springframework . ws . test . support . matcher . XPathExpectationsHelper ( \"//b\" ) ; org . springframework . ws . test . support . matcher . WebServiceMessageMatcher matcher = helper . exists ( ) ; \"<AssertPlaceHolder>\" ; org . springframework . ws . WebServiceMessage message = createMock ( org . springframework . ws . WebServiceMessage . class ) ; expect ( message . getPayloadSource ( ) ) . andReturn ( new org . springframework . xml . transform . StringSource ( \"<a><b/></a>\" ) ) ; replay ( message ) ; matcher . match ( message ) ; verify ( message ) ; } exists ( ) { return false ; }", "answer": "org . junit . Assert . assertNotNull ( matcher )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . ConsultationResponse entity = new org . oscarehr . common . model . ConsultationResponse ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; consultDao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . ConsultationResponse entity = new org . oscarehr . common . model . ConsultationResponse ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; consultDao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "lookup ( java . lang . String ) { return new org . wildfly . swarm . microprofile . faulttolerance . deployment . MicroProfileFaultToleranceExtension . ResourceLiteral ( null , lookup , null , null , null , null , null ) ; }", "testMethod": "testNaming ( ) { javax . naming . Context jbossContext = ( ( javax . naming . Context ) ( initialContext . lookup ( \"java:jboss\" ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( jbossContext )", "total": "testNaming ( ) { javax . naming . Context jbossContext = ( ( javax . naming . Context ) ( initialContext . lookup ( \"java:jboss\" ) ) ) ; \"<AssertPlaceHolder>\" ; } lookup ( java . lang . String ) { return new org . wildfly . swarm . microprofile . faulttolerance . deployment . MicroProfileFaultToleranceExtension . ResourceLiteral ( null , lookup , null , null , null , null , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( jbossContext )"}
{"focal": "lookup ( java . lang . String ) { return comparator ; }", "testMethod": "testMoveExistingReferralJNDIIgnore ( ) { WWCtx . addToEnvironment ( DirContext . REFERRAL , \"ignore\" ) ; WWCtx . rename ( \"ou=Roles,o=MNN\" , \"ou=Roles,o=PNN\" ) ; java . lang . Object moved = PNNCtx . lookup ( \"ou=Roles\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( moved )", "total": "testMoveExistingReferralJNDIIgnore ( ) { WWCtx . addToEnvironment ( DirContext . REFERRAL , \"ignore\" ) ; WWCtx . rename ( \"ou=Roles,o=MNN\" , \"ou=Roles,o=PNN\" ) ; java . lang . Object moved = PNNCtx . lookup ( \"ou=Roles\" ) ; \"<AssertPlaceHolder>\" ; } lookup ( java . lang . String ) { return comparator ; }", "answer": "org . junit . Assert . assertNotNull ( moved )"}
{"focal": "initialise ( ) { acceptanceTestsRunnerTaskScheduler . scheduleAcceptanceTestsRunnerTask ( acceptanceTestsState ) ; jerseyEnvironment . register ( new me . atam . atam4j . resources . TestStatusResource ( testRunListener ) ) ; }", "testMethod": "givenHealthCheckManagerUsingAnnotationScanning_whenInitialized_thenTestsAreHealthy ( ) { io . dropwizard . jersey . setup . JerseyEnvironment jerseyEnvironment = mock ( io . dropwizard . jersey . setup . JerseyEnvironment . class ) ; org . mockito . ArgumentCaptor < me . atam . atam4j . resources . TestStatusResource > argumentCaptor = org . mockito . ArgumentCaptor . forClass ( me . atam . atam4j . resources . TestStatusResource . class ) ; new me . atam . atam4j . Atam4j . Atam4jBuilder ( jerseyEnvironment ) . withInitialDelay ( 0 ) . build ( ) . initialise ( ) ; verify ( jerseyEnvironment ) . register ( argumentCaptor . capture ( ) ) ; me . atam . atam4j . resources . TestStatusResource value = argumentCaptor . getValue ( ) ; \"<AssertPlaceHolder>\" ; checkThatWeEventuallyGetSuccess ( value ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( value )", "total": "givenHealthCheckManagerUsingAnnotationScanning_whenInitialized_thenTestsAreHealthy ( ) { io . dropwizard . jersey . setup . JerseyEnvironment jerseyEnvironment = mock ( io . dropwizard . jersey . setup . JerseyEnvironment . class ) ; org . mockito . ArgumentCaptor < me . atam . atam4j . resources . TestStatusResource > argumentCaptor = org . mockito . ArgumentCaptor . forClass ( me . atam . atam4j . resources . TestStatusResource . class ) ; new me . atam . atam4j . Atam4j . Atam4jBuilder ( jerseyEnvironment ) . withInitialDelay ( 0 ) . build ( ) . initialise ( ) ; verify ( jerseyEnvironment ) . register ( argumentCaptor . capture ( ) ) ; me . atam . atam4j . resources . TestStatusResource value = argumentCaptor . getValue ( ) ; \"<AssertPlaceHolder>\" ; checkThatWeEventuallyGetSuccess ( value ) ; } initialise ( ) { acceptanceTestsRunnerTaskScheduler . scheduleAcceptanceTestsRunnerTask ( acceptanceTestsState ) ; jerseyEnvironment . register ( new me . atam . atam4j . resources . TestStatusResource ( testRunListener ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( value )"}
{"focal": "getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "testMethod": "shouldCloseStreamsIfExceptionThrownWithElementSchema ( ) { final java . io . InputStream storePropertiesStream = uk . gov . gchq . gaffer . commonutil . StreamUtil . storeProps ( getClass ( ) ) ; final java . io . InputStream elementSchemaStream = createMockStream ( ) ; final java . io . InputStream typesSchemaStream = createMockStream ( ) ; final java . io . InputStream serialisationSchemaStream = createMockStream ( ) ; final java . io . InputStream aggregationSchemaStream = createMockStream ( ) ; try { new uk . gov . gchq . gaffer . graph . Graph . Builder ( ) . config ( new uk . gov . gchq . gaffer . graph . GraphConfig . Builder ( ) . graphId ( \"graph1\" ) . build ( ) ) . storeProperties ( storePropertiesStream ) . addSchema ( elementSchemaStream ) . addSchema ( typesSchemaStream ) . addSchema ( serialisationSchemaStream ) . addSchema ( aggregationSchemaStream ) . build ( ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; verify ( elementSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( typesSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( serialisationSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( aggregationSchemaStream , atLeastOnce ( ) ) . close ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "shouldCloseStreamsIfExceptionThrownWithElementSchema ( ) { final java . io . InputStream storePropertiesStream = uk . gov . gchq . gaffer . commonutil . StreamUtil . storeProps ( getClass ( ) ) ; final java . io . InputStream elementSchemaStream = createMockStream ( ) ; final java . io . InputStream typesSchemaStream = createMockStream ( ) ; final java . io . InputStream serialisationSchemaStream = createMockStream ( ) ; final java . io . InputStream aggregationSchemaStream = createMockStream ( ) ; try { new uk . gov . gchq . gaffer . graph . Graph . Builder ( ) . config ( new uk . gov . gchq . gaffer . graph . GraphConfig . Builder ( ) . graphId ( \"graph1\" ) . build ( ) ) . storeProperties ( storePropertiesStream ) . addSchema ( elementSchemaStream ) . addSchema ( typesSchemaStream ) . addSchema ( serialisationSchemaStream ) . addSchema ( aggregationSchemaStream ) . build ( ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; verify ( elementSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( typesSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( serialisationSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( aggregationSchemaStream , atLeastOnce ( ) ) . close ( ) ; } } getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "mergeIntoNeo4j ( org . neo4j . geoff . Subgraph , org . neo4j . graphdb . GraphDatabaseService , java . util . Map ) { org . neo4j . geoff . Neo4jGraphProxy graph = new org . neo4j . geoff . Neo4jGraphProxy ( graphDB ) ; if ( params != null ) { graph . inputParams ( new java . util . HashMap < java . lang . String , org . neo4j . graphdb . PropertyContainer > ( params ) ) ; } graph . merge ( subgraph ) ; return graph . outputParams ( ) ; }", "testMethod": "failsOnIllegalListProperty ( ) { org . neo4j . geoff . Subgraph geoff = new org . neo4j . geoff . Subgraph ( ) ; geoff . add ( \"(fib)<sp>{\\\"sequence\\\":<sp>[1,1.0,\\\"two\\\",3,5,8,13,21,35]}\" ) ; java . util . Map < java . lang . String , org . neo4j . geoff . test . PropertyContainer > out = org . neo4j . geoff . Geoff . mergeIntoNeo4j ( geoff , db , null ) ; org . neo4j . geoff . test . Transaction tx = db . beginTx ( ) ; try { \"<AssertPlaceHolder>\" ; } finally { tx . close ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( out )", "total": "failsOnIllegalListProperty ( ) { org . neo4j . geoff . Subgraph geoff = new org . neo4j . geoff . Subgraph ( ) ; geoff . add ( \"(fib)<sp>{\\\"sequence\\\":<sp>[1,1.0,\\\"two\\\",3,5,8,13,21,35]}\" ) ; java . util . Map < java . lang . String , org . neo4j . geoff . test . PropertyContainer > out = org . neo4j . geoff . Geoff . mergeIntoNeo4j ( geoff , db , null ) ; org . neo4j . geoff . test . Transaction tx = db . beginTx ( ) ; try { \"<AssertPlaceHolder>\" ; } finally { tx . close ( ) ; } } mergeIntoNeo4j ( org . neo4j . geoff . Subgraph , org . neo4j . graphdb . GraphDatabaseService , java . util . Map ) { org . neo4j . geoff . Neo4jGraphProxy graph = new org . neo4j . geoff . Neo4jGraphProxy ( graphDB ) ; if ( params != null ) { graph . inputParams ( new java . util . HashMap < java . lang . String , org . neo4j . graphdb . PropertyContainer > ( params ) ) ; } graph . merge ( subgraph ) ; return graph . outputParams ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( out )"}
{"focal": "toString ( ) { return ( ( ( \"UserPermission[name=\" + ( name ) ) + \",<sp>mask=\" ) + ( mask ) ) + \"]\" ; }", "testMethod": "testNoEncoding ( ) { file = new org . pentaho . platform . api . repository2 . unified . data . simple . SimpleRepositoryFileData ( inputStreamSpy , \"\" , org . pentaho . platform . api . repository2 . unified . data . SimpleRepositoryFileDataTest . MIME_TYPE ) ; \"<AssertPlaceHolder>\" ; verify ( inputStreamSpy ) . markSupported ( ) ; verify ( inputStreamSpy ) . mark ( Integer . MAX_VALUE ) ; try { verify ( inputStreamSpy , atLeastOnce ( ) ) . read ( any ( byte [ ] . class ) ) ; verify ( inputStreamSpy ) . reset ( ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( \"No<sp>exception<sp>should<sp>be<sp>thrown.\" ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( file . toString ( ) )", "total": "testNoEncoding ( ) { file = new org . pentaho . platform . api . repository2 . unified . data . simple . SimpleRepositoryFileData ( inputStreamSpy , \"\" , org . pentaho . platform . api . repository2 . unified . data . SimpleRepositoryFileDataTest . MIME_TYPE ) ; \"<AssertPlaceHolder>\" ; verify ( inputStreamSpy ) . markSupported ( ) ; verify ( inputStreamSpy ) . mark ( Integer . MAX_VALUE ) ; try { verify ( inputStreamSpy , atLeastOnce ( ) ) . read ( any ( byte [ ] . class ) ) ; verify ( inputStreamSpy ) . reset ( ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( \"No<sp>exception<sp>should<sp>be<sp>thrown.\" ) ; } } toString ( ) { return ( ( ( \"UserPermission[name=\" + ( name ) ) + \",<sp>mask=\" ) + ( mask ) ) + \"]\" ; }", "answer": "org . junit . Assert . assertNotNull ( file . toString ( ) )"}
{"focal": "getThreadUrl ( java . lang . String ) { try { org . sagebionetworks . util . ValidateArgument . required ( messageKey , \"messageKey\" ) ; java . lang . String url = ( ( ( org . sagebionetworks . client . SynapseClientImpl . THREAD ) + ( org . sagebionetworks . client . SynapseClientImpl . URL ) ) + \"?messageKey=\" ) + messageKey ; return new java . net . URL ( getJSONEntity ( getRepoEndpoint ( ) , url , org . sagebionetworks . repo . model . discussion . MessageURL . class ) . getMessageUrl ( ) ) ; } catch ( java . net . MalformedURLException e ) { throw new org . sagebionetworks . client . exceptions . SynapseClientException ( e ) ; } }", "testMethod": "testGetThreadUrl ( ) { when ( mockS3Client . generatePresignedUrl ( org . mockito . Mockito . any ( com . amazonaws . services . s3 . model . GeneratePresignedUrlRequest . class ) ) ) . thenReturn ( url ) ; java . lang . String url = dao . getThreadUrl ( \"1/2/key\" ) . getMessageUrl ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( url )", "total": "testGetThreadUrl ( ) { when ( mockS3Client . generatePresignedUrl ( org . mockito . Mockito . any ( com . amazonaws . services . s3 . model . GeneratePresignedUrlRequest . class ) ) ) . thenReturn ( url ) ; java . lang . String url = dao . getThreadUrl ( \"1/2/key\" ) . getMessageUrl ( ) ; \"<AssertPlaceHolder>\" ; } getThreadUrl ( java . lang . String ) { try { org . sagebionetworks . util . ValidateArgument . required ( messageKey , \"messageKey\" ) ; java . lang . String url = ( ( ( org . sagebionetworks . client . SynapseClientImpl . THREAD ) + ( org . sagebionetworks . client . SynapseClientImpl . URL ) ) + \"?messageKey=\" ) + messageKey ; return new java . net . URL ( getJSONEntity ( getRepoEndpoint ( ) , url , org . sagebionetworks . repo . model . discussion . MessageURL . class ) . getMessageUrl ( ) ) ; } catch ( java . net . MalformedURLException e ) { throw new org . sagebionetworks . client . exceptions . SynapseClientException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( url )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testSaveImmunoSuppressionTreatment ( ) { org . patientview . radar . model . ImmunosuppressionTreatment immunosuppressionTreatment = new org . patientview . radar . model . ImmunosuppressionTreatment ( ) ; immunosuppressionTreatment . setFirstFlag ( false ) ; immunosuppressionDao . saveImmunosuppressionTreatment ( immunosuppressionTreatment ) ; \"<AssertPlaceHolder>\" ; org . patientview . radar . model . ImmunosuppressionTreatment immunosuppressionTreatment_update = new org . patientview . radar . model . ImmunosuppressionTreatment ( ) ; immunosuppressionTreatment_update . setId ( new java . lang . Long ( 1 ) ) ; immunosuppressionDao . saveImmunosuppressionTreatment ( immunosuppressionTreatment_update ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( immunosuppressionTreatment . getId ( ) )", "total": "testSaveImmunoSuppressionTreatment ( ) { org . patientview . radar . model . ImmunosuppressionTreatment immunosuppressionTreatment = new org . patientview . radar . model . ImmunosuppressionTreatment ( ) ; immunosuppressionTreatment . setFirstFlag ( false ) ; immunosuppressionDao . saveImmunosuppressionTreatment ( immunosuppressionTreatment ) ; \"<AssertPlaceHolder>\" ; org . patientview . radar . model . ImmunosuppressionTreatment immunosuppressionTreatment_update = new org . patientview . radar . model . ImmunosuppressionTreatment ( ) ; immunosuppressionTreatment_update . setId ( new java . lang . Long ( 1 ) ) ; immunosuppressionDao . saveImmunosuppressionTreatment ( immunosuppressionTreatment_update ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( immunosuppressionTreatment . getId ( ) )"}
{"focal": "getTitle ( ) { return title ; }", "testMethod": "testGetTitle ( ) { java . lang . String descResult = featureType . getTitle ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( descResult )", "total": "testGetTitle ( ) { java . lang . String descResult = featureType . getTitle ( ) ; \"<AssertPlaceHolder>\" ; } getTitle ( ) { return title ; }", "answer": "org . junit . Assert . assertNotNull ( descResult )"}
{"focal": "getLogger ( java . lang . Class ) { final java . lang . Class < ? > cls = org . apache . logging . log4j . LogManager . callerClass ( clazz ) ; return org . apache . logging . log4j . LogManager . getContext ( cls . getClassLoader ( ) , false ) . getLogger ( org . apache . logging . log4j . LogManager . toLoggerName ( cls ) ) ; }", "testMethod": "getLoggerByClass ( ) { final org . apache . logging . log4j . Logger classLogger = org . apache . logging . log4j . LogManager . getLogger ( org . apache . logging . log4j . LoggerTest . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( classLogger )", "total": "getLoggerByClass ( ) { final org . apache . logging . log4j . Logger classLogger = org . apache . logging . log4j . LogManager . getLogger ( org . apache . logging . log4j . LoggerTest . class ) ; \"<AssertPlaceHolder>\" ; } getLogger ( java . lang . Class ) { final java . lang . Class < ? > cls = org . apache . logging . log4j . LogManager . callerClass ( clazz ) ; return org . apache . logging . log4j . LogManager . getContext ( cls . getClassLoader ( ) , false ) . getLogger ( org . apache . logging . log4j . LogManager . toLoggerName ( cls ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( classLogger )"}
{"focal": "checkLocks ( com . thinkaurelius . titan . diskstorage . keycolumnvalue . StoreTransaction ) { }", "testMethod": "testCheckLocksDiesOnPermanentStorageException ( ) { com . thinkaurelius . titan . diskstorage . locking . ConsistentKeyLockStatus lockStatus = makeStatusNow ( ) ; currentTimeNS = currentTimeNS . plusNanos ( 1 ) ; expect ( lockState . getLocksForTx ( defaultTx ) ) . andReturn ( com . google . common . collect . ImmutableMap . of ( defaultLockID , lockStatus ) ) ; expectSleepAfterWritingLock ( lockStatus ) ; recordExceptionalLockGetSlice ( new com . thinkaurelius . titan . diskstorage . locking . PermanentBackendException ( \"Connection<sp>to<sp>storage<sp>cluster<sp>failed:<sp>peer<sp>is<sp>an<sp>IPv6<sp>toaster\" ) ) ; ctrl . replay ( ) ; com . thinkaurelius . titan . diskstorage . locking . PermanentBackendException pse = null ; try { locker . checkLocks ( defaultTx ) ; } catch ( com . thinkaurelius . titan . diskstorage . locking . PermanentBackendException e ) { pse = e ; } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pse )", "total": "testCheckLocksDiesOnPermanentStorageException ( ) { com . thinkaurelius . titan . diskstorage . locking . ConsistentKeyLockStatus lockStatus = makeStatusNow ( ) ; currentTimeNS = currentTimeNS . plusNanos ( 1 ) ; expect ( lockState . getLocksForTx ( defaultTx ) ) . andReturn ( com . google . common . collect . ImmutableMap . of ( defaultLockID , lockStatus ) ) ; expectSleepAfterWritingLock ( lockStatus ) ; recordExceptionalLockGetSlice ( new com . thinkaurelius . titan . diskstorage . locking . PermanentBackendException ( \"Connection<sp>to<sp>storage<sp>cluster<sp>failed:<sp>peer<sp>is<sp>an<sp>IPv6<sp>toaster\" ) ) ; ctrl . replay ( ) ; com . thinkaurelius . titan . diskstorage . locking . PermanentBackendException pse = null ; try { locker . checkLocks ( defaultTx ) ; } catch ( com . thinkaurelius . titan . diskstorage . locking . PermanentBackendException e ) { pse = e ; } \"<AssertPlaceHolder>\" ; } checkLocks ( com . thinkaurelius . titan . diskstorage . keycolumnvalue . StoreTransaction ) { }", "answer": "org . junit . Assert . assertNotNull ( pse )"}
{"focal": "getControlledRoutes ( ) { org . apache . camel . spi . RouteController controller = camelContext . getRouteController ( ) ; if ( controller != null ) { return controller . getControlledRoutes ( ) . stream ( ) . map ( Route :: getId ) . collect ( java . util . stream . Collectors . toList ( ) ) ; } return java . util . Collections . emptyList ( ) ; }", "testMethod": "testRouteControllerEndpoint ( ) { java . util . List < java . lang . String > routesId = endpoint . getControlledRoutes ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( routesId )", "total": "testRouteControllerEndpoint ( ) { java . util . List < java . lang . String > routesId = endpoint . getControlledRoutes ( ) ; \"<AssertPlaceHolder>\" ; } getControlledRoutes ( ) { org . apache . camel . spi . RouteController controller = camelContext . getRouteController ( ) ; if ( controller != null ) { return controller . getControlledRoutes ( ) . stream ( ) . map ( Route :: getId ) . collect ( java . util . stream . Collectors . toList ( ) ) ; } return java . util . Collections . emptyList ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( routesId )"}
{"focal": "getEnumeration ( ) { checkClosed ( ) ; createConsumer ( ) ; return this ; }", "testMethod": "testQueueBrowserNextElementWithNoMessage ( ) { try ( org . apache . qpid . jms . test . testpeer . TestAmqpPeer testPeer = new org . apache . qpid . jms . test . testpeer . TestAmqpPeer ( ) ) { javax . jms . Connection connection = testFixture . establishConnecton ( testPeer ) ; connection . start ( ) ; testPeer . expectBegin ( ) ; javax . jms . Session session = connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; javax . jms . Queue queue = session . createQueue ( \"myQueue\" ) ; testPeer . expectQueueBrowserAttach ( ) ; testPeer . expectLinkFlow ( false , false , org . hamcrest . Matchers . equalTo ( org . apache . qpid . proton . amqp . UnsignedInteger . valueOf ( JmsDefaultPrefetchPolicy . DEFAULT_QUEUE_BROWSER_PREFETCH ) ) ) ; testPeer . expectLinkFlow ( true , true , org . hamcrest . Matchers . equalTo ( org . apache . qpid . proton . amqp . UnsignedInteger . valueOf ( JmsDefaultPrefetchPolicy . DEFAULT_QUEUE_BROWSER_PREFETCH ) ) ) ; testPeer . expectLinkFlow ( false , false , org . hamcrest . Matchers . equalTo ( org . apache . qpid . proton . amqp . UnsignedInteger . valueOf ( JmsDefaultPrefetchPolicy . DEFAULT_QUEUE_BROWSER_PREFETCH ) ) ) ; testPeer . expectDetach ( true , true , true ) ; javax . jms . QueueBrowser browser = session . createBrowser ( queue ) ; java . util . Enumeration < ? > queueView = browser . getEnumeration ( ) ; \"<AssertPlaceHolder>\" ; try { queueView . nextElement ( ) ; org . junit . Assert . fail ( \"Should<sp>have<sp>thrown<sp>an<sp>exception<sp>due<sp>to<sp>there<sp>being<sp>no<sp>more<sp>elements\" ) ; } catch ( java . util . NoSuchElementException nsee ) { } browser . close ( ) ; testPeer . expectClose ( ) ; connection . close ( ) ; testPeer . waitForAllHandlersToComplete ( 3000 ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( queueView )", "total": "testQueueBrowserNextElementWithNoMessage ( ) { try ( org . apache . qpid . jms . test . testpeer . TestAmqpPeer testPeer = new org . apache . qpid . jms . test . testpeer . TestAmqpPeer ( ) ) { javax . jms . Connection connection = testFixture . establishConnecton ( testPeer ) ; connection . start ( ) ; testPeer . expectBegin ( ) ; javax . jms . Session session = connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; javax . jms . Queue queue = session . createQueue ( \"myQueue\" ) ; testPeer . expectQueueBrowserAttach ( ) ; testPeer . expectLinkFlow ( false , false , org . hamcrest . Matchers . equalTo ( org . apache . qpid . proton . amqp . UnsignedInteger . valueOf ( JmsDefaultPrefetchPolicy . DEFAULT_QUEUE_BROWSER_PREFETCH ) ) ) ; testPeer . expectLinkFlow ( true , true , org . hamcrest . Matchers . equalTo ( org . apache . qpid . proton . amqp . UnsignedInteger . valueOf ( JmsDefaultPrefetchPolicy . DEFAULT_QUEUE_BROWSER_PREFETCH ) ) ) ; testPeer . expectLinkFlow ( false , false , org . hamcrest . Matchers . equalTo ( org . apache . qpid . proton . amqp . UnsignedInteger . valueOf ( JmsDefaultPrefetchPolicy . DEFAULT_QUEUE_BROWSER_PREFETCH ) ) ) ; testPeer . expectDetach ( true , true , true ) ; javax . jms . QueueBrowser browser = session . createBrowser ( queue ) ; java . util . Enumeration < ? > queueView = browser . getEnumeration ( ) ; \"<AssertPlaceHolder>\" ; try { queueView . nextElement ( ) ; org . junit . Assert . fail ( \"Should<sp>have<sp>thrown<sp>an<sp>exception<sp>due<sp>to<sp>there<sp>being<sp>no<sp>more<sp>elements\" ) ; } catch ( java . util . NoSuchElementException nsee ) { } browser . close ( ) ; testPeer . expectClose ( ) ; connection . close ( ) ; testPeer . waitForAllHandlersToComplete ( 3000 ) ; } } getEnumeration ( ) { checkClosed ( ) ; createConsumer ( ) ; return this ; }", "answer": "org . junit . Assert . assertNotNull ( queueView )"}
{"focal": "getAllProjectsByLanguage ( java . lang . String ) { br . ufpe . cin . groundhog . search . SearchGitHub . logger . info ( \"Searching<sp>all<sp>project<sp>by<sp>language<sp>metadata\" ) ; java . lang . String searchUrl = builder . uses ( GithubAPI . LEGACY_V2 ) . withSimpleParam ( \"language=\" , lang ) . build ( ) ; java . lang . String json = requests . get ( searchUrl ) ; com . google . gson . JsonObject jsonObject = new com . google . gson . JsonParser ( ) . parse ( json ) . getAsJsonObject ( ) ; com . google . gson . JsonArray jsonArray = jsonObject . get ( \"repositories\" ) . getAsJsonArray ( ) ; java . util . List < br . ufpe . cin . groundhog . Project > projects = new java . util . ArrayList ( ) ; for ( com . google . gson . JsonElement element : jsonArray ) { br . ufpe . cin . groundhog . Project p = gson . fromJson ( element , br . ufpe . cin . groundhog . Project . class ) ; java . lang . String owner = element . getAsJsonObject ( ) . get ( \"owner\" ) . getAsString ( ) ; p . setUser ( new br . ufpe . cin . groundhog . User ( owner ) ) ; projects . add ( p ) ; } return projects ; }", "testMethod": "testGetProjectsByLanguage ( ) { try { java . util . List < br . ufpe . cin . groundhog . Project > projects = searchGitHub . getAllProjectsByLanguage ( \"java\" ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( projects )", "total": "testGetProjectsByLanguage ( ) { try { java . util . List < br . ufpe . cin . groundhog . Project > projects = searchGitHub . getAllProjectsByLanguage ( \"java\" ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( ) ; } } getAllProjectsByLanguage ( java . lang . String ) { br . ufpe . cin . groundhog . search . SearchGitHub . logger . info ( \"Searching<sp>all<sp>project<sp>by<sp>language<sp>metadata\" ) ; java . lang . String searchUrl = builder . uses ( GithubAPI . LEGACY_V2 ) . withSimpleParam ( \"language=\" , lang ) . build ( ) ; java . lang . String json = requests . get ( searchUrl ) ; com . google . gson . JsonObject jsonObject = new com . google . gson . JsonParser ( ) . parse ( json ) . getAsJsonObject ( ) ; com . google . gson . JsonArray jsonArray = jsonObject . get ( \"repositories\" ) . getAsJsonArray ( ) ; java . util . List < br . ufpe . cin . groundhog . Project > projects = new java . util . ArrayList ( ) ; for ( com . google . gson . JsonElement element : jsonArray ) { br . ufpe . cin . groundhog . Project p = gson . fromJson ( element , br . ufpe . cin . groundhog . Project . class ) ; java . lang . String owner = element . getAsJsonObject ( ) . get ( \"owner\" ) . getAsString ( ) ; p . setUser ( new br . ufpe . cin . groundhog . User ( owner ) ) ; projects . add ( p ) ; } return projects ; }", "answer": "org . junit . Assert . assertNotNull ( projects )"}
{"focal": "maakBericht ( java . util . List , java . lang . String ) { final nl . bzk . migratiebrp . bericht . model . lo3 . impl . Tb02Bericht bericht = new nl . bzk . migratiebrp . bericht . model . lo3 . impl . Tb02Bericht ( ) ; try { final java . lang . reflect . Method parseInhoud = nl . bzk . migratiebrp . bericht . model . lo3 . AbstractCategorieGebaseerdParsedLo3Bericht . class . getDeclaredMethod ( \"parseCategorieen\" , java . util . List . class ) ; parseInhoud . setAccessible ( true ) ; parseInhoud . invoke ( bericht , waarden ) ; } catch ( final java . lang . ReflectiveOperationException e ) { throw new java . lang . IllegalStateException ( e ) ; } bericht . setHeader ( Lo3HeaderVeld . AKTENUMMER , aktenummer ) ; bericht . setBronPartijCode ( \"3333\" ) ; bericht . setDoelPartijCode ( \"5555\" ) ; return bericht ; }", "testMethod": "testLg01 ( ) { java . lang . String lg01 = org . apache . commons . io . IOUtils . toString ( nl . bzk . migratiebrp . isc . console . mig4jsf . pretty . PrettyPrint . class . getResourceAsStream ( \"/pretty/lg01.txt\" ) , java . nio . charset . Charset . forName ( \"UTF-8\" ) ) ; System . out . println ( lg01 ) ; final java . lang . String result = subject . prettyPrint ( maakBericht ( \"VOISC\" , lg01 ) ) ; System . out . println ( result ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testLg01 ( ) { java . lang . String lg01 = org . apache . commons . io . IOUtils . toString ( nl . bzk . migratiebrp . isc . console . mig4jsf . pretty . PrettyPrint . class . getResourceAsStream ( \"/pretty/lg01.txt\" ) , java . nio . charset . Charset . forName ( \"UTF-8\" ) ) ; System . out . println ( lg01 ) ; final java . lang . String result = subject . prettyPrint ( maakBericht ( \"VOISC\" , lg01 ) ) ; System . out . println ( result ) ; \"<AssertPlaceHolder>\" ; } maakBericht ( java . util . List , java . lang . String ) { final nl . bzk . migratiebrp . bericht . model . lo3 . impl . Tb02Bericht bericht = new nl . bzk . migratiebrp . bericht . model . lo3 . impl . Tb02Bericht ( ) ; try { final java . lang . reflect . Method parseInhoud = nl . bzk . migratiebrp . bericht . model . lo3 . AbstractCategorieGebaseerdParsedLo3Bericht . class . getDeclaredMethod ( \"parseCategorieen\" , java . util . List . class ) ; parseInhoud . setAccessible ( true ) ; parseInhoud . invoke ( bericht , waarden ) ; } catch ( final java . lang . ReflectiveOperationException e ) { throw new java . lang . IllegalStateException ( e ) ; } bericht . setHeader ( Lo3HeaderVeld . AKTENUMMER , aktenummer ) ; bericht . setBronPartijCode ( \"3333\" ) ; bericht . setDoelPartijCode ( \"5555\" ) ; return bericht ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "parse ( java . util . Collection , int ) { for ( final org . apache . poi . ss . usermodel . Sheet sheet : sheets ) { final int memberStartIndex = getMemberStartIndex ( sheet , propertyIndex ) ; properties . put ( sheet . getSheetName ( ) , processProperties ( sheet , propertyIndex ) ) ; metadata . put ( sheet . getSheetName ( ) , processKeywords ( sheet , propertyIndex , memberStartIndex ) ) ; members . put ( sheet . getSheetName ( ) , processMembers ( sheet , memberStartIndex ) ) ; } }", "testMethod": "build_InvalidAttributeType_ShouldThrowException ( ) { com . b2international . commons . test . config . data . TestConfig parse = parse ( com . b2international . commons . test . config . data . TestConfig . class , \"config-invalidtype.yml\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( parse )", "total": "build_InvalidAttributeType_ShouldThrowException ( ) { com . b2international . commons . test . config . data . TestConfig parse = parse ( com . b2international . commons . test . config . data . TestConfig . class , \"config-invalidtype.yml\" ) ; \"<AssertPlaceHolder>\" ; } parse ( java . util . Collection , int ) { for ( final org . apache . poi . ss . usermodel . Sheet sheet : sheets ) { final int memberStartIndex = getMemberStartIndex ( sheet , propertyIndex ) ; properties . put ( sheet . getSheetName ( ) , processProperties ( sheet , propertyIndex ) ) ; metadata . put ( sheet . getSheetName ( ) , processKeywords ( sheet , propertyIndex , memberStartIndex ) ) ; members . put ( sheet . getSheetName ( ) , processMembers ( sheet , memberStartIndex ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( parse )"}
{"focal": "getVirtuoso ( ) { return this . virtuoso ; }", "testMethod": "testGetVirtuoso ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( this . store . getVirtuoso ( ) )", "total": "testGetVirtuoso ( ) { \"<AssertPlaceHolder>\" ; } getVirtuoso ( ) { return this . virtuoso ; }", "answer": "org . junit . Assert . assertNotNull ( this . store . getVirtuoso ( ) )"}
{"focal": "generateKeySet ( de . rub . nds . tlsattacker . core . state . TlsContext ) { return de . rub . nds . tlsattacker . core . record . cipher . cryptohelper . KeySetGenerator . generateKeySet ( context , context . getChooser ( ) . getSelectedProtocolVersion ( ) , context . getActiveKeySetTypeWrite ( ) ) ; }", "testMethod": "testGenerateKeySet ( ) { for ( de . rub . nds . tlsattacker . core . constants . CipherSuite suite : de . rub . nds . tlsattacker . core . constants . CipherSuite . getImplemented ( ) ) { for ( de . rub . nds . tlsattacker . core . constants . ProtocolVersion version : de . rub . nds . tlsattacker . core . constants . ProtocolVersion . values ( ) ) { try { if ( ( version == ( de . rub . nds . tlsattacker . core . constants . ProtocolVersion . SSL2 ) ) || ( version == ( de . rub . nds . tlsattacker . core . constants . ProtocolVersion . SSL3 ) ) ) { continue ; } if ( ( version . isTLS13 ( ) ) != ( suite . isTLS13 ( ) ) ) { continue ; } de . rub . nds . tlsattacker . core . state . TlsContext context = new de . rub . nds . tlsattacker . core . state . TlsContext ( ) ; context . setSelectedCipherSuite ( suite ) ; context . setSelectedProtocolVersion ( version ) ; \"<AssertPlaceHolder>\" ; } catch ( java . security . NoSuchAlgorithmException | de . rub . nds . tlsattacker . core . exceptions . CryptoException ex ) { de . rub . nds . tlsattacker . core . record . cipher . KeySetGeneratorTest . LOGGER . error ( ex ) ; org . junit . Assert . fail ( ) ; } } } }", "assertLine": "org . junit . Assert . assertNotNull ( de . rub . nds . tlsattacker . core . record . cipher . cryptohelper . KeySetGenerator . generateKeySet ( context ) )", "total": "testGenerateKeySet ( ) { for ( de . rub . nds . tlsattacker . core . constants . CipherSuite suite : de . rub . nds . tlsattacker . core . constants . CipherSuite . getImplemented ( ) ) { for ( de . rub . nds . tlsattacker . core . constants . ProtocolVersion version : de . rub . nds . tlsattacker . core . constants . ProtocolVersion . values ( ) ) { try { if ( ( version == ( de . rub . nds . tlsattacker . core . constants . ProtocolVersion . SSL2 ) ) || ( version == ( de . rub . nds . tlsattacker . core . constants . ProtocolVersion . SSL3 ) ) ) { continue ; } if ( ( version . isTLS13 ( ) ) != ( suite . isTLS13 ( ) ) ) { continue ; } de . rub . nds . tlsattacker . core . state . TlsContext context = new de . rub . nds . tlsattacker . core . state . TlsContext ( ) ; context . setSelectedCipherSuite ( suite ) ; context . setSelectedProtocolVersion ( version ) ; \"<AssertPlaceHolder>\" ; } catch ( java . security . NoSuchAlgorithmException | de . rub . nds . tlsattacker . core . exceptions . CryptoException ex ) { de . rub . nds . tlsattacker . core . record . cipher . KeySetGeneratorTest . LOGGER . error ( ex ) ; org . junit . Assert . fail ( ) ; } } } } generateKeySet ( de . rub . nds . tlsattacker . core . state . TlsContext ) { return de . rub . nds . tlsattacker . core . record . cipher . cryptohelper . KeySetGenerator . generateKeySet ( context , context . getChooser ( ) . getSelectedProtocolVersion ( ) , context . getActiveKeySetTypeWrite ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( de . rub . nds . tlsattacker . core . record . cipher . cryptohelper . KeySetGenerator . generateKeySet ( context ) )"}
{"focal": "getHostAddressFromProperty ( java . lang . String ) { return org . rioproject . net . HostUtil . getInetAddressFromProperty ( property ) . getHostAddress ( ) ; }", "testMethod": "testGetHostAddressFromProperty ( ) { java . lang . String address = org . rioproject . net . HostUtil . getHostAddressFromProperty ( \"foo\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( address )", "total": "testGetHostAddressFromProperty ( ) { java . lang . String address = org . rioproject . net . HostUtil . getHostAddressFromProperty ( \"foo\" ) ; \"<AssertPlaceHolder>\" ; } getHostAddressFromProperty ( java . lang . String ) { return org . rioproject . net . HostUtil . getInetAddressFromProperty ( property ) . getHostAddress ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( address )"}
{"focal": "getKey ( ) { return key ; }", "testMethod": "testMarshal_WrappedLongObjectId2 ( ) { com . jmethods . catatumbo . entities . WrappedLongObjectIdEntity entity = com . jmethods . catatumbo . entities . WrappedLongObjectIdEntity . getSample2 ( ) ; com . google . cloud . datastore . FullEntity < ? > nativeEntity = ( ( com . google . cloud . datastore . FullEntity < ? > ) ( com . jmethods . catatumbo . impl . Marshaller . marshal ( com . jmethods . catatumbo . impl . MarshallerTest . em , entity , Intent . INSERT ) ) ) ; com . google . cloud . datastore . IncompleteKey incompleteKey = nativeEntity . getKey ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( incompleteKey )", "total": "testMarshal_WrappedLongObjectId2 ( ) { com . jmethods . catatumbo . entities . WrappedLongObjectIdEntity entity = com . jmethods . catatumbo . entities . WrappedLongObjectIdEntity . getSample2 ( ) ; com . google . cloud . datastore . FullEntity < ? > nativeEntity = ( ( com . google . cloud . datastore . FullEntity < ? > ) ( com . jmethods . catatumbo . impl . Marshaller . marshal ( com . jmethods . catatumbo . impl . MarshallerTest . em , entity , Intent . INSERT ) ) ) ; com . google . cloud . datastore . IncompleteKey incompleteKey = nativeEntity . getKey ( ) ; \"<AssertPlaceHolder>\" ; } getKey ( ) { return key ; }", "answer": "org . junit . Assert . assertNotNull ( incompleteKey )"}
{"focal": "getTbResultsSection ( org . openhealthtools . mdht . uml . cda . pilot . TuberculosisFollowUpProgressNote ) { if ( ( org . openhealthtools . mdht . uml . cda . pilot . operations . TuberculosisFollowUpProgressNoteOperations . GET_TB_RESULTS_SECTION__EOCL_QRY ) == null ) { org . eclipse . ocl . ecore . OCL . Helper helper = org . openhealthtools . mdht . uml . cda . pilot . operations . EOCL_ENV . createOCLHelper ( ) ; helper . setOperationContext ( TBPNPackage . Literals . TUBERCULOSIS_FOLLOW_UP_PROGRESS_NOTE , TBPNPackage . Literals . TUBERCULOSIS_FOLLOW_UP_PROGRESS_NOTE . getEAllOperations ( ) . get ( 24 ) ) ; try { org . openhealthtools . mdht . uml . cda . pilot . operations . TuberculosisFollowUpProgressNoteOperations . GET_TB_RESULTS_SECTION__EOCL_QRY = helper . createQuery ( org . openhealthtools . mdht . uml . cda . pilot . operations . TuberculosisFollowUpProgressNoteOperations . GET_TB_RESULTS_SECTION__EOCL_EXP ) ; } catch ( org . eclipse . ocl . ParserException pe ) { throw new java . lang . UnsupportedOperationException ( pe . getLocalizedMessage ( ) ) ; } } org . eclipse . ocl . ecore . OCL . Query query = org . openhealthtools . mdht . uml . cda . pilot . operations . EOCL_ENV . createQuery ( org . openhealthtools . mdht . uml . cda . pilot . operations . TuberculosisFollowUpProgressNoteOperations . GET_TB_RESULTS_SECTION__EOCL_QRY ) ; return ( ( org . openhealthtools . mdht . uml . cda . pilot . TBResultsSection ) ( query . evaluate ( tuberculosisFollowUpProgressNote ) ) ) ; }", "testMethod": "testGetTbResultsSection ( ) { \"<AssertPlaceHolder>\" ; org . junit . Assert . fail ( \"Not<sp>implemented.\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . openhealthtools . mdht . uml . cda . pilot . operations . TuberculosisFollowUpProgressNoteOperations . getTbResultsSection ( null ) )", "total": "testGetTbResultsSection ( ) { \"<AssertPlaceHolder>\" ; org . junit . Assert . fail ( \"Not<sp>implemented.\" ) ; } getTbResultsSection ( org . openhealthtools . mdht . uml . cda . pilot . TuberculosisFollowUpProgressNote ) { if ( ( org . openhealthtools . mdht . uml . cda . pilot . operations . TuberculosisFollowUpProgressNoteOperations . GET_TB_RESULTS_SECTION__EOCL_QRY ) == null ) { org . eclipse . ocl . ecore . OCL . Helper helper = org . openhealthtools . mdht . uml . cda . pilot . operations . EOCL_ENV . createOCLHelper ( ) ; helper . setOperationContext ( TBPNPackage . Literals . TUBERCULOSIS_FOLLOW_UP_PROGRESS_NOTE , TBPNPackage . Literals . TUBERCULOSIS_FOLLOW_UP_PROGRESS_NOTE . getEAllOperations ( ) . get ( 24 ) ) ; try { org . openhealthtools . mdht . uml . cda . pilot . operations . TuberculosisFollowUpProgressNoteOperations . GET_TB_RESULTS_SECTION__EOCL_QRY = helper . createQuery ( org . openhealthtools . mdht . uml . cda . pilot . operations . TuberculosisFollowUpProgressNoteOperations . GET_TB_RESULTS_SECTION__EOCL_EXP ) ; } catch ( org . eclipse . ocl . ParserException pe ) { throw new java . lang . UnsupportedOperationException ( pe . getLocalizedMessage ( ) ) ; } } org . eclipse . ocl . ecore . OCL . Query query = org . openhealthtools . mdht . uml . cda . pilot . operations . EOCL_ENV . createQuery ( org . openhealthtools . mdht . uml . cda . pilot . operations . TuberculosisFollowUpProgressNoteOperations . GET_TB_RESULTS_SECTION__EOCL_QRY ) ; return ( ( org . openhealthtools . mdht . uml . cda . pilot . TBResultsSection ) ( query . evaluate ( tuberculosisFollowUpProgressNote ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( org . openhealthtools . mdht . uml . cda . pilot . operations . TuberculosisFollowUpProgressNoteOperations . getTbResultsSection ( null ) )"}
{"focal": "get ( ) { return new io . agrest . runtime . processor . select . SelectProcessorFactory ( stages ) ; }", "testMethod": "test_CayenneExp_Map_Params ( ) { javax . ws . rs . core . Response r1 = target ( \"/e2_Map_Params\" ) . queryParam ( \"cayenneExp\" , urlEnc ( \"{\\\"exp\\\":\\\"name<sp>=<sp>$n\\\",\\\"params\\\":{\\\"n\\\":\\\"xxx\\\"}}\" ) ) . request ( ) . get ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( r1 )", "total": "test_CayenneExp_Map_Params ( ) { javax . ws . rs . core . Response r1 = target ( \"/e2_Map_Params\" ) . queryParam ( \"cayenneExp\" , urlEnc ( \"{\\\"exp\\\":\\\"name<sp>=<sp>$n\\\",\\\"params\\\":{\\\"n\\\":\\\"xxx\\\"}}\" ) ) . request ( ) . get ( ) ; \"<AssertPlaceHolder>\" ; } get ( ) { return new io . agrest . runtime . processor . select . SelectProcessorFactory ( stages ) ; }", "answer": "org . junit . Assert . assertNotNull ( r1 )"}
{"focal": "getObjectById ( java . lang . Object ) { org . zoodb . internal . util . DBTracer . logCall ( this , arg0 ) ; checkOpen ( ) ; java . lang . Object o = nativeConnection . getObjectById ( arg0 ) ; if ( o == null ) { throw new javax . jdo . JDOObjectNotFoundException ( ( \"OID=\" + ( org . zoodb . internal . util . Util . oidToString ( arg0 ) ) ) ) ; } return o ; }", "testMethod": "testSerialization ( ) { javax . jdo . PersistenceManager pm = org . zoodb . test . testutil . TestTools . openPM ( ) ; pm . currentTransaction ( ) . begin ( ) ; org . zoodb . test . jdo . TwitSession s = new org . zoodb . test . jdo . TwitSession ( \"mySession\" ) ; pm . makePersistent ( s ) ; java . lang . Object oid = pm . getObjectId ( s ) ; pm . currentTransaction ( ) . commit ( ) ; org . zoodb . test . testutil . TestTools . closePM ( ) ; pm = org . zoodb . test . testutil . TestTools . openPM ( ) ; pm . currentTransaction ( ) . begin ( ) ; org . zoodb . test . jdo . TwitSession s2 = ( ( org . zoodb . test . jdo . TwitSession ) ( pm . getObjectById ( oid ) ) ) ; \"<AssertPlaceHolder>\" ; pm . currentTransaction ( ) . commit ( ) ; pm . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( s2 )", "total": "testSerialization ( ) { javax . jdo . PersistenceManager pm = org . zoodb . test . testutil . TestTools . openPM ( ) ; pm . currentTransaction ( ) . begin ( ) ; org . zoodb . test . jdo . TwitSession s = new org . zoodb . test . jdo . TwitSession ( \"mySession\" ) ; pm . makePersistent ( s ) ; java . lang . Object oid = pm . getObjectId ( s ) ; pm . currentTransaction ( ) . commit ( ) ; org . zoodb . test . testutil . TestTools . closePM ( ) ; pm = org . zoodb . test . testutil . TestTools . openPM ( ) ; pm . currentTransaction ( ) . begin ( ) ; org . zoodb . test . jdo . TwitSession s2 = ( ( org . zoodb . test . jdo . TwitSession ) ( pm . getObjectById ( oid ) ) ) ; \"<AssertPlaceHolder>\" ; pm . currentTransaction ( ) . commit ( ) ; pm . close ( ) ; } getObjectById ( java . lang . Object ) { org . zoodb . internal . util . DBTracer . logCall ( this , arg0 ) ; checkOpen ( ) ; java . lang . Object o = nativeConnection . getObjectById ( arg0 ) ; if ( o == null ) { throw new javax . jdo . JDOObjectNotFoundException ( ( \"OID=\" + ( org . zoodb . internal . util . Util . oidToString ( arg0 ) ) ) ) ; } return o ; }", "answer": "org . junit . Assert . assertNotNull ( s2 )"}
{"focal": "runAndRenderSampleReport ( java . lang . String , java . lang . String ) { if ( ( uk . co . spudsoft . birt . emitters . excel . tests . SampleReportsTest . basePath ) != null ) { java . io . File file = new java . io . File ( ( ( uk . co . spudsoft . birt . emitters . excel . tests . SampleReportsTest . basePath ) + filename ) ) ; if ( file . exists ( ) ) { return runAndRenderReport ( file . getAbsolutePath ( ) , extension ) ; } } return null ; }", "testMethod": "masterDetailOneReport ( ) { java . io . InputStream inputStream = null ; parameters . put ( \"customer\" , 103 ) ; parameters . put ( \"order\" , 10123 ) ; if ( ( inputStream = runAndRenderSampleReport ( \"samplereports/Reporting<sp>Feature<sp>Examples/Drill<sp>to<sp>Details/MasterDetailOneReport.rptdesign\" , \"xlsx\" ) ) != null ) { try { \"<AssertPlaceHolder>\" ; } finally { inputStream . close ( ) ; } } }", "assertLine": "org . junit . Assert . assertNotNull ( inputStream )", "total": "masterDetailOneReport ( ) { java . io . InputStream inputStream = null ; parameters . put ( \"customer\" , 103 ) ; parameters . put ( \"order\" , 10123 ) ; if ( ( inputStream = runAndRenderSampleReport ( \"samplereports/Reporting<sp>Feature<sp>Examples/Drill<sp>to<sp>Details/MasterDetailOneReport.rptdesign\" , \"xlsx\" ) ) != null ) { try { \"<AssertPlaceHolder>\" ; } finally { inputStream . close ( ) ; } } } runAndRenderSampleReport ( java . lang . String , java . lang . String ) { if ( ( uk . co . spudsoft . birt . emitters . excel . tests . SampleReportsTest . basePath ) != null ) { java . io . File file = new java . io . File ( ( ( uk . co . spudsoft . birt . emitters . excel . tests . SampleReportsTest . basePath ) + filename ) ) ; if ( file . exists ( ) ) { return runAndRenderReport ( file . getAbsolutePath ( ) , extension ) ; } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( inputStream )"}
{"focal": "readBinaryObject ( java . lang . String ) { byte [ ] binaryBytes = javax . xml . bind . DatatypeConverter . parseHexBinary ( hexBytes ) ; return readBinaryObject ( java . nio . ByteBuffer . wrap ( binaryBytes ) ) ; }", "testMethod": "testTransactionMetaData ( ) { java . lang . String largeMetajstellarapi . serialization . StellarBinarySerializer binSer = new jstellarapi . serialization . StellarBinarySerializer ( ) ; jstellarapi . serialization . StellarBinaryObject largeTxObj = binSer . readBinaryObject ( largeMeta ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( largeTxObj )", "total": "testTransactionMetaData ( ) { java . lang . String largeMetajstellarapi . serialization . StellarBinarySerializer binSer = new jstellarapi . serialization . StellarBinarySerializer ( ) ; jstellarapi . serialization . StellarBinaryObject largeTxObj = binSer . readBinaryObject ( largeMeta ) ; \"<AssertPlaceHolder>\" ; } readBinaryObject ( java . lang . String ) { byte [ ] binaryBytes = javax . xml . bind . DatatypeConverter . parseHexBinary ( hexBytes ) ; return readBinaryObject ( java . nio . ByteBuffer . wrap ( binaryBytes ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( largeTxObj )"}
{"focal": "getFileInputStream ( java . lang . String , java . lang . String ) { return com . ctrip . xpipe . utils . FileUtils . getFileInputStream ( path , fileName , com . ctrip . xpipe . utils . FileUtils . class ) ; }", "testMethod": "testAbsolute ( ) { java . lang . String testDir = getTestFileDir ( ) ; logger . info ( \"[testAbsolute]{}\" , testDir ) ; java . lang . String fileName = ( getTestName ( ) ) + \".txt\" ; java . io . File file = new java . io . File ( testDir , fileName ) ; java . lang . String value = randomString ( ) ; org . apache . commons . io . FileUtils . write ( file , value ) ; java . io . InputStream ins = com . ctrip . xpipe . utils . FileUtils . getFileInputStream ( new java . io . File ( testDir ) . getAbsolutePath ( ) , fileName ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ins )", "total": "testAbsolute ( ) { java . lang . String testDir = getTestFileDir ( ) ; logger . info ( \"[testAbsolute]{}\" , testDir ) ; java . lang . String fileName = ( getTestName ( ) ) + \".txt\" ; java . io . File file = new java . io . File ( testDir , fileName ) ; java . lang . String value = randomString ( ) ; org . apache . commons . io . FileUtils . write ( file , value ) ; java . io . InputStream ins = com . ctrip . xpipe . utils . FileUtils . getFileInputStream ( new java . io . File ( testDir ) . getAbsolutePath ( ) , fileName ) ; \"<AssertPlaceHolder>\" ; } getFileInputStream ( java . lang . String , java . lang . String ) { return com . ctrip . xpipe . utils . FileUtils . getFileInputStream ( path , fileName , com . ctrip . xpipe . utils . FileUtils . class ) ; }", "answer": "org . junit . Assert . assertNotNull ( ins )"}
{"focal": "findUserInDB ( java . lang . String , java . lang . String ) { return userRepository . findByMailAndDomain ( domain , mail ) ; }", "testMethod": "testFindUserInDB ( ) { org . linagora . linshare . service . UserServiceImplTest . logger . info ( LinShareTestConstants . BEGIN_TEST ) ; org . linagora . linshare . core . domain . entities . AbstractDomain domain = abstractDomainRepository . findById ( LoadingServiceTestDatas . sqlSubDomain ) ; org . linagora . linshare . core . domain . entities . Internal user = new org . linagora . linshare . core . domain . entities . Internal ( \"John\" , \"Doe\" , \"user1@linshare.org\" , null ) ; user . setDomain ( domain ) ; user . setCmisLocale ( \"en\" ) ; org . linagora . linshare . service . UserServiceImplTest . logger . info ( \"Save<sp>user<sp>in<sp>DB\" ) ; userService . saveOrUpdateUser ( user ) ; \"<AssertPlaceHolder>\" ; org . linagora . linshare . service . UserServiceImplTest . logger . debug ( LinShareTestConstants . END_TEST ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( userService . findUserInDB ( LoadingServiceTestDatas . sqlSubDomain , \"user1@linshare.org\" ) )", "total": "testFindUserInDB ( ) { org . linagora . linshare . service . UserServiceImplTest . logger . info ( LinShareTestConstants . BEGIN_TEST ) ; org . linagora . linshare . core . domain . entities . AbstractDomain domain = abstractDomainRepository . findById ( LoadingServiceTestDatas . sqlSubDomain ) ; org . linagora . linshare . core . domain . entities . Internal user = new org . linagora . linshare . core . domain . entities . Internal ( \"John\" , \"Doe\" , \"user1@linshare.org\" , null ) ; user . setDomain ( domain ) ; user . setCmisLocale ( \"en\" ) ; org . linagora . linshare . service . UserServiceImplTest . logger . info ( \"Save<sp>user<sp>in<sp>DB\" ) ; userService . saveOrUpdateUser ( user ) ; \"<AssertPlaceHolder>\" ; org . linagora . linshare . service . UserServiceImplTest . logger . debug ( LinShareTestConstants . END_TEST ) ; } findUserInDB ( java . lang . String , java . lang . String ) { return userRepository . findByMailAndDomain ( domain , mail ) ; }", "answer": "org . junit . Assert . assertNotNull ( userService . findUserInDB ( LoadingServiceTestDatas . sqlSubDomain , \"user1@linshare.org\" ) )"}
{"focal": "don ( K , java . util . Collection ) { return null ; }", "testMethod": "testThing ( ) { org . drools . core . factmodel . traits . Entity core = new org . drools . core . factmodel . traits . Entity ( \"x\" ) ; org . drools . core . factmodel . traits . Thing thing = factory . don ( core , org . drools . core . factmodel . traits . Thing . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( thing )", "total": "testThing ( ) { org . drools . core . factmodel . traits . Entity core = new org . drools . core . factmodel . traits . Entity ( \"x\" ) ; org . drools . core . factmodel . traits . Thing thing = factory . don ( core , org . drools . core . factmodel . traits . Thing . class ) ; \"<AssertPlaceHolder>\" ; } don ( K , java . util . Collection ) { return null ; }", "answer": "org . junit . Assert . assertNotNull ( thing )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . hospitalReportManager . model . HRMDocumentToDemographic entity = new org . oscarehr . hospitalReportManager . model . HRMDocumentToDemographic ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . hospitalReportManager . model . HRMDocumentToDemographic entity = new org . oscarehr . hospitalReportManager . model . HRMDocumentToDemographic ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . SurveyTestInstance entity = new org . oscarehr . common . model . SurveyTestInstance ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . SurveyTestInstance entity = new org . oscarehr . common . model . SurveyTestInstance ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . BedDemographic entity = new org . oscarehr . common . model . BedDemographic ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; entity . getId ( ) . setBedId ( 1 ) ; entity . getId ( ) . setDemographicNo ( 1 ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . BedDemographic entity = new org . oscarehr . common . model . BedDemographic ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; entity . getId ( ) . setBedId ( 1 ) ; entity . getId ( ) . setDemographicNo ( 1 ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "get ( java . lang . String ) { org . camunda . bpm . engine . rest . hal . cache . HalResourceCacheEntry cacheEntry = cache . get ( id ) ; if ( cacheEntry != null ) { if ( expired ( cacheEntry ) ) { remove ( cacheEntry . getId ( ) ) ; return null ; } else { return cacheEntry . getResource ( ) ; } } else { return null ; } }", "testMethod": "testGetDeploymentTxtResourceData ( ) { org . camunda . bpm . engine . rest . Resource resource = org . camunda . bpm . engine . rest . helper . MockProvider . createMockDeploymentTxtResource ( ) ; org . camunda . bpm . engine . rest . List < org . camunda . bpm . engine . rest . Resource > resources = new org . camunda . bpm . engine . rest . ArrayList < org . camunda . bpm . engine . rest . Resource > ( ) ; resources . add ( resource ) ; java . io . InputStream input = new java . io . ByteArrayInputStream ( createMockDeploymentResourceByteData ( ) ) ; when ( mockRepositoryService . getDeploymentResources ( eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) ) ) . thenReturn ( resources ) ; when ( mockRepositoryService . getResourceAsStreamById ( eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) , eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_TXT_RESOURCE_ID ) ) ) . thenReturn ( input ) ; io . restassured . response . Response response = io . restassured . RestAssured . given ( ) . pathParam ( \"id\" , org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) . pathParam ( \"resourceId\" , org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_TXT_RESOURCE_ID ) . then ( ) . expect ( ) . statusCode ( Status . OK . getStatusCode ( ) ) . contentType ( ContentType . TEXT ) . header ( \"Content-Disposition\" , ( \"attachment;<sp>filename=\" + ( org . camunda . bpm . engine . rest . helper . MockProvider . EXAMPLE_DEPLOYMENT_TXT_RESOURCE_NAME ) ) ) . when ( ) . get ( org . camunda . bpm . engine . rest . DeploymentRestServiceInteractionTest . SINGLE_RESOURCE_DATA_URL ) ; java . lang . String responseContent = response . asString ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( responseContent )", "total": "testGetDeploymentTxtResourceData ( ) { org . camunda . bpm . engine . rest . Resource resource = org . camunda . bpm . engine . rest . helper . MockProvider . createMockDeploymentTxtResource ( ) ; org . camunda . bpm . engine . rest . List < org . camunda . bpm . engine . rest . Resource > resources = new org . camunda . bpm . engine . rest . ArrayList < org . camunda . bpm . engine . rest . Resource > ( ) ; resources . add ( resource ) ; java . io . InputStream input = new java . io . ByteArrayInputStream ( createMockDeploymentResourceByteData ( ) ) ; when ( mockRepositoryService . getDeploymentResources ( eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) ) ) . thenReturn ( resources ) ; when ( mockRepositoryService . getResourceAsStreamById ( eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) , eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_TXT_RESOURCE_ID ) ) ) . thenReturn ( input ) ; io . restassured . response . Response response = io . restassured . RestAssured . given ( ) . pathParam ( \"id\" , org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) . pathParam ( \"resourceId\" , org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_TXT_RESOURCE_ID ) . then ( ) . expect ( ) . statusCode ( Status . OK . getStatusCode ( ) ) . contentType ( ContentType . TEXT ) . header ( \"Content-Disposition\" , ( \"attachment;<sp>filename=\" + ( org . camunda . bpm . engine . rest . helper . MockProvider . EXAMPLE_DEPLOYMENT_TXT_RESOURCE_NAME ) ) ) . when ( ) . get ( org . camunda . bpm . engine . rest . DeploymentRestServiceInteractionTest . SINGLE_RESOURCE_DATA_URL ) ; java . lang . String responseContent = response . asString ( ) ; \"<AssertPlaceHolder>\" ; } get ( java . lang . String ) { org . camunda . bpm . engine . rest . hal . cache . HalResourceCacheEntry cacheEntry = cache . get ( id ) ; if ( cacheEntry != null ) { if ( expired ( cacheEntry ) ) { remove ( cacheEntry . getId ( ) ) ; return null ; } else { return cacheEntry . getResource ( ) ; } } else { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( responseContent )"}
{"focal": "getCreated ( ) { return created ; }", "testMethod": "testCreatedNotNull ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( user . getCreated ( ) )", "total": "testCreatedNotNull ( ) { \"<AssertPlaceHolder>\" ; } getCreated ( ) { return created ; }", "answer": "org . junit . Assert . assertNotNull ( user . getCreated ( ) )"}
{"focal": "getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "testMethod": "shouldThrowExceptionWhenGetPropertiesFromTimestampWhenGroupIsNotFound ( ) { final long timestamp = java . lang . System . currentTimeMillis ( ) ; final java . lang . String group = \"unknownGroup\" ; try { converter . getPropertiesFromTimestamp ( group , timestamp ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final uk . gov . gchq . gaffer . accumulostore . key . exception . AccumuloElementConversionException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "shouldThrowExceptionWhenGetPropertiesFromTimestampWhenGroupIsNotFound ( ) { final long timestamp = java . lang . System . currentTimeMillis ( ) ; final java . lang . String group = \"unknownGroup\" ; try { converter . getPropertiesFromTimestamp ( group , timestamp ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final uk . gov . gchq . gaffer . accumulostore . key . exception . AccumuloElementConversionException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "getQueryString ( ) { if ( ( queryString ) == null ) { queryString = new java . util . ArrayList ( ) ; } return queryString ; }", "testMethod": "testQueryString ( ) { de . sstoehr . harreader . model . HarRequest request = new de . sstoehr . harreader . model . HarRequest ( ) ; request . setQueryString ( null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( request . getQueryString ( ) )", "total": "testQueryString ( ) { de . sstoehr . harreader . model . HarRequest request = new de . sstoehr . harreader . model . HarRequest ( ) ; request . setQueryString ( null ) ; \"<AssertPlaceHolder>\" ; } getQueryString ( ) { if ( ( queryString ) == null ) { queryString = new java . util . ArrayList ( ) ; } return queryString ; }", "answer": "org . junit . Assert . assertNotNull ( request . getQueryString ( ) )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testSaveDuplicateQuery ( ) { gov . gtas . querybuilder . model . UserQueryRequest request = new gov . gtas . querybuilder . model . UserQueryRequest ( ) ; request . setTitle ( gov . gtas . querybuilder . service . QueryBuilderServiceIT . TITLE ) ; request . setDescription ( gov . gtas . querybuilder . service . QueryBuilderServiceIT . DESCRIPTION ) ; request . setQuery ( gov . gtas . querybuilder . service . QueryBuilderServiceIT . query ) ; gov . gtas . querybuilder . model . IUserQueryResult result = queryService . saveQuery ( gov . gtas . querybuilder . service . QueryBuilderServiceIT . USER_ID , request ) ; \"<AssertPlaceHolder>\" ; queryService . saveQuery ( gov . gtas . querybuilder . service . QueryBuilderServiceIT . USER_ID , request ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result . getId ( ) )", "total": "testSaveDuplicateQuery ( ) { gov . gtas . querybuilder . model . UserQueryRequest request = new gov . gtas . querybuilder . model . UserQueryRequest ( ) ; request . setTitle ( gov . gtas . querybuilder . service . QueryBuilderServiceIT . TITLE ) ; request . setDescription ( gov . gtas . querybuilder . service . QueryBuilderServiceIT . DESCRIPTION ) ; request . setQuery ( gov . gtas . querybuilder . service . QueryBuilderServiceIT . query ) ; gov . gtas . querybuilder . model . IUserQueryResult result = queryService . saveQuery ( gov . gtas . querybuilder . service . QueryBuilderServiceIT . USER_ID , request ) ; \"<AssertPlaceHolder>\" ; queryService . saveQuery ( gov . gtas . querybuilder . service . QueryBuilderServiceIT . USER_ID , request ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( result . getId ( ) )"}
{"focal": "inspectClass ( java . lang . Class , io . atlasmap . v2 . CollectionType , java . lang . String ) { if ( clazz == null ) { throw new java . lang . IllegalArgumentException ( \"Class<sp>must<sp>be<sp>specified\" ) ; } return inspectClass ( clazz . getClassLoader ( ) , clazz , collectionType , collectionClassName ) ; }", "testMethod": "testInspectClassClassNameClassPath ( ) { io . atlasmap . java . v2 . JavaClass javaClazz = classInspectionService . inspectClass ( \"io.atlasmap.java.test.v2.FlatPrimitiveClass\" , CollectionType . NONE , \"target/reference-jars/atlas-java-test-model-1.16.0-SNAPSHOT.jar\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( javaClazz )", "total": "testInspectClassClassNameClassPath ( ) { io . atlasmap . java . v2 . JavaClass javaClazz = classInspectionService . inspectClass ( \"io.atlasmap.java.test.v2.FlatPrimitiveClass\" , CollectionType . NONE , \"target/reference-jars/atlas-java-test-model-1.16.0-SNAPSHOT.jar\" ) ; \"<AssertPlaceHolder>\" ; } inspectClass ( java . lang . Class , io . atlasmap . v2 . CollectionType , java . lang . String ) { if ( clazz == null ) { throw new java . lang . IllegalArgumentException ( \"Class<sp>must<sp>be<sp>specified\" ) ; } return inspectClass ( clazz . getClassLoader ( ) , clazz , collectionType , collectionClassName ) ; }", "answer": "org . junit . Assert . assertNotNull ( javaClazz )"}
{"focal": "isHeadless ( ) { java . awt . GraphicsEnvironment ge = java . awt . GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; return ge . isHeadless ( ) ; }", "testMethod": "testDnDList ( ) { if ( isHeadless ( ) ) return ; org . geotools . swing . control . DnDList < java . lang . String > list = new org . geotools . swing . control . DnDList < java . lang . String > ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( list )", "total": "testDnDList ( ) { if ( isHeadless ( ) ) return ; org . geotools . swing . control . DnDList < java . lang . String > list = new org . geotools . swing . control . DnDList < java . lang . String > ( ) ; \"<AssertPlaceHolder>\" ; } isHeadless ( ) { java . awt . GraphicsEnvironment ge = java . awt . GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; return ge . isHeadless ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( list )"}
{"focal": "selInfo ( java . lang . String , com . vmware . vrack . hms . common . resource . sel . SelOption ) { if ( ! ( serverConnector . getNodeMap ( ) . containsKey ( host_id ) ) ) throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . NOT_FOUND . getStatusCode ( ) , \"Invalid<sp>Request\" , ( \"Can't<sp>find<sp>host<sp>with<sp>id<sp>\" + host_id ) ) ; else { com . vmware . vrack . hms . common . servernodes . api . ServerNode node = ( ( com . vmware . vrack . hms . common . servernodes . api . ServerNode ) ( serverConnector . getNodeMap ( ) . get ( host_id ) ) ) ; try { executeTask ( node , TaskType . SelInfo , selOption ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsResourceBusyException e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , com . vmware . vrack . hms . common . util . Constants . RESOURCE_BUSY , e . getMessage ( ) ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsException e ) { if ( e instanceof com . vmware . vrack . hms . common . exception . HMSRestException ) { throw e ; } else { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } } catch ( java . lang . Exception e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } return node . getSelInfo ( ) ; } }", "testMethod": "selInfo_nodeInNodeMap_BoardServiceFound ( ) { com . vmware . vrack . hms . rest . services . ServerRestServiceTest . insertNodeInNodeMap ( com . vmware . vrack . hms . rest . services . ServerRestServiceTest . getServerNode ( ) ) ; com . vmware . vrack . hms . rest . services . ServerRestServiceTest . addBoardServiceForNode ( ) ; com . vmware . vrack . hms . rest . services . ServerRestService restService = new com . vmware . vrack . hms . rest . services . ServerRestService ( ) ; com . vmware . vrack . hms . common . resource . sel . SelOption selOption = new com . vmware . vrack . hms . common . resource . sel . SelOption ( ) ; selOption . setDirection ( SelFetchDirection . RecentEntries ) ; selOption . setRecordCount ( 64 ) ; selOption . setSelTask ( SelTask . SelDetails ) ; com . vmware . vrack . hms . common . resource . sel . SelInfo selInfo = restService . selInfo ( \"N1\" , selOption ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( selInfo )", "total": "selInfo_nodeInNodeMap_BoardServiceFound ( ) { com . vmware . vrack . hms . rest . services . ServerRestServiceTest . insertNodeInNodeMap ( com . vmware . vrack . hms . rest . services . ServerRestServiceTest . getServerNode ( ) ) ; com . vmware . vrack . hms . rest . services . ServerRestServiceTest . addBoardServiceForNode ( ) ; com . vmware . vrack . hms . rest . services . ServerRestService restService = new com . vmware . vrack . hms . rest . services . ServerRestService ( ) ; com . vmware . vrack . hms . common . resource . sel . SelOption selOption = new com . vmware . vrack . hms . common . resource . sel . SelOption ( ) ; selOption . setDirection ( SelFetchDirection . RecentEntries ) ; selOption . setRecordCount ( 64 ) ; selOption . setSelTask ( SelTask . SelDetails ) ; com . vmware . vrack . hms . common . resource . sel . SelInfo selInfo = restService . selInfo ( \"N1\" , selOption ) ; \"<AssertPlaceHolder>\" ; } selInfo ( java . lang . String , com . vmware . vrack . hms . common . resource . sel . SelOption ) { if ( ! ( serverConnector . getNodeMap ( ) . containsKey ( host_id ) ) ) throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . NOT_FOUND . getStatusCode ( ) , \"Invalid<sp>Request\" , ( \"Can't<sp>find<sp>host<sp>with<sp>id<sp>\" + host_id ) ) ; else { com . vmware . vrack . hms . common . servernodes . api . ServerNode node = ( ( com . vmware . vrack . hms . common . servernodes . api . ServerNode ) ( serverConnector . getNodeMap ( ) . get ( host_id ) ) ) ; try { executeTask ( node , TaskType . SelInfo , selOption ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsResourceBusyException e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , com . vmware . vrack . hms . common . util . Constants . RESOURCE_BUSY , e . getMessage ( ) ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsException e ) { if ( e instanceof com . vmware . vrack . hms . common . exception . HMSRestException ) { throw e ; } else { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } } catch ( java . lang . Exception e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } return node . getSelInfo ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( selInfo )"}
{"focal": "execSelect ( ) { com . franz . agraph . repository . AGTupleQuery tq = model . getGraph ( ) . getConnection ( ) . prepareTupleQuery ( query . getLanguage ( ) , query . getQueryString ( ) ) ; tq . setIncludeInferred ( ( ( model . getGraph ( ) ) instanceof com . franz . agraph . jena . AGInfGraph ) ) ; tq . setEntailmentRegime ( model . getGraph ( ) . getEntailmentRegime ( ) ) ; tq . setCheckVariables ( query . isCheckVariables ( ) ) ; tq . setLimit ( query . getLimit ( ) ) ; tq . setOffset ( query . getOffset ( ) ) ; if ( ( binding ) != null ) { java . util . Iterator < java . lang . String > vars = binding . varNames ( ) ; while ( vars . hasNext ( ) ) { java . lang . String var = vars . next ( ) ; tq . setBinding ( var , model . getGraph ( ) . vf . asValue ( binding . get ( var ) . asNode ( ) ) ) ; } } org . eclipse . rdf4j . query . TupleQueryResult result ; try { tq . setDataset ( model . getGraph ( ) . getDataset ( ) ) ; if ( ( timeout ) > 0 ) { tq . setMaxExecutionTime ( ( ( int ) ( ( timeout ) / 1000 ) ) ) ; } result = tq . evaluate ( ) ; } catch ( org . eclipse . rdf4j . query . QueryEvaluationException e ) { throw new org . apache . jena . query . QueryException ( e ) ; } resultToClose = result ; return new com . franz . agraph . jena . AGResultSet ( result , model ) ; }", "testMethod": "testSetTimeoutForExecSelectWithZero ( ) { java . lang . String queryString = \"SELECT<sp>(COUNT(DISTINCT<sp>?s<sp>)<sp>AS<sp>?no)<sp>{<sp>{<sp>?s<sp>?p<sp>?o<sp>}<sp>UNION<sp>{<sp>?o<sp>?p<sp>?s<sp>}<sp>FILTER(!isBlank(?s)<sp>&&<sp>!isLiteral(?s))<sp>}\" ; com . franz . agraph . jena . AGQuery query = com . franz . agraph . jena . AGQueryFactory . create ( queryString ) ; try ( com . franz . agraph . jena . AGQueryExecution qe = com . franz . agraph . jena . AGQueryExecutionFactory . create ( query , test . AGQueryExecutionTest . model ) ) { qe . setTimeout ( 0 ) ; org . apache . jena . query . ResultSet rs = qe . execSelect ( ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( rs )", "total": "testSetTimeoutForExecSelectWithZero ( ) { java . lang . String queryString = \"SELECT<sp>(COUNT(DISTINCT<sp>?s<sp>)<sp>AS<sp>?no)<sp>{<sp>{<sp>?s<sp>?p<sp>?o<sp>}<sp>UNION<sp>{<sp>?o<sp>?p<sp>?s<sp>}<sp>FILTER(!isBlank(?s)<sp>&&<sp>!isLiteral(?s))<sp>}\" ; com . franz . agraph . jena . AGQuery query = com . franz . agraph . jena . AGQueryFactory . create ( queryString ) ; try ( com . franz . agraph . jena . AGQueryExecution qe = com . franz . agraph . jena . AGQueryExecutionFactory . create ( query , test . AGQueryExecutionTest . model ) ) { qe . setTimeout ( 0 ) ; org . apache . jena . query . ResultSet rs = qe . execSelect ( ) ; \"<AssertPlaceHolder>\" ; } } execSelect ( ) { com . franz . agraph . repository . AGTupleQuery tq = model . getGraph ( ) . getConnection ( ) . prepareTupleQuery ( query . getLanguage ( ) , query . getQueryString ( ) ) ; tq . setIncludeInferred ( ( ( model . getGraph ( ) ) instanceof com . franz . agraph . jena . AGInfGraph ) ) ; tq . setEntailmentRegime ( model . getGraph ( ) . getEntailmentRegime ( ) ) ; tq . setCheckVariables ( query . isCheckVariables ( ) ) ; tq . setLimit ( query . getLimit ( ) ) ; tq . setOffset ( query . getOffset ( ) ) ; if ( ( binding ) != null ) { java . util . Iterator < java . lang . String > vars = binding . varNames ( ) ; while ( vars . hasNext ( ) ) { java . lang . String var = vars . next ( ) ; tq . setBinding ( var , model . getGraph ( ) . vf . asValue ( binding . get ( var ) . asNode ( ) ) ) ; } } org . eclipse . rdf4j . query . TupleQueryResult result ; try { tq . setDataset ( model . getGraph ( ) . getDataset ( ) ) ; if ( ( timeout ) > 0 ) { tq . setMaxExecutionTime ( ( ( int ) ( ( timeout ) / 1000 ) ) ) ; } result = tq . evaluate ( ) ; } catch ( org . eclipse . rdf4j . query . QueryEvaluationException e ) { throw new org . apache . jena . query . QueryException ( e ) ; } resultToClose = result ; return new com . franz . agraph . jena . AGResultSet ( result , model ) ; }", "answer": "org . junit . Assert . assertNotNull ( rs )"}
{"focal": "getMessage ( ) { return message ; }", "testMethod": "update_Null ( ) { try { datastore . update ( null ) ; org . junit . Assert . fail ( ) ; } catch ( at . ac . tuwien . infosys . jcloudscale . datastore . api . DatastoreException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "update_Null ( ) { try { datastore . update ( null ) ; org . junit . Assert . fail ( ) ; } catch ( at . ac . tuwien . infosys . jcloudscale . datastore . api . DatastoreException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return message ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "put ( K , T ) { this . mMap . put ( theRef , new net . violet . db . cache . CacheReference < K , T > ( theRef , theRecord , this . mReferenceQueue ) ) ; this . mLinkedMap . put ( theRef , theRecord ) ; }", "testMethod": "testInvalidParameter ( ) { final net . violet . platform . api . actions . Action theAction = new net . violet . platform . api . actions . stores . Create ( ) ; final net . violet . platform . api . callers . APICaller caller = getPublicApplicationAPICaller ( ) ; final java . util . Map < java . lang . String , java . lang . Object > theParams = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; theParams . put ( \"language\" , \"JPFR\" ) ; final net . violet . platform . api . actions . ActionParam theActionParam = new net . violet . platform . api . actions . ActionParam ( caller , theParams ) ; final java . lang . Object theResult = theAction . processRequest ( theActionParam ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( theResult )", "total": "testInvalidParameter ( ) { final net . violet . platform . api . actions . Action theAction = new net . violet . platform . api . actions . stores . Create ( ) ; final net . violet . platform . api . callers . APICaller caller = getPublicApplicationAPICaller ( ) ; final java . util . Map < java . lang . String , java . lang . Object > theParams = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; theParams . put ( \"language\" , \"JPFR\" ) ; final net . violet . platform . api . actions . ActionParam theActionParam = new net . violet . platform . api . actions . ActionParam ( caller , theParams ) ; final java . lang . Object theResult = theAction . processRequest ( theActionParam ) ; \"<AssertPlaceHolder>\" ; } put ( K , T ) { this . mMap . put ( theRef , new net . violet . db . cache . CacheReference < K , T > ( theRef , theRecord , this . mReferenceQueue ) ) ; this . mLinkedMap . put ( theRef , theRecord ) ; }", "answer": "org . junit . Assert . assertNotNull ( theResult )"}
{"focal": "getServerName ( ) { return serverName ; }", "testMethod": "connectWithDefaultHostAndPort ( ) { org . junit . Assume . assumeThat ( dbConfig . getPortNumber ( ) , org . hamcrest . CoreMatchers . is ( 3306 ) ) ; org . junit . Assume . assumeThat ( dbConfig . getServerName ( ) , org . hamcrest . CoreMatchers . is ( \"localhost\" ) ) ; \"<AssertPlaceHolder>\" ; java . util . Properties props = new java . util . Properties ( ) ; props . setProperty ( DataSourceFactory . JDBC_DATABASE_NAME , dbConfig . getDatabaseName ( ) ) ; props . setProperty ( DataSourceFactory . JDBC_USER , dbConfig . getUser ( ) ) ; props . setProperty ( DataSourceFactory . JDBC_PASSWORD , dbConfig . getPassword ( ) ) ; dsf . createDataSource ( props ) . getConnection ( ) . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( dsf )", "total": "connectWithDefaultHostAndPort ( ) { org . junit . Assume . assumeThat ( dbConfig . getPortNumber ( ) , org . hamcrest . CoreMatchers . is ( 3306 ) ) ; org . junit . Assume . assumeThat ( dbConfig . getServerName ( ) , org . hamcrest . CoreMatchers . is ( \"localhost\" ) ) ; \"<AssertPlaceHolder>\" ; java . util . Properties props = new java . util . Properties ( ) ; props . setProperty ( DataSourceFactory . JDBC_DATABASE_NAME , dbConfig . getDatabaseName ( ) ) ; props . setProperty ( DataSourceFactory . JDBC_USER , dbConfig . getUser ( ) ) ; props . setProperty ( DataSourceFactory . JDBC_PASSWORD , dbConfig . getPassword ( ) ) ; dsf . createDataSource ( props ) . getConnection ( ) . close ( ) ; } getServerName ( ) { return serverName ; }", "answer": "org . junit . Assert . assertNotNull ( dsf )"}
{"focal": "getAllFlows ( ) { return summaries . values ( ) . stream ( ) . flatMap ( ( cs ) -> cs . getMethodSummaries ( ) . getAllFlows ( ) . stream ( ) ) . collect ( java . util . stream . Collectors . toSet ( ) ) ; }", "testMethod": "gapTest4 ( ) { soot . jimple . infoflow . methodSummary . generator . SummaryGenerator generator = new soot . jimple . infoflow . methodSummary . generator . SummaryGeneratorFactory ( ) . initSummaryGenerator ( ) ; soot . jimple . infoflow . methodSummary . data . summary . ClassSummaries summaries = generator . createMethodSummaries ( libPath , java . util . Collections . singleton ( \"java.util.concurrent.ConcurrentHashMap$Values\" ) ) ; java . util . Set < soot . jimple . infoflow . methodSummary . data . summary . MethodFlow > flow = summaries . getAllFlows ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( flow )", "total": "gapTest4 ( ) { soot . jimple . infoflow . methodSummary . generator . SummaryGenerator generator = new soot . jimple . infoflow . methodSummary . generator . SummaryGeneratorFactory ( ) . initSummaryGenerator ( ) ; soot . jimple . infoflow . methodSummary . data . summary . ClassSummaries summaries = generator . createMethodSummaries ( libPath , java . util . Collections . singleton ( \"java.util.concurrent.ConcurrentHashMap$Values\" ) ) ; java . util . Set < soot . jimple . infoflow . methodSummary . data . summary . MethodFlow > flow = summaries . getAllFlows ( ) ; \"<AssertPlaceHolder>\" ; } getAllFlows ( ) { return summaries . values ( ) . stream ( ) . flatMap ( ( cs ) -> cs . getMethodSummaries ( ) . getAllFlows ( ) . stream ( ) ) . collect ( java . util . stream . Collectors . toSet ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( flow )"}
{"focal": "addFeature ( de . devsurf . injection . guice . scanner . features . ScannerFeature ) { _collector . addScannerFeature ( listener ) ; }", "testMethod": "createDynamicModule ( ) { de . devsurf . injection . guice . scanner . StartupModule startup = de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . asm . ASMClasspathScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( de . devsurf . injection . guice . test . configuration . file . values . ValueFileConfigTests . class ) ) ; startup . addFeature ( de . devsurf . injection . guice . configuration . features . ConfigurationFeature . class ) ; com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( startup ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( injector )", "total": "createDynamicModule ( ) { de . devsurf . injection . guice . scanner . StartupModule startup = de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . asm . ASMClasspathScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( de . devsurf . injection . guice . test . configuration . file . values . ValueFileConfigTests . class ) ) ; startup . addFeature ( de . devsurf . injection . guice . configuration . features . ConfigurationFeature . class ) ; com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( startup ) ; \"<AssertPlaceHolder>\" ; } addFeature ( de . devsurf . injection . guice . scanner . features . ScannerFeature ) { _collector . addScannerFeature ( listener ) ; }", "answer": "org . junit . Assert . assertNotNull ( injector )"}
{"focal": "loadPrivateKeyFromPEMString ( java . lang . String ) { return com . emc . storageos . security . helpers . SecurityUtil . securityService . loadPrivateKeyFromPEMString ( pemKey ) ; }", "testMethod": "loadPrivateKeyFromPCKS1PEMString ( ) { java . lang . String pemedPrivKey = \"-----BEGIN<sp>RSA<sp>PRIVATE<sp>KEY-----\\n\" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 1 + \"twUEfW4EzXPtfbDOr3kgMV3I/8sKXnk3aVuuaUwAgHdBRJG0LTxnPzZr10kSQRIk\\n\" ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 4 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" ) + \"ZKv/my3n54BJr4EDCwtPmCX7kN1YriEDhnCEro8KCjCd0rDSQlv5ih9cSBvq8Xqe\\n\" ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 9 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 0 ) + \"HZQJI2YC1lWuo9GqGvqz3yPcXAJ2GVRSx7w7P2OzSBzr0IfPXniWCf+fgqFdVKzg\\n\" ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 3 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 2 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 5 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 8 ) + \"njx6MGnvaUbM/lajLd7qn7X7neGWGbDQcil+qCN3NP59MAfBYbpGc8ecfLc8OPmq\\n\" ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 2 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 7 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 0 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 7 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 5 ) + \"JFl8dDOgWJoQIZNo2iSuOwKBgCftL/3Vcnez5VQIWzobOA+d+hPGtl9qEegMAEBd\\n\" ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 6 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 1 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 4 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 6 ) + \"YTN3JGBvqy4Z/i1/FoBBiLNA/oqCgYBFFViDDwkGsk/kvhp/7tBe\\n\" ) + \"-----END<sp>RSA<sp>PRIVATE<sp>KEY-----\\n\" ) ; if ( buildType . equals ( \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 3 ) ) { exception . expect ( com . emc . storageos . security . helpers . Exception . class ) ; } byte [ ] privKeyBytes = com . emc . storageos . security . helpers . SecurityUtil . loadPrivateKeyFromPEMString ( pemedPrivKey ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( privKeyBytes )", "total": "loadPrivateKeyFromPCKS1PEMString ( ) { java . lang . String pemedPrivKey = \"-----BEGIN<sp>RSA<sp>PRIVATE<sp>KEY-----\\n\" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 1 + \"twUEfW4EzXPtfbDOr3kgMV3I/8sKXnk3aVuuaUwAgHdBRJG0LTxnPzZr10kSQRIk\\n\" ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 4 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" ) + \"ZKv/my3n54BJr4EDCwtPmCX7kN1YriEDhnCEro8KCjCd0rDSQlv5ih9cSBvq8Xqe\\n\" ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 9 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 0 ) + \"HZQJI2YC1lWuo9GqGvqz3yPcXAJ2GVRSx7w7P2OzSBzr0IfPXniWCf+fgqFdVKzg\\n\" ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 3 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 2 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 5 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 8 ) + \"njx6MGnvaUbM/lajLd7qn7X7neGWGbDQcil+qCN3NP59MAfBYbpGc8ecfLc8OPmq\\n\" ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 2 ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 7 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 0 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 7 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 5 ) + \"JFl8dDOgWJoQIZNo2iSuOwKBgCftL/3Vcnez5VQIWzobOA+d+hPGtl9qEegMAEBd\\n\" ) + \"j5bh7vjZiW0Pa/5RWqsWOXl/mp9fIZmTfcTmHPFasLpFpxvkw4mSJm3s8rstAKfF\\n\" 6 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 1 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 4 ) + \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 6 ) + \"YTN3JGBvqy4Z/i1/FoBBiLNA/oqCgYBFFViDDwkGsk/kvhp/7tBe\\n\" ) + \"-----END<sp>RSA<sp>PRIVATE<sp>KEY-----\\n\" ) ; if ( buildType . equals ( \"NlEo4IPwwuRQVRvZXytKn++Pnpndf74r1BoqsypM4aMilbw6bq10sv8CgYEA8Wl0\\n\" 3 ) ) { exception . expect ( com . emc . storageos . security . helpers . Exception . class ) ; } byte [ ] privKeyBytes = com . emc . storageos . security . helpers . SecurityUtil . loadPrivateKeyFromPEMString ( pemedPrivKey ) ; \"<AssertPlaceHolder>\" ; } loadPrivateKeyFromPEMString ( java . lang . String ) { return com . emc . storageos . security . helpers . SecurityUtil . securityService . loadPrivateKeyFromPEMString ( pemKey ) ; }", "answer": "org . junit . Assert . assertNotNull ( privKeyBytes )"}
{"focal": "getResultType ( ) { return resultType ; }", "testMethod": "resultTypeIsDefined ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( name , expression . getResultType ( ) )", "total": "resultTypeIsDefined ( ) { \"<AssertPlaceHolder>\" ; } getResultType ( ) { return resultType ; }", "answer": "org . junit . Assert . assertNotNull ( name , expression . getResultType ( ) )"}
{"focal": "getFirstMapping ( ) { return firstSolution . isEmpty ( ) ? null : firstSolution ; }", "testMethod": "testSet_MolHandler_MolHandler ( ) { org . openscience . cdk . smiles . SmilesParser sp = new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ) ; org . openscience . cdk . interfaces . IAtomContainer target1 = sp . parseSmiles ( \"C\\\\C=C/Nc1cccc(c1)N(O)\\\\C=C\\\\C\\\\C=C\\\\C=C/C\" ) ; org . openscience . cdk . interfaces . IAtomContainer queryac = sp . parseSmiles ( \"Nc1ccccc1\" ) ; org . openscience . cdk . smsd . tools . MolHandler source = new org . openscience . cdk . smsd . tools . MolHandler ( queryac , true , true ) ; org . openscience . cdk . smsd . tools . MolHandler target = new org . openscience . cdk . smsd . tools . MolHandler ( target1 , true , true ) ; org . openscience . cdk . smsd . algorithm . mcsplus . MCSPlusHandler instance = new org . openscience . cdk . smsd . algorithm . mcsplus . MCSPlusHandler ( ) ; instance . set ( source , target ) ; instance . searchMCS ( true ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance . getFirstMapping ( ) )", "total": "testSet_MolHandler_MolHandler ( ) { org . openscience . cdk . smiles . SmilesParser sp = new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ) ; org . openscience . cdk . interfaces . IAtomContainer target1 = sp . parseSmiles ( \"C\\\\C=C/Nc1cccc(c1)N(O)\\\\C=C\\\\C\\\\C=C\\\\C=C/C\" ) ; org . openscience . cdk . interfaces . IAtomContainer queryac = sp . parseSmiles ( \"Nc1ccccc1\" ) ; org . openscience . cdk . smsd . tools . MolHandler source = new org . openscience . cdk . smsd . tools . MolHandler ( queryac , true , true ) ; org . openscience . cdk . smsd . tools . MolHandler target = new org . openscience . cdk . smsd . tools . MolHandler ( target1 , true , true ) ; org . openscience . cdk . smsd . algorithm . mcsplus . MCSPlusHandler instance = new org . openscience . cdk . smsd . algorithm . mcsplus . MCSPlusHandler ( ) ; instance . set ( source , target ) ; instance . searchMCS ( true ) ; \"<AssertPlaceHolder>\" ; } getFirstMapping ( ) { return firstSolution . isEmpty ( ) ? null : firstSolution ; }", "answer": "org . junit . Assert . assertNotNull ( instance . getFirstMapping ( ) )"}
{"focal": "find ( java . lang . Class , java . lang . String ) { java . lang . String propertyName = path . substring ( ( ( path . lastIndexOf ( \"/\" ) ) + 1 ) ) ; java . io . File file = new java . io . File ( ( ( translationsDir ) + propertyName ) ) ; if ( file . exists ( ) ) { return new org . apache . wicket . util . resource . FileResourceStream ( file ) ; } else { return null ; } }", "testMethod": "shouldFind ( ) { net . rrm . ehour . domain . User user = importDao . find ( 3 , net . rrm . ehour . domain . User . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( user )", "total": "shouldFind ( ) { net . rrm . ehour . domain . User user = importDao . find ( 3 , net . rrm . ehour . domain . User . class ) ; \"<AssertPlaceHolder>\" ; } find ( java . lang . Class , java . lang . String ) { java . lang . String propertyName = path . substring ( ( ( path . lastIndexOf ( \"/\" ) ) + 1 ) ) ; java . io . File file = new java . io . File ( ( ( translationsDir ) + propertyName ) ) ; if ( file . exists ( ) ) { return new org . apache . wicket . util . resource . FileResourceStream ( file ) ; } else { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( user )"}
{"focal": "setSecurityManager ( ddf . security . service . SecurityManager ) { ddf . security . pep . interceptor . PEPAuthorizingInterceptor . LOGGER . trace ( \"Setting<sp>the<sp>security<sp>manager\" ) ; this . securityManager = securityManager ; }", "testMethod": "testMessageWithNoAction ( ) { ddf . security . service . SecurityManager mockSecurityManager = mock ( ddf . security . service . SecurityManager . class ) ; interceptor . setSecurityManager ( mockSecurityManager ) ; org . apache . cxf . message . Message messageWithoutAction = mock ( org . apache . cxf . message . Message . class ) ; org . apache . cxf . ws . security . tokenstore . SecurityToken mockSecurityToken = mock ( org . apache . cxf . ws . security . tokenstore . SecurityToken . class ) ; ddf . security . Subject mockSubject = mock ( ddf . security . Subject . class ) ; \"<AssertPlaceHolder>\" ; when ( mockSecurityAssertion . getSecurityToken ( ) ) . thenReturn ( mockSecurityToken ) ; when ( mockSecurityToken . getToken ( ) ) . thenReturn ( null ) ; when ( mockSecurityManager . getSubject ( mockSecurityToken ) ) . thenReturn ( mockSubject ) ; org . apache . cxf . message . Exchange mockExchange = mock ( org . apache . cxf . message . Exchange . class ) ; org . apache . cxf . service . model . BindingOperationInfo mockBOI = mock ( org . apache . cxf . service . model . BindingOperationInfo . class ) ; when ( messageWithoutAction . getExchange ( ) ) . thenReturn ( mockExchange ) ; when ( mockExchange . get ( org . apache . cxf . service . model . BindingOperationInfo . class ) ) . thenReturn ( mockBOI ) ; when ( mockBOI . getExtensor ( org . apache . cxf . binding . soap . model . SoapOperationInfo . class ) ) . thenReturn ( null ) ; when ( mockSubject . isPermitted ( isA ( ddf . security . permission . CollectionPermission . class ) ) ) . thenReturn ( false ) ; interceptor . handleMessage ( messageWithoutAction ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( mockSecurityAssertion )", "total": "testMessageWithNoAction ( ) { ddf . security . service . SecurityManager mockSecurityManager = mock ( ddf . security . service . SecurityManager . class ) ; interceptor . setSecurityManager ( mockSecurityManager ) ; org . apache . cxf . message . Message messageWithoutAction = mock ( org . apache . cxf . message . Message . class ) ; org . apache . cxf . ws . security . tokenstore . SecurityToken mockSecurityToken = mock ( org . apache . cxf . ws . security . tokenstore . SecurityToken . class ) ; ddf . security . Subject mockSubject = mock ( ddf . security . Subject . class ) ; \"<AssertPlaceHolder>\" ; when ( mockSecurityAssertion . getSecurityToken ( ) ) . thenReturn ( mockSecurityToken ) ; when ( mockSecurityToken . getToken ( ) ) . thenReturn ( null ) ; when ( mockSecurityManager . getSubject ( mockSecurityToken ) ) . thenReturn ( mockSubject ) ; org . apache . cxf . message . Exchange mockExchange = mock ( org . apache . cxf . message . Exchange . class ) ; org . apache . cxf . service . model . BindingOperationInfo mockBOI = mock ( org . apache . cxf . service . model . BindingOperationInfo . class ) ; when ( messageWithoutAction . getExchange ( ) ) . thenReturn ( mockExchange ) ; when ( mockExchange . get ( org . apache . cxf . service . model . BindingOperationInfo . class ) ) . thenReturn ( mockBOI ) ; when ( mockBOI . getExtensor ( org . apache . cxf . binding . soap . model . SoapOperationInfo . class ) ) . thenReturn ( null ) ; when ( mockSubject . isPermitted ( isA ( ddf . security . permission . CollectionPermission . class ) ) ) . thenReturn ( false ) ; interceptor . handleMessage ( messageWithoutAction ) ; } setSecurityManager ( ddf . security . service . SecurityManager ) { ddf . security . pep . interceptor . PEPAuthorizingInterceptor . LOGGER . trace ( \"Setting<sp>the<sp>security<sp>manager\" ) ; this . securityManager = securityManager ; }", "answer": "org . junit . Assert . assertNotNull ( mockSecurityAssertion )"}
{"focal": "load ( org . uberfire . backend . vfs . Path ) { try { final java . lang . String content = ioService . readAllString ( org . uberfire . backend . server . util . Paths . convert ( path ) ) ; return ( ( org . drools . workbench . models . guided . template . shared . TemplateModel ) ( org . drools . workbench . models . guided . template . backend . RuleTemplateModelXMLPersistenceImpl . getInstance ( ) . unmarshal ( content ) ) ) ; } catch ( java . lang . Exception e ) { throw org . guvnor . common . services . backend . exceptions . ExceptionUtilities . handleException ( e ) ; } }", "testMethod": "checkLoad ( ) { final org . uberfire . backend . vfs . Path path = mock ( org . uberfire . backend . vfs . Path . class ) ; when ( path . toURI ( ) ) . thenReturn ( ( \"default://project/src/main/resources/mypackage/dtable.\" + ( dtGraphResourceType . getSuffix ( ) ) ) ) ; when ( ioService . readAllString ( any ( org . uberfire . backend . vfs . Path . class ) ) ) . thenReturn ( \"\" ) ; final org . drools . workbench . screens . guided . dtable . model . GuidedDecisionTableEditorGraphModel model = service . load ( path ) ; verify ( ioService , times ( 1 ) ) . readAllString ( any ( org . uberfire . backend . vfs . Path . class ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( model )", "total": "checkLoad ( ) { final org . uberfire . backend . vfs . Path path = mock ( org . uberfire . backend . vfs . Path . class ) ; when ( path . toURI ( ) ) . thenReturn ( ( \"default://project/src/main/resources/mypackage/dtable.\" + ( dtGraphResourceType . getSuffix ( ) ) ) ) ; when ( ioService . readAllString ( any ( org . uberfire . backend . vfs . Path . class ) ) ) . thenReturn ( \"\" ) ; final org . drools . workbench . screens . guided . dtable . model . GuidedDecisionTableEditorGraphModel model = service . load ( path ) ; verify ( ioService , times ( 1 ) ) . readAllString ( any ( org . uberfire . backend . vfs . Path . class ) ) ; \"<AssertPlaceHolder>\" ; } load ( org . uberfire . backend . vfs . Path ) { try { final java . lang . String content = ioService . readAllString ( org . uberfire . backend . server . util . Paths . convert ( path ) ) ; return ( ( org . drools . workbench . models . guided . template . shared . TemplateModel ) ( org . drools . workbench . models . guided . template . backend . RuleTemplateModelXMLPersistenceImpl . getInstance ( ) . unmarshal ( content ) ) ) ; } catch ( java . lang . Exception e ) { throw org . guvnor . common . services . backend . exceptions . ExceptionUtilities . handleException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( model )"}
{"focal": "getValueProvider ( ) { return valueProvider ; }", "testMethod": "shouldAddValueProvider ( ) { org . databaseliner . manipulation . UpdateFieldManipulation manipulation = ( ( org . databaseliner . manipulation . UpdateFieldManipulation ) ( parser . parse ( getNode ( \"manipulation\" , org . databaseliner . manipulation . parser . UpdateFieldManipulationParserTest . RENAME_TABLE_XML ) ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( manipulation . getValueProvider ( ) )", "total": "shouldAddValueProvider ( ) { org . databaseliner . manipulation . UpdateFieldManipulation manipulation = ( ( org . databaseliner . manipulation . UpdateFieldManipulation ) ( parser . parse ( getNode ( \"manipulation\" , org . databaseliner . manipulation . parser . UpdateFieldManipulationParserTest . RENAME_TABLE_XML ) ) ) ) ; \"<AssertPlaceHolder>\" ; } getValueProvider ( ) { return valueProvider ; }", "answer": "org . junit . Assert . assertNotNull ( manipulation . getValueProvider ( ) )"}
{"focal": "getOutage ( java . lang . String ) { getReadLock ( ) . lock ( ) ; try { return getObject ( ) . getOutage ( name ) ; } finally { getReadLock ( ) . unlock ( ) ; } }", "testMethod": "testGetOutage ( ) { org . opennms . web . outage . Outage outage = m_daoOutageRepo . getOutage ( 1 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( outage )", "total": "testGetOutage ( ) { org . opennms . web . outage . Outage outage = m_daoOutageRepo . getOutage ( 1 ) ; \"<AssertPlaceHolder>\" ; } getOutage ( java . lang . String ) { getReadLock ( ) . lock ( ) ; try { return getObject ( ) . getOutage ( name ) ; } finally { getReadLock ( ) . unlock ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( outage )"}
{"focal": "getAdapter ( java . lang . Object ) { return org . eclipse . ui . tests . adaptable . TestAdaptableWorkbenchAdapter . getInstance ( ) ; }", "testMethod": "testGetAdapterWithCellToolTipAdapter ( ) { java . lang . Object adapter = table . getAdapter ( org . eclipse . swt . internal . widgets . ICellToolTipAdapter . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( adapter )", "total": "testGetAdapterWithCellToolTipAdapter ( ) { java . lang . Object adapter = table . getAdapter ( org . eclipse . swt . internal . widgets . ICellToolTipAdapter . class ) ; \"<AssertPlaceHolder>\" ; } getAdapter ( java . lang . Object ) { return org . eclipse . ui . tests . adaptable . TestAdaptableWorkbenchAdapter . getInstance ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( adapter )"}
{"focal": "getOverLaps ( org . openscience . cdk . isomorphism . matchers . IQueryAtomContainer , org . openscience . cdk . interfaces . IAtomContainer ) { java . util . List < java . util . Map < org . openscience . cdk . interfaces . IAtom , org . openscience . cdk . interfaces . IAtom > > mappings = new java . util . ArrayList ( ) ; this . source = source ; this . target = target ; if ( ( ( source . getAtomCount ( ) ) == 1 ) || ( ( ( source . getAtomCount ( ) ) > 0 ) && ( ( source . getBondCount ( ) ) == 0 ) ) ) { setSourceSingleAtomMap ( mappings ) ; } if ( ( ( target . getAtomCount ( ) ) == 1 ) || ( ( ( target . getAtomCount ( ) ) > 0 ) && ( ( target . getBondCount ( ) ) == 0 ) ) ) { setTargetSingleAtomMap ( mappings ) ; } return postFilter ( mappings ) ; }", "testMethod": "testGetOverLaps ( ) { org . openscience . cdk . interfaces . IAtom atomSource = new org . openscience . cdk . Atom ( \"R\" ) ; org . openscience . cdk . interfaces . IAtom atomTarget = new org . openscience . cdk . Atom ( \"R\" ) ; org . openscience . cdk . interfaces . IAtomContainer source = new org . openscience . cdk . AtomContainer ( ) ; source . addAtom ( atomSource ) ; org . openscience . cdk . interfaces . IAtomContainer target = new org . openscience . cdk . AtomContainer ( ) ; target . addAtom ( atomTarget ) ; org . openscience . smsd . algorithm . single . SingleMapping instance = new org . openscience . smsd . algorithm . single . SingleMapping ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance . getOverLaps ( source , target ) )", "total": "testGetOverLaps ( ) { org . openscience . cdk . interfaces . IAtom atomSource = new org . openscience . cdk . Atom ( \"R\" ) ; org . openscience . cdk . interfaces . IAtom atomTarget = new org . openscience . cdk . Atom ( \"R\" ) ; org . openscience . cdk . interfaces . IAtomContainer source = new org . openscience . cdk . AtomContainer ( ) ; source . addAtom ( atomSource ) ; org . openscience . cdk . interfaces . IAtomContainer target = new org . openscience . cdk . AtomContainer ( ) ; target . addAtom ( atomTarget ) ; org . openscience . smsd . algorithm . single . SingleMapping instance = new org . openscience . smsd . algorithm . single . SingleMapping ( ) ; \"<AssertPlaceHolder>\" ; } getOverLaps ( org . openscience . cdk . isomorphism . matchers . IQueryAtomContainer , org . openscience . cdk . interfaces . IAtomContainer ) { java . util . List < java . util . Map < org . openscience . cdk . interfaces . IAtom , org . openscience . cdk . interfaces . IAtom > > mappings = new java . util . ArrayList ( ) ; this . source = source ; this . target = target ; if ( ( ( source . getAtomCount ( ) ) == 1 ) || ( ( ( source . getAtomCount ( ) ) > 0 ) && ( ( source . getBondCount ( ) ) == 0 ) ) ) { setSourceSingleAtomMap ( mappings ) ; } if ( ( ( target . getAtomCount ( ) ) == 1 ) || ( ( ( target . getAtomCount ( ) ) > 0 ) && ( ( target . getBondCount ( ) ) == 0 ) ) ) { setTargetSingleAtomMap ( mappings ) ; } return postFilter ( mappings ) ; }", "answer": "org . junit . Assert . assertNotNull ( instance . getOverLaps ( source , target ) )"}
{"focal": "getLogger ( ) { return nodeEngine . getLogger ( getClass ( ) ) ; }", "testMethod": "when_init_then_loggerAvailable ( ) { final com . hazelcast . logging . ILogger logger = p . getLogger ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( logger )", "total": "when_init_then_loggerAvailable ( ) { final com . hazelcast . logging . ILogger logger = p . getLogger ( ) ; \"<AssertPlaceHolder>\" ; } getLogger ( ) { return nodeEngine . getLogger ( getClass ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( logger )"}
{"focal": "getTransactionTokenInfo ( org . springframework . web . method . HandlerMethod ) { java . lang . reflect . Method method = handlerMethod . getMethod ( ) ; org . terasoluna . gfw . web . token . transaction . TransactionTokenInfo info = tokenInfoCache . get ( method ) ; if ( info == null ) { synchronized ( tokenInfoCache ) { info = tokenInfoCache . get ( method ) ; if ( info == null ) { info = createTransactionTokenInfo ( handlerMethod ) ; tokenInfoCache . put ( method , info ) ; } } } return info ; }", "testMethod": "testGetTransactionTokenInfo ( ) { org . springframework . web . method . HandlerMethod handlerMethod = new org . springframework . web . method . HandlerMethod ( new org . terasoluna . gfw . web . token . transaction . TransactionTokenSampleController ( ) , org . terasoluna . gfw . web . token . transaction . TransactionTokenSampleController . class . getDeclaredMethod ( \"first\" , org . terasoluna . gfw . web . token . transaction . SampleForm . class , org . springframework . ui . Model . class ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( store . getTransactionTokenInfo ( handlerMethod ) )", "total": "testGetTransactionTokenInfo ( ) { org . springframework . web . method . HandlerMethod handlerMethod = new org . springframework . web . method . HandlerMethod ( new org . terasoluna . gfw . web . token . transaction . TransactionTokenSampleController ( ) , org . terasoluna . gfw . web . token . transaction . TransactionTokenSampleController . class . getDeclaredMethod ( \"first\" , org . terasoluna . gfw . web . token . transaction . SampleForm . class , org . springframework . ui . Model . class ) ) ; \"<AssertPlaceHolder>\" ; } getTransactionTokenInfo ( org . springframework . web . method . HandlerMethod ) { java . lang . reflect . Method method = handlerMethod . getMethod ( ) ; org . terasoluna . gfw . web . token . transaction . TransactionTokenInfo info = tokenInfoCache . get ( method ) ; if ( info == null ) { synchronized ( tokenInfoCache ) { info = tokenInfoCache . get ( method ) ; if ( info == null ) { info = createTransactionTokenInfo ( handlerMethod ) ; tokenInfoCache . put ( method , info ) ; } } } return info ; }", "answer": "org . junit . Assert . assertNotNull ( store . getTransactionTokenInfo ( handlerMethod ) )"}
{"focal": "verifyToken ( java . lang . String ) { java . util . Objects . requireNonNull ( token ) ; com . auth0 . jwt . algorithms . Algorithm algorithm = getAlgorithm ( ) ; if ( algorithm == null ) { org . nuxeo . ecm . jwt . JWTServiceImpl . log . debug ( \"secret<sp>not<sp>configured,<sp>cannot<sp>verify<sp>token\" ) ; return null ; } com . auth0 . jwt . JWTVerifier verifier = com . auth0 . jwt . JWT . require ( algorithm ) . withIssuer ( org . nuxeo . ecm . jwt . JWTServiceImpl . NUXEO_ISSUER ) . build ( ) ; com . auth0 . jwt . interfaces . DecodedJWT jwt ; try { jwt = verifier . verify ( token ) ; } catch ( com . auth0 . jwt . exceptions . JWTVerificationException e ) { if ( org . nuxeo . ecm . jwt . JWTServiceImpl . log . isTraceEnabled ( ) ) { org . nuxeo . ecm . jwt . JWTServiceImpl . log . trace ( ( \"token<sp>verification<sp>failed:<sp>\" + ( e . toString ( ) ) ) ) ; } return null ; } java . lang . Object payload = org . nuxeo . ecm . jwt . JWTServiceImpl . getFieldValue ( jwt , \"payload\" ) ; java . util . Map < java . lang . String , com . fasterxml . jackson . databind . JsonNode > tree = org . nuxeo . ecm . jwt . JWTServiceImpl . getFieldValue ( payload , \"tree\" ) ; return tree . entrySet ( ) . stream ( ) . collect ( java . util . stream . Collectors . toMap ( Entry :: getKey , ( e ) -> nodeToValue ( e . getValue ( ) ) ) ) ; }", "testMethod": "testManualTokenCreation ( ) { java . lang . String token = com . auth0 . jwt . JWT . create ( ) . withIssuer ( org . nuxeo . ecm . jwt . JWTServiceImpl . NUXEO_ISSUER ) . withSubject ( org . nuxeo . ecm . jwt . TestJWTService . USERNAME ) . sign ( com . auth0 . jwt . algorithms . Algorithm . HMAC512 ( org . nuxeo . ecm . jwt . TestJWTService . SECRET ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( service . verifyToken ( token ) )", "total": "testManualTokenCreation ( ) { java . lang . String token = com . auth0 . jwt . JWT . create ( ) . withIssuer ( org . nuxeo . ecm . jwt . JWTServiceImpl . NUXEO_ISSUER ) . withSubject ( org . nuxeo . ecm . jwt . TestJWTService . USERNAME ) . sign ( com . auth0 . jwt . algorithms . Algorithm . HMAC512 ( org . nuxeo . ecm . jwt . TestJWTService . SECRET ) ) ; \"<AssertPlaceHolder>\" ; } verifyToken ( java . lang . String ) { java . util . Objects . requireNonNull ( token ) ; com . auth0 . jwt . algorithms . Algorithm algorithm = getAlgorithm ( ) ; if ( algorithm == null ) { org . nuxeo . ecm . jwt . JWTServiceImpl . log . debug ( \"secret<sp>not<sp>configured,<sp>cannot<sp>verify<sp>token\" ) ; return null ; } com . auth0 . jwt . JWTVerifier verifier = com . auth0 . jwt . JWT . require ( algorithm ) . withIssuer ( org . nuxeo . ecm . jwt . JWTServiceImpl . NUXEO_ISSUER ) . build ( ) ; com . auth0 . jwt . interfaces . DecodedJWT jwt ; try { jwt = verifier . verify ( token ) ; } catch ( com . auth0 . jwt . exceptions . JWTVerificationException e ) { if ( org . nuxeo . ecm . jwt . JWTServiceImpl . log . isTraceEnabled ( ) ) { org . nuxeo . ecm . jwt . JWTServiceImpl . log . trace ( ( \"token<sp>verification<sp>failed:<sp>\" + ( e . toString ( ) ) ) ) ; } return null ; } java . lang . Object payload = org . nuxeo . ecm . jwt . JWTServiceImpl . getFieldValue ( jwt , \"payload\" ) ; java . util . Map < java . lang . String , com . fasterxml . jackson . databind . JsonNode > tree = org . nuxeo . ecm . jwt . JWTServiceImpl . getFieldValue ( payload , \"tree\" ) ; return tree . entrySet ( ) . stream ( ) . collect ( java . util . stream . Collectors . toMap ( Entry :: getKey , ( e ) -> nodeToValue ( e . getValue ( ) ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( service . verifyToken ( token ) )"}
{"focal": "getEmail ( ) { return email ; }", "testMethod": "testRecipientEmail ( ) { com . smartsheet . api . models . RecipientEmail recipient = new com . smartsheet . api . models . RecipientEmail ( ) ; recipient . setEmail ( \"johndoe@smartsheet.com\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( recipient . getEmail ( ) )", "total": "testRecipientEmail ( ) { com . smartsheet . api . models . RecipientEmail recipient = new com . smartsheet . api . models . RecipientEmail ( ) ; recipient . setEmail ( \"johndoe@smartsheet.com\" ) ; \"<AssertPlaceHolder>\" ; } getEmail ( ) { return email ; }", "answer": "org . junit . Assert . assertNotNull ( recipient . getEmail ( ) )"}
{"focal": "createJobScheduleRequest ( ) { return new org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . JobScheduleRequest ( ) ; }", "testMethod": "testCreateJobScheduleRequest ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( factory . createJobScheduleRequest ( ) )", "total": "testCreateJobScheduleRequest ( ) { \"<AssertPlaceHolder>\" ; } createJobScheduleRequest ( ) { return new org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . JobScheduleRequest ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( factory . createJobScheduleRequest ( ) )"}
{"focal": "run ( org . nuxeo . ecm . automation . OperationContext , java . net . URL ) { java . lang . String key = script . toExternalForm ( ) ; org . nuxeo . ecm . automation . core . scripting . Scripting . Script cs = org . nuxeo . ecm . automation . core . scripting . Scripting . cache . get ( key ) ; if ( cs != null ) { cs . eval ( ctx ) ; return ; } java . lang . String path = script . getPath ( ) ; int p = path . lastIndexOf ( '.' ) ; if ( p == ( - 1 ) ) { throw new org . nuxeo . ecm . automation . OperationException ( ( \"Script<sp>files<sp>must<sp>have<sp>an<sp>extension:<sp>\" + script ) ) ; } java . lang . String ext = path . substring ( ( p + 1 ) ) . toLowerCase ( ) ; if ( \"mvel\" . equals ( ext ) ) { java . io . InputStream in = script . openStream ( ) ; try { java . io . Serializable c = org . mvel2 . MVEL . compileExpression ( org . nuxeo . common . utils . FileUtils . read ( in ) ) ; cs = new org . nuxeo . ecm . automation . core . scripting . Scripting . MvelScript ( c ) ; } finally { in . close ( ) ; } } else if ( \"groovy\" . equals ( ext ) ) { } else { throw new org . nuxeo . ecm . automation . OperationException ( ( ( \"Unsupported<sp>script<sp>file:<sp>\" + script ) + \".<sp>Only<sp>mvel<sp>and<sp>groovy<sp>scripts<sp>are<sp>supported\" ) ) ; } org . nuxeo . ecm . automation . core . scripting . Scripting . cache . put ( key , cs ) ; cs . eval ( ctx ) ; }", "testMethod": "testExecutionFlowOperation ( ) { org . nuxeo . ecm . automation . OperationContext ctx = new org . nuxeo . ecm . automation . OperationContext ( session ) ; ctx . setInput ( src ) ; org . nuxeo . ecm . automation . OperationChain chain = new org . nuxeo . ecm . automation . OperationChain ( \"testChain\" ) ; chain . add ( FetchContextDocument . ID ) ; chain . add ( RunDocumentChain . ID ) . set ( \"id\" , \"contributedchain2\" ) . set ( \"parameters\" , new org . nuxeo . ecm . automation . core . util . Properties ( \"exampleKey=exampleValue\\nexampleKey2=exampleValue2\" ) ) ; org . nuxeo . ecm . core . api . DocumentModel doc = ( ( org . nuxeo . ecm . core . api . DocumentModel ) ( service . run ( ctx , chain ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( doc )", "total": "testExecutionFlowOperation ( ) { org . nuxeo . ecm . automation . OperationContext ctx = new org . nuxeo . ecm . automation . OperationContext ( session ) ; ctx . setInput ( src ) ; org . nuxeo . ecm . automation . OperationChain chain = new org . nuxeo . ecm . automation . OperationChain ( \"testChain\" ) ; chain . add ( FetchContextDocument . ID ) ; chain . add ( RunDocumentChain . ID ) . set ( \"id\" , \"contributedchain2\" ) . set ( \"parameters\" , new org . nuxeo . ecm . automation . core . util . Properties ( \"exampleKey=exampleValue\\nexampleKey2=exampleValue2\" ) ) ; org . nuxeo . ecm . core . api . DocumentModel doc = ( ( org . nuxeo . ecm . core . api . DocumentModel ) ( service . run ( ctx , chain ) ) ) ; \"<AssertPlaceHolder>\" ; } run ( org . nuxeo . ecm . automation . OperationContext , java . net . URL ) { java . lang . String key = script . toExternalForm ( ) ; org . nuxeo . ecm . automation . core . scripting . Scripting . Script cs = org . nuxeo . ecm . automation . core . scripting . Scripting . cache . get ( key ) ; if ( cs != null ) { cs . eval ( ctx ) ; return ; } java . lang . String path = script . getPath ( ) ; int p = path . lastIndexOf ( '.' ) ; if ( p == ( - 1 ) ) { throw new org . nuxeo . ecm . automation . OperationException ( ( \"Script<sp>files<sp>must<sp>have<sp>an<sp>extension:<sp>\" + script ) ) ; } java . lang . String ext = path . substring ( ( p + 1 ) ) . toLowerCase ( ) ; if ( \"mvel\" . equals ( ext ) ) { java . io . InputStream in = script . openStream ( ) ; try { java . io . Serializable c = org . mvel2 . MVEL . compileExpression ( org . nuxeo . common . utils . FileUtils . read ( in ) ) ; cs = new org . nuxeo . ecm . automation . core . scripting . Scripting . MvelScript ( c ) ; } finally { in . close ( ) ; } } else if ( \"groovy\" . equals ( ext ) ) { } else { throw new org . nuxeo . ecm . automation . OperationException ( ( ( \"Unsupported<sp>script<sp>file:<sp>\" + script ) + \".<sp>Only<sp>mvel<sp>and<sp>groovy<sp>scripts<sp>are<sp>supported\" ) ) ; } org . nuxeo . ecm . automation . core . scripting . Scripting . cache . put ( key , cs ) ; cs . eval ( ctx ) ; }", "answer": "org . junit . Assert . assertNotNull ( doc )"}
{"focal": "getValue ( int ) { return values . get ( index ) ; }", "testMethod": "shouldParseQueryWithUnqualifiedPathInSelectAndUnqualifiedLocalNameInCriteriaOfJcrSql2Query ( ) { java . lang . String sql = \"select<sp>[jcr:primaryType],<sp>[jcr:path]<sp>FROM<sp>[nt:base]<sp>WHERE<sp>[mode:localName]<sp>LIKE<sp>'%3%'\" ; javax . jcr . query . Query query = session . getWorkspace ( ) . getQueryManager ( ) . createQuery ( sql , Query . JCR_SQL2 ) ; javax . jcr . query . QueryResult result = query . execute ( ) ; validateQuery ( ) . rowCount ( 4 ) . hasColumns ( \"jcr:primaryType\" , \"jcr:path\" ) . onEachRow ( new org . modeshape . jcr . ValidateQuery . Predicate ( ) { @ org . modeshape . jcr . Override public void validate ( int rowNumber , javax . jcr . query . Row row ) throws javax . jcr . RepositoryException { \"<AssertPlaceHolder>\" ; } } ) . validate ( query , result ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( row . getValue ( \"jcr:primaryType\" ) )", "total": "shouldParseQueryWithUnqualifiedPathInSelectAndUnqualifiedLocalNameInCriteriaOfJcrSql2Query ( ) { java . lang . String sql = \"select<sp>[jcr:primaryType],<sp>[jcr:path]<sp>FROM<sp>[nt:base]<sp>WHERE<sp>[mode:localName]<sp>LIKE<sp>'%3%'\" ; javax . jcr . query . Query query = session . getWorkspace ( ) . getQueryManager ( ) . createQuery ( sql , Query . JCR_SQL2 ) ; javax . jcr . query . QueryResult result = query . execute ( ) ; validateQuery ( ) . rowCount ( 4 ) . hasColumns ( \"jcr:primaryType\" , \"jcr:path\" ) . onEachRow ( new org . modeshape . jcr . ValidateQuery . Predicate ( ) { @ org . modeshape . jcr . Override public void validate ( int rowNumber , javax . jcr . query . Row row ) throws javax . jcr . RepositoryException { \"<AssertPlaceHolder>\" ; } } ) . validate ( query , result ) ; } getValue ( int ) { return values . get ( index ) ; }", "answer": "org . junit . Assert . assertNotNull ( row . getValue ( \"jcr:primaryType\" ) )"}
{"focal": "getCallbackHandler ( ) { return new org . springframework . ldap . core . AttributesMapperCallbackHandler ( mapper ) ; }", "testMethod": "test ( ) { org . eurekastreams . server . persistence . mappers . ldap . callback . ContextMapperCallbackHandlerFactory sut = new org . eurekastreams . server . persistence . mappers . ldap . callback . ContextMapperCallbackHandlerFactory ( mapper ) ; org . springframework . ldap . core . CollectingNameClassPairCallbackHandler result = sut . getCallbackHandler ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "test ( ) { org . eurekastreams . server . persistence . mappers . ldap . callback . ContextMapperCallbackHandlerFactory sut = new org . eurekastreams . server . persistence . mappers . ldap . callback . ContextMapperCallbackHandlerFactory ( mapper ) ; org . springframework . ldap . core . CollectingNameClassPairCallbackHandler result = sut . getCallbackHandler ( ) ; \"<AssertPlaceHolder>\" ; } getCallbackHandler ( ) { return new org . springframework . ldap . core . AttributesMapperCallbackHandler ( mapper ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getFailureMessage ( ) { return failureMessage ; }", "testMethod": "testNotAndSameIncludedCriteria ( ) { org . jboss . dmr . ModelNode op = new org . jboss . dmr . ModelNode ( ) ; op . get ( Element . LOOPBACK . getLocalName ( ) ) . set ( true ) ; op . get ( Element . NOT . getLocalName ( ) , Element . LOOPBACK . getLocalName ( ) ) . set ( true ) ; org . jboss . as . controller . interfaces . ParsedInterfaceCriteria criteria = org . jboss . as . controller . interfaces . ParsedInterfaceCriteria . parse ( op , true , ExpressionResolver . TEST_RESOLVER ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( criteria . getFailureMessage ( ) )", "total": "testNotAndSameIncludedCriteria ( ) { org . jboss . dmr . ModelNode op = new org . jboss . dmr . ModelNode ( ) ; op . get ( Element . LOOPBACK . getLocalName ( ) ) . set ( true ) ; op . get ( Element . NOT . getLocalName ( ) , Element . LOOPBACK . getLocalName ( ) ) . set ( true ) ; org . jboss . as . controller . interfaces . ParsedInterfaceCriteria criteria = org . jboss . as . controller . interfaces . ParsedInterfaceCriteria . parse ( op , true , ExpressionResolver . TEST_RESOLVER ) ; \"<AssertPlaceHolder>\" ; } getFailureMessage ( ) { return failureMessage ; }", "answer": "org . junit . Assert . assertNotNull ( criteria . getFailureMessage ( ) )"}
{"focal": "getBlurConfig ( ) { return org . apache . blur . console . util . Config . blurConfig ; }", "testMethod": "testGetBlurConfig ( ) { org . apache . blur . BlurConfiguration blurConfig = org . apache . blur . console . util . Config . getBlurConfig ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( blurConfig )", "total": "testGetBlurConfig ( ) { org . apache . blur . BlurConfiguration blurConfig = org . apache . blur . console . util . Config . getBlurConfig ( ) ; \"<AssertPlaceHolder>\" ; } getBlurConfig ( ) { return org . apache . blur . console . util . Config . blurConfig ; }", "answer": "org . junit . Assert . assertNotNull ( blurConfig )"}
{"focal": "orderBy ( org . alfasoftware . morf . sql . element . AliasedFieldBuilder [ ] ) { if ( orderFields == null ) { throw new java . lang . IllegalArgumentException ( \"Fields<sp>were<sp>null<sp>in<sp>order<sp>by<sp>clause\" ) ; } return orderBy ( java . util . Arrays . asList ( orderFields ) ) ; }", "testMethod": "testConstructorWithSortedParentSelect ( ) { org . alfasoftware . morf . sql . SelectStatement parentSelect = new org . alfasoftware . morf . sql . SelectStatement ( ) . orderBy ( new org . alfasoftware . morf . sql . element . FieldReference ( \"ABC\" ) ) ; org . alfasoftware . morf . sql . SelectStatement childSelect = new org . alfasoftware . morf . sql . SelectStatement ( ) ; org . alfasoftware . morf . sql . UnionSetOperator union = new org . alfasoftware . morf . sql . UnionSetOperator ( UnionStrategy . ALL , parentSelect , childSelect ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( union )", "total": "testConstructorWithSortedParentSelect ( ) { org . alfasoftware . morf . sql . SelectStatement parentSelect = new org . alfasoftware . morf . sql . SelectStatement ( ) . orderBy ( new org . alfasoftware . morf . sql . element . FieldReference ( \"ABC\" ) ) ; org . alfasoftware . morf . sql . SelectStatement childSelect = new org . alfasoftware . morf . sql . SelectStatement ( ) ; org . alfasoftware . morf . sql . UnionSetOperator union = new org . alfasoftware . morf . sql . UnionSetOperator ( UnionStrategy . ALL , parentSelect , childSelect ) ; \"<AssertPlaceHolder>\" ; } orderBy ( org . alfasoftware . morf . sql . element . AliasedFieldBuilder [ ] ) { if ( orderFields == null ) { throw new java . lang . IllegalArgumentException ( \"Fields<sp>were<sp>null<sp>in<sp>order<sp>by<sp>clause\" ) ; } return orderBy ( java . util . Arrays . asList ( orderFields ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( union )"}
{"focal": "nested ( java . lang . String , com . liferay . portal . search . query . Query ) { return new com . liferay . portal . search . internal . query . NestedQueryImpl ( path , query ) ; }", "testMethod": "testNestedAggregation ( ) { com . liferay . portal . search . aggregation . bucket . NestedAggregation nestedAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . nested ( \"name\" , \"path\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( nestedAggregation )", "total": "testNestedAggregation ( ) { com . liferay . portal . search . aggregation . bucket . NestedAggregation nestedAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . nested ( \"name\" , \"path\" ) ; \"<AssertPlaceHolder>\" ; } nested ( java . lang . String , com . liferay . portal . search . query . Query ) { return new com . liferay . portal . search . internal . query . NestedQueryImpl ( path , query ) ; }", "answer": "org . junit . Assert . assertNotNull ( nestedAggregation )"}
{"focal": "getEnvironmentMap ( ) { return com . intellij . util . EnvironmentUtil . ourEnvironment . getValue ( ) ; }", "testMethod": "map ( ) { java . lang . System . setProperty ( \"idea.fix.mac.env\" , \"true\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . intellij . util . EnvironmentUtil . getEnvironmentMap ( ) )", "total": "map ( ) { java . lang . System . setProperty ( \"idea.fix.mac.env\" , \"true\" ) ; \"<AssertPlaceHolder>\" ; } getEnvironmentMap ( ) { return com . intellij . util . EnvironmentUtil . ourEnvironment . getValue ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( com . intellij . util . EnvironmentUtil . getEnvironmentMap ( ) )"}
{"focal": "createTemporaryTopic ( ) { try { return getSession ( ) . createTemporaryTopic ( ) ; } catch ( javax . jms . JMSException jmse ) { throw org . apache . qpid . jms . exceptions . JmsExceptionSupport . createRuntimeException ( jmse ) ; } }", "testMethod": "testDeleteOfTempTopicOnClosedConnection ( ) { connection = new org . apache . qpid . jms . JmsConnection ( connectionInfo , provider ) ; connection . start ( ) ; javax . jms . Session session = connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; javax . jms . TemporaryTopic tempTopic = session . createTemporaryTopic ( ) ; \"<AssertPlaceHolder>\" ; connection . close ( ) ; try { tempTopic . delete ( ) ; org . junit . Assert . fail ( \"Should<sp>have<sp>thrown<sp>an<sp>IllegalStateException\" ) ; } catch ( javax . jms . IllegalStateException ex ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( tempTopic )", "total": "testDeleteOfTempTopicOnClosedConnection ( ) { connection = new org . apache . qpid . jms . JmsConnection ( connectionInfo , provider ) ; connection . start ( ) ; javax . jms . Session session = connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; javax . jms . TemporaryTopic tempTopic = session . createTemporaryTopic ( ) ; \"<AssertPlaceHolder>\" ; connection . close ( ) ; try { tempTopic . delete ( ) ; org . junit . Assert . fail ( \"Should<sp>have<sp>thrown<sp>an<sp>IllegalStateException\" ) ; } catch ( javax . jms . IllegalStateException ex ) { } } createTemporaryTopic ( ) { try { return getSession ( ) . createTemporaryTopic ( ) ; } catch ( javax . jms . JMSException jmse ) { throw org . apache . qpid . jms . exceptions . JmsExceptionSupport . createRuntimeException ( jmse ) ; } }", "answer": "org . junit . Assert . assertNotNull ( tempTopic )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . SurveyTestData entity = new org . oscarehr . common . model . SurveyTestData ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . SurveyTestData entity = new org . oscarehr . common . model . SurveyTestData ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "builder ( ) { return new org . nmdp . ngs . align . GapPenalties . Builder ( ) ; }", "testMethod": "testBuilder ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . nmdp . ngs . align . GapPenalties . builder ( ) )", "total": "testBuilder ( ) { \"<AssertPlaceHolder>\" ; } builder ( ) { return new org . nmdp . ngs . align . GapPenalties . Builder ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( org . nmdp . ngs . align . GapPenalties . builder ( ) )"}
{"focal": "clusterInfo ( ) { java . lang . String info = redis . clients . jedis . tests . commands . ClusterCommandsTest . node1 . clusterInfo ( ) ; org . junit . Assert . assertNotNull ( info ) ; }", "testMethod": "clusterInfo ( ) { java . lang . String info = redis . clients . jedis . tests . commands . ClusterCommandsTest . node1 . clusterInfo ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( info )", "total": "clusterInfo ( ) { java . lang . String info = redis . clients . jedis . tests . commands . ClusterCommandsTest . node1 . clusterInfo ( ) ; \"<AssertPlaceHolder>\" ; } clusterInfo ( ) { java . lang . String info = redis . clients . jedis . tests . commands . ClusterCommandsTest . node1 . clusterInfo ( ) ; org . junit . Assert . assertNotNull ( info ) ; }", "answer": "org . junit . Assert . assertNotNull ( info )"}
{"focal": "getCurrentRunningDir ( ) { java . lang . String dir = com . att . aro . core . util . Util . getCurrentRunningDir ( ) ; org . junit . Assert . assertNotNull ( dir ) ; }", "testMethod": "getCurrentRunningDir ( ) { java . lang . String dir = com . att . aro . core . util . Util . getCurrentRunningDir ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dir )", "total": "getCurrentRunningDir ( ) { java . lang . String dir = com . att . aro . core . util . Util . getCurrentRunningDir ( ) ; \"<AssertPlaceHolder>\" ; } getCurrentRunningDir ( ) { java . lang . String dir = com . att . aro . core . util . Util . getCurrentRunningDir ( ) ; org . junit . Assert . assertNotNull ( dir ) ; }", "answer": "org . junit . Assert . assertNotNull ( dir )"}
{"focal": "resolveHostname ( java . lang . String , boolean ) { return org . opennms . netmgt . utils . DnsUtils . resolveHostname ( hostname , preferInet6Address , true ) ; }", "testMethod": "testLookup ( ) { java . net . InetAddress fb = org . opennms . netmgt . utils . DnsUtils . resolveHostname ( \"www.opennms.org\" , false ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( fb )", "total": "testLookup ( ) { java . net . InetAddress fb = org . opennms . netmgt . utils . DnsUtils . resolveHostname ( \"www.opennms.org\" , false ) ; \"<AssertPlaceHolder>\" ; } resolveHostname ( java . lang . String , boolean ) { return org . opennms . netmgt . utils . DnsUtils . resolveHostname ( hostname , preferInet6Address , true ) ; }", "answer": "org . junit . Assert . assertNotNull ( fb )"}
{"focal": "instanceForAddUser ( org . irods . jargon . core . pub . domain . User ) { if ( user == null ) { throw new org . irods . jargon . core . exception . JargonException ( \"null<sp>user\" ) ; } if ( user . getName ( ) . isEmpty ( ) ) { throw new org . irods . jargon . core . exception . JargonException ( \"blank<sp>user<sp>name\" ) ; } if ( ( user . getUserType ( ) ) == ( org . irods . jargon . core . protovalues . UserTypeEnum . RODS_UNKNOWN ) ) { throw new org . irods . jargon . core . exception . JargonException ( \"unknown<sp>user<sp>type\" ) ; } return new org . irods . jargon . core . packinstr . GeneralAdminInp ( \"add\" , \"user\" , user . getName ( ) , user . getUserType ( ) . getTextValue ( ) , \"\" , \"\" , org . irods . jargon . core . packinstr . GeneralAdminInp . BLANK , org . irods . jargon . core . packinstr . GeneralAdminInp . BLANK , org . irods . jargon . core . packinstr . GeneralAdminInp . BLANK , org . irods . jargon . core . packinstr . GeneralAdminInp . BLANK , org . irods . jargon . core . packinstr . GeneralAdminInp . GEN_ADMIN_INP_API_NBR ) ; }", "testMethod": "testAddUser ( ) { org . irods . jargon . core . pub . domain . User user = new org . irods . jargon . core . pub . domain . User ( ) ; user . setName ( \"test\" ) ; user . setUserDN ( \"dn\" ) ; user . setUserType ( UserTypeEnum . RODS_USER ) ; org . irods . jargon . core . packinstr . GeneralAdminInp pi = org . irods . jargon . core . packinstr . GeneralAdminInp . instanceForAddUser ( user ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pi )", "total": "testAddUser ( ) { org . irods . jargon . core . pub . domain . User user = new org . irods . jargon . core . pub . domain . User ( ) ; user . setName ( \"test\" ) ; user . setUserDN ( \"dn\" ) ; user . setUserType ( UserTypeEnum . RODS_USER ) ; org . irods . jargon . core . packinstr . GeneralAdminInp pi = org . irods . jargon . core . packinstr . GeneralAdminInp . instanceForAddUser ( user ) ; \"<AssertPlaceHolder>\" ; } instanceForAddUser ( org . irods . jargon . core . pub . domain . User ) { if ( user == null ) { throw new org . irods . jargon . core . exception . JargonException ( \"null<sp>user\" ) ; } if ( user . getName ( ) . isEmpty ( ) ) { throw new org . irods . jargon . core . exception . JargonException ( \"blank<sp>user<sp>name\" ) ; } if ( ( user . getUserType ( ) ) == ( org . irods . jargon . core . protovalues . UserTypeEnum . RODS_UNKNOWN ) ) { throw new org . irods . jargon . core . exception . JargonException ( \"unknown<sp>user<sp>type\" ) ; } return new org . irods . jargon . core . packinstr . GeneralAdminInp ( \"add\" , \"user\" , user . getName ( ) , user . getUserType ( ) . getTextValue ( ) , \"\" , \"\" , org . irods . jargon . core . packinstr . GeneralAdminInp . BLANK , org . irods . jargon . core . packinstr . GeneralAdminInp . BLANK , org . irods . jargon . core . packinstr . GeneralAdminInp . BLANK , org . irods . jargon . core . packinstr . GeneralAdminInp . BLANK , org . irods . jargon . core . packinstr . GeneralAdminInp . GEN_ADMIN_INP_API_NBR ) ; }", "answer": "org . junit . Assert . assertNotNull ( pi )"}
{"focal": "updateImage ( java . lang . String ) { io . fabric8 . kubernetes . api . model . apps . Deployment oldRC = get ( ) ; if ( oldRC == null ) { throw new io . fabric8 . kubernetes . client . KubernetesClientException ( \"Existing<sp>replica<sp>set<sp>doesn't<sp>exist\" ) ; } if ( ( oldRC . getSpec ( ) . getTemplate ( ) . getSpec ( ) . getContainers ( ) . size ( ) ) > 1 ) { throw new io . fabric8 . kubernetes . client . KubernetesClientException ( \"Image<sp>update<sp>is<sp>not<sp>supported<sp>for<sp>multicontainer<sp>pods\" ) ; } if ( ( oldRC . getSpec ( ) . getTemplate ( ) . getSpec ( ) . getContainers ( ) . size ( ) ) == 0 ) { throw new io . fabric8 . kubernetes . client . KubernetesClientException ( \"Pod<sp>has<sp>no<sp>containers!\" ) ; } io . fabric8 . kubernetes . api . model . Container updatedContainer = new io . fabric8 . kubernetes . api . model . ContainerBuilder ( oldRC . getSpec ( ) . getTemplate ( ) . getSpec ( ) . getContainers ( ) . iterator ( ) . next ( ) ) . withImage ( image ) . build ( ) ; io . fabric8 . kubernetes . api . model . apps . DeploymentBuilder newRCBuilder = new io . fabric8 . kubernetes . api . model . apps . DeploymentBuilder ( oldRC ) ; newRCBuilder . editMetadata ( ) . withResourceVersion ( null ) . endMetadata ( ) . editSpec ( ) . editTemplate ( ) . editSpec ( ) . withContainers ( java . util . Collections . singletonList ( updatedContainer ) ) . endSpec ( ) . endTemplate ( ) . endSpec ( ) ; return new io . fabric8 . kubernetes . client . dsl . internal . DeploymentRollingUpdater ( client , config , namespace ) . rollUpdate ( oldRC , newRCBuilder . build ( ) ) ; }", "testMethod": "testUpdate ( ) { io . fabric8 . kubernetes . api . model . apps . StatefulSet repl1 = new io . fabric8 . kubernetes . api . model . apps . StatefulSetBuilder ( ) . withNewMetadata ( ) . withName ( \"repl1\" ) . withNamespace ( \"test\" ) . endMetadata ( ) . withNewSpec ( ) . withReplicas ( 1 ) . withNewTemplate ( ) . withNewMetadata ( ) . withLabels ( new java . util . HashMap < java . lang . String , java . lang . String > ( ) ) . endMetadata ( ) . withNewSpec ( ) . addNewContainer ( ) . withImage ( \"img1\" ) . endContainer ( ) . endSpec ( ) . endTemplate ( ) . endSpec ( ) . withNewStatus ( ) . withReplicas ( 1 ) . endStatus ( ) . build ( ) ; server . expect ( ) . withPath ( \"/apis/apps/v1/namespaces/test/statefulsets/repl1\" ) . andReturn ( 200 , repl1 ) . once ( ) ; server . expect ( ) . put ( ) . withPath ( \"/apis/apps/v1/namespaces/test/statefulsets/repl1\" ) . andReturn ( 200 , repl1 ) . once ( ) ; server . expect ( ) . get ( ) . withPath ( \"/apis/apps/v1/namespaces/test/statefulsets\" ) . andReturn ( 200 , new io . fabric8 . kubernetes . api . model . apps . StatefulSetListBuilder ( ) . withItems ( repl1 ) . build ( ) ) . once ( ) ; server . expect ( ) . post ( ) . withPath ( \"/apis/apps/v1/namespaces/test/statefulsets\" ) . andReturn ( 201 , repl1 ) . once ( ) ; server . expect ( ) . withPath ( \"/apis/apps/v1/namespaces/test/pods\" ) . andReturn ( 200 , new io . fabric8 . kubernetes . api . model . KubernetesListBuilder ( ) . build ( ) ) . once ( ) ; io . fabric8 . kubernetes . client . KubernetesClient client = server . getClient ( ) ; repl1 = client . apps ( ) . statefulSets ( ) . withName ( \"repl1\" ) . rolling ( ) . withTimeout ( 5 , TimeUnit . MINUTES ) . updateImage ( \"\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( repl1 )", "total": "testUpdate ( ) { io . fabric8 . kubernetes . api . model . apps . StatefulSet repl1 = new io . fabric8 . kubernetes . api . model . apps . StatefulSetBuilder ( ) . withNewMetadata ( ) . withName ( \"repl1\" ) . withNamespace ( \"test\" ) . endMetadata ( ) . withNewSpec ( ) . withReplicas ( 1 ) . withNewTemplate ( ) . withNewMetadata ( ) . withLabels ( new java . util . HashMap < java . lang . String , java . lang . String > ( ) ) . endMetadata ( ) . withNewSpec ( ) . addNewContainer ( ) . withImage ( \"img1\" ) . endContainer ( ) . endSpec ( ) . endTemplate ( ) . endSpec ( ) . withNewStatus ( ) . withReplicas ( 1 ) . endStatus ( ) . build ( ) ; server . expect ( ) . withPath ( \"/apis/apps/v1/namespaces/test/statefulsets/repl1\" ) . andReturn ( 200 , repl1 ) . once ( ) ; server . expect ( ) . put ( ) . withPath ( \"/apis/apps/v1/namespaces/test/statefulsets/repl1\" ) . andReturn ( 200 , repl1 ) . once ( ) ; server . expect ( ) . get ( ) . withPath ( \"/apis/apps/v1/namespaces/test/statefulsets\" ) . andReturn ( 200 , new io . fabric8 . kubernetes . api . model . apps . StatefulSetListBuilder ( ) . withItems ( repl1 ) . build ( ) ) . once ( ) ; server . expect ( ) . post ( ) . withPath ( \"/apis/apps/v1/namespaces/test/statefulsets\" ) . andReturn ( 201 , repl1 ) . once ( ) ; server . expect ( ) . withPath ( \"/apis/apps/v1/namespaces/test/pods\" ) . andReturn ( 200 , new io . fabric8 . kubernetes . api . model . KubernetesListBuilder ( ) . build ( ) ) . once ( ) ; io . fabric8 . kubernetes . client . KubernetesClient client = server . getClient ( ) ; repl1 = client . apps ( ) . statefulSets ( ) . withName ( \"repl1\" ) . rolling ( ) . withTimeout ( 5 , TimeUnit . MINUTES ) . updateImage ( \"\" ) ; \"<AssertPlaceHolder>\" ; } updateImage ( java . lang . String ) { io . fabric8 . kubernetes . api . model . apps . Deployment oldRC = get ( ) ; if ( oldRC == null ) { throw new io . fabric8 . kubernetes . client . KubernetesClientException ( \"Existing<sp>replica<sp>set<sp>doesn't<sp>exist\" ) ; } if ( ( oldRC . getSpec ( ) . getTemplate ( ) . getSpec ( ) . getContainers ( ) . size ( ) ) > 1 ) { throw new io . fabric8 . kubernetes . client . KubernetesClientException ( \"Image<sp>update<sp>is<sp>not<sp>supported<sp>for<sp>multicontainer<sp>pods\" ) ; } if ( ( oldRC . getSpec ( ) . getTemplate ( ) . getSpec ( ) . getContainers ( ) . size ( ) ) == 0 ) { throw new io . fabric8 . kubernetes . client . KubernetesClientException ( \"Pod<sp>has<sp>no<sp>containers!\" ) ; } io . fabric8 . kubernetes . api . model . Container updatedContainer = new io . fabric8 . kubernetes . api . model . ContainerBuilder ( oldRC . getSpec ( ) . getTemplate ( ) . getSpec ( ) . getContainers ( ) . iterator ( ) . next ( ) ) . withImage ( image ) . build ( ) ; io . fabric8 . kubernetes . api . model . apps . DeploymentBuilder newRCBuilder = new io . fabric8 . kubernetes . api . model . apps . DeploymentBuilder ( oldRC ) ; newRCBuilder . editMetadata ( ) . withResourceVersion ( null ) . endMetadata ( ) . editSpec ( ) . editTemplate ( ) . editSpec ( ) . withContainers ( java . util . Collections . singletonList ( updatedContainer ) ) . endSpec ( ) . endTemplate ( ) . endSpec ( ) ; return new io . fabric8 . kubernetes . client . dsl . internal . DeploymentRollingUpdater ( client , config , namespace ) . rollUpdate ( oldRC , newRCBuilder . build ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( repl1 )"}
{"focal": "getComponentInstance ( com . picocontainer . PicoContainer , java . lang . reflect . Type ) { return realComponentAdapter . getComponentInstance ( realDelegatePicoContainer , into ) ; }", "testMethod": "testSingleUsecanBeInstantiatedByDefaultComponentAdapter ( ) { com . picocontainer . ComponentAdapter componentAdapter = createComponentFactory ( ) . createComponentAdapter ( new com . picocontainer . monitors . NullComponentMonitor ( ) , new com . picocontainer . lifecycle . NullLifecycleStrategy ( ) , new java . util . Properties ( com . picocontainer . Characteristics . CDI ) , \"o\" , java . lang . Object . class , null , null , null ) ; java . lang . Object component = componentAdapter . getComponentInstance ( new com . picocontainer . DefaultPicoContainer ( ) , ComponentAdapter . NOTHING . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( component )", "total": "testSingleUsecanBeInstantiatedByDefaultComponentAdapter ( ) { com . picocontainer . ComponentAdapter componentAdapter = createComponentFactory ( ) . createComponentAdapter ( new com . picocontainer . monitors . NullComponentMonitor ( ) , new com . picocontainer . lifecycle . NullLifecycleStrategy ( ) , new java . util . Properties ( com . picocontainer . Characteristics . CDI ) , \"o\" , java . lang . Object . class , null , null , null ) ; java . lang . Object component = componentAdapter . getComponentInstance ( new com . picocontainer . DefaultPicoContainer ( ) , ComponentAdapter . NOTHING . class ) ; \"<AssertPlaceHolder>\" ; } getComponentInstance ( com . picocontainer . PicoContainer , java . lang . reflect . Type ) { return realComponentAdapter . getComponentInstance ( realDelegatePicoContainer , into ) ; }", "answer": "org . junit . Assert . assertNotNull ( component )"}
{"focal": "createFromConnectionString ( com . microsoft . azure . sdk . iot . provisioning . service . auth . ProvisioningConnectionString ) { return new com . microsoft . azure . sdk . iot . provisioning . service . contract . ContractApiHttp ( provisioningConnectionString ) ; }", "testMethod": "createFromConnectionStringSucceeded ( ) { final com . microsoft . azure . sdk . iot . provisioning . service . auth . ProvisioningConnectionString provisioningConnectionString = mockedProvisioningConnectionString ; com . microsoft . azure . sdk . iot . provisioning . service . contract . ContractApiHttp contractApiHttp = com . microsoft . azure . sdk . iot . provisioning . service . contract . ContractApiHttp . createFromConnectionString ( provisioningConnectionString ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( contractApiHttp )", "total": "createFromConnectionStringSucceeded ( ) { final com . microsoft . azure . sdk . iot . provisioning . service . auth . ProvisioningConnectionString provisioningConnectionString = mockedProvisioningConnectionString ; com . microsoft . azure . sdk . iot . provisioning . service . contract . ContractApiHttp contractApiHttp = com . microsoft . azure . sdk . iot . provisioning . service . contract . ContractApiHttp . createFromConnectionString ( provisioningConnectionString ) ; \"<AssertPlaceHolder>\" ; } createFromConnectionString ( com . microsoft . azure . sdk . iot . provisioning . service . auth . ProvisioningConnectionString ) { return new com . microsoft . azure . sdk . iot . provisioning . service . contract . ContractApiHttp ( provisioningConnectionString ) ; }", "answer": "org . junit . Assert . assertNotNull ( contractApiHttp )"}
{"focal": "evaluate ( hivemall . ftvec . DeferredObject [ ] ) { assert ( arguments . length ) == 1 ; @ hivemall . ftvec . SuppressWarnings ( \"unchecked\" ) final java . util . List < java . lang . Double > input = ( ( java . util . List < java . lang . Double > ) ( argumentOI . getList ( arguments [ 0 ] . get ( ) ) ) ) ; return udf . evaluate ( input ) ; }", "testMethod": "testSerialization ( ) { final hivemall . nlp . tokenizer . KuromojiUDF udf = new hivemall . nlp . tokenizer . KuromojiUDF ( ) ; org . apache . hadoop . hive . serde2 . objectinspector . ObjectInspector [ ] argOIs = new org . apache . hadoop . hive . serde2 . objectinspector . ObjectInspector [ 1 ] ; argOIs [ 0 ] = org . apache . hadoop . hive . serde2 . objectinspector . primitive . PrimitiveObjectInspectorFactory . writableStringObjectInspector ; udf . initialize ( argOIs ) ; byte [ ] serialized = hivemall . TestUtils . serializeObjectByKryo ( udf ) ; hivemall . TestUtils . deserializeObjectByKryo ( serialized , hivemall . nlp . tokenizer . KuromojiUDF . class ) ; org . apache . hadoop . hive . ql . udf . generic . GenericUDF . DeferredObject [ ] args = new org . apache . hadoop . hive . ql . udf . generic . GenericUDF . DeferredObject [ 1 ] ; args [ 0 ] = new org . apache . hadoop . hive . ql . udf . generic . GenericUDF . DeferredObject ( ) { public org . apache . hadoop . io . Text get ( ) throws org . apache . hadoop . hive . ql . metadata . HiveException { return new org . apache . hadoop . io . Text ( \"JapaneseAnalyzer\" ) ; } @ hivemall . nlp . tokenizer . Override public void prepare ( int arg ) throws org . apache . hadoop . hive . ql . metadata . HiveException { } } ; java . util . List < org . apache . hadoop . io . Text > tokens = udf . evaluate ( args ) ; \"<AssertPlaceHolder>\" ; serialized = hivemall . TestUtils . serializeObjectByKryo ( udf ) ; hivemall . TestUtils . deserializeObjectByKryo ( serialized , hivemall . nlp . tokenizer . KuromojiUDF . class ) ; udf . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( tokens )", "total": "testSerialization ( ) { final hivemall . nlp . tokenizer . KuromojiUDF udf = new hivemall . nlp . tokenizer . KuromojiUDF ( ) ; org . apache . hadoop . hive . serde2 . objectinspector . ObjectInspector [ ] argOIs = new org . apache . hadoop . hive . serde2 . objectinspector . ObjectInspector [ 1 ] ; argOIs [ 0 ] = org . apache . hadoop . hive . serde2 . objectinspector . primitive . PrimitiveObjectInspectorFactory . writableStringObjectInspector ; udf . initialize ( argOIs ) ; byte [ ] serialized = hivemall . TestUtils . serializeObjectByKryo ( udf ) ; hivemall . TestUtils . deserializeObjectByKryo ( serialized , hivemall . nlp . tokenizer . KuromojiUDF . class ) ; org . apache . hadoop . hive . ql . udf . generic . GenericUDF . DeferredObject [ ] args = new org . apache . hadoop . hive . ql . udf . generic . GenericUDF . DeferredObject [ 1 ] ; args [ 0 ] = new org . apache . hadoop . hive . ql . udf . generic . GenericUDF . DeferredObject ( ) { public org . apache . hadoop . io . Text get ( ) throws org . apache . hadoop . hive . ql . metadata . HiveException { return new org . apache . hadoop . io . Text ( \"JapaneseAnalyzer\" ) ; } @ hivemall . nlp . tokenizer . Override public void prepare ( int arg ) throws org . apache . hadoop . hive . ql . metadata . HiveException { } } ; java . util . List < org . apache . hadoop . io . Text > tokens = udf . evaluate ( args ) ; \"<AssertPlaceHolder>\" ; serialized = hivemall . TestUtils . serializeObjectByKryo ( udf ) ; hivemall . TestUtils . deserializeObjectByKryo ( serialized , hivemall . nlp . tokenizer . KuromojiUDF . class ) ; udf . close ( ) ; } evaluate ( hivemall . ftvec . DeferredObject [ ] ) { assert ( arguments . length ) == 1 ; @ hivemall . ftvec . SuppressWarnings ( \"unchecked\" ) final java . util . List < java . lang . Double > input = ( ( java . util . List < java . lang . Double > ) ( argumentOI . getList ( arguments [ 0 ] . get ( ) ) ) ) ; return udf . evaluate ( input ) ; }", "answer": "org . junit . Assert . assertNotNull ( tokens )"}
{"focal": "maakNieuwVoorkomen ( ) { return getPartner ( ) . getPersoonEntiteit ( ) . maakNieuweGeboorteHistorieVoorCorrectie ( getPartner ( ) . getGeboorte ( ) ) ; }", "testMethod": "testMaakNieuwVoorkomen ( ) { final nl . bzk . brp . bijhouding . bericht . model . ElementBuilder . PersoonParameters partnerParams = new nl . bzk . brp . bijhouding . bericht . model . ElementBuilder . PersoonParameters ( ) ; final nl . bzk . brp . bijhouding . bericht . model . GeslachtsaanduidingElement element = builder . maakGeslachtsaanduidingElement ( \"idComm\" , \"M\" ) ; partnerParams . geslachtsaanduiding ( element ) ; final nl . bzk . brp . bijhouding . bericht . model . CorrectieRegistratieGeslachtsaanduidingRegistratieGegevensGerelateerde actieElement = maakBasisActie ( partnerParams ) ; final nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon bijhoudingPartner = mock ( nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon . class ) ; final nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonGeslachtsaanduidingHistorie historie = new nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonGeslachtsaanduidingHistorie ( bijhoudingPartner , nl . bzk . algemeenbrp . dal . domein . brp . enums . Geslachtsaanduiding . MAN ) ; when ( bericht . getEntiteitVoorObjectSleutel ( nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon . class , nl . bzk . brp . bijhouding . bericht . model . CorrectieRegistratieGeslachtsaanduidingRegistratieGegevensGerelateerdeTest . PARTNER_OBJ_SLEUTEL ) ) . thenReturn ( bijhoudingPartner ) ; when ( bijhoudingPartner . maakNieuweGeslachtsaanduidingHistorieVoorCorrectie ( element ) ) . thenReturn ( historie ) ; nl . bzk . algemeenbrp . dal . domein . brp . entity . FormeleHistorie nieuwVoorkomen = actieElement . maakNieuwVoorkomen ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( nieuwVoorkomen )", "total": "testMaakNieuwVoorkomen ( ) { final nl . bzk . brp . bijhouding . bericht . model . ElementBuilder . PersoonParameters partnerParams = new nl . bzk . brp . bijhouding . bericht . model . ElementBuilder . PersoonParameters ( ) ; final nl . bzk . brp . bijhouding . bericht . model . GeslachtsaanduidingElement element = builder . maakGeslachtsaanduidingElement ( \"idComm\" , \"M\" ) ; partnerParams . geslachtsaanduiding ( element ) ; final nl . bzk . brp . bijhouding . bericht . model . CorrectieRegistratieGeslachtsaanduidingRegistratieGegevensGerelateerde actieElement = maakBasisActie ( partnerParams ) ; final nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon bijhoudingPartner = mock ( nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon . class ) ; final nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonGeslachtsaanduidingHistorie historie = new nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonGeslachtsaanduidingHistorie ( bijhoudingPartner , nl . bzk . algemeenbrp . dal . domein . brp . enums . Geslachtsaanduiding . MAN ) ; when ( bericht . getEntiteitVoorObjectSleutel ( nl . bzk . brp . bijhouding . bericht . model . BijhoudingPersoon . class , nl . bzk . brp . bijhouding . bericht . model . CorrectieRegistratieGeslachtsaanduidingRegistratieGegevensGerelateerdeTest . PARTNER_OBJ_SLEUTEL ) ) . thenReturn ( bijhoudingPartner ) ; when ( bijhoudingPartner . maakNieuweGeslachtsaanduidingHistorieVoorCorrectie ( element ) ) . thenReturn ( historie ) ; nl . bzk . algemeenbrp . dal . domein . brp . entity . FormeleHistorie nieuwVoorkomen = actieElement . maakNieuwVoorkomen ( ) ; \"<AssertPlaceHolder>\" ; } maakNieuwVoorkomen ( ) { return getPartner ( ) . getPersoonEntiteit ( ) . maakNieuweGeboorteHistorieVoorCorrectie ( getPartner ( ) . getGeboorte ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( nieuwVoorkomen )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "test21deleteTag ( ) { org . apache . ranger . plugin . model . RangerTag oldTag = new org . apache . ranger . plugin . model . RangerTag ( ) ; oldTag . setId ( org . apache . ranger . rest . TestTagREST . id ) ; try { org . mockito . Mockito . when ( validator . preDeleteTag ( org . apache . ranger . rest . TestTagREST . id ) ) . thenReturn ( oldTag ) ; } catch ( java . lang . Exception e ) { } try { org . mockito . Mockito . doNothing ( ) . when ( tagStore ) . deleteTag ( org . apache . ranger . rest . TestTagREST . id ) ; } catch ( java . lang . Exception e ) { } tagREST . deleteTag ( org . apache . ranger . rest . TestTagREST . id ) ; \"<AssertPlaceHolder>\" ; try { org . mockito . Mockito . verify ( validator ) . preDeleteTag ( org . apache . ranger . rest . TestTagREST . id ) ; } catch ( java . lang . Exception e ) { } try { org . mockito . Mockito . verify ( tagStore ) . deleteTag ( org . apache . ranger . rest . TestTagREST . id ) ; } catch ( java . lang . Exception e ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( oldTag . getId ( ) )", "total": "test21deleteTag ( ) { org . apache . ranger . plugin . model . RangerTag oldTag = new org . apache . ranger . plugin . model . RangerTag ( ) ; oldTag . setId ( org . apache . ranger . rest . TestTagREST . id ) ; try { org . mockito . Mockito . when ( validator . preDeleteTag ( org . apache . ranger . rest . TestTagREST . id ) ) . thenReturn ( oldTag ) ; } catch ( java . lang . Exception e ) { } try { org . mockito . Mockito . doNothing ( ) . when ( tagStore ) . deleteTag ( org . apache . ranger . rest . TestTagREST . id ) ; } catch ( java . lang . Exception e ) { } tagREST . deleteTag ( org . apache . ranger . rest . TestTagREST . id ) ; \"<AssertPlaceHolder>\" ; try { org . mockito . Mockito . verify ( validator ) . preDeleteTag ( org . apache . ranger . rest . TestTagREST . id ) ; } catch ( java . lang . Exception e ) { } try { org . mockito . Mockito . verify ( tagStore ) . deleteTag ( org . apache . ranger . rest . TestTagREST . id ) ; } catch ( java . lang . Exception e ) { } } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( oldTag . getId ( ) )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "test50 ( ) { net . pms . formats . MKV mKV0 = new net . pms . formats . MKV ( ) ; java . lang . String [ ] str_array1 = mKV0 . getId ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( str_array1 )", "total": "test50 ( ) { net . pms . formats . MKV mKV0 = new net . pms . formats . MKV ( ) ; java . lang . String [ ] str_array1 = mKV0 . getId ( ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( str_array1 )"}
{"focal": "createDetectorFor ( java . lang . String , org . modeshape . jcr . Environment ) { switch ( mimeTypeDetectionConfig . toLowerCase ( ) ) { case RepositoryConfiguration . FieldValue . MIMETYPE_DETECTION_CONTENT : { return org . modeshape . jcr . mimetype . MimeTypeDetectors . TIKA_AVAILABLE ? new org . modeshape . jcr . mimetype . tika . TikaContentDetector ( environment ) : new org . modeshape . jcr . mimetype . DefaultMimeTypeDetector ( ) ; } case RepositoryConfiguration . FieldValue . MIMETYPE_DETECTION_NAME : { return org . modeshape . jcr . mimetype . MimeTypeDetectors . TIKA_AVAILABLE ? new org . modeshape . jcr . mimetype . tika . TikaNameOnlyDetector ( environment ) : new org . modeshape . jcr . mimetype . DefaultMimeTypeDetector ( ) ; } case RepositoryConfiguration . FieldValue . MIMETYPE_DETECTION_NONE : { return NullMimeTypeDetector . INSTANCE ; } default : { throw new java . lang . IllegalArgumentException ( ( \"Unknown<sp>mime-type<sp>detector<sp>setting:<sp>\" + mimeTypeDetectionConfig ) ) ; } } }", "testMethod": "shouldReturnValidContentDetector ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . modeshape . jcr . mimetype . MimeTypeDetectors . createDetectorFor ( RepositoryConfiguration . FieldValue . MIMETYPE_DETECTION_CONTENT , environment ) )", "total": "shouldReturnValidContentDetector ( ) { \"<AssertPlaceHolder>\" ; } createDetectorFor ( java . lang . String , org . modeshape . jcr . Environment ) { switch ( mimeTypeDetectionConfig . toLowerCase ( ) ) { case RepositoryConfiguration . FieldValue . MIMETYPE_DETECTION_CONTENT : { return org . modeshape . jcr . mimetype . MimeTypeDetectors . TIKA_AVAILABLE ? new org . modeshape . jcr . mimetype . tika . TikaContentDetector ( environment ) : new org . modeshape . jcr . mimetype . DefaultMimeTypeDetector ( ) ; } case RepositoryConfiguration . FieldValue . MIMETYPE_DETECTION_NAME : { return org . modeshape . jcr . mimetype . MimeTypeDetectors . TIKA_AVAILABLE ? new org . modeshape . jcr . mimetype . tika . TikaNameOnlyDetector ( environment ) : new org . modeshape . jcr . mimetype . DefaultMimeTypeDetector ( ) ; } case RepositoryConfiguration . FieldValue . MIMETYPE_DETECTION_NONE : { return NullMimeTypeDetector . INSTANCE ; } default : { throw new java . lang . IllegalArgumentException ( ( \"Unknown<sp>mime-type<sp>detector<sp>setting:<sp>\" + mimeTypeDetectionConfig ) ) ; } } }", "answer": "org . junit . Assert . assertNotNull ( org . modeshape . jcr . mimetype . MimeTypeDetectors . createDetectorFor ( RepositoryConfiguration . FieldValue . MIMETYPE_DETECTION_CONTENT , environment ) )"}
{"focal": "parse ( java . io . File ) { return org . walkmod . javalang . ASTManager . parse ( file , \"UTF-8\" ) ; }", "testMethod": "testConditionalLambda ( ) { java . io . File f = new java . io . File ( \"src/test/resources/lambda-failure-conditional.txt\" ) ; org . walkmod . javalang . ast . CompilationUnit cu = org . walkmod . javalang . ASTManager . parse ( f ) ; \"<AssertPlaceHolder>\" ; System . out . println ( cu . toString ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( cu )", "total": "testConditionalLambda ( ) { java . io . File f = new java . io . File ( \"src/test/resources/lambda-failure-conditional.txt\" ) ; org . walkmod . javalang . ast . CompilationUnit cu = org . walkmod . javalang . ASTManager . parse ( f ) ; \"<AssertPlaceHolder>\" ; System . out . println ( cu . toString ( ) ) ; } parse ( java . io . File ) { return org . walkmod . javalang . ASTManager . parse ( file , \"UTF-8\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( cu )"}
{"focal": "failedTask ( ) { return failedTask ; }", "testMethod": "shouldAdvertiseFailedRule ( ) { org . neo4j . server . preflight . PreFlightTasks check = new org . neo4j . server . preflight . PreFlightTasks ( org . neo4j . logging . NullLogProvider . getInstance ( ) , getWithOneFailingRule ( ) ) ; check . run ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( check . failedTask ( ) )", "total": "shouldAdvertiseFailedRule ( ) { org . neo4j . server . preflight . PreFlightTasks check = new org . neo4j . server . preflight . PreFlightTasks ( org . neo4j . logging . NullLogProvider . getInstance ( ) , getWithOneFailingRule ( ) ) ; check . run ( ) ; \"<AssertPlaceHolder>\" ; } failedTask ( ) { return failedTask ; }", "answer": "org . junit . Assert . assertNotNull ( check . failedTask ( ) )"}
{"focal": "getEnums ( ) { return enums ; }", "testMethod": "testGetEnums ( ) { org . apache . ranger . common . view . VEnumElement VEnumElement = new org . apache . ranger . common . view . VEnumElement ( ) ; VEnumElement . setEnumName ( \"test1\" ) ; VEnumElement . setElementName ( \"test2\" ) ; VEnumElement . setElementLabel ( \"test3\" ) ; VEnumElement . setElementValue ( 0 ) ; VEnumElement . setRbKey ( \"11\" ) ; java . util . List < org . apache . ranger . common . view . VEnumElement > listVEnumElement = new java . util . ArrayList < org . apache . ranger . common . view . VEnumElement > ( ) ; org . apache . ranger . common . view . VEnum vEnum = new org . apache . ranger . common . view . VEnum ( ) ; vEnum . setEnumName ( \"test\" ) ; vEnum . setElementList ( listVEnumElement ) ; xaEnumUtil . enumList . add ( vEnum ) ; java . util . List < org . apache . ranger . common . view . VEnum > dbvEnum = xaEnumUtil . getEnums ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dbvEnum )", "total": "testGetEnums ( ) { org . apache . ranger . common . view . VEnumElement VEnumElement = new org . apache . ranger . common . view . VEnumElement ( ) ; VEnumElement . setEnumName ( \"test1\" ) ; VEnumElement . setElementName ( \"test2\" ) ; VEnumElement . setElementLabel ( \"test3\" ) ; VEnumElement . setElementValue ( 0 ) ; VEnumElement . setRbKey ( \"11\" ) ; java . util . List < org . apache . ranger . common . view . VEnumElement > listVEnumElement = new java . util . ArrayList < org . apache . ranger . common . view . VEnumElement > ( ) ; org . apache . ranger . common . view . VEnum vEnum = new org . apache . ranger . common . view . VEnum ( ) ; vEnum . setEnumName ( \"test\" ) ; vEnum . setElementList ( listVEnumElement ) ; xaEnumUtil . enumList . add ( vEnum ) ; java . util . List < org . apache . ranger . common . view . VEnum > dbvEnum = xaEnumUtil . getEnums ( ) ; \"<AssertPlaceHolder>\" ; } getEnums ( ) { return enums ; }", "answer": "org . junit . Assert . assertNotNull ( dbvEnum )"}
{"focal": "totalBeansCreatedProperty ( ) { if ( ( statistics ) == null ) { return NOT_AVAILABLE ; } final javax . json . JsonObject jsonObject = statistics . getJsonObject ( \"totalbeanscreated\" ) ; int value = jsonObject . getInt ( \"count\" ) ; totalBeansCreated . set ( value ) ; return totalBeansCreated ; }", "testMethod": "totalBeansCreated ( ) { org . lightview . business . pool . entity . PoolStatistics poolStats = this . cut . getPoolStats ( \"lightfish\" , \"ConfigurationStore\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( poolStats . totalBeansCreatedProperty ( ) )", "total": "totalBeansCreated ( ) { org . lightview . business . pool . entity . PoolStatistics poolStats = this . cut . getPoolStats ( \"lightfish\" , \"ConfigurationStore\" ) ; \"<AssertPlaceHolder>\" ; } totalBeansCreatedProperty ( ) { if ( ( statistics ) == null ) { return NOT_AVAILABLE ; } final javax . json . JsonObject jsonObject = statistics . getJsonObject ( \"totalbeanscreated\" ) ; int value = jsonObject . getInt ( \"count\" ) ; totalBeansCreated . set ( value ) ; return totalBeansCreated ; }", "answer": "org . junit . Assert . assertNotNull ( poolStats . totalBeansCreatedProperty ( ) )"}
{"focal": "loadClass ( java . lang . String ) { try { return super . loadClass ( className ) ; } catch ( java . lang . ClassNotFoundException cnfe ) { } java . lang . String fileName = ( className . replace ( '.' , '/' ) ) + \".class\" ; byte [ ] bytes = mfs . getBytes ( fileName ) ; if ( bytes == null ) { throw new java . lang . ClassNotFoundException ( className ) ; } return defineClass ( className , bytes , 0 , bytes . length ) ; }", "testMethod": "testJavaSourceFileAndDrlDeploy ( ) { final java . lang . String java = \">\\n\" 3 + \"public<sp>class<sp>JavaSourceMessage<sp>{<sp>}\\n\" ; final java . lang . String drl = \">\\n\" 3 + ( ( ( ( \">\\n\" 2 + \"kbase1/drl1.drl\" 2 ) + \"kbase1/drl1.drl\" 0 ) + \"then\\n\" ) + \"end\\n\" ) ; final java . lang . String kmodule = \">\\n\" 5 http : final org . kie . api . KieServices ks = KieServices . Factory . get ( ) ; final org . kie . api . builder . ReleaseId releaseId1 = ks . newReleaseId ( \"org.kie\" , \">\\n\" 7 , \"1.0.0\" ) ; final org . kie . api . io . Resource javaResource = org . kie . internal . io . ResourceFactory . newByteArrayResource ( java . getBytes ( ) ) . setResourceType ( ResourceType . JAVA ) . setSourcePath ( \"org/drools/compiler/JavaSourceMessage.java\" ) ; final org . kie . api . io . Resource drlResource = org . kie . internal . io . ResourceFactory . newByteArrayResource ( drl . getBytes ( ) ) . setResourceType ( ResourceType . DRL ) . setSourcePath ( \"kbase1/drl1.drl\" ) ; final org . kie . api . builder . KieModule km = createAndDeployJar ( ks , kmodule , releaseId1 , javaResource , drlResource ) ; final org . kie . api . runtime . KieContainer kieContainer = ks . newKieContainer ( km . getReleaseId ( ) ) ; try { final java . lang . Class < ? > messageClass = kieContainer . getClassLoader ( ) . loadClass ( \">\\n\" 9 ) ; \"<AssertPlaceHolder>\" ; } catch ( final java . lang . ClassNotFoundException e ) { throw new java . lang . IllegalStateException ( \"kbase1/drl1.drl\" 1 , e ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( messageClass )", "total": "testJavaSourceFileAndDrlDeploy ( ) { final java . lang . String java = \">\\n\" 3 + \"public<sp>class<sp>JavaSourceMessage<sp>{<sp>}\\n\" ; final java . lang . String drl = \">\\n\" 3 + ( ( ( ( \">\\n\" 2 + \"kbase1/drl1.drl\" 2 ) + \"kbase1/drl1.drl\" 0 ) + \"then\\n\" ) + \"end\\n\" ) ; final java . lang . String kmodule = \">\\n\" 5 http : final org . kie . api . KieServices ks = KieServices . Factory . get ( ) ; final org . kie . api . builder . ReleaseId releaseId1 = ks . newReleaseId ( \"org.kie\" , \">\\n\" 7 , \"1.0.0\" ) ; final org . kie . api . io . Resource javaResource = org . kie . internal . io . ResourceFactory . newByteArrayResource ( java . getBytes ( ) ) . setResourceType ( ResourceType . JAVA ) . setSourcePath ( \"org/drools/compiler/JavaSourceMessage.java\" ) ; final org . kie . api . io . Resource drlResource = org . kie . internal . io . ResourceFactory . newByteArrayResource ( drl . getBytes ( ) ) . setResourceType ( ResourceType . DRL ) . setSourcePath ( \"kbase1/drl1.drl\" ) ; final org . kie . api . builder . KieModule km = createAndDeployJar ( ks , kmodule , releaseId1 , javaResource , drlResource ) ; final org . kie . api . runtime . KieContainer kieContainer = ks . newKieContainer ( km . getReleaseId ( ) ) ; try { final java . lang . Class < ? > messageClass = kieContainer . getClassLoader ( ) . loadClass ( \">\\n\" 9 ) ; \"<AssertPlaceHolder>\" ; } catch ( final java . lang . ClassNotFoundException e ) { throw new java . lang . IllegalStateException ( \"kbase1/drl1.drl\" 1 , e ) ; } } loadClass ( java . lang . String ) { try { return super . loadClass ( className ) ; } catch ( java . lang . ClassNotFoundException cnfe ) { } java . lang . String fileName = ( className . replace ( '.' , '/' ) ) + \".class\" ; byte [ ] bytes = mfs . getBytes ( fileName ) ; if ( bytes == null ) { throw new java . lang . ClassNotFoundException ( className ) ; } return defineClass ( className , bytes , 0 , bytes . length ) ; }", "answer": "org . junit . Assert . assertNotNull ( messageClass )"}
{"focal": "unmarshal ( java . lang . Class , java . io . File ) { return org . opennms . core . xml . JaxbUtils . unmarshal ( clazz , file , org . opennms . core . xml . JaxbUtils . VALIDATE_IF_POSSIBLE ) ; }", "testMethod": "testGetDetectors ( ) { java . lang . String xml = sendRequest ( org . opennms . web . rest . v1 . GET , \"/foreignSourcesConfig/detectors\" , 200 ) ; org . opennms . web . rest . v1 . ForeignSourceConfigRestService . SimplePluginConfigList list = org . opennms . core . xml . JaxbUtils . unmarshal ( org . opennms . web . rest . v1 . ForeignSourceConfigRestService . SimplePluginConfigList . class , xml ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( list )", "total": "testGetDetectors ( ) { java . lang . String xml = sendRequest ( org . opennms . web . rest . v1 . GET , \"/foreignSourcesConfig/detectors\" , 200 ) ; org . opennms . web . rest . v1 . ForeignSourceConfigRestService . SimplePluginConfigList list = org . opennms . core . xml . JaxbUtils . unmarshal ( org . opennms . web . rest . v1 . ForeignSourceConfigRestService . SimplePluginConfigList . class , xml ) ; \"<AssertPlaceHolder>\" ; } unmarshal ( java . lang . Class , java . io . File ) { return org . opennms . core . xml . JaxbUtils . unmarshal ( clazz , file , org . opennms . core . xml . JaxbUtils . VALIDATE_IF_POSSIBLE ) ; }", "answer": "org . junit . Assert . assertNotNull ( list )"}
{"focal": "setSystem ( java . lang . Class ) { try { return setSystem ( com . artemis . utils . reflect . ClassReflection . newInstance ( system ) ) ; } catch ( com . artemis . utils . reflect . ReflectionException e ) { throw new java . lang . RuntimeException ( e ) ; } }", "testMethod": "ensure_wire_implicit_by_convention ( ) { class TestSystem extends com . artemis . BaseSystem { @ com . artemis . Override protected void processSystem ( ) { } } class TestSystem2 extends com . artemis . BaseSystem { TestSystem x ; @ com . artemis . Override protected void processSystem ( ) { } } TestSystem2 system2 = new TestSystem2 ( ) ; new com . artemis . World ( new com . artemis . WorldConfiguration ( ) . setSystem ( new TestSystem ( ) ) . setSystem ( system2 ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( system2 . x )", "total": "ensure_wire_implicit_by_convention ( ) { class TestSystem extends com . artemis . BaseSystem { @ com . artemis . Override protected void processSystem ( ) { } } class TestSystem2 extends com . artemis . BaseSystem { TestSystem x ; @ com . artemis . Override protected void processSystem ( ) { } } TestSystem2 system2 = new TestSystem2 ( ) ; new com . artemis . World ( new com . artemis . WorldConfiguration ( ) . setSystem ( new TestSystem ( ) ) . setSystem ( system2 ) ) ; \"<AssertPlaceHolder>\" ; } setSystem ( java . lang . Class ) { try { return setSystem ( com . artemis . utils . reflect . ClassReflection . newInstance ( system ) ) ; } catch ( com . artemis . utils . reflect . ReflectionException e ) { throw new java . lang . RuntimeException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( system2 . x )"}
{"focal": "parse ( java . lang . String ) { net . sourceforge . pmd . lang . LanguageVersionHandler jspLang = net . sourceforge . pmd . lang . LanguageRegistry . getLanguage ( JspLanguageModule . NAME ) . getDefaultVersion ( ) . getLanguageVersionHandler ( ) ; net . sourceforge . pmd . lang . Parser parser = jspLang . getParser ( jspLang . getDefaultParserOptions ( ) ) ; net . sourceforge . pmd . lang . ast . Node node = parser . parse ( null , new java . io . StringReader ( code ) ) ; return node ; }", "testMethod": "testParseDollar ( ) { net . sourceforge . pmd . lang . ast . Node node = parse ( \"<span<sp>class=\\\"CostUnit\\\">$</span><span<sp>class=\\\"CostMain\\\">129</span><span<sp>class=\\\"CostFrac\\\">.00</span>\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( node )", "total": "testParseDollar ( ) { net . sourceforge . pmd . lang . ast . Node node = parse ( \"<span<sp>class=\\\"CostUnit\\\">$</span><span<sp>class=\\\"CostMain\\\">129</span><span<sp>class=\\\"CostFrac\\\">.00</span>\" ) ; \"<AssertPlaceHolder>\" ; } parse ( java . lang . String ) { net . sourceforge . pmd . lang . LanguageVersionHandler jspLang = net . sourceforge . pmd . lang . LanguageRegistry . getLanguage ( JspLanguageModule . NAME ) . getDefaultVersion ( ) . getLanguageVersionHandler ( ) ; net . sourceforge . pmd . lang . Parser parser = jspLang . getParser ( jspLang . getDefaultParserOptions ( ) ) ; net . sourceforge . pmd . lang . ast . Node node = parser . parse ( null , new java . io . StringReader ( code ) ) ; return node ; }", "answer": "org . junit . Assert . assertNotNull ( node )"}
{"focal": "getIdPart ( ) { return myId . getIdPart ( ) ; }", "testMethod": "testSubscriptionWithInvalidCriteria ( ) { ca . uhn . fhir . jpa . dao . BaseHapiFhirDao . setValidationDisabledForUnitTest ( true ) ; org . hl7 . fhir . r4 . model . Subscription s = new org . hl7 . fhir . r4 . model . Subscription ( ) ; s . setStatus ( Subscription . SubscriptionStatus . REQUESTED ) ; s . getChannel ( ) . setType ( Subscription . SubscriptionChannelType . RESTHOOK ) ; s . getChannel ( ) . setEndpoint ( \"http://foo\" ) ; s . getChannel ( ) . setPayload ( \"application/fhir+json\" ) ; s . setCriteria ( \"BLAH\" ) ; org . hl7 . fhir . instance . model . api . IIdType id = mySubscriptionDao . create ( s ) . getId ( ) . toUnqualifiedVersionless ( ) ; \"<AssertPlaceHolder>\" ; ca . uhn . fhir . jpa . dao . BaseHapiFhirDao . setValidationDisabledForUnitTest ( false ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( id . getIdPart ( ) )", "total": "testSubscriptionWithInvalidCriteria ( ) { ca . uhn . fhir . jpa . dao . BaseHapiFhirDao . setValidationDisabledForUnitTest ( true ) ; org . hl7 . fhir . r4 . model . Subscription s = new org . hl7 . fhir . r4 . model . Subscription ( ) ; s . setStatus ( Subscription . SubscriptionStatus . REQUESTED ) ; s . getChannel ( ) . setType ( Subscription . SubscriptionChannelType . RESTHOOK ) ; s . getChannel ( ) . setEndpoint ( \"http://foo\" ) ; s . getChannel ( ) . setPayload ( \"application/fhir+json\" ) ; s . setCriteria ( \"BLAH\" ) ; org . hl7 . fhir . instance . model . api . IIdType id = mySubscriptionDao . create ( s ) . getId ( ) . toUnqualifiedVersionless ( ) ; \"<AssertPlaceHolder>\" ; ca . uhn . fhir . jpa . dao . BaseHapiFhirDao . setValidationDisabledForUnitTest ( false ) ; } getIdPart ( ) { return myId . getIdPart ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( id . getIdPart ( ) )"}
{"focal": "createJob ( org . finra . herd . model . api . xml . JobCreateRequest ) { return jobService . createAndStartJob ( request ) ; }", "testMethod": "testLogVariablesNoRegex ( ) { org . finra . herd . model . api . xml . Job job = jobServiceTestHelper . createJob ( org . finra . herd . service . activiti . task . ACTIVITI_XML_LOG_VARIABLES_NO_REGEX_WITH_CLASSPATH ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( job )", "total": "testLogVariablesNoRegex ( ) { org . finra . herd . model . api . xml . Job job = jobServiceTestHelper . createJob ( org . finra . herd . service . activiti . task . ACTIVITI_XML_LOG_VARIABLES_NO_REGEX_WITH_CLASSPATH ) ; \"<AssertPlaceHolder>\" ; } createJob ( org . finra . herd . model . api . xml . JobCreateRequest ) { return jobService . createAndStartJob ( request ) ; }", "answer": "org . junit . Assert . assertNotNull ( job )"}
{"focal": "loadMapping ( java . net . URL ) { try { return loadMapping ( new java . io . File ( url . toURI ( ) ) ) ; } catch ( java . net . URISyntaxException e ) { throw new io . atlasmap . api . AtlasValidationException ( e . getMessage ( ) , e ) ; } }", "testMethod": "testLoadMappingReaderAtlasMappingFormatAtlasValidationException ( ) { java . io . BufferedReader reader = null ; io . atlasmap . v2 . AtlasMapping atlasMapping = io . atlasmap . core . AtlasMappingServiceTest . atlasMappingService . loadMapping ( reader ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( atlasMapping )", "total": "testLoadMappingReaderAtlasMappingFormatAtlasValidationException ( ) { java . io . BufferedReader reader = null ; io . atlasmap . v2 . AtlasMapping atlasMapping = io . atlasmap . core . AtlasMappingServiceTest . atlasMappingService . loadMapping ( reader ) ; \"<AssertPlaceHolder>\" ; } loadMapping ( java . net . URL ) { try { return loadMapping ( new java . io . File ( url . toURI ( ) ) ) ; } catch ( java . net . URISyntaxException e ) { throw new io . atlasmap . api . AtlasValidationException ( e . getMessage ( ) , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( atlasMapping )"}
{"focal": "deleteFloatingIP ( java . lang . String ) { checkBlankAndThrowError ( ipAddress , \"Missing<sp>required<sp>parameter<sp>-<sp>ipAddress.\" ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { ipAddress } ; return ( ( com . myjeeva . digitalocean . pojo . Delete ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . DELETE_FLOATING_IP , params ) ) . getData ( ) ) ) ; }", "testMethod": "testDeleteFloatingIP ( ) { com . myjeeva . digitalocean . pojo . Delete result = apiClient . deleteFloatingIP ( \"159.203.146.109\" ) ; \"<AssertPlaceHolder>\" ; log . info ( ( \"Delete<sp>Floating<sp>IP<sp>Request<sp>Object:<sp>\" + result ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testDeleteFloatingIP ( ) { com . myjeeva . digitalocean . pojo . Delete result = apiClient . deleteFloatingIP ( \"159.203.146.109\" ) ; \"<AssertPlaceHolder>\" ; log . info ( ( \"Delete<sp>Floating<sp>IP<sp>Request<sp>Object:<sp>\" + result ) ) ; } deleteFloatingIP ( java . lang . String ) { checkBlankAndThrowError ( ipAddress , \"Missing<sp>required<sp>parameter<sp>-<sp>ipAddress.\" ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { ipAddress } ; return ( ( com . myjeeva . digitalocean . pojo . Delete ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . DELETE_FLOATING_IP , params ) ) . getData ( ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getTask ( com . vmware . vrack . hms . task . TaskType , com . vmware . vrack . hms . common . HmsNode ) { com . vmware . vrack . hms . task . IHmsTask task = null ; switch ( taskType ) { default : return task ; } }", "testMethod": "testGetTask_PowerUpServerTask ( ) { com . vmware . vrack . hms . task . TaskFactoryTest . logger . info ( \"[TS]<sp>:<sp>testGetTask_PowerUpServerTask\" ) ; com . vmware . vrack . hms . task . TaskType taskType = TaskType . PowerUpServer ; com . vmware . vrack . hms . common . servernodes . api . ServerNode sNode = new com . vmware . vrack . hms . common . servernodes . api . ServerNode ( \"2\" , \"10.28.197.202\" , \"ADMIN\" , \"ADMIN\" ) ; sNode . setOsUserName ( \"root\" ) ; sNode . setOsPassword ( \"l@ni3r2o14\" ) ; sNode . setIbIpAddress ( \"10.28.197.22\" ) ; com . vmware . vrack . hms . task . IHmsTask result = com . vmware . vrack . hms . task . TaskFactory . getTask ( taskType , sNode ) ; com . vmware . vrack . hms . task . TaskFactoryTest . logger . info ( ( \"[TS]<sp>:<sp>Expected<sp>Result<sp>:<sp>Not<sp>Null<sp>,<sp>Actual<sp>Result<sp>:<sp>\" + result ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetTask_PowerUpServerTask ( ) { com . vmware . vrack . hms . task . TaskFactoryTest . logger . info ( \"[TS]<sp>:<sp>testGetTask_PowerUpServerTask\" ) ; com . vmware . vrack . hms . task . TaskType taskType = TaskType . PowerUpServer ; com . vmware . vrack . hms . common . servernodes . api . ServerNode sNode = new com . vmware . vrack . hms . common . servernodes . api . ServerNode ( \"2\" , \"10.28.197.202\" , \"ADMIN\" , \"ADMIN\" ) ; sNode . setOsUserName ( \"root\" ) ; sNode . setOsPassword ( \"l@ni3r2o14\" ) ; sNode . setIbIpAddress ( \"10.28.197.22\" ) ; com . vmware . vrack . hms . task . IHmsTask result = com . vmware . vrack . hms . task . TaskFactory . getTask ( taskType , sNode ) ; com . vmware . vrack . hms . task . TaskFactoryTest . logger . info ( ( \"[TS]<sp>:<sp>Expected<sp>Result<sp>:<sp>Not<sp>Null<sp>,<sp>Actual<sp>Result<sp>:<sp>\" + result ) ) ; \"<AssertPlaceHolder>\" ; } getTask ( com . vmware . vrack . hms . task . TaskType , com . vmware . vrack . hms . common . HmsNode ) { com . vmware . vrack . hms . task . IHmsTask task = null ; switch ( taskType ) { default : return task ; } }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "verify ( org . snmp4j . smi . VariableBinding ) { org . junit . Assert . assertNotNull ( \"variable<sp>binding<sp>should<sp>not<sp>be<sp>null\" , vb ) ; org . snmp4j . smi . Variable val = vb . getVariable ( ) ; org . junit . Assert . assertNotNull ( \"variable<sp>should<sp>not<sp>be<sp>null\" , val ) ; org . junit . Assert . assertEquals ( ( ( \"OID<sp>(value:<sp>\" + val ) + \")\" ) , new org . snmp4j . smi . OID ( m_expectedOid ) , vb . getOid ( ) ) ; org . junit . Assert . assertEquals ( \"syntax\" , m_expectedSyntax , vb . getSyntax ( ) ) ; org . junit . Assert . assertEquals ( \"value\" , m_expectedValue , val ) ; }", "testMethod": "testCreateAggregateStatusUsingNodeId ( ) { java . util . Collection < org . opennms . web . svclayer . model . AggregateStatus > aggrStati ; java . util . Collection < org . opennms . netmgt . model . AggregateStatusDefinition > defs = new java . util . HashSet ( ) ; org . opennms . netmgt . model . OnmsCategory catRouters = new org . opennms . netmgt . model . OnmsCategory ( \"routers\" ) ; org . opennms . netmgt . model . OnmsCategory catSwitches = new org . opennms . netmgt . model . OnmsCategory ( \"switches\" ) ; org . opennms . netmgt . model . AggregateStatusDefinition definition = new org . opennms . netmgt . model . AggregateStatusDefinition ( \"Routers/Switches\" , new java . util . HashSet < org . opennms . netmgt . model . OnmsCategory > ( java . util . Arrays . asList ( new org . opennms . netmgt . model . OnmsCategory [ ] { catRouters , catSwitches } ) ) ) ; defs . add ( definition ) ; org . opennms . netmgt . model . OnmsCategory catServers = new org . opennms . netmgt . model . OnmsCategory ( \"servers\" ) ; definition = new org . opennms . netmgt . model . AggregateStatusDefinition ( \"Servers\" , new java . util . HashSet < org . opennms . netmgt . model . OnmsCategory > ( java . util . Arrays . asList ( new org . opennms . netmgt . model . OnmsCategory [ ] { catServers } ) ) ) ; defs . add ( definition ) ; org . opennms . web . svclayer . support . DefaultSiteStatusViewService aggregateSvc = new org . opennms . web . svclayer . support . DefaultSiteStatusViewService ( ) ; aggregateSvc . setNodeDao ( m_nodeDao ) ; aggregateSvc . setCategoryDao ( m_categoryDao ) ; aggregateSvc . setSiteStatusViewConfigDao ( m_siteStatusViewConfigDao ) ; org . opennms . netmgt . model . OnmsNode node = new org . opennms . netmgt . model . OnmsNode ( ) ; node . setId ( 1 ) ; node . getAssetRecord ( ) . setBuilding ( \"HQ\" ) ; java . util . List < org . opennms . netmgt . model . OnmsNode > nodes = new java . util . ArrayList ( ) ; nodes . add ( node ) ; for ( org . opennms . netmgt . model . AggregateStatusDefinition def : defs ) { expect ( m_nodeDao . findAllByVarCharAssetColumnCategoryList ( \"building\" , \"HQ\" , def . getCategories ( ) ) ) . andReturn ( nodes ) ; } for ( org . opennms . netmgt . model . OnmsNode n : nodes ) { expect ( m_nodeDao . load ( n . getId ( ) ) ) . andReturn ( n ) ; } replay ( m_nodeDao ) ; expect ( m_categoryDao . findByName ( \"switches\" ) ) . andReturn ( catSwitches ) ; expect ( m_categoryDao . findByName ( \"routers\" ) ) . andReturn ( catRouters ) ; expect ( m_categoryDao . findByName ( \"servers\" ) ) . andReturn ( catServers ) ; replay ( m_categoryDao ) ; java . util . List < org . opennms . netmgt . config . siteStatusViews . RowDef > rows = new java . util . ArrayList ( ) ; org . opennms . netmgt . config . siteStatusViews . RowDef rowDef = new org . opennms . netmgt . config . siteStatusViews . RowDef ( ) ; org . opennms . netmgt . config . siteStatusViews . Category category = new org . opennms . netmgt . config . siteStatusViews . Category ( ) ; category . setName ( \"servers\" ) ; rowDef . addCategory ( category ) ; rows . add ( rowDef ) ; rowDef = new org . opennms . netmgt . config . siteStatusViews . RowDef ( ) ; category = new org . opennms . netmgt . config . siteStatusViews . Category ( ) ; category . setName ( \"switches\" ) ; rowDef . addCategory ( category ) ; category = new org . opennms . netmgt . config . siteStatusViews . Category ( ) ; category . setName ( \"routers\" ) ; rowDef . addCategory ( category ) ; rows . add ( rowDef ) ; org . opennms . netmgt . config . siteStatusViews . View view = new org . opennms . netmgt . config . siteStatusViews . View ( ) ; view . setRows ( rows ) ; expect ( m_siteStatusViewConfigDao . getView ( \"building\" ) ) . andReturn ( view ) ; replay ( m_siteStatusViewConfigDao ) ; aggrStati = aggregateSvc . createAggregateStatusesUsingNodeId ( node . getId ( ) , \"building\" ) ; verify ( m_nodeDao ) ; verify ( m_categoryDao ) ; verify ( m_siteStatusViewConfigDao ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( aggrStati )", "total": "testCreateAggregateStatusUsingNodeId ( ) { java . util . Collection < org . opennms . web . svclayer . model . AggregateStatus > aggrStati ; java . util . Collection < org . opennms . netmgt . model . AggregateStatusDefinition > defs = new java . util . HashSet ( ) ; org . opennms . netmgt . model . OnmsCategory catRouters = new org . opennms . netmgt . model . OnmsCategory ( \"routers\" ) ; org . opennms . netmgt . model . OnmsCategory catSwitches = new org . opennms . netmgt . model . OnmsCategory ( \"switches\" ) ; org . opennms . netmgt . model . AggregateStatusDefinition definition = new org . opennms . netmgt . model . AggregateStatusDefinition ( \"Routers/Switches\" , new java . util . HashSet < org . opennms . netmgt . model . OnmsCategory > ( java . util . Arrays . asList ( new org . opennms . netmgt . model . OnmsCategory [ ] { catRouters , catSwitches } ) ) ) ; defs . add ( definition ) ; org . opennms . netmgt . model . OnmsCategory catServers = new org . opennms . netmgt . model . OnmsCategory ( \"servers\" ) ; definition = new org . opennms . netmgt . model . AggregateStatusDefinition ( \"Servers\" , new java . util . HashSet < org . opennms . netmgt . model . OnmsCategory > ( java . util . Arrays . asList ( new org . opennms . netmgt . model . OnmsCategory [ ] { catServers } ) ) ) ; defs . add ( definition ) ; org . opennms . web . svclayer . support . DefaultSiteStatusViewService aggregateSvc = new org . opennms . web . svclayer . support . DefaultSiteStatusViewService ( ) ; aggregateSvc . setNodeDao ( m_nodeDao ) ; aggregateSvc . setCategoryDao ( m_categoryDao ) ; aggregateSvc . setSiteStatusViewConfigDao ( m_siteStatusViewConfigDao ) ; org . opennms . netmgt . model . OnmsNode node = new org . opennms . netmgt . model . OnmsNode ( ) ; node . setId ( 1 ) ; node . getAssetRecord ( ) . setBuilding ( \"HQ\" ) ; java . util . List < org . opennms . netmgt . model . OnmsNode > nodes = new java . util . ArrayList ( ) ; nodes . add ( node ) ; for ( org . opennms . netmgt . model . AggregateStatusDefinition def : defs ) { expect ( m_nodeDao . findAllByVarCharAssetColumnCategoryList ( \"building\" , \"HQ\" , def . getCategories ( ) ) ) . andReturn ( nodes ) ; } for ( org . opennms . netmgt . model . OnmsNode n : nodes ) { expect ( m_nodeDao . load ( n . getId ( ) ) ) . andReturn ( n ) ; } replay ( m_nodeDao ) ; expect ( m_categoryDao . findByName ( \"switches\" ) ) . andReturn ( catSwitches ) ; expect ( m_categoryDao . findByName ( \"routers\" ) ) . andReturn ( catRouters ) ; expect ( m_categoryDao . findByName ( \"servers\" ) ) . andReturn ( catServers ) ; replay ( m_categoryDao ) ; java . util . List < org . opennms . netmgt . config . siteStatusViews . RowDef > rows = new java . util . ArrayList ( ) ; org . opennms . netmgt . config . siteStatusViews . RowDef rowDef = new org . opennms . netmgt . config . siteStatusViews . RowDef ( ) ; org . opennms . netmgt . config . siteStatusViews . Category category = new org . opennms . netmgt . config . siteStatusViews . Category ( ) ; category . setName ( \"servers\" ) ; rowDef . addCategory ( category ) ; rows . add ( rowDef ) ; rowDef = new org . opennms . netmgt . config . siteStatusViews . RowDef ( ) ; category = new org . opennms . netmgt . config . siteStatusViews . Category ( ) ; category . setName ( \"switches\" ) ; rowDef . addCategory ( category ) ; category = new org . opennms . netmgt . config . siteStatusViews . Category ( ) ; category . setName ( \"routers\" ) ; rowDef . addCategory ( category ) ; rows . add ( rowDef ) ; org . opennms . netmgt . config . siteStatusViews . View view = new org . opennms . netmgt . config . siteStatusViews . View ( ) ; view . setRows ( rows ) ; expect ( m_siteStatusViewConfigDao . getView ( \"building\" ) ) . andReturn ( view ) ; replay ( m_siteStatusViewConfigDao ) ; aggrStati = aggregateSvc . createAggregateStatusesUsingNodeId ( node . getId ( ) , \"building\" ) ; verify ( m_nodeDao ) ; verify ( m_categoryDao ) ; verify ( m_siteStatusViewConfigDao ) ; \"<AssertPlaceHolder>\" ; } verify ( org . snmp4j . smi . VariableBinding ) { org . junit . Assert . assertNotNull ( \"variable<sp>binding<sp>should<sp>not<sp>be<sp>null\" , vb ) ; org . snmp4j . smi . Variable val = vb . getVariable ( ) ; org . junit . Assert . assertNotNull ( \"variable<sp>should<sp>not<sp>be<sp>null\" , val ) ; org . junit . Assert . assertEquals ( ( ( \"OID<sp>(value:<sp>\" + val ) + \")\" ) , new org . snmp4j . smi . OID ( m_expectedOid ) , vb . getOid ( ) ) ; org . junit . Assert . assertEquals ( \"syntax\" , m_expectedSyntax , vb . getSyntax ( ) ) ; org . junit . Assert . assertEquals ( \"value\" , m_expectedValue , val ) ; }", "answer": "org . junit . Assert . assertNotNull ( aggrStati )"}
{"focal": "read ( org . xml . sax . InputSource , org . apache . ws . commons . schema . utils . TargetNamespaceValidator ) { try { javax . xml . parsers . DocumentBuilderFactory docFac = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) ; docFac . setFeature ( XMLConstants . FEATURE_SECURE_PROCESSING , Boolean . TRUE ) ; docFac . setNamespaceAware ( true ) ; final javax . xml . parsers . DocumentBuilder builder = docFac . newDocumentBuilder ( ) ; org . w3c . dom . Document doc = null ; doc = parseDoPriv ( inputSource , builder , doc ) ; return read ( doc , inputSource . getSystemId ( ) , namespaceValidator ) ; } catch ( javax . xml . parsers . ParserConfigurationException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } catch ( java . io . IOException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } catch ( org . xml . sax . SAXException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } }", "testMethod": "testSerialization ( ) { javax . xml . parsers . DocumentBuilderFactory documentBuilderFactory = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) ; documentBuilderFactory . setNamespaceAware ( true ) ; org . w3c . dom . Document doc = documentBuilderFactory . newDocumentBuilder ( ) . parse ( tests . Resources . asURI ( \"/external/externalAnnotations.xsd\" ) ) ; org . apache . ws . commons . schema . XmlSchemaCollection schemaCol = new org . apache . ws . commons . schema . XmlSchemaCollection ( ) ; org . apache . ws . commons . schema . XmlSchema schema = schemaCol . read ( doc , null ) ; \"<AssertPlaceHolder>\" ; schema . write ( new java . io . ByteArrayOutputStream ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( schema )", "total": "testSerialization ( ) { javax . xml . parsers . DocumentBuilderFactory documentBuilderFactory = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) ; documentBuilderFactory . setNamespaceAware ( true ) ; org . w3c . dom . Document doc = documentBuilderFactory . newDocumentBuilder ( ) . parse ( tests . Resources . asURI ( \"/external/externalAnnotations.xsd\" ) ) ; org . apache . ws . commons . schema . XmlSchemaCollection schemaCol = new org . apache . ws . commons . schema . XmlSchemaCollection ( ) ; org . apache . ws . commons . schema . XmlSchema schema = schemaCol . read ( doc , null ) ; \"<AssertPlaceHolder>\" ; schema . write ( new java . io . ByteArrayOutputStream ( ) ) ; } read ( org . xml . sax . InputSource , org . apache . ws . commons . schema . utils . TargetNamespaceValidator ) { try { javax . xml . parsers . DocumentBuilderFactory docFac = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) ; docFac . setFeature ( XMLConstants . FEATURE_SECURE_PROCESSING , Boolean . TRUE ) ; docFac . setNamespaceAware ( true ) ; final javax . xml . parsers . DocumentBuilder builder = docFac . newDocumentBuilder ( ) ; org . w3c . dom . Document doc = null ; doc = parseDoPriv ( inputSource , builder , doc ) ; return read ( doc , inputSource . getSystemId ( ) , namespaceValidator ) ; } catch ( javax . xml . parsers . ParserConfigurationException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } catch ( java . io . IOException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } catch ( org . xml . sax . SAXException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( schema )"}
{"focal": "getDocument ( java . lang . String , java . lang . Class ) { java . lang . String body = com . vmware . admiral . BaseIntegrationSupportIT . sendRequest ( HttpMethod . GET , seflLink , null ) ; if ( ( body == null ) || ( body . isEmpty ( ) ) ) { return null ; } return com . vmware . xenon . common . Utils . fromJson ( body , type ) ; }", "testMethod": "testControlLoopStateCreatedOnStartUp ( ) { com . vmware . admiral . request . ContainerControlLoopService . ContainerControlLoopState controlLoopState = getDocument ( com . vmware . admiral . request . ContainerControlLoopService . ContainerControlLoopState . class , ContainerControlLoopService . CONTROL_LOOP_INFO_LINK ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( controlLoopState )", "total": "testControlLoopStateCreatedOnStartUp ( ) { com . vmware . admiral . request . ContainerControlLoopService . ContainerControlLoopState controlLoopState = getDocument ( com . vmware . admiral . request . ContainerControlLoopService . ContainerControlLoopState . class , ContainerControlLoopService . CONTROL_LOOP_INFO_LINK ) ; \"<AssertPlaceHolder>\" ; } getDocument ( java . lang . String , java . lang . Class ) { java . lang . String body = com . vmware . admiral . BaseIntegrationSupportIT . sendRequest ( HttpMethod . GET , seflLink , null ) ; if ( ( body == null ) || ( body . isEmpty ( ) ) ) { return null ; } return com . vmware . xenon . common . Utils . fromJson ( body , type ) ; }", "answer": "org . junit . Assert . assertNotNull ( controlLoopState )"}
{"focal": "createPlaneContainingLines ( gov . nasa . worldwind . geom . Line , gov . nasa . worldwind . geom . Line ) { au . gov . ga . worldwind . common . util . Validate . isTrue ( ( ( line1 != null ) && ( line2 != null ) ) , \"Two<sp>lines<sp>are<sp>required<sp>to<sp>create<sp>a<sp>plane<sp>in<sp>3D<sp>space\" ) ; gov . nasa . worldwind . geom . Vec4 point1 = line1 . getPointAt ( 0 ) ; gov . nasa . worldwind . geom . Vec4 point2 = line1 . getPointAt ( 1000 ) ; gov . nasa . worldwind . geom . Vec4 point3 = line2 . getPointAt ( 500 ) ; return au . gov . ga . worldwind . common . util . GeometryUtil . createPlaneFromThreePoints ( point1 , point2 , point3 ) ; }", "testMethod": "testCreatePlaneFromOffAxisLines ( ) { gov . nasa . worldwind . geom . Line line1 = gov . nasa . worldwind . geom . Line . fromSegment ( new gov . nasa . worldwind . geom . Vec4 ( 0 , 0 , 10 ) , new gov . nasa . worldwind . geom . Vec4 ( 1 , 0 , 10 ) ) ; gov . nasa . worldwind . geom . Line line2 = gov . nasa . worldwind . geom . Line . fromSegment ( new gov . nasa . worldwind . geom . Vec4 ( 0 , 0 , 10 ) , new gov . nasa . worldwind . geom . Vec4 ( 0 , 1 , 10 ) ) ; gov . nasa . worldwind . geom . Plane result = au . gov . ga . worldwind . common . util . GeometryUtil . createPlaneContainingLines ( line1 , line2 ) ; \"<AssertPlaceHolder>\" ; testIntersection ( result , new gov . nasa . worldwind . geom . Vec4 ( 0 , 0 , ( - 1 ) ) , new gov . nasa . worldwind . geom . Vec4 ( 0 , 0 , 1 ) , new gov . nasa . worldwind . geom . Vec4 ( 0 , 0 , 10 ) ) ; testIntersection ( result , new gov . nasa . worldwind . geom . Vec4 ( 0 , 10 , ( - 1 ) ) , new gov . nasa . worldwind . geom . Vec4 ( 0 , 10 , 1 ) , new gov . nasa . worldwind . geom . Vec4 ( 0 , 10 , 10 ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testCreatePlaneFromOffAxisLines ( ) { gov . nasa . worldwind . geom . Line line1 = gov . nasa . worldwind . geom . Line . fromSegment ( new gov . nasa . worldwind . geom . Vec4 ( 0 , 0 , 10 ) , new gov . nasa . worldwind . geom . Vec4 ( 1 , 0 , 10 ) ) ; gov . nasa . worldwind . geom . Line line2 = gov . nasa . worldwind . geom . Line . fromSegment ( new gov . nasa . worldwind . geom . Vec4 ( 0 , 0 , 10 ) , new gov . nasa . worldwind . geom . Vec4 ( 0 , 1 , 10 ) ) ; gov . nasa . worldwind . geom . Plane result = au . gov . ga . worldwind . common . util . GeometryUtil . createPlaneContainingLines ( line1 , line2 ) ; \"<AssertPlaceHolder>\" ; testIntersection ( result , new gov . nasa . worldwind . geom . Vec4 ( 0 , 0 , ( - 1 ) ) , new gov . nasa . worldwind . geom . Vec4 ( 0 , 0 , 1 ) , new gov . nasa . worldwind . geom . Vec4 ( 0 , 0 , 10 ) ) ; testIntersection ( result , new gov . nasa . worldwind . geom . Vec4 ( 0 , 10 , ( - 1 ) ) , new gov . nasa . worldwind . geom . Vec4 ( 0 , 10 , 1 ) , new gov . nasa . worldwind . geom . Vec4 ( 0 , 10 , 10 ) ) ; } createPlaneContainingLines ( gov . nasa . worldwind . geom . Line , gov . nasa . worldwind . geom . Line ) { au . gov . ga . worldwind . common . util . Validate . isTrue ( ( ( line1 != null ) && ( line2 != null ) ) , \"Two<sp>lines<sp>are<sp>required<sp>to<sp>create<sp>a<sp>plane<sp>in<sp>3D<sp>space\" ) ; gov . nasa . worldwind . geom . Vec4 point1 = line1 . getPointAt ( 0 ) ; gov . nasa . worldwind . geom . Vec4 point2 = line1 . getPointAt ( 1000 ) ; gov . nasa . worldwind . geom . Vec4 point3 = line2 . getPointAt ( 500 ) ; return au . gov . ga . worldwind . common . util . GeometryUtil . createPlaneFromThreePoints ( point1 , point2 , point3 ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "entityManagerFactory ( javax . sql . DataSource , org . springframework . orm . jpa . vendor . HibernateJpaVendorAdapter ) { final org . springframework . orm . jpa . LocalContainerEntityManagerFactoryBean factory = new org . springframework . orm . jpa . LocalContainerEntityManagerFactoryBean ( ) ; factory . setDataSource ( dataSource ) ; factory . setJpaVendorAdapter ( adapter ) ; factory . setPackagesToScan ( this . entityPackages ) ; return factory ; }", "testMethod": "entityManagerFactoryTest ( ) { System . out . print ( \"-><sp>entityManagerFactory()<sp>-<sp>\" ) ; ua . com . alexcoffee . config . DatabaseConfig databaseConfig = new ua . com . alexcoffee . config . DatabaseConfig ( ) ; javax . sql . DataSource dataSource = mock ( javax . sql . DataSource . class ) ; org . springframework . orm . jpa . vendor . HibernateJpaVendorAdapter jpaVendorAdapter = mock ( org . springframework . orm . jpa . vendor . HibernateJpaVendorAdapter . class ) ; \"<AssertPlaceHolder>\" ; System . out . println ( \"OK!\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( databaseConfig . entityManagerFactory ( dataSource , jpaVendorAdapter ) )", "total": "entityManagerFactoryTest ( ) { System . out . print ( \"-><sp>entityManagerFactory()<sp>-<sp>\" ) ; ua . com . alexcoffee . config . DatabaseConfig databaseConfig = new ua . com . alexcoffee . config . DatabaseConfig ( ) ; javax . sql . DataSource dataSource = mock ( javax . sql . DataSource . class ) ; org . springframework . orm . jpa . vendor . HibernateJpaVendorAdapter jpaVendorAdapter = mock ( org . springframework . orm . jpa . vendor . HibernateJpaVendorAdapter . class ) ; \"<AssertPlaceHolder>\" ; System . out . println ( \"OK!\" ) ; } entityManagerFactory ( javax . sql . DataSource , org . springframework . orm . jpa . vendor . HibernateJpaVendorAdapter ) { final org . springframework . orm . jpa . LocalContainerEntityManagerFactoryBean factory = new org . springframework . orm . jpa . LocalContainerEntityManagerFactoryBean ( ) ; factory . setDataSource ( dataSource ) ; factory . setJpaVendorAdapter ( adapter ) ; factory . setPackagesToScan ( this . entityPackages ) ; return factory ; }", "answer": "org . junit . Assert . assertNotNull ( databaseConfig . entityManagerFactory ( dataSource , jpaVendorAdapter ) )"}
{"focal": "getScenarioGridColumn ( java . lang . String , java . lang . String , java . lang . String , java . lang . String , org . drools . workbench . screens . scenariosimulation . model . FactMappingType , org . drools . workbench . screens . scenariosimulation . client . factories . ScenarioHeaderTextBoxSingletonDOMElementFactory , org . drools . workbench . screens . scenariosimulation . client . factories . ScenarioCellTextAreaSingletonDOMElementFactory ) { org . drools . workbench . screens . scenariosimulation . client . utils . ScenarioSimulationBuilders . HeaderBuilder headerBuilder = org . drools . workbench . screens . scenariosimulation . client . utils . ScenarioSimulationUtils . getHeaderBuilder ( instanceTitle , propertyTitle , columnId , columnGroup , factMappingType , factoryHeader ) ; return org . drools . workbench . screens . scenariosimulation . client . utils . ScenarioSimulationUtils . getScenarioGridColumn ( headerBuilder , factoryCell ) ; }", "testMethod": "getScenarioGridColumn1 ( ) { final org . drools . workbench . screens . scenariosimulation . client . widgets . ScenarioGridColumn retrieved = org . drools . workbench . screens . scenariosimulation . client . utils . ScenarioSimulationUtils . getScenarioGridColumn ( org . drools . workbench . screens . scenariosimulation . client . utils . COLUMN_INSTANCE_TITLE_FIRST , org . drools . workbench . screens . scenariosimulation . client . utils . COLUMN_PROPERTY_TITLE_FIRST , org . drools . workbench . screens . scenariosimulation . client . utils . COLUMN_ID , org . drools . workbench . screens . scenariosimulation . client . utils . COLUMN_GROUP_FIRST , factMappingType , scenarioHeaderTextBoxSingletonDOMElementFactoryMock , scenarioCellTextAreaSingletonDOMElementFactoryMock ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( retrieved )", "total": "getScenarioGridColumn1 ( ) { final org . drools . workbench . screens . scenariosimulation . client . widgets . ScenarioGridColumn retrieved = org . drools . workbench . screens . scenariosimulation . client . utils . ScenarioSimulationUtils . getScenarioGridColumn ( org . drools . workbench . screens . scenariosimulation . client . utils . COLUMN_INSTANCE_TITLE_FIRST , org . drools . workbench . screens . scenariosimulation . client . utils . COLUMN_PROPERTY_TITLE_FIRST , org . drools . workbench . screens . scenariosimulation . client . utils . COLUMN_ID , org . drools . workbench . screens . scenariosimulation . client . utils . COLUMN_GROUP_FIRST , factMappingType , scenarioHeaderTextBoxSingletonDOMElementFactoryMock , scenarioCellTextAreaSingletonDOMElementFactoryMock ) ; \"<AssertPlaceHolder>\" ; } getScenarioGridColumn ( java . lang . String , java . lang . String , java . lang . String , java . lang . String , org . drools . workbench . screens . scenariosimulation . model . FactMappingType , org . drools . workbench . screens . scenariosimulation . client . factories . ScenarioHeaderTextBoxSingletonDOMElementFactory , org . drools . workbench . screens . scenariosimulation . client . factories . ScenarioCellTextAreaSingletonDOMElementFactory ) { org . drools . workbench . screens . scenariosimulation . client . utils . ScenarioSimulationBuilders . HeaderBuilder headerBuilder = org . drools . workbench . screens . scenariosimulation . client . utils . ScenarioSimulationUtils . getHeaderBuilder ( instanceTitle , propertyTitle , columnId , columnGroup , factMappingType , factoryHeader ) ; return org . drools . workbench . screens . scenariosimulation . client . utils . ScenarioSimulationUtils . getScenarioGridColumn ( headerBuilder , factoryCell ) ; }", "answer": "org . junit . Assert . assertNotNull ( retrieved )"}
{"focal": "getBestIndividual ( ) { org . evosuite . testsuite . TestSuiteChromosome best = this . generateSuite ( ) ; if ( best . getTestChromosomes ( ) . isEmpty ( ) ) { for ( T test : this . getNonDominatedSolutions ( this . population ) ) { best . addTest ( ( ( org . evosuite . testcase . TestChromosome ) ( test ) ) ) ; } for ( org . evosuite . testsuite . TestSuiteFitnessFunction suiteFitness : this . suiteFitnessFunctions . keySet ( ) ) { best . setCoverage ( suiteFitness , 0.0 ) ; best . setFitness ( suiteFitness , 1.0 ) ; } return ( ( T ) ( best ) ) ; } this . computeCoverageAndFitness ( best ) ; return ( ( T ) ( best ) ) ; }", "testMethod": "testCVC4 ( ) { org . junit . Assume . assumeTrue ( ( ( java . lang . System . getenv ( \"cvc4_path\" ) ) != null ) ) ; org . evosuite . Properties . CVC4_PATH = java . lang . System . getenv ( \"cvc4_path\" ) ; org . evosuite . Properties . DSE_SOLVER = Properties . SolverType . CVC4_SOLVER ; org . evosuite . EvoSuite evosuite = new org . evosuite . EvoSuite ( ) ; java . lang . String targetClass = com . examples . with . different . packagename . concolic . Pat . class . getCanonicalName ( ) ; org . evosuite . Properties . TARGET_CLASS = targetClass ; org . evosuite . Properties . DSE_PROBABILITY = 1.0 ; org . evosuite . Properties . CRITERION = new org . evosuite . Properties . Criterion [ ] { org . evosuite . Properties . Criterion . LINE , org . evosuite . Properties . Criterion . BRANCH , org . evosuite . Properties . Criterion . EXCEPTION , org . evosuite . Properties . Criterion . WEAKMUTATION , org . evosuite . Properties . Criterion . OUTPUT , org . evosuite . Properties . Criterion . METHOD , org . evosuite . Properties . Criterion . METHODNOEXCEPTION , org . evosuite . Properties . Criterion . CBRANCH } ; java . lang . String [ ] command = new java . lang . String [ ] { \"-generateSuite\" , \"-class\" , targetClass } ; java . lang . Object result = evosuite . parseCommandLine ( command ) ; org . evosuite . ga . metaheuristics . GeneticAlgorithm < ? > ga = getGAFromResult ( result ) ; org . evosuite . testsuite . TestSuiteChromosome best = ( ( org . evosuite . testsuite . TestSuiteChromosome ) ( ga . getBestIndividual ( ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( best )", "total": "testCVC4 ( ) { org . junit . Assume . assumeTrue ( ( ( java . lang . System . getenv ( \"cvc4_path\" ) ) != null ) ) ; org . evosuite . Properties . CVC4_PATH = java . lang . System . getenv ( \"cvc4_path\" ) ; org . evosuite . Properties . DSE_SOLVER = Properties . SolverType . CVC4_SOLVER ; org . evosuite . EvoSuite evosuite = new org . evosuite . EvoSuite ( ) ; java . lang . String targetClass = com . examples . with . different . packagename . concolic . Pat . class . getCanonicalName ( ) ; org . evosuite . Properties . TARGET_CLASS = targetClass ; org . evosuite . Properties . DSE_PROBABILITY = 1.0 ; org . evosuite . Properties . CRITERION = new org . evosuite . Properties . Criterion [ ] { org . evosuite . Properties . Criterion . LINE , org . evosuite . Properties . Criterion . BRANCH , org . evosuite . Properties . Criterion . EXCEPTION , org . evosuite . Properties . Criterion . WEAKMUTATION , org . evosuite . Properties . Criterion . OUTPUT , org . evosuite . Properties . Criterion . METHOD , org . evosuite . Properties . Criterion . METHODNOEXCEPTION , org . evosuite . Properties . Criterion . CBRANCH } ; java . lang . String [ ] command = new java . lang . String [ ] { \"-generateSuite\" , \"-class\" , targetClass } ; java . lang . Object result = evosuite . parseCommandLine ( command ) ; org . evosuite . ga . metaheuristics . GeneticAlgorithm < ? > ga = getGAFromResult ( result ) ; org . evosuite . testsuite . TestSuiteChromosome best = ( ( org . evosuite . testsuite . TestSuiteChromosome ) ( ga . getBestIndividual ( ) ) ) ; \"<AssertPlaceHolder>\" ; } getBestIndividual ( ) { org . evosuite . testsuite . TestSuiteChromosome best = this . generateSuite ( ) ; if ( best . getTestChromosomes ( ) . isEmpty ( ) ) { for ( T test : this . getNonDominatedSolutions ( this . population ) ) { best . addTest ( ( ( org . evosuite . testcase . TestChromosome ) ( test ) ) ) ; } for ( org . evosuite . testsuite . TestSuiteFitnessFunction suiteFitness : this . suiteFitnessFunctions . keySet ( ) ) { best . setCoverage ( suiteFitness , 0.0 ) ; best . setFitness ( suiteFitness , 1.0 ) ; } return ( ( T ) ( best ) ) ; } this . computeCoverageAndFitness ( best ) ; return ( ( T ) ( best ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( best )"}
{"focal": "onSuccess ( me . hao0 . wechat . model . js . Ticket ) { org . junit . Assert . assertNotNull ( ticket ) ; System . out . println ( ticket ) ; }", "testMethod": "testTicketCallback ( ) { wechat . js ( ) . getTicket ( accessToken , TicketType . CARD , new me . hao0 . wechat . core . Callback < me . hao0 . wechat . model . js . Ticket > ( ) { @ me . hao0 . wechat . Override public void onSuccess ( me . hao0 . wechat . model . js . Ticket ticket ) { \"<AssertPlaceHolder>\" ; System . out . println ( ticket ) ; } @ me . hao0 . wechat . Override public void onFailure ( java . lang . Exception e ) { System . err . println ( e ) ; } } ) ; System . out . println ( \"main\" ) ; java . lang . Thread . sleep ( 1000000L ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( ticket )", "total": "testTicketCallback ( ) { wechat . js ( ) . getTicket ( accessToken , TicketType . CARD , new me . hao0 . wechat . core . Callback < me . hao0 . wechat . model . js . Ticket > ( ) { @ me . hao0 . wechat . Override public void onSuccess ( me . hao0 . wechat . model . js . Ticket ticket ) { \"<AssertPlaceHolder>\" ; System . out . println ( ticket ) ; } @ me . hao0 . wechat . Override public void onFailure ( java . lang . Exception e ) { System . err . println ( e ) ; } } ) ; System . out . println ( \"main\" ) ; java . lang . Thread . sleep ( 1000000L ) ; } onSuccess ( me . hao0 . wechat . model . js . Ticket ) { org . junit . Assert . assertNotNull ( ticket ) ; System . out . println ( ticket ) ; }", "answer": "org . junit . Assert . assertNotNull ( ticket )"}
{"focal": "getLogChannelFileWriterBufferIds ( ) { java . util . Set < java . lang . String > bufferIds = this . fileWriterBuffers . keySet ( ) ; java . util . Set < java . lang . String > ids = new java . util . HashSet ( ) ; for ( java . lang . String id : bufferIds ) { ids . addAll ( getLogChannelChildren ( id ) ) ; } ids . addAll ( bufferIds ) ; return ids ; }", "testMethod": "testFileWritersIds ( ) { java . lang . String id = \"1\" ; org . pentaho . di . core . logging . LoggingRegistry loggingRegistry = org . pentaho . di . core . logging . LoggingRegistry . getInstance ( ) ; org . pentaho . di . core . logging . LogChannelFileWriterBuffer buffer = new org . pentaho . di . core . logging . LogChannelFileWriterBuffer ( id ) ; loggingRegistry . registerLogChannelFileWriterBuffer ( buffer ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( loggingRegistry . getLogChannelFileWriterBufferIds ( ) )", "total": "testFileWritersIds ( ) { java . lang . String id = \"1\" ; org . pentaho . di . core . logging . LoggingRegistry loggingRegistry = org . pentaho . di . core . logging . LoggingRegistry . getInstance ( ) ; org . pentaho . di . core . logging . LogChannelFileWriterBuffer buffer = new org . pentaho . di . core . logging . LogChannelFileWriterBuffer ( id ) ; loggingRegistry . registerLogChannelFileWriterBuffer ( buffer ) ; \"<AssertPlaceHolder>\" ; } getLogChannelFileWriterBufferIds ( ) { java . util . Set < java . lang . String > bufferIds = this . fileWriterBuffers . keySet ( ) ; java . util . Set < java . lang . String > ids = new java . util . HashSet ( ) ; for ( java . lang . String id : bufferIds ) { ids . addAll ( getLogChannelChildren ( id ) ) ; } ids . addAll ( bufferIds ) ; return ids ; }", "answer": "org . junit . Assert . assertNotNull ( loggingRegistry . getLogChannelFileWriterBufferIds ( ) )"}
{"focal": "execSelect ( ) { com . franz . agraph . repository . AGTupleQuery tq = model . getGraph ( ) . getConnection ( ) . prepareTupleQuery ( query . getLanguage ( ) , query . getQueryString ( ) ) ; tq . setIncludeInferred ( ( ( model . getGraph ( ) ) instanceof com . franz . agraph . jena . AGInfGraph ) ) ; tq . setEntailmentRegime ( model . getGraph ( ) . getEntailmentRegime ( ) ) ; tq . setCheckVariables ( query . isCheckVariables ( ) ) ; tq . setLimit ( query . getLimit ( ) ) ; tq . setOffset ( query . getOffset ( ) ) ; if ( ( binding ) != null ) { java . util . Iterator < java . lang . String > vars = binding . varNames ( ) ; while ( vars . hasNext ( ) ) { java . lang . String var = vars . next ( ) ; tq . setBinding ( var , model . getGraph ( ) . vf . asValue ( binding . get ( var ) . asNode ( ) ) ) ; } } org . eclipse . rdf4j . query . TupleQueryResult result ; try { tq . setDataset ( model . getGraph ( ) . getDataset ( ) ) ; if ( ( timeout ) > 0 ) { tq . setMaxExecutionTime ( ( ( int ) ( ( timeout ) / 1000 ) ) ) ; } result = tq . evaluate ( ) ; } catch ( org . eclipse . rdf4j . query . QueryEvaluationException e ) { throw new org . apache . jena . query . QueryException ( e ) ; } resultToClose = result ; return new com . franz . agraph . jena . AGResultSet ( result , model ) ; }", "testMethod": "testSetTimeoutWithTimeunitForExecSelectWith1hour ( ) { java . lang . String queryString = \"select<sp>?s<sp>?p<sp>?o<sp>where<sp>{<sp>?s<sp>?p<sp>?o<sp>.<sp>}<sp>limit<sp>1\" ; com . franz . agraph . jena . AGQuery query = com . franz . agraph . jena . AGQueryFactory . create ( queryString ) ; try ( com . franz . agraph . jena . AGQueryExecution qe = com . franz . agraph . jena . AGQueryExecutionFactory . create ( query , test . AGQueryExecutionTest . model ) ) { qe . setTimeout ( 1 , TimeUnit . HOURS ) ; org . apache . jena . query . ResultSet rs = qe . execSelect ( ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( rs )", "total": "testSetTimeoutWithTimeunitForExecSelectWith1hour ( ) { java . lang . String queryString = \"select<sp>?s<sp>?p<sp>?o<sp>where<sp>{<sp>?s<sp>?p<sp>?o<sp>.<sp>}<sp>limit<sp>1\" ; com . franz . agraph . jena . AGQuery query = com . franz . agraph . jena . AGQueryFactory . create ( queryString ) ; try ( com . franz . agraph . jena . AGQueryExecution qe = com . franz . agraph . jena . AGQueryExecutionFactory . create ( query , test . AGQueryExecutionTest . model ) ) { qe . setTimeout ( 1 , TimeUnit . HOURS ) ; org . apache . jena . query . ResultSet rs = qe . execSelect ( ) ; \"<AssertPlaceHolder>\" ; } } execSelect ( ) { com . franz . agraph . repository . AGTupleQuery tq = model . getGraph ( ) . getConnection ( ) . prepareTupleQuery ( query . getLanguage ( ) , query . getQueryString ( ) ) ; tq . setIncludeInferred ( ( ( model . getGraph ( ) ) instanceof com . franz . agraph . jena . AGInfGraph ) ) ; tq . setEntailmentRegime ( model . getGraph ( ) . getEntailmentRegime ( ) ) ; tq . setCheckVariables ( query . isCheckVariables ( ) ) ; tq . setLimit ( query . getLimit ( ) ) ; tq . setOffset ( query . getOffset ( ) ) ; if ( ( binding ) != null ) { java . util . Iterator < java . lang . String > vars = binding . varNames ( ) ; while ( vars . hasNext ( ) ) { java . lang . String var = vars . next ( ) ; tq . setBinding ( var , model . getGraph ( ) . vf . asValue ( binding . get ( var ) . asNode ( ) ) ) ; } } org . eclipse . rdf4j . query . TupleQueryResult result ; try { tq . setDataset ( model . getGraph ( ) . getDataset ( ) ) ; if ( ( timeout ) > 0 ) { tq . setMaxExecutionTime ( ( ( int ) ( ( timeout ) / 1000 ) ) ) ; } result = tq . evaluate ( ) ; } catch ( org . eclipse . rdf4j . query . QueryEvaluationException e ) { throw new org . apache . jena . query . QueryException ( e ) ; } resultToClose = result ; return new com . franz . agraph . jena . AGResultSet ( result , model ) ; }", "answer": "org . junit . Assert . assertNotNull ( rs )"}
{"focal": "parsePLSQL ( java . lang . String ) { return parsePLSQL ( net . sourceforge . pmd . lang . LanguageRegistry . getLanguage ( PLSQLLanguageModule . NAME ) . getDefaultVersion ( ) , code ) ; }", "testMethod": "parseSelectExpression ( ) { java . lang . String code = org . apache . commons . io . IOUtils . toString ( this . getClass ( ) . getResourceAsStream ( \"SelectExpressions.pls\" ) , StandardCharsets . UTF_8 ) ; net . sourceforge . pmd . lang . plsql . ast . ASTInput input = parsePLSQL ( code ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( input )", "total": "parseSelectExpression ( ) { java . lang . String code = org . apache . commons . io . IOUtils . toString ( this . getClass ( ) . getResourceAsStream ( \"SelectExpressions.pls\" ) , StandardCharsets . UTF_8 ) ; net . sourceforge . pmd . lang . plsql . ast . ASTInput input = parsePLSQL ( code ) ; \"<AssertPlaceHolder>\" ; } parsePLSQL ( java . lang . String ) { return parsePLSQL ( net . sourceforge . pmd . lang . LanguageRegistry . getLanguage ( PLSQLLanguageModule . NAME ) . getDefaultVersion ( ) , code ) ; }", "answer": "org . junit . Assert . assertNotNull ( input )"}
{"focal": "getResourceInBundleOrFragments ( org . osgi . framework . Bundle , java . lang . String ) { java . lang . String dirName = \"/\" ; java . lang . String fileName = name ; int index = name . lastIndexOf ( '/' ) ; if ( index > 0 ) { dirName = name . substring ( 0 , index ) ; fileName = name . substring ( ( index + 1 ) ) ; } else if ( index == 0 ) { fileName = name . substring ( 1 ) ; } if ( ( fileName . length ( ) ) == 0 ) { if ( ! ( dirName . equals ( \"/\" ) ) ) { dirName = dirName + \"/\" ; } return bundle . getEntry ( dirName ) ; } java . util . Enumeration < java . net . URL > enumeration = bundle . findEntries ( dirName , fileName , false ) ; if ( ( enumeration == null ) || ( ! ( enumeration . hasMoreElements ( ) ) ) ) { return null ; } java . util . List < java . net . URL > list = java . util . Collections . list ( enumeration ) ; return list . get ( ( ( list . size ( ) ) - 1 ) ) ; }", "testMethod": "testGetResourceInBundleOrFragmentsWhenRoot ( ) { java . net . URL url = com . liferay . osgi . util . BundleUtil . getResourceInBundleOrFragments ( _bundle , \"/\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( url )", "total": "testGetResourceInBundleOrFragmentsWhenRoot ( ) { java . net . URL url = com . liferay . osgi . util . BundleUtil . getResourceInBundleOrFragments ( _bundle , \"/\" ) ; \"<AssertPlaceHolder>\" ; } getResourceInBundleOrFragments ( org . osgi . framework . Bundle , java . lang . String ) { java . lang . String dirName = \"/\" ; java . lang . String fileName = name ; int index = name . lastIndexOf ( '/' ) ; if ( index > 0 ) { dirName = name . substring ( 0 , index ) ; fileName = name . substring ( ( index + 1 ) ) ; } else if ( index == 0 ) { fileName = name . substring ( 1 ) ; } if ( ( fileName . length ( ) ) == 0 ) { if ( ! ( dirName . equals ( \"/\" ) ) ) { dirName = dirName + \"/\" ; } return bundle . getEntry ( dirName ) ; } java . util . Enumeration < java . net . URL > enumeration = bundle . findEntries ( dirName , fileName , false ) ; if ( ( enumeration == null ) || ( ! ( enumeration . hasMoreElements ( ) ) ) ) { return null ; } java . util . List < java . net . URL > list = java . util . Collections . list ( enumeration ) ; return list . get ( ( ( list . size ( ) ) - 1 ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( url )"}
{"focal": "getUserSecurityDAO ( ) { return userSecurityDAO ; }", "testMethod": "getFirstSecurityUser ( ) { io . ifar . security . realm . model . ISecurityUser u = io . ifar . security . dao . jdbi . TestUserDAO . harness . getUserSecurityDAO ( ) . findUserWithoutRoles ( \"TEST\" ) ; \"<AssertPlaceHolder>\" ; io . ifar . security . dao . jdbi . TestUserDAO . LOG . info ( \"The<sp>TEST<sp>security<sp>user:<sp>{}\" , u ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( u )", "total": "getFirstSecurityUser ( ) { io . ifar . security . realm . model . ISecurityUser u = io . ifar . security . dao . jdbi . TestUserDAO . harness . getUserSecurityDAO ( ) . findUserWithoutRoles ( \"TEST\" ) ; \"<AssertPlaceHolder>\" ; io . ifar . security . dao . jdbi . TestUserDAO . LOG . info ( \"The<sp>TEST<sp>security<sp>user:<sp>{}\" , u ) ; } getUserSecurityDAO ( ) { return userSecurityDAO ; }", "answer": "org . junit . Assert . assertNotNull ( u )"}
{"focal": "getName ( ) { return _name ; }", "testMethod": "testCreation ( ) { org . ccnx . ccn . impl . support . Log . info ( Log . FAC_TEST , \"Starting<sp>testCreation\" ) ; java . lang . Integer faceID = new java . lang . Integer ( ( - 142 ) ) ; org . ccnx . ccn . profiles . ccnd . FaceManager mgr = null ; try { mgr = new org . ccnx . ccn . profiles . ccnd . FaceManager ( putHandle ) ; faceID = mgr . createFace ( NetworkProtocol . UDP , \"10.1.1.1\" , new java . lang . Integer ( org . ccnx . ccn . impl . CCNNetworkManager . DEFAULT_AGENT_PORT ) ) ; System . out . println ( ( \"Created<sp>face:<sp>\" + faceID ) ) ; } catch ( org . ccnx . ccn . profiles . ccnd . CCNDaemonException e ) { System . out . println ( ( ( ( \"Exception<sp>\" + ( e . getClass ( ) . getName ( ) ) ) + \",<sp>message:<sp>\" ) + ( e . getMessage ( ) ) ) ) ; System . out . println ( \"Failed<sp>to<sp>create<sp>face.\" ) ; e . printStackTrace ( ) ; org . junit . Assert . fail ( \"Failed<sp>to<sp>create<sp>face.\" ) ; } \"<AssertPlaceHolder>\" ; try { mgr . deleteFace ( faceID ) ; } catch ( org . ccnx . ccn . profiles . ccnd . CCNDaemonException e ) { System . out . println ( ( ( ( \"Exception<sp>\" + ( e . getClass ( ) . getName ( ) ) ) + \",<sp>message:<sp>\" ) + ( e . getMessage ( ) ) ) ) ; System . out . println ( \"Failed<sp>to<sp>delete<sp>face.\" ) ; e . printStackTrace ( ) ; org . junit . Assert . fail ( \"Failed<sp>to<sp>delete<sp>face.\" ) ; } try { mgr . deleteFace ( faceID ) ; org . junit . Assert . fail ( \"Failed<sp>to<sp>receive<sp>expected<sp>CCNDaemonException<sp>deleting<sp>already<sp>deleted<sp>face.\" ) ; } catch ( org . ccnx . ccn . profiles . ccnd . CCNDaemonException e ) { System . out . println ( ( ( ( \"Received<sp>expected<sp>exception<sp>\" + ( e . getClass ( ) . getName ( ) ) ) + \",<sp>message:<sp>\" ) + ( e . getMessage ( ) ) ) ) ; } org . ccnx . ccn . impl . support . Log . info ( Log . FAC_TEST , \"Completed<sp>testCreation\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( mgr )", "total": "testCreation ( ) { org . ccnx . ccn . impl . support . Log . info ( Log . FAC_TEST , \"Starting<sp>testCreation\" ) ; java . lang . Integer faceID = new java . lang . Integer ( ( - 142 ) ) ; org . ccnx . ccn . profiles . ccnd . FaceManager mgr = null ; try { mgr = new org . ccnx . ccn . profiles . ccnd . FaceManager ( putHandle ) ; faceID = mgr . createFace ( NetworkProtocol . UDP , \"10.1.1.1\" , new java . lang . Integer ( org . ccnx . ccn . impl . CCNNetworkManager . DEFAULT_AGENT_PORT ) ) ; System . out . println ( ( \"Created<sp>face:<sp>\" + faceID ) ) ; } catch ( org . ccnx . ccn . profiles . ccnd . CCNDaemonException e ) { System . out . println ( ( ( ( \"Exception<sp>\" + ( e . getClass ( ) . getName ( ) ) ) + \",<sp>message:<sp>\" ) + ( e . getMessage ( ) ) ) ) ; System . out . println ( \"Failed<sp>to<sp>create<sp>face.\" ) ; e . printStackTrace ( ) ; org . junit . Assert . fail ( \"Failed<sp>to<sp>create<sp>face.\" ) ; } \"<AssertPlaceHolder>\" ; try { mgr . deleteFace ( faceID ) ; } catch ( org . ccnx . ccn . profiles . ccnd . CCNDaemonException e ) { System . out . println ( ( ( ( \"Exception<sp>\" + ( e . getClass ( ) . getName ( ) ) ) + \",<sp>message:<sp>\" ) + ( e . getMessage ( ) ) ) ) ; System . out . println ( \"Failed<sp>to<sp>delete<sp>face.\" ) ; e . printStackTrace ( ) ; org . junit . Assert . fail ( \"Failed<sp>to<sp>delete<sp>face.\" ) ; } try { mgr . deleteFace ( faceID ) ; org . junit . Assert . fail ( \"Failed<sp>to<sp>receive<sp>expected<sp>CCNDaemonException<sp>deleting<sp>already<sp>deleted<sp>face.\" ) ; } catch ( org . ccnx . ccn . profiles . ccnd . CCNDaemonException e ) { System . out . println ( ( ( ( \"Received<sp>expected<sp>exception<sp>\" + ( e . getClass ( ) . getName ( ) ) ) + \",<sp>message:<sp>\" ) + ( e . getMessage ( ) ) ) ) ; } org . ccnx . ccn . impl . support . Log . info ( Log . FAC_TEST , \"Completed<sp>testCreation\" ) ; } getName ( ) { return _name ; }", "answer": "org . junit . Assert . assertNotNull ( mgr )"}
{"focal": "loadModel ( java . lang . String ) { org . nd4j . linalg . io . ClassPathResource modelResource = new org . nd4j . linalg . io . ClassPathResource ( modelFilename , classLoader ) ; org . deeplearning4j . nn . multilayer . MultiLayerNetwork model = null ; try { model = org . deeplearning4j . nn . modelimport . keras . KerasModelImport . importKerasSequentialModelAndWeights ( modelResource . getFile ( ) . getAbsolutePath ( ) ) ; } catch ( java . io . IOException | org . deeplearning4j . nn . modelimport . keras . exceptions . InvalidKerasConfigurationException | org . deeplearning4j . nn . modelimport . keras . exceptions . UnsupportedKerasConfigurationException e ) { e . printStackTrace ( ) ; } return model ; }", "testMethod": "testH5WithoutTensorflowScope ( ) { org . deeplearning4j . nn . multilayer . MultiLayerNetwork model = loadModel ( \"modelimport/keras/tfscope/model.h5\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( model )", "total": "testH5WithoutTensorflowScope ( ) { org . deeplearning4j . nn . multilayer . MultiLayerNetwork model = loadModel ( \"modelimport/keras/tfscope/model.h5\" ) ; \"<AssertPlaceHolder>\" ; } loadModel ( java . lang . String ) { org . nd4j . linalg . io . ClassPathResource modelResource = new org . nd4j . linalg . io . ClassPathResource ( modelFilename , classLoader ) ; org . deeplearning4j . nn . multilayer . MultiLayerNetwork model = null ; try { model = org . deeplearning4j . nn . modelimport . keras . KerasModelImport . importKerasSequentialModelAndWeights ( modelResource . getFile ( ) . getAbsolutePath ( ) ) ; } catch ( java . io . IOException | org . deeplearning4j . nn . modelimport . keras . exceptions . InvalidKerasConfigurationException | org . deeplearning4j . nn . modelimport . keras . exceptions . UnsupportedKerasConfigurationException e ) { e . printStackTrace ( ) ; } return model ; }", "answer": "org . junit . Assert . assertNotNull ( model )"}
{"focal": "getFailurePolicy ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment ) { org . apache . hadoop . conf . Configuration conf = env . getConfiguration ( ) ; try { org . apache . phoenix . hbase . index . write . IndexFailurePolicy committer = conf . getClass ( org . apache . phoenix . hbase . index . write . IndexWriter . INDEX_FAILURE_POLICY_CONF_KEY , org . apache . phoenix . hbase . index . write . KillServerOnFailurePolicy . class , org . apache . phoenix . hbase . index . write . IndexFailurePolicy . class ) . newInstance ( ) ; return committer ; } catch ( java . lang . InstantiationException e ) { throw new java . io . IOException ( e ) ; } catch ( java . lang . IllegalAccessException e ) { throw new java . io . IOException ( e ) ; } }", "testMethod": "getDefaultFailurePolicy ( ) { org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( false ) ; org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment env = org . mockito . Mockito . mock ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment . class ) ; org . mockito . Mockito . when ( env . getConfiguration ( ) ) . thenReturn ( conf ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . apache . phoenix . hbase . index . write . IndexWriter . getFailurePolicy ( env ) )", "total": "getDefaultFailurePolicy ( ) { org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( false ) ; org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment env = org . mockito . Mockito . mock ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment . class ) ; org . mockito . Mockito . when ( env . getConfiguration ( ) ) . thenReturn ( conf ) ; \"<AssertPlaceHolder>\" ; } getFailurePolicy ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment ) { org . apache . hadoop . conf . Configuration conf = env . getConfiguration ( ) ; try { org . apache . phoenix . hbase . index . write . IndexFailurePolicy committer = conf . getClass ( org . apache . phoenix . hbase . index . write . IndexWriter . INDEX_FAILURE_POLICY_CONF_KEY , org . apache . phoenix . hbase . index . write . KillServerOnFailurePolicy . class , org . apache . phoenix . hbase . index . write . IndexFailurePolicy . class ) . newInstance ( ) ; return committer ; } catch ( java . lang . InstantiationException e ) { throw new java . io . IOException ( e ) ; } catch ( java . lang . IllegalAccessException e ) { throw new java . io . IOException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( org . apache . phoenix . hbase . index . write . IndexWriter . getFailurePolicy ( env ) )"}
{"focal": "getInstance ( org . apache . reef . tang . implementation . java . Node ) { assertNotConcurrent ( ) ; @ org . apache . reef . tang . implementation . java . SuppressWarnings ( \"unchecked\" ) final org . apache . reef . tang . implementation . java . InjectionPlan < U > plan = ( ( org . apache . reef . tang . implementation . java . InjectionPlan < U > ) ( getInjectionPlan ( n ) ) ) ; final U u = ( ( U ) ( injectFromPlan ( plan ) ) ) ; while ( ! ( pendingFutures . isEmpty ( ) ) ) { final org . apache . reef . tang . implementation . java . Iterator < org . apache . reef . tang . implementation . java . InjectionFuture < ? > > i = pendingFutures . iterator ( ) ; final org . apache . reef . tang . implementation . java . InjectionFuture < ? > f = i . next ( ) ; pendingFutures . remove ( f ) ; f . get ( ) ; } return u ; }", "testMethod": "testEndToEnd ( ) { final org . apache . reef . tang . Tang tang = Tang . Factory . getTang ( ) ; final org . apache . reef . tang . JavaConfigurationBuilder cb = tang . newConfigurationBuilder ( org . apache . reef . tang . implementation . java . TestParameterParser . BarParser . class ) ; cb . bindNamedParameter ( org . apache . reef . tang . implementation . java . TestParameterParser . SomeNamedFoo . class , \"hdfs://woot\" ) ; final org . apache . reef . tang . implementation . java . TestParameterParser . ILikeBars ilb = tang . newInjector ( cb . build ( ) ) . getInstance ( org . apache . reef . tang . implementation . java . TestParameterParser . ILikeBars . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ilb )", "total": "testEndToEnd ( ) { final org . apache . reef . tang . Tang tang = Tang . Factory . getTang ( ) ; final org . apache . reef . tang . JavaConfigurationBuilder cb = tang . newConfigurationBuilder ( org . apache . reef . tang . implementation . java . TestParameterParser . BarParser . class ) ; cb . bindNamedParameter ( org . apache . reef . tang . implementation . java . TestParameterParser . SomeNamedFoo . class , \"hdfs://woot\" ) ; final org . apache . reef . tang . implementation . java . TestParameterParser . ILikeBars ilb = tang . newInjector ( cb . build ( ) ) . getInstance ( org . apache . reef . tang . implementation . java . TestParameterParser . ILikeBars . class ) ; \"<AssertPlaceHolder>\" ; } getInstance ( org . apache . reef . tang . implementation . java . Node ) { assertNotConcurrent ( ) ; @ org . apache . reef . tang . implementation . java . SuppressWarnings ( \"unchecked\" ) final org . apache . reef . tang . implementation . java . InjectionPlan < U > plan = ( ( org . apache . reef . tang . implementation . java . InjectionPlan < U > ) ( getInjectionPlan ( n ) ) ) ; final U u = ( ( U ) ( injectFromPlan ( plan ) ) ) ; while ( ! ( pendingFutures . isEmpty ( ) ) ) { final org . apache . reef . tang . implementation . java . Iterator < org . apache . reef . tang . implementation . java . InjectionFuture < ? > > i = pendingFutures . iterator ( ) ; final org . apache . reef . tang . implementation . java . InjectionFuture < ? > f = i . next ( ) ; pendingFutures . remove ( f ) ; f . get ( ) ; } return u ; }", "answer": "org . junit . Assert . assertNotNull ( ilb )"}
{"focal": "getMemberForSignature ( org . adoptopenjdk . jitwatch . model . MemberSignatureParts ) { org . adoptopenjdk . jitwatch . model . IMetaMember result = null ; if ( DEBUG_LOGGING_SIG_MATCH ) { org . adoptopenjdk . jitwatch . model . MetaClass . logger . debug ( \"Comparing:<sp>{}<sp>members<sp>of<sp>{}\" , getMetaMembers ( ) . size ( ) , this ) ; } for ( org . adoptopenjdk . jitwatch . model . IMetaMember member : getMetaMembers ( ) ) { if ( member . matchesSignature ( msp , true ) ) { result = member ; break ; } } return result ; }", "testMethod": "testVarArgsInBytecodeSignatureMatches ( ) { java . lang . String coreClassWithVarArgs = getClass ( ) . getName ( ) ; org . adoptopenjdk . jitwatch . model . JITDataModel model = new org . adoptopenjdk . jitwatch . model . JITDataModel ( ) ; org . adoptopenjdk . jitwatch . model . MetaClass metaClass = null ; try { metaClass = model . buildAndGetMetaClass ( org . adoptopenjdk . jitwatch . util . ClassUtil . loadClassWithoutInitialising ( coreClassWithVarArgs ) ) ; } catch ( java . lang . ClassNotFoundException cnfe ) { cnfe . printStackTrace ( ) ; org . junit . Assert . fail ( ) ; } java . lang . String bytecodeSig = \"public<sp>void<sp>doSomethingWithVarArgs(java.lang.String...)\" ; org . adoptopenjdk . jitwatch . model . MemberSignatureParts msp = org . adoptopenjdk . jitwatch . model . MemberSignatureParts . fromBytecodeSignature ( \"org.adoptopenjdk.jitwatch.test.TestParseUtil\" , bytecodeSig ) ; org . adoptopenjdk . jitwatch . model . IMetaMember foundVarArgsMethod = metaClass . getMemberForSignature ( msp ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( foundVarArgsMethod )", "total": "testVarArgsInBytecodeSignatureMatches ( ) { java . lang . String coreClassWithVarArgs = getClass ( ) . getName ( ) ; org . adoptopenjdk . jitwatch . model . JITDataModel model = new org . adoptopenjdk . jitwatch . model . JITDataModel ( ) ; org . adoptopenjdk . jitwatch . model . MetaClass metaClass = null ; try { metaClass = model . buildAndGetMetaClass ( org . adoptopenjdk . jitwatch . util . ClassUtil . loadClassWithoutInitialising ( coreClassWithVarArgs ) ) ; } catch ( java . lang . ClassNotFoundException cnfe ) { cnfe . printStackTrace ( ) ; org . junit . Assert . fail ( ) ; } java . lang . String bytecodeSig = \"public<sp>void<sp>doSomethingWithVarArgs(java.lang.String...)\" ; org . adoptopenjdk . jitwatch . model . MemberSignatureParts msp = org . adoptopenjdk . jitwatch . model . MemberSignatureParts . fromBytecodeSignature ( \"org.adoptopenjdk.jitwatch.test.TestParseUtil\" , bytecodeSig ) ; org . adoptopenjdk . jitwatch . model . IMetaMember foundVarArgsMethod = metaClass . getMemberForSignature ( msp ) ; \"<AssertPlaceHolder>\" ; } getMemberForSignature ( org . adoptopenjdk . jitwatch . model . MemberSignatureParts ) { org . adoptopenjdk . jitwatch . model . IMetaMember result = null ; if ( DEBUG_LOGGING_SIG_MATCH ) { org . adoptopenjdk . jitwatch . model . MetaClass . logger . debug ( \"Comparing:<sp>{}<sp>members<sp>of<sp>{}\" , getMetaMembers ( ) . size ( ) , this ) ; } for ( org . adoptopenjdk . jitwatch . model . IMetaMember member : getMetaMembers ( ) ) { if ( member . matchesSignature ( msp , true ) ) { result = member ; break ; } } return result ; }", "answer": "org . junit . Assert . assertNotNull ( foundVarArgsMethod )"}
{"focal": "construct ( java . lang . String , java . lang . Boolean , java . lang . Boolean ) { if ( java . util . Objects . equals ( first , second ) ) { return null ; } return new org . openscience . cdk . tools . diff . tree . BooleanDifference ( name , first , second ) ; }", "testMethod": "testDiff ( ) { org . openscience . cdk . tools . diff . tree . IDifference result = org . openscience . cdk . tools . diff . tree . BooleanDifference . construct ( \"Foo\" , true , false ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testDiff ( ) { org . openscience . cdk . tools . diff . tree . IDifference result = org . openscience . cdk . tools . diff . tree . BooleanDifference . construct ( \"Foo\" , true , false ) ; \"<AssertPlaceHolder>\" ; } construct ( java . lang . String , java . lang . Boolean , java . lang . Boolean ) { if ( java . util . Objects . equals ( first , second ) ) { return null ; } return new org . openscience . cdk . tools . diff . tree . BooleanDifference ( name , first , second ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "create ( java . lang . String , java . lang . String ) { return create ( beginString , defaultApplVerID , msgType ) ; }", "testMethod": "testSessionRegisteredCorrectly ( ) { final quickfix . SessionSettings settings = quickfix . SessionSettingsTest . setUpSession ( null ) ; settings . setString ( Session . SETTING_USE_DATA_DICTIONARY , \"N\" ) ; quickfix . JdbcTestSupport . setHypersonicSettings ( settings ) ; final quickfix . SessionID sessionID = new quickfix . SessionID ( \"FIX.4.2\" , \"SENDER-sessionRegister\" , \"TARGET-sessionRegister\" ) ; settings . setString ( sessionID , \"ConnectionType\" , \"acceptor\" ) ; final quickfix . DefaultSessionFactory factory = new quickfix . DefaultSessionFactory ( new quickfix . UnitTestApplication ( ) , new quickfix . MemoryStoreFactory ( ) , new quickfix . JdbcLogFactory ( settings ) ) ; try { try ( quickfix . Session session = factory . create ( sessionID , settings ) ) { \"<AssertPlaceHolder>\" ; } } catch ( final java . lang . NullPointerException nex ) { org . junit . Assert . fail ( ( \"Session<sp>not<sp>registering<sp>correctly<sp>so<sp>JdbcLog<sp>fails<sp>while<sp>printing<sp>an<sp>error:<sp>\" + ( nex . getMessage ( ) ) ) ) ; } catch ( final java . lang . NoClassDefFoundError e ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( session )", "total": "testSessionRegisteredCorrectly ( ) { final quickfix . SessionSettings settings = quickfix . SessionSettingsTest . setUpSession ( null ) ; settings . setString ( Session . SETTING_USE_DATA_DICTIONARY , \"N\" ) ; quickfix . JdbcTestSupport . setHypersonicSettings ( settings ) ; final quickfix . SessionID sessionID = new quickfix . SessionID ( \"FIX.4.2\" , \"SENDER-sessionRegister\" , \"TARGET-sessionRegister\" ) ; settings . setString ( sessionID , \"ConnectionType\" , \"acceptor\" ) ; final quickfix . DefaultSessionFactory factory = new quickfix . DefaultSessionFactory ( new quickfix . UnitTestApplication ( ) , new quickfix . MemoryStoreFactory ( ) , new quickfix . JdbcLogFactory ( settings ) ) ; try { try ( quickfix . Session session = factory . create ( sessionID , settings ) ) { \"<AssertPlaceHolder>\" ; } } catch ( final java . lang . NullPointerException nex ) { org . junit . Assert . fail ( ( \"Session<sp>not<sp>registering<sp>correctly<sp>so<sp>JdbcLog<sp>fails<sp>while<sp>printing<sp>an<sp>error:<sp>\" + ( nex . getMessage ( ) ) ) ) ; } catch ( final java . lang . NoClassDefFoundError e ) { } } create ( java . lang . String , java . lang . String ) { return create ( beginString , defaultApplVerID , msgType ) ; }", "answer": "org . junit . Assert . assertNotNull ( session )"}
{"focal": "getInsurance ( ) { return insurance ; }", "testMethod": "testShipmentWithInsurance ( ) { com . easypost . Shipment shipment = com . easypost . EasyPostTest . createDefaultShipmentDomestic ( ) ; java . util . List < java . lang . String > buyCarriers = new java . util . ArrayList < java . lang . String > ( ) ; buyCarriers . add ( \"USPS\" ) ; shipment = shipment . buy ( shipment . lowestRate ( buyCarriers ) ) ; java . util . Map < java . lang . String , java . lang . Object > insureMap = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; insureMap . put ( \"amount\" , 100.0 ) ; shipment = shipment . insure ( insureMap ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( shipment . getInsurance ( ) )", "total": "testShipmentWithInsurance ( ) { com . easypost . Shipment shipment = com . easypost . EasyPostTest . createDefaultShipmentDomestic ( ) ; java . util . List < java . lang . String > buyCarriers = new java . util . ArrayList < java . lang . String > ( ) ; buyCarriers . add ( \"USPS\" ) ; shipment = shipment . buy ( shipment . lowestRate ( buyCarriers ) ) ; java . util . Map < java . lang . String , java . lang . Object > insureMap = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; insureMap . put ( \"amount\" , 100.0 ) ; shipment = shipment . insure ( insureMap ) ; \"<AssertPlaceHolder>\" ; } getInsurance ( ) { return insurance ; }", "answer": "org . junit . Assert . assertNotNull ( shipment . getInsurance ( ) )"}
{"focal": "readAccessToken ( java . lang . String ) { org . entando . entando . aps . system . services . oauth2 . Connection conn = null ; org . springframework . security . oauth2 . common . OAuth2AccessToken token = null ; try { conn = this . getConnection ( ) ; token = this . getAccessToken ( accessToken , conn ) ; } catch ( java . lang . Exception t ) { org . entando . entando . aps . system . services . oauth2 . OAuth2TokenDAO . logger . error ( \"Error<sp>while<sp>loading<sp>token<sp>{}\" , accessToken , t ) ; throw new java . lang . RuntimeException ( ( \"Error<sp>while<sp>loading<sp>token<sp>\" + accessToken ) , t ) ; } finally { this . closeConnection ( conn ) ; } return token ; }", "testMethod": "getAccessToken ( ) { when ( this . stat . executeQuery ( ) ) . thenReturn ( res ) ; org . mockito . Mockito . when ( res . next ( ) ) . thenReturn ( true ) . thenReturn ( false ) ; org . springframework . security . oauth2 . common . OAuth2AccessToken token = this . tokenDAO . readAccessToken ( \"token\" ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( stat , org . mockito . Mockito . times ( 1 ) ) . setString ( org . mockito . Mockito . anyInt ( ) , org . mockito . Mockito . anyString ( ) ) ; org . mockito . Mockito . verify ( res , org . mockito . Mockito . times ( 4 ) ) . getString ( org . mockito . Mockito . anyString ( ) ) ; org . mockito . Mockito . verify ( res , org . mockito . Mockito . times ( 1 ) ) . getTimestamp ( org . mockito . Mockito . anyString ( ) ) ; org . mockito . Mockito . verify ( stat , org . mockito . Mockito . times ( 1 ) ) . close ( ) ; org . mockito . Mockito . verify ( res , org . mockito . Mockito . times ( 1 ) ) . close ( ) ; org . mockito . Mockito . verify ( conn , org . mockito . Mockito . times ( 1 ) ) . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( token )", "total": "getAccessToken ( ) { when ( this . stat . executeQuery ( ) ) . thenReturn ( res ) ; org . mockito . Mockito . when ( res . next ( ) ) . thenReturn ( true ) . thenReturn ( false ) ; org . springframework . security . oauth2 . common . OAuth2AccessToken token = this . tokenDAO . readAccessToken ( \"token\" ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( stat , org . mockito . Mockito . times ( 1 ) ) . setString ( org . mockito . Mockito . anyInt ( ) , org . mockito . Mockito . anyString ( ) ) ; org . mockito . Mockito . verify ( res , org . mockito . Mockito . times ( 4 ) ) . getString ( org . mockito . Mockito . anyString ( ) ) ; org . mockito . Mockito . verify ( res , org . mockito . Mockito . times ( 1 ) ) . getTimestamp ( org . mockito . Mockito . anyString ( ) ) ; org . mockito . Mockito . verify ( stat , org . mockito . Mockito . times ( 1 ) ) . close ( ) ; org . mockito . Mockito . verify ( res , org . mockito . Mockito . times ( 1 ) ) . close ( ) ; org . mockito . Mockito . verify ( conn , org . mockito . Mockito . times ( 1 ) ) . close ( ) ; } readAccessToken ( java . lang . String ) { org . entando . entando . aps . system . services . oauth2 . Connection conn = null ; org . springframework . security . oauth2 . common . OAuth2AccessToken token = null ; try { conn = this . getConnection ( ) ; token = this . getAccessToken ( accessToken , conn ) ; } catch ( java . lang . Exception t ) { org . entando . entando . aps . system . services . oauth2 . OAuth2TokenDAO . logger . error ( \"Error<sp>while<sp>loading<sp>token<sp>{}\" , accessToken , t ) ; throw new java . lang . RuntimeException ( ( \"Error<sp>while<sp>loading<sp>token<sp>\" + accessToken ) , t ) ; } finally { this . closeConnection ( conn ) ; } return token ; }", "answer": "org . junit . Assert . assertNotNull ( token )"}
{"focal": "getOrganizationData ( ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "testMethod": "getOrganizationData ( ) { org . oscm . intf . AccountService accountService = org . oscm . ws . ClientCertWithAuthorizationWSTest . factory . getAccountService ( null , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( accountService . getOrganizationData ( ) )", "total": "getOrganizationData ( ) { org . oscm . intf . AccountService accountService = org . oscm . ws . ClientCertWithAuthorizationWSTest . factory . getAccountService ( null , null ) ; \"<AssertPlaceHolder>\" ; } getOrganizationData ( ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( accountService . getOrganizationData ( ) )"}
{"focal": "getClient ( ) { return org . eclipse . rap . rwt . RWT . getUISession ( ) . getClient ( ) ; }", "testMethod": "testGetClient ( ) { org . eclipse . rap . rwt . client . Client client = org . eclipse . rap . rwt . RWT . getClient ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( client )", "total": "testGetClient ( ) { org . eclipse . rap . rwt . client . Client client = org . eclipse . rap . rwt . RWT . getClient ( ) ; \"<AssertPlaceHolder>\" ; } getClient ( ) { return org . eclipse . rap . rwt . RWT . getUISession ( ) . getClient ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( client )"}
{"focal": "read ( org . xml . sax . InputSource , org . apache . ws . commons . schema . utils . TargetNamespaceValidator ) { try { javax . xml . parsers . DocumentBuilderFactory docFac = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) ; docFac . setFeature ( XMLConstants . FEATURE_SECURE_PROCESSING , Boolean . TRUE ) ; docFac . setNamespaceAware ( true ) ; final javax . xml . parsers . DocumentBuilder builder = docFac . newDocumentBuilder ( ) ; org . w3c . dom . Document doc = null ; doc = parseDoPriv ( inputSource , builder , doc ) ; return read ( doc , inputSource . getSystemId ( ) , namespaceValidator ) ; } catch ( javax . xml . parsers . ParserConfigurationException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } catch ( java . io . IOException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } catch ( org . xml . sax . SAXException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } }", "testMethod": "testSerialization1 ( ) { javax . xml . parsers . DocumentBuilderFactory documentBuilderFactory = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) ; documentBuilderFactory . setNamespaceAware ( true ) ; org . w3c . dom . Document doc = documentBuilderFactory . newDocumentBuilder ( ) . parse ( tests . Resources . asURI ( \"/external/externalElementAnnotations.xsd\" ) ) ; org . apache . ws . commons . schema . XmlSchemaCollection schemaCol = new org . apache . ws . commons . schema . XmlSchemaCollection ( ) ; org . apache . ws . commons . schema . XmlSchema schema = schemaCol . read ( doc , null ) ; \"<AssertPlaceHolder>\" ; schema . write ( new java . io . ByteArrayOutputStream ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( schema )", "total": "testSerialization1 ( ) { javax . xml . parsers . DocumentBuilderFactory documentBuilderFactory = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) ; documentBuilderFactory . setNamespaceAware ( true ) ; org . w3c . dom . Document doc = documentBuilderFactory . newDocumentBuilder ( ) . parse ( tests . Resources . asURI ( \"/external/externalElementAnnotations.xsd\" ) ) ; org . apache . ws . commons . schema . XmlSchemaCollection schemaCol = new org . apache . ws . commons . schema . XmlSchemaCollection ( ) ; org . apache . ws . commons . schema . XmlSchema schema = schemaCol . read ( doc , null ) ; \"<AssertPlaceHolder>\" ; schema . write ( new java . io . ByteArrayOutputStream ( ) ) ; } read ( org . xml . sax . InputSource , org . apache . ws . commons . schema . utils . TargetNamespaceValidator ) { try { javax . xml . parsers . DocumentBuilderFactory docFac = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) ; docFac . setFeature ( XMLConstants . FEATURE_SECURE_PROCESSING , Boolean . TRUE ) ; docFac . setNamespaceAware ( true ) ; final javax . xml . parsers . DocumentBuilder builder = docFac . newDocumentBuilder ( ) ; org . w3c . dom . Document doc = null ; doc = parseDoPriv ( inputSource , builder , doc ) ; return read ( doc , inputSource . getSystemId ( ) , namespaceValidator ) ; } catch ( javax . xml . parsers . ParserConfigurationException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } catch ( java . io . IOException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } catch ( org . xml . sax . SAXException e ) { throw new org . apache . ws . commons . schema . XmlSchemaException ( e . getMessage ( ) , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( schema )"}
{"focal": "setFf4j ( org . ff4j . FF4j ) { this . ff4j = ff4j ; }", "testMethod": "defaultInitialisation ( ) { org . ff4j . jmx . FF4JMBean sampleBean = new org . ff4j . jmx . FF4JMBean ( ) ; sampleBean . setFf4j ( ff4j ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( sampleBean )", "total": "defaultInitialisation ( ) { org . ff4j . jmx . FF4JMBean sampleBean = new org . ff4j . jmx . FF4JMBean ( ) ; sampleBean . setFf4j ( ff4j ) ; \"<AssertPlaceHolder>\" ; } setFf4j ( org . ff4j . FF4j ) { this . ff4j = ff4j ; }", "answer": "org . junit . Assert . assertNotNull ( sampleBean )"}
{"focal": "getSchema ( java . util . Map , java . io . InputStream , org . apache . nifi . serialization . record . RecordSchema ) { if ( ( this . context ) == null ) { throw new org . apache . nifi . schema . access . SchemaNotFoundException ( \"Schema<sp>Access<sp>Strategy<sp>intended<sp>only<sp>for<sp>validation<sp>purposes<sp>and<sp>cannot<sp>obtain<sp>schema\" ) ; } try { final org . apache . commons . csv . CSVFormat csvFormat = org . apache . nifi . csv . CSVUtils . createCSVFormat ( context ) . withFirstRecordAsHeader ( ) ; try ( final java . io . Reader reader = new java . io . InputStreamReader ( new org . apache . commons . io . input . BOMInputStream ( contentStream ) ) ; final org . apache . commons . csv . CSVParser csvParser = new org . apache . commons . csv . CSVParser ( reader , csvFormat ) ) { final java . util . List < org . apache . nifi . serialization . record . RecordField > fields = new java . util . ArrayList ( ) ; for ( final java . lang . String columnName : csvParser . getHeaderMap ( ) . keySet ( ) ) { fields . add ( new org . apache . nifi . serialization . record . RecordField ( columnName , RecordFieldType . STRING . getDataType ( ) , true ) ) ; } return new org . apache . nifi . serialization . SimpleRecordSchema ( fields ) ; } } catch ( final java . lang . Exception e ) { throw new org . apache . nifi . schema . access . SchemaNotFoundException ( \"Failed<sp>to<sp>read<sp>Header<sp>line<sp>from<sp>CSV\" , e ) ; } }", "testMethod": "testGetSchemaWithValidEncoding ( ) { final org . apache . nifi . schema . access . SchemaAccessStrategy schemaAccessStrategy = new org . apache . nifi . schema . access . ConfluentSchemaRegistryStrategy ( schemaRegistry ) ; final int schemaId = 123456 ; try ( final java . io . ByteArrayOutputStream bytesOut = new java . io . ByteArrayOutputStream ( ) ; final java . io . DataOutputStream out = new java . io . DataOutputStream ( bytesOut ) ) { out . write ( 0 ) ; out . writeInt ( schemaId ) ; out . flush ( ) ; try ( final java . io . ByteArrayInputStream in = new java . io . ByteArrayInputStream ( bytesOut . toByteArray ( ) ) ) { final org . apache . nifi . serialization . record . SchemaIdentifier expectedSchemaIdentifier = org . apache . nifi . serialization . record . SchemaIdentifier . builder ( ) . id ( ( ( long ) ( schemaId ) ) ) . version ( 1 ) . build ( ) ; when ( schemaRegistry . retrieveSchema ( argThat ( new org . apache . nifi . schema . access . SchemaIdentifierMatcher ( expectedSchemaIdentifier ) ) ) ) . thenReturn ( recordSchema ) ; final org . apache . nifi . serialization . record . RecordSchema retrievedSchema = schemaAccessStrategy . getSchema ( java . util . Collections . emptyMap ( ) , in , recordSchema ) ; \"<AssertPlaceHolder>\" ; } } }", "assertLine": "org . junit . Assert . assertNotNull ( retrievedSchema )", "total": "testGetSchemaWithValidEncoding ( ) { final org . apache . nifi . schema . access . SchemaAccessStrategy schemaAccessStrategy = new org . apache . nifi . schema . access . ConfluentSchemaRegistryStrategy ( schemaRegistry ) ; final int schemaId = 123456 ; try ( final java . io . ByteArrayOutputStream bytesOut = new java . io . ByteArrayOutputStream ( ) ; final java . io . DataOutputStream out = new java . io . DataOutputStream ( bytesOut ) ) { out . write ( 0 ) ; out . writeInt ( schemaId ) ; out . flush ( ) ; try ( final java . io . ByteArrayInputStream in = new java . io . ByteArrayInputStream ( bytesOut . toByteArray ( ) ) ) { final org . apache . nifi . serialization . record . SchemaIdentifier expectedSchemaIdentifier = org . apache . nifi . serialization . record . SchemaIdentifier . builder ( ) . id ( ( ( long ) ( schemaId ) ) ) . version ( 1 ) . build ( ) ; when ( schemaRegistry . retrieveSchema ( argThat ( new org . apache . nifi . schema . access . SchemaIdentifierMatcher ( expectedSchemaIdentifier ) ) ) ) . thenReturn ( recordSchema ) ; final org . apache . nifi . serialization . record . RecordSchema retrievedSchema = schemaAccessStrategy . getSchema ( java . util . Collections . emptyMap ( ) , in , recordSchema ) ; \"<AssertPlaceHolder>\" ; } } } getSchema ( java . util . Map , java . io . InputStream , org . apache . nifi . serialization . record . RecordSchema ) { if ( ( this . context ) == null ) { throw new org . apache . nifi . schema . access . SchemaNotFoundException ( \"Schema<sp>Access<sp>Strategy<sp>intended<sp>only<sp>for<sp>validation<sp>purposes<sp>and<sp>cannot<sp>obtain<sp>schema\" ) ; } try { final org . apache . commons . csv . CSVFormat csvFormat = org . apache . nifi . csv . CSVUtils . createCSVFormat ( context ) . withFirstRecordAsHeader ( ) ; try ( final java . io . Reader reader = new java . io . InputStreamReader ( new org . apache . commons . io . input . BOMInputStream ( contentStream ) ) ; final org . apache . commons . csv . CSVParser csvParser = new org . apache . commons . csv . CSVParser ( reader , csvFormat ) ) { final java . util . List < org . apache . nifi . serialization . record . RecordField > fields = new java . util . ArrayList ( ) ; for ( final java . lang . String columnName : csvParser . getHeaderMap ( ) . keySet ( ) ) { fields . add ( new org . apache . nifi . serialization . record . RecordField ( columnName , RecordFieldType . STRING . getDataType ( ) , true ) ) ; } return new org . apache . nifi . serialization . SimpleRecordSchema ( fields ) ; } } catch ( final java . lang . Exception e ) { throw new org . apache . nifi . schema . access . SchemaNotFoundException ( \"Failed<sp>to<sp>read<sp>Header<sp>line<sp>from<sp>CSV\" , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( retrievedSchema )"}
{"focal": "getInputFile ( ) { return input ; }", "testMethod": "testJsonInputFile ( ) { br . ufpe . cin . groundhog . main . CmdOptions op = new br . ufpe . cin . groundhog . main . CmdOptions ( ) ; op . setInputFile ( new java . io . File ( \"groundhog.json\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( op . getInputFile ( ) )", "total": "testJsonInputFile ( ) { br . ufpe . cin . groundhog . main . CmdOptions op = new br . ufpe . cin . groundhog . main . CmdOptions ( ) ; op . setInputFile ( new java . io . File ( \"groundhog.json\" ) ) ; \"<AssertPlaceHolder>\" ; } getInputFile ( ) { return input ; }", "answer": "org . junit . Assert . assertNotNull ( op . getInputFile ( ) )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . billing . CA . BC . model . TeleplanS22 entity = new org . oscarehr . billing . CA . BC . model . TeleplanS22 ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . billing . CA . BC . model . TeleplanS22 entity = new org . oscarehr . billing . CA . BC . model . TeleplanS22 ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . PharmacyInfo entity = new org . oscarehr . common . model . PharmacyInfo ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . PharmacyInfo entity = new org . oscarehr . common . model . PharmacyInfo ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "create ( java . lang . String ) { return org . eclipse . n4js . ts . scoping . builtin . N4Scheme . N4URI . create ( path , null ) ; }", "testMethod": "testLoadingBuiltInTypes ( ) { org . eclipse . xtext . resource . XtextResourceSet resourceSet = ( ( org . eclipse . xtext . resource . XtextResourceSet ) ( resourceSetProvider . get ( null ) ) ) ; resourceSet . setClasspathURIContext ( org . eclipse . n4js . resource . N4JSResource . class . getClassLoader ( ) ) ; org . eclipse . n4js . ts . scoping . builtin . BuiltInTypeScope scope = org . eclipse . n4js . ts . scoping . builtin . BuiltInTypeScope . get ( resourceSet ) ; org . eclipse . xtext . resource . IEObjectDescription anyType = scope . getSingleElement ( org . eclipse . xtext . naming . QualifiedName . create ( \"any\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( anyType )", "total": "testLoadingBuiltInTypes ( ) { org . eclipse . xtext . resource . XtextResourceSet resourceSet = ( ( org . eclipse . xtext . resource . XtextResourceSet ) ( resourceSetProvider . get ( null ) ) ) ; resourceSet . setClasspathURIContext ( org . eclipse . n4js . resource . N4JSResource . class . getClassLoader ( ) ) ; org . eclipse . n4js . ts . scoping . builtin . BuiltInTypeScope scope = org . eclipse . n4js . ts . scoping . builtin . BuiltInTypeScope . get ( resourceSet ) ; org . eclipse . xtext . resource . IEObjectDescription anyType = scope . getSingleElement ( org . eclipse . xtext . naming . QualifiedName . create ( \"any\" ) ) ; \"<AssertPlaceHolder>\" ; } create ( java . lang . String ) { return org . eclipse . n4js . ts . scoping . builtin . N4Scheme . N4URI . create ( path , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( anyType )"}
{"focal": "startRequest ( ) { return startRequest ( new org . dspace . services . sessions . model . InternalRequestImpl ( ) ) ; }", "testMethod": "testStartRequest ( ) { java . lang . String requestId = statelessRequestService . startRequest ( ) ; \"<AssertPlaceHolder>\" ; statelessRequestService . endRequest ( null ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( requestId )", "total": "testStartRequest ( ) { java . lang . String requestId = statelessRequestService . startRequest ( ) ; \"<AssertPlaceHolder>\" ; statelessRequestService . endRequest ( null ) ; } startRequest ( ) { return startRequest ( new org . dspace . services . sessions . model . InternalRequestImpl ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( requestId )"}
{"focal": "getService ( java . lang . Class , java . lang . String ) { try { return ( ( B ) ( node . getClass ( ) . getMethod ( \"getService\" , java . lang . Class . class , java . lang . String . class ) . invoke ( node , businessInterface , serviceName ) ) ) ; } catch ( java . lang . Throwable e ) { org . apache . tuscany . sca . node . NodeFactory . NodeProxy . handleException ( e ) ; return null ; } }", "testMethod": "testDOMIdentitySCA ( ) { itest . common . intf . ClientIntf client = itest . CrossContribTestCase . node . getService ( itest . common . intf . ClientIntf . class , \"ClientSCA\" ) ; \"<AssertPlaceHolder>\" ; client . testRoundTripDOMIdentity ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( client )", "total": "testDOMIdentitySCA ( ) { itest . common . intf . ClientIntf client = itest . CrossContribTestCase . node . getService ( itest . common . intf . ClientIntf . class , \"ClientSCA\" ) ; \"<AssertPlaceHolder>\" ; client . testRoundTripDOMIdentity ( ) ; } getService ( java . lang . Class , java . lang . String ) { try { return ( ( B ) ( node . getClass ( ) . getMethod ( \"getService\" , java . lang . Class . class , java . lang . String . class ) . invoke ( node , businessInterface , serviceName ) ) ) ; } catch ( java . lang . Throwable e ) { org . apache . tuscany . sca . node . NodeFactory . NodeProxy . handleException ( e ) ; return null ; } }", "answer": "org . junit . Assert . assertNotNull ( client )"}
{"focal": "getSqlString ( ) { return sqlString ; }", "testMethod": "testVisitMinFunction ( ) { es . ieci . tecdoc . fwktd . sql . node . expression . DateValue value = new es . ieci . tecdoc . fwktd . sql . node . expression . DateValue ( \"2008-01-01\" ) ; es . ieci . tecdoc . fwktd . sql . node . expression . functions . agregate . MinFunction function = new es . ieci . tecdoc . fwktd . sql . node . expression . functions . agregate . MinFunction ( value ) ; expressionRenderer . visit ( function ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( function . getSqlString ( ) )", "total": "testVisitMinFunction ( ) { es . ieci . tecdoc . fwktd . sql . node . expression . DateValue value = new es . ieci . tecdoc . fwktd . sql . node . expression . DateValue ( \"2008-01-01\" ) ; es . ieci . tecdoc . fwktd . sql . node . expression . functions . agregate . MinFunction function = new es . ieci . tecdoc . fwktd . sql . node . expression . functions . agregate . MinFunction ( value ) ; expressionRenderer . visit ( function ) ; \"<AssertPlaceHolder>\" ; } getSqlString ( ) { return sqlString ; }", "answer": "org . junit . Assert . assertNotNull ( function . getSqlString ( ) )"}
{"focal": "getResourceAsStream ( java . lang . String ) { final java . net . URL url = getResource ( name ) ; de . metas . adempiere . report . jasper . JasperClassLoader . logger . debug ( \"URL:<sp>{}<sp>for<sp>{}\" , new java . lang . Object [ ] { url , name } ) ; if ( url == null ) { return null ; } if ( de . metas . adempiere . report . jasper . JasperClassLoader . isJarInJarURL ( url ) ) { de . metas . adempiere . report . jasper . JasperClassLoader . logger . debug ( \"Returning<sp>null,<sp>because<sp>this<sp>class<sp>loader<sp>won't<sp>be<sp>able<sp>to<sp>open<sp>this<sp>resource.\" ) ; return getParent ( ) . getResourceAsStream ( name ) ; } try { final org . apache . commons . vfs2 . FileSystemManager fsManager = org . apache . commons . vfs2 . VFS . getManager ( ) ; final org . apache . commons . vfs2 . FileObject jasperFile = fsManager . resolveFile ( url . toString ( ) ) ; final org . apache . commons . vfs2 . FileContent jasperData = jasperFile . getContent ( ) ; final java . io . InputStream is = jasperData . getInputStream ( ) ; final java . io . ByteArrayOutputStream out = new java . io . ByteArrayOutputStream ( ) ; de . metas . util . FileUtil . copy ( is , out ) ; is . close ( ) ; jasperFile . close ( ) ; final java . io . InputStream result = new java . io . ByteArrayInputStream ( out . toByteArray ( ) ) ; return result ; } catch ( de . metas . adempiere . report . jasper . org . apache . commons . vfs2 e ) { de . metas . adempiere . report . jasper . JasperClassLoader . logger . debug ( \"Resource<sp>not<sp>found.<sp>Skipping.\" , e ) ; return getParent ( ) . getResourceAsStream ( name ) ; } catch ( org . apache . commons . vfs2 . FileSystemException e ) { de . metas . adempiere . report . jasper . JasperClassLoader . logger . warn ( ( ( \"Error<sp>while<sp>retrieving<sp>bytes<sp>for<sp>resource<sp>\" + url ) + \".<sp>Skipping.\" ) , e ) ; return getParent ( ) . getResourceAsStream ( name ) ; } catch ( java . io . IOException e ) { throw new org . adempiere . exceptions . AdempiereException ( ( \"IO<sp>error<sp>while<sp>retrieving<sp>bytes<sp>for<sp>resource<sp>\" + url ) , e ) ; } }", "testMethod": "testJSON ( ) { final java . io . InputStream is = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResourceAsStream ( \"add_printer_hw.json\" ) ; final de . metas . printing . esb . api . PrinterHWList printer = mapper . readValue ( is , de . metas . printing . esb . api . PrinterHWList . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( printer )", "total": "testJSON ( ) { final java . io . InputStream is = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResourceAsStream ( \"add_printer_hw.json\" ) ; final de . metas . printing . esb . api . PrinterHWList printer = mapper . readValue ( is , de . metas . printing . esb . api . PrinterHWList . class ) ; \"<AssertPlaceHolder>\" ; } getResourceAsStream ( java . lang . String ) { final java . net . URL url = getResource ( name ) ; de . metas . adempiere . report . jasper . JasperClassLoader . logger . debug ( \"URL:<sp>{}<sp>for<sp>{}\" , new java . lang . Object [ ] { url , name } ) ; if ( url == null ) { return null ; } if ( de . metas . adempiere . report . jasper . JasperClassLoader . isJarInJarURL ( url ) ) { de . metas . adempiere . report . jasper . JasperClassLoader . logger . debug ( \"Returning<sp>null,<sp>because<sp>this<sp>class<sp>loader<sp>won't<sp>be<sp>able<sp>to<sp>open<sp>this<sp>resource.\" ) ; return getParent ( ) . getResourceAsStream ( name ) ; } try { final org . apache . commons . vfs2 . FileSystemManager fsManager = org . apache . commons . vfs2 . VFS . getManager ( ) ; final org . apache . commons . vfs2 . FileObject jasperFile = fsManager . resolveFile ( url . toString ( ) ) ; final org . apache . commons . vfs2 . FileContent jasperData = jasperFile . getContent ( ) ; final java . io . InputStream is = jasperData . getInputStream ( ) ; final java . io . ByteArrayOutputStream out = new java . io . ByteArrayOutputStream ( ) ; de . metas . util . FileUtil . copy ( is , out ) ; is . close ( ) ; jasperFile . close ( ) ; final java . io . InputStream result = new java . io . ByteArrayInputStream ( out . toByteArray ( ) ) ; return result ; } catch ( de . metas . adempiere . report . jasper . org . apache . commons . vfs2 e ) { de . metas . adempiere . report . jasper . JasperClassLoader . logger . debug ( \"Resource<sp>not<sp>found.<sp>Skipping.\" , e ) ; return getParent ( ) . getResourceAsStream ( name ) ; } catch ( org . apache . commons . vfs2 . FileSystemException e ) { de . metas . adempiere . report . jasper . JasperClassLoader . logger . warn ( ( ( \"Error<sp>while<sp>retrieving<sp>bytes<sp>for<sp>resource<sp>\" + url ) + \".<sp>Skipping.\" ) , e ) ; return getParent ( ) . getResourceAsStream ( name ) ; } catch ( java . io . IOException e ) { throw new org . adempiere . exceptions . AdempiereException ( ( \"IO<sp>error<sp>while<sp>retrieving<sp>bytes<sp>for<sp>resource<sp>\" + url ) , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( printer )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testSaveServerProfileSchema ( ) { org . kaaproject . kaa . common . dto . ServerProfileSchemaDto schemaDto = generateServerProfileSchema ( null , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( schemaDto . getId ( ) )", "total": "testSaveServerProfileSchema ( ) { org . kaaproject . kaa . common . dto . ServerProfileSchemaDto schemaDto = generateServerProfileSchema ( null , null ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( schemaDto . getId ( ) )"}
{"focal": "getAllModels ( ) { java . util . List < qa . qcri . aidr . dbmanager . dto . ModelDTO > modelDTOList = new java . util . ArrayList < qa . qcri . aidr . dbmanager . dto . ModelDTO > ( ) ; java . util . List < qa . qcri . aidr . dbmanager . entities . model . Model > modelList = getAll ( ) ; qa . qcri . aidr . dbmanager . ejb . remote . facade . imp . ModelResourceFacadeImp . logger . info ( ( \"Fetched<sp>models<sp>list<sp>size:<sp>\" + ( modelList . size ( ) ) ) ) ; for ( qa . qcri . aidr . dbmanager . entities . model . Model model : modelList ) { modelDTOList . add ( new qa . qcri . aidr . dbmanager . dto . ModelDTO ( model ) ) ; } return modelDTOList ; }", "testMethod": "testGetAllModels ( ) { try { java . util . List < qa . qcri . aidr . dbmanager . dto . ModelDTO > modelDTOs = qa . qcri . aidr . dbmanager . ejb . remote . facade . imp . TestModelResourceFacadeImp . modelResourceFacadeImp . getAllModels ( ) ; \"<AssertPlaceHolder>\" ; } catch ( qa . qcri . aidr . common . exception . PropertyNotSetException e ) { qa . qcri . aidr . dbmanager . ejb . remote . facade . imp . TestModelResourceFacadeImp . logger . error ( ( \"PropertyNotSetException<sp>while<sp>executing<sp>testGetAllModels<sp>\" + ( e . getMessage ( ) ) ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( modelDTOs )", "total": "testGetAllModels ( ) { try { java . util . List < qa . qcri . aidr . dbmanager . dto . ModelDTO > modelDTOs = qa . qcri . aidr . dbmanager . ejb . remote . facade . imp . TestModelResourceFacadeImp . modelResourceFacadeImp . getAllModels ( ) ; \"<AssertPlaceHolder>\" ; } catch ( qa . qcri . aidr . common . exception . PropertyNotSetException e ) { qa . qcri . aidr . dbmanager . ejb . remote . facade . imp . TestModelResourceFacadeImp . logger . error ( ( \"PropertyNotSetException<sp>while<sp>executing<sp>testGetAllModels<sp>\" + ( e . getMessage ( ) ) ) ) ; } } getAllModels ( ) { java . util . List < qa . qcri . aidr . dbmanager . dto . ModelDTO > modelDTOList = new java . util . ArrayList < qa . qcri . aidr . dbmanager . dto . ModelDTO > ( ) ; java . util . List < qa . qcri . aidr . dbmanager . entities . model . Model > modelList = getAll ( ) ; qa . qcri . aidr . dbmanager . ejb . remote . facade . imp . ModelResourceFacadeImp . logger . info ( ( \"Fetched<sp>models<sp>list<sp>size:<sp>\" + ( modelList . size ( ) ) ) ) ; for ( qa . qcri . aidr . dbmanager . entities . model . Model model : modelList ) { modelDTOList . add ( new qa . qcri . aidr . dbmanager . dto . ModelDTO ( model ) ) ; } return modelDTOList ; }", "answer": "org . junit . Assert . assertNotNull ( modelDTOs )"}
{"focal": "parse ( java . lang . String , java . lang . String , int ) { try { org . cleartk . util . treebank . TopTreebankNode topNode = new org . cleartk . util . treebank . TopTreebankNode ( ) ; parse = org . cleartk . util . treebank . TreebankFormatParser . prepareString ( parse ) ; java . lang . StringBuffer consumedText = new java . lang . StringBuffer ( ) ; if ( text != null ) { textOffset = org . cleartk . util . treebank . TreebankFormatParser . movePastWhiteSpaceChars ( text , textOffset ) ; consumedText . append ( text . substring ( 0 , textOffset ) ) ; } java . util . Stack < java . lang . Integer > parseOffsetStack = new java . util . Stack < java . lang . Integer > ( ) ; java . util . Stack < java . lang . Integer > plainTextOffsetStack = new java . util . Stack < java . lang . Integer > ( ) ; java . util . Stack < org . cleartk . util . treebank . TreebankNode > parseStack = new java . util . Stack < org . cleartk . util . treebank . TreebankNode > ( ) ; for ( int ci = 0 ; ci < ( parse . length ( ) ) ; ci ++ ) { char c = parse . charAt ( ci ) ; if ( c == '(' ) { parseOffsetStack . push ( ci ) ; plainTextOffsetStack . push ( consumedText . length ( ) ) ; } else if ( c == ')' ) { int begin = parseOffsetStack . pop ( ) ; int end = ci ; java . lang . String subParse = parse . substring ( begin , ( end + 1 ) ) ; int textBegin = plainTextOffsetStack . pop ( ) ; org . cleartk . util . treebank . TreebankNode node = org . cleartk . util . treebank . TreebankFormatParser . getLeafNode ( subParse ) ; if ( node != null ) { node . setTopNode ( topNode ) ; node . setParseBegin ( begin ) ; node . setParseEnd ( ( end + 1 ) ) ; java . lang . String token = node . getText ( ) ; if ( ( token . length ( ) ) > 0 ) { int realBegin = org . cleartk . util . treebank . TreebankFormatParser . movePastWhiteSpaceChars ( text , textBegin ) ; consumedText . append ( text . substring ( textBegin , realBegin ) ) ; consumedText . append ( token ) ; node . setTextBegin ( realBegin ) ; node . setTextEnd ( ( realBegin + ( token . length ( ) ) ) ) ; } else { node . setTextBegin ( textBegin ) ; node . setTextEnd ( ( textBegin + ( token . length ( ) ) ) ) ; } org . cleartk . util . treebank . TreebankFormatParser . checkText ( node , text ) ; parseStack . push ( node ) ; } else { if ( ( parse . lastIndexOf ( ')' ) ) == ci ) node = topNode ; else node = new org . cleartk . util . treebank . TreebankNode ( ) ; node . setTopNode ( topNode ) ; node . setParseBegin ( begin ) ; node . setParseEnd ( ( end + 1 ) ) ; java . lang . String type = org . cleartk . util . treebank . TreebankFormatParser . getType ( subParse ) ; node . setType ( org . cleartk . util . treebank . TreebankFormatParser . getTypeFromType ( type ) ) ; node . setTags ( org . cleartk . util . treebank . TreebankFormatParser . getTagsFromType ( type ) ) ; node . setLeaf ( false ) ; while ( ( ( parseStack . size ( ) ) > 0 ) && ( ( parseStack . peek ( ) . getParseBegin ( ) ) > ( node . getParseBegin ( ) ) ) ) { org . cleartk . util . treebank . TreebankNode child = parseStack . pop ( ) ; node . addChild ( child ) ; child . setParent ( node ) ; } int realBegin = org . cleartk . util . treebank . TreebankFormatParser . movePastWhiteSpaceChars ( text , textBegin ) ; node . setTextBegin ( realBegin ) ; node . setTextEnd ( java . lang . Math . max ( realBegin , consumedText . length ( ) ) ) ; try { node . setText ( consumedText . substring ( node . getTextBegin ( ) , node . getTextEnd ( ) ) ) ; } catch ( java . lang . StringIndexOutOfBoundsException sioobe ) { node . setText ( \"\" ) ; } org . cleartk . util . treebank . TreebankFormatParser . checkText ( node , text ) ; parseStack . push ( node ) ; } } } topNode . setTreebankParse ( parse ) ; topNode . initTerminalNodes ( ) ; return topNode ; } catch ( java . lang . RuntimeException e ) { throw new java . lang . IllegalArgumentException ( ( \"exception<sp>thrown<sp>when<sp>parsing<sp>the<sp>following:<sp>\" + parse ) , e ) ; } }", "testMethod": "testBadInputText ( ) { java . lang . IllegalArgumentException iae = null ; try { java . lang . String treebankParse = \"(NML<sp>(NN<sp>Complex<sp>)<sp>(NN<sp>trait<sp>))\" ; java . lang . String plainText = \"Complex<sp>strait\" ; org . cleartk . util . treebank . TreebankFormatParser . parse ( treebankParse , plainText , 0 ) ; } catch ( java . lang . IllegalArgumentException e ) { iae = e ; } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( iae )", "total": "testBadInputText ( ) { java . lang . IllegalArgumentException iae = null ; try { java . lang . String treebankParse = \"(NML<sp>(NN<sp>Complex<sp>)<sp>(NN<sp>trait<sp>))\" ; java . lang . String plainText = \"Complex<sp>strait\" ; org . cleartk . util . treebank . TreebankFormatParser . parse ( treebankParse , plainText , 0 ) ; } catch ( java . lang . IllegalArgumentException e ) { iae = e ; } \"<AssertPlaceHolder>\" ; } parse ( java . lang . String , java . lang . String , int ) { try { org . cleartk . util . treebank . TopTreebankNode topNode = new org . cleartk . util . treebank . TopTreebankNode ( ) ; parse = org . cleartk . util . treebank . TreebankFormatParser . prepareString ( parse ) ; java . lang . StringBuffer consumedText = new java . lang . StringBuffer ( ) ; if ( text != null ) { textOffset = org . cleartk . util . treebank . TreebankFormatParser . movePastWhiteSpaceChars ( text , textOffset ) ; consumedText . append ( text . substring ( 0 , textOffset ) ) ; } java . util . Stack < java . lang . Integer > parseOffsetStack = new java . util . Stack < java . lang . Integer > ( ) ; java . util . Stack < java . lang . Integer > plainTextOffsetStack = new java . util . Stack < java . lang . Integer > ( ) ; java . util . Stack < org . cleartk . util . treebank . TreebankNode > parseStack = new java . util . Stack < org . cleartk . util . treebank . TreebankNode > ( ) ; for ( int ci = 0 ; ci < ( parse . length ( ) ) ; ci ++ ) { char c = parse . charAt ( ci ) ; if ( c == '(' ) { parseOffsetStack . push ( ci ) ; plainTextOffsetStack . push ( consumedText . length ( ) ) ; } else if ( c == ')' ) { int begin = parseOffsetStack . pop ( ) ; int end = ci ; java . lang . String subParse = parse . substring ( begin , ( end + 1 ) ) ; int textBegin = plainTextOffsetStack . pop ( ) ; org . cleartk . util . treebank . TreebankNode node = org . cleartk . util . treebank . TreebankFormatParser . getLeafNode ( subParse ) ; if ( node != null ) { node . setTopNode ( topNode ) ; node . setParseBegin ( begin ) ; node . setParseEnd ( ( end + 1 ) ) ; java . lang . String token = node . getText ( ) ; if ( ( token . length ( ) ) > 0 ) { int realBegin = org . cleartk . util . treebank . TreebankFormatParser . movePastWhiteSpaceChars ( text , textBegin ) ; consumedText . append ( text . substring ( textBegin , realBegin ) ) ; consumedText . append ( token ) ; node . setTextBegin ( realBegin ) ; node . setTextEnd ( ( realBegin + ( token . length ( ) ) ) ) ; } else { node . setTextBegin ( textBegin ) ; node . setTextEnd ( ( textBegin + ( token . length ( ) ) ) ) ; } org . cleartk . util . treebank . TreebankFormatParser . checkText ( node , text ) ; parseStack . push ( node ) ; } else { if ( ( parse . lastIndexOf ( ')' ) ) == ci ) node = topNode ; else node = new org . cleartk . util . treebank . TreebankNode ( ) ; node . setTopNode ( topNode ) ; node . setParseBegin ( begin ) ; node . setParseEnd ( ( end + 1 ) ) ; java . lang . String type = org . cleartk . util . treebank . TreebankFormatParser . getType ( subParse ) ; node . setType ( org . cleartk . util . treebank . TreebankFormatParser . getTypeFromType ( type ) ) ; node . setTags ( org . cleartk . util . treebank . TreebankFormatParser . getTagsFromType ( type ) ) ; node . setLeaf ( false ) ; while ( ( ( parseStack . size ( ) ) > 0 ) && ( ( parseStack . peek ( ) . getParseBegin ( ) ) > ( node . getParseBegin ( ) ) ) ) { org . cleartk . util . treebank . TreebankNode child = parseStack . pop ( ) ; node . addChild ( child ) ; child . setParent ( node ) ; } int realBegin = org . cleartk . util . treebank . TreebankFormatParser . movePastWhiteSpaceChars ( text , textBegin ) ; node . setTextBegin ( realBegin ) ; node . setTextEnd ( java . lang . Math . max ( realBegin , consumedText . length ( ) ) ) ; try { node . setText ( consumedText . substring ( node . getTextBegin ( ) , node . getTextEnd ( ) ) ) ; } catch ( java . lang . StringIndexOutOfBoundsException sioobe ) { node . setText ( \"\" ) ; } org . cleartk . util . treebank . TreebankFormatParser . checkText ( node , text ) ; parseStack . push ( node ) ; } } } topNode . setTreebankParse ( parse ) ; topNode . initTerminalNodes ( ) ; return topNode ; } catch ( java . lang . RuntimeException e ) { throw new java . lang . IllegalArgumentException ( ( \"exception<sp>thrown<sp>when<sp>parsing<sp>the<sp>following:<sp>\" + parse ) , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( iae )"}
{"focal": "readEntry ( org . apache . olingo . odata2 . api . edm . EdmEntitySet , org . apache . olingo . odata2 . client . api . ep . EntityStream ) { return new org . apache . olingo . odata2 . client . core . ep . deserializer . JsonEntityDeserializer ( ) . readEntry ( entitySet , content ) ; }", "testMethod": "validationOfDoublePropertyDifferentTagHierachyD_Namespace ( ) { java . lang . String room = \"<?xml<sp>version='1.0'<sp>encoding='UTF-8'?>\" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( \"Rooms\" 3 http : org . apache . olingo . odata2 . api . edm . EdmEntitySet entitySet = org . apache . olingo . odata2 . testutil . mock . MockFacade . getMockEdm ( ) . getDefaultEntityContainer ( ) . getEntitySet ( \"Rooms\" ) ; java . io . InputStream reqContent = createContentAsStream ( room ) ; org . apache . olingo . odata2 . client . api . ep . EntityStream stream = new org . apache . olingo . odata2 . client . api . ep . EntityStream ( ) ; stream . setContent ( reqContent ) ; stream . setReadProperties ( org . apache . olingo . odata2 . client . api . ep . DeserializerProperties . init ( ) . build ( ) ) ; org . apache . olingo . odata2 . client . core . ep . deserializer . XmlEntityDeserializer xec = new org . apache . olingo . odata2 . client . core . ep . deserializer . XmlEntityDeserializer ( ) ; org . apache . olingo . odata2 . api . ep . entry . ODataEntry result = xec . readEntry ( entitySet , stream ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "validationOfDoublePropertyDifferentTagHierachyD_Namespace ( ) { java . lang . String room = \"<?xml<sp>version='1.0'<sp>encoding='UTF-8'?>\" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( \"Rooms\" 3 http : org . apache . olingo . odata2 . api . edm . EdmEntitySet entitySet = org . apache . olingo . odata2 . testutil . mock . MockFacade . getMockEdm ( ) . getDefaultEntityContainer ( ) . getEntitySet ( \"Rooms\" ) ; java . io . InputStream reqContent = createContentAsStream ( room ) ; org . apache . olingo . odata2 . client . api . ep . EntityStream stream = new org . apache . olingo . odata2 . client . api . ep . EntityStream ( ) ; stream . setContent ( reqContent ) ; stream . setReadProperties ( org . apache . olingo . odata2 . client . api . ep . DeserializerProperties . init ( ) . build ( ) ) ; org . apache . olingo . odata2 . client . core . ep . deserializer . XmlEntityDeserializer xec = new org . apache . olingo . odata2 . client . core . ep . deserializer . XmlEntityDeserializer ( ) ; org . apache . olingo . odata2 . api . ep . entry . ODataEntry result = xec . readEntry ( entitySet , stream ) ; \"<AssertPlaceHolder>\" ; } readEntry ( org . apache . olingo . odata2 . api . edm . EdmEntitySet , org . apache . olingo . odata2 . client . api . ep . EntityStream ) { return new org . apache . olingo . odata2 . client . core . ep . deserializer . JsonEntityDeserializer ( ) . readEntry ( entitySet , content ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "parse ( java . util . Map ) { java . lang . String procedure = getRequired ( prams , \"PROCEDURE\" ) ; java . lang . String format = prams . get ( \"OUTPUTFORMAT\" ) ; if ( format == null ) { format = org . deegree . protocol . sos . describesensor . DescribeSensor100KVPAdapter . DEFAULT_FORMAT ; } return new org . deegree . protocol . sos . describesensor . DescribeSensor ( procedure , format ) ; }", "testMethod": "parseBeyondFilter ( ) { org . deegree . filter . Filter filter = parse ( \"testfilter15.xml\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( filter )", "total": "parseBeyondFilter ( ) { org . deegree . filter . Filter filter = parse ( \"testfilter15.xml\" ) ; \"<AssertPlaceHolder>\" ; } parse ( java . util . Map ) { java . lang . String procedure = getRequired ( prams , \"PROCEDURE\" ) ; java . lang . String format = prams . get ( \"OUTPUTFORMAT\" ) ; if ( format == null ) { format = org . deegree . protocol . sos . describesensor . DescribeSensor100KVPAdapter . DEFAULT_FORMAT ; } return new org . deegree . protocol . sos . describesensor . DescribeSensor ( procedure , format ) ; }", "answer": "org . junit . Assert . assertNotNull ( filter )"}
{"focal": "setUpEnvironment ( hudson . model . AbstractBuild , hudson . Launcher , hudson . model . BuildListener ) { com . sonyericsson . hudson . plugins . gerrit . trigger . replication . ReplicationFailedAction replicationFailedAction = build . getAction ( com . sonyericsson . hudson . plugins . gerrit . trigger . replication . ReplicationFailedAction . class ) ; if ( replicationFailedAction != null ) { throw new hudson . AbortException ( replicationFailedAction . getReason ( ) ) ; } return super . setUpEnvironment ( build , launcher , listener ) ; }", "testMethod": "shouldReturnAnEmptyEnvironmentWhenActionNotFound ( ) { hudson . model . Environment env = handler . setUpEnvironment ( abstractBuildMock , null , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( env )", "total": "shouldReturnAnEmptyEnvironmentWhenActionNotFound ( ) { hudson . model . Environment env = handler . setUpEnvironment ( abstractBuildMock , null , null ) ; \"<AssertPlaceHolder>\" ; } setUpEnvironment ( hudson . model . AbstractBuild , hudson . Launcher , hudson . model . BuildListener ) { com . sonyericsson . hudson . plugins . gerrit . trigger . replication . ReplicationFailedAction replicationFailedAction = build . getAction ( com . sonyericsson . hudson . plugins . gerrit . trigger . replication . ReplicationFailedAction . class ) ; if ( replicationFailedAction != null ) { throw new hudson . AbortException ( replicationFailedAction . getReason ( ) ) ; } return super . setUpEnvironment ( build , launcher , listener ) ; }", "answer": "org . junit . Assert . assertNotNull ( env )"}
{"focal": "getSqlString ( ) { return sqlString ; }", "testMethod": "testVisitLongValue ( ) { es . ieci . tecdoc . fwktd . sql . node . expression . LongValue value = new es . ieci . tecdoc . fwktd . sql . node . expression . LongValue ( 122345L ) ; expressionRenderer . visit ( value ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( value . getSqlString ( ) )", "total": "testVisitLongValue ( ) { es . ieci . tecdoc . fwktd . sql . node . expression . LongValue value = new es . ieci . tecdoc . fwktd . sql . node . expression . LongValue ( 122345L ) ; expressionRenderer . visit ( value ) ; \"<AssertPlaceHolder>\" ; } getSqlString ( ) { return sqlString ; }", "answer": "org . junit . Assert . assertNotNull ( value . getSqlString ( ) )"}
{"focal": "getByKey ( KEY extends java . io . Serializable ) { return getByKey ( key , itemRef ) ; }", "testMethod": "nullNonNullableProperty ( ) { final org . apache . olingo . fit . proxy . staticservice . odatawcfservice . types . StoredPI storedPI = container . getStoredPIs ( ) . getByKey ( 1000 ) ; storedPI . setPIName ( null ) ; try { container . flush ( ) ; org . junit . Assert . fail ( ) ; } catch ( org . apache . olingo . ext . proxy . api . ODataFlushException e ) { \"<AssertPlaceHolder>\" ; } service . getContext ( ) . detachAll ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( e )", "total": "nullNonNullableProperty ( ) { final org . apache . olingo . fit . proxy . staticservice . odatawcfservice . types . StoredPI storedPI = container . getStoredPIs ( ) . getByKey ( 1000 ) ; storedPI . setPIName ( null ) ; try { container . flush ( ) ; org . junit . Assert . fail ( ) ; } catch ( org . apache . olingo . ext . proxy . api . ODataFlushException e ) { \"<AssertPlaceHolder>\" ; } service . getContext ( ) . detachAll ( ) ; } getByKey ( KEY extends java . io . Serializable ) { return getByKey ( key , itemRef ) ; }", "answer": "org . junit . Assert . assertNotNull ( e )"}
{"focal": "readJson ( java . lang . String ) { try { java . lang . String path = this . getClass ( ) . getClassLoader ( ) . getResource ( fileName ) . getPath ( ) ; return org . apache . commons . io . FileUtils . readFileToString ( new java . io . File ( path ) ) ; } catch ( java . io . IOException e ) { } return null ; }", "testMethod": "testImageResponse ( ) { java . lang . String json = readJson ( \"image.json\" ) ; com . sangupta . imgur . api . model . Image . ImageWrapper wrapper = com . sangupta . jerry . util . GsonUtils . getGson ( ) . fromJson ( json , com . sangupta . imgur . api . model . Image . ImageWrapper . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( wrapper . data )", "total": "testImageResponse ( ) { java . lang . String json = readJson ( \"image.json\" ) ; com . sangupta . imgur . api . model . Image . ImageWrapper wrapper = com . sangupta . jerry . util . GsonUtils . getGson ( ) . fromJson ( json , com . sangupta . imgur . api . model . Image . ImageWrapper . class ) ; \"<AssertPlaceHolder>\" ; } readJson ( java . lang . String ) { try { java . lang . String path = this . getClass ( ) . getClassLoader ( ) . getResource ( fileName ) . getPath ( ) ; return org . apache . commons . io . FileUtils . readFileToString ( new java . io . File ( path ) ) ; } catch ( java . io . IOException e ) { } return null ; }", "answer": "org . junit . Assert . assertNotNull ( wrapper . data )"}
{"focal": "getPostById ( java . lang . Long ) { return jsonPlaceHolderClient . getPostById ( id ) ; }", "testMethod": "whenGetPostWithId_thenPostExist ( ) { com . baeldung . cloud . openfeign . model . Post post = jsonPlaceHolderService . getPostById ( 1L ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( post )", "total": "whenGetPostWithId_thenPostExist ( ) { com . baeldung . cloud . openfeign . model . Post post = jsonPlaceHolderService . getPostById ( 1L ) ; \"<AssertPlaceHolder>\" ; } getPostById ( java . lang . Long ) { return jsonPlaceHolderClient . getPostById ( id ) ; }", "answer": "org . junit . Assert . assertNotNull ( post )"}
{"focal": "getResourceAsStream ( java . lang . String ) { if ( ( loader ) != null ) { return loader . getResourceAsStream ( name ) ; } else { return null ; } }", "testMethod": "testUserDefinedCharset ( ) { java . lang . String content = new org . apache . tika . Tika ( ) . parseToString ( org . apache . tika . parser . html . HtmlParserTest . class . getResourceAsStream ( \"/test-documents/testUserDefinedCharset.mhtml\" ) , new org . apache . tika . metadata . Metadata ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( content )", "total": "testUserDefinedCharset ( ) { java . lang . String content = new org . apache . tika . Tika ( ) . parseToString ( org . apache . tika . parser . html . HtmlParserTest . class . getResourceAsStream ( \"/test-documents/testUserDefinedCharset.mhtml\" ) , new org . apache . tika . metadata . Metadata ( ) ) ; \"<AssertPlaceHolder>\" ; } getResourceAsStream ( java . lang . String ) { if ( ( loader ) != null ) { return loader . getResourceAsStream ( name ) ; } else { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( content )"}
{"focal": "parse ( javax . xml . stream . XMLEventReader ) { while ( xmlEventReader . hasNext ( ) ) { javax . xml . stream . events . XMLEvent xmlEvent = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . peek ( xmlEventReader ) ; if ( xmlEvent instanceof javax . xml . stream . events . StartElement ) { javax . xml . stream . events . StartElement startElement = ( ( javax . xml . stream . events . StartElement ) ( xmlEvent ) ) ; java . lang . String elementName = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getStartElementName ( startElement ) ; if ( elementName . equalsIgnoreCase ( WSPolicyConstants . APPLIES_TO ) ) { startElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextStartElement ( xmlEventReader ) ; org . picketlink . identity . federation . ws . policy . AppliesTo appliesTo = new org . picketlink . identity . federation . ws . policy . AppliesTo ( ) ; startElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . peekNextStartElement ( xmlEventReader ) ; javax . xml . namespace . QName qname = startElement . getName ( ) ; org . picketlink . identity . federation . core . parsers . ParserNamespaceSupport parser = org . picketlink . identity . federation . core . parsers . ParserController . get ( qname ) ; if ( parser == null ) throw new java . lang . RuntimeException ( ( ( org . picketlink . identity . federation . core . ErrorCodes . UNKNOWN_TAG ) + qname ) ) ; java . lang . Object parsedObject = parser . parse ( xmlEventReader ) ; appliesTo . addAny ( parsedObject ) ; javax . xml . stream . events . EndElement endElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextEndElement ( xmlEventReader ) ; org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . validate ( endElement , WSPolicyConstants . APPLIES_TO ) ; return appliesTo ; } } else { org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextEvent ( xmlEventReader ) ; } } throw logger . parserFailed ( WSTrustConstants . WSP_NS ) ; }", "testMethod": "testWST_ResponseRenew ( ) { java . lang . ClassLoader tcl = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) ; java . io . InputStream configStream = tcl . getResourceAsStream ( \"parser/wst/wst-response-renew.xml\" ) ; org . picketlink . identity . federation . core . parsers . wst . WSTrustParser parser = new org . picketlink . identity . federation . core . parsers . wst . WSTrustParser ( ) ; org . picketlink . identity . federation . core . wstrust . wrappers . RequestSecurityTokenResponseCollection responseCollection = ( ( org . picketlink . identity . federation . core . wstrust . wrappers . RequestSecurityTokenResponseCollection ) ( parser . parse ( configStream ) ) ) ; \"<AssertPlaceHolder>\" ; java . io . ByteArrayOutputStream baos = new java . io . ByteArrayOutputStream ( ) ; org . picketlink . identity . federation . core . wstrust . writers . WSTrustResponseWriter rstrWriter = new org . picketlink . identity . federation . core . wstrust . writers . WSTrustResponseWriter ( baos ) ; rstrWriter . write ( responseCollection ) ; byte [ ] data = baos . toByteArray ( ) ; org . apache . log4j . Logger . getLogger ( org . picketlink . test . identity . federation . core . parser . wst . WSTrustRenewTargetParsingTestCase . class ) . debug ( new java . lang . String ( data ) ) ; org . w3c . dom . Document doc = org . picketlink . identity . federation . core . saml . v2 . util . DocumentUtil . getDocument ( new java . io . ByteArrayInputStream ( data ) ) ; org . picketlink . identity . federation . core . util . JAXPValidationUtil . validate ( org . picketlink . identity . federation . core . saml . v2 . util . DocumentUtil . getNodeAsStream ( doc ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( responseCollection )", "total": "testWST_ResponseRenew ( ) { java . lang . ClassLoader tcl = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) ; java . io . InputStream configStream = tcl . getResourceAsStream ( \"parser/wst/wst-response-renew.xml\" ) ; org . picketlink . identity . federation . core . parsers . wst . WSTrustParser parser = new org . picketlink . identity . federation . core . parsers . wst . WSTrustParser ( ) ; org . picketlink . identity . federation . core . wstrust . wrappers . RequestSecurityTokenResponseCollection responseCollection = ( ( org . picketlink . identity . federation . core . wstrust . wrappers . RequestSecurityTokenResponseCollection ) ( parser . parse ( configStream ) ) ) ; \"<AssertPlaceHolder>\" ; java . io . ByteArrayOutputStream baos = new java . io . ByteArrayOutputStream ( ) ; org . picketlink . identity . federation . core . wstrust . writers . WSTrustResponseWriter rstrWriter = new org . picketlink . identity . federation . core . wstrust . writers . WSTrustResponseWriter ( baos ) ; rstrWriter . write ( responseCollection ) ; byte [ ] data = baos . toByteArray ( ) ; org . apache . log4j . Logger . getLogger ( org . picketlink . test . identity . federation . core . parser . wst . WSTrustRenewTargetParsingTestCase . class ) . debug ( new java . lang . String ( data ) ) ; org . w3c . dom . Document doc = org . picketlink . identity . federation . core . saml . v2 . util . DocumentUtil . getDocument ( new java . io . ByteArrayInputStream ( data ) ) ; org . picketlink . identity . federation . core . util . JAXPValidationUtil . validate ( org . picketlink . identity . federation . core . saml . v2 . util . DocumentUtil . getNodeAsStream ( doc ) ) ; } parse ( javax . xml . stream . XMLEventReader ) { while ( xmlEventReader . hasNext ( ) ) { javax . xml . stream . events . XMLEvent xmlEvent = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . peek ( xmlEventReader ) ; if ( xmlEvent instanceof javax . xml . stream . events . StartElement ) { javax . xml . stream . events . StartElement startElement = ( ( javax . xml . stream . events . StartElement ) ( xmlEvent ) ) ; java . lang . String elementName = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getStartElementName ( startElement ) ; if ( elementName . equalsIgnoreCase ( WSPolicyConstants . APPLIES_TO ) ) { startElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextStartElement ( xmlEventReader ) ; org . picketlink . identity . federation . ws . policy . AppliesTo appliesTo = new org . picketlink . identity . federation . ws . policy . AppliesTo ( ) ; startElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . peekNextStartElement ( xmlEventReader ) ; javax . xml . namespace . QName qname = startElement . getName ( ) ; org . picketlink . identity . federation . core . parsers . ParserNamespaceSupport parser = org . picketlink . identity . federation . core . parsers . ParserController . get ( qname ) ; if ( parser == null ) throw new java . lang . RuntimeException ( ( ( org . picketlink . identity . federation . core . ErrorCodes . UNKNOWN_TAG ) + qname ) ) ; java . lang . Object parsedObject = parser . parse ( xmlEventReader ) ; appliesTo . addAny ( parsedObject ) ; javax . xml . stream . events . EndElement endElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextEndElement ( xmlEventReader ) ; org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . validate ( endElement , WSPolicyConstants . APPLIES_TO ) ; return appliesTo ; } } else { org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextEvent ( xmlEventReader ) ; } } throw logger . parserFailed ( WSTrustConstants . WSP_NS ) ; }", "answer": "org . junit . Assert . assertNotNull ( responseCollection )"}
{"focal": "getRootDocument ( ) { return getDocument ( new org . nuxeo . ecm . automation . client . model . PathRef ( \"/\" ) ) ; }", "testMethod": "testReconnectAfterCommit ( ) { org . nuxeo . ecm . core . api . DocumentModel file = session . createDocumentModel ( \"/\" , \"file\" , \"File\" ) ; file = session . createDocument ( file ) ; session . save ( ) ; org . nuxeo . runtime . transaction . TransactionHelper . commitOrRollbackTransaction ( ) ; org . nuxeo . runtime . transaction . TransactionHelper . startTransaction ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( session . getRootDocument ( ) )", "total": "testReconnectAfterCommit ( ) { org . nuxeo . ecm . core . api . DocumentModel file = session . createDocumentModel ( \"/\" , \"file\" , \"File\" ) ; file = session . createDocument ( file ) ; session . save ( ) ; org . nuxeo . runtime . transaction . TransactionHelper . commitOrRollbackTransaction ( ) ; org . nuxeo . runtime . transaction . TransactionHelper . startTransaction ( ) ; \"<AssertPlaceHolder>\" ; } getRootDocument ( ) { return getDocument ( new org . nuxeo . ecm . automation . client . model . PathRef ( \"/\" ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( session . getRootDocument ( ) )"}
{"focal": "getRootOntology ( ) { return rootOntology ; }", "testMethod": "spacePreservesImports ( ) { java . io . InputStream content = getClass ( ) . getResourceAsStream ( \"/ontologies/characters_all.owl\" ) ; java . net . URL url = getClass ( ) . getResource ( \"/ontologies/characters_all.owl\" ) ; org . semanticweb . owlapi . model . OWLOntologyManager mgr = org . semanticweb . owlapi . apibinding . OWLManager . createOWLOntologyManager ( ) ; mgr . addOntologyLoaderListener ( new org . semanticweb . owlapi . model . OWLOntologyLoaderListener ( ) { @ org . apache . stanbol . ontologymanager . multiplexer . clerezza . collector . Override public void startedLoadingOntology ( org . apache . stanbol . ontologymanager . multiplexer . clerezza . collector . LoadingStartedEvent arg0 ) { } @ org . apache . stanbol . ontologymanager . multiplexer . clerezza . collector . Override public void finishedLoadingOntology ( org . apache . stanbol . ontologymanager . multiplexer . clerezza . collector . LoadingFinishedEvent arg0 ) { log . info ( ( ( ( ( arg0 . isSuccessful ( ) ? \"Loaded\" : \"Failed\" ) + ( arg0 . isImported ( ) ? \"<sp>imported<sp>\" : \"<sp>\" ) ) + \"ontology<sp>\" ) + ( arg0 . getDocumentIRI ( ) ) ) ) ; } } ) ; mgr . addIRIMapper ( new org . apache . stanbol . commons . owl . PhonyIRIMapper ( null ) ) ; java . io . File f = new java . io . File ( url . toURI ( ) ) ; org . apache . stanbol . ontologymanager . servicesapi . io . OntologyInputSource < org . semanticweb . owlapi . model . OWLOntology > src = new org . apache . stanbol . ontologymanager . sources . owlapi . ParentPathInputSource ( f , mgr ) ; org . semanticweb . owlapi . model . OWLOntology original = src . getRootOntology ( ) ; \"<AssertPlaceHolder>\" ; org . apache . stanbol . ontologymanager . servicesapi . scope . OntologySpace spc = new org . apache . stanbol . ontologymanager . multiplexer . clerezza . impl . CustomSpaceImpl ( \"Test\" , scopeNs , org . apache . stanbol . ontologymanager . multiplexer . clerezza . MockOsgiContext . ontologyProvider ) ; spc . addOntology ( src ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( original )", "total": "spacePreservesImports ( ) { java . io . InputStream content = getClass ( ) . getResourceAsStream ( \"/ontologies/characters_all.owl\" ) ; java . net . URL url = getClass ( ) . getResource ( \"/ontologies/characters_all.owl\" ) ; org . semanticweb . owlapi . model . OWLOntologyManager mgr = org . semanticweb . owlapi . apibinding . OWLManager . createOWLOntologyManager ( ) ; mgr . addOntologyLoaderListener ( new org . semanticweb . owlapi . model . OWLOntologyLoaderListener ( ) { @ org . apache . stanbol . ontologymanager . multiplexer . clerezza . collector . Override public void startedLoadingOntology ( org . apache . stanbol . ontologymanager . multiplexer . clerezza . collector . LoadingStartedEvent arg0 ) { } @ org . apache . stanbol . ontologymanager . multiplexer . clerezza . collector . Override public void finishedLoadingOntology ( org . apache . stanbol . ontologymanager . multiplexer . clerezza . collector . LoadingFinishedEvent arg0 ) { log . info ( ( ( ( ( arg0 . isSuccessful ( ) ? \"Loaded\" : \"Failed\" ) + ( arg0 . isImported ( ) ? \"<sp>imported<sp>\" : \"<sp>\" ) ) + \"ontology<sp>\" ) + ( arg0 . getDocumentIRI ( ) ) ) ) ; } } ) ; mgr . addIRIMapper ( new org . apache . stanbol . commons . owl . PhonyIRIMapper ( null ) ) ; java . io . File f = new java . io . File ( url . toURI ( ) ) ; org . apache . stanbol . ontologymanager . servicesapi . io . OntologyInputSource < org . semanticweb . owlapi . model . OWLOntology > src = new org . apache . stanbol . ontologymanager . sources . owlapi . ParentPathInputSource ( f , mgr ) ; org . semanticweb . owlapi . model . OWLOntology original = src . getRootOntology ( ) ; \"<AssertPlaceHolder>\" ; org . apache . stanbol . ontologymanager . servicesapi . scope . OntologySpace spc = new org . apache . stanbol . ontologymanager . multiplexer . clerezza . impl . CustomSpaceImpl ( \"Test\" , scopeNs , org . apache . stanbol . ontologymanager . multiplexer . clerezza . MockOsgiContext . ontologyProvider ) ; spc . addOntology ( src ) ; } getRootOntology ( ) { return rootOntology ; }", "answer": "org . junit . Assert . assertNotNull ( original )"}
{"focal": "init ( com . gazbert . bxbot . exchange . api . ExchangeConfig ) { }", "testMethod": "testExchangeAdapterInitialisesSuccessfully ( ) { org . powermock . api . easymock . PowerMock . replayAll ( ) ; final com . gazbert . bxbot . exchanges . HuobiExchangeAdapter exchangeAdapter = new com . gazbert . bxbot . exchanges . HuobiExchangeAdapter ( ) ; exchangeAdapter . init ( exchangeConfig ) ; \"<AssertPlaceHolder>\" ; org . powermock . api . easymock . PowerMock . verifyAll ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( exchangeAdapter )", "total": "testExchangeAdapterInitialisesSuccessfully ( ) { org . powermock . api . easymock . PowerMock . replayAll ( ) ; final com . gazbert . bxbot . exchanges . HuobiExchangeAdapter exchangeAdapter = new com . gazbert . bxbot . exchanges . HuobiExchangeAdapter ( ) ; exchangeAdapter . init ( exchangeConfig ) ; \"<AssertPlaceHolder>\" ; org . powermock . api . easymock . PowerMock . verifyAll ( ) ; } init ( com . gazbert . bxbot . exchange . api . ExchangeConfig ) { }", "answer": "org . junit . Assert . assertNotNull ( exchangeAdapter )"}
{"focal": "lookup ( javax . naming . Name ) { return getThreadContext ( ) . lookup ( name ) ; }", "testMethod": "lookupValidator ( ) { final javax . validation . Validator validator = ( ( javax . validation . Validator ) ( new javax . naming . InitialContext ( ) . lookup ( \"java:comp/Validator\" ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( validator )", "total": "lookupValidator ( ) { final javax . validation . Validator validator = ( ( javax . validation . Validator ) ( new javax . naming . InitialContext ( ) . lookup ( \"java:comp/Validator\" ) ) ) ; \"<AssertPlaceHolder>\" ; } lookup ( javax . naming . Name ) { return getThreadContext ( ) . lookup ( name ) ; }", "answer": "org . junit . Assert . assertNotNull ( validator )"}
{"focal": "kekuliseAromaticRings ( org . openscience . cdk . interfaces . IAtomContainer ) { org . openscience . cdk . interfaces . IAtomContainer mNew = null ; try { mNew = ( ( org . openscience . cdk . interfaces . IAtomContainer ) ( molecule . clone ( ) ) ) ; } catch ( java . lang . Exception e ) { throw new org . openscience . cdk . exception . CDKException ( \"Failed<sp>to<sp>clone<sp>source<sp>molecule\" ) ; } org . openscience . cdk . interfaces . IRingSet ringSet ; try { ringSet = removeExtraRings ( mNew ) ; } catch ( org . openscience . cdk . exception . CDKException x ) { throw x ; } catch ( java . lang . Exception x ) { throw new org . openscience . cdk . exception . CDKException ( \"failure<sp>in<sp>SSSRFinder.findAllRings\" , x ) ; } if ( ringSet == null ) { throw new org . openscience . cdk . exception . CDKException ( \"failure<sp>in<sp>SSSRFinder.findAllRings\" ) ; } java . util . List < java . lang . Integer [ ] > rBondsArray = null ; java . util . List < java . util . List < java . lang . Integer > > ringGroups = null ; rBondsArray = getRingSystem ( mNew , ringSet ) ; ringGroups = assignRingGroups ( rBondsArray ) ; for ( int i = 0 ; i < ( ringGroups . size ( ) ) ; i ++ ) { setAllRingBondsSingleOrder ( ringGroups . get ( i ) , ringSet ) ; java . util . List < java . lang . Integer > atomNos = null ; atomNos = getAtomNosForRingGroup ( mNew , ringGroups . get ( i ) , ringSet ) ; java . util . List < java . lang . Integer > bondNos = null ; bondNos = getBondNosForRingGroup ( mNew , ringGroups . get ( i ) , ringSet ) ; java . util . List < java . lang . Integer [ ] > atomNoPairs = null ; atomNoPairs = getAtomNoPairsForRingGroup ( mNew , bondNos ) ; org . openscience . cdk . smiles . FixBondOrdersTool . Matrix M = new org . openscience . cdk . smiles . FixBondOrdersTool . Matrix ( atomNos . size ( ) , bondNos . size ( ) ) ; for ( int x = 0 ; x < ( M . getRows ( ) ) ; x ++ ) { for ( int y = 0 ; y < ( M . getCols ( ) ) ; y ++ ) { if ( java . util . Objects . equals ( atomNos . get ( x ) , atomNoPairs . get ( y ) [ 0 ] ) ) { M . set ( x , y , 1 ) ; } else { if ( java . util . Objects . equals ( atomNos . get ( x ) , atomNoPairs . get ( y ) [ 1 ] ) ) { M . set ( x , y , 1 ) ; } else { M . set ( x , y , 0 ) ; } } } } java . util . List < java . lang . Integer > freeValencies = null ; freeValencies = getFreeValenciesForRingGroup ( mNew , atomNos , M , ringSet ) ; java . util . List < java . lang . Integer > bondOrders = new java . util . ArrayList < java . lang . Integer > ( ) ; for ( int j = 0 ; j < ( bondNos . size ( ) ) ; j ++ ) { bondOrders . add ( 0 ) ; } if ( solveMatrix ( M , atomNos , bondNos , freeValencies , atomNoPairs , bondOrders ) ) { for ( int j = 0 ; j < ( bondOrders . size ( ) ) ; j ++ ) { mNew . getBond ( bondNos . get ( j ) ) . setOrder ( ( ( bondOrders . get ( j ) ) == 1 ? IBond . Order . SINGLE : IBond . Order . DOUBLE ) ) ; } } else { } } return mNew ; }", "testMethod": "testAcyclic ( ) { java . lang . String smiles = \"CCCCCCC\" ; org . openscience . cdk . smiles . SmilesParser smilesParser = new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . silent . SilentChemObjectBuilder . getInstance ( ) ) ; org . openscience . cdk . interfaces . IAtomContainer molecule = smilesParser . parseSmiles ( smiles ) ; molecule = org . openscience . cdk . smiles . FixBondOrdersToolTest . fbot . kekuliseAromaticRings ( molecule ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( molecule )", "total": "testAcyclic ( ) { java . lang . String smiles = \"CCCCCCC\" ; org . openscience . cdk . smiles . SmilesParser smilesParser = new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . silent . SilentChemObjectBuilder . getInstance ( ) ) ; org . openscience . cdk . interfaces . IAtomContainer molecule = smilesParser . parseSmiles ( smiles ) ; molecule = org . openscience . cdk . smiles . FixBondOrdersToolTest . fbot . kekuliseAromaticRings ( molecule ) ; \"<AssertPlaceHolder>\" ; } kekuliseAromaticRings ( org . openscience . cdk . interfaces . IAtomContainer ) { org . openscience . cdk . interfaces . IAtomContainer mNew = null ; try { mNew = ( ( org . openscience . cdk . interfaces . IAtomContainer ) ( molecule . clone ( ) ) ) ; } catch ( java . lang . Exception e ) { throw new org . openscience . cdk . exception . CDKException ( \"Failed<sp>to<sp>clone<sp>source<sp>molecule\" ) ; } org . openscience . cdk . interfaces . IRingSet ringSet ; try { ringSet = removeExtraRings ( mNew ) ; } catch ( org . openscience . cdk . exception . CDKException x ) { throw x ; } catch ( java . lang . Exception x ) { throw new org . openscience . cdk . exception . CDKException ( \"failure<sp>in<sp>SSSRFinder.findAllRings\" , x ) ; } if ( ringSet == null ) { throw new org . openscience . cdk . exception . CDKException ( \"failure<sp>in<sp>SSSRFinder.findAllRings\" ) ; } java . util . List < java . lang . Integer [ ] > rBondsArray = null ; java . util . List < java . util . List < java . lang . Integer > > ringGroups = null ; rBondsArray = getRingSystem ( mNew , ringSet ) ; ringGroups = assignRingGroups ( rBondsArray ) ; for ( int i = 0 ; i < ( ringGroups . size ( ) ) ; i ++ ) { setAllRingBondsSingleOrder ( ringGroups . get ( i ) , ringSet ) ; java . util . List < java . lang . Integer > atomNos = null ; atomNos = getAtomNosForRingGroup ( mNew , ringGroups . get ( i ) , ringSet ) ; java . util . List < java . lang . Integer > bondNos = null ; bondNos = getBondNosForRingGroup ( mNew , ringGroups . get ( i ) , ringSet ) ; java . util . List < java . lang . Integer [ ] > atomNoPairs = null ; atomNoPairs = getAtomNoPairsForRingGroup ( mNew , bondNos ) ; org . openscience . cdk . smiles . FixBondOrdersTool . Matrix M = new org . openscience . cdk . smiles . FixBondOrdersTool . Matrix ( atomNos . size ( ) , bondNos . size ( ) ) ; for ( int x = 0 ; x < ( M . getRows ( ) ) ; x ++ ) { for ( int y = 0 ; y < ( M . getCols ( ) ) ; y ++ ) { if ( java . util . Objects . equals ( atomNos . get ( x ) , atomNoPairs . get ( y ) [ 0 ] ) ) { M . set ( x , y , 1 ) ; } else { if ( java . util . Objects . equals ( atomNos . get ( x ) , atomNoPairs . get ( y ) [ 1 ] ) ) { M . set ( x , y , 1 ) ; } else { M . set ( x , y , 0 ) ; } } } } java . util . List < java . lang . Integer > freeValencies = null ; freeValencies = getFreeValenciesForRingGroup ( mNew , atomNos , M , ringSet ) ; java . util . List < java . lang . Integer > bondOrders = new java . util . ArrayList < java . lang . Integer > ( ) ; for ( int j = 0 ; j < ( bondNos . size ( ) ) ; j ++ ) { bondOrders . add ( 0 ) ; } if ( solveMatrix ( M , atomNos , bondNos , freeValencies , atomNoPairs , bondOrders ) ) { for ( int j = 0 ; j < ( bondOrders . size ( ) ) ; j ++ ) { mNew . getBond ( bondNos . get ( j ) ) . setOrder ( ( ( bondOrders . get ( j ) ) == 1 ? IBond . Order . SINGLE : IBond . Order . DOUBLE ) ) ; } } else { } } return mNew ; }", "answer": "org . junit . Assert . assertNotNull ( molecule )"}
{"focal": "createSnippet ( java . lang . String , java . lang . String , java . lang . String , java . lang . String , org . gitlab4j . api . models . Visibility ) { return org . gitlab4j . api . TestProjectApiSnippets . gitLabApi . getProjectApi ( ) . createSnippet ( org . gitlab4j . api . TestProjectApiSnippets . testProjectId , title , filename , description , code , visibility ) ; }", "testMethod": "testDeleteSnippet ( ) { java . lang . String title = ( org . gitlab4j . api . TestProjectApiSnippets . TEST_SNIPPET_TITLE_PREFIX ) + \"Test<sp>listSnippets()\" ; java . lang . String filename = \"test-delete-snippet.js\" ; java . lang . String description = null ; java . lang . String code = \"window.open();\" ; org . gitlab4j . api . models . Visibility visibility = org . gitlab4j . api . models . Visibility . INTERNAL ; org . gitlab4j . api . models . Snippet createdSnippet = createSnippet ( title , filename , description , code , visibility ) ; \"<AssertPlaceHolder>\" ; int snippetId = createdSnippet . getId ( ) ; org . gitlab4j . api . TestProjectApiSnippets . gitLabApi . getProjectApi ( ) . deleteSnippet ( org . gitlab4j . api . TestProjectApiSnippets . testProjectId , snippetId ) ; java . util . List < org . gitlab4j . api . models . Snippet > snippets = org . gitlab4j . api . TestProjectApiSnippets . gitLabApi . getProjectApi ( ) . getSnippets ( org . gitlab4j . api . TestProjectApiSnippets . testProjectId ) ; if ( snippets != null ) { for ( org . gitlab4j . api . models . Snippet snippet : snippets ) { if ( ( snippet . getId ( ) ) == snippetId ) { org . junit . Assert . fail ( \"Snippet<sp>was<sp>not<sp>deleted.\" ) ; } } } }", "assertLine": "org . junit . Assert . assertNotNull ( createdSnippet )", "total": "testDeleteSnippet ( ) { java . lang . String title = ( org . gitlab4j . api . TestProjectApiSnippets . TEST_SNIPPET_TITLE_PREFIX ) + \"Test<sp>listSnippets()\" ; java . lang . String filename = \"test-delete-snippet.js\" ; java . lang . String description = null ; java . lang . String code = \"window.open();\" ; org . gitlab4j . api . models . Visibility visibility = org . gitlab4j . api . models . Visibility . INTERNAL ; org . gitlab4j . api . models . Snippet createdSnippet = createSnippet ( title , filename , description , code , visibility ) ; \"<AssertPlaceHolder>\" ; int snippetId = createdSnippet . getId ( ) ; org . gitlab4j . api . TestProjectApiSnippets . gitLabApi . getProjectApi ( ) . deleteSnippet ( org . gitlab4j . api . TestProjectApiSnippets . testProjectId , snippetId ) ; java . util . List < org . gitlab4j . api . models . Snippet > snippets = org . gitlab4j . api . TestProjectApiSnippets . gitLabApi . getProjectApi ( ) . getSnippets ( org . gitlab4j . api . TestProjectApiSnippets . testProjectId ) ; if ( snippets != null ) { for ( org . gitlab4j . api . models . Snippet snippet : snippets ) { if ( ( snippet . getId ( ) ) == snippetId ) { org . junit . Assert . fail ( \"Snippet<sp>was<sp>not<sp>deleted.\" ) ; } } } } createSnippet ( java . lang . String , java . lang . String , java . lang . String , java . lang . String , org . gitlab4j . api . models . Visibility ) { return org . gitlab4j . api . TestProjectApiSnippets . gitLabApi . getProjectApi ( ) . createSnippet ( org . gitlab4j . api . TestProjectApiSnippets . testProjectId , title , filename , description , code , visibility ) ; }", "answer": "org . junit . Assert . assertNotNull ( createdSnippet )"}
{"focal": "processSystem ( ) { org . junit . Assert . assertNotNull ( injectable ) ; }", "testMethod": "Regression_When_superMapper_plugin_in_use_Should_not_break_regular_object_inection ( ) { class Injectable { } class TestSystem extends net . mostlyoriginal . api . plugin . extendedcomponentmapper . BaseSystem { private net . mostlyoriginal . api . plugin . extendedcomponentmapper . M < net . mostlyoriginal . api . plugin . extendedcomponentmapper . TestMarker > mTest ; @ com . artemis . annotations . Wire Injectable injectable ; @ net . mostlyoriginal . api . plugin . extendedcomponentmapper . Override protected void processSystem ( ) { \"<AssertPlaceHolder>\" ; } } net . mostlyoriginal . api . plugin . extendedcomponentmapper . WorldConfiguration configuration = new net . mostlyoriginal . api . plugin . extendedcomponentmapper . WorldConfigurationBuilder ( ) . dependsOn ( net . mostlyoriginal . api . plugin . extendedcomponentmapper . ExtendedComponentMapperPlugin . class ) . with ( new TestSystem ( ) ) . build ( ) ; configuration . register ( new Injectable ( ) ) ; new net . mostlyoriginal . api . plugin . extendedcomponentmapper . World ( configuration ) . process ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( injectable )", "total": "Regression_When_superMapper_plugin_in_use_Should_not_break_regular_object_inection ( ) { class Injectable { } class TestSystem extends net . mostlyoriginal . api . plugin . extendedcomponentmapper . BaseSystem { private net . mostlyoriginal . api . plugin . extendedcomponentmapper . M < net . mostlyoriginal . api . plugin . extendedcomponentmapper . TestMarker > mTest ; @ com . artemis . annotations . Wire Injectable injectable ; @ net . mostlyoriginal . api . plugin . extendedcomponentmapper . Override protected void processSystem ( ) { \"<AssertPlaceHolder>\" ; } } net . mostlyoriginal . api . plugin . extendedcomponentmapper . WorldConfiguration configuration = new net . mostlyoriginal . api . plugin . extendedcomponentmapper . WorldConfigurationBuilder ( ) . dependsOn ( net . mostlyoriginal . api . plugin . extendedcomponentmapper . ExtendedComponentMapperPlugin . class ) . with ( new TestSystem ( ) ) . build ( ) ; configuration . register ( new Injectable ( ) ) ; new net . mostlyoriginal . api . plugin . extendedcomponentmapper . World ( configuration ) . process ( ) ; } processSystem ( ) { org . junit . Assert . assertNotNull ( injectable ) ; }", "answer": "org . junit . Assert . assertNotNull ( injectable )"}
{"focal": "getMappings ( ) { return mappings ; }", "testMethod": "testCalculateOverlapsAndReduceExactMatch ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ; org . openscience . cdk . smiles . SmilesParser sp = new org . openscience . cdk . smiles . SmilesParser ( builder ) ; org . openscience . cdk . interfaces . IAtomContainer Molecule1 = sp . parseSmiles ( \"O1C=CC=C1\" ) ; org . openscience . cdk . interfaces . IAtomContainer Molecule2 = sp . parseSmiles ( \"O1C=CC=C1\" ) ; org . openscience . smsd . algorithm . rgraph . CDKRMapHandler instance = new org . openscience . smsd . algorithm . rgraph . CDKRMapHandler ( ) ; instance . calculateOverlapsAndReduceExactMatch ( Molecule1 , Molecule2 , true , false , false ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance . getMappings ( ) )", "total": "testCalculateOverlapsAndReduceExactMatch ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ; org . openscience . cdk . smiles . SmilesParser sp = new org . openscience . cdk . smiles . SmilesParser ( builder ) ; org . openscience . cdk . interfaces . IAtomContainer Molecule1 = sp . parseSmiles ( \"O1C=CC=C1\" ) ; org . openscience . cdk . interfaces . IAtomContainer Molecule2 = sp . parseSmiles ( \"O1C=CC=C1\" ) ; org . openscience . smsd . algorithm . rgraph . CDKRMapHandler instance = new org . openscience . smsd . algorithm . rgraph . CDKRMapHandler ( ) ; instance . calculateOverlapsAndReduceExactMatch ( Molecule1 , Molecule2 , true , false , false ) ; \"<AssertPlaceHolder>\" ; } getMappings ( ) { return mappings ; }", "answer": "org . junit . Assert . assertNotNull ( instance . getMappings ( ) )"}
{"focal": "getImageData ( ) { checkWidget ( ) ; if ( ( textLayerImage ) == null ) return null ; return textLayerImage . getImageData ( ) ; }", "testMethod": "testGetImageData ( ) { org . eclipse . gef . cloudio . internal . ui . TagCloud cloud = new org . eclipse . gef . cloudio . internal . ui . TagCloud ( composite , org . eclipse . swt . SWT . NONE ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( cloud . getImageData ( ) )", "total": "testGetImageData ( ) { org . eclipse . gef . cloudio . internal . ui . TagCloud cloud = new org . eclipse . gef . cloudio . internal . ui . TagCloud ( composite , org . eclipse . swt . SWT . NONE ) ; \"<AssertPlaceHolder>\" ; } getImageData ( ) { checkWidget ( ) ; if ( ( textLayerImage ) == null ) return null ; return textLayerImage . getImageData ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( cloud . getImageData ( ) )"}
{"focal": "getRule ( java . lang . String ) { return getSchemaConcept ( grakn . core . concept . Label . of ( label ) , Schema . BaseType . RULE ) ; }", "testMethod": "whenDefiningARule_TheRuleIsInTheKB ( ) { graql . lang . pattern . Pattern when = graql . lang . Graql . parsePattern ( \"$x<sp>isa<sp>entity;\" ) ; graql . lang . pattern . Pattern then = graql . lang . Graql . parsePattern ( \"$x<sp>isa<sp>entity;\" ) ; graql . lang . statement . Statement vars = graql . lang . Graql . type ( \"my-rule\" ) . sub ( Graql . Token . Type . RULE ) . when ( when ) . then ( then ) ; tx . execute ( graql . lang . Graql . define ( vars ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( tx . getRule ( \"my-rule\" ) )", "total": "whenDefiningARule_TheRuleIsInTheKB ( ) { graql . lang . pattern . Pattern when = graql . lang . Graql . parsePattern ( \"$x<sp>isa<sp>entity;\" ) ; graql . lang . pattern . Pattern then = graql . lang . Graql . parsePattern ( \"$x<sp>isa<sp>entity;\" ) ; graql . lang . statement . Statement vars = graql . lang . Graql . type ( \"my-rule\" ) . sub ( Graql . Token . Type . RULE ) . when ( when ) . then ( then ) ; tx . execute ( graql . lang . Graql . define ( vars ) ) ; \"<AssertPlaceHolder>\" ; } getRule ( java . lang . String ) { return getSchemaConcept ( grakn . core . concept . Label . of ( label ) , Schema . BaseType . RULE ) ; }", "answer": "org . junit . Assert . assertNotNull ( tx . getRule ( \"my-rule\" ) )"}
{"focal": "write ( java . lang . String ) { final org . apache . hadoop . fs . Path path = getFullPath ( fileName ) ; try { final java . io . OutputStream stream = this . fileSystem . create ( path , false ) ; if ( eu . fbk . knowledgestore . filestore . HadoopFileStore . LOGGER . isDebugEnabled ( ) ) { eu . fbk . knowledgestore . filestore . HadoopFileStore . LOGGER . debug ( ( \"Creating<sp>file<sp>\" + ( getRelativePath ( path ) ) ) ) ; } return stream ; } catch ( final java . io . IOException ex ) { if ( this . fileSystem . exists ( path ) ) { throw new eu . fbk . knowledgestore . filestore . FileExistsException ( fileName , \"Cannot<sp>overwrite<sp>file\" ) ; } throw ex ; } }", "testMethod": "writeMoreFiles ( ) { try { for ( int i = 1 ; i <= ( NUM_FILES ) ; i ++ ) { final java . io . OutputStream outStream = getFileStore ( ) . write ( ( \"myFile\" + i ) ) ; \"<AssertPlaceHolder>\" ; outStream . write ( ( ( CONTENT ) + i ) . getBytes ( ) ) ; outStream . close ( ) ; try { java . lang . Thread . sleep ( 10 ) ; } catch ( java . lang . Exception e ) { } } java . io . InputStream f9 = getFileStore ( ) . read ( \"myFile9\" ) ; System . out . println ( new java . lang . String ( com . google . common . io . ByteStreams . toByteArray ( f9 ) , com . google . common . base . Charsets . UTF_8 ) ) ; f9 . close ( ) ; java . io . InputStream f1 = getFileStore ( ) . read ( \"myFile1\" ) ; System . out . println ( new java . lang . String ( com . google . common . io . ByteStreams . toByteArray ( f1 ) , com . google . common . base . Charsets . UTF_8 ) ) ; f1 . close ( ) ; getFileStore ( ) . delete ( \"myFile1\" ) ; getFileStore ( ) . delete ( \"myFile9\" ) ; System . out . println ( \"List<sp>files:\" ) ; for ( java . lang . String s : getFileStore ( ) . list ( ) ) { System . out . println ( s ) ; } } catch ( final eu . fbk . knowledgestore . filestore . FileExistsException e ) { e . printStackTrace ( ) ; } catch ( final java . io . IOException e ) { e . printStackTrace ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( outStream )", "total": "writeMoreFiles ( ) { try { for ( int i = 1 ; i <= ( NUM_FILES ) ; i ++ ) { final java . io . OutputStream outStream = getFileStore ( ) . write ( ( \"myFile\" + i ) ) ; \"<AssertPlaceHolder>\" ; outStream . write ( ( ( CONTENT ) + i ) . getBytes ( ) ) ; outStream . close ( ) ; try { java . lang . Thread . sleep ( 10 ) ; } catch ( java . lang . Exception e ) { } } java . io . InputStream f9 = getFileStore ( ) . read ( \"myFile9\" ) ; System . out . println ( new java . lang . String ( com . google . common . io . ByteStreams . toByteArray ( f9 ) , com . google . common . base . Charsets . UTF_8 ) ) ; f9 . close ( ) ; java . io . InputStream f1 = getFileStore ( ) . read ( \"myFile1\" ) ; System . out . println ( new java . lang . String ( com . google . common . io . ByteStreams . toByteArray ( f1 ) , com . google . common . base . Charsets . UTF_8 ) ) ; f1 . close ( ) ; getFileStore ( ) . delete ( \"myFile1\" ) ; getFileStore ( ) . delete ( \"myFile9\" ) ; System . out . println ( \"List<sp>files:\" ) ; for ( java . lang . String s : getFileStore ( ) . list ( ) ) { System . out . println ( s ) ; } } catch ( final eu . fbk . knowledgestore . filestore . FileExistsException e ) { e . printStackTrace ( ) ; } catch ( final java . io . IOException e ) { e . printStackTrace ( ) ; } } write ( java . lang . String ) { final org . apache . hadoop . fs . Path path = getFullPath ( fileName ) ; try { final java . io . OutputStream stream = this . fileSystem . create ( path , false ) ; if ( eu . fbk . knowledgestore . filestore . HadoopFileStore . LOGGER . isDebugEnabled ( ) ) { eu . fbk . knowledgestore . filestore . HadoopFileStore . LOGGER . debug ( ( \"Creating<sp>file<sp>\" + ( getRelativePath ( path ) ) ) ) ; } return stream ; } catch ( final java . io . IOException ex ) { if ( this . fileSystem . exists ( path ) ) { throw new eu . fbk . knowledgestore . filestore . FileExistsException ( fileName , \"Cannot<sp>overwrite<sp>file\" ) ; } throw ex ; } }", "answer": "org . junit . Assert . assertNotNull ( outStream )"}
{"focal": "getNewSession ( java . util . Map ) { java . lang . String currentName = java . lang . Thread . currentThread ( ) . getName ( ) ; java . lang . Thread . currentThread ( ) . setName ( getProxyName ( ) ) ; if ( ! ( hasCapability ( requestedCapability ) ) ) { return null ; } de . zalando . ep . zalenium . proxy . CloudTestingRemoteProxy . logger . info ( \"Test<sp>will<sp>be<sp>forwarded<sp>to<sp>{}<sp>-<sp>{}\" , getProxyName ( ) , requestedCapability ) ; java . lang . Thread . currentThread ( ) . setName ( currentName ) ; return super . getNewSession ( requestedCapability ) ; }", "testMethod": "credentialsAreAddedInSessionCreation ( ) { java . util . Map < java . lang . String , java . lang . Object > requestedCapability = new java . util . HashMap ( ) ; requestedCapability . put ( CapabilityType . BROWSER_NAME , BrowserType . IE ) ; requestedCapability . put ( CapabilityType . PLATFORM_NAME , Platform . WIN8 ) ; org . openqa . grid . internal . TestSession testSession = testingBotProxy . getNewSession ( requestedCapability ) ; \"<AssertPlaceHolder>\" ; org . openqa . grid . web . servlet . handler . WebDriverRequest request = de . zalando . ep . zalenium . util . TestUtils . getMockedWebDriverRequestStartSession ( BrowserType . IE , Platform . WIN8 ) ; javax . servlet . http . HttpServletResponse response = mock ( javax . servlet . http . HttpServletResponse . class ) ; javax . servlet . ServletOutputStream stream = mock ( javax . servlet . ServletOutputStream . class ) ; when ( response . getOutputStream ( ) ) . thenReturn ( stream ) ; testSession . forward ( request , response , true ) ; de . zalando . ep . zalenium . util . Environment env = new de . zalando . ep . zalenium . util . Environment ( ) ; java . lang . String expectedBody = java . lang . String . format ( ( \"{\\\"desiredCapabilities\\\":{\\\"browserName\\\":\\\"internet<sp>explorer\\\",\\\"platformName\\\":\" + \"\\\"WIN8\\\",\\\"key\\\":\\\"%s\\\",\\\"secret\\\":\\\"%s\\\",\\\"version\\\":\\\"latest\\\"}}\" ) , env . getStringEnvVariable ( \"TESTINGBOT_KEY\" , \"\" ) , env . getStringEnvVariable ( \"TESTINGBOT_SECRET\" , \"\" ) ) ; verify ( request ) . setBody ( expectedBody ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( testSession )", "total": "credentialsAreAddedInSessionCreation ( ) { java . util . Map < java . lang . String , java . lang . Object > requestedCapability = new java . util . HashMap ( ) ; requestedCapability . put ( CapabilityType . BROWSER_NAME , BrowserType . IE ) ; requestedCapability . put ( CapabilityType . PLATFORM_NAME , Platform . WIN8 ) ; org . openqa . grid . internal . TestSession testSession = testingBotProxy . getNewSession ( requestedCapability ) ; \"<AssertPlaceHolder>\" ; org . openqa . grid . web . servlet . handler . WebDriverRequest request = de . zalando . ep . zalenium . util . TestUtils . getMockedWebDriverRequestStartSession ( BrowserType . IE , Platform . WIN8 ) ; javax . servlet . http . HttpServletResponse response = mock ( javax . servlet . http . HttpServletResponse . class ) ; javax . servlet . ServletOutputStream stream = mock ( javax . servlet . ServletOutputStream . class ) ; when ( response . getOutputStream ( ) ) . thenReturn ( stream ) ; testSession . forward ( request , response , true ) ; de . zalando . ep . zalenium . util . Environment env = new de . zalando . ep . zalenium . util . Environment ( ) ; java . lang . String expectedBody = java . lang . String . format ( ( \"{\\\"desiredCapabilities\\\":{\\\"browserName\\\":\\\"internet<sp>explorer\\\",\\\"platformName\\\":\" + \"\\\"WIN8\\\",\\\"key\\\":\\\"%s\\\",\\\"secret\\\":\\\"%s\\\",\\\"version\\\":\\\"latest\\\"}}\" ) , env . getStringEnvVariable ( \"TESTINGBOT_KEY\" , \"\" ) , env . getStringEnvVariable ( \"TESTINGBOT_SECRET\" , \"\" ) ) ; verify ( request ) . setBody ( expectedBody ) ; } getNewSession ( java . util . Map ) { java . lang . String currentName = java . lang . Thread . currentThread ( ) . getName ( ) ; java . lang . Thread . currentThread ( ) . setName ( getProxyName ( ) ) ; if ( ! ( hasCapability ( requestedCapability ) ) ) { return null ; } de . zalando . ep . zalenium . proxy . CloudTestingRemoteProxy . logger . info ( \"Test<sp>will<sp>be<sp>forwarded<sp>to<sp>{}<sp>-<sp>{}\" , getProxyName ( ) , requestedCapability ) ; java . lang . Thread . currentThread ( ) . setName ( currentName ) ; return super . getNewSession ( requestedCapability ) ; }", "answer": "org . junit . Assert . assertNotNull ( testSession )"}
{"focal": "get ( java . lang . String ) { com . codeabovelab . dm . cluman . validate . ExtendedAssert . matchAz09Hyp ( name , \"user<sp>name\" ) ; return map . get ( name ) ; }", "testMethod": "test ( ) { try ( java . lang . AutoCloseable ctx = diagnosticInfo . injectToContext ( java . util . UUID . randomUUID ( ) . toString ( ) , null ) ) { java . lang . String object = org . slf4j . MDC . get ( DiagnosticInfo . REQUEST_UUID ) ; System . out . println ( ( ( ( DiagnosticInfo . REQUEST_UUID ) + \":\\t\" ) + object ) ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( object )", "total": "test ( ) { try ( java . lang . AutoCloseable ctx = diagnosticInfo . injectToContext ( java . util . UUID . randomUUID ( ) . toString ( ) , null ) ) { java . lang . String object = org . slf4j . MDC . get ( DiagnosticInfo . REQUEST_UUID ) ; System . out . println ( ( ( ( DiagnosticInfo . REQUEST_UUID ) + \":\\t\" ) + object ) ) ; \"<AssertPlaceHolder>\" ; } } get ( java . lang . String ) { com . codeabovelab . dm . cluman . validate . ExtendedAssert . matchAz09Hyp ( name , \"user<sp>name\" ) ; return map . get ( name ) ; }", "answer": "org . junit . Assert . assertNotNull ( object )"}
{"focal": "getFooter ( ) { org . apache . qpid . proton . amqp . messaging . Footer result = null ; if ( ( ( footerMap ) != null ) && ( ! ( footerMap . isEmpty ( ) ) ) ) { result = new org . apache . qpid . proton . amqp . messaging . Footer ( footerMap ) ; } return result ; }", "testMethod": "testDeliveryAnnotationsReturnedOnNonEmptyFooterMapInMessage ( ) { org . apache . qpid . jms . provider . amqp . message . AmqpJmsMessageFacade amqpMessageFacade = createNewMessageFacade ( ) ; java . util . Map < org . apache . qpid . proton . amqp . Symbol , java . lang . Object > footerMap = new java . util . HashMap ( ) ; footerMap . put ( org . apache . qpid . proton . amqp . Symbol . valueOf ( \"test\" ) , \"value\" ) ; amqpMessageFacade . setFooter ( new org . apache . qpid . proton . amqp . messaging . Footer ( footerMap ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( amqpMessageFacade . getFooter ( ) )", "total": "testDeliveryAnnotationsReturnedOnNonEmptyFooterMapInMessage ( ) { org . apache . qpid . jms . provider . amqp . message . AmqpJmsMessageFacade amqpMessageFacade = createNewMessageFacade ( ) ; java . util . Map < org . apache . qpid . proton . amqp . Symbol , java . lang . Object > footerMap = new java . util . HashMap ( ) ; footerMap . put ( org . apache . qpid . proton . amqp . Symbol . valueOf ( \"test\" ) , \"value\" ) ; amqpMessageFacade . setFooter ( new org . apache . qpid . proton . amqp . messaging . Footer ( footerMap ) ) ; \"<AssertPlaceHolder>\" ; } getFooter ( ) { org . apache . qpid . proton . amqp . messaging . Footer result = null ; if ( ( ( footerMap ) != null ) && ( ! ( footerMap . isEmpty ( ) ) ) ) { result = new org . apache . qpid . proton . amqp . messaging . Footer ( footerMap ) ; } return result ; }", "answer": "org . junit . Assert . assertNotNull ( amqpMessageFacade . getFooter ( ) )"}
{"focal": "select ( java . lang . String ) { return this . content . toDocument ( ) . select ( cssSelect ) ; }", "testMethod": "doGet ( ) { com . zhangyingwei . cockroach . http . client . okhttp . COkHttpClient client = new com . zhangyingwei . cockroach . http . client . okhttp . COkHttpClient ( ) ; com . zhangyingwei . cockroach . executer . response . TaskResponse resp = ( ( com . zhangyingwei . cockroach . executer . response . TaskResponse ) ( client . doGet ( new com . zhangyingwei . cockroach . executer . task . Task ( \"https://luolei.org\" ) ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( resp . select ( \"a\" ) )", "total": "doGet ( ) { com . zhangyingwei . cockroach . http . client . okhttp . COkHttpClient client = new com . zhangyingwei . cockroach . http . client . okhttp . COkHttpClient ( ) ; com . zhangyingwei . cockroach . executer . response . TaskResponse resp = ( ( com . zhangyingwei . cockroach . executer . response . TaskResponse ) ( client . doGet ( new com . zhangyingwei . cockroach . executer . task . Task ( \"https://luolei.org\" ) ) ) ) ; \"<AssertPlaceHolder>\" ; } select ( java . lang . String ) { return this . content . toDocument ( ) . select ( cssSelect ) ; }", "answer": "org . junit . Assert . assertNotNull ( resp . select ( \"a\" ) )"}
{"focal": "getMetadatas ( fr . gouv . vitam . storage . driver . model . StorageGetMetadataRequest ) { return new fr . gouv . vitam . storage . driver . model . StorageMetadataResult ( null ) ; }", "testMethod": "getObjectMetadataTestOK ( ) { when ( fr . gouv . vitam . storage . offers . workspace . driver . ConnectionImplTest . mock . get ( ) ) . thenReturn ( javax . ws . rs . core . Response . status ( Status . OK ) . entity ( mockMetadatasObjectResult ( ) ) . build ( ) ) ; final fr . gouv . vitam . storage . driver . model . StorageGetMetadataRequest request = new fr . gouv . vitam . storage . driver . model . StorageGetMetadataRequest ( fr . gouv . vitam . storage . offers . workspace . driver . ConnectionImplTest . tenant , DataCategory . OBJECT . getFolder ( ) , \"guid\" , false ) ; try ( fr . gouv . vitam . storage . driver . Connection connection = fr . gouv . vitam . storage . offers . workspace . driver . ConnectionImplTest . driver . connect ( fr . gouv . vitam . storage . offers . workspace . driver . ConnectionImplTest . offer . getId ( ) ) ) { final fr . gouv . vitam . storage . driver . model . StorageMetadataResult result = connection . getMetadatas ( request ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "getObjectMetadataTestOK ( ) { when ( fr . gouv . vitam . storage . offers . workspace . driver . ConnectionImplTest . mock . get ( ) ) . thenReturn ( javax . ws . rs . core . Response . status ( Status . OK ) . entity ( mockMetadatasObjectResult ( ) ) . build ( ) ) ; final fr . gouv . vitam . storage . driver . model . StorageGetMetadataRequest request = new fr . gouv . vitam . storage . driver . model . StorageGetMetadataRequest ( fr . gouv . vitam . storage . offers . workspace . driver . ConnectionImplTest . tenant , DataCategory . OBJECT . getFolder ( ) , \"guid\" , false ) ; try ( fr . gouv . vitam . storage . driver . Connection connection = fr . gouv . vitam . storage . offers . workspace . driver . ConnectionImplTest . driver . connect ( fr . gouv . vitam . storage . offers . workspace . driver . ConnectionImplTest . offer . getId ( ) ) ) { final fr . gouv . vitam . storage . driver . model . StorageMetadataResult result = connection . getMetadatas ( request ) ; \"<AssertPlaceHolder>\" ; } } getMetadatas ( fr . gouv . vitam . storage . driver . model . StorageGetMetadataRequest ) { return new fr . gouv . vitam . storage . driver . model . StorageMetadataResult ( null ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getUDTs ( java . lang . String , java . lang . String , java . lang . String , int [ ] ) { com . aliyun . odps . jdbc . OdpsResultSetMetaData meta = new com . aliyun . odps . jdbc . OdpsResultSetMetaData ( java . util . Arrays . asList ( \"TYPE_CAT\" , \"TYPE_SCHEM\" , \"TYPE_NAME\" , \"CLASS_NAME\" , \"DATA_TYPE\" , \"REMARKS\" , \"BASE_TYPE\" ) , java . util . Arrays . asList ( TypeInfoFactory . STRING , TypeInfoFactory . STRING , TypeInfoFactory . STRING , TypeInfoFactory . STRING , TypeInfoFactory . BIGINT , TypeInfoFactory . STRING , TypeInfoFactory . BIGINT ) ) ; return new com . aliyun . odps . jdbc . OdpsStaticResultSet ( getConnection ( ) , meta ) ; }", "testMethod": "testGetUDTs ( ) { java . sql . ResultSet rs = com . aliyun . odps . jdbc . OdpsDatabaseMetaDataTest . databaseMetaData . getUDTs ( null , null , null , null ) ; \"<AssertPlaceHolder>\" ; printRs ( rs ) ; rs . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( rs )", "total": "testGetUDTs ( ) { java . sql . ResultSet rs = com . aliyun . odps . jdbc . OdpsDatabaseMetaDataTest . databaseMetaData . getUDTs ( null , null , null , null ) ; \"<AssertPlaceHolder>\" ; printRs ( rs ) ; rs . close ( ) ; } getUDTs ( java . lang . String , java . lang . String , java . lang . String , int [ ] ) { com . aliyun . odps . jdbc . OdpsResultSetMetaData meta = new com . aliyun . odps . jdbc . OdpsResultSetMetaData ( java . util . Arrays . asList ( \"TYPE_CAT\" , \"TYPE_SCHEM\" , \"TYPE_NAME\" , \"CLASS_NAME\" , \"DATA_TYPE\" , \"REMARKS\" , \"BASE_TYPE\" ) , java . util . Arrays . asList ( TypeInfoFactory . STRING , TypeInfoFactory . STRING , TypeInfoFactory . STRING , TypeInfoFactory . STRING , TypeInfoFactory . BIGINT , TypeInfoFactory . STRING , TypeInfoFactory . BIGINT ) ) ; return new com . aliyun . odps . jdbc . OdpsStaticResultSet ( getConnection ( ) , meta ) ; }", "answer": "org . junit . Assert . assertNotNull ( rs )"}
{"focal": "call ( ) { try { return new org . openstack . atlas . usagerefactor . helpers . HostIdUsageMap ( host . getId ( ) , stingrayUsageClient . getHostUsage ( host ) ) ; } catch ( java . lang . Exception e ) { java . lang . String retString = java . lang . String . format ( \"Warning!<sp>Request<sp>for<sp>host<sp>%s<sp>usage<sp>from<sp>SNMP<sp>server<sp>failed.\" , host . getName ( ) ) ; LOG . warn ( retString , e ) ; } return new org . openstack . atlas . usagerefactor . helpers . HostIdUsageMap ( host . getId ( ) , new java . util . HashMap < java . lang . Integer , org . openstack . atlas . usagerefactor . SnmpUsage > ( ) ) ; }", "testMethod": "shouldReturnSnmpStats ( ) { usageCollector . setHost ( host ) ; usageCollector . setLoadbalancer ( loadBalancer ) ; when ( stingrayUsageClient . getVirtualServerStats ( org . mockito . Matchers . < org . openstack . atlas . service . domain . entities . Host > any ( ) , org . mockito . Matchers . < org . openstack . atlas . service . domain . entities . LoadBalancer > any ( ) ) ) . thenReturn ( new org . openstack . atlas . usagerefactor . SnmpStats ( ) ) ; org . openstack . atlas . usagerefactor . SnmpStats stats = statsCollector . call ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( stats )", "total": "shouldReturnSnmpStats ( ) { usageCollector . setHost ( host ) ; usageCollector . setLoadbalancer ( loadBalancer ) ; when ( stingrayUsageClient . getVirtualServerStats ( org . mockito . Matchers . < org . openstack . atlas . service . domain . entities . Host > any ( ) , org . mockito . Matchers . < org . openstack . atlas . service . domain . entities . LoadBalancer > any ( ) ) ) . thenReturn ( new org . openstack . atlas . usagerefactor . SnmpStats ( ) ) ; org . openstack . atlas . usagerefactor . SnmpStats stats = statsCollector . call ( ) ; \"<AssertPlaceHolder>\" ; } call ( ) { try { return new org . openstack . atlas . usagerefactor . helpers . HostIdUsageMap ( host . getId ( ) , stingrayUsageClient . getHostUsage ( host ) ) ; } catch ( java . lang . Exception e ) { java . lang . String retString = java . lang . String . format ( \"Warning!<sp>Request<sp>for<sp>host<sp>%s<sp>usage<sp>from<sp>SNMP<sp>server<sp>failed.\" , host . getName ( ) ) ; LOG . warn ( retString , e ) ; } return new org . openstack . atlas . usagerefactor . helpers . HostIdUsageMap ( host . getId ( ) , new java . util . HashMap < java . lang . Integer , org . openstack . atlas . usagerefactor . SnmpUsage > ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( stats )"}
{"focal": "getReadOnlyConnection ( java . lang . String ) { return getReadWriteConnection ( tableName ) ; }", "testMethod": "testGetConnectionUserPassSetters ( ) { java . lang . String username = \"user\" ; java . lang . String password = \"_secret\" ; java . lang . String url = ( ( \"jdbc:h2:mem:ormlite-up;USER=\" + username ) + \";PASSWORD=\" ) + password ; com . j256 . ormlite . jdbc . JdbcConnectionSource sds = new com . j256 . ormlite . jdbc . JdbcConnectionSource ( url ) ; sds . setUsername ( username ) ; sds . setPassword ( password ) ; \"<AssertPlaceHolder>\" ; sds . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( sds . getReadOnlyConnection ( null ) )", "total": "testGetConnectionUserPassSetters ( ) { java . lang . String username = \"user\" ; java . lang . String password = \"_secret\" ; java . lang . String url = ( ( \"jdbc:h2:mem:ormlite-up;USER=\" + username ) + \";PASSWORD=\" ) + password ; com . j256 . ormlite . jdbc . JdbcConnectionSource sds = new com . j256 . ormlite . jdbc . JdbcConnectionSource ( url ) ; sds . setUsername ( username ) ; sds . setPassword ( password ) ; \"<AssertPlaceHolder>\" ; sds . close ( ) ; } getReadOnlyConnection ( java . lang . String ) { return getReadWriteConnection ( tableName ) ; }", "answer": "org . junit . Assert . assertNotNull ( sds . getReadOnlyConnection ( null ) )"}
{"focal": "viewPerson ( java . lang . String ) { checkProfileStatus ( orcid ) ; org . orcid . jaxb . model . v3 . release . record . Person person = personDetailsManagerReadOnly . getPublicPersonDetails ( orcid ) ; publicAPISecurityManagerV3 . filter ( person ) ; org . orcid . api . common . util . v3 . ElementUtils . setPathToPerson ( person , orcid ) ; org . orcid . core . version . impl . Api3_0LastModifiedDatesHelper . calculateLastModified ( person ) ; sourceUtilsReadOnly . setSourceName ( person ) ; return javax . ws . rs . core . Response . ok ( person ) . build ( ) ; }", "testMethod": "testFindPerson ( ) { javax . ws . rs . core . Response response = serviceDelegator . viewPerson ( ORCID ) ; \"<AssertPlaceHolder>\" ; org . orcid . jaxb . model . record_v2 . Person person = ( ( org . orcid . jaxb . model . record_v2 . Person ) ( response . getEntity ( ) ) ) ; validatePerson ( person ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testFindPerson ( ) { javax . ws . rs . core . Response response = serviceDelegator . viewPerson ( ORCID ) ; \"<AssertPlaceHolder>\" ; org . orcid . jaxb . model . record_v2 . Person person = ( ( org . orcid . jaxb . model . record_v2 . Person ) ( response . getEntity ( ) ) ) ; validatePerson ( person ) ; } viewPerson ( java . lang . String ) { checkProfileStatus ( orcid ) ; org . orcid . jaxb . model . v3 . release . record . Person person = personDetailsManagerReadOnly . getPublicPersonDetails ( orcid ) ; publicAPISecurityManagerV3 . filter ( person ) ; org . orcid . api . common . util . v3 . ElementUtils . setPathToPerson ( person , orcid ) ; org . orcid . core . version . impl . Api3_0LastModifiedDatesHelper . calculateLastModified ( person ) ; sourceUtilsReadOnly . setSourceName ( person ) ; return javax . ws . rs . core . Response . ok ( person ) . build ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "toFilter ( ) { java . lang . String filter = ( ( ( ( this . attributePath . getFullyQualifiedAttributeName ( ) ) + \"<sp>\" ) + ( this . operation ) ) + \"<sp>\" ) + ( this . createCompareValueString ( ) ) ; return filter ; }", "testMethod": "test ( java . lang . String ) { edu . psu . swe . scim . spec . protocol . filter . FilterTest . LOG . info ( ( \"Running<sp>Filter<sp>Parser<sp>test<sp>on<sp>input:<sp>\" + filterText ) ) ; edu . psu . swe . scim . spec . protocol . search . Filter filter = new edu . psu . swe . scim . spec . protocol . search . Filter ( filterText ) ; edu . psu . swe . scim . spec . protocol . filter . FilterExpression expression = filter . getExpression ( ) ; edu . psu . swe . scim . spec . protocol . filter . FilterTest . LOG . info ( ( \"Parsed<sp>String:<sp>\" + ( expression . toFilter ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( expression )", "total": "test ( java . lang . String ) { edu . psu . swe . scim . spec . protocol . filter . FilterTest . LOG . info ( ( \"Running<sp>Filter<sp>Parser<sp>test<sp>on<sp>input:<sp>\" + filterText ) ) ; edu . psu . swe . scim . spec . protocol . search . Filter filter = new edu . psu . swe . scim . spec . protocol . search . Filter ( filterText ) ; edu . psu . swe . scim . spec . protocol . filter . FilterExpression expression = filter . getExpression ( ) ; edu . psu . swe . scim . spec . protocol . filter . FilterTest . LOG . info ( ( \"Parsed<sp>String:<sp>\" + ( expression . toFilter ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; } toFilter ( ) { java . lang . String filter = ( ( ( ( this . attributePath . getFullyQualifiedAttributeName ( ) ) + \"<sp>\" ) + ( this . operation ) ) + \"<sp>\" ) + ( this . createCompareValueString ( ) ) ; return filter ; }", "answer": "org . junit . Assert . assertNotNull ( expression )"}
{"focal": "debug ( java . lang . String ) { if ( log . isDebugEnabled ( ) ) { log . debug ( ( \"***<sp>DEBUG:<sp>\" + msg ) ) ; } }", "testMethod": "testCreatingVEventWithSequenceProperty ( ) { org . sakaiproject . calendar . api . CalendarEventEdit event = generateEvent ( ) ; java . lang . String sequence = \"12345\" ; event . setField ( \"vevent_sequence\" , sequence ) ; net . fortuna . ical4j . model . component . VEvent vevent = service . createEvent ( event ) ; log . debug ( \"testCreatingVEventWithSequenceProperty\" ) ; log . debug ( \"####################\" ) ; log . debug ( \"{}\" , vevent ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( vevent )", "total": "testCreatingVEventWithSequenceProperty ( ) { org . sakaiproject . calendar . api . CalendarEventEdit event = generateEvent ( ) ; java . lang . String sequence = \"12345\" ; event . setField ( \"vevent_sequence\" , sequence ) ; net . fortuna . ical4j . model . component . VEvent vevent = service . createEvent ( event ) ; log . debug ( \"testCreatingVEventWithSequenceProperty\" ) ; log . debug ( \"####################\" ) ; log . debug ( \"{}\" , vevent ) ; \"<AssertPlaceHolder>\" ; } debug ( java . lang . String ) { if ( log . isDebugEnabled ( ) ) { log . debug ( ( \"***<sp>DEBUG:<sp>\" + msg ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( vevent )"}
{"focal": "add ( org . ff4j . audit . Event ) { if ( ( ( capacity ) > 0 ) && ( ( size ( ) ) >= ( capacity ) ) ) { return false ; } return super . add ( e ) ; }", "testMethod": "testCacheProxyManagerPropertyDuringRefresh ( ) { org . ff4j . core . FeatureStore fs = new org . ff4j . store . InMemoryFeatureStore ( \"ff4j.xml\" ) ; org . ff4j . property . store . PropertyStore ps = new org . ff4j . property . store . InMemoryPropertyStore ( \"ff4j.xml\" ) ; org . ff4j . cache . FF4JCacheManager cm = new org . ff4j . cache . InMemoryCacheManager ( ) ; final org . ff4j . cache . FF4jCacheProxy proxy = new org . ff4j . cache . FF4jCacheProxy ( fs , ps , cm ) ; org . ff4j . cache . Store2CachePollingScheduler store2CachePollingScheduler = new org . ff4j . cache . Store2CachePollingScheduler ( proxy ) ; store2CachePollingScheduler . start ( 10 ) ; java . util . concurrent . ExecutorService fetchPropertyService = java . util . concurrent . Executors . newFixedThreadPool ( 20 ) ; java . util . concurrent . Callable < org . ff4j . property . Property < ? > > callable = new java . util . concurrent . Callable < org . ff4j . property . Property < ? > > ( ) { @ org . ff4j . test . cache . Override public org . ff4j . property . Property < ? > call ( ) throws org . ff4j . test . cache . Exception { try { return proxy . getCacheManager ( ) . getProperty ( \"a\" ) ; } catch ( java . lang . Exception e ) { throw e ; } } } ; java . util . List < java . util . concurrent . Callable < org . ff4j . property . Property < ? > > > multiplePropertyFetchCalls = new java . util . ArrayList < java . util . concurrent . Callable < org . ff4j . property . Property < ? > > > ( 1000 ) ; for ( int i = 0 ; i < 100 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { multiplePropertyFetchCalls . clear ( ) ; } for ( int k = 0 ; k < 100 ; k ++ ) { multiplePropertyFetchCalls . add ( callable ) ; } java . util . List < java . util . concurrent . Future < org . ff4j . property . Property < ? > > > fetchPropertyCalls = fetchPropertyService . invokeAll ( multiplePropertyFetchCalls ) ; for ( java . util . concurrent . Future < org . ff4j . property . Property < ? > > property : fetchPropertyCalls ) { \"<AssertPlaceHolder>\" ; } } }", "assertLine": "org . junit . Assert . assertNotNull ( property )", "total": "testCacheProxyManagerPropertyDuringRefresh ( ) { org . ff4j . core . FeatureStore fs = new org . ff4j . store . InMemoryFeatureStore ( \"ff4j.xml\" ) ; org . ff4j . property . store . PropertyStore ps = new org . ff4j . property . store . InMemoryPropertyStore ( \"ff4j.xml\" ) ; org . ff4j . cache . FF4JCacheManager cm = new org . ff4j . cache . InMemoryCacheManager ( ) ; final org . ff4j . cache . FF4jCacheProxy proxy = new org . ff4j . cache . FF4jCacheProxy ( fs , ps , cm ) ; org . ff4j . cache . Store2CachePollingScheduler store2CachePollingScheduler = new org . ff4j . cache . Store2CachePollingScheduler ( proxy ) ; store2CachePollingScheduler . start ( 10 ) ; java . util . concurrent . ExecutorService fetchPropertyService = java . util . concurrent . Executors . newFixedThreadPool ( 20 ) ; java . util . concurrent . Callable < org . ff4j . property . Property < ? > > callable = new java . util . concurrent . Callable < org . ff4j . property . Property < ? > > ( ) { @ org . ff4j . test . cache . Override public org . ff4j . property . Property < ? > call ( ) throws org . ff4j . test . cache . Exception { try { return proxy . getCacheManager ( ) . getProperty ( \"a\" ) ; } catch ( java . lang . Exception e ) { throw e ; } } } ; java . util . List < java . util . concurrent . Callable < org . ff4j . property . Property < ? > > > multiplePropertyFetchCalls = new java . util . ArrayList < java . util . concurrent . Callable < org . ff4j . property . Property < ? > > > ( 1000 ) ; for ( int i = 0 ; i < 100 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { multiplePropertyFetchCalls . clear ( ) ; } for ( int k = 0 ; k < 100 ; k ++ ) { multiplePropertyFetchCalls . add ( callable ) ; } java . util . List < java . util . concurrent . Future < org . ff4j . property . Property < ? > > > fetchPropertyCalls = fetchPropertyService . invokeAll ( multiplePropertyFetchCalls ) ; for ( java . util . concurrent . Future < org . ff4j . property . Property < ? > > property : fetchPropertyCalls ) { \"<AssertPlaceHolder>\" ; } } } add ( org . ff4j . audit . Event ) { if ( ( ( capacity ) > 0 ) && ( ( size ( ) ) >= ( capacity ) ) ) { return false ; } return super . add ( e ) ; }", "answer": "org . junit . Assert . assertNotNull ( property )"}
{"focal": "getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "testMethod": "shouldRejectOperationChainWhenUserHasMaxAuthScoreLessThanChainScore ( ) { final uk . gov . gchq . gaffer . graph . hook . OperationChainLimiter hook = fromJson ( uk . gov . gchq . gaffer . graph . hook . OperationChainLimiterTest . OP_CHAIN_LIMITER_PATH ) ; final uk . gov . gchq . gaffer . operation . OperationChain opChain = new uk . gov . gchq . gaffer . operation . OperationChain . Builder ( ) . first ( new uk . gov . gchq . gaffer . operation . impl . get . GetAllElements ( ) ) . then ( new uk . gov . gchq . gaffer . operation . impl . get . GetElements ( ) ) . then ( new uk . gov . gchq . gaffer . operation . impl . generate . GenerateObjects ( ) ) . build ( ) ; final uk . gov . gchq . gaffer . user . User user = new uk . gov . gchq . gaffer . user . User . Builder ( ) . opAuths ( \"SuperUser\" , \"User\" ) . build ( ) ; try { hook . preExecute ( opChain , new uk . gov . gchq . gaffer . store . Context ( user ) ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final uk . gov . gchq . gaffer . commonutil . exception . UnauthorisedException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "shouldRejectOperationChainWhenUserHasMaxAuthScoreLessThanChainScore ( ) { final uk . gov . gchq . gaffer . graph . hook . OperationChainLimiter hook = fromJson ( uk . gov . gchq . gaffer . graph . hook . OperationChainLimiterTest . OP_CHAIN_LIMITER_PATH ) ; final uk . gov . gchq . gaffer . operation . OperationChain opChain = new uk . gov . gchq . gaffer . operation . OperationChain . Builder ( ) . first ( new uk . gov . gchq . gaffer . operation . impl . get . GetAllElements ( ) ) . then ( new uk . gov . gchq . gaffer . operation . impl . get . GetElements ( ) ) . then ( new uk . gov . gchq . gaffer . operation . impl . generate . GenerateObjects ( ) ) . build ( ) ; final uk . gov . gchq . gaffer . user . User user = new uk . gov . gchq . gaffer . user . User . Builder ( ) . opAuths ( \"SuperUser\" , \"User\" ) . build ( ) ; try { hook . preExecute ( opChain , new uk . gov . gchq . gaffer . store . Context ( user ) ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final uk . gov . gchq . gaffer . commonutil . exception . UnauthorisedException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "field ( java . lang . String , com . liferay . portal . search . sort . SortOrder ) { com . liferay . portal . search . internal . sort . FieldSortImpl fieldSortImpl = new com . liferay . portal . search . internal . sort . FieldSortImpl ( field ) ; fieldSortImpl . setSortOrder ( sortOrder ) ; return fieldSortImpl ; }", "testMethod": "testFieldSort2 ( ) { com . liferay . portal . search . sort . SortOrder sortOrder = null ; com . liferay . portal . search . sort . FieldSort fieldSort = com . liferay . portal . search . sort . test . SortsInstantiationTest . _sorts . field ( \"field\" , sortOrder ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( fieldSort )", "total": "testFieldSort2 ( ) { com . liferay . portal . search . sort . SortOrder sortOrder = null ; com . liferay . portal . search . sort . FieldSort fieldSort = com . liferay . portal . search . sort . test . SortsInstantiationTest . _sorts . field ( \"field\" , sortOrder ) ; \"<AssertPlaceHolder>\" ; } field ( java . lang . String , com . liferay . portal . search . sort . SortOrder ) { com . liferay . portal . search . internal . sort . FieldSortImpl fieldSortImpl = new com . liferay . portal . search . internal . sort . FieldSortImpl ( field ) ; fieldSortImpl . setSortOrder ( sortOrder ) ; return fieldSortImpl ; }", "answer": "org . junit . Assert . assertNotNull ( fieldSort )"}
{"focal": "computeCompletionProposals ( org . eclipse . jface . text . ITextViewer , int ) { java . util . List < org . eclipse . jface . text . contentassist . ICompletionProposal > completions = new java . util . ArrayList ( ) ; org . eclipse . jface . text . IDocument doc = viewer . getDocument ( ) ; try { java . lang . String prefix = completionWord ( doc , offset ) ; int replacementOffset = offset ; int replacementLength = 0 ; if ( prefix != null ) { replacementLength = prefix . length ( ) ; replacementOffset -= replacementLength ; } java . lang . String toolName = getToolName ( doc , replacementOffset ) ; java . lang . String [ ] words = getCompletionStrings ( prefix , toolName ) ; for ( java . lang . String word : words ) { completions . add ( new org . eclipse . jface . text . contentassist . CompletionProposal ( word , replacementOffset , replacementLength , word . length ( ) ) ) ; } } catch ( org . eclipse . jface . text . BadLocationException e ) { e . printStackTrace ( ) ; } return completions . toArray ( new org . eclipse . jface . text . contentassist . ICompletionProposal [ completions . size ( ) ] ) ; }", "testMethod": "testCompletionRequest ( ) { org . eclipse . jface . text . Document testDocument = new org . eclipse . jface . text . Document ( \"\" ) ; org . eclipse . linuxtools . internal . systemtap . ui . ide . editors . stp . STPCompletionProcessor completionProcessor = new org . eclipse . linuxtools . internal . systemtap . ui . ide . editors . stp . STPCompletionProcessor ( ) ; org . eclipse . jface . text . contentassist . ICompletionProposal [ ] proposals = completionProcessor . computeCompletionProposals ( testDocument , 0 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( proposals )", "total": "testCompletionRequest ( ) { org . eclipse . jface . text . Document testDocument = new org . eclipse . jface . text . Document ( \"\" ) ; org . eclipse . linuxtools . internal . systemtap . ui . ide . editors . stp . STPCompletionProcessor completionProcessor = new org . eclipse . linuxtools . internal . systemtap . ui . ide . editors . stp . STPCompletionProcessor ( ) ; org . eclipse . jface . text . contentassist . ICompletionProposal [ ] proposals = completionProcessor . computeCompletionProposals ( testDocument , 0 ) ; \"<AssertPlaceHolder>\" ; } computeCompletionProposals ( org . eclipse . jface . text . ITextViewer , int ) { java . util . List < org . eclipse . jface . text . contentassist . ICompletionProposal > completions = new java . util . ArrayList ( ) ; org . eclipse . jface . text . IDocument doc = viewer . getDocument ( ) ; try { java . lang . String prefix = completionWord ( doc , offset ) ; int replacementOffset = offset ; int replacementLength = 0 ; if ( prefix != null ) { replacementLength = prefix . length ( ) ; replacementOffset -= replacementLength ; } java . lang . String toolName = getToolName ( doc , replacementOffset ) ; java . lang . String [ ] words = getCompletionStrings ( prefix , toolName ) ; for ( java . lang . String word : words ) { completions . add ( new org . eclipse . jface . text . contentassist . CompletionProposal ( word , replacementOffset , replacementLength , word . length ( ) ) ) ; } } catch ( org . eclipse . jface . text . BadLocationException e ) { e . printStackTrace ( ) ; } return completions . toArray ( new org . eclipse . jface . text . contentassist . ICompletionProposal [ completions . size ( ) ] ) ; }", "answer": "org . junit . Assert . assertNotNull ( proposals )"}
{"focal": "validateToken ( java . lang . String ) { final org . pac4j . core . credentials . TokenCredentials credentials = new org . pac4j . core . credentials . TokenCredentials ( token ) ; try { validate ( credentials , null ) ; } catch ( final org . pac4j . core . exception . http . HttpAction e ) { throw new org . pac4j . core . exception . TechnicalException ( e ) ; } catch ( final org . pac4j . core . exception . CredentialsException e ) { logger . info ( \"Failed<sp>to<sp>retrieve<sp>or<sp>validate<sp>credentials:<sp>{}\" , e . getMessage ( ) ) ; logger . debug ( \"Failed<sp>to<sp>retrieve<sp>or<sp>validate<sp>credentials\" , e ) ; return null ; } return credentials . getUserProfile ( ) ; }", "testMethod": "testPlainJwtNotExpired ( ) { final org . pac4j . jwt . profile . JwtGenerator < org . pac4j . oauth . profile . facebook . FacebookProfile > generator = new org . pac4j . jwt . profile . JwtGenerator ( ) ; org . pac4j . jwt . Map < java . lang . String , java . lang . Object > claims = new org . pac4j . jwt . HashMap ( ) ; claims . put ( JwtClaims . SUBJECT , org . pac4j . jwt . ID ) ; claims . put ( JwtClaims . EXPIRATION_TIME , tomorrow ( ) ) ; final java . lang . String token = generator . generate ( claims ) ; org . pac4j . jwt . credentials . authenticator . JwtAuthenticator authenticator = new org . pac4j . jwt . credentials . authenticator . JwtAuthenticator ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( authenticator . validateToken ( token ) )", "total": "testPlainJwtNotExpired ( ) { final org . pac4j . jwt . profile . JwtGenerator < org . pac4j . oauth . profile . facebook . FacebookProfile > generator = new org . pac4j . jwt . profile . JwtGenerator ( ) ; org . pac4j . jwt . Map < java . lang . String , java . lang . Object > claims = new org . pac4j . jwt . HashMap ( ) ; claims . put ( JwtClaims . SUBJECT , org . pac4j . jwt . ID ) ; claims . put ( JwtClaims . EXPIRATION_TIME , tomorrow ( ) ) ; final java . lang . String token = generator . generate ( claims ) ; org . pac4j . jwt . credentials . authenticator . JwtAuthenticator authenticator = new org . pac4j . jwt . credentials . authenticator . JwtAuthenticator ( ) ; \"<AssertPlaceHolder>\" ; } validateToken ( java . lang . String ) { final org . pac4j . core . credentials . TokenCredentials credentials = new org . pac4j . core . credentials . TokenCredentials ( token ) ; try { validate ( credentials , null ) ; } catch ( final org . pac4j . core . exception . http . HttpAction e ) { throw new org . pac4j . core . exception . TechnicalException ( e ) ; } catch ( final org . pac4j . core . exception . CredentialsException e ) { logger . info ( \"Failed<sp>to<sp>retrieve<sp>or<sp>validate<sp>credentials:<sp>{}\" , e . getMessage ( ) ) ; logger . debug ( \"Failed<sp>to<sp>retrieve<sp>or<sp>validate<sp>credentials\" , e ) ; return null ; } return credentials . getUserProfile ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( authenticator . validateToken ( token ) )"}
{"focal": "close ( ) { }", "testMethod": "testWatchClose ( ) { try ( jcifs . SmbWatchHandle w = this . base . watch ( FileNotifyInformation . FILE_NOTIFY_CHANGE_ATTRIBUTES , false ) ) { setupWatch ( w ) ; w . close ( ) ; java . util . concurrent . Future < java . util . List < jcifs . FileNotifyInformation > > f = this . future ; \"<AssertPlaceHolder>\" ; f . get ( 5 , TimeUnit . SECONDS ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( f )", "total": "testWatchClose ( ) { try ( jcifs . SmbWatchHandle w = this . base . watch ( FileNotifyInformation . FILE_NOTIFY_CHANGE_ATTRIBUTES , false ) ) { setupWatch ( w ) ; w . close ( ) ; java . util . concurrent . Future < java . util . List < jcifs . FileNotifyInformation > > f = this . future ; \"<AssertPlaceHolder>\" ; f . get ( 5 , TimeUnit . SECONDS ) ; } } close ( ) { }", "answer": "org . junit . Assert . assertNotNull ( f )"}
{"focal": "getJwtToken ( ) { java . lang . String jwtToken = org . apache . commons . lang3 . StringUtils . EMPTY ; try { jwtToken = io . jsonwebtoken . Jwts . builder ( ) . setClaims ( getJwtClaims ( ) ) . signWith ( io . jsonwebtoken . SignatureAlgorithm . RS256 , getPrivateKey ( ) ) . compact ( ) ; } catch ( java . lang . Exception e ) { com . adobe . acs . commons . adobeio . service . impl . IntegrationServiceImpl . LOGGER . error ( \"JWT<sp>claims<sp>{}\" , getJwtClaims ( ) ) ; com . adobe . acs . commons . adobeio . service . impl . IntegrationServiceImpl . LOGGER . error ( e . getMessage ( ) ) ; } com . adobe . acs . commons . adobeio . service . impl . IntegrationServiceImpl . LOGGER . info ( \"JWT<sp>Token<sp>:<sp>\\n<sp>{}\" , jwtToken ) ; return jwtToken ; }", "testMethod": "testJwtToken ( ) { java . lang . String jwt = impl . getJwtToken ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( jwt )", "total": "testJwtToken ( ) { java . lang . String jwt = impl . getJwtToken ( ) ; \"<AssertPlaceHolder>\" ; } getJwtToken ( ) { java . lang . String jwtToken = org . apache . commons . lang3 . StringUtils . EMPTY ; try { jwtToken = io . jsonwebtoken . Jwts . builder ( ) . setClaims ( getJwtClaims ( ) ) . signWith ( io . jsonwebtoken . SignatureAlgorithm . RS256 , getPrivateKey ( ) ) . compact ( ) ; } catch ( java . lang . Exception e ) { com . adobe . acs . commons . adobeio . service . impl . IntegrationServiceImpl . LOGGER . error ( \"JWT<sp>claims<sp>{}\" , getJwtClaims ( ) ) ; com . adobe . acs . commons . adobeio . service . impl . IntegrationServiceImpl . LOGGER . error ( e . getMessage ( ) ) ; } com . adobe . acs . commons . adobeio . service . impl . IntegrationServiceImpl . LOGGER . info ( \"JWT<sp>Token<sp>:<sp>\\n<sp>{}\" , jwtToken ) ; return jwtToken ; }", "answer": "org . junit . Assert . assertNotNull ( jwt )"}
{"focal": "execute ( java . lang . String , com . alibaba . wasp . ReadModel , int ) { com . alibaba . wasp . client . FClientCallable callable = new com . alibaba . wasp . client . FClientCallable ( connection , fserverTracker , sql , model , fetchSize ) ; return execute ( callable ) ; }", "testMethod": "testExecute ( ) { org . apache . hadoop . hbase . util . Pair < java . lang . String , org . apache . hadoop . hbase . util . Pair < java . lang . Boolean , java . util . List < com . alibaba . wasp . client . ExecuteResult > > > pair = com . alibaba . wasp . client . TestFClientLoadBalance . client . execute ( ( ( \"select<sp>column1<sp>from<sp>\" + ( com . alibaba . wasp . client . TestFClientLoadBalance . TABLE_NAME ) ) + \"<sp>where<sp>column3='2f'\" ) , ReadModel . SNAPSHOT , com . alibaba . wasp . client . TestFClientLoadBalance . fetchSize ) ; com . alibaba . wasp . client . TestFClientLoadBalance . sessionId = pair . getFirst ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pair )", "total": "testExecute ( ) { org . apache . hadoop . hbase . util . Pair < java . lang . String , org . apache . hadoop . hbase . util . Pair < java . lang . Boolean , java . util . List < com . alibaba . wasp . client . ExecuteResult > > > pair = com . alibaba . wasp . client . TestFClientLoadBalance . client . execute ( ( ( \"select<sp>column1<sp>from<sp>\" + ( com . alibaba . wasp . client . TestFClientLoadBalance . TABLE_NAME ) ) + \"<sp>where<sp>column3='2f'\" ) , ReadModel . SNAPSHOT , com . alibaba . wasp . client . TestFClientLoadBalance . fetchSize ) ; com . alibaba . wasp . client . TestFClientLoadBalance . sessionId = pair . getFirst ( ) ; \"<AssertPlaceHolder>\" ; } execute ( java . lang . String , com . alibaba . wasp . ReadModel , int ) { com . alibaba . wasp . client . FClientCallable callable = new com . alibaba . wasp . client . FClientCallable ( connection , fserverTracker , sql , model , fetchSize ) ; return execute ( callable ) ; }", "answer": "org . junit . Assert . assertNotNull ( pair )"}
{"focal": "getLastRequest ( ) { return org . jboss . test . capedwarf . tasks . support . SecureServlet . lastRequest ; }", "testMethod": "testRole ( ) { final com . google . appengine . api . taskqueue . Queue queue = com . google . appengine . api . taskqueue . QueueFactory . getQueue ( \"tasks-queue\" ) ; queue . add ( withUrl ( \"/secure/foo\" ) ) ; sync ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . jboss . test . capedwarf . tasks . support . SecureServlet . getLastRequest ( ) )", "total": "testRole ( ) { final com . google . appengine . api . taskqueue . Queue queue = com . google . appengine . api . taskqueue . QueueFactory . getQueue ( \"tasks-queue\" ) ; queue . add ( withUrl ( \"/secure/foo\" ) ) ; sync ( ) ; \"<AssertPlaceHolder>\" ; } getLastRequest ( ) { return org . jboss . test . capedwarf . tasks . support . SecureServlet . lastRequest ; }", "answer": "org . junit . Assert . assertNotNull ( org . jboss . test . capedwarf . tasks . support . SecureServlet . getLastRequest ( ) )"}
{"focal": "format ( org . audit4j . core . dto . AuditEvent ) { java . lang . String formatText = super . format ( event ) ; try { return util . encrypt ( formatText ) ; } catch ( java . security . InvalidKeyException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( javax . crypto . IllegalBlockSizeException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( javax . crypto . BadPaddingException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( java . io . UnsupportedEncodingException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( java . security . InvalidAlgorithmParameterException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( java . security . NoSuchAlgorithmException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( javax . crypto . NoSuchPaddingException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } }", "testMethod": "testFormat_1 ( ) { org . audit4j . core . layout . SecureLayout fixture = new org . audit4j . core . layout . SecureLayout ( ) ; fixture . init ( ) ; fixture . setSalt ( \"232332324\" ) ; fixture . setKey ( \"Aud1T4jSecureKey\" ) ; org . audit4j . core . dto . AuditEvent event = new org . audit4j . core . dto . AuditEvent ( ) ; java . lang . String result = fixture . format ( event ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testFormat_1 ( ) { org . audit4j . core . layout . SecureLayout fixture = new org . audit4j . core . layout . SecureLayout ( ) ; fixture . init ( ) ; fixture . setSalt ( \"232332324\" ) ; fixture . setKey ( \"Aud1T4jSecureKey\" ) ; org . audit4j . core . dto . AuditEvent event = new org . audit4j . core . dto . AuditEvent ( ) ; java . lang . String result = fixture . format ( event ) ; \"<AssertPlaceHolder>\" ; } format ( org . audit4j . core . dto . AuditEvent ) { java . lang . String formatText = super . format ( event ) ; try { return util . encrypt ( formatText ) ; } catch ( java . security . InvalidKeyException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( javax . crypto . IllegalBlockSizeException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( javax . crypto . BadPaddingException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( java . io . UnsupportedEncodingException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( java . security . InvalidAlgorithmParameterException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( java . security . NoSuchAlgorithmException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } catch ( javax . crypto . NoSuchPaddingException e ) { throw new org . audit4j . core . exception . Audit4jRuntimeException ( \"\" , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "createSourceLoader ( ) { org . eluder . coveralls . maven . plugin . source . MultiSourceLoader multiSourceLoader = new org . eluder . coveralls . maven . plugin . source . MultiSourceLoader ( ) ; java . util . List < java . io . File > directories = new java . util . ArrayList ( ) ; java . util . List < org . apache . maven . project . MavenProject > modules = new org . eluder . coveralls . maven . plugin . util . MavenProjectCollector ( project ) . collect ( ) ; for ( org . apache . maven . project . MavenProject module : modules ) { for ( java . lang . String sourceRoot : module . getCompileSourceRoots ( ) ) { java . io . File sourceDirectory = new java . io . File ( sourceRoot ) ; directories . add ( sourceDirectory ) ; } } if ( ( sourceDirectories ) != null ) { directories . addAll ( sourceDirectories ) ; } for ( java . io . File directory : directories ) { if ( ( directory . exists ( ) ) && ( directory . isDirectory ( ) ) ) { org . eluder . coveralls . maven . plugin . source . DirectorySourceLoader moduleSourceLoader = new org . eluder . coveralls . maven . plugin . source . DirectorySourceLoader ( baseDir , directory , sourceEncoding ) ; multiSourceLoader . add ( moduleSourceLoader ) ; } } if ( scanForSources ) { for ( java . io . File directory : directories ) { if ( ( directory . exists ( ) ) && ( directory . isDirectory ( ) ) ) { org . eluder . coveralls . maven . plugin . source . ScanSourceLoader scanSourceLoader = new org . eluder . coveralls . maven . plugin . source . ScanSourceLoader ( baseDir , directory , sourceEncoding ) ; multiSourceLoader . add ( scanSourceLoader ) ; } } } return multiSourceLoader ; }", "testMethod": "testCreateSourceLoader ( ) { org . eluder . coveralls . maven . plugin . source . SourceLoader sourceLoader = createSourceLoaderFactory ( \"UTF-8\" ) . createSourceLoader ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( sourceLoader )", "total": "testCreateSourceLoader ( ) { org . eluder . coveralls . maven . plugin . source . SourceLoader sourceLoader = createSourceLoaderFactory ( \"UTF-8\" ) . createSourceLoader ( ) ; \"<AssertPlaceHolder>\" ; } createSourceLoader ( ) { org . eluder . coveralls . maven . plugin . source . MultiSourceLoader multiSourceLoader = new org . eluder . coveralls . maven . plugin . source . MultiSourceLoader ( ) ; java . util . List < java . io . File > directories = new java . util . ArrayList ( ) ; java . util . List < org . apache . maven . project . MavenProject > modules = new org . eluder . coveralls . maven . plugin . util . MavenProjectCollector ( project ) . collect ( ) ; for ( org . apache . maven . project . MavenProject module : modules ) { for ( java . lang . String sourceRoot : module . getCompileSourceRoots ( ) ) { java . io . File sourceDirectory = new java . io . File ( sourceRoot ) ; directories . add ( sourceDirectory ) ; } } if ( ( sourceDirectories ) != null ) { directories . addAll ( sourceDirectories ) ; } for ( java . io . File directory : directories ) { if ( ( directory . exists ( ) ) && ( directory . isDirectory ( ) ) ) { org . eluder . coveralls . maven . plugin . source . DirectorySourceLoader moduleSourceLoader = new org . eluder . coveralls . maven . plugin . source . DirectorySourceLoader ( baseDir , directory , sourceEncoding ) ; multiSourceLoader . add ( moduleSourceLoader ) ; } } if ( scanForSources ) { for ( java . io . File directory : directories ) { if ( ( directory . exists ( ) ) && ( directory . isDirectory ( ) ) ) { org . eluder . coveralls . maven . plugin . source . ScanSourceLoader scanSourceLoader = new org . eluder . coveralls . maven . plugin . source . ScanSourceLoader ( baseDir , directory , sourceEncoding ) ; multiSourceLoader . add ( scanSourceLoader ) ; } } } return multiSourceLoader ; }", "answer": "org . junit . Assert . assertNotNull ( sourceLoader )"}
{"focal": "getCpt ( ) { return cpt ; }", "testMethod": "convertPaymentSubnetFromYAWLToBPMN ( ) { org . apromore . service . model . CanonisedProcess oFCanonised = canoniseYAWLModel ( \"YAWL_models/PaymentSubnet.yawl\" , \"YAWL_models/orderfulfillment.ybkp\" ) ; org . apromore . service . model . DecanonisedProcess decanonisedBPMN = cSrv . deCanonise ( \"BPMN<sp>2.0\" , oFCanonised . getCpt ( ) , null , new java . util . HashSet < org . apromore . plugin . property . RequestParameterType < ? > > ( ) ) ; \"<AssertPlaceHolder>\" ; if ( org . apromore . service . impl . CanoniserServiceImplIntgTest . LOGGER . isDebugEnabled ( ) ) { saveDecanonisedProcess ( decanonisedBPMN , \"PaymentSubnet.bpmn\" ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( decanonisedBPMN )", "total": "convertPaymentSubnetFromYAWLToBPMN ( ) { org . apromore . service . model . CanonisedProcess oFCanonised = canoniseYAWLModel ( \"YAWL_models/PaymentSubnet.yawl\" , \"YAWL_models/orderfulfillment.ybkp\" ) ; org . apromore . service . model . DecanonisedProcess decanonisedBPMN = cSrv . deCanonise ( \"BPMN<sp>2.0\" , oFCanonised . getCpt ( ) , null , new java . util . HashSet < org . apromore . plugin . property . RequestParameterType < ? > > ( ) ) ; \"<AssertPlaceHolder>\" ; if ( org . apromore . service . impl . CanoniserServiceImplIntgTest . LOGGER . isDebugEnabled ( ) ) { saveDecanonisedProcess ( decanonisedBPMN , \"PaymentSubnet.bpmn\" ) ; } } getCpt ( ) { return cpt ; }", "answer": "org . junit . Assert . assertNotNull ( decanonisedBPMN )"}
{"focal": "getFileOnSearchPath ( org . eclipse . core . runtime . IPath , boolean ) { org . eclipse . core . runtime . IPath [ ] searchPaths ; try { searchPaths = org . csstudio . opibuilder . preferences . PreferencesHelper . getOPISearchPaths ( ) ; if ( searchPaths == null ) return null ; for ( org . eclipse . core . runtime . IPath searchPath : searchPaths ) { org . eclipse . core . runtime . IPath absolutePath = searchPath . append ( relativePath ) ; if ( org . csstudio . opibuilder . util . ResourceUtil . isExsitingFile ( absolutePath , runInUIJob ) ) return absolutePath ; } } catch ( java . lang . Exception e ) { return null ; } return null ; }", "testMethod": "testGetFileOnSearchPath ( ) { org . eclipse . core . runtime . IPath p = org . csstudio . opibuilder . util . ResourceUtil . getFileOnSearchPath ( new org . eclipse . core . runtime . Path ( \"main.opi\" ) , true ) ; System . out . println ( p ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( p )", "total": "testGetFileOnSearchPath ( ) { org . eclipse . core . runtime . IPath p = org . csstudio . opibuilder . util . ResourceUtil . getFileOnSearchPath ( new org . eclipse . core . runtime . Path ( \"main.opi\" ) , true ) ; System . out . println ( p ) ; \"<AssertPlaceHolder>\" ; } getFileOnSearchPath ( org . eclipse . core . runtime . IPath , boolean ) { org . eclipse . core . runtime . IPath [ ] searchPaths ; try { searchPaths = org . csstudio . opibuilder . preferences . PreferencesHelper . getOPISearchPaths ( ) ; if ( searchPaths == null ) return null ; for ( org . eclipse . core . runtime . IPath searchPath : searchPaths ) { org . eclipse . core . runtime . IPath absolutePath = searchPath . append ( relativePath ) ; if ( org . csstudio . opibuilder . util . ResourceUtil . isExsitingFile ( absolutePath , runInUIJob ) ) return absolutePath ; } } catch ( java . lang . Exception e ) { return null ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( p )"}
{"focal": "fetchOne ( ) { return oneResult ( true ) ; }", "testMethod": "byId_twoCols_qdsl ( ) { long start = java . lang . System . currentTimeMillis ( ) ; for ( int i = 0 ; i < ( com . querydsl . jpa . QueryPerformanceTest . iterations ) ; i ++ ) { com . querydsl . jpa . domain . QCat cat = com . querydsl . jpa . domain . QCat . cat ; com . querydsl . core . Tuple row = query ( ) . from ( cat ) . where ( cat . id . eq ( ( i + 100 ) ) ) . select ( cat . id , cat . name ) . fetchOne ( ) ; \"<AssertPlaceHolder>\" ; } System . err . println ( ( \"by<sp>id<sp>-<sp>2<sp>cols<sp>-<sp>dsl\" + ( ( java . lang . System . currentTimeMillis ( ) ) - start ) ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( row )", "total": "byId_twoCols_qdsl ( ) { long start = java . lang . System . currentTimeMillis ( ) ; for ( int i = 0 ; i < ( com . querydsl . jpa . QueryPerformanceTest . iterations ) ; i ++ ) { com . querydsl . jpa . domain . QCat cat = com . querydsl . jpa . domain . QCat . cat ; com . querydsl . core . Tuple row = query ( ) . from ( cat ) . where ( cat . id . eq ( ( i + 100 ) ) ) . select ( cat . id , cat . name ) . fetchOne ( ) ; \"<AssertPlaceHolder>\" ; } System . err . println ( ( \"by<sp>id<sp>-<sp>2<sp>cols<sp>-<sp>dsl\" + ( ( java . lang . System . currentTimeMillis ( ) ) - start ) ) ) ; } fetchOne ( ) { return oneResult ( true ) ; }", "answer": "org . junit . Assert . assertNotNull ( row )"}
{"focal": "editChannel ( org . eclipse . smarthome . core . thing . Thing , org . eclipse . smarthome . core . thing . ChannelUID ) { org . eclipse . smarthome . core . thing . Channel channel = thing . getChannel ( channelUID . getId ( ) ) ; if ( channel == null ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( \"Channel<sp>'%s'<sp>does<sp>not<sp>exist<sp>for<sp>thing<sp>'%s'\" , channelUID , thing . getUID ( ) ) ) ; } return org . eclipse . smarthome . core . thing . binding . builder . ChannelBuilder . create ( channel ) ; }", "testMethod": "testEditChannelBuilder ( ) { java . util . concurrent . atomic . AtomicReference < org . eclipse . smarthome . core . thing . binding . ThingHandlerCallback > thc = initializeThingHandlerCallback ( ) ; org . eclipse . smarthome . core . thing . binding . builder . ChannelBuilder channelBuilder = thc . get ( ) . editChannel ( THING , org . eclipse . smarthome . core . thing . internal . ThingManagerOSGiJavaTest . CHANNEL_UID ) ; \"<AssertPlaceHolder>\" ; validateChannel ( channelBuilder . build ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( channelBuilder )", "total": "testEditChannelBuilder ( ) { java . util . concurrent . atomic . AtomicReference < org . eclipse . smarthome . core . thing . binding . ThingHandlerCallback > thc = initializeThingHandlerCallback ( ) ; org . eclipse . smarthome . core . thing . binding . builder . ChannelBuilder channelBuilder = thc . get ( ) . editChannel ( THING , org . eclipse . smarthome . core . thing . internal . ThingManagerOSGiJavaTest . CHANNEL_UID ) ; \"<AssertPlaceHolder>\" ; validateChannel ( channelBuilder . build ( ) ) ; } editChannel ( org . eclipse . smarthome . core . thing . Thing , org . eclipse . smarthome . core . thing . ChannelUID ) { org . eclipse . smarthome . core . thing . Channel channel = thing . getChannel ( channelUID . getId ( ) ) ; if ( channel == null ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( \"Channel<sp>'%s'<sp>does<sp>not<sp>exist<sp>for<sp>thing<sp>'%s'\" , channelUID , thing . getUID ( ) ) ) ; } return org . eclipse . smarthome . core . thing . binding . builder . ChannelBuilder . create ( channel ) ; }", "answer": "org . junit . Assert . assertNotNull ( channelBuilder )"}
{"focal": "find_first_of ( java . lang . String , java . lang . String ) { return org . communitybridge . utility . StringUtilities . find_first_of ( stringToSearch , searchCharacters , 0 ) ; }", "testMethod": "findFirstOfShouldThrowErrorForNullSearchString ( ) { try { org . communitybridge . utility . StringUtilities . find_first_of ( null , \"s\" ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>search<sp>a<sp>null<sp>string.\" ) ; } catch ( java . lang . IllegalArgumentException exception ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( exception )", "total": "findFirstOfShouldThrowErrorForNullSearchString ( ) { try { org . communitybridge . utility . StringUtilities . find_first_of ( null , \"s\" ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>search<sp>a<sp>null<sp>string.\" ) ; } catch ( java . lang . IllegalArgumentException exception ) { \"<AssertPlaceHolder>\" ; } } find_first_of ( java . lang . String , java . lang . String ) { return org . communitybridge . utility . StringUtilities . find_first_of ( stringToSearch , searchCharacters , 0 ) ; }", "answer": "org . junit . Assert . assertNotNull ( exception )"}
{"focal": "avgBucket ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . aggregation . pipeline . AvgBucketPipelineAggregationImpl ( name , bucketsPath ) ; }", "testMethod": "testAvgBucketPipelineAggregation ( ) { com . liferay . portal . search . aggregation . pipeline . AvgBucketPipelineAggregation avgBucketPipelineAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . avgBucket ( \"name\" , \"bucketsPath\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( avgBucketPipelineAggregation )", "total": "testAvgBucketPipelineAggregation ( ) { com . liferay . portal . search . aggregation . pipeline . AvgBucketPipelineAggregation avgBucketPipelineAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . avgBucket ( \"name\" , \"bucketsPath\" ) ; \"<AssertPlaceHolder>\" ; } avgBucket ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . aggregation . pipeline . AvgBucketPipelineAggregationImpl ( name , bucketsPath ) ; }", "answer": "org . junit . Assert . assertNotNull ( avgBucketPipelineAggregation )"}
{"focal": "buildTopology ( org . apache . storm . flux . ExecutionContext ) { backtype . storm . generated . StormTopology topology = null ; org . apache . storm . flux . TopologyDef topologyDef = context . getTopologyDef ( ) ; if ( ! ( topologyDef . validate ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( \"Invalid<sp>topology<sp>config.<sp>Spouts,<sp>bolts<sp>and<sp>streams<sp>cannot<sp>be<sp>\" + \"defined<sp>in<sp>the<sp>same<sp>configuration<sp>as<sp>a<sp>topologySource.\" ) ) ; } org . apache . storm . flux . FluxBuilder . buildComponents ( context ) ; if ( topologyDef . isDslTopology ( ) ) { org . apache . storm . flux . FluxBuilder . LOG . info ( \"Detected<sp>DSL<sp>topology...\" ) ; org . apache . storm . flux . TopologyBuilder builder = new org . apache . storm . flux . TopologyBuilder ( ) ; org . apache . storm . flux . FluxBuilder . buildSpouts ( context , builder ) ; org . apache . storm . flux . FluxBuilder . buildBolts ( context ) ; org . apache . storm . flux . FluxBuilder . buildStreamDefinitions ( context , builder ) ; topology = builder . createTopology ( ) ; } else { org . apache . storm . flux . FluxBuilder . LOG . info ( \"A<sp>topology<sp>source<sp>has<sp>been<sp>specified...\" ) ; org . apache . storm . flux . ObjectDef def = topologyDef . getTopologySource ( ) ; topology = org . apache . storm . flux . FluxBuilder . buildExternalTopology ( def , context ) ; } return topology ; }", "testMethod": "testBadHbase ( ) { org . apache . storm . flux . model . TopologyDef topologyDef = org . apache . storm . flux . parser . FluxParser . parseResource ( \"/configs/bad_hbase.yaml\" , false , true , null , false ) ; backtype . storm . Config conf = org . apache . storm . flux . FluxBuilder . buildConfig ( topologyDef ) ; org . apache . storm . flux . model . ExecutionContext context = new org . apache . storm . flux . model . ExecutionContext ( topologyDef , conf ) ; backtype . storm . generated . StormTopology topology = org . apache . storm . flux . FluxBuilder . buildTopology ( context ) ; \"<AssertPlaceHolder>\" ; topology . validate ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( topology )", "total": "testBadHbase ( ) { org . apache . storm . flux . model . TopologyDef topologyDef = org . apache . storm . flux . parser . FluxParser . parseResource ( \"/configs/bad_hbase.yaml\" , false , true , null , false ) ; backtype . storm . Config conf = org . apache . storm . flux . FluxBuilder . buildConfig ( topologyDef ) ; org . apache . storm . flux . model . ExecutionContext context = new org . apache . storm . flux . model . ExecutionContext ( topologyDef , conf ) ; backtype . storm . generated . StormTopology topology = org . apache . storm . flux . FluxBuilder . buildTopology ( context ) ; \"<AssertPlaceHolder>\" ; topology . validate ( ) ; } buildTopology ( org . apache . storm . flux . ExecutionContext ) { backtype . storm . generated . StormTopology topology = null ; org . apache . storm . flux . TopologyDef topologyDef = context . getTopologyDef ( ) ; if ( ! ( topologyDef . validate ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( \"Invalid<sp>topology<sp>config.<sp>Spouts,<sp>bolts<sp>and<sp>streams<sp>cannot<sp>be<sp>\" + \"defined<sp>in<sp>the<sp>same<sp>configuration<sp>as<sp>a<sp>topologySource.\" ) ) ; } org . apache . storm . flux . FluxBuilder . buildComponents ( context ) ; if ( topologyDef . isDslTopology ( ) ) { org . apache . storm . flux . FluxBuilder . LOG . info ( \"Detected<sp>DSL<sp>topology...\" ) ; org . apache . storm . flux . TopologyBuilder builder = new org . apache . storm . flux . TopologyBuilder ( ) ; org . apache . storm . flux . FluxBuilder . buildSpouts ( context , builder ) ; org . apache . storm . flux . FluxBuilder . buildBolts ( context ) ; org . apache . storm . flux . FluxBuilder . buildStreamDefinitions ( context , builder ) ; topology = builder . createTopology ( ) ; } else { org . apache . storm . flux . FluxBuilder . LOG . info ( \"A<sp>topology<sp>source<sp>has<sp>been<sp>specified...\" ) ; org . apache . storm . flux . ObjectDef def = topologyDef . getTopologySource ( ) ; topology = org . apache . storm . flux . FluxBuilder . buildExternalTopology ( def , context ) ; } return topology ; }", "answer": "org . junit . Assert . assertNotNull ( topology )"}
{"focal": "list ( ) { return new com . microsoft . windowsazure . services . media . entityoperations . DefaultListOperation < com . microsoft . windowsazure . services . media . models . AssetInfo > ( com . microsoft . windowsazure . services . media . models . Asset . ENTITY_SET , new com . sun . jersey . api . client . GenericType < com . microsoft . windowsazure . services . media . models . ListResult < com . microsoft . windowsazure . services . media . models . AssetInfo > > ( ) { } ) ; }", "testMethod": "canRetrieveListOfAssets ( ) { com . microsoft . windowsazure . services . media . MediaContract client = createService ( ) ; java . util . List < com . microsoft . windowsazure . services . media . models . AssetInfo > assets = client . list ( com . microsoft . windowsazure . services . media . models . Asset . list ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( assets )", "total": "canRetrieveListOfAssets ( ) { com . microsoft . windowsazure . services . media . MediaContract client = createService ( ) ; java . util . List < com . microsoft . windowsazure . services . media . models . AssetInfo > assets = client . list ( com . microsoft . windowsazure . services . media . models . Asset . list ( ) ) ; \"<AssertPlaceHolder>\" ; } list ( ) { return new com . microsoft . windowsazure . services . media . entityoperations . DefaultListOperation < com . microsoft . windowsazure . services . media . models . AssetInfo > ( com . microsoft . windowsazure . services . media . models . Asset . ENTITY_SET , new com . sun . jersey . api . client . GenericType < com . microsoft . windowsazure . services . media . models . ListResult < com . microsoft . windowsazure . services . media . models . AssetInfo > > ( ) { } ) ; }", "answer": "org . junit . Assert . assertNotNull ( assets )"}
{"focal": "andorUpdateData ( java . lang . String , java . util . List ) { int rs = 0 ; try { andorPs = andorCon . prepareStatement ( sql ) ; if ( param == null ) { rs = andorPs . executeUpdate ( ) ; } else { for ( int i = 0 ; i < ( param . size ( ) ) ; i ++ ) { andorPs . setObject ( ( i + 1 ) , param . get ( i ) ) ; } rs = andorPs . executeUpdate ( ) ; } } catch ( java . lang . Exception ex ) { throw new com . taobao . tddl . common . exception . TddlRuntimeException ( ex ) ; } finally { } return rs ; }", "testMethod": "replaceNotExistFileTest ( ) { java . lang . String sql = ( \"replace<sp>into<sp>\" + ( normaltblTableName ) ) + \"<sp>(pk,gmts)values(?,?)\" ; java . util . List < java . lang . Object > param = new java . util . ArrayList < java . lang . Object > ( ) ; param . add ( com . taobao . tddl . qatest . matrix . basecrud . RANDOM_ID ) ; param . add ( gmt ) ; try { andorUpdateData ( sql , param ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . Exception ex ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( ex )", "total": "replaceNotExistFileTest ( ) { java . lang . String sql = ( \"replace<sp>into<sp>\" + ( normaltblTableName ) ) + \"<sp>(pk,gmts)values(?,?)\" ; java . util . List < java . lang . Object > param = new java . util . ArrayList < java . lang . Object > ( ) ; param . add ( com . taobao . tddl . qatest . matrix . basecrud . RANDOM_ID ) ; param . add ( gmt ) ; try { andorUpdateData ( sql , param ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . Exception ex ) { \"<AssertPlaceHolder>\" ; } } andorUpdateData ( java . lang . String , java . util . List ) { int rs = 0 ; try { andorPs = andorCon . prepareStatement ( sql ) ; if ( param == null ) { rs = andorPs . executeUpdate ( ) ; } else { for ( int i = 0 ; i < ( param . size ( ) ) ; i ++ ) { andorPs . setObject ( ( i + 1 ) , param . get ( i ) ) ; } rs = andorPs . executeUpdate ( ) ; } } catch ( java . lang . Exception ex ) { throw new com . taobao . tddl . common . exception . TddlRuntimeException ( ex ) ; } finally { } return rs ; }", "answer": "org . junit . Assert . assertNotNull ( ex )"}
{"focal": "lookup ( java . lang . String ) { return comparator ; }", "testMethod": "testLookupPerfAPI ( ) { org . apache . directory . ldap . client . api . LdapConnection connection = org . apache . directory . server . integ . ServerIntegrationUtils . getAdminConnection ( getLdapServer ( ) ) ; org . apache . directory . api . ldap . model . entry . Entry entry = connection . lookup ( \"uid=admin,ou=system\" ) ; \"<AssertPlaceHolder>\" ; long t0 = java . lang . System . currentTimeMillis ( ) ; for ( int i = 0 ; i < 50 ; i ++ ) { for ( int j = 0 ; j < 10000 ; j ++ ) { entry = connection . lookup ( \"uid=admin,ou=system\" ) ; } System . out . print ( \".\" ) ; } long t1 = java . lang . System . currentTimeMillis ( ) ; System . out . println ( ( \"Delta<sp>:<sp>\" + ( t1 - t0 ) ) ) ; connection . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( entry )", "total": "testLookupPerfAPI ( ) { org . apache . directory . ldap . client . api . LdapConnection connection = org . apache . directory . server . integ . ServerIntegrationUtils . getAdminConnection ( getLdapServer ( ) ) ; org . apache . directory . api . ldap . model . entry . Entry entry = connection . lookup ( \"uid=admin,ou=system\" ) ; \"<AssertPlaceHolder>\" ; long t0 = java . lang . System . currentTimeMillis ( ) ; for ( int i = 0 ; i < 50 ; i ++ ) { for ( int j = 0 ; j < 10000 ; j ++ ) { entry = connection . lookup ( \"uid=admin,ou=system\" ) ; } System . out . print ( \".\" ) ; } long t1 = java . lang . System . currentTimeMillis ( ) ; System . out . println ( ( \"Delta<sp>:<sp>\" + ( t1 - t0 ) ) ) ; connection . close ( ) ; } lookup ( java . lang . String ) { return comparator ; }", "answer": "org . junit . Assert . assertNotNull ( entry )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "serialize3 ( ) { org . xmldb . api . base . Collection testCollection = org . xmldb . api . DatabaseManager . getCollection ( ( ( ( ROOT_URI ) + \"/\" ) + ( org . exist . xmldb . TestEXistXMLSerialize . TEST_COLLECTION ) ) ) ; org . w3c . dom . Document doc = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) . newDocumentBuilder ( ) . parse ( java . nio . file . Paths . get ( testFile . toURI ( ) ) . toFile ( ) ) ; org . xmldb . api . modules . XMLResource resource = ( ( org . xmldb . api . modules . XMLResource ) ( testCollection . createResource ( null , \"XMLResource\" ) ) ) ; resource . setContentAsDOM ( doc ) ; testCollection . storeResource ( resource ) ; resource = ( ( org . xmldb . api . modules . XMLResource ) ( testCollection . getResource ( resource . getId ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; org . w3c . dom . Node node = resource . getContentAsDOM ( ) ; java . io . StringWriter writer = new java . io . StringWriter ( ) ; java . util . Properties outputProperties = new java . util . Properties ( ) ; outputProperties . setProperty ( \"indent\" , \"yes\" ) ; org . exist . util . serializer . DOMSerializer serializer = new org . exist . util . serializer . DOMSerializer ( writer , outputProperties ) ; serializer . serialize ( node ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( resource )", "total": "serialize3 ( ) { org . xmldb . api . base . Collection testCollection = org . xmldb . api . DatabaseManager . getCollection ( ( ( ( ROOT_URI ) + \"/\" ) + ( org . exist . xmldb . TestEXistXMLSerialize . TEST_COLLECTION ) ) ) ; org . w3c . dom . Document doc = javax . xml . parsers . DocumentBuilderFactory . newInstance ( ) . newDocumentBuilder ( ) . parse ( java . nio . file . Paths . get ( testFile . toURI ( ) ) . toFile ( ) ) ; org . xmldb . api . modules . XMLResource resource = ( ( org . xmldb . api . modules . XMLResource ) ( testCollection . createResource ( null , \"XMLResource\" ) ) ) ; resource . setContentAsDOM ( doc ) ; testCollection . storeResource ( resource ) ; resource = ( ( org . xmldb . api . modules . XMLResource ) ( testCollection . getResource ( resource . getId ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; org . w3c . dom . Node node = resource . getContentAsDOM ( ) ; java . io . StringWriter writer = new java . io . StringWriter ( ) ; java . util . Properties outputProperties = new java . util . Properties ( ) ; outputProperties . setProperty ( \"indent\" , \"yes\" ) ; org . exist . util . serializer . DOMSerializer serializer = new org . exist . util . serializer . DOMSerializer ( writer , outputProperties ) ; serializer . serialize ( node ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( resource )"}
{"focal": "getMessage ( ) { return message ; }", "testMethod": "testNullValuesDoNotInject ( ) { com . picocontainer . MutablePicoContainer pico = createPicoContainer ( null ) ; pico . addComponent ( com . picocontainer . tck . AbstractPicoContainerTest . ConstantParameterTestService . class , com . picocontainer . tck . AbstractPicoContainerTest . ConstantParameterTestService . class , new com . picocontainer . parameters . ConstantParameter ( null ) ) ; try { com . picocontainer . tck . AbstractPicoContainerTest . ConstantParameterTestService service = pico . getComponent ( com . picocontainer . tck . AbstractPicoContainerTest . ConstantParameterTestService . class ) ; org . junit . Assert . fail ( ( ( \"Should<sp>have<sp>thrown<sp>unsatisfiable<sp>dependencies<sp>exception.<sp>Instead<sp>got<sp>\" + service ) + \"<sp>as<sp>a<sp>return<sp>value\" ) ) ; } catch ( com . picocontainer . injectors . AbstractInjector . UnsatisfiableDependenciesException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "testNullValuesDoNotInject ( ) { com . picocontainer . MutablePicoContainer pico = createPicoContainer ( null ) ; pico . addComponent ( com . picocontainer . tck . AbstractPicoContainerTest . ConstantParameterTestService . class , com . picocontainer . tck . AbstractPicoContainerTest . ConstantParameterTestService . class , new com . picocontainer . parameters . ConstantParameter ( null ) ) ; try { com . picocontainer . tck . AbstractPicoContainerTest . ConstantParameterTestService service = pico . getComponent ( com . picocontainer . tck . AbstractPicoContainerTest . ConstantParameterTestService . class ) ; org . junit . Assert . fail ( ( ( \"Should<sp>have<sp>thrown<sp>unsatisfiable<sp>dependencies<sp>exception.<sp>Instead<sp>got<sp>\" + service ) + \"<sp>as<sp>a<sp>return<sp>value\" ) ) ; } catch ( com . picocontainer . injectors . AbstractInjector . UnsatisfiableDependenciesException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return message ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "getRecord ( ) { return record ; }", "testMethod": "testCachedDnsClient ( ) { io . datakernel . dns . DnsQuery query = io . datakernel . dns . DnsQuery . ipv4 ( \"www.google.com\" ) ; java . net . InetAddress [ ] ips = new java . net . InetAddress [ ] { java . net . InetAddress . getByName ( \"173.194.113.210\" ) , java . net . InetAddress . getByName ( \"173.194.113.209\" ) } ; cachedDnsClient . getCache ( ) . add ( query , io . datakernel . dns . DnsResponse . of ( io . datakernel . dns . DnsTransaction . of ( ( ( short ) ( 0 ) ) , query ) , io . datakernel . dns . DnsResourceRecord . of ( ips , 10 ) ) ) ; io . datakernel . dns . DnsResponse result = await ( cachedDnsClient . resolve4 ( \"www.google.com\" ) ) ; \"<AssertPlaceHolder>\" ; System . out . println ( java . util . Arrays . stream ( result . getRecord ( ) . getIps ( ) ) . map ( InetAddress :: toString ) . collect ( joining ( \",<sp>\" , \"Resolved:<sp>\" , \".\" ) ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result . getRecord ( ) )", "total": "testCachedDnsClient ( ) { io . datakernel . dns . DnsQuery query = io . datakernel . dns . DnsQuery . ipv4 ( \"www.google.com\" ) ; java . net . InetAddress [ ] ips = new java . net . InetAddress [ ] { java . net . InetAddress . getByName ( \"173.194.113.210\" ) , java . net . InetAddress . getByName ( \"173.194.113.209\" ) } ; cachedDnsClient . getCache ( ) . add ( query , io . datakernel . dns . DnsResponse . of ( io . datakernel . dns . DnsTransaction . of ( ( ( short ) ( 0 ) ) , query ) , io . datakernel . dns . DnsResourceRecord . of ( ips , 10 ) ) ) ; io . datakernel . dns . DnsResponse result = await ( cachedDnsClient . resolve4 ( \"www.google.com\" ) ) ; \"<AssertPlaceHolder>\" ; System . out . println ( java . util . Arrays . stream ( result . getRecord ( ) . getIps ( ) ) . map ( InetAddress :: toString ) . collect ( joining ( \",<sp>\" , \"Resolved:<sp>\" , \".\" ) ) ) ; } getRecord ( ) { return record ; }", "answer": "org . junit . Assert . assertNotNull ( result . getRecord ( ) )"}
{"focal": "getCommitIdAbbrev ( ) { return com . hazelcast . simulator . common . GitInfo . INSTANCE . properties . getProperty ( com . hazelcast . simulator . common . GitInfo . GIT_COMMIT_ID_AABREV , com . hazelcast . simulator . common . GitInfo . UNKNOWN ) ; }", "testMethod": "testGetCommitIdAbbrev ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . hazelcast . simulator . common . GitInfo . getCommitIdAbbrev ( ) )", "total": "testGetCommitIdAbbrev ( ) { \"<AssertPlaceHolder>\" ; } getCommitIdAbbrev ( ) { return com . hazelcast . simulator . common . GitInfo . INSTANCE . properties . getProperty ( com . hazelcast . simulator . common . GitInfo . GIT_COMMIT_ID_AABREV , com . hazelcast . simulator . common . GitInfo . UNKNOWN ) ; }", "answer": "org . junit . Assert . assertNotNull ( com . hazelcast . simulator . common . GitInfo . getCommitIdAbbrev ( ) )"}
{"focal": "getService ( org . glassfish . hk2 . api . ServiceHandle ) { if ( ( root ) instanceof org . jvnet . hk2 . internal . Closeable ) { org . jvnet . hk2 . internal . Closeable closeable = ( ( org . jvnet . hk2 . internal . Closeable ) ( root ) ) ; if ( closeable . isClosed ( ) ) { throw new java . lang . IllegalStateException ( ( \"This<sp>service<sp>has<sp>been<sp>unbound:<sp>\" + ( root ) ) ) ; } } synchronized ( lock ) { if ( serviceDestroyed ) throw new java . lang . IllegalStateException ( \"Service<sp>has<sp>been<sp>disposed\" ) ; if ( serviceSet ) return service ; org . glassfish . hk2 . api . Injectee injectee = getLastInjectee ( ) ; java . lang . Class < ? > requiredClass = ( injectee == null ) ? null : org . glassfish . hk2 . utilities . reflection . ReflectionHelper . getRawClass ( injectee . getRequiredType ( ) ) ; service = org . jvnet . hk2 . internal . Utilities . createService ( root , injectee , locator , handle , requiredClass ) ; serviceSet = true ; return service ; } }", "testMethod": "testComplexService ( ) { org . jvnet . hk2 . testing . test . SimpleContract0 sc0 = testLocator . getService ( org . jvnet . hk2 . testing . test . SimpleContract0 . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( sc0 )", "total": "testComplexService ( ) { org . jvnet . hk2 . testing . test . SimpleContract0 sc0 = testLocator . getService ( org . jvnet . hk2 . testing . test . SimpleContract0 . class ) ; \"<AssertPlaceHolder>\" ; } getService ( org . glassfish . hk2 . api . ServiceHandle ) { if ( ( root ) instanceof org . jvnet . hk2 . internal . Closeable ) { org . jvnet . hk2 . internal . Closeable closeable = ( ( org . jvnet . hk2 . internal . Closeable ) ( root ) ) ; if ( closeable . isClosed ( ) ) { throw new java . lang . IllegalStateException ( ( \"This<sp>service<sp>has<sp>been<sp>unbound:<sp>\" + ( root ) ) ) ; } } synchronized ( lock ) { if ( serviceDestroyed ) throw new java . lang . IllegalStateException ( \"Service<sp>has<sp>been<sp>disposed\" ) ; if ( serviceSet ) return service ; org . glassfish . hk2 . api . Injectee injectee = getLastInjectee ( ) ; java . lang . Class < ? > requiredClass = ( injectee == null ) ? null : org . glassfish . hk2 . utilities . reflection . ReflectionHelper . getRawClass ( injectee . getRequiredType ( ) ) ; service = org . jvnet . hk2 . internal . Utilities . createService ( root , injectee , locator , handle , requiredClass ) ; serviceSet = true ; return service ; } }", "answer": "org . junit . Assert . assertNotNull ( sc0 )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateReviewOfSystemsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . cdt . ReviewOfSystemsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . cdt . builder . CDTBuilderFactory . createReviewOfSystemsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . cdt . ReviewOfSystemsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateReviewOfSystemsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . cdt . ReviewOfSystemsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . cdt . builder . CDTBuilderFactory . createReviewOfSystemsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . cdt . ReviewOfSystemsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "searchByQuery ( java . util . Map ) { return processReponse ( memberV3ApiServiceDelegator . searchByQuery ( solrParams ) ) ; }", "testMethod": "testSearchByQueryLegalStart ( ) { java . util . Map < java . lang . String , java . util . List < java . lang . String > > params = new java . util . HashMap ( ) ; params . put ( \"start\" , java . util . Arrays . asList ( java . lang . Integer . toString ( OrcidSearchManager . MAX_SEARCH_START ) ) ) ; org . orcid . core . locale . LocaleManager localeManager = org . mockito . Mockito . mock ( org . orcid . core . locale . LocaleManagerImpl . class ) ; org . mockito . Mockito . when ( localeManager . resolveMessage ( org . mockito . Mockito . anyString ( ) ) ) . thenReturn ( \"a<sp>message\" ) ; org . orcid . core . manager . OrcidSearchManager orcidSearchManager = org . mockito . Mockito . mock ( org . orcid . core . manager . impl . OrcidSearchManagerImpl . class ) ; org . mockito . Mockito . when ( orcidSearchManager . findOrcidIds ( org . mockito . Mockito . anyMap ( ) ) ) . thenReturn ( new org . orcid . jaxb . model . search_v2 . Search ( ) ) ; org . orcid . core . manager . OrcidSecurityManager orcidSecurityManager = org . mockito . Mockito . mock ( org . orcid . core . manager . impl . OrcidSecurityManagerImpl . class ) ; org . mockito . Mockito . when ( orcidSecurityManager . getClientIdFromAPIRequest ( ) ) . thenReturn ( null ) ; org . orcid . api . publicV2 . server . delegator . impl . PublicV2ApiServiceDelegatorImpl delegator = new org . orcid . api . publicV2 . server . delegator . impl . PublicV2ApiServiceDelegatorImpl ( ) ; org . springframework . test . util . ReflectionTestUtils . setField ( delegator , \"localeManager\" , localeManager ) ; org . springframework . test . util . ReflectionTestUtils . setField ( delegator , \"orcidSearchManager\" , orcidSearchManager ) ; org . springframework . test . util . ReflectionTestUtils . setField ( delegator , \"orcidSecurityManager\" , orcidSecurityManager ) ; javax . ws . rs . core . Response response = delegator . searchByQuery ( params ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testSearchByQueryLegalStart ( ) { java . util . Map < java . lang . String , java . util . List < java . lang . String > > params = new java . util . HashMap ( ) ; params . put ( \"start\" , java . util . Arrays . asList ( java . lang . Integer . toString ( OrcidSearchManager . MAX_SEARCH_START ) ) ) ; org . orcid . core . locale . LocaleManager localeManager = org . mockito . Mockito . mock ( org . orcid . core . locale . LocaleManagerImpl . class ) ; org . mockito . Mockito . when ( localeManager . resolveMessage ( org . mockito . Mockito . anyString ( ) ) ) . thenReturn ( \"a<sp>message\" ) ; org . orcid . core . manager . OrcidSearchManager orcidSearchManager = org . mockito . Mockito . mock ( org . orcid . core . manager . impl . OrcidSearchManagerImpl . class ) ; org . mockito . Mockito . when ( orcidSearchManager . findOrcidIds ( org . mockito . Mockito . anyMap ( ) ) ) . thenReturn ( new org . orcid . jaxb . model . search_v2 . Search ( ) ) ; org . orcid . core . manager . OrcidSecurityManager orcidSecurityManager = org . mockito . Mockito . mock ( org . orcid . core . manager . impl . OrcidSecurityManagerImpl . class ) ; org . mockito . Mockito . when ( orcidSecurityManager . getClientIdFromAPIRequest ( ) ) . thenReturn ( null ) ; org . orcid . api . publicV2 . server . delegator . impl . PublicV2ApiServiceDelegatorImpl delegator = new org . orcid . api . publicV2 . server . delegator . impl . PublicV2ApiServiceDelegatorImpl ( ) ; org . springframework . test . util . ReflectionTestUtils . setField ( delegator , \"localeManager\" , localeManager ) ; org . springframework . test . util . ReflectionTestUtils . setField ( delegator , \"orcidSearchManager\" , orcidSearchManager ) ; org . springframework . test . util . ReflectionTestUtils . setField ( delegator , \"orcidSecurityManager\" , orcidSecurityManager ) ; javax . ws . rs . core . Response response = delegator . searchByQuery ( params ) ; \"<AssertPlaceHolder>\" ; } searchByQuery ( java . util . Map ) { return processReponse ( memberV3ApiServiceDelegator . searchByQuery ( solrParams ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "getInstance ( ) { return org . pentaho . platform . uifoundation . messages . Messages . instance ; }", "testMethod": "testGetInstance ( ) { org . pentaho . platform . uifoundation . messages . Messages instance = org . pentaho . platform . uifoundation . messages . Messages . getInstance ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance )", "total": "testGetInstance ( ) { org . pentaho . platform . uifoundation . messages . Messages instance = org . pentaho . platform . uifoundation . messages . Messages . getInstance ( ) ; \"<AssertPlaceHolder>\" ; } getInstance ( ) { return org . pentaho . platform . uifoundation . messages . Messages . instance ; }", "answer": "org . junit . Assert . assertNotNull ( instance )"}
{"focal": "getTime ( ) { return time ; }", "testMethod": "testGetUserCumulative ( ) { java . util . Calendar calendar = java . util . Calendar . getInstance ( ) ; calendar . roll ( Calendar . DAY_OF_YEAR , ( - 6 ) ) ; java . util . List < com . riversoft . weixin . mp . stat . bean . UserCumulative > userCumulativeList = com . riversoft . weixin . mp . stat . Stats . defaultStats ( ) . getUserCumulative ( calendar . getTime ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( userCumulativeList )", "total": "testGetUserCumulative ( ) { java . util . Calendar calendar = java . util . Calendar . getInstance ( ) ; calendar . roll ( Calendar . DAY_OF_YEAR , ( - 6 ) ) ; java . util . List < com . riversoft . weixin . mp . stat . bean . UserCumulative > userCumulativeList = com . riversoft . weixin . mp . stat . Stats . defaultStats ( ) . getUserCumulative ( calendar . getTime ( ) ) ; \"<AssertPlaceHolder>\" ; } getTime ( ) { return time ; }", "answer": "org . junit . Assert . assertNotNull ( userCumulativeList )"}
{"focal": "parse ( java . lang . String ) { if ( com . liferay . portal . odata . internal . filter . FilterParserImpl . _log . isDebugEnabled ( ) ) { com . liferay . portal . odata . internal . filter . FilterParserImpl . _log . debug ( ( \"Parsing<sp>filter:<sp>\" + filterString ) ) ; } if ( com . liferay . portal . kernel . util . Validator . isNull ( filterString ) ) { throw new com . liferay . portal . odata . filter . expression . ExpressionVisitException ( \"Filter<sp>is<sp>null\" ) ; } org . apache . olingo . server . api . uri . UriInfo uriInfo = _getUriInfo ( filterString ) ; org . apache . olingo . server . api . uri . queryoption . FilterOption filterOption = uriInfo . getFilterOption ( ) ; org . apache . olingo . server . api . uri . queryoption . expression . Expression expression = filterOption . getExpression ( ) ; try { return expression . accept ( new com . liferay . portal . odata . internal . filter . expression . ExpressionVisitorImpl ( ) ) ; } catch ( java . lang . Exception e ) { throw new com . liferay . portal . odata . filter . expression . ExpressionVisitException ( e . getMessage ( ) , e ) ; } }", "testMethod": "testParseWithLambdaAnyEqOnCollectionFieldInComplexField ( ) { com . liferay . portal . odata . filter . expression . Expression expression = com . liferay . portal . odata . internal . filter . FilterParserImplTest . _filterParserImpl . parse ( \"complexField/collectionField/any(f:contains(f,'alu'))\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( expression )", "total": "testParseWithLambdaAnyEqOnCollectionFieldInComplexField ( ) { com . liferay . portal . odata . filter . expression . Expression expression = com . liferay . portal . odata . internal . filter . FilterParserImplTest . _filterParserImpl . parse ( \"complexField/collectionField/any(f:contains(f,'alu'))\" ) ; \"<AssertPlaceHolder>\" ; } parse ( java . lang . String ) { if ( com . liferay . portal . odata . internal . filter . FilterParserImpl . _log . isDebugEnabled ( ) ) { com . liferay . portal . odata . internal . filter . FilterParserImpl . _log . debug ( ( \"Parsing<sp>filter:<sp>\" + filterString ) ) ; } if ( com . liferay . portal . kernel . util . Validator . isNull ( filterString ) ) { throw new com . liferay . portal . odata . filter . expression . ExpressionVisitException ( \"Filter<sp>is<sp>null\" ) ; } org . apache . olingo . server . api . uri . UriInfo uriInfo = _getUriInfo ( filterString ) ; org . apache . olingo . server . api . uri . queryoption . FilterOption filterOption = uriInfo . getFilterOption ( ) ; org . apache . olingo . server . api . uri . queryoption . expression . Expression expression = filterOption . getExpression ( ) ; try { return expression . accept ( new com . liferay . portal . odata . internal . filter . expression . ExpressionVisitorImpl ( ) ) ; } catch ( java . lang . Exception e ) { throw new com . liferay . portal . odata . filter . expression . ExpressionVisitException ( e . getMessage ( ) , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( expression )"}
{"focal": "launchWith ( java . lang . String [ ] , org . smartdata . conf . SmartConf ) { if ( conf == null ) { conf = new org . smartdata . conf . SmartConf ( ) ; } org . smartdata . server . SmartServer . StartupOption startOption = org . smartdata . server . SmartServer . processArgs ( args , conf ) ; if ( startOption == null ) { return null ; } return org . smartdata . server . SmartServer . processWith ( startOption , conf ) ; }", "testMethod": "testConfNameNodeRPCAddr ( ) { try { java . util . Collection < java . net . URI > namenodes = org . apache . hadoop . hdfs . DFSUtil . getInternalNsRpcUris ( smartContext . getConf ( ) ) ; java . util . List < java . net . URI > uriList = new java . util . ArrayList ( namenodes ) ; org . smartdata . conf . SmartConf conf = new org . smartdata . conf . SmartConf ( ) ; java . lang . String dbFile = org . smartdata . metastore . TestDBUtil . getUniqueEmptySqliteDBFile ( ) ; java . lang . String dbUrl = ( org . smartdata . metastore . utils . MetaStoreUtils . SQLITE_URL_PREFIX ) + dbFile ; conf . set ( SmartConfKeys . SMART_METASTORE_DB_URL_KEY , dbUrl ) ; org . smartdata . server . SmartServer ssm = null ; try { ssm = org . smartdata . server . SmartServer . launchWith ( conf ) ; java . lang . Thread . sleep ( 2000 ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( \"Should<sp>work<sp>without<sp>specifying<sp>NN\" ) ; } finally { if ( ssm != null ) { ssm . shutdown ( ) ; } } conf . set ( SmartConfKeys . SMART_DFS_NAMENODE_RPCSERVER_KEY , uriList . get ( 0 ) . toString ( ) ) ; java . lang . String [ ] args = new java . lang . String [ ] { \"-D\" , ( ( org . smartdata . conf . SmartConfKeys . SMART_DFS_NAMENODE_RPCSERVER_KEY ) + \"=\" ) + ( uriList . get ( 0 ) . toString ( ) ) } ; org . smartdata . server . SmartServer regServer = org . smartdata . server . SmartServer . launchWith ( args , conf ) ; \"<AssertPlaceHolder>\" ; java . lang . Thread . sleep ( 1000 ) ; regServer . shutdown ( ) ; args = new java . lang . String [ ] { \"-h\" } ; org . smartdata . server . SmartServer . launchWith ( args , conf ) ; } finally { cluster . shutdown ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( regServer )", "total": "testConfNameNodeRPCAddr ( ) { try { java . util . Collection < java . net . URI > namenodes = org . apache . hadoop . hdfs . DFSUtil . getInternalNsRpcUris ( smartContext . getConf ( ) ) ; java . util . List < java . net . URI > uriList = new java . util . ArrayList ( namenodes ) ; org . smartdata . conf . SmartConf conf = new org . smartdata . conf . SmartConf ( ) ; java . lang . String dbFile = org . smartdata . metastore . TestDBUtil . getUniqueEmptySqliteDBFile ( ) ; java . lang . String dbUrl = ( org . smartdata . metastore . utils . MetaStoreUtils . SQLITE_URL_PREFIX ) + dbFile ; conf . set ( SmartConfKeys . SMART_METASTORE_DB_URL_KEY , dbUrl ) ; org . smartdata . server . SmartServer ssm = null ; try { ssm = org . smartdata . server . SmartServer . launchWith ( conf ) ; java . lang . Thread . sleep ( 2000 ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( \"Should<sp>work<sp>without<sp>specifying<sp>NN\" ) ; } finally { if ( ssm != null ) { ssm . shutdown ( ) ; } } conf . set ( SmartConfKeys . SMART_DFS_NAMENODE_RPCSERVER_KEY , uriList . get ( 0 ) . toString ( ) ) ; java . lang . String [ ] args = new java . lang . String [ ] { \"-D\" , ( ( org . smartdata . conf . SmartConfKeys . SMART_DFS_NAMENODE_RPCSERVER_KEY ) + \"=\" ) + ( uriList . get ( 0 ) . toString ( ) ) } ; org . smartdata . server . SmartServer regServer = org . smartdata . server . SmartServer . launchWith ( args , conf ) ; \"<AssertPlaceHolder>\" ; java . lang . Thread . sleep ( 1000 ) ; regServer . shutdown ( ) ; args = new java . lang . String [ ] { \"-h\" } ; org . smartdata . server . SmartServer . launchWith ( args , conf ) ; } finally { cluster . shutdown ( ) ; } } launchWith ( java . lang . String [ ] , org . smartdata . conf . SmartConf ) { if ( conf == null ) { conf = new org . smartdata . conf . SmartConf ( ) ; } org . smartdata . server . SmartServer . StartupOption startOption = org . smartdata . server . SmartServer . processArgs ( args , conf ) ; if ( startOption == null ) { return null ; } return org . smartdata . server . SmartServer . processWith ( startOption , conf ) ; }", "answer": "org . junit . Assert . assertNotNull ( regServer )"}
{"focal": "meta ( ) { return org . joda . beans . sample . ImmPersonNonFinal . Meta . INSTANCE ; }", "testMethod": "test_registerMetaBean ( ) { \"<AssertPlaceHolder>\" ; org . joda . beans . MetaBean . register ( org . joda . beans . sample . ImmPerson . meta ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . joda . beans . sample . ImmPerson . meta ( ) )", "total": "test_registerMetaBean ( ) { \"<AssertPlaceHolder>\" ; org . joda . beans . MetaBean . register ( org . joda . beans . sample . ImmPerson . meta ( ) ) ; } meta ( ) { return org . joda . beans . sample . ImmPersonNonFinal . Meta . INSTANCE ; }", "answer": "org . junit . Assert . assertNotNull ( org . joda . beans . sample . ImmPerson . meta ( ) )"}
{"focal": "getResource ( java . lang . Class , java . lang . String ) { org . reficio . ws . common . ResourceUtils . Path path = org . reficio . ws . common . ResourceUtils . parsePath ( resourcePath ) ; return org . reficio . ws . common . ResourceUtils . getResourceWithAbsolutePackagePath ( clazz , path . packagePath , path . resourcePath ) ; }", "testMethod": "testResourceLoading_whiteSpaces_noPackage ( ) { java . net . URL url = org . reficio . ws . common . ResourceUtils . getResource ( org . reficio . ws . common . System . class , \"<sp>/org/reficio/ws/common/test/soapEncoding.xsd\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( url )", "total": "testResourceLoading_whiteSpaces_noPackage ( ) { java . net . URL url = org . reficio . ws . common . ResourceUtils . getResource ( org . reficio . ws . common . System . class , \"<sp>/org/reficio/ws/common/test/soapEncoding.xsd\" ) ; \"<AssertPlaceHolder>\" ; } getResource ( java . lang . Class , java . lang . String ) { org . reficio . ws . common . ResourceUtils . Path path = org . reficio . ws . common . ResourceUtils . parsePath ( resourcePath ) ; return org . reficio . ws . common . ResourceUtils . getResourceWithAbsolutePackagePath ( clazz , path . packagePath , path . resourcePath ) ; }", "answer": "org . junit . Assert . assertNotNull ( url )"}
{"focal": "withoutArgs ( ) { return withArgs ( new java . lang . Object [ 0 ] ) ; }", "testMethod": "testThatCanReflectSuperClassMethod ( ) { java . lang . reflect . Method method = new net . vidageek . mirror . reflect . DefaultMethodReflector ( provider , \"superClassMethod\" , net . vidageek . mirror . fixtures . ChildFixture . class ) . withoutArgs ( ) ; \"<AssertPlaceHolder>\" ; method . invoke ( new net . vidageek . mirror . fixtures . ChildFixture ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( method )", "total": "testThatCanReflectSuperClassMethod ( ) { java . lang . reflect . Method method = new net . vidageek . mirror . reflect . DefaultMethodReflector ( provider , \"superClassMethod\" , net . vidageek . mirror . fixtures . ChildFixture . class ) . withoutArgs ( ) ; \"<AssertPlaceHolder>\" ; method . invoke ( new net . vidageek . mirror . fixtures . ChildFixture ( ) ) ; } withoutArgs ( ) { return withArgs ( new java . lang . Object [ 0 ] ) ; }", "answer": "org . junit . Assert . assertNotNull ( method )"}
{"focal": "getSqlString ( ) { return sqlString ; }", "testMethod": "testUpdate ( ) { es . ieci . tecdoc . fwktd . sql . node . statement . update . Update update = new es . ieci . tecdoc . fwktd . sql . node . statement . update . Update ( ) ; es . ieci . tecdoc . fwktd . sql . node . schema . Table table = new es . ieci . tecdoc . fwktd . sql . node . schema . Table ( ) ; table . setName ( \"anyGivenTable\" ) ; table . setSchemaName ( \"anyGivenSchema\" ) ; update . setTable ( table ) ; java . util . List < es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause > setClauses = new java . util . ArrayList < es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause > ( ) ; setClauses . add ( new es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause ( new es . ieci . tecdoc . fwktd . sql . node . schema . Column ( table , \"anyGivenColumn\" ) , es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause . SetClauseValueType . expression , new es . ieci . tecdoc . fwktd . sql . node . expression . StringValue ( \"'anyValue'\" ) ) ) ; setClauses . add ( new es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause ( new es . ieci . tecdoc . fwktd . sql . node . schema . Column ( table , \"anotherColumn\" ) , es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause . SetClauseValueType . null_value ) ) ; setClauses . add ( new es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause ( new es . ieci . tecdoc . fwktd . sql . node . schema . Column ( table , \"anotherColumnMore\" ) , es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause . SetClauseValueType . default_value ) ) ; update . setSetClauses ( setClauses ) ; statementRenderer . visit ( update ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( update . getSqlString ( ) )", "total": "testUpdate ( ) { es . ieci . tecdoc . fwktd . sql . node . statement . update . Update update = new es . ieci . tecdoc . fwktd . sql . node . statement . update . Update ( ) ; es . ieci . tecdoc . fwktd . sql . node . schema . Table table = new es . ieci . tecdoc . fwktd . sql . node . schema . Table ( ) ; table . setName ( \"anyGivenTable\" ) ; table . setSchemaName ( \"anyGivenSchema\" ) ; update . setTable ( table ) ; java . util . List < es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause > setClauses = new java . util . ArrayList < es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause > ( ) ; setClauses . add ( new es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause ( new es . ieci . tecdoc . fwktd . sql . node . schema . Column ( table , \"anyGivenColumn\" ) , es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause . SetClauseValueType . expression , new es . ieci . tecdoc . fwktd . sql . node . expression . StringValue ( \"'anyValue'\" ) ) ) ; setClauses . add ( new es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause ( new es . ieci . tecdoc . fwktd . sql . node . schema . Column ( table , \"anotherColumn\" ) , es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause . SetClauseValueType . null_value ) ) ; setClauses . add ( new es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause ( new es . ieci . tecdoc . fwktd . sql . node . schema . Column ( table , \"anotherColumnMore\" ) , es . ieci . tecdoc . fwktd . sql . node . statement . update . SetClause . SetClauseValueType . default_value ) ) ; update . setSetClauses ( setClauses ) ; statementRenderer . visit ( update ) ; \"<AssertPlaceHolder>\" ; } getSqlString ( ) { return sqlString ; }", "answer": "org . junit . Assert . assertNotNull ( update . getSqlString ( ) )"}
{"focal": "getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "testMethod": "shouldCloseStreamsIfExceptionThrownWithTypesSchema ( ) { final java . io . InputStream storePropertiesStream = uk . gov . gchq . gaffer . commonutil . StreamUtil . storeProps ( getClass ( ) ) ; final java . io . InputStream elementSchemaStream = uk . gov . gchq . gaffer . commonutil . StreamUtil . elementsSchema ( getClass ( ) ) ; final java . io . InputStream typesSchemaStream = createMockStream ( ) ; final java . io . InputStream aggregationSchemaStream = createMockStream ( ) ; final java . io . InputStream serialisationSchemaStream = createMockStream ( ) ; try { new uk . gov . gchq . gaffer . graph . Graph . Builder ( ) . storeProperties ( storePropertiesStream ) . addSchema ( elementSchemaStream ) . addSchema ( typesSchemaStream ) . addSchema ( aggregationSchemaStream ) . addSchema ( serialisationSchemaStream ) . build ( ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; verify ( typesSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( aggregationSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( serialisationSchemaStream , atLeastOnce ( ) ) . close ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "shouldCloseStreamsIfExceptionThrownWithTypesSchema ( ) { final java . io . InputStream storePropertiesStream = uk . gov . gchq . gaffer . commonutil . StreamUtil . storeProps ( getClass ( ) ) ; final java . io . InputStream elementSchemaStream = uk . gov . gchq . gaffer . commonutil . StreamUtil . elementsSchema ( getClass ( ) ) ; final java . io . InputStream typesSchemaStream = createMockStream ( ) ; final java . io . InputStream aggregationSchemaStream = createMockStream ( ) ; final java . io . InputStream serialisationSchemaStream = createMockStream ( ) ; try { new uk . gov . gchq . gaffer . graph . Graph . Builder ( ) . storeProperties ( storePropertiesStream ) . addSchema ( elementSchemaStream ) . addSchema ( typesSchemaStream ) . addSchema ( aggregationSchemaStream ) . addSchema ( serialisationSchemaStream ) . build ( ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; verify ( typesSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( aggregationSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( serialisationSchemaStream , atLeastOnce ( ) ) . close ( ) ; } } getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "createSearchObject ( ) { return new org . greencheek . related . api . searching . RelatedItemSearch ( configuration ) ; }", "testMethod": "testCreateSearchObject ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( factory . createSearchObject ( ) )", "total": "testCreateSearchObject ( ) { \"<AssertPlaceHolder>\" ; } createSearchObject ( ) { return new org . greencheek . related . api . searching . RelatedItemSearch ( configuration ) ; }", "answer": "org . junit . Assert . assertNotNull ( factory . createSearchObject ( ) )"}
{"focal": "csvAssert ( MarshalledType , org . nuxeo . ecm . core . io . registry . context . RenderingContext ) { return org . nuxeo . ecm . core . io . marshallers . csv . CSVAssert . on ( asCsv ( object , ctx ) ) ; }", "testMethod": "testInvalidSchemasAndXpaths ( ) { for ( java . util . List < java . lang . String > value : getValues ( ) ) { org . nuxeo . ecm . core . io . registry . context . RenderingContext renderingCtx = RenderingContext . CtxBuilder . get ( ) ; for ( java . lang . String param : java . util . Arrays . asList ( org . nuxeo . ecm . platform . csv . export . io . DocumentModelCSVWriter . SCHEMAS_CTX_DATA , org . nuxeo . ecm . platform . csv . export . io . DocumentModelCSVWriter . XPATHS_CTX_DATA ) ) { renderingCtx . setParameterValues ( param , value ) ; } \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( csvAssert ( document , renderingCtx ) )", "total": "testInvalidSchemasAndXpaths ( ) { for ( java . util . List < java . lang . String > value : getValues ( ) ) { org . nuxeo . ecm . core . io . registry . context . RenderingContext renderingCtx = RenderingContext . CtxBuilder . get ( ) ; for ( java . lang . String param : java . util . Arrays . asList ( org . nuxeo . ecm . platform . csv . export . io . DocumentModelCSVWriter . SCHEMAS_CTX_DATA , org . nuxeo . ecm . platform . csv . export . io . DocumentModelCSVWriter . XPATHS_CTX_DATA ) ) { renderingCtx . setParameterValues ( param , value ) ; } \"<AssertPlaceHolder>\" ; } } csvAssert ( MarshalledType , org . nuxeo . ecm . core . io . registry . context . RenderingContext ) { return org . nuxeo . ecm . core . io . marshallers . csv . CSVAssert . on ( asCsv ( object , ctx ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( csvAssert ( document , renderingCtx ) )"}
{"focal": "getName ( ) { return name ; }", "testMethod": "testWALCoprocessorLoaded ( ) { org . apache . hadoop . hbase . regionserver . wal . HLog log = new org . apache . hadoop . hbase . regionserver . wal . HLog ( org . apache . hadoop . hbase . regionserver . wal . TestHLog . fs , org . apache . hadoop . hbase . regionserver . wal . TestHLog . dir , org . apache . hadoop . hbase . regionserver . wal . TestHLog . oldLogDir , org . apache . hadoop . hbase . regionserver . wal . TestHLog . conf ) ; try { org . apache . hadoop . hbase . regionserver . wal . WALCoprocessorHost host = log . getCoprocessorHost ( ) ; org . apache . hadoop . hbase . Coprocessor c = host . findCoprocessor ( org . apache . hadoop . hbase . coprocessor . SampleRegionWALObserver . class . getName ( ) ) ; \"<AssertPlaceHolder>\" ; } finally { if ( log != null ) log . closeAndDelete ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( c )", "total": "testWALCoprocessorLoaded ( ) { org . apache . hadoop . hbase . regionserver . wal . HLog log = new org . apache . hadoop . hbase . regionserver . wal . HLog ( org . apache . hadoop . hbase . regionserver . wal . TestHLog . fs , org . apache . hadoop . hbase . regionserver . wal . TestHLog . dir , org . apache . hadoop . hbase . regionserver . wal . TestHLog . oldLogDir , org . apache . hadoop . hbase . regionserver . wal . TestHLog . conf ) ; try { org . apache . hadoop . hbase . regionserver . wal . WALCoprocessorHost host = log . getCoprocessorHost ( ) ; org . apache . hadoop . hbase . Coprocessor c = host . findCoprocessor ( org . apache . hadoop . hbase . coprocessor . SampleRegionWALObserver . class . getName ( ) ) ; \"<AssertPlaceHolder>\" ; } finally { if ( log != null ) log . closeAndDelete ( ) ; } } getName ( ) { return name ; }", "answer": "org . junit . Assert . assertNotNull ( c )"}
{"focal": "getName ( ) { return name ; }", "testMethod": "getJdbcDefinition ( ) { io . restassured . response . Response response = io . restassured . RestAssured . given ( ) . accept ( org . talend . components . service . rest . APPLICATION_JSON_UTF8_VALUE ) . get ( ( ( getVersionPrefix ( ) ) + \"/definitions/DATA_STORE\" ) ) ; response . then ( ) . statusCode ( 200 ) . log ( ) . ifError ( ) ; java . util . List < org . talend . components . service . rest . dto . DefinitionDTO > definitions = mapper . readerFor ( com . fasterxml . jackson . databind . type . TypeFactory . defaultInstance ( ) . constructCollectionType ( java . util . List . class , org . talend . components . service . rest . dto . DefinitionDTO . class ) ) . readValue ( response . asInputStream ( ) ) ; org . talend . components . service . rest . dto . DefinitionDTO jdbcDef = null ; for ( org . talend . components . service . rest . dto . DefinitionDTO definition : definitions ) { if ( org . talend . components . service . rest . JdbcComponentTestIT . DATA_STORE_DEFINITION_NAME . equals ( definition . getName ( ) ) ) { jdbcDef = definition ; break ; } } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( jdbcDef )", "total": "getJdbcDefinition ( ) { io . restassured . response . Response response = io . restassured . RestAssured . given ( ) . accept ( org . talend . components . service . rest . APPLICATION_JSON_UTF8_VALUE ) . get ( ( ( getVersionPrefix ( ) ) + \"/definitions/DATA_STORE\" ) ) ; response . then ( ) . statusCode ( 200 ) . log ( ) . ifError ( ) ; java . util . List < org . talend . components . service . rest . dto . DefinitionDTO > definitions = mapper . readerFor ( com . fasterxml . jackson . databind . type . TypeFactory . defaultInstance ( ) . constructCollectionType ( java . util . List . class , org . talend . components . service . rest . dto . DefinitionDTO . class ) ) . readValue ( response . asInputStream ( ) ) ; org . talend . components . service . rest . dto . DefinitionDTO jdbcDef = null ; for ( org . talend . components . service . rest . dto . DefinitionDTO definition : definitions ) { if ( org . talend . components . service . rest . JdbcComponentTestIT . DATA_STORE_DEFINITION_NAME . equals ( definition . getName ( ) ) ) { jdbcDef = definition ; break ; } } \"<AssertPlaceHolder>\" ; } getName ( ) { return name ; }", "answer": "org . junit . Assert . assertNotNull ( jdbcDef )"}
{"focal": "buildTopology ( org . apache . storm . flux . ExecutionContext ) { backtype . storm . generated . StormTopology topology = null ; org . apache . storm . flux . TopologyDef topologyDef = context . getTopologyDef ( ) ; if ( ! ( topologyDef . validate ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( \"Invalid<sp>topology<sp>config.<sp>Spouts,<sp>bolts<sp>and<sp>streams<sp>cannot<sp>be<sp>\" + \"defined<sp>in<sp>the<sp>same<sp>configuration<sp>as<sp>a<sp>topologySource.\" ) ) ; } org . apache . storm . flux . FluxBuilder . buildComponents ( context ) ; if ( topologyDef . isDslTopology ( ) ) { org . apache . storm . flux . FluxBuilder . LOG . info ( \"Detected<sp>DSL<sp>topology...\" ) ; org . apache . storm . flux . TopologyBuilder builder = new org . apache . storm . flux . TopologyBuilder ( ) ; org . apache . storm . flux . FluxBuilder . buildSpouts ( context , builder ) ; org . apache . storm . flux . FluxBuilder . buildBolts ( context ) ; org . apache . storm . flux . FluxBuilder . buildStreamDefinitions ( context , builder ) ; topology = builder . createTopology ( ) ; } else { org . apache . storm . flux . FluxBuilder . LOG . info ( \"A<sp>topology<sp>source<sp>has<sp>been<sp>specified...\" ) ; org . apache . storm . flux . ObjectDef def = topologyDef . getTopologySource ( ) ; topology = org . apache . storm . flux . FluxBuilder . buildExternalTopology ( def , context ) ; } return topology ; }", "testMethod": "testHdfs ( ) { org . apache . storm . flux . model . TopologyDef topologyDef = org . apache . storm . flux . parser . FluxParser . parseResource ( \"/configs/hdfs_test.yaml\" , false , true , null , false ) ; backtype . storm . Config conf = org . apache . storm . flux . FluxBuilder . buildConfig ( topologyDef ) ; org . apache . storm . flux . model . ExecutionContext context = new org . apache . storm . flux . model . ExecutionContext ( topologyDef , conf ) ; backtype . storm . generated . StormTopology topology = org . apache . storm . flux . FluxBuilder . buildTopology ( context ) ; \"<AssertPlaceHolder>\" ; topology . validate ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( topology )", "total": "testHdfs ( ) { org . apache . storm . flux . model . TopologyDef topologyDef = org . apache . storm . flux . parser . FluxParser . parseResource ( \"/configs/hdfs_test.yaml\" , false , true , null , false ) ; backtype . storm . Config conf = org . apache . storm . flux . FluxBuilder . buildConfig ( topologyDef ) ; org . apache . storm . flux . model . ExecutionContext context = new org . apache . storm . flux . model . ExecutionContext ( topologyDef , conf ) ; backtype . storm . generated . StormTopology topology = org . apache . storm . flux . FluxBuilder . buildTopology ( context ) ; \"<AssertPlaceHolder>\" ; topology . validate ( ) ; } buildTopology ( org . apache . storm . flux . ExecutionContext ) { backtype . storm . generated . StormTopology topology = null ; org . apache . storm . flux . TopologyDef topologyDef = context . getTopologyDef ( ) ; if ( ! ( topologyDef . validate ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( \"Invalid<sp>topology<sp>config.<sp>Spouts,<sp>bolts<sp>and<sp>streams<sp>cannot<sp>be<sp>\" + \"defined<sp>in<sp>the<sp>same<sp>configuration<sp>as<sp>a<sp>topologySource.\" ) ) ; } org . apache . storm . flux . FluxBuilder . buildComponents ( context ) ; if ( topologyDef . isDslTopology ( ) ) { org . apache . storm . flux . FluxBuilder . LOG . info ( \"Detected<sp>DSL<sp>topology...\" ) ; org . apache . storm . flux . TopologyBuilder builder = new org . apache . storm . flux . TopologyBuilder ( ) ; org . apache . storm . flux . FluxBuilder . buildSpouts ( context , builder ) ; org . apache . storm . flux . FluxBuilder . buildBolts ( context ) ; org . apache . storm . flux . FluxBuilder . buildStreamDefinitions ( context , builder ) ; topology = builder . createTopology ( ) ; } else { org . apache . storm . flux . FluxBuilder . LOG . info ( \"A<sp>topology<sp>source<sp>has<sp>been<sp>specified...\" ) ; org . apache . storm . flux . ObjectDef def = topologyDef . getTopologySource ( ) ; topology = org . apache . storm . flux . FluxBuilder . buildExternalTopology ( def , context ) ; } return topology ; }", "answer": "org . junit . Assert . assertNotNull ( topology )"}
{"focal": "compare ( java . lang . String ) { com . gs . obevocomparer . compare . CatoComparison comparison = null ; if ( ( ( ( this . leftSource ) != null ) && ( ( this . rightSource ) != null ) ) && ( ( this . properties ) != null ) ) { comparison = com . gs . obevocomparer . util . CatoBaseUtil . compare ( name , this . leftSource , this . rightSource , this . properties ) ; } else if ( ( this . resource ) != null ) { throw new java . lang . UnsupportedOperationException ( \"Need<sp>to<sp>implement<sp>this<sp>section;<sp>though<sp>this<sp>may<sp>be<sp>unused<sp>in<sp>Obevo<sp>codebase\" ) ; } return comparison ; }", "testMethod": "testBasic ( ) { com . gs . obevocomparer . input . CatoDataSource leftSource = com . gs . obevocomparer . util . CatoBaseUtil . createDelimitedStreamDataSource ( \"QA<sp>Data\" , new java . io . FileReader ( \"src/test/resources/testdata1.txt\" ) , TestUtil . ALL_FIELDS , \",\" ) ; com . gs . obevocomparer . input . CatoDataSource rightSource = com . gs . obevocomparer . util . CatoBaseUtil . createDelimitedStreamDataSource ( \"Prod<sp>Data\" , new java . io . FileReader ( \"src/test/resources/testdata2.txt\" ) , TestUtil . ALL_FIELDS , \",\" ) ; com . gs . obevocomparer . compare . CatoComparison comparison = com . gs . obevocomparer . util . CatoBuilder . newInstance ( ) . withSources ( leftSource , rightSource ) . withFields ( TestUtil . KEY_FIELDS , TestUtil . EXCLUDE_FIELDS ) . compare ( \"Comparison\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( comparison )", "total": "testBasic ( ) { com . gs . obevocomparer . input . CatoDataSource leftSource = com . gs . obevocomparer . util . CatoBaseUtil . createDelimitedStreamDataSource ( \"QA<sp>Data\" , new java . io . FileReader ( \"src/test/resources/testdata1.txt\" ) , TestUtil . ALL_FIELDS , \",\" ) ; com . gs . obevocomparer . input . CatoDataSource rightSource = com . gs . obevocomparer . util . CatoBaseUtil . createDelimitedStreamDataSource ( \"Prod<sp>Data\" , new java . io . FileReader ( \"src/test/resources/testdata2.txt\" ) , TestUtil . ALL_FIELDS , \",\" ) ; com . gs . obevocomparer . compare . CatoComparison comparison = com . gs . obevocomparer . util . CatoBuilder . newInstance ( ) . withSources ( leftSource , rightSource ) . withFields ( TestUtil . KEY_FIELDS , TestUtil . EXCLUDE_FIELDS ) . compare ( \"Comparison\" ) ; \"<AssertPlaceHolder>\" ; } compare ( java . lang . String ) { com . gs . obevocomparer . compare . CatoComparison comparison = null ; if ( ( ( ( this . leftSource ) != null ) && ( ( this . rightSource ) != null ) ) && ( ( this . properties ) != null ) ) { comparison = com . gs . obevocomparer . util . CatoBaseUtil . compare ( name , this . leftSource , this . rightSource , this . properties ) ; } else if ( ( this . resource ) != null ) { throw new java . lang . UnsupportedOperationException ( \"Need<sp>to<sp>implement<sp>this<sp>section;<sp>though<sp>this<sp>may<sp>be<sp>unused<sp>in<sp>Obevo<sp>codebase\" ) ; } return comparison ; }", "answer": "org . junit . Assert . assertNotNull ( comparison )"}
{"focal": "getInstance ( java . lang . Class , java . lang . String ) { org . dayatang . ioc . guice . Key < T > key = org . dayatang . ioc . guice . Key . get ( beanType , com . google . inject . name . Names . named ( beanName ) ) ; try { return injector . getInstance ( key ) ; } catch ( org . dayatang . ioc . guice . com . google e ) { return null ; } }", "testMethod": "testGetInstanceWithAnnotation ( ) { org . dayatang . ioc . guice . Service3 service = getProvider ( ) . getInstance ( org . dayatang . ioc . guice . Service3 . class , org . dayatang . ioc . guice . MyBindingAnnotation . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( service )", "total": "testGetInstanceWithAnnotation ( ) { org . dayatang . ioc . guice . Service3 service = getProvider ( ) . getInstance ( org . dayatang . ioc . guice . Service3 . class , org . dayatang . ioc . guice . MyBindingAnnotation . class ) ; \"<AssertPlaceHolder>\" ; } getInstance ( java . lang . Class , java . lang . String ) { org . dayatang . ioc . guice . Key < T > key = org . dayatang . ioc . guice . Key . get ( beanType , com . google . inject . name . Names . named ( beanName ) ) ; try { return injector . getInstance ( key ) ; } catch ( org . dayatang . ioc . guice . com . google e ) { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( service )"}
{"focal": "submit ( ) { if ( org . pentaho . hadoop . mapreduce . YarnQueueAclsVerifier . verify ( createClusterDescription ( getJob ( ) . getConfiguration ( ) ) . getQueueAclsForCurrentUser ( ) ) ) { getJob ( ) . submit ( ) ; return new org . pentaho . hadoop . shim . common . RunningJobProxyV2 ( getJob ( ) ) ; } else { throw new org . pentaho . hadoop . mapreduce . YarnQueueAclsException ( org . pentaho . di . i18n . BaseMessages . getString ( org . pentaho . hadoop . shim . common . ConfigurationProxy . class , \"ConfigurationProxy.UserHasNoPermissions\" , org . apache . hadoop . security . UserGroupInformation . getCurrentUser ( ) . getUserName ( ) ) ) ; } }", "testMethod": "testSubmitWhenUserHasPermissionsToSubmitJobInQueueShouldExecuteSuccessfully ( ) { org . mockito . Mockito . spy ( org . pentaho . hadoop . mapreduce . YarnQueueAclsVerifier . class ) ; org . pentaho . hadoop . shim . common . ConfigurationProxyV2 configurationProxyV2 = org . mockito . Mockito . mock ( org . pentaho . hadoop . shim . common . ConfigurationProxyV2 . class ) ; org . apache . hadoop . mapreduce . Cluster cluster = org . mockito . Mockito . mock ( org . apache . hadoop . mapreduce . Cluster . class ) ; org . apache . hadoop . mapreduce . Job job = org . mockito . Mockito . mock ( org . apache . hadoop . mapreduce . Job . class ) ; org . mockito . Mockito . when ( configurationProxyV2 . getJob ( ) ) . thenReturn ( job ) ; org . mockito . Mockito . when ( configurationProxyV2 . createClusterDescription ( org . mockito . Mockito . any ( org . apache . hadoop . conf . Configuration . class ) ) ) . thenReturn ( cluster ) ; org . mockito . Mockito . when ( configurationProxyV2 . submit ( ) ) . thenCallRealMethod ( ) ; org . mockito . Mockito . when ( cluster . getQueueAclsForCurrentUser ( ) ) . thenReturn ( new org . apache . hadoop . mapreduce . QueueAclsInfo [ ] { new org . apache . hadoop . mapreduce . QueueAclsInfo ( org . apache . commons . lang . StringUtils . EMPTY , new java . lang . String [ ] { \"SUBMIT_APPLICATIONS\" } ) , new org . apache . hadoop . mapreduce . QueueAclsInfo ( org . apache . commons . lang . StringUtils . EMPTY , new java . lang . String [ ] { } ) } ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( configurationProxyV2 . submit ( ) )", "total": "testSubmitWhenUserHasPermissionsToSubmitJobInQueueShouldExecuteSuccessfully ( ) { org . mockito . Mockito . spy ( org . pentaho . hadoop . mapreduce . YarnQueueAclsVerifier . class ) ; org . pentaho . hadoop . shim . common . ConfigurationProxyV2 configurationProxyV2 = org . mockito . Mockito . mock ( org . pentaho . hadoop . shim . common . ConfigurationProxyV2 . class ) ; org . apache . hadoop . mapreduce . Cluster cluster = org . mockito . Mockito . mock ( org . apache . hadoop . mapreduce . Cluster . class ) ; org . apache . hadoop . mapreduce . Job job = org . mockito . Mockito . mock ( org . apache . hadoop . mapreduce . Job . class ) ; org . mockito . Mockito . when ( configurationProxyV2 . getJob ( ) ) . thenReturn ( job ) ; org . mockito . Mockito . when ( configurationProxyV2 . createClusterDescription ( org . mockito . Mockito . any ( org . apache . hadoop . conf . Configuration . class ) ) ) . thenReturn ( cluster ) ; org . mockito . Mockito . when ( configurationProxyV2 . submit ( ) ) . thenCallRealMethod ( ) ; org . mockito . Mockito . when ( cluster . getQueueAclsForCurrentUser ( ) ) . thenReturn ( new org . apache . hadoop . mapreduce . QueueAclsInfo [ ] { new org . apache . hadoop . mapreduce . QueueAclsInfo ( org . apache . commons . lang . StringUtils . EMPTY , new java . lang . String [ ] { \"SUBMIT_APPLICATIONS\" } ) , new org . apache . hadoop . mapreduce . QueueAclsInfo ( org . apache . commons . lang . StringUtils . EMPTY , new java . lang . String [ ] { } ) } ) ; \"<AssertPlaceHolder>\" ; } submit ( ) { if ( org . pentaho . hadoop . mapreduce . YarnQueueAclsVerifier . verify ( createClusterDescription ( getJob ( ) . getConfiguration ( ) ) . getQueueAclsForCurrentUser ( ) ) ) { getJob ( ) . submit ( ) ; return new org . pentaho . hadoop . shim . common . RunningJobProxyV2 ( getJob ( ) ) ; } else { throw new org . pentaho . hadoop . mapreduce . YarnQueueAclsException ( org . pentaho . di . i18n . BaseMessages . getString ( org . pentaho . hadoop . shim . common . ConfigurationProxy . class , \"ConfigurationProxy.UserHasNoPermissions\" , org . apache . hadoop . security . UserGroupInformation . getCurrentUser ( ) . getUserName ( ) ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( configurationProxyV2 . submit ( ) )"}
{"focal": "getIdentifier ( ) { return org . jbpm . services . task . test . TestStatefulKnowledgeSession . testSessionId ; }", "testMethod": "testExecuteCommandWithContextOnAbortedProcess ( ) { long processInstanceId = processService . startProcess ( deploymentUnit . getIdentifier ( ) , org . jbpm . kie . services . test . ProcessServiceImplPerProcessInstanceTest . PROCESS_ID_HUMAN_TASK ) ; \"<AssertPlaceHolder>\" ; processService . abortProcessInstance ( processInstanceId ) ; try { processService . execute ( deploymentUnit . getIdentifier ( ) , org . kie . internal . runtime . manager . context . ProcessInstanceIdContext . get ( processInstanceId ) , new org . drools . core . command . runtime . process . GetProcessInstanceCommand ( processInstanceId ) ) ; org . junit . Assert . fail ( \"Executing<sp>command<sp>with<sp>context<sp>on<sp>already<sp>aborted<sp>process<sp>instance<sp>should<sp>throw<sp>ProcessInstanceNotFoundException.\" ) ; } catch ( org . jbpm . services . api . ProcessInstanceNotFoundException e ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( processInstanceId )", "total": "testExecuteCommandWithContextOnAbortedProcess ( ) { long processInstanceId = processService . startProcess ( deploymentUnit . getIdentifier ( ) , org . jbpm . kie . services . test . ProcessServiceImplPerProcessInstanceTest . PROCESS_ID_HUMAN_TASK ) ; \"<AssertPlaceHolder>\" ; processService . abortProcessInstance ( processInstanceId ) ; try { processService . execute ( deploymentUnit . getIdentifier ( ) , org . kie . internal . runtime . manager . context . ProcessInstanceIdContext . get ( processInstanceId ) , new org . drools . core . command . runtime . process . GetProcessInstanceCommand ( processInstanceId ) ) ; org . junit . Assert . fail ( \"Executing<sp>command<sp>with<sp>context<sp>on<sp>already<sp>aborted<sp>process<sp>instance<sp>should<sp>throw<sp>ProcessInstanceNotFoundException.\" ) ; } catch ( org . jbpm . services . api . ProcessInstanceNotFoundException e ) { } } getIdentifier ( ) { return org . jbpm . services . task . test . TestStatefulKnowledgeSession . testSessionId ; }", "answer": "org . junit . Assert . assertNotNull ( processInstanceId )"}
{"focal": "create ( ) { return this . create ( null , null , null , null ) ; }", "testMethod": "firstTest ( ) { com . microsoft . azure . management . keyvault . v2016_10_01 . KeyVaultTest . rgName = com . microsoft . azure . arm . utils . SdkContext . randomResourceName ( \"rg\" , 20 ) ; com . microsoft . azure . management . resources . ResourceGroup group = com . microsoft . azure . management . keyvault . v2016_10_01 . KeyVaultTest . resourceManager . resourceGroups ( ) . define ( com . microsoft . azure . management . keyvault . v2016_10_01 . KeyVaultTest . rgName ) . withRegion ( Region . US_WEST . toString ( ) ) . create ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( group )", "total": "firstTest ( ) { com . microsoft . azure . management . keyvault . v2016_10_01 . KeyVaultTest . rgName = com . microsoft . azure . arm . utils . SdkContext . randomResourceName ( \"rg\" , 20 ) ; com . microsoft . azure . management . resources . ResourceGroup group = com . microsoft . azure . management . keyvault . v2016_10_01 . KeyVaultTest . resourceManager . resourceGroups ( ) . define ( com . microsoft . azure . management . keyvault . v2016_10_01 . KeyVaultTest . rgName ) . withRegion ( Region . US_WEST . toString ( ) ) . create ( ) ; \"<AssertPlaceHolder>\" ; } create ( ) { return this . create ( null , null , null , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( group )"}
{"focal": "getByUUID ( java . lang . String ) { java . util . List < org . apache . eagle . metadata . model . SiteEntity > results ; org . apache . eagle . metadata . model . SiteEntity siteEntity = new org . apache . eagle . metadata . model . SiteEntity ( uuid , \"\" ) ; try { results = queryService . queryWithCond ( org . apache . eagle . metadata . store . jdbc . service . SiteEntityServiceJDBCImpl . selectSqlByUUID , siteEntity , new org . apache . eagle . metadata . store . jdbc . service . orm . SiteEntityToRelation ( ) , new org . apache . eagle . metadata . store . jdbc . service . orm . RelationToSiteEntity ( ) ) ; } catch ( java . sql . SQLException e ) { org . apache . eagle . metadata . store . jdbc . service . SiteEntityServiceJDBCImpl . LOGGER . error ( \"Error<sp>to<sp>getByUUID<sp>SiteEntity:<sp>{}\" , e ) ; throw new org . apache . eagle . metadata . exceptions . EntityNotFoundException ( e ) ; } if ( results . isEmpty ( ) ) { throw new org . apache . eagle . metadata . exceptions . EntityNotFoundException ( ( ( \"getByUUID<sp>\" + uuid ) + \"<sp>Not<sp>Found\" ) ) ; } return results . get ( 0 ) ; }", "testMethod": "testFindByUUID ( ) { org . apache . eagle . metadata . model . SiteEntity siteEntity = new org . apache . eagle . metadata . model . SiteEntity ( ) ; siteEntity . setSiteId ( \"testsiteid\" ) ; siteEntity . setSiteName ( \"testsitename\" ) ; siteEntity . setDescription ( \"testdesc\" ) ; org . apache . eagle . metadata . model . ApplicationDesc applicationDesc = new org . apache . eagle . metadata . model . ApplicationDesc ( ) ; applicationDesc . setType ( \"type1\" ) ; org . apache . eagle . metadata . model . ApplicationEntity applicationEntity = new org . apache . eagle . metadata . model . ApplicationEntity ( ) ; applicationEntity . setSite ( siteEntity ) ; applicationEntity . setDescriptor ( applicationDesc ) ; applicationEntity . setMode ( ApplicationEntity . Mode . LOCAL ) ; applicationEntity . setJarPath ( applicationDesc . getJarPath ( ) ) ; java . util . Map < java . lang . String , java . lang . Object > configure = new org . apache . commons . collections . map . HashedMap ( ) ; configure . put ( \"a\" , \"b\" ) ; applicationEntity . setConfiguration ( configure ) ; applicationEntity . setContext ( configure ) ; org . apache . eagle . metadata . model . ApplicationEntity entity = applicationEntityService . create ( applicationEntity ) ; java . lang . String uuid = entity . getUuid ( ) ; org . apache . eagle . metadata . model . ApplicationEntity resultEntity = applicationEntityService . getByUUID ( uuid ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( resultEntity )", "total": "testFindByUUID ( ) { org . apache . eagle . metadata . model . SiteEntity siteEntity = new org . apache . eagle . metadata . model . SiteEntity ( ) ; siteEntity . setSiteId ( \"testsiteid\" ) ; siteEntity . setSiteName ( \"testsitename\" ) ; siteEntity . setDescription ( \"testdesc\" ) ; org . apache . eagle . metadata . model . ApplicationDesc applicationDesc = new org . apache . eagle . metadata . model . ApplicationDesc ( ) ; applicationDesc . setType ( \"type1\" ) ; org . apache . eagle . metadata . model . ApplicationEntity applicationEntity = new org . apache . eagle . metadata . model . ApplicationEntity ( ) ; applicationEntity . setSite ( siteEntity ) ; applicationEntity . setDescriptor ( applicationDesc ) ; applicationEntity . setMode ( ApplicationEntity . Mode . LOCAL ) ; applicationEntity . setJarPath ( applicationDesc . getJarPath ( ) ) ; java . util . Map < java . lang . String , java . lang . Object > configure = new org . apache . commons . collections . map . HashedMap ( ) ; configure . put ( \"a\" , \"b\" ) ; applicationEntity . setConfiguration ( configure ) ; applicationEntity . setContext ( configure ) ; org . apache . eagle . metadata . model . ApplicationEntity entity = applicationEntityService . create ( applicationEntity ) ; java . lang . String uuid = entity . getUuid ( ) ; org . apache . eagle . metadata . model . ApplicationEntity resultEntity = applicationEntityService . getByUUID ( uuid ) ; \"<AssertPlaceHolder>\" ; } getByUUID ( java . lang . String ) { java . util . List < org . apache . eagle . metadata . model . SiteEntity > results ; org . apache . eagle . metadata . model . SiteEntity siteEntity = new org . apache . eagle . metadata . model . SiteEntity ( uuid , \"\" ) ; try { results = queryService . queryWithCond ( org . apache . eagle . metadata . store . jdbc . service . SiteEntityServiceJDBCImpl . selectSqlByUUID , siteEntity , new org . apache . eagle . metadata . store . jdbc . service . orm . SiteEntityToRelation ( ) , new org . apache . eagle . metadata . store . jdbc . service . orm . RelationToSiteEntity ( ) ) ; } catch ( java . sql . SQLException e ) { org . apache . eagle . metadata . store . jdbc . service . SiteEntityServiceJDBCImpl . LOGGER . error ( \"Error<sp>to<sp>getByUUID<sp>SiteEntity:<sp>{}\" , e ) ; throw new org . apache . eagle . metadata . exceptions . EntityNotFoundException ( e ) ; } if ( results . isEmpty ( ) ) { throw new org . apache . eagle . metadata . exceptions . EntityNotFoundException ( ( ( \"getByUUID<sp>\" + uuid ) + \"<sp>Not<sp>Found\" ) ) ; } return results . get ( 0 ) ; }", "answer": "org . junit . Assert . assertNotNull ( resultEntity )"}
{"focal": "launchSynchronization ( java . lang . String , java . lang . String , boolean ) { launchSynchronization ( org . eclipse . egit . ui . view . synchronize . PROJ1 , srcRef , dstRef , includeLocal ) ; }", "testMethod": "shouldReturnNoChanges ( ) { changeFilesInProject ( ) ; launchSynchronization ( org . eclipse . egit . ui . view . synchronize . HEAD , ( ( R_HEADS ) + ( MASTER ) ) , false ) ; org . eclipse . swtbot . swt . finder . SWTBot viewBot = bot . viewById ( ISynchronizeView . VIEW_ID ) . bot ( ) ; @ org . eclipse . egit . ui . view . synchronize . SuppressWarnings ( \"unchecked\" ) org . hamcrest . Matcher matcher = allOf ( widgetOfType ( org . eclipse . swt . widgets . Label . class ) , withRegex ( \"No<sp>changes<sp>in<sp>.*\" ) ) ; @ org . eclipse . egit . ui . view . synchronize . SuppressWarnings ( \"unchecked\" ) org . eclipse . swtbot . swt . finder . widgets . SWTBotLabel l = new org . eclipse . swtbot . swt . finder . widgets . SWTBotLabel ( ( ( org . eclipse . swt . widgets . Label ) ( viewBot . widget ( matcher ) ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( l )", "total": "shouldReturnNoChanges ( ) { changeFilesInProject ( ) ; launchSynchronization ( org . eclipse . egit . ui . view . synchronize . HEAD , ( ( R_HEADS ) + ( MASTER ) ) , false ) ; org . eclipse . swtbot . swt . finder . SWTBot viewBot = bot . viewById ( ISynchronizeView . VIEW_ID ) . bot ( ) ; @ org . eclipse . egit . ui . view . synchronize . SuppressWarnings ( \"unchecked\" ) org . hamcrest . Matcher matcher = allOf ( widgetOfType ( org . eclipse . swt . widgets . Label . class ) , withRegex ( \"No<sp>changes<sp>in<sp>.*\" ) ) ; @ org . eclipse . egit . ui . view . synchronize . SuppressWarnings ( \"unchecked\" ) org . eclipse . swtbot . swt . finder . widgets . SWTBotLabel l = new org . eclipse . swtbot . swt . finder . widgets . SWTBotLabel ( ( ( org . eclipse . swt . widgets . Label ) ( viewBot . widget ( matcher ) ) ) ) ; \"<AssertPlaceHolder>\" ; } launchSynchronization ( java . lang . String , java . lang . String , boolean ) { launchSynchronization ( org . eclipse . egit . ui . view . synchronize . PROJ1 , srcRef , dstRef , includeLocal ) ; }", "answer": "org . junit . Assert . assertNotNull ( l )"}
{"focal": "ofClass ( java . lang . Class ) { try { if ( ! ( intf . isInterface ( ) ) ) throw new java . lang . IllegalArgumentException ( ( \"expected<sp>interface,<sp>got<sp>\" + ( intf . getClass ( ) ) ) ) ; org . openscience . cdk . DynamicFactory . Creator < T > creator = get ( new org . openscience . cdk . DynamicFactory . ClassBasedKey ( intf , org . openscience . cdk . DynamicFactory . EMPTY_CLASS_ARRAY ) ) ; return creator . create ( null ) ; } catch ( java . lang . InstantiationException e ) { throw new java . lang . IllegalArgumentException ( \"unable<sp>to<sp>instantiate<sp>chem<sp>object:<sp>\" , e ) ; } catch ( java . lang . IllegalAccessException e ) { throw new java . lang . IllegalArgumentException ( \"constructor<sp>is<sp>not<sp>accessible:<sp>\" , e ) ; } catch ( java . lang . reflect . InvocationTargetException e ) { throw new java . lang . IllegalArgumentException ( \"invocation<sp>target<sp>exception:<sp>\" , e ) ; } }", "testMethod": "testOfClass_Instantiator ( ) { org . openscience . cdk . DynamicFactory factory = new org . openscience . cdk . DynamicFactory ( 5 ) ; factory . register ( org . openscience . cdk . DynamicFactory . key ( org . openscience . cdk . interfaces . IAtom . class ) , new org . openscience . cdk . DynamicFactory . BasicCreator < org . openscience . cdk . interfaces . IAtom > ( null ) { @ java . lang . Override public org . openscience . cdk . interfaces . IAtom create ( java . lang . Object [ ] objects ) { return mock ( . class ) ; } } ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( factory . ofClass ( org . openscience . cdk . interfaces . IAtom . class ) )", "total": "testOfClass_Instantiator ( ) { org . openscience . cdk . DynamicFactory factory = new org . openscience . cdk . DynamicFactory ( 5 ) ; factory . register ( org . openscience . cdk . DynamicFactory . key ( org . openscience . cdk . interfaces . IAtom . class ) , new org . openscience . cdk . DynamicFactory . BasicCreator < org . openscience . cdk . interfaces . IAtom > ( null ) { @ java . lang . Override public org . openscience . cdk . interfaces . IAtom create ( java . lang . Object [ ] objects ) { return mock ( . class ) ; } } ) ; \"<AssertPlaceHolder>\" ; } ofClass ( java . lang . Class ) { try { if ( ! ( intf . isInterface ( ) ) ) throw new java . lang . IllegalArgumentException ( ( \"expected<sp>interface,<sp>got<sp>\" + ( intf . getClass ( ) ) ) ) ; org . openscience . cdk . DynamicFactory . Creator < T > creator = get ( new org . openscience . cdk . DynamicFactory . ClassBasedKey ( intf , org . openscience . cdk . DynamicFactory . EMPTY_CLASS_ARRAY ) ) ; return creator . create ( null ) ; } catch ( java . lang . InstantiationException e ) { throw new java . lang . IllegalArgumentException ( \"unable<sp>to<sp>instantiate<sp>chem<sp>object:<sp>\" , e ) ; } catch ( java . lang . IllegalAccessException e ) { throw new java . lang . IllegalArgumentException ( \"constructor<sp>is<sp>not<sp>accessible:<sp>\" , e ) ; } catch ( java . lang . reflect . InvocationTargetException e ) { throw new java . lang . IllegalArgumentException ( \"invocation<sp>target<sp>exception:<sp>\" , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( factory . ofClass ( org . openscience . cdk . interfaces . IAtom . class ) )"}
{"focal": "getAparapi ( ) { return aparapi ; }", "testMethod": "testBase ( ) { com . github . neuralnetworks . tensor . ValuesProvider vp = new com . github . neuralnetworks . tensor . ValuesProvider ( com . github . neuralnetworks . util . Environment . getInstance ( ) . getRuntimeConfiguration ( ) . getUseDataSharedMemory ( ) ) ; com . github . neuralnetworks . architecture . RepeaterConnection c = new com . github . neuralnetworks . architecture . RepeaterConnection ( new com . github . neuralnetworks . architecture . Layer ( ) , new com . github . neuralnetworks . architecture . Layer ( ) , 20 ) ; vp . add ( c . getInputLayer ( ) , 2 , 5 , 2 , 2 ) ; vp . add ( c . getOutputLayer ( ) , 2 , 5 , 2 , 2 ) ; com . github . neuralnetworks . tensor . Tensor t = vp . get ( c . getInputLayer ( ) ) ; t . set ( 1 , 0 , 0 , 0 , 0 ) ; t . set ( 2 , 0 , 0 , 0 , 1 ) ; t . set ( 3 , 0 , 0 , 1 , 0 ) ; t . set ( 4 , 0 , 0 , 1 , 1 ) ; t . set ( 5 , 0 , 1 , 0 , 0 ) ; t . set ( 6 , 0 , 1 , 0 , 1 ) ; t . set ( 7 , 0 , 1 , 1 , 0 ) ; t . set ( 8 , 0 , 1 , 1 , 1 ) ; t . set ( 9 , 0 , 2 , 0 , 0 ) ; t . set ( 10 , 0 , 2 , 0 , 1 ) ; t . set ( 11 , 0 , 2 , 1 , 0 ) ; t . set ( 12 , 0 , 2 , 1 , 1 ) ; t . set ( 13 , 0 , 3 , 0 , 0 ) ; t . set ( 14 , 0 , 3 , 0 , 1 ) ; t . set ( 15 , 0 , 3 , 1 , 0 ) ; t . set ( 16 , 0 , 3 , 1 , 1 ) ; t . set ( 17 , 0 , 4 , 0 , 0 ) ; t . set ( 18 , 0 , 4 , 0 , 1 ) ; t . set ( 19 , 0 , 4 , 1 , 0 ) ; t . set ( 20 , 0 , 4 , 1 , 1 ) ; t . set ( 1 , 1 , 0 , 0 , 0 ) ; t . set ( 2 , 1 , 0 , 0 , 1 ) ; t . set ( 3 , 1 , 0 , 1 , 0 ) ; t . set ( 4 , 1 , 0 , 1 , 1 ) ; t . set ( 5 , 1 , 1 , 0 , 0 ) ; t . set ( 6 , 1 , 1 , 0 , 1 ) ; t . set ( 7 , 1 , 1 , 1 , 0 ) ; t . set ( 8 , 1 , 1 , 1 , 1 ) ; t . set ( 9 , 1 , 2 , 0 , 0 ) ; t . set ( 10 , 1 , 2 , 0 , 1 ) ; t . set ( 11 , 1 , 2 , 1 , 0 ) ; t . set ( 12 , 1 , 2 , 1 , 1 ) ; t . set ( 13 , 1 , 3 , 0 , 0 ) ; t . set ( 14 , 1 , 3 , 0 , 1 ) ; t . set ( 15 , 1 , 3 , 1 , 0 ) ; t . set ( 16 , 1 , 3 , 1 , 1 ) ; t . set ( 17 , 1 , 4 , 0 , 0 ) ; t . set ( 18 , 1 , 4 , 0 , 1 ) ; t . set ( 19 , 1 , 4 , 1 , 0 ) ; t . set ( 20 , 1 , 4 , 1 , 1 ) ; configureGlobalRuntimeEnvironment ( Runtime . OPENCL ) ; com . github . neuralnetworks . calculation . ConnectionCalculator cc = com . github . neuralnetworks . calculation . operations . OperationsFactory . lrnConnectionCalculator ( 2 , 5 , 0.01F , 1.0F ) ; cc . calculate ( java . util . Arrays . asList ( new com . github . neuralnetworks . architecture . Connections [ ] { c } ) , vp , c . getOutputLayer ( ) ) ; if ( cc instanceof com . github . neuralnetworks . calculation . operations . opencl . kernels . OpenCLLRN ) { java . lang . String kernelOptions = ( ( com . github . neuralnetworks . calculation . operations . opencl . kernels . OpenCLLRN ) ( cc ) ) . kernelOptions ( 1 ) ; System . out . println ( ( \"OpenCL<sp>:<sp>\" + kernelOptions ) ) ; com . github . neuralnetworks . calculation . operations . aparapi . LRN . LRNKernel lrnKernel = ( ( com . github . neuralnetworks . calculation . operations . opencl . kernels . OpenCLLRN ) ( cc ) ) . getAparapi ( ) ; \"<AssertPlaceHolder>\" ; ( ( com . github . neuralnetworks . calculation . operations . opencl . kernels . OpenCLLRN ) ( cc ) ) . destroyKernel ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( lrnKernel )", "total": "testBase ( ) { com . github . neuralnetworks . tensor . ValuesProvider vp = new com . github . neuralnetworks . tensor . ValuesProvider ( com . github . neuralnetworks . util . Environment . getInstance ( ) . getRuntimeConfiguration ( ) . getUseDataSharedMemory ( ) ) ; com . github . neuralnetworks . architecture . RepeaterConnection c = new com . github . neuralnetworks . architecture . RepeaterConnection ( new com . github . neuralnetworks . architecture . Layer ( ) , new com . github . neuralnetworks . architecture . Layer ( ) , 20 ) ; vp . add ( c . getInputLayer ( ) , 2 , 5 , 2 , 2 ) ; vp . add ( c . getOutputLayer ( ) , 2 , 5 , 2 , 2 ) ; com . github . neuralnetworks . tensor . Tensor t = vp . get ( c . getInputLayer ( ) ) ; t . set ( 1 , 0 , 0 , 0 , 0 ) ; t . set ( 2 , 0 , 0 , 0 , 1 ) ; t . set ( 3 , 0 , 0 , 1 , 0 ) ; t . set ( 4 , 0 , 0 , 1 , 1 ) ; t . set ( 5 , 0 , 1 , 0 , 0 ) ; t . set ( 6 , 0 , 1 , 0 , 1 ) ; t . set ( 7 , 0 , 1 , 1 , 0 ) ; t . set ( 8 , 0 , 1 , 1 , 1 ) ; t . set ( 9 , 0 , 2 , 0 , 0 ) ; t . set ( 10 , 0 , 2 , 0 , 1 ) ; t . set ( 11 , 0 , 2 , 1 , 0 ) ; t . set ( 12 , 0 , 2 , 1 , 1 ) ; t . set ( 13 , 0 , 3 , 0 , 0 ) ; t . set ( 14 , 0 , 3 , 0 , 1 ) ; t . set ( 15 , 0 , 3 , 1 , 0 ) ; t . set ( 16 , 0 , 3 , 1 , 1 ) ; t . set ( 17 , 0 , 4 , 0 , 0 ) ; t . set ( 18 , 0 , 4 , 0 , 1 ) ; t . set ( 19 , 0 , 4 , 1 , 0 ) ; t . set ( 20 , 0 , 4 , 1 , 1 ) ; t . set ( 1 , 1 , 0 , 0 , 0 ) ; t . set ( 2 , 1 , 0 , 0 , 1 ) ; t . set ( 3 , 1 , 0 , 1 , 0 ) ; t . set ( 4 , 1 , 0 , 1 , 1 ) ; t . set ( 5 , 1 , 1 , 0 , 0 ) ; t . set ( 6 , 1 , 1 , 0 , 1 ) ; t . set ( 7 , 1 , 1 , 1 , 0 ) ; t . set ( 8 , 1 , 1 , 1 , 1 ) ; t . set ( 9 , 1 , 2 , 0 , 0 ) ; t . set ( 10 , 1 , 2 , 0 , 1 ) ; t . set ( 11 , 1 , 2 , 1 , 0 ) ; t . set ( 12 , 1 , 2 , 1 , 1 ) ; t . set ( 13 , 1 , 3 , 0 , 0 ) ; t . set ( 14 , 1 , 3 , 0 , 1 ) ; t . set ( 15 , 1 , 3 , 1 , 0 ) ; t . set ( 16 , 1 , 3 , 1 , 1 ) ; t . set ( 17 , 1 , 4 , 0 , 0 ) ; t . set ( 18 , 1 , 4 , 0 , 1 ) ; t . set ( 19 , 1 , 4 , 1 , 0 ) ; t . set ( 20 , 1 , 4 , 1 , 1 ) ; configureGlobalRuntimeEnvironment ( Runtime . OPENCL ) ; com . github . neuralnetworks . calculation . ConnectionCalculator cc = com . github . neuralnetworks . calculation . operations . OperationsFactory . lrnConnectionCalculator ( 2 , 5 , 0.01F , 1.0F ) ; cc . calculate ( java . util . Arrays . asList ( new com . github . neuralnetworks . architecture . Connections [ ] { c } ) , vp , c . getOutputLayer ( ) ) ; if ( cc instanceof com . github . neuralnetworks . calculation . operations . opencl . kernels . OpenCLLRN ) { java . lang . String kernelOptions = ( ( com . github . neuralnetworks . calculation . operations . opencl . kernels . OpenCLLRN ) ( cc ) ) . kernelOptions ( 1 ) ; System . out . println ( ( \"OpenCL<sp>:<sp>\" + kernelOptions ) ) ; com . github . neuralnetworks . calculation . operations . aparapi . LRN . LRNKernel lrnKernel = ( ( com . github . neuralnetworks . calculation . operations . opencl . kernels . OpenCLLRN ) ( cc ) ) . getAparapi ( ) ; \"<AssertPlaceHolder>\" ; ( ( com . github . neuralnetworks . calculation . operations . opencl . kernels . OpenCLLRN ) ( cc ) ) . destroyKernel ( ) ; } } getAparapi ( ) { return aparapi ; }", "answer": "org . junit . Assert . assertNotNull ( lrnKernel )"}
{"focal": "createComplexJobTriggerProxy ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ComplexJobTriggerProxy ) { return new javax . xml . bind . JAXBElement < org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ComplexJobTriggerProxy > ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ObjectFactory . _ComplexJobTriggerProxy_QNAME , org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ComplexJobTriggerProxy . class , null , value ) ; }", "testMethod": "testCreateComplexJobTriggerProxy1 ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( factory . createComplexJobTriggerProxy ( mock ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ComplexJobTriggerProxy . class ) ) )", "total": "testCreateComplexJobTriggerProxy1 ( ) { \"<AssertPlaceHolder>\" ; } createComplexJobTriggerProxy ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ComplexJobTriggerProxy ) { return new javax . xml . bind . JAXBElement < org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ComplexJobTriggerProxy > ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ObjectFactory . _ComplexJobTriggerProxy_QNAME , org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ComplexJobTriggerProxy . class , null , value ) ; }", "answer": "org . junit . Assert . assertNotNull ( factory . createComplexJobTriggerProxy ( mock ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ComplexJobTriggerProxy . class ) ) )"}
{"focal": "limitedValueWidget ( ) { return new org . drools . workbench . screens . guided . dtable . client . wizard . column . plugins . commons . LimitedWidgetFactory ( this ) . create ( ) ; }", "testMethod": "testLimitedValueWidget ( ) { final com . google . gwt . user . client . ui . IsWidget limitedValueWidget = plugin . limitedValueWidget ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( limitedValueWidget )", "total": "testLimitedValueWidget ( ) { final com . google . gwt . user . client . ui . IsWidget limitedValueWidget = plugin . limitedValueWidget ( ) ; \"<AssertPlaceHolder>\" ; } limitedValueWidget ( ) { return new org . drools . workbench . screens . guided . dtable . client . wizard . column . plugins . commons . LimitedWidgetFactory ( this ) . create ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( limitedValueWidget )"}
{"focal": "newCollectionProxy ( java . lang . Class , java . lang . Class , java . util . Comparator , boolean ) { type = toProxyableCollectionType ( type ) ; org . apache . openjpa . util . ProxyCollection proxy = getFactoryProxyCollection ( type ) ; return proxy . newInstance ( ( _assertType ? elementType : null ) , compare , _trackChanges , autoOff ) ; }", "testMethod": "testCollectionInterfaceProxy ( ) { org . apache . openjpa . util . Proxy coll = _mgr . newCollectionProxy ( java . util . Collection . class , null , null , true ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( coll )", "total": "testCollectionInterfaceProxy ( ) { org . apache . openjpa . util . Proxy coll = _mgr . newCollectionProxy ( java . util . Collection . class , null , null , true ) ; \"<AssertPlaceHolder>\" ; } newCollectionProxy ( java . lang . Class , java . lang . Class , java . util . Comparator , boolean ) { type = toProxyableCollectionType ( type ) ; org . apache . openjpa . util . ProxyCollection proxy = getFactoryProxyCollection ( type ) ; return proxy . newInstance ( ( _assertType ? elementType : null ) , compare , _trackChanges , autoOff ) ; }", "answer": "org . junit . Assert . assertNotNull ( coll )"}
{"focal": "get ( java . lang . String , com . fujitsu . dc . core . model . Cell ) { if ( ! ( com . fujitsu . dc . core . DcCoreConfig . isBoxCacheEnabled ( ) ) ) { return null ; } @ com . fujitsu . dc . core . model . impl . es . cache . SuppressWarnings ( \"rawtypes\" ) java . util . HashMap obj = null ; try { obj = com . fujitsu . dc . core . model . impl . es . cache . BoxCache . getMcdClient ( ) . get ( com . fujitsu . dc . core . model . impl . es . cache . BoxCache . cacheKey ( boxName , cell ) , java . util . HashMap . class ) ; } catch ( com . fujitsu . dc . core . utils . MemcachedClient . MemcachedClientException e ) { com . fujitsu . dc . core . model . impl . es . cache . BoxCache . log . info ( \"Failed<sp>to<sp>get<sp>BoxCache.\" ) ; } if ( obj == null ) { return null ; } return new com . fujitsu . dc . core . model . Box ( cell , ( ( java . lang . String ) ( obj . get ( \"name\" ) ) ) , ( ( java . lang . String ) ( obj . get ( \"schema\" ) ) ) , ( ( java . lang . String ) ( obj . get ( \"id\" ) ) ) , ( ( java . lang . Long ) ( obj . get ( \"published\" ) ) ) ) ; }", "testMethod": "Memcached ( ) { java . lang . String boxName = \"boxCacheTestBox\" ; java . util . Map < java . lang . String , java . lang . Object > box = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; box . put ( \"name\" , boxName ) ; box . put ( \"schema\" , null ) ; box . put ( \"id\" , \"boxId\" ) ; box . put ( \"published\" , 1380604545159L ) ; java . lang . reflect . Constructor < com . fujitsu . dc . core . utils . MemcachedClient > c = com . fujitsu . dc . core . utils . MemcachedClient . class . getDeclaredConstructor ( ) ; c . setAccessible ( true ) ; com . fujitsu . dc . core . utils . MemcachedClient mockMemcachedClient = org . mockito . Mockito . spy ( c . newInstance ( ) ) ; org . mockito . Mockito . doReturn ( box ) . when ( mockMemcachedClient ) . get ( org . mockito . Mockito . anyString ( ) , org . mockito . Mockito . any ( java . lang . Class . class ) ) ; org . powermock . api . mockito . PowerMockito . spy ( com . fujitsu . dc . core . model . impl . es . cache . BoxCache . class ) ; org . powermock . api . mockito . PowerMockito . when ( com . fujitsu . dc . core . model . impl . es . cache . BoxCache . class , \"getMcdClient\" ) . thenReturn ( mockMemcachedClient ) ; org . powermock . api . mockito . PowerMockito . spy ( com . fujitsu . dc . core . DcCoreConfig . class ) ; org . powermock . api . mockito . PowerMockito . when ( com . fujitsu . dc . core . DcCoreConfig . class , \"isBoxCacheEnabled\" ) . thenReturn ( true ) ; com . fujitsu . dc . core . model . impl . es . CellEsImpl cell = new com . fujitsu . dc . core . model . impl . es . CellEsImpl ( ) ; cell . setId ( \"CellId\" ) ; com . fujitsu . dc . core . model . Box cache = com . fujitsu . dc . core . model . impl . es . cache . BoxCache . get ( boxName , cell ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( cache )", "total": "Memcached ( ) { java . lang . String boxName = \"boxCacheTestBox\" ; java . util . Map < java . lang . String , java . lang . Object > box = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; box . put ( \"name\" , boxName ) ; box . put ( \"schema\" , null ) ; box . put ( \"id\" , \"boxId\" ) ; box . put ( \"published\" , 1380604545159L ) ; java . lang . reflect . Constructor < com . fujitsu . dc . core . utils . MemcachedClient > c = com . fujitsu . dc . core . utils . MemcachedClient . class . getDeclaredConstructor ( ) ; c . setAccessible ( true ) ; com . fujitsu . dc . core . utils . MemcachedClient mockMemcachedClient = org . mockito . Mockito . spy ( c . newInstance ( ) ) ; org . mockito . Mockito . doReturn ( box ) . when ( mockMemcachedClient ) . get ( org . mockito . Mockito . anyString ( ) , org . mockito . Mockito . any ( java . lang . Class . class ) ) ; org . powermock . api . mockito . PowerMockito . spy ( com . fujitsu . dc . core . model . impl . es . cache . BoxCache . class ) ; org . powermock . api . mockito . PowerMockito . when ( com . fujitsu . dc . core . model . impl . es . cache . BoxCache . class , \"getMcdClient\" ) . thenReturn ( mockMemcachedClient ) ; org . powermock . api . mockito . PowerMockito . spy ( com . fujitsu . dc . core . DcCoreConfig . class ) ; org . powermock . api . mockito . PowerMockito . when ( com . fujitsu . dc . core . DcCoreConfig . class , \"isBoxCacheEnabled\" ) . thenReturn ( true ) ; com . fujitsu . dc . core . model . impl . es . CellEsImpl cell = new com . fujitsu . dc . core . model . impl . es . CellEsImpl ( ) ; cell . setId ( \"CellId\" ) ; com . fujitsu . dc . core . model . Box cache = com . fujitsu . dc . core . model . impl . es . cache . BoxCache . get ( boxName , cell ) ; \"<AssertPlaceHolder>\" ; } get ( java . lang . String , com . fujitsu . dc . core . model . Cell ) { if ( ! ( com . fujitsu . dc . core . DcCoreConfig . isBoxCacheEnabled ( ) ) ) { return null ; } @ com . fujitsu . dc . core . model . impl . es . cache . SuppressWarnings ( \"rawtypes\" ) java . util . HashMap obj = null ; try { obj = com . fujitsu . dc . core . model . impl . es . cache . BoxCache . getMcdClient ( ) . get ( com . fujitsu . dc . core . model . impl . es . cache . BoxCache . cacheKey ( boxName , cell ) , java . util . HashMap . class ) ; } catch ( com . fujitsu . dc . core . utils . MemcachedClient . MemcachedClientException e ) { com . fujitsu . dc . core . model . impl . es . cache . BoxCache . log . info ( \"Failed<sp>to<sp>get<sp>BoxCache.\" ) ; } if ( obj == null ) { return null ; } return new com . fujitsu . dc . core . model . Box ( cell , ( ( java . lang . String ) ( obj . get ( \"name\" ) ) ) , ( ( java . lang . String ) ( obj . get ( \"schema\" ) ) ) , ( ( java . lang . String ) ( obj . get ( \"id\" ) ) ) , ( ( java . lang . Long ) ( obj . get ( \"published\" ) ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( cache )"}
{"focal": "maakActie ( nl . bzk . brp . dataaccess . repository . SoortActie ) { @ nl . bzk . brp . dataaccess . repository . SuppressWarnings ( \"serial\" ) nl . bzk . brp . dataaccess . repository . ActieModel actie = new nl . bzk . brp . dataaccess . repository . ActieModel ( new nl . bzk . brp . dataaccess . repository . ActieBasis ( ) { @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . Verdrag getVerdrag ( ) { return null ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . DatumTijd getTijdstipRegistratie ( ) { return new nl . bzk . brp . dataaccess . repository . DatumTijd ( new java . sql . Timestamp ( new nl . bzk . brp . dataaccess . repository . Date ( ( ( java . lang . System . currentTimeMillis ( ) ) - 1 ) ) . getTime ( ) ) ) ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . DatumTijd getTijdstipOntlening ( ) { return null ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . SoortActie getSoort ( ) { return soortActie ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . Partij getPartij ( ) { return referentieDataRepository . vindGemeenteOpCode ( new nl . bzk . brp . dataaccess . repository . Gemeentecode ( ( ( short ) ( 363 ) ) ) ) ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . Ontleningstoelichting getOntleningstoelichting ( ) { return null ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . Datum getDatumEindeGeldigheid ( ) { return null ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . Datum getDatumAanvangGeldigheid ( ) { return null ; } } ) ; return actieRepository . save ( actie ) ; }", "testMethod": "testWerkbijOverlijdenMetNullOverlijden ( ) { nl . bzk . brp . model . objecttype . operationeel . ActieModel actie = maakActie ( SoortActie . AANGIFTE_OVERLIJDEN ) ; nl . bzk . brp . model . objecttype . operationeel . PersoonModel persoon = em . find ( nl . bzk . brp . model . objecttype . operationeel . PersoonModel . class , 1 ) ; \"<AssertPlaceHolder>\" ; try { persoonRepository . werkbijOverlijden ( persoon , null , null , actie , new nl . bzk . brp . model . attribuuttype . Datum ( 20120708 ) ) ; } catch ( org . springframework . dao . InvalidDataAccessApiUsageException ex ) { throw ex . getCause ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( persoon )", "total": "testWerkbijOverlijdenMetNullOverlijden ( ) { nl . bzk . brp . model . objecttype . operationeel . ActieModel actie = maakActie ( SoortActie . AANGIFTE_OVERLIJDEN ) ; nl . bzk . brp . model . objecttype . operationeel . PersoonModel persoon = em . find ( nl . bzk . brp . model . objecttype . operationeel . PersoonModel . class , 1 ) ; \"<AssertPlaceHolder>\" ; try { persoonRepository . werkbijOverlijden ( persoon , null , null , actie , new nl . bzk . brp . model . attribuuttype . Datum ( 20120708 ) ) ; } catch ( org . springframework . dao . InvalidDataAccessApiUsageException ex ) { throw ex . getCause ( ) ; } } maakActie ( nl . bzk . brp . dataaccess . repository . SoortActie ) { @ nl . bzk . brp . dataaccess . repository . SuppressWarnings ( \"serial\" ) nl . bzk . brp . dataaccess . repository . ActieModel actie = new nl . bzk . brp . dataaccess . repository . ActieModel ( new nl . bzk . brp . dataaccess . repository . ActieBasis ( ) { @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . Verdrag getVerdrag ( ) { return null ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . DatumTijd getTijdstipRegistratie ( ) { return new nl . bzk . brp . dataaccess . repository . DatumTijd ( new java . sql . Timestamp ( new nl . bzk . brp . dataaccess . repository . Date ( ( ( java . lang . System . currentTimeMillis ( ) ) - 1 ) ) . getTime ( ) ) ) ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . DatumTijd getTijdstipOntlening ( ) { return null ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . SoortActie getSoort ( ) { return soortActie ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . Partij getPartij ( ) { return referentieDataRepository . vindGemeenteOpCode ( new nl . bzk . brp . dataaccess . repository . Gemeentecode ( ( ( short ) ( 363 ) ) ) ) ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . Ontleningstoelichting getOntleningstoelichting ( ) { return null ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . Datum getDatumEindeGeldigheid ( ) { return null ; } @ nl . bzk . brp . dataaccess . repository . Override public nl . bzk . brp . dataaccess . repository . Datum getDatumAanvangGeldigheid ( ) { return null ; } } ) ; return actieRepository . save ( actie ) ; }", "answer": "org . junit . Assert . assertNotNull ( persoon )"}
{"focal": "parse ( javax . xml . stream . XMLEventReader ) { while ( xmlEventReader . hasNext ( ) ) { javax . xml . stream . events . XMLEvent xmlEvent = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . peek ( xmlEventReader ) ; if ( xmlEvent instanceof javax . xml . stream . events . StartElement ) { javax . xml . stream . events . StartElement startElement = ( ( javax . xml . stream . events . StartElement ) ( xmlEvent ) ) ; java . lang . String elementName = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getStartElementName ( startElement ) ; if ( elementName . equalsIgnoreCase ( WSPolicyConstants . APPLIES_TO ) ) { startElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextStartElement ( xmlEventReader ) ; org . picketlink . identity . federation . ws . policy . AppliesTo appliesTo = new org . picketlink . identity . federation . ws . policy . AppliesTo ( ) ; startElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . peekNextStartElement ( xmlEventReader ) ; javax . xml . namespace . QName qname = startElement . getName ( ) ; org . picketlink . identity . federation . core . parsers . ParserNamespaceSupport parser = org . picketlink . identity . federation . core . parsers . ParserController . get ( qname ) ; if ( parser == null ) throw new java . lang . RuntimeException ( ( ( org . picketlink . identity . federation . core . ErrorCodes . UNKNOWN_TAG ) + qname ) ) ; java . lang . Object parsedObject = parser . parse ( xmlEventReader ) ; appliesTo . addAny ( parsedObject ) ; javax . xml . stream . events . EndElement endElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextEndElement ( xmlEventReader ) ; org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . validate ( endElement , WSPolicyConstants . APPLIES_TO ) ; return appliesTo ; } } else { org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextEvent ( xmlEventReader ) ; } } throw logger . parserFailed ( WSTrustConstants . WSP_NS ) ; }", "testMethod": "parseRSTWithWSP_15 ( ) { java . lang . ClassLoader tcl = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) ; java . io . InputStream configStream = tcl . getResourceAsStream ( \"parser/wst/wst-rst-wsp15.xml\" ) ; org . picketlink . identity . federation . core . parsers . wst . WSTrustParser parser = new org . picketlink . identity . federation . core . parsers . wst . WSTrustParser ( ) ; org . picketlink . identity . federation . core . wstrust . wrappers . RequestSecurityToken requestToken = ( ( org . picketlink . identity . federation . core . wstrust . wrappers . RequestSecurityToken ) ( parser . parse ( configStream ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( requestToken )", "total": "parseRSTWithWSP_15 ( ) { java . lang . ClassLoader tcl = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) ; java . io . InputStream configStream = tcl . getResourceAsStream ( \"parser/wst/wst-rst-wsp15.xml\" ) ; org . picketlink . identity . federation . core . parsers . wst . WSTrustParser parser = new org . picketlink . identity . federation . core . parsers . wst . WSTrustParser ( ) ; org . picketlink . identity . federation . core . wstrust . wrappers . RequestSecurityToken requestToken = ( ( org . picketlink . identity . federation . core . wstrust . wrappers . RequestSecurityToken ) ( parser . parse ( configStream ) ) ) ; \"<AssertPlaceHolder>\" ; } parse ( javax . xml . stream . XMLEventReader ) { while ( xmlEventReader . hasNext ( ) ) { javax . xml . stream . events . XMLEvent xmlEvent = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . peek ( xmlEventReader ) ; if ( xmlEvent instanceof javax . xml . stream . events . StartElement ) { javax . xml . stream . events . StartElement startElement = ( ( javax . xml . stream . events . StartElement ) ( xmlEvent ) ) ; java . lang . String elementName = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getStartElementName ( startElement ) ; if ( elementName . equalsIgnoreCase ( WSPolicyConstants . APPLIES_TO ) ) { startElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextStartElement ( xmlEventReader ) ; org . picketlink . identity . federation . ws . policy . AppliesTo appliesTo = new org . picketlink . identity . federation . ws . policy . AppliesTo ( ) ; startElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . peekNextStartElement ( xmlEventReader ) ; javax . xml . namespace . QName qname = startElement . getName ( ) ; org . picketlink . identity . federation . core . parsers . ParserNamespaceSupport parser = org . picketlink . identity . federation . core . parsers . ParserController . get ( qname ) ; if ( parser == null ) throw new java . lang . RuntimeException ( ( ( org . picketlink . identity . federation . core . ErrorCodes . UNKNOWN_TAG ) + qname ) ) ; java . lang . Object parsedObject = parser . parse ( xmlEventReader ) ; appliesTo . addAny ( parsedObject ) ; javax . xml . stream . events . EndElement endElement = org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextEndElement ( xmlEventReader ) ; org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . validate ( endElement , WSPolicyConstants . APPLIES_TO ) ; return appliesTo ; } } else { org . picketlink . identity . federation . core . parsers . util . StaxParserUtil . getNextEvent ( xmlEventReader ) ; } } throw logger . parserFailed ( WSTrustConstants . WSP_NS ) ; }", "answer": "org . junit . Assert . assertNotNull ( requestToken )"}
{"focal": "exists ( ) { elegit . RepoHelper . logger . debug ( \"Checked<sp>if<sp>repo<sp>still<sp>exists\" ) ; return ( localPath . toFile ( ) . exists ( ) ) && ( ( localPath . toFile ( ) . list ( ( dir , name ) -> name . equals ( \".git\" ) ) . length ) > 0 ) ; }", "testMethod": "cloneThenPushTestWithoutAuthentication ( ) { java . io . File authData = new java . io . File ( ( ( testFileLocation ) + \"httpUsernamePassword.txt\" ) ) ; if ( ( ! ( authData . exists ( ) ) ) && ( looseTesting ) ) return ; java . util . Scanner scanner = new java . util . Scanner ( authData ) ; java . lang . String ignoreURL = scanner . next ( ) ; java . lang . String username = scanner . next ( ) ; java . lang . String password = scanner . next ( ) ; org . eclipse . jgit . transport . UsernamePasswordCredentialsProvider credentials = new org . eclipse . jgit . transport . UsernamePasswordCredentialsProvider ( username , password ) ; java . lang . String remoteURL = \"https://github.com/TheElegitTeam/PushPullTests.git\" ; java . nio . file . Path repoPathPush = directoryPath . resolve ( \"clonepush\" ) ; elegit . ClonedRepoHelper helperPush = new elegit . ClonedRepoHelper ( repoPathPush , remoteURL , credentials ) ; \"<AssertPlaceHolder>\" ; helperPush . obtainRepository ( remoteURL ) ; java . nio . file . Path readmePath = repoPathPush . resolve ( \"README.md\" ) ; System . out . println ( readmePath ) ; java . lang . String timestamp = ( new java . util . Date ( ) . toString ( ) ) + \"\\n\" ; java . nio . file . Files . write ( readmePath , timestamp . getBytes ( ) , StandardOpenOption . APPEND ) ; helperPush . addFilePathTest ( readmePath ) ; helperPush . commit ( \"added<sp>a<sp>character\" ) ; org . eclipse . jgit . api . PushCommand push = helperPush . prepareToPushAll ( ) ; helperPush . pushAll ( push ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( helperPush )", "total": "cloneThenPushTestWithoutAuthentication ( ) { java . io . File authData = new java . io . File ( ( ( testFileLocation ) + \"httpUsernamePassword.txt\" ) ) ; if ( ( ! ( authData . exists ( ) ) ) && ( looseTesting ) ) return ; java . util . Scanner scanner = new java . util . Scanner ( authData ) ; java . lang . String ignoreURL = scanner . next ( ) ; java . lang . String username = scanner . next ( ) ; java . lang . String password = scanner . next ( ) ; org . eclipse . jgit . transport . UsernamePasswordCredentialsProvider credentials = new org . eclipse . jgit . transport . UsernamePasswordCredentialsProvider ( username , password ) ; java . lang . String remoteURL = \"https://github.com/TheElegitTeam/PushPullTests.git\" ; java . nio . file . Path repoPathPush = directoryPath . resolve ( \"clonepush\" ) ; elegit . ClonedRepoHelper helperPush = new elegit . ClonedRepoHelper ( repoPathPush , remoteURL , credentials ) ; \"<AssertPlaceHolder>\" ; helperPush . obtainRepository ( remoteURL ) ; java . nio . file . Path readmePath = repoPathPush . resolve ( \"README.md\" ) ; System . out . println ( readmePath ) ; java . lang . String timestamp = ( new java . util . Date ( ) . toString ( ) ) + \"\\n\" ; java . nio . file . Files . write ( readmePath , timestamp . getBytes ( ) , StandardOpenOption . APPEND ) ; helperPush . addFilePathTest ( readmePath ) ; helperPush . commit ( \"added<sp>a<sp>character\" ) ; org . eclipse . jgit . api . PushCommand push = helperPush . prepareToPushAll ( ) ; helperPush . pushAll ( push ) ; } exists ( ) { elegit . RepoHelper . logger . debug ( \"Checked<sp>if<sp>repo<sp>still<sp>exists\" ) ; return ( localPath . toFile ( ) . exists ( ) ) && ( ( localPath . toFile ( ) . list ( ( dir , name ) -> name . equals ( \".git\" ) ) . length ) > 0 ) ; }", "answer": "org . junit . Assert . assertNotNull ( helperPush )"}
{"focal": "searchBusinessObjectData ( org . finra . herd . model . api . xml . BusinessObjectDataSearchRequest , java . lang . Integer ) { org . finra . herd . tools . retention . exporter . RetentionExpirationExporterWebClient . LOGGER . info ( \"Sending<sp>business<sp>object<sp>data<sp>search<sp>request<sp>to<sp>the<sp>registration<sp>server...\" ) ; org . apache . http . client . utils . URIBuilder uriBuilder = new org . apache . http . client . utils . URIBuilder ( ) . setScheme ( getUriScheme ( ) ) . setHost ( regServerAccessParamsDto . getRegServerHost ( ) ) . setPort ( regServerAccessParamsDto . getRegServerPort ( ) ) . setPath ( ( ( HERD_APP_REST_URI_PREFIX ) + \"/businessObjectData/search\" ) ) . setParameter ( \"pageNum\" , pageNum . toString ( ) ) ; java . net . URI uri = uriBuilder . build ( ) ; javax . xml . bind . JAXBContext requestContext = javax . xml . bind . JAXBContext . newInstance ( org . finra . herd . model . api . xml . BusinessObjectDataSearchRequest . class ) ; javax . xml . bind . Marshaller requestMarshaller = requestContext . createMarshaller ( ) ; requestMarshaller . setProperty ( Marshaller . JAXB_ENCODING , StandardCharsets . UTF_8 . name ( ) ) ; requestMarshaller . setProperty ( Marshaller . JAXB_FORMATTED_OUTPUT , true ) ; java . io . StringWriter stringWriter = new java . io . StringWriter ( ) ; requestMarshaller . marshal ( businessObjectDataSearchRequest , stringWriter ) ; try ( org . apache . http . impl . client . CloseableHttpClient client = httpClientHelper . createHttpClient ( regServerAccessParamsDto . isTrustSelfSignedCertificate ( ) , regServerAccessParamsDto . isDisableHostnameVerification ( ) ) ) { org . apache . http . client . methods . HttpPost request = new org . apache . http . client . methods . HttpPost ( uri ) ; request . addHeader ( \"Content-Type\" , org . finra . herd . tools . retention . exporter . DEFAULT_CONTENT_TYPE ) ; request . addHeader ( \"Accepts\" , org . finra . herd . tools . retention . exporter . DEFAULT_ACCEPT ) ; if ( regServerAccessParamsDto . isUseSsl ( ) ) { request . addHeader ( getAuthorizationHeader ( ) ) ; } request . setEntity ( new org . apache . http . entity . StringEntity ( stringWriter . toString ( ) ) ) ; org . finra . herd . tools . retention . exporter . RetentionExpirationExporterWebClient . LOGGER . info ( java . lang . String . format ( \"<sp>HTTP<sp>POST<sp>URI:<sp>%s\" , request . getURI ( ) . toString ( ) ) ) ; org . finra . herd . tools . retention . exporter . RetentionExpirationExporterWebClient . LOGGER . info ( java . lang . String . format ( \"<sp>HTTP<sp>POST<sp>Headers:<sp>%s\" , java . util . Arrays . toString ( request . getAllHeaders ( ) ) ) ) ; org . finra . herd . tools . retention . exporter . RetentionExpirationExporterWebClient . LOGGER . info ( java . lang . String . format ( \"<sp>HTTP<sp>POST<sp>Entity<sp>Content:%n%s\" , stringWriter . toString ( ) ) ) ; org . finra . herd . model . api . xml . BusinessObjectDataSearchResult businessObjectDataSearchResult = getBusinessObjectDataSearchResult ( httpClientOperations . execute ( client , request ) ) ; org . finra . herd . tools . retention . exporter . RetentionExpirationExporterWebClient . LOGGER . info ( \"Successfully<sp>received<sp>search<sp>business<sp>object<sp>data<sp>response<sp>from<sp>the<sp>registration<sp>server.\" ) ; return businessObjectDataSearchResult ; } }", "testMethod": "testSearchBusinessObjectDataUseSsl ( ) { retentionExpirationExporterWebClient . getRegServerAccessParamsDto ( ) . setUseSsl ( true ) ; org . finra . herd . model . api . xml . BusinessObjectDataSearchResult result = retentionExpirationExporterWebClient . searchBusinessObjectData ( new org . finra . herd . model . api . xml . BusinessObjectDataSearchRequest ( ) , 1 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testSearchBusinessObjectDataUseSsl ( ) { retentionExpirationExporterWebClient . getRegServerAccessParamsDto ( ) . setUseSsl ( true ) ; org . finra . herd . model . api . xml . BusinessObjectDataSearchResult result = retentionExpirationExporterWebClient . searchBusinessObjectData ( new org . finra . herd . model . api . xml . BusinessObjectDataSearchRequest ( ) , 1 ) ; \"<AssertPlaceHolder>\" ; } searchBusinessObjectData ( org . finra . herd . model . api . xml . BusinessObjectDataSearchRequest , java . lang . Integer ) { org . finra . herd . tools . retention . exporter . RetentionExpirationExporterWebClient . LOGGER . info ( \"Sending<sp>business<sp>object<sp>data<sp>search<sp>request<sp>to<sp>the<sp>registration<sp>server...\" ) ; org . apache . http . client . utils . URIBuilder uriBuilder = new org . apache . http . client . utils . URIBuilder ( ) . setScheme ( getUriScheme ( ) ) . setHost ( regServerAccessParamsDto . getRegServerHost ( ) ) . setPort ( regServerAccessParamsDto . getRegServerPort ( ) ) . setPath ( ( ( HERD_APP_REST_URI_PREFIX ) + \"/businessObjectData/search\" ) ) . setParameter ( \"pageNum\" , pageNum . toString ( ) ) ; java . net . URI uri = uriBuilder . build ( ) ; javax . xml . bind . JAXBContext requestContext = javax . xml . bind . JAXBContext . newInstance ( org . finra . herd . model . api . xml . BusinessObjectDataSearchRequest . class ) ; javax . xml . bind . Marshaller requestMarshaller = requestContext . createMarshaller ( ) ; requestMarshaller . setProperty ( Marshaller . JAXB_ENCODING , StandardCharsets . UTF_8 . name ( ) ) ; requestMarshaller . setProperty ( Marshaller . JAXB_FORMATTED_OUTPUT , true ) ; java . io . StringWriter stringWriter = new java . io . StringWriter ( ) ; requestMarshaller . marshal ( businessObjectDataSearchRequest , stringWriter ) ; try ( org . apache . http . impl . client . CloseableHttpClient client = httpClientHelper . createHttpClient ( regServerAccessParamsDto . isTrustSelfSignedCertificate ( ) , regServerAccessParamsDto . isDisableHostnameVerification ( ) ) ) { org . apache . http . client . methods . HttpPost request = new org . apache . http . client . methods . HttpPost ( uri ) ; request . addHeader ( \"Content-Type\" , org . finra . herd . tools . retention . exporter . DEFAULT_CONTENT_TYPE ) ; request . addHeader ( \"Accepts\" , org . finra . herd . tools . retention . exporter . DEFAULT_ACCEPT ) ; if ( regServerAccessParamsDto . isUseSsl ( ) ) { request . addHeader ( getAuthorizationHeader ( ) ) ; } request . setEntity ( new org . apache . http . entity . StringEntity ( stringWriter . toString ( ) ) ) ; org . finra . herd . tools . retention . exporter . RetentionExpirationExporterWebClient . LOGGER . info ( java . lang . String . format ( \"<sp>HTTP<sp>POST<sp>URI:<sp>%s\" , request . getURI ( ) . toString ( ) ) ) ; org . finra . herd . tools . retention . exporter . RetentionExpirationExporterWebClient . LOGGER . info ( java . lang . String . format ( \"<sp>HTTP<sp>POST<sp>Headers:<sp>%s\" , java . util . Arrays . toString ( request . getAllHeaders ( ) ) ) ) ; org . finra . herd . tools . retention . exporter . RetentionExpirationExporterWebClient . LOGGER . info ( java . lang . String . format ( \"<sp>HTTP<sp>POST<sp>Entity<sp>Content:%n%s\" , stringWriter . toString ( ) ) ) ; org . finra . herd . model . api . xml . BusinessObjectDataSearchResult businessObjectDataSearchResult = getBusinessObjectDataSearchResult ( httpClientOperations . execute ( client , request ) ) ; org . finra . herd . tools . retention . exporter . RetentionExpirationExporterWebClient . LOGGER . info ( \"Successfully<sp>received<sp>search<sp>business<sp>object<sp>data<sp>response<sp>from<sp>the<sp>registration<sp>server.\" ) ; return businessObjectDataSearchResult ; } }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getQueryPlan ( java . lang . String , long ) { org . teiid . client . plan . PlanNode plan = this . embeddedServer . dqp . getPlan ( sessionId , executionId ) ; if ( plan == null ) { return null ; } return plan . toXml ( ) ; }", "testMethod": "testGetQueryPlan ( ) { java . sql . Connection conn = newSession ( ) ; java . sql . Statement stmt = conn . createStatement ( ) ; stmt . execute ( \"set<sp>showplan<sp>on\" ) ; java . lang . String command = \"SELECT<sp>*<sp>FROM<sp>helloworld\" ; java . sql . ResultSet rs = stmt . executeQuery ( command ) ; java . util . List < org . teiid . runtime . Session > sessions = ( ( java . util . List < org . teiid . runtime . Session > ) ( org . teiid . runtime . TestEmbeddedServerAdmin . admin . getSessions ( ) ) ) ; java . lang . String sessionId = sessions . get ( 0 ) . getSessionId ( ) ; java . util . List < org . teiid . runtime . Request > requests = ( ( java . util . List < org . teiid . runtime . Request > ) ( org . teiid . runtime . TestEmbeddedServerAdmin . admin . getRequestsForSession ( sessionId ) ) ) ; int executionId = ( ( int ) ( requests . get ( 0 ) . getExecutionId ( ) ) ) ; java . lang . String plan = org . teiid . runtime . TestEmbeddedServerAdmin . admin . getQueryPlan ( sessionId , executionId ) ; \"<AssertPlaceHolder>\" ; rs . close ( ) ; stmt . close ( ) ; conn . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( plan )", "total": "testGetQueryPlan ( ) { java . sql . Connection conn = newSession ( ) ; java . sql . Statement stmt = conn . createStatement ( ) ; stmt . execute ( \"set<sp>showplan<sp>on\" ) ; java . lang . String command = \"SELECT<sp>*<sp>FROM<sp>helloworld\" ; java . sql . ResultSet rs = stmt . executeQuery ( command ) ; java . util . List < org . teiid . runtime . Session > sessions = ( ( java . util . List < org . teiid . runtime . Session > ) ( org . teiid . runtime . TestEmbeddedServerAdmin . admin . getSessions ( ) ) ) ; java . lang . String sessionId = sessions . get ( 0 ) . getSessionId ( ) ; java . util . List < org . teiid . runtime . Request > requests = ( ( java . util . List < org . teiid . runtime . Request > ) ( org . teiid . runtime . TestEmbeddedServerAdmin . admin . getRequestsForSession ( sessionId ) ) ) ; int executionId = ( ( int ) ( requests . get ( 0 ) . getExecutionId ( ) ) ) ; java . lang . String plan = org . teiid . runtime . TestEmbeddedServerAdmin . admin . getQueryPlan ( sessionId , executionId ) ; \"<AssertPlaceHolder>\" ; rs . close ( ) ; stmt . close ( ) ; conn . close ( ) ; } getQueryPlan ( java . lang . String , long ) { org . teiid . client . plan . PlanNode plan = this . embeddedServer . dqp . getPlan ( sessionId , executionId ) ; if ( plan == null ) { return null ; } return plan . toXml ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( plan )"}
{"focal": "forImage ( ) { return new org . uberfire . ext . editor . commons . client . file . exports . ImageFileExport ( ) ; }", "testMethod": "produceImageFileSaver ( ) { org . uberfire . ext . editor . commons . client . file . exports . ImageFileExport imageFileSaver = fs . forImage ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( imageFileSaver )", "total": "produceImageFileSaver ( ) { org . uberfire . ext . editor . commons . client . file . exports . ImageFileExport imageFileSaver = fs . forImage ( ) ; \"<AssertPlaceHolder>\" ; } forImage ( ) { return new org . uberfire . ext . editor . commons . client . file . exports . ImageFileExport ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( imageFileSaver )"}
{"focal": "getInstance ( org . eclipse . rap . rwt . service . UISession ) { return ( ( org . eclipse . rap . rwt . internal . SingletonManager ) ( uiSession . getAttribute ( org . eclipse . rap . rwt . internal . SingletonManager . ATTR_SINGLETON_MANAGER ) ) ) ; }", "testMethod": "testGetInstance_uiSession_afterInstall ( ) { org . eclipse . rap . rwt . internal . SingletonManager . install ( uiSession ) ; org . eclipse . rap . rwt . internal . SingletonManager singletonManager = org . eclipse . rap . rwt . internal . SingletonManager . getInstance ( uiSession ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( singletonManager )", "total": "testGetInstance_uiSession_afterInstall ( ) { org . eclipse . rap . rwt . internal . SingletonManager . install ( uiSession ) ; org . eclipse . rap . rwt . internal . SingletonManager singletonManager = org . eclipse . rap . rwt . internal . SingletonManager . getInstance ( uiSession ) ; \"<AssertPlaceHolder>\" ; } getInstance ( org . eclipse . rap . rwt . service . UISession ) { return ( ( org . eclipse . rap . rwt . internal . SingletonManager ) ( uiSession . getAttribute ( org . eclipse . rap . rwt . internal . SingletonManager . ATTR_SINGLETON_MANAGER ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( singletonManager )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testEditaAlumnoDescuento ( ) { mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; mx . edu . um . mateo . general . model . Organizacion organizacion = usuario . getEmpresa ( ) . getOrganizacion ( ) ; mx . edu . um . mateo . inscripciones . model . Descuento descuento = new mx . edu . um . mateo . inscripciones . model . Descuento ( \"Descuento\" , \"A\" , \"S\" , organizacion ) ; currentSession ( ) . save ( descuento ) ; mx . edu . um . mateo . inscripciones . model . AlumnoDescuento alumnoDescuento = new mx . edu . um . mateo . inscripciones . model . AlumnoDescuento ( \"1080506\" , descuento , new java . util . Date ( ) , usuario , \"S\" , \"A\" ) ; instance . graba ( alumnoDescuento , usuario ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . PATH_ALUMNODESCUENTO_EDITA ) + \"/\" ) + ( alumnoDescuento . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_ALUMNODESCUENTO_EDITA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_ALUMNODESCUENTO ) ) . andExpect ( model ( ) . attribute ( Constantes . ADDATTRIBUTE_ALUMNODESCUENTO , alumnoDescuento ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( alumnoDescuento . getId ( ) )", "total": "testEditaAlumnoDescuento ( ) { mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; mx . edu . um . mateo . general . model . Organizacion organizacion = usuario . getEmpresa ( ) . getOrganizacion ( ) ; mx . edu . um . mateo . inscripciones . model . Descuento descuento = new mx . edu . um . mateo . inscripciones . model . Descuento ( \"Descuento\" , \"A\" , \"S\" , organizacion ) ; currentSession ( ) . save ( descuento ) ; mx . edu . um . mateo . inscripciones . model . AlumnoDescuento alumnoDescuento = new mx . edu . um . mateo . inscripciones . model . AlumnoDescuento ( \"1080506\" , descuento , new java . util . Date ( ) , usuario , \"S\" , \"A\" ) ; instance . graba ( alumnoDescuento , usuario ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . PATH_ALUMNODESCUENTO_EDITA ) + \"/\" ) + ( alumnoDescuento . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_ALUMNODESCUENTO_EDITA ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_ALUMNODESCUENTO ) ) . andExpect ( model ( ) . attribute ( Constantes . ADDATTRIBUTE_ALUMNODESCUENTO , alumnoDescuento ) ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( alumnoDescuento . getId ( ) )"}
{"focal": "addJobProcess ( gov . nysenate . sage . model . job . JobProcess ) { java . lang . String sql = ( ( \"INSERT<sp>INTO<sp>\" + ( getProcessTableName ( ) ) ) + \"<sp>(userId,<sp>fileName,<sp>fileType,<sp>sourceFileName,<sp>requestTime,<sp>recordCount,<sp>validationReq,<sp>geocodeReq,<sp>districtReq)<sp>\" ) + \"VALUES<sp>(?,?,?,?,?,?,?,?,?)<sp>RETURNING<sp>id\" ; try { return run . query ( sql , new org . apache . commons . dbutils . ResultSetHandler < java . lang . Integer > ( ) { @ gov . nysenate . sage . dao . model . Override public gov . nysenate . sage . dao . model . Integer handle ( java . sql . ResultSet rs ) throws java . sql . SQLException { return rs . next ( ) ? rs . getInt ( \"id\" ) : - 1 ; } } , p . getRequestor ( ) . getId ( ) , p . getFileName ( ) , p . getFileType ( ) , p . getSourceFileName ( ) , p . getRequestTime ( ) , p . getRecordCount ( ) , p . isValidationRequired ( ) , p . isGeocodeRequired ( ) , p . isDistrictRequired ( ) ) ; } catch ( java . sql . SQLException ex ) { logger . error ( \"Failed<sp>to<sp>add<sp>job<sp>process!\" , ex ) ; } return - 1 ; }", "testMethod": "addProcessTest ( ) { gov . nysenate . sage . model . job . JobProcess jobProcess = new gov . nysenate . sage . model . job . JobProcess ( ) ; jobProcess . setRequestor ( jobUser ) ; jobProcess . setFileName ( \"testfile.tsv\" ) ; jobProcess . setRecordCount ( 1000 ) ; jobProcess . setFileType ( \"GeocodeTest\" ) ; int res = jpDao . addJobProcess ( jobProcess ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( res )", "total": "addProcessTest ( ) { gov . nysenate . sage . model . job . JobProcess jobProcess = new gov . nysenate . sage . model . job . JobProcess ( ) ; jobProcess . setRequestor ( jobUser ) ; jobProcess . setFileName ( \"testfile.tsv\" ) ; jobProcess . setRecordCount ( 1000 ) ; jobProcess . setFileType ( \"GeocodeTest\" ) ; int res = jpDao . addJobProcess ( jobProcess ) ; \"<AssertPlaceHolder>\" ; } addJobProcess ( gov . nysenate . sage . model . job . JobProcess ) { java . lang . String sql = ( ( \"INSERT<sp>INTO<sp>\" + ( getProcessTableName ( ) ) ) + \"<sp>(userId,<sp>fileName,<sp>fileType,<sp>sourceFileName,<sp>requestTime,<sp>recordCount,<sp>validationReq,<sp>geocodeReq,<sp>districtReq)<sp>\" ) + \"VALUES<sp>(?,?,?,?,?,?,?,?,?)<sp>RETURNING<sp>id\" ; try { return run . query ( sql , new org . apache . commons . dbutils . ResultSetHandler < java . lang . Integer > ( ) { @ gov . nysenate . sage . dao . model . Override public gov . nysenate . sage . dao . model . Integer handle ( java . sql . ResultSet rs ) throws java . sql . SQLException { return rs . next ( ) ? rs . getInt ( \"id\" ) : - 1 ; } } , p . getRequestor ( ) . getId ( ) , p . getFileName ( ) , p . getFileType ( ) , p . getSourceFileName ( ) , p . getRequestTime ( ) , p . getRecordCount ( ) , p . isValidationRequired ( ) , p . isGeocodeRequired ( ) , p . isDistrictRequired ( ) ) ; } catch ( java . sql . SQLException ex ) { logger . error ( \"Failed<sp>to<sp>add<sp>job<sp>process!\" , ex ) ; } return - 1 ; }", "answer": "org . junit . Assert . assertNotNull ( res )"}
{"focal": "getConverter ( java . lang . reflect . Type , boolean ) { cn . hutool . core . convert . Converter < T > converter = null ; if ( isCustomFirst ) { converter = this . getCustomConverter ( type ) ; if ( null == converter ) { converter = this . getDefaultConverter ( type ) ; } } else { converter = this . getDefaultConverter ( type ) ; if ( null == converter ) { converter = this . getCustomConverter ( type ) ; } } return converter ; }", "testMethod": "getConverterTest ( ) { cn . hutool . core . convert . Converter < java . lang . Object > converter = cn . hutool . core . convert . ConverterRegistry . getInstance ( ) . getConverter ( cn . hutool . core . convert . CharSequence . class , false ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( converter )", "total": "getConverterTest ( ) { cn . hutool . core . convert . Converter < java . lang . Object > converter = cn . hutool . core . convert . ConverterRegistry . getInstance ( ) . getConverter ( cn . hutool . core . convert . CharSequence . class , false ) ; \"<AssertPlaceHolder>\" ; } getConverter ( java . lang . reflect . Type , boolean ) { cn . hutool . core . convert . Converter < T > converter = null ; if ( isCustomFirst ) { converter = this . getCustomConverter ( type ) ; if ( null == converter ) { converter = this . getDefaultConverter ( type ) ; } } else { converter = this . getDefaultConverter ( type ) ; if ( null == converter ) { converter = this . getCustomConverter ( type ) ; } } return converter ; }", "answer": "org . junit . Assert . assertNotNull ( converter )"}
{"focal": "toString ( ) { return this . getDescricao ( ) ; }", "testMethod": "devePermitirCodigoPaisNulo ( ) { final com . fincatto . documentofiscal . nfe400 . classes . NFEndereco endereco = new com . fincatto . documentofiscal . nfe400 . classes . NFEndereco ( ) ; endereco . setBairro ( \"67LQFlXOBK0JqAE1rFi2CEyUGW5Z8QmmHhzmZ9GABVLKa9AbV0uFR0onl7nU\" ) ; endereco . setCep ( \"88095550\" ) ; endereco . setCodigoMunicipio ( \"9999999\" ) ; endereco . setComplemento ( \"Fr3gSvoAeKbGpQD3r98KFeB50P3Gq14XBVsv5fpiaBvJ3HTOpREiwYGs20Xw\" ) ; endereco . setDescricaoMunicipio ( \"s1Cr2hWP6bptQ80A9vWBuTaODR1U82LtKQi1DEm3LsAXu9AbkSeCtfXJVTKG\" ) ; endereco . setLogradouro ( \"NKwaAJ5ZJ49aQYmqBvxMhBzkGUqvtXnqusGEtjDzKCXPGwrEZCS8LGKHyBbV\" ) ; endereco . setNumero ( \"11mzXHR8rZTgfE35EqfGhiShiIwQfLCAziFDXVgs3EjLSPkZkCvfGNLMEf5y\" ) ; endereco . setTelefone ( \"12345678901324\" ) ; endereco . setUf ( DFUnidadeFederativa . SC ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( endereco . toString ( ) )", "total": "devePermitirCodigoPaisNulo ( ) { final com . fincatto . documentofiscal . nfe400 . classes . NFEndereco endereco = new com . fincatto . documentofiscal . nfe400 . classes . NFEndereco ( ) ; endereco . setBairro ( \"67LQFlXOBK0JqAE1rFi2CEyUGW5Z8QmmHhzmZ9GABVLKa9AbV0uFR0onl7nU\" ) ; endereco . setCep ( \"88095550\" ) ; endereco . setCodigoMunicipio ( \"9999999\" ) ; endereco . setComplemento ( \"Fr3gSvoAeKbGpQD3r98KFeB50P3Gq14XBVsv5fpiaBvJ3HTOpREiwYGs20Xw\" ) ; endereco . setDescricaoMunicipio ( \"s1Cr2hWP6bptQ80A9vWBuTaODR1U82LtKQi1DEm3LsAXu9AbkSeCtfXJVTKG\" ) ; endereco . setLogradouro ( \"NKwaAJ5ZJ49aQYmqBvxMhBzkGUqvtXnqusGEtjDzKCXPGwrEZCS8LGKHyBbV\" ) ; endereco . setNumero ( \"11mzXHR8rZTgfE35EqfGhiShiIwQfLCAziFDXVgs3EjLSPkZkCvfGNLMEf5y\" ) ; endereco . setTelefone ( \"12345678901324\" ) ; endereco . setUf ( DFUnidadeFederativa . SC ) ; \"<AssertPlaceHolder>\" ; } toString ( ) { return this . getDescricao ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( endereco . toString ( ) )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "test ( ) { try { transactionTemplate . execute ( ( ( org . springframework . transaction . support . TransactionCallback < java . lang . Void > ) ( ( transactionStatus ) -> { com . vladmihalcea . book . hpjp . hibernate . transaction . forum . Tag hibernate = new com . vladmihalcea . book . hpjp . hibernate . transaction . forum . Tag ( ) ; hibernate . setName ( \"hibernate\" ) ; entityManager . persist ( hibernate ) ; com . vladmihalcea . book . hpjp . hibernate . transaction . forum . Tag jpa = new com . vladmihalcea . book . hpjp . hibernate . transaction . forum . Tag ( ) ; jpa . setName ( \"jpa\" ) ; entityManager . persist ( jpa ) ; return null ; } ) ) ) ; } catch ( org . springframework . transaction . TransactionException e ) { LOGGER . error ( \"Failure\" , e ) ; } com . vladmihalcea . book . hpjp . hibernate . transaction . forum . Post post = forumService . newPost ( \"High-Performance<sp>Java<sp>Persistence\" , \"hibernate\" , \"jpa\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( post . getId ( ) )", "total": "test ( ) { try { transactionTemplate . execute ( ( ( org . springframework . transaction . support . TransactionCallback < java . lang . Void > ) ( ( transactionStatus ) -> { com . vladmihalcea . book . hpjp . hibernate . transaction . forum . Tag hibernate = new com . vladmihalcea . book . hpjp . hibernate . transaction . forum . Tag ( ) ; hibernate . setName ( \"hibernate\" ) ; entityManager . persist ( hibernate ) ; com . vladmihalcea . book . hpjp . hibernate . transaction . forum . Tag jpa = new com . vladmihalcea . book . hpjp . hibernate . transaction . forum . Tag ( ) ; jpa . setName ( \"jpa\" ) ; entityManager . persist ( jpa ) ; return null ; } ) ) ) ; } catch ( org . springframework . transaction . TransactionException e ) { LOGGER . error ( \"Failure\" , e ) ; } com . vladmihalcea . book . hpjp . hibernate . transaction . forum . Post post = forumService . newPost ( \"High-Performance<sp>Java<sp>Persistence\" , \"hibernate\" , \"jpa\" ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( post . getId ( ) )"}
{"focal": "getFile ( java . lang . String ) { return com . intel . mtwilson . util . ResourceFinder . getFile ( filename , false ) ; }", "testMethod": "testGetFile ( ) { java . io . File file2 = com . intel . mtwilson . util . ResourceFinder . getFile ( \"config/test1.txt\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( file2 )", "total": "testGetFile ( ) { java . io . File file2 = com . intel . mtwilson . util . ResourceFinder . getFile ( \"config/test1.txt\" ) ; \"<AssertPlaceHolder>\" ; } getFile ( java . lang . String ) { return com . intel . mtwilson . util . ResourceFinder . getFile ( filename , false ) ; }", "answer": "org . junit . Assert . assertNotNull ( file2 )"}
{"focal": "obtainSaslClientFactory ( java . lang . Class ) { java . util . Enumeration < javax . security . sasl . SaslClientFactory > clientFactories = javax . security . sasl . Sasl . getSaslClientFactories ( ) ; while ( clientFactories . hasMoreElements ( ) ) { javax . security . sasl . SaslClientFactory current = clientFactories . nextElement ( ) ; if ( current . getClass ( ) . equals ( requiredClientFactory ) ) { return requiredClientFactory . cast ( current ) ; } } return null ; }", "testMethod": "testServerNameMismatch ( ) { final javax . security . sasl . SaslClientFactory clientFactory = obtainSaslClientFactory ( org . wildfly . security . sasl . entity . EntitySaslClientFactory . class ) ; \"<AssertPlaceHolder>\" ; final javax . security . sasl . SaslServer saslServer = createSaslServer ( SaslMechanismInformation . Names . IEC_ISO_9798_M_RSA_SHA1_ENC , \"testserver1.example.com\" , getX509KeyManager ( serverKeyStore , org . wildfly . security . sasl . entity . EntityTest . KEYSTORE_PASSWORD ) , serverTrustStore ) ; final java . lang . String [ ] mechanisms = new java . lang . String [ ] { SaslMechanismInformation . Names . IEC_ISO_9798_M_RSA_SHA1_ENC } ; javax . security . auth . callback . CallbackHandler cbh = createClientCallbackHandler ( mechanisms , clientKeyStore , org . wildfly . security . sasl . entity . EntityTest . CLIENT_KEYSTORE_ALIAS , org . wildfly . security . sasl . entity . EntityTest . KEYSTORE_PASSWORD , getX509TrustManager ( clientTrustStore ) ) ; final javax . security . sasl . SaslClient saslClient = clientFactory . createSaslClient ( mechanisms , null , \"test\" , \"anotherserver.example.com\" , java . util . Collections . < java . lang . String , java . lang . Object > emptyMap ( ) , cbh ) ; byte [ ] message = saslServer . evaluateResponse ( new byte [ 0 ] ) ; try { saslClient . evaluateChallenge ( message ) ; org . junit . Assert . fail ( \"Expected<sp>SaslException<sp>not<sp>thrown\" ) ; } catch ( javax . security . sasl . SaslException expected ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( clientFactory )", "total": "testServerNameMismatch ( ) { final javax . security . sasl . SaslClientFactory clientFactory = obtainSaslClientFactory ( org . wildfly . security . sasl . entity . EntitySaslClientFactory . class ) ; \"<AssertPlaceHolder>\" ; final javax . security . sasl . SaslServer saslServer = createSaslServer ( SaslMechanismInformation . Names . IEC_ISO_9798_M_RSA_SHA1_ENC , \"testserver1.example.com\" , getX509KeyManager ( serverKeyStore , org . wildfly . security . sasl . entity . EntityTest . KEYSTORE_PASSWORD ) , serverTrustStore ) ; final java . lang . String [ ] mechanisms = new java . lang . String [ ] { SaslMechanismInformation . Names . IEC_ISO_9798_M_RSA_SHA1_ENC } ; javax . security . auth . callback . CallbackHandler cbh = createClientCallbackHandler ( mechanisms , clientKeyStore , org . wildfly . security . sasl . entity . EntityTest . CLIENT_KEYSTORE_ALIAS , org . wildfly . security . sasl . entity . EntityTest . KEYSTORE_PASSWORD , getX509TrustManager ( clientTrustStore ) ) ; final javax . security . sasl . SaslClient saslClient = clientFactory . createSaslClient ( mechanisms , null , \"test\" , \"anotherserver.example.com\" , java . util . Collections . < java . lang . String , java . lang . Object > emptyMap ( ) , cbh ) ; byte [ ] message = saslServer . evaluateResponse ( new byte [ 0 ] ) ; try { saslClient . evaluateChallenge ( message ) ; org . junit . Assert . fail ( \"Expected<sp>SaslException<sp>not<sp>thrown\" ) ; } catch ( javax . security . sasl . SaslException expected ) { } } obtainSaslClientFactory ( java . lang . Class ) { java . util . Enumeration < javax . security . sasl . SaslClientFactory > clientFactories = javax . security . sasl . Sasl . getSaslClientFactories ( ) ; while ( clientFactories . hasMoreElements ( ) ) { javax . security . sasl . SaslClientFactory current = clientFactories . nextElement ( ) ; if ( current . getClass ( ) . equals ( requiredClientFactory ) ) { return requiredClientFactory . cast ( current ) ; } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( clientFactory )"}
{"focal": "uploadPerm ( java . lang . String , me . hao0 . wechat . model . material . MaterialUploadType , java . io . File ) { try { return uploadPerm ( accessToken , type , file . getName ( ) , new java . io . FileInputStream ( file ) ) ; } catch ( java . io . FileNotFoundException e ) { throw new me . hao0 . wechat . exception . WechatException ( e ) ; } }", "testMethod": "testUploadPerm ( ) { me . hao0 . wechat . model . material . PermMaterial material = wechat . material ( ) . uploadPerm ( accessToken , MaterialUploadType . THUMB , new java . io . File ( \"/Users/haolin/temp/user.png\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( material )", "total": "testUploadPerm ( ) { me . hao0 . wechat . model . material . PermMaterial material = wechat . material ( ) . uploadPerm ( accessToken , MaterialUploadType . THUMB , new java . io . File ( \"/Users/haolin/temp/user.png\" ) ) ; \"<AssertPlaceHolder>\" ; } uploadPerm ( java . lang . String , me . hao0 . wechat . model . material . MaterialUploadType , java . io . File ) { try { return uploadPerm ( accessToken , type , file . getName ( ) , new java . io . FileInputStream ( file ) ) ; } catch ( java . io . FileNotFoundException e ) { throw new me . hao0 . wechat . exception . WechatException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( material )"}
{"focal": "validateForCreate ( org . apache . ranger . plugin . model . RangerSecurityZone ) { }", "testMethod": "test1ValidateForCreate ( ) { org . apache . ranger . plugin . model . RangerTagDef rangerServiceDef = new org . apache . ranger . plugin . model . RangerTagDef ( ) ; rangerTagDefService . validateForCreate ( rangerServiceDef ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( rangerServiceDef )", "total": "test1ValidateForCreate ( ) { org . apache . ranger . plugin . model . RangerTagDef rangerServiceDef = new org . apache . ranger . plugin . model . RangerTagDef ( ) ; rangerTagDefService . validateForCreate ( rangerServiceDef ) ; \"<AssertPlaceHolder>\" ; } validateForCreate ( org . apache . ranger . plugin . model . RangerSecurityZone ) { }", "answer": "org . junit . Assert . assertNotNull ( rangerServiceDef )"}
{"focal": "getIsoCode ( ) { return isoCode ; }", "testMethod": "testMissingParameter ( ) { final net . violet . platform . datamodel . Lang frLang = getSiteFrLang ( ) ; final net . violet . platform . api . actions . Action theAction = new net . violet . platform . api . actions . dico . Update ( ) ; final net . violet . platform . api . callers . APICaller caller = getPublicApplicationAPICaller ( ) ; final java . util . Map < java . lang . String , java . lang . Object > theParams = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; theParams . put ( Update . LANGUAGE_PARAM , frLang . getIsoCode ( ) ) ; final net . violet . platform . api . actions . ActionParam theActionParam = new net . violet . platform . api . actions . ActionParam ( caller , theParams ) ; final java . lang . Object theResult = theAction . processRequest ( theActionParam ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( theResult )", "total": "testMissingParameter ( ) { final net . violet . platform . datamodel . Lang frLang = getSiteFrLang ( ) ; final net . violet . platform . api . actions . Action theAction = new net . violet . platform . api . actions . dico . Update ( ) ; final net . violet . platform . api . callers . APICaller caller = getPublicApplicationAPICaller ( ) ; final java . util . Map < java . lang . String , java . lang . Object > theParams = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; theParams . put ( Update . LANGUAGE_PARAM , frLang . getIsoCode ( ) ) ; final net . violet . platform . api . actions . ActionParam theActionParam = new net . violet . platform . api . actions . ActionParam ( caller , theParams ) ; final java . lang . Object theResult = theAction . processRequest ( theActionParam ) ; \"<AssertPlaceHolder>\" ; } getIsoCode ( ) { return isoCode ; }", "answer": "org . junit . Assert . assertNotNull ( theResult )"}
{"focal": "getTableStatus ( java . lang . String ) { if ( tableIdString == null ) throw new java . lang . IllegalArgumentException ( \"TableId<sp>cannot<sp>be<sp>null\" ) ; java . lang . Long tableId = org . sagebionetworks . repo . model . jdo . KeyFactory . stringToKey ( tableIdString ) ; org . springframework . jdbc . core . namedparam . SqlParameterSource param = new org . springframework . jdbc . core . namedparam . MapSqlParameterSource ( \"tableId\" , tableId ) ; org . sagebionetworks . repo . model . dbo . persistence . table . DBOTableStatus dbo = basicDao . getObjectByPrimaryKey ( org . sagebionetworks . repo . model . dbo . persistence . table . DBOTableStatus . class , param ) ; return org . sagebionetworks . repo . model . dbo . persistence . table . TableStatusUtils . createDTOFromDBO ( dbo ) ; }", "testMethod": "testAttemptToUpdateTableProgressConflict ( ) { java . lang . String tableId = \"syn123\" ; java . lang . String resetToken = tableStatusDAO . resetTableStatusToProcessing ( \"syn123\" ) ; org . sagebionetworks . repo . model . table . TableStatus status = tableStatusDAO . getTableStatus ( tableId ) ; \"<AssertPlaceHolder>\" ; tableStatusDAO . attemptToUpdateTableProgress ( tableId , ( resetToken + \"invalidated\" ) , \"message\" , 1L , 100L ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( status )", "total": "testAttemptToUpdateTableProgressConflict ( ) { java . lang . String tableId = \"syn123\" ; java . lang . String resetToken = tableStatusDAO . resetTableStatusToProcessing ( \"syn123\" ) ; org . sagebionetworks . repo . model . table . TableStatus status = tableStatusDAO . getTableStatus ( tableId ) ; \"<AssertPlaceHolder>\" ; tableStatusDAO . attemptToUpdateTableProgress ( tableId , ( resetToken + \"invalidated\" ) , \"message\" , 1L , 100L ) ; } getTableStatus ( java . lang . String ) { if ( tableIdString == null ) throw new java . lang . IllegalArgumentException ( \"TableId<sp>cannot<sp>be<sp>null\" ) ; java . lang . Long tableId = org . sagebionetworks . repo . model . jdo . KeyFactory . stringToKey ( tableIdString ) ; org . springframework . jdbc . core . namedparam . SqlParameterSource param = new org . springframework . jdbc . core . namedparam . MapSqlParameterSource ( \"tableId\" , tableId ) ; org . sagebionetworks . repo . model . dbo . persistence . table . DBOTableStatus dbo = basicDao . getObjectByPrimaryKey ( org . sagebionetworks . repo . model . dbo . persistence . table . DBOTableStatus . class , param ) ; return org . sagebionetworks . repo . model . dbo . persistence . table . TableStatusUtils . createDTOFromDBO ( dbo ) ; }", "answer": "org . junit . Assert . assertNotNull ( status )"}
{"focal": "getClusterSource ( java . lang . String ) { com . codeabovelab . dm . cluman . source . NodesGroup cluster = discoveryStorage . getCluster ( name ) ; if ( cluster == null ) { return null ; } com . codeabovelab . dm . cluman . source . RootSource root = new com . codeabovelab . dm . cluman . source . RootSource ( ) ; root . getClusters ( ) . add ( getClusterSourceInternal ( cluster ) ) ; return root ; }", "testMethod": "test ( ) { com . codeabovelab . dm . cluman . configs . container . RootSource clusterDataConfig = clusterConfigFetcher . getClusterSource ( com . codeabovelab . dm . cluman . configs . container . ClusterConfigFetcherTest . MOCK ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( clusterDataConfig )", "total": "test ( ) { com . codeabovelab . dm . cluman . configs . container . RootSource clusterDataConfig = clusterConfigFetcher . getClusterSource ( com . codeabovelab . dm . cluman . configs . container . ClusterConfigFetcherTest . MOCK ) ; \"<AssertPlaceHolder>\" ; } getClusterSource ( java . lang . String ) { com . codeabovelab . dm . cluman . source . NodesGroup cluster = discoveryStorage . getCluster ( name ) ; if ( cluster == null ) { return null ; } com . codeabovelab . dm . cluman . source . RootSource root = new com . codeabovelab . dm . cluman . source . RootSource ( ) ; root . getClusters ( ) . add ( getClusterSourceInternal ( cluster ) ) ; return root ; }", "answer": "org . junit . Assert . assertNotNull ( clusterDataConfig )"}
{"focal": "instanceForModifyAddAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>add<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>add<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"add\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "testMethod": "testModifyTicketAddGroup ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyAddAccess ( ticketId , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_GROUP , groupName ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pi )", "total": "testModifyTicketAddGroup ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyAddAccess ( ticketId , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_GROUP , groupName ) ; \"<AssertPlaceHolder>\" ; } instanceForModifyAddAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>add<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>add<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"add\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "answer": "org . junit . Assert . assertNotNull ( pi )"}
{"focal": "instance ( ) { if ( ( com . github . aureliano . evtbridge . core . EventBridgeMetadata . metadata ) == null ) { com . github . aureliano . evtbridge . core . EventBridgeMetadata . metadata = new com . github . aureliano . evtbridge . core . EventBridgeMetadata ( ) ; } return com . github . aureliano . evtbridge . core . EventBridgeMetadata . metadata ; }", "testMethod": "testInstance ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . github . aureliano . evtbridge . core . EventBridgeMetadata . instance ( ) )", "total": "testInstance ( ) { \"<AssertPlaceHolder>\" ; } instance ( ) { if ( ( com . github . aureliano . evtbridge . core . EventBridgeMetadata . metadata ) == null ) { com . github . aureliano . evtbridge . core . EventBridgeMetadata . metadata = new com . github . aureliano . evtbridge . core . EventBridgeMetadata ( ) ; } return com . github . aureliano . evtbridge . core . EventBridgeMetadata . metadata ; }", "answer": "org . junit . Assert . assertNotNull ( com . github . aureliano . evtbridge . core . EventBridgeMetadata . instance ( ) )"}
{"focal": "getBuildConfiguration ( ) { return build ; }", "testMethod": "testContextDir ( ) { java . lang . String [ ] testData = new java . lang . String [ ] { k ( ConfigKey . NAME ) , \"image\" , k ( ConfigKey . CONTEXT_DIR ) , \"dir\" } ; io . fabric8 . maven . docker . config . ImageConfiguration config = resolveExternalImageConfig ( testData ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( config . getBuildConfiguration ( ) )", "total": "testContextDir ( ) { java . lang . String [ ] testData = new java . lang . String [ ] { k ( ConfigKey . NAME ) , \"image\" , k ( ConfigKey . CONTEXT_DIR ) , \"dir\" } ; io . fabric8 . maven . docker . config . ImageConfiguration config = resolveExternalImageConfig ( testData ) ; \"<AssertPlaceHolder>\" ; } getBuildConfiguration ( ) { return build ; }", "answer": "org . junit . Assert . assertNotNull ( config . getBuildConfiguration ( ) )"}
{"focal": "getMethodName ( ) { return methodName ; }", "testMethod": "testReferenceMapping ( ) { io . atlasmap . v2 . AtlasMapping atlasMapping = generateAtlasMapping ( ) ; mapper . writerWithDefaultPrettyPrinter ( ) . writeValue ( new java . io . File ( ( ( ( ( ( ( \"target\" + ( java . io . File . separator ) ) + \"junit\" ) + ( java . io . File . separator ) ) + ( testName . getMethodName ( ) ) ) + ( java . io . File . separator ) ) + \"atlasmapping.json\" ) ) , atlasMapping ) ; io . atlasmap . v2 . AtlasMapping uMapping = mapper . readValue ( new java . io . File ( ( ( ( ( ( ( \"target\" + ( java . io . File . separator ) ) + \"junit\" ) + ( java . io . File . separator ) ) + ( testName . getMethodName ( ) ) ) + ( java . io . File . separator ) ) + \"atlasmapping.json\" ) ) , io . atlasmap . v2 . AtlasMapping . class ) ; \"<AssertPlaceHolder>\" ; validateAtlasMapping ( uMapping ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( uMapping )", "total": "testReferenceMapping ( ) { io . atlasmap . v2 . AtlasMapping atlasMapping = generateAtlasMapping ( ) ; mapper . writerWithDefaultPrettyPrinter ( ) . writeValue ( new java . io . File ( ( ( ( ( ( ( \"target\" + ( java . io . File . separator ) ) + \"junit\" ) + ( java . io . File . separator ) ) + ( testName . getMethodName ( ) ) ) + ( java . io . File . separator ) ) + \"atlasmapping.json\" ) ) , atlasMapping ) ; io . atlasmap . v2 . AtlasMapping uMapping = mapper . readValue ( new java . io . File ( ( ( ( ( ( ( \"target\" + ( java . io . File . separator ) ) + \"junit\" ) + ( java . io . File . separator ) ) + ( testName . getMethodName ( ) ) ) + ( java . io . File . separator ) ) + \"atlasmapping.json\" ) ) , io . atlasmap . v2 . AtlasMapping . class ) ; \"<AssertPlaceHolder>\" ; validateAtlasMapping ( uMapping ) ; } getMethodName ( ) { return methodName ; }", "answer": "org . junit . Assert . assertNotNull ( uMapping )"}
{"focal": "executeTestCase ( java . lang . String , java . lang . String , java . util . Map , java . lang . String , java . lang . String ) { setupMocks ( body , uuid , httpHeaders , httpMethod , path ) ; org . jembi . openhim . transformers . RestfulHttpRequestToHttpRequestTransformer trans = new org . jembi . openhim . transformers . RestfulHttpRequestToHttpRequestTransformer ( ) ; org . mule . api . MuleMessage msg = ( ( org . mule . api . MuleMessage ) ( trans . transformMessage ( this . msg , \"UTF-8\" ) ) ) ; return msg ; }", "testMethod": "testPOST ( ) { org . mule . api . MuleMessage msg = executeTestCase ( \"TEST<sp>BODY\" , \"\" , sampleHttpHeaders , \"POST\" , \"test/path\" ) ; \"<AssertPlaceHolder>\" ; verify ( msg ) . setPayload ( \"TEST<sp>BODY\" ) ; verify ( msg ) . setProperty ( \"http.method\" , \"POST\" , PropertyScope . OUTBOUND ) ; verify ( msg ) . setProperty ( \"http.path\" , \"test/path\" , PropertyScope . OUTBOUND ) ; verify ( msg ) . setProperty ( \"TEST1\" , \"VAL1\" , PropertyScope . OUTBOUND ) ; verify ( msg ) . setProperty ( \"Content-Type\" , \"application/xml\" , PropertyScope . OUTBOUND ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( msg )", "total": "testPOST ( ) { org . mule . api . MuleMessage msg = executeTestCase ( \"TEST<sp>BODY\" , \"\" , sampleHttpHeaders , \"POST\" , \"test/path\" ) ; \"<AssertPlaceHolder>\" ; verify ( msg ) . setPayload ( \"TEST<sp>BODY\" ) ; verify ( msg ) . setProperty ( \"http.method\" , \"POST\" , PropertyScope . OUTBOUND ) ; verify ( msg ) . setProperty ( \"http.path\" , \"test/path\" , PropertyScope . OUTBOUND ) ; verify ( msg ) . setProperty ( \"TEST1\" , \"VAL1\" , PropertyScope . OUTBOUND ) ; verify ( msg ) . setProperty ( \"Content-Type\" , \"application/xml\" , PropertyScope . OUTBOUND ) ; } executeTestCase ( java . lang . String , java . lang . String , java . util . Map , java . lang . String , java . lang . String ) { setupMocks ( body , uuid , httpHeaders , httpMethod , path ) ; org . jembi . openhim . transformers . RestfulHttpRequestToHttpRequestTransformer trans = new org . jembi . openhim . transformers . RestfulHttpRequestToHttpRequestTransformer ( ) ; org . mule . api . MuleMessage msg = ( ( org . mule . api . MuleMessage ) ( trans . transformMessage ( this . msg , \"UTF-8\" ) ) ) ; return msg ; }", "answer": "org . junit . Assert . assertNotNull ( msg )"}
{"focal": "receive ( long ) { session . lock ( ) ; try { if ( ActiveMQRALogger . LOGGER . isTraceEnabled ( ) ) { ActiveMQRALogger . LOGGER . trace ( ( ( ( \"receive<sp>\" + ( this ) ) + \"<sp>timeout=\" ) + timeout ) ) ; } checkState ( ) ; javax . jms . Message message = consumer . receive ( timeout ) ; if ( ActiveMQRALogger . LOGGER . isTraceEnabled ( ) ) { ActiveMQRALogger . LOGGER . trace ( ( ( ( \"received<sp>\" + ( this ) ) + \"<sp>result=\" ) + message ) ) ; } if ( message == null ) { return null ; } else { return wrapMessage ( message ) ; } } finally { session . unlock ( ) ; } }", "testMethod": "testConsumeAfterRestart ( ) { org . apache . activemq . artemis . api . core . client . ClientSession session = null ; org . apache . activemq . artemis . tests . integration . client . InterruptedLargeMessageTest . LargeMessageTestInterceptorIgnoreLastPacket . clearInterrupt ( ) ; org . apache . activemq . artemis . core . server . ActiveMQServer server = createServer ( true , isNetty ( ) ) ; server . start ( ) ; org . apache . activemq . artemis . core . server . QueueFactory original = server . getQueueFactory ( ) ; locator . setBlockOnNonDurableSend ( true ) . setBlockOnDurableSend ( true ) ; org . apache . activemq . artemis . api . core . client . ClientSessionFactory sf = createSessionFactory ( locator ) ; session = sf . createSession ( false , true , true ) ; session . createQueue ( org . apache . activemq . artemis . tests . integration . client . ADDRESS , org . apache . activemq . artemis . tests . integration . client . ADDRESS , true ) ; org . apache . activemq . artemis . api . core . client . ClientProducer producer = session . createProducer ( org . apache . activemq . artemis . tests . integration . client . ADDRESS ) ; for ( int i = 0 ; i < 10 ; i ++ ) { org . apache . activemq . artemis . api . core . Message clientFile = createLargeClientMessageStreaming ( session , LARGE_MESSAGE_SIZE , true ) ; producer . send ( clientFile ) ; } session . commit ( ) ; session . close ( ) ; sf . close ( ) ; server . stop ( ) ; server . start ( ) ; sf = createSessionFactory ( locator ) ; session = sf . createSession ( false , false ) ; org . apache . activemq . artemis . api . core . client . ClientConsumer cons = session . createConsumer ( org . apache . activemq . artemis . tests . integration . client . ADDRESS ) ; session . start ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { org . apache . activemq . artemis . api . core . client . ClientMessage msg = cons . receive ( 5000 ) ; \"<AssertPlaceHolder>\" ; msg . saveToOutputStream ( new java . io . OutputStream ( ) { @ org . apache . activemq . artemis . tests . integration . client . Override public void write ( int b ) throws java . io . IOException { } } ) ; msg . acknowledge ( ) ; session . commit ( ) ; } ( ( org . apache . activemq . artemis . core . server . impl . ActiveMQServerImpl ) ( server ) ) . replaceQueueFactory ( original ) ; server . fail ( false ) ; server . start ( ) ; server . stop ( ) ; validateNoFilesOnLargeDir ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( msg )", "total": "testConsumeAfterRestart ( ) { org . apache . activemq . artemis . api . core . client . ClientSession session = null ; org . apache . activemq . artemis . tests . integration . client . InterruptedLargeMessageTest . LargeMessageTestInterceptorIgnoreLastPacket . clearInterrupt ( ) ; org . apache . activemq . artemis . core . server . ActiveMQServer server = createServer ( true , isNetty ( ) ) ; server . start ( ) ; org . apache . activemq . artemis . core . server . QueueFactory original = server . getQueueFactory ( ) ; locator . setBlockOnNonDurableSend ( true ) . setBlockOnDurableSend ( true ) ; org . apache . activemq . artemis . api . core . client . ClientSessionFactory sf = createSessionFactory ( locator ) ; session = sf . createSession ( false , true , true ) ; session . createQueue ( org . apache . activemq . artemis . tests . integration . client . ADDRESS , org . apache . activemq . artemis . tests . integration . client . ADDRESS , true ) ; org . apache . activemq . artemis . api . core . client . ClientProducer producer = session . createProducer ( org . apache . activemq . artemis . tests . integration . client . ADDRESS ) ; for ( int i = 0 ; i < 10 ; i ++ ) { org . apache . activemq . artemis . api . core . Message clientFile = createLargeClientMessageStreaming ( session , LARGE_MESSAGE_SIZE , true ) ; producer . send ( clientFile ) ; } session . commit ( ) ; session . close ( ) ; sf . close ( ) ; server . stop ( ) ; server . start ( ) ; sf = createSessionFactory ( locator ) ; session = sf . createSession ( false , false ) ; org . apache . activemq . artemis . api . core . client . ClientConsumer cons = session . createConsumer ( org . apache . activemq . artemis . tests . integration . client . ADDRESS ) ; session . start ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { org . apache . activemq . artemis . api . core . client . ClientMessage msg = cons . receive ( 5000 ) ; \"<AssertPlaceHolder>\" ; msg . saveToOutputStream ( new java . io . OutputStream ( ) { @ org . apache . activemq . artemis . tests . integration . client . Override public void write ( int b ) throws java . io . IOException { } } ) ; msg . acknowledge ( ) ; session . commit ( ) ; } ( ( org . apache . activemq . artemis . core . server . impl . ActiveMQServerImpl ) ( server ) ) . replaceQueueFactory ( original ) ; server . fail ( false ) ; server . start ( ) ; server . stop ( ) ; validateNoFilesOnLargeDir ( ) ; } receive ( long ) { session . lock ( ) ; try { if ( ActiveMQRALogger . LOGGER . isTraceEnabled ( ) ) { ActiveMQRALogger . LOGGER . trace ( ( ( ( \"receive<sp>\" + ( this ) ) + \"<sp>timeout=\" ) + timeout ) ) ; } checkState ( ) ; javax . jms . Message message = consumer . receive ( timeout ) ; if ( ActiveMQRALogger . LOGGER . isTraceEnabled ( ) ) { ActiveMQRALogger . LOGGER . trace ( ( ( ( \"received<sp>\" + ( this ) ) + \"<sp>result=\" ) + message ) ) ; } if ( message == null ) { return null ; } else { return wrapMessage ( message ) ; } } finally { session . unlock ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( msg )"}
{"focal": "run ( java . lang . String , int , java . lang . String [ ] ) { java . lang . ClassLoader tcl = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) ; java . lang . Thread . currentThread ( ) . setContextClassLoader ( org . nuxeo . connect . tools . report . ReportComponent . Management . class . getClassLoader ( ) ) ; try ( java . net . Socket sock = new java . net . Socket ( host , port ) ; java . io . OutputStream sink = sock . getOutputStream ( ) ) { service . run ( sink , new java . util . HashSet ( java . util . Arrays . asList ( names ) ) ) ; } finally { java . lang . Thread . currentThread ( ) . setContextClassLoader ( tcl ) ; } }", "testMethod": "testSignPDF ( ) { org . nuxeo . ecm . automation . OperationContext ctx = buildCtx ( session ) ; java . util . Map < java . lang . String , java . lang . Object > params = buildParams ( ) ; org . nuxeo . ecm . core . api . Blob signedBlob = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SignPDF . ID , params ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( signedBlob )", "total": "testSignPDF ( ) { org . nuxeo . ecm . automation . OperationContext ctx = buildCtx ( session ) ; java . util . Map < java . lang . String , java . lang . Object > params = buildParams ( ) ; org . nuxeo . ecm . core . api . Blob signedBlob = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SignPDF . ID , params ) ) ) ; \"<AssertPlaceHolder>\" ; } run ( java . lang . String , int , java . lang . String [ ] ) { java . lang . ClassLoader tcl = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) ; java . lang . Thread . currentThread ( ) . setContextClassLoader ( org . nuxeo . connect . tools . report . ReportComponent . Management . class . getClassLoader ( ) ) ; try ( java . net . Socket sock = new java . net . Socket ( host , port ) ; java . io . OutputStream sink = sock . getOutputStream ( ) ) { service . run ( sink , new java . util . HashSet ( java . util . Arrays . asList ( names ) ) ) ; } finally { java . lang . Thread . currentThread ( ) . setContextClassLoader ( tcl ) ; } }", "answer": "org . junit . Assert . assertNotNull ( signedBlob )"}
{"focal": "getServiceReference ( long ) { try { org . osgi . framework . ServiceReference < ? > [ ] serviceReferences = _bundleContext . getServiceReferences ( ( ( java . lang . String ) ( null ) ) , ( ( \"(service.id=\" + serviceId ) + \")\" ) ) ; if ( ( serviceReferences == null ) || ( ( serviceReferences . length ) == 0 ) ) { return null ; } return serviceReferences [ 0 ] ; } catch ( org . osgi . framework . InvalidSyntaxException ise ) { throw new java . lang . IllegalArgumentException ( ise ) ; } }", "testMethod": "testGetRegistryServiceReference ( ) { org . osgi . framework . ServiceReference < com . liferay . registry . Registry > serviceReference = _bundleContext . getServiceReference ( com . liferay . registry . Registry . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( serviceReference )", "total": "testGetRegistryServiceReference ( ) { org . osgi . framework . ServiceReference < com . liferay . registry . Registry > serviceReference = _bundleContext . getServiceReference ( com . liferay . registry . Registry . class ) ; \"<AssertPlaceHolder>\" ; } getServiceReference ( long ) { try { org . osgi . framework . ServiceReference < ? > [ ] serviceReferences = _bundleContext . getServiceReferences ( ( ( java . lang . String ) ( null ) ) , ( ( \"(service.id=\" + serviceId ) + \")\" ) ) ; if ( ( serviceReferences == null ) || ( ( serviceReferences . length ) == 0 ) ) { return null ; } return serviceReferences [ 0 ] ; } catch ( org . osgi . framework . InvalidSyntaxException ise ) { throw new java . lang . IllegalArgumentException ( ise ) ; } }", "answer": "org . junit . Assert . assertNotNull ( serviceReference )"}
{"focal": "mutateAndCall ( java . util . concurrent . Callable , org . pitest . mutationtest . engine . Mutant ) { try { final java . lang . ClassLoader loader = createClassLoader ( mutant ) ; return runInClassLoader ( loader , unmutated ) ; } catch ( final java . lang . RuntimeException ex ) { throw ex ; } catch ( final java . lang . Exception ex ) { throw org . pitest . util . Unchecked . translateCheckedException ( ex ) ; } }", "testMethod": "shouldMutateReturnsOfNullObjectsToNewObject ( ) { final org . pitest . mutationtest . engine . Mutant mutant = getFirstMutant ( org . pitest . mutationtest . engine . gregor . mutators . experimental . ReturnValuesMutatorTest . HasObjectReturn . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( mutateAndCall ( new org . pitest . mutationtest . engine . gregor . mutators . experimental . ReturnValuesMutatorTest . HasObjectReturn ( null ) , mutant ) )", "total": "shouldMutateReturnsOfNullObjectsToNewObject ( ) { final org . pitest . mutationtest . engine . Mutant mutant = getFirstMutant ( org . pitest . mutationtest . engine . gregor . mutators . experimental . ReturnValuesMutatorTest . HasObjectReturn . class ) ; \"<AssertPlaceHolder>\" ; } mutateAndCall ( java . util . concurrent . Callable , org . pitest . mutationtest . engine . Mutant ) { try { final java . lang . ClassLoader loader = createClassLoader ( mutant ) ; return runInClassLoader ( loader , unmutated ) ; } catch ( final java . lang . RuntimeException ex ) { throw ex ; } catch ( final java . lang . Exception ex ) { throw org . pitest . util . Unchecked . translateCheckedException ( ex ) ; } }", "answer": "org . junit . Assert . assertNotNull ( mutateAndCall ( new org . pitest . mutationtest . engine . gregor . mutators . experimental . ReturnValuesMutatorTest . HasObjectReturn ( null ) , mutant ) )"}
{"focal": "hsqldb ( ) { org . junit . Assert . assertNotNull ( EmbeddedDatabaseRule . Builder . hsqldb ( ) ) ; }", "testMethod": "nullStringCompatibilityMode ( ) { final org . zapodot . junit . db . EmbeddedDatabaseRule . Builder builder = org . zapodot . junit . db . EmbeddedDatabaseRule . hsqldb ( ) ; \"<AssertPlaceHolder>\" ; builder . withMode ( ( ( java . lang . String ) ( null ) ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( builder )", "total": "nullStringCompatibilityMode ( ) { final org . zapodot . junit . db . EmbeddedDatabaseRule . Builder builder = org . zapodot . junit . db . EmbeddedDatabaseRule . hsqldb ( ) ; \"<AssertPlaceHolder>\" ; builder . withMode ( ( ( java . lang . String ) ( null ) ) ) ; } hsqldb ( ) { org . junit . Assert . assertNotNull ( EmbeddedDatabaseRule . Builder . hsqldb ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( builder )"}
{"focal": "getResourceAsStream ( java . lang . String ) { org . springframework . core . io . Resource resource = org . kuali . rice . core . api . util . RiceUtilities . getResource ( resourceLoc ) ; if ( resource . exists ( ) ) { return resource . getInputStream ( ) ; } return null ; }", "testMethod": "testNotDuplicateRuleWithExpression ( ) { java . io . InputStream stream = getClass ( ) . getResourceAsStream ( \"NotADuplicateRuleToImportWithExpression.xml\" ) ; \"<AssertPlaceHolder>\" ; log . info ( \"Importing<sp>a<sp>unique<sp>rule\" ) ; org . kuali . rice . kew . service . KEWServiceLocator . getRuleTemplateService ( ) . loadXml ( stream , null ) ; stream = getClass ( ) . getResourceAsStream ( \"NotADuplicateRuleToImportWithExpression.xml\" ) ; org . kuali . rice . kew . service . KEWServiceLocator . getRuleService ( ) . loadXml ( stream , null ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( stream )", "total": "testNotDuplicateRuleWithExpression ( ) { java . io . InputStream stream = getClass ( ) . getResourceAsStream ( \"NotADuplicateRuleToImportWithExpression.xml\" ) ; \"<AssertPlaceHolder>\" ; log . info ( \"Importing<sp>a<sp>unique<sp>rule\" ) ; org . kuali . rice . kew . service . KEWServiceLocator . getRuleTemplateService ( ) . loadXml ( stream , null ) ; stream = getClass ( ) . getResourceAsStream ( \"NotADuplicateRuleToImportWithExpression.xml\" ) ; org . kuali . rice . kew . service . KEWServiceLocator . getRuleService ( ) . loadXml ( stream , null ) ; } getResourceAsStream ( java . lang . String ) { org . springframework . core . io . Resource resource = org . kuali . rice . core . api . util . RiceUtilities . getResource ( resourceLoc ) ; if ( resource . exists ( ) ) { return resource . getInputStream ( ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( stream )"}
{"focal": "getUserParticipation ( ) { return userParticipation ; }", "testMethod": "testGetParticipationNotLogged ( ) { final cc . kune . core . shared . dto . SocialNetworkDataDTO sn = socialNetworkService . getSocialNetwork ( null , groupToken ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( sn . getUserParticipation ( ) )", "total": "testGetParticipationNotLogged ( ) { final cc . kune . core . shared . dto . SocialNetworkDataDTO sn = socialNetworkService . getSocialNetwork ( null , groupToken ) ; \"<AssertPlaceHolder>\" ; } getUserParticipation ( ) { return userParticipation ; }", "answer": "org . junit . Assert . assertNotNull ( sn . getUserParticipation ( ) )"}
{"focal": "getUserApplication ( java . lang . String ) { return org . apache . cxf . jaxrs . swagger . parse . SwaggerParseUtils . getUserApplication ( loc , org . apache . cxf . BusFactory . getThreadDefaultBus ( ) ) ; }", "testMethod": "testConvertSwaggerWithNullValuesForOperations ( ) { org . apache . cxf . jaxrs . model . UserApplication ap = org . apache . cxf . jaxrs . swagger . parse . SwaggerParseUtils . getUserApplication ( \"/swagger2petShopWithNullOperations.json\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ap )", "total": "testConvertSwaggerWithNullValuesForOperations ( ) { org . apache . cxf . jaxrs . model . UserApplication ap = org . apache . cxf . jaxrs . swagger . parse . SwaggerParseUtils . getUserApplication ( \"/swagger2petShopWithNullOperations.json\" ) ; \"<AssertPlaceHolder>\" ; } getUserApplication ( java . lang . String ) { return org . apache . cxf . jaxrs . swagger . parse . SwaggerParseUtils . getUserApplication ( loc , org . apache . cxf . BusFactory . getThreadDefaultBus ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( ap )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "debieraCrearAlmacen ( ) { mx . edu . um . mateo . general . model . Organizacion organizacion = new mx . edu . um . mateo . general . model . Organizacion ( \"tst-01\" , \"almacen.creado.message\" 5 , \"almacen.creado.message\" 5 ) ; currentSession ( ) . save ( organizacion ) ; mx . edu . um . mateo . contabilidad . model . EjercicioPK ejercicioPK = new mx . edu . um . mateo . contabilidad . model . EjercicioPK ( \"almacen.creado.message\" 3 , organizacion ) ; java . lang . Byte x = new java . lang . Byte ( \"almacen.creado.message\" 2 ) ; mx . edu . um . mateo . contabilidad . model . Ejercicio ejercicio = new mx . edu . um . mateo . contabilidad . model . Ejercicio ( ejercicioPK , \"almacen.creado.message\" 3 , \"almacen.creado.message\" 0 , org . apache . commons . lang . StringUtils . EMPTY , org . apache . commons . lang . StringUtils . EMPTY , org . apache . commons . lang . StringUtils . EMPTY , org . apache . commons . lang . StringUtils . EMPTY , x , x ) ; currentSession ( ) . save ( ejercicio ) ; mx . edu . um . mateo . general . model . Empresa empresa = new mx . edu . um . mateo . general . model . Empresa ( \"tst-01\" , \"almacen.creado.message\" 5 , \"almacen.creado.message\" 5 , \"000000000001\" , organizacion ) ; currentSession ( ) . save ( empresa ) ; mx . edu . um . mateo . general . model . Rol rol = new mx . edu . um . mateo . general . model . Rol ( \"almacen.creado.message\" 7 ) ; currentSession ( ) . save ( rol ) ; java . util . Set < mx . edu . um . mateo . general . model . Rol > roles = new java . util . HashSet ( ) ; roles . add ( rol ) ; mx . edu . um . mateo . inventario . model . Almacen almacen = new mx . edu . um . mateo . inventario . model . Almacen ( \"TST\" , \"almacen.creado.message\" 3 , empresa ) ; currentSession ( ) . save ( almacen ) ; mx . edu . um . mateo . general . model . Usuario usuario = new mx . edu . um . mateo . general . model . Usuario ( \"bugs@um.edu.mx\" , \"apPaterno\" , \"apMaterno\" , \"TEST-01\" , \"TEST-01\" ) ; usuario . setEmpresa ( empresa ) ; usuario . setAlmacen ( almacen ) ; usuario . setRoles ( roles ) ; usuario . setEjercicio ( ejercicio ) ; currentSession ( ) . save ( usuario ) ; java . lang . Long id = usuario . getId ( ) ; \"<AssertPlaceHolder>\" ; this . authenticate ( usuario , usuario . getPassword ( ) , new java . util . ArrayList < org . springframework . security . core . GrantedAuthority > ( usuario . getRoles ( ) ) ) ; this . mockMvc . perform ( post ( \"almacen.creado.message\" 8 ) . param ( \"almacen.creado.message\" 4 , \"TST-01\" ) . param ( \"almacen.creado.message\" 1 , \"almacen.creado.message\" 6 ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( flash ( ) . attributeExists ( \"message\" ) ) . andExpect ( flash ( ) . attribute ( \"message\" , \"almacen.creado.message\" ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( id )", "total": "debieraCrearAlmacen ( ) { mx . edu . um . mateo . general . model . Organizacion organizacion = new mx . edu . um . mateo . general . model . Organizacion ( \"tst-01\" , \"almacen.creado.message\" 5 , \"almacen.creado.message\" 5 ) ; currentSession ( ) . save ( organizacion ) ; mx . edu . um . mateo . contabilidad . model . EjercicioPK ejercicioPK = new mx . edu . um . mateo . contabilidad . model . EjercicioPK ( \"almacen.creado.message\" 3 , organizacion ) ; java . lang . Byte x = new java . lang . Byte ( \"almacen.creado.message\" 2 ) ; mx . edu . um . mateo . contabilidad . model . Ejercicio ejercicio = new mx . edu . um . mateo . contabilidad . model . Ejercicio ( ejercicioPK , \"almacen.creado.message\" 3 , \"almacen.creado.message\" 0 , org . apache . commons . lang . StringUtils . EMPTY , org . apache . commons . lang . StringUtils . EMPTY , org . apache . commons . lang . StringUtils . EMPTY , org . apache . commons . lang . StringUtils . EMPTY , x , x ) ; currentSession ( ) . save ( ejercicio ) ; mx . edu . um . mateo . general . model . Empresa empresa = new mx . edu . um . mateo . general . model . Empresa ( \"tst-01\" , \"almacen.creado.message\" 5 , \"almacen.creado.message\" 5 , \"000000000001\" , organizacion ) ; currentSession ( ) . save ( empresa ) ; mx . edu . um . mateo . general . model . Rol rol = new mx . edu . um . mateo . general . model . Rol ( \"almacen.creado.message\" 7 ) ; currentSession ( ) . save ( rol ) ; java . util . Set < mx . edu . um . mateo . general . model . Rol > roles = new java . util . HashSet ( ) ; roles . add ( rol ) ; mx . edu . um . mateo . inventario . model . Almacen almacen = new mx . edu . um . mateo . inventario . model . Almacen ( \"TST\" , \"almacen.creado.message\" 3 , empresa ) ; currentSession ( ) . save ( almacen ) ; mx . edu . um . mateo . general . model . Usuario usuario = new mx . edu . um . mateo . general . model . Usuario ( \"bugs@um.edu.mx\" , \"apPaterno\" , \"apMaterno\" , \"TEST-01\" , \"TEST-01\" ) ; usuario . setEmpresa ( empresa ) ; usuario . setAlmacen ( almacen ) ; usuario . setRoles ( roles ) ; usuario . setEjercicio ( ejercicio ) ; currentSession ( ) . save ( usuario ) ; java . lang . Long id = usuario . getId ( ) ; \"<AssertPlaceHolder>\" ; this . authenticate ( usuario , usuario . getPassword ( ) , new java . util . ArrayList < org . springframework . security . core . GrantedAuthority > ( usuario . getRoles ( ) ) ) ; this . mockMvc . perform ( post ( \"almacen.creado.message\" 8 ) . param ( \"almacen.creado.message\" 4 , \"TST-01\" ) . param ( \"almacen.creado.message\" 1 , \"almacen.creado.message\" 6 ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( flash ( ) . attributeExists ( \"message\" ) ) . andExpect ( flash ( ) . attribute ( \"message\" , \"almacen.creado.message\" ) ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( id )"}
{"focal": "build ( ) { if ( unset ) { return null ; } return ff . id ( new java . util . HashSet < org . opengis . filter . identity . Identifier > ( ids ) ) ; }", "testMethod": "halo ( ) { org . geotools . brewer . styling . builder . HaloBuilder b = new org . geotools . brewer . styling . builder . HaloBuilder ( null ) ; org . opengis . style . Halo halo = b . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( halo )", "total": "halo ( ) { org . geotools . brewer . styling . builder . HaloBuilder b = new org . geotools . brewer . styling . builder . HaloBuilder ( null ) ; org . opengis . style . Halo halo = b . build ( ) ; \"<AssertPlaceHolder>\" ; } build ( ) { if ( unset ) { return null ; } return ff . id ( new java . util . HashSet < org . opengis . filter . identity . Identifier > ( ids ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( halo )"}
{"focal": "getConfiguration ( ) { return org . apache . hadoop . hbase . replication . regionserver . TestReplicationSourceManager . conf ; }", "testMethod": "testYankingRegionFromUnderIt ( ) { final org . apache . hadoop . hbase . Server server = new org . apache . hadoop . hbase . util . MockServer ( org . apache . hadoop . hbase . regionserver . handler . TestOpenRegionHandler . HTU ) ; final org . apache . hadoop . hbase . regionserver . RegionServerServices rss = new org . apache . hadoop . hbase . util . MockRegionServerServices ( ) ; org . apache . hadoop . hbase . HTableDescriptor htd = org . apache . hadoop . hbase . regionserver . handler . TestOpenRegionHandler . TEST_HTD ; final org . apache . hadoop . hbase . HRegionInfo hri = TEST_HRI ; org . apache . hadoop . hbase . regionserver . HRegion region = org . apache . hadoop . hbase . regionserver . HRegion . createHRegion ( hri , org . apache . hadoop . hbase . regionserver . handler . TestOpenRegionHandler . HTU . getDataTestDir ( ) , org . apache . hadoop . hbase . regionserver . handler . TestOpenRegionHandler . HTU . getConfiguration ( ) , htd ) ; \"<AssertPlaceHolder>\" ; try { org . apache . hadoop . hbase . regionserver . handler . OpenRegionHandler handler = new org . apache . hadoop . hbase . regionserver . handler . OpenRegionHandler ( server , rss , hri , htd ) { org . apache . hadoop . hbase . regionserver . HRegion openRegion ( ) { org . apache . hadoop . hbase . regionserver . HRegion region = super . openRegion ( ) ; org . apache . hadoop . hbase . zookeeper . ZooKeeperWatcher zkw = this . server . getZooKeeper ( ) ; java . lang . String node = org . apache . hadoop . hbase . zookeeper . ZKAssign . getNodeName ( zkw , hri . getEncodedName ( ) ) ; try { org . apache . hadoop . hbase . zookeeper . ZKUtil . deleteNodeFailSilent ( zkw , node ) ; } catch ( org . apache . zookeeper . KeeperException e ) { throw new java . lang . RuntimeException ( ( \"Ugh<sp>failed<sp>delete<sp>of<sp>\" + node ) , e ) ; } return region ; } } ; handler . process ( ) ; org . apache . hadoop . hbase . zookeeper . ZKAssign . createNodeOffline ( server . getZooKeeper ( ) , hri , server . getServerName ( ) ) ; handler . process ( ) ; } finally { org . apache . hadoop . hbase . regionserver . HRegion . closeHRegion ( region ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( region )", "total": "testYankingRegionFromUnderIt ( ) { final org . apache . hadoop . hbase . Server server = new org . apache . hadoop . hbase . util . MockServer ( org . apache . hadoop . hbase . regionserver . handler . TestOpenRegionHandler . HTU ) ; final org . apache . hadoop . hbase . regionserver . RegionServerServices rss = new org . apache . hadoop . hbase . util . MockRegionServerServices ( ) ; org . apache . hadoop . hbase . HTableDescriptor htd = org . apache . hadoop . hbase . regionserver . handler . TestOpenRegionHandler . TEST_HTD ; final org . apache . hadoop . hbase . HRegionInfo hri = TEST_HRI ; org . apache . hadoop . hbase . regionserver . HRegion region = org . apache . hadoop . hbase . regionserver . HRegion . createHRegion ( hri , org . apache . hadoop . hbase . regionserver . handler . TestOpenRegionHandler . HTU . getDataTestDir ( ) , org . apache . hadoop . hbase . regionserver . handler . TestOpenRegionHandler . HTU . getConfiguration ( ) , htd ) ; \"<AssertPlaceHolder>\" ; try { org . apache . hadoop . hbase . regionserver . handler . OpenRegionHandler handler = new org . apache . hadoop . hbase . regionserver . handler . OpenRegionHandler ( server , rss , hri , htd ) { org . apache . hadoop . hbase . regionserver . HRegion openRegion ( ) { org . apache . hadoop . hbase . regionserver . HRegion region = super . openRegion ( ) ; org . apache . hadoop . hbase . zookeeper . ZooKeeperWatcher zkw = this . server . getZooKeeper ( ) ; java . lang . String node = org . apache . hadoop . hbase . zookeeper . ZKAssign . getNodeName ( zkw , hri . getEncodedName ( ) ) ; try { org . apache . hadoop . hbase . zookeeper . ZKUtil . deleteNodeFailSilent ( zkw , node ) ; } catch ( org . apache . zookeeper . KeeperException e ) { throw new java . lang . RuntimeException ( ( \"Ugh<sp>failed<sp>delete<sp>of<sp>\" + node ) , e ) ; } return region ; } } ; handler . process ( ) ; org . apache . hadoop . hbase . zookeeper . ZKAssign . createNodeOffline ( server . getZooKeeper ( ) , hri , server . getServerName ( ) ) ; handler . process ( ) ; } finally { org . apache . hadoop . hbase . regionserver . HRegion . closeHRegion ( region ) ; } } getConfiguration ( ) { return org . apache . hadoop . hbase . replication . regionserver . TestReplicationSourceManager . conf ; }", "answer": "org . junit . Assert . assertNotNull ( region )"}
{"focal": "getName ( ) { return name ; }", "testMethod": "testListAggregates ( ) { java . util . List < com . iwave . ext . netapp . AggregateInfo > aggregates = com . iwave . ext . netapp . MiscTests . netAppFacade . listAggregates ( null ) ; for ( com . iwave . ext . netapp . AggregateInfo aggregateInfo : aggregates ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( aggregateInfo . getName ( ) )", "total": "testListAggregates ( ) { java . util . List < com . iwave . ext . netapp . AggregateInfo > aggregates = com . iwave . ext . netapp . MiscTests . netAppFacade . listAggregates ( null ) ; for ( com . iwave . ext . netapp . AggregateInfo aggregateInfo : aggregates ) { \"<AssertPlaceHolder>\" ; } } getName ( ) { return name ; }", "answer": "org . junit . Assert . assertNotNull ( aggregateInfo . getName ( ) )"}
{"focal": "getEntry ( java . lang . String ) { return org . nuxeo . ecm . restapi . server . jaxrs . directory . DirectorySessionRunner . withDirectorySession ( directory , new org . nuxeo . ecm . restapi . server . jaxrs . directory . DirectorySessionRunner < java . lang . Object > ( ) { @ org . nuxeo . ecm . restapi . server . jaxrs . directory . Override java . lang . Object run ( org . nuxeo . ecm . directory . Session session ) { org . nuxeo . ecm . core . api . DocumentModel entry = session . getEntry ( entryId ) ; if ( entry == null ) { throw new org . nuxeo . ecm . webengine . model . exceptions . WebResourceNotFoundException ( \"Entry<sp>not<sp>found\" ) ; } return newObject ( \"directoryEntry\" , new org . nuxeo . ecm . directory . api . DirectoryEntry ( directory . getName ( ) , entry ) , entryId ) ; } } ) ; }", "testMethod": "readerCanGetEntry ( ) { dummyLogin . login ( org . nuxeo . ecm . directory . multi . TestMultiDirectorySecurity1 . READER_USER ) ; org . nuxeo . ecm . core . api . DocumentModel entry ; entry = dir . getEntry ( \"1\" ) ; \"<AssertPlaceHolder>\" ; dummyLogin . logout ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( entry )", "total": "readerCanGetEntry ( ) { dummyLogin . login ( org . nuxeo . ecm . directory . multi . TestMultiDirectorySecurity1 . READER_USER ) ; org . nuxeo . ecm . core . api . DocumentModel entry ; entry = dir . getEntry ( \"1\" ) ; \"<AssertPlaceHolder>\" ; dummyLogin . logout ( ) ; } getEntry ( java . lang . String ) { return org . nuxeo . ecm . restapi . server . jaxrs . directory . DirectorySessionRunner . withDirectorySession ( directory , new org . nuxeo . ecm . restapi . server . jaxrs . directory . DirectorySessionRunner < java . lang . Object > ( ) { @ org . nuxeo . ecm . restapi . server . jaxrs . directory . Override java . lang . Object run ( org . nuxeo . ecm . directory . Session session ) { org . nuxeo . ecm . core . api . DocumentModel entry = session . getEntry ( entryId ) ; if ( entry == null ) { throw new org . nuxeo . ecm . webengine . model . exceptions . WebResourceNotFoundException ( \"Entry<sp>not<sp>found\" ) ; } return newObject ( \"directoryEntry\" , new org . nuxeo . ecm . directory . api . DirectoryEntry ( directory . getName ( ) , entry ) , entryId ) ; } } ) ; }", "answer": "org . junit . Assert . assertNotNull ( entry )"}
{"focal": "getBitFingerprint ( org . openscience . cdk . interfaces . IAtomContainer ) { return getBitFingerprint ( container , null ) ; }", "testMethod": "iminesDetectionDoesntCauseNPE ( ) { org . openscience . cdk . interfaces . IAtomContainer pyrazole = new org . openscience . cdk . AtomContainer ( 6 , 6 , 0 , 0 ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"H\" , 0 , 0 ) ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"N\" , 0 , 0 ) ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"C\" , 0 , 1 ) ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"C\" , 0 , 1 ) ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"C\" , 0 , 1 ) ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"N\" , 0 , 0 ) ) ; pyrazole . addBond ( 0 , 1 , IBond . Order . SINGLE ) ; pyrazole . addBond ( 1 , 2 , IBond . Order . SINGLE ) ; pyrazole . addBond ( 2 , 3 , IBond . Order . DOUBLE ) ; pyrazole . addBond ( 3 , 4 , IBond . Order . SINGLE ) ; pyrazole . addBond ( 4 , 5 , IBond . Order . DOUBLE ) ; pyrazole . addBond ( 1 , 5 , IBond . Order . SINGLE ) ; org . openscience . cdk . fingerprint . CircularFingerprinter circ = new org . openscience . cdk . fingerprint . CircularFingerprinter ( CircularFingerprinter . CLASS_FCFP2 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( circ . getBitFingerprint ( pyrazole ) )", "total": "iminesDetectionDoesntCauseNPE ( ) { org . openscience . cdk . interfaces . IAtomContainer pyrazole = new org . openscience . cdk . AtomContainer ( 6 , 6 , 0 , 0 ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"H\" , 0 , 0 ) ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"N\" , 0 , 0 ) ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"C\" , 0 , 1 ) ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"C\" , 0 , 1 ) ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"C\" , 0 , 1 ) ) ; pyrazole . addAtom ( org . openscience . cdk . fingerprint . CircularFingerprinterTest . atom ( \"N\" , 0 , 0 ) ) ; pyrazole . addBond ( 0 , 1 , IBond . Order . SINGLE ) ; pyrazole . addBond ( 1 , 2 , IBond . Order . SINGLE ) ; pyrazole . addBond ( 2 , 3 , IBond . Order . DOUBLE ) ; pyrazole . addBond ( 3 , 4 , IBond . Order . SINGLE ) ; pyrazole . addBond ( 4 , 5 , IBond . Order . DOUBLE ) ; pyrazole . addBond ( 1 , 5 , IBond . Order . SINGLE ) ; org . openscience . cdk . fingerprint . CircularFingerprinter circ = new org . openscience . cdk . fingerprint . CircularFingerprinter ( CircularFingerprinter . CLASS_FCFP2 ) ; \"<AssertPlaceHolder>\" ; } getBitFingerprint ( org . openscience . cdk . interfaces . IAtomContainer ) { return getBitFingerprint ( container , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( circ . getBitFingerprint ( pyrazole ) )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "shouldSaveAndReturnManyEntities ( ) { org . springframework . data . neo4j . examples . movies . domain . User michal = new org . springframework . data . neo4j . examples . movies . domain . User ( \"Michal\" ) ; org . springframework . data . neo4j . examples . movies . domain . User adam = new org . springframework . data . neo4j . examples . movies . domain . User ( \"Adam\" ) ; org . springframework . data . neo4j . examples . movies . domain . User daniela = new org . springframework . data . neo4j . examples . movies . domain . User ( \"Daniela\" ) ; java . util . List < org . springframework . data . neo4j . examples . movies . domain . User > users = java . util . Arrays . asList ( michal , adam , daniela ) ; java . lang . Iterable < org . springframework . data . neo4j . examples . movies . domain . User > savedUsers = userRepository . saveAll ( users ) ; for ( org . springframework . data . neo4j . examples . movies . domain . User user : savedUsers ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( user . getId ( ) )", "total": "shouldSaveAndReturnManyEntities ( ) { org . springframework . data . neo4j . examples . movies . domain . User michal = new org . springframework . data . neo4j . examples . movies . domain . User ( \"Michal\" ) ; org . springframework . data . neo4j . examples . movies . domain . User adam = new org . springframework . data . neo4j . examples . movies . domain . User ( \"Adam\" ) ; org . springframework . data . neo4j . examples . movies . domain . User daniela = new org . springframework . data . neo4j . examples . movies . domain . User ( \"Daniela\" ) ; java . util . List < org . springframework . data . neo4j . examples . movies . domain . User > users = java . util . Arrays . asList ( michal , adam , daniela ) ; java . lang . Iterable < org . springframework . data . neo4j . examples . movies . domain . User > savedUsers = userRepository . saveAll ( users ) ; for ( org . springframework . data . neo4j . examples . movies . domain . User user : savedUsers ) { \"<AssertPlaceHolder>\" ; } } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( user . getId ( ) )"}
{"focal": "processEntry ( org . apache . abdera . protocol . server . RequestContext , org . apache . abdera . protocol . server . CollectionAdapter ) { java . lang . String method = context . getMethod ( ) ; if ( method . equalsIgnoreCase ( \"GET\" ) ) { return adapter . getEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"POST\" ) ) { return adapter . postEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"PUT\" ) ) { return adapter . putEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"DELETE\" ) ) { return adapter . deleteEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"HEAD\" ) ) { return adapter . headEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"OPTIONS\" ) ) { return adapter . optionsEntry ( context ) ; } else { return null ; } }", "testMethod": "testProcessEntryHead ( ) { org . easymock . EasyMock . replay ( responseMock ) ; org . easymock . EasyMock . expect ( requestMock . getMethod ( ) ) . andReturn ( \"HEAD\" ) ; org . easymock . EasyMock . replay ( requestMock ) ; org . easymock . EasyMock . expect ( adapterMock . headEntry ( requestMock ) ) . andReturn ( responseMock ) ; org . easymock . EasyMock . replay ( adapterMock ) ; org . apache . abdera . protocol . server . ResponseContext response = processor . processEntry ( requestMock , adapterMock ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testProcessEntryHead ( ) { org . easymock . EasyMock . replay ( responseMock ) ; org . easymock . EasyMock . expect ( requestMock . getMethod ( ) ) . andReturn ( \"HEAD\" ) ; org . easymock . EasyMock . replay ( requestMock ) ; org . easymock . EasyMock . expect ( adapterMock . headEntry ( requestMock ) ) . andReturn ( responseMock ) ; org . easymock . EasyMock . replay ( adapterMock ) ; org . apache . abdera . protocol . server . ResponseContext response = processor . processEntry ( requestMock , adapterMock ) ; \"<AssertPlaceHolder>\" ; } processEntry ( org . apache . abdera . protocol . server . RequestContext , org . apache . abdera . protocol . server . CollectionAdapter ) { java . lang . String method = context . getMethod ( ) ; if ( method . equalsIgnoreCase ( \"GET\" ) ) { return adapter . getEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"POST\" ) ) { return adapter . postEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"PUT\" ) ) { return adapter . putEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"DELETE\" ) ) { return adapter . deleteEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"HEAD\" ) ) { return adapter . headEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"OPTIONS\" ) ) { return adapter . optionsEntry ( context ) ; } else { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "getCachedRow ( ) { return cachedRow ; }", "testMethod": "withRowID ( ) { java . util . Properties properties = new java . util . Properties ( ) ; org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( ) ; properties . setProperty ( AccumuloSerDeParameters . COLUMN_MAPPINGS , \"cf:f1,:rowID,cf:f2,cf:f3\" ) ; properties . setProperty ( serdeConstants . LIST_COLUMNS , \"field1,field2,field3,field4\" ) ; serde . initialize ( conf , properties ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( serde . getCachedRow ( ) )", "total": "withRowID ( ) { java . util . Properties properties = new java . util . Properties ( ) ; org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( ) ; properties . setProperty ( AccumuloSerDeParameters . COLUMN_MAPPINGS , \"cf:f1,:rowID,cf:f2,cf:f3\" ) ; properties . setProperty ( serdeConstants . LIST_COLUMNS , \"field1,field2,field3,field4\" ) ; serde . initialize ( conf , properties ) ; \"<AssertPlaceHolder>\" ; } getCachedRow ( ) { return cachedRow ; }", "answer": "org . junit . Assert . assertNotNull ( serde . getCachedRow ( ) )"}
{"focal": "parseYangSource ( java . lang . String ) { return org . opendaylight . yangtools . yang . stmt . StmtTestUtils . parseYangSource ( yangSourcePath , StatementParserMode . DEFAULT_MODE , null ) ; }", "testMethod": "yang10UnquotedStrTest2 ( ) { final org . opendaylight . yangtools . yang . model . api . SchemaContext schemaContext = org . opendaylight . yangtools . yang . stmt . StmtTestUtils . parseYangSource ( \"/rfc7950/bug6886/yang10/foo2.yang\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( schemaContext )", "total": "yang10UnquotedStrTest2 ( ) { final org . opendaylight . yangtools . yang . model . api . SchemaContext schemaContext = org . opendaylight . yangtools . yang . stmt . StmtTestUtils . parseYangSource ( \"/rfc7950/bug6886/yang10/foo2.yang\" ) ; \"<AssertPlaceHolder>\" ; } parseYangSource ( java . lang . String ) { return org . opendaylight . yangtools . yang . stmt . StmtTestUtils . parseYangSource ( yangSourcePath , StatementParserMode . DEFAULT_MODE , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( schemaContext )"}
{"focal": "partialLinkText ( java . lang . String ) { if ( text == null ) throw new java . lang . IllegalArgumentException ( \"Cannot<sp>find<sp>elements<sp>when<sp>text<sp>is<sp>null.\" ) ; return new io . selendroid . server . model . By . ByPartialLinkText ( text ) ; }", "testMethod": "shouldLongPressOnElement ( ) { openStartActivity ( ) ; org . openqa . selenium . WebElement button = driver ( ) . findElement ( org . openqa . selenium . By . id ( \"buttonTest\" ) ) ; org . openqa . selenium . interactions . touch . TouchActions longPress = new org . openqa . selenium . interactions . touch . TouchActions ( driver ( ) ) . longPress ( button ) ; longPress . perform ( ) ; org . openqa . selenium . WebElement text = driver ( ) . findElement ( org . openqa . selenium . By . partialLinkText ( \"Long<sp>Press<sp>Tap\" ) ) ; \"<AssertPlaceHolder>\" ; driver ( ) . findElement ( org . openqa . selenium . By . id ( \"button1\" ) ) . click ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( text )", "total": "shouldLongPressOnElement ( ) { openStartActivity ( ) ; org . openqa . selenium . WebElement button = driver ( ) . findElement ( org . openqa . selenium . By . id ( \"buttonTest\" ) ) ; org . openqa . selenium . interactions . touch . TouchActions longPress = new org . openqa . selenium . interactions . touch . TouchActions ( driver ( ) ) . longPress ( button ) ; longPress . perform ( ) ; org . openqa . selenium . WebElement text = driver ( ) . findElement ( org . openqa . selenium . By . partialLinkText ( \"Long<sp>Press<sp>Tap\" ) ) ; \"<AssertPlaceHolder>\" ; driver ( ) . findElement ( org . openqa . selenium . By . id ( \"button1\" ) ) . click ( ) ; } partialLinkText ( java . lang . String ) { if ( text == null ) throw new java . lang . IllegalArgumentException ( \"Cannot<sp>find<sp>elements<sp>when<sp>text<sp>is<sp>null.\" ) ; return new io . selendroid . server . model . By . ByPartialLinkText ( text ) ; }", "answer": "org . junit . Assert . assertNotNull ( text )"}
{"focal": "getSessionKey ( ) { if ( header . hasKey ( ) ) { com . rhythm . pb . RequestProtos . SessionKey key = header . getKey ( ) ; if ( key . hasKey ( ) ) { return key . getKey ( ) ; } } else if ( ( sessionKey ) != null ) { return sessionKey . getKey ( ) ; } return \"\" ; }", "testMethod": "testConnectionCreateSession ( ) { System . out . println ( \"createSession<sp>-<sp>LouieConnection\" ) ; com . rhythm . louie . connection . LouieConnection testConn = com . rhythm . louie . connection . LouieConnectionFactory . getLocalConnection ( com . rhythm . louie . connection . Identity . createJUnitIdentity ( ) ) ; com . rhythm . pb . RequestProtos . SessionKey key = testConn . getSessionKey ( ) ; \"<AssertPlaceHolder>\" ; System . out . println ( key ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( key )", "total": "testConnectionCreateSession ( ) { System . out . println ( \"createSession<sp>-<sp>LouieConnection\" ) ; com . rhythm . louie . connection . LouieConnection testConn = com . rhythm . louie . connection . LouieConnectionFactory . getLocalConnection ( com . rhythm . louie . connection . Identity . createJUnitIdentity ( ) ) ; com . rhythm . pb . RequestProtos . SessionKey key = testConn . getSessionKey ( ) ; \"<AssertPlaceHolder>\" ; System . out . println ( key ) ; } getSessionKey ( ) { if ( header . hasKey ( ) ) { com . rhythm . pb . RequestProtos . SessionKey key = header . getKey ( ) ; if ( key . hasKey ( ) ) { return key . getKey ( ) ; } } else if ( ( sessionKey ) != null ) { return sessionKey . getKey ( ) ; } return \"\" ; }", "answer": "org . junit . Assert . assertNotNull ( key )"}
{"focal": "getContentDom ( ) { if ( ( mContentDom ) == null ) { mContentDom = ( ( org . odftoolkit . odfdom . dom . OdfContentDom ) ( getFileDom ( org . odftoolkit . odfdom . dom . OdfSchemaDocument . OdfXMLFile . CONTENT ) ) ) ; } return mContentDom ; }", "testMethod": "testGetContentRootDoc ( ) { try { org . odftoolkit . simple . Document odt = org . odftoolkit . simple . Document . loadDocument ( org . odftoolkit . simple . utils . ResourceUtilities . getAbsolutePath ( org . odftoolkit . simple . DocumentTest . TEST_FILE_WITHOUT_OPT ) ) ; org . odftoolkit . odfdom . dom . OdfContentDom odfcon = odt . getContentDom ( ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { org . odftoolkit . simple . DocumentTest . LOG . log ( Level . SEVERE , e . getMessage ( ) , e ) ; org . junit . Assert . fail ( e . getMessage ( ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( odfcon )", "total": "testGetContentRootDoc ( ) { try { org . odftoolkit . simple . Document odt = org . odftoolkit . simple . Document . loadDocument ( org . odftoolkit . simple . utils . ResourceUtilities . getAbsolutePath ( org . odftoolkit . simple . DocumentTest . TEST_FILE_WITHOUT_OPT ) ) ; org . odftoolkit . odfdom . dom . OdfContentDom odfcon = odt . getContentDom ( ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { org . odftoolkit . simple . DocumentTest . LOG . log ( Level . SEVERE , e . getMessage ( ) , e ) ; org . junit . Assert . fail ( e . getMessage ( ) ) ; } } getContentDom ( ) { if ( ( mContentDom ) == null ) { mContentDom = ( ( org . odftoolkit . odfdom . dom . OdfContentDom ) ( getFileDom ( org . odftoolkit . odfdom . dom . OdfSchemaDocument . OdfXMLFile . CONTENT ) ) ) ; } return mContentDom ; }", "answer": "org . junit . Assert . assertNotNull ( odfcon )"}
{"focal": "getStatement ( ) { return jdbcLink . getStatement ( ) ; }", "testMethod": "testStmExecConnectFail ( ) { ch . rgw . tools . JdbcLink link = new ch . rgw . tools . JdbcLink ( \"org.h2.Driver\" , \"jdbc:h2:mem:test_mem\" , \"\" ) ; link . connect ( \"\" , \"\" ) ; ch . rgw . tools . JdbcLink . Stm stm = link . getStatement ( ) ; \"<AssertPlaceHolder>\" ; link . disconnect ( ) ; stm . delete ( ) ; try { stm . exec ( \"\" ) ; org . junit . Assert . fail ( \"Expected<sp>Exception<sp>not<sp>thrown!\" ) ; } catch ( ch . rgw . tools . JdbcLinkException je ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( stm )", "total": "testStmExecConnectFail ( ) { ch . rgw . tools . JdbcLink link = new ch . rgw . tools . JdbcLink ( \"org.h2.Driver\" , \"jdbc:h2:mem:test_mem\" , \"\" ) ; link . connect ( \"\" , \"\" ) ; ch . rgw . tools . JdbcLink . Stm stm = link . getStatement ( ) ; \"<AssertPlaceHolder>\" ; link . disconnect ( ) ; stm . delete ( ) ; try { stm . exec ( \"\" ) ; org . junit . Assert . fail ( \"Expected<sp>Exception<sp>not<sp>thrown!\" ) ; } catch ( ch . rgw . tools . JdbcLinkException je ) { } } getStatement ( ) { return jdbcLink . getStatement ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( stm )"}
{"focal": "getBuilder ( ) { return org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ; }", "testMethod": "testNewIsotope_int_String_double_double ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . AbstractChemObjectBuilderTest . rootObject . getBuilder ( ) ; org . openscience . cdk . interfaces . IIsotope isotope = builder . newInstance ( org . openscience . cdk . interfaces . IIsotope . class , 6 , \"C\" , 1.0 , 1.0 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( isotope )", "total": "testNewIsotope_int_String_double_double ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . AbstractChemObjectBuilderTest . rootObject . getBuilder ( ) ; org . openscience . cdk . interfaces . IIsotope isotope = builder . newInstance ( org . openscience . cdk . interfaces . IIsotope . class , 6 , \"C\" , 1.0 , 1.0 ) ; \"<AssertPlaceHolder>\" ; } getBuilder ( ) { return org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( isotope )"}
{"focal": "createAddressFromPerson ( com . lofidewanto . demo . server . domain . Address , com . lofidewanto . demo . server . domain . Person ) { com . lofidewanto . demo . server . domain . Address addressSaved = addressRepository . save ( ( ( com . lofidewanto . demo . server . domain . AddressImpl ) ( address ) ) ) ; com . lofidewanto . demo . server . service . person . PersonServiceImpl . logger . info ( ( \"Following<sp>address<sp>created:<sp>\" + ( addressSaved . getStreet ( ) ) ) ) ; person . addAddress ( address ) ; try { com . lofidewanto . demo . server . domain . Person personSaved = personRepository . save ( ( ( com . lofidewanto . demo . server . domain . PersonImpl ) ( person ) ) ) ; com . lofidewanto . demo . server . service . person . PersonServiceImpl . logger . info ( ( \"Following<sp>person<sp>created:<sp>\" + ( personSaved . getName ( ) ) ) ) ; return personSaved ; } catch ( java . lang . Exception e ) { com . lofidewanto . demo . server . service . person . PersonServiceImpl . logger . error ( ( \"Error<sp>saving<sp>the<sp>person<sp>and<sp>address<sp>-<sp>exception:<sp>\" + e ) ) ; throw new com . lofidewanto . demo . server . exception . CreatePersonException ( ) ; } }", "testMethod": "testCreateAddressFromPerson ( ) { com . lofidewanto . demo . server . domain . Person person = new com . lofidewanto . demo . server . domain . PersonImpl ( ) ; com . lofidewanto . demo . server . domain . Address address = new com . lofidewanto . demo . server . domain . AddressImpl ( ) ; com . lofidewanto . demo . server . domain . Person createAddressFromPerson = personService . createAddressFromPerson ( address , person ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( createAddressFromPerson )", "total": "testCreateAddressFromPerson ( ) { com . lofidewanto . demo . server . domain . Person person = new com . lofidewanto . demo . server . domain . PersonImpl ( ) ; com . lofidewanto . demo . server . domain . Address address = new com . lofidewanto . demo . server . domain . AddressImpl ( ) ; com . lofidewanto . demo . server . domain . Person createAddressFromPerson = personService . createAddressFromPerson ( address , person ) ; \"<AssertPlaceHolder>\" ; } createAddressFromPerson ( com . lofidewanto . demo . server . domain . Address , com . lofidewanto . demo . server . domain . Person ) { com . lofidewanto . demo . server . domain . Address addressSaved = addressRepository . save ( ( ( com . lofidewanto . demo . server . domain . AddressImpl ) ( address ) ) ) ; com . lofidewanto . demo . server . service . person . PersonServiceImpl . logger . info ( ( \"Following<sp>address<sp>created:<sp>\" + ( addressSaved . getStreet ( ) ) ) ) ; person . addAddress ( address ) ; try { com . lofidewanto . demo . server . domain . Person personSaved = personRepository . save ( ( ( com . lofidewanto . demo . server . domain . PersonImpl ) ( person ) ) ) ; com . lofidewanto . demo . server . service . person . PersonServiceImpl . logger . info ( ( \"Following<sp>person<sp>created:<sp>\" + ( personSaved . getName ( ) ) ) ) ; return personSaved ; } catch ( java . lang . Exception e ) { com . lofidewanto . demo . server . service . person . PersonServiceImpl . logger . error ( ( \"Error<sp>saving<sp>the<sp>person<sp>and<sp>address<sp>-<sp>exception:<sp>\" + e ) ) ; throw new com . lofidewanto . demo . server . exception . CreatePersonException ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( createAddressFromPerson )"}
{"focal": "makeArrayClass ( java . lang . Class ) { return org . openl . types . java . Array . newInstance ( c , 0 ) . getClass ( ) ; }", "testMethod": "testArray ( ) { org . openl . types . IOpenMethod method = engineFactory . getCompiledOpenClass ( ) . getOpenClass ( ) . getMethod ( \"DTTable2\" , new org . openl . types . IOpenClass [ ] { org . openl . types . java . JavaOpenClass . getOpenClass ( org . openl . types . java . JavaOpenClass . makeArrayClass ( java . lang . String . class ) ) } ) ; \"<AssertPlaceHolder>\" ; java . lang . Object target = engineFactory . newEngineInstance ( ) ; org . openl . vm . IRuntimeEnv env = new org . openl . rules . vm . SimpleRulesVM ( ) . getRuntimeEnv ( ) ; method . invoke ( target , new java . lang . Object [ ] { new java . lang . String [ ] { \"ONE\" , \"ONE2\" } } , env ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( method )", "total": "testArray ( ) { org . openl . types . IOpenMethod method = engineFactory . getCompiledOpenClass ( ) . getOpenClass ( ) . getMethod ( \"DTTable2\" , new org . openl . types . IOpenClass [ ] { org . openl . types . java . JavaOpenClass . getOpenClass ( org . openl . types . java . JavaOpenClass . makeArrayClass ( java . lang . String . class ) ) } ) ; \"<AssertPlaceHolder>\" ; java . lang . Object target = engineFactory . newEngineInstance ( ) ; org . openl . vm . IRuntimeEnv env = new org . openl . rules . vm . SimpleRulesVM ( ) . getRuntimeEnv ( ) ; method . invoke ( target , new java . lang . Object [ ] { new java . lang . String [ ] { \"ONE\" , \"ONE2\" } } , env ) ; } makeArrayClass ( java . lang . Class ) { return org . openl . types . java . Array . newInstance ( c , 0 ) . getClass ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( method )"}
{"focal": "addFeature ( de . devsurf . injection . guice . scanner . features . ScannerFeature ) { _collector . addScannerFeature ( listener ) ; }", "testMethod": "createDynamicModule ( ) { de . devsurf . injection . guice . scanner . StartupModule startup = de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . asm . ASMClasspathScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( de . devsurf . injection . guice . test . configuration . file . both . BothFileConfigTests . class ) ) ; startup . addFeature ( de . devsurf . injection . guice . configuration . features . ConfigurationFeature . class ) ; com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( startup ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( injector )", "total": "createDynamicModule ( ) { de . devsurf . injection . guice . scanner . StartupModule startup = de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . asm . ASMClasspathScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( de . devsurf . injection . guice . test . configuration . file . both . BothFileConfigTests . class ) ) ; startup . addFeature ( de . devsurf . injection . guice . configuration . features . ConfigurationFeature . class ) ; com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( startup ) ; \"<AssertPlaceHolder>\" ; } addFeature ( de . devsurf . injection . guice . scanner . features . ScannerFeature ) { _collector . addScannerFeature ( listener ) ; }", "answer": "org . junit . Assert . assertNotNull ( injector )"}
{"focal": "build ( ) { return new com . baeldung . creational . builder . BankAccount ( this ) ; }", "testMethod": "whenCreatingDockerClient_thenReturnDefaultInstance ( ) { com . github . dockerjava . core . DefaultDockerClientConfig . Builder config = com . github . dockerjava . core . DefaultDockerClientConfig . createDefaultConfigBuilder ( ) ; com . github . dockerjava . api . DockerClient dockerClient = com . github . dockerjava . core . DockerClientBuilder . getInstance ( config ) . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dockerClient )", "total": "whenCreatingDockerClient_thenReturnDefaultInstance ( ) { com . github . dockerjava . core . DefaultDockerClientConfig . Builder config = com . github . dockerjava . core . DefaultDockerClientConfig . createDefaultConfigBuilder ( ) ; com . github . dockerjava . api . DockerClient dockerClient = com . github . dockerjava . core . DockerClientBuilder . getInstance ( config ) . build ( ) ; \"<AssertPlaceHolder>\" ; } build ( ) { return new com . baeldung . creational . builder . BankAccount ( this ) ; }", "answer": "org . junit . Assert . assertNotNull ( dockerClient )"}
{"focal": "parse ( java . io . File ) { return org . walkmod . javalang . ASTManager . parse ( file , \"UTF-8\" ) ; }", "testMethod": "testConditionalLambda3 ( ) { java . io . File f = new java . io . File ( \"src/test/resources/lambda-failure-conditional3.txt\" ) ; org . walkmod . javalang . ast . CompilationUnit cu = org . walkmod . javalang . ASTManager . parse ( f ) ; \"<AssertPlaceHolder>\" ; System . out . println ( cu . toString ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( cu )", "total": "testConditionalLambda3 ( ) { java . io . File f = new java . io . File ( \"src/test/resources/lambda-failure-conditional3.txt\" ) ; org . walkmod . javalang . ast . CompilationUnit cu = org . walkmod . javalang . ASTManager . parse ( f ) ; \"<AssertPlaceHolder>\" ; System . out . println ( cu . toString ( ) ) ; } parse ( java . io . File ) { return org . walkmod . javalang . ASTManager . parse ( file , \"UTF-8\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( cu )"}
{"focal": "getIORegistry ( ) { return ioRegistry ; }", "testMethod": "testGetIORegistry ( ) { de . mirkosertic . gameengine . event . GameEventManager theEventManager = mock ( de . mirkosertic . gameengine . event . GameEventManager . class ) ; de . mirkosertic . gameengine . core . GameResourceLoader theResourceLoader = mock ( de . mirkosertic . gameengine . core . GameResourceLoader . class ) ; de . mirkosertic . gameengine . scriptengine . LUAScriptEngineFactory theScriptEngineFactory = mock ( de . mirkosertic . gameengine . scriptengine . LUAScriptEngineFactory . class ) ; de . mirkosertic . gameengine . core . GameRuntime theRuntime = new de . mirkosertic . gameengine . core . GameRuntime ( theEventManager , theResourceLoader , theScriptEngineFactory , new de . mirkosertic . gameengine . core . DefaultLogger ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( theRuntime . getIORegistry ( ) )", "total": "testGetIORegistry ( ) { de . mirkosertic . gameengine . event . GameEventManager theEventManager = mock ( de . mirkosertic . gameengine . event . GameEventManager . class ) ; de . mirkosertic . gameengine . core . GameResourceLoader theResourceLoader = mock ( de . mirkosertic . gameengine . core . GameResourceLoader . class ) ; de . mirkosertic . gameengine . scriptengine . LUAScriptEngineFactory theScriptEngineFactory = mock ( de . mirkosertic . gameengine . scriptengine . LUAScriptEngineFactory . class ) ; de . mirkosertic . gameengine . core . GameRuntime theRuntime = new de . mirkosertic . gameengine . core . GameRuntime ( theEventManager , theResourceLoader , theScriptEngineFactory , new de . mirkosertic . gameengine . core . DefaultLogger ( ) ) ; \"<AssertPlaceHolder>\" ; } getIORegistry ( ) { return ioRegistry ; }", "answer": "org . junit . Assert . assertNotNull ( theRuntime . getIORegistry ( ) )"}
{"focal": "createObjectBuilder ( ) { return javax . json . spi . JsonProvider . provider ( ) . createObjectBuilder ( ) ; }", "testMethod": "testObjectBuilder ( ) { javax . json . JsonBuilderFactory builderFactory = javax . json . Json . createBuilderFactory ( null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( builderFactory . createObjectBuilder ( ) )", "total": "testObjectBuilder ( ) { javax . json . JsonBuilderFactory builderFactory = javax . json . Json . createBuilderFactory ( null ) ; \"<AssertPlaceHolder>\" ; } createObjectBuilder ( ) { return javax . json . spi . JsonProvider . provider ( ) . createObjectBuilder ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( builderFactory . createObjectBuilder ( ) )"}
{"focal": "getAttributeMapping ( org . geotools . data . complex . util . XPathUtil . StepList ) { org . geotools . data . complex . AttributeMapping attMapping ; for ( java . util . Iterator < org . geotools . data . complex . AttributeMapping > it = attributeMappings . iterator ( ) ; it . hasNext ( ) ; ) { attMapping = ( ( org . geotools . data . complex . AttributeMapping ) ( it . next ( ) ) ) ; if ( exactPath . equals ( attMapping . getTargetXPath ( ) ) ) { return attMapping ; } } return null ; }", "testMethod": "testEqualsXpath ( ) { try ( org . geotools . data . complex . TestFeatureSource fsource = new org . geotools . data . complex . TestFeatureSource ( \"/test-data/index/\" , \"stationsIndexed.xml\" , \"http://www.stations.org/1.0\" , \"stationsIndexed\" ) ) { org . geotools . data . complex . AttributeMapping attMap = fsource . getMappedSource ( ) . getMapping ( ) . getAttributeMapping ( \"st:Station/st:name\" ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( attMap )", "total": "testEqualsXpath ( ) { try ( org . geotools . data . complex . TestFeatureSource fsource = new org . geotools . data . complex . TestFeatureSource ( \"/test-data/index/\" , \"stationsIndexed.xml\" , \"http://www.stations.org/1.0\" , \"stationsIndexed\" ) ) { org . geotools . data . complex . AttributeMapping attMap = fsource . getMappedSource ( ) . getMapping ( ) . getAttributeMapping ( \"st:Station/st:name\" ) ; \"<AssertPlaceHolder>\" ; } } getAttributeMapping ( org . geotools . data . complex . util . XPathUtil . StepList ) { org . geotools . data . complex . AttributeMapping attMapping ; for ( java . util . Iterator < org . geotools . data . complex . AttributeMapping > it = attributeMappings . iterator ( ) ; it . hasNext ( ) ; ) { attMapping = ( ( org . geotools . data . complex . AttributeMapping ) ( it . next ( ) ) ) ; if ( exactPath . equals ( attMapping . getTargetXPath ( ) ) ) { return attMapping ; } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( attMap )"}
{"focal": "readSchemaFileAsString ( java . lang . String ) { try { java . net . URL url = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( filePath ) ; if ( url != null ) { java . nio . file . Path path = java . nio . file . Paths . get ( url . toURI ( ) ) ; byte [ ] bytes = java . nio . file . Files . readAllBytes ( path ) ; return new java . lang . String ( bytes ) ; } } catch ( java . net . URISyntaxException e ) { org . kaaproject . kaa . server . common . dao . impl . sql . HibernateAbstractTest . LOG . error ( \"Can't<sp>generate<sp>configs<sp>{}\" , e ) ; } return null ; }", "testMethod": "saveUserConfigurationTest ( ) { org . kaaproject . kaa . common . dto . EndpointUserConfigurationDto configurationDto = generateEndpointUserConfigurationDto ( null , null , null , readSchemaFileAsString ( org . kaaproject . kaa . server . common . dao . service . UserConfigurationServiceImplTest . OVERRIDE_USER_DATA_JSON ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( configurationDto )", "total": "saveUserConfigurationTest ( ) { org . kaaproject . kaa . common . dto . EndpointUserConfigurationDto configurationDto = generateEndpointUserConfigurationDto ( null , null , null , readSchemaFileAsString ( org . kaaproject . kaa . server . common . dao . service . UserConfigurationServiceImplTest . OVERRIDE_USER_DATA_JSON ) ) ; \"<AssertPlaceHolder>\" ; } readSchemaFileAsString ( java . lang . String ) { try { java . net . URL url = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( filePath ) ; if ( url != null ) { java . nio . file . Path path = java . nio . file . Paths . get ( url . toURI ( ) ) ; byte [ ] bytes = java . nio . file . Files . readAllBytes ( path ) ; return new java . lang . String ( bytes ) ; } } catch ( java . net . URISyntaxException e ) { org . kaaproject . kaa . server . common . dao . impl . sql . HibernateAbstractTest . LOG . error ( \"Can't<sp>generate<sp>configs<sp>{}\" , e ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( configurationDto )"}
{"focal": "newInstance ( ch . epfl . gsn . storage . hibernate . DBConnectionInfo , java . lang . String , ch . epfl . gsn . beans . DataField [ ] , boolean ) { try { return new ch . epfl . gsn . storage . hibernate . HibernateStorage ( dbInfo , identifier , structure , unique ) ; } catch ( java . lang . RuntimeException e ) { ch . epfl . gsn . storage . hibernate . HibernateStorage . logger . error ( e . getMessage ( ) ) ; return null ; } }", "testMethod": "testPaginatedQueryWithoutCriterionWithLimit ( ) { int numberOfElements = 283 ; java . lang . String identifier = \"testPaginatedQueryWithoutCriterionWithLimit\" ; generateDataTest ( identifier , numberOfElements ) ; ch . epfl . gsn . beans . DataField [ ] structure = dataField . toArray ( new ch . epfl . gsn . beans . DataField [ ] { } ) ; ch . epfl . gsn . storage . hibernate . HibernateStorage storage = ch . epfl . gsn . storage . hibernate . HibernateStorage . newInstance ( ch . epfl . gsn . storage . hibernate . TestHibernateStorage . dbInfo , identifier , dataField . toArray ( new ch . epfl . gsn . beans . DataField [ ] { } ) , false ) ; \"<AssertPlaceHolder>\" ; int [ ] pageSizes = new int [ ] { 1 , 11 , numberOfElements / 2 , numberOfElements / 3 , ( numberOfElements / 3 ) - 1 , ( numberOfElements / 3 ) + 1 , numberOfElements - 1 , numberOfElements + 1 , numberOfElements * 2 } ; for ( int pageSize : pageSizes ) { System . out . println ( ( \"testPaginatedQueryWithoutCriterionWithLimit<sp>ASC<sp>with<sp>pageSize:<sp>\" + pageSize ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . asc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 1 ) , 1 , 1 ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . asc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 11 ) , 1 , 11 ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . asc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , ( ( numberOfElements / 10 ) + 1 ) ) , 1 , ( ( numberOfElements / 10 ) + 1 ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . asc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , ( ( numberOfElements / 10 ) - 1 ) ) , 1 , ( ( numberOfElements / 10 ) - 1 ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . asc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 0 ) , ( - 1 ) , ( - 1 ) ) ; } for ( int pageSize : pageSizes ) { System . out . println ( ( \"testPaginatedQueryWithoutCriterionWithLimit<sp>DESC<sp>with<sp>pageSize:<sp>\" + pageSize ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . desc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 1 ) , numberOfElements , numberOfElements ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . desc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 11 ) , numberOfElements , ( numberOfElements - 10 ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . desc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , ( ( numberOfElements / 10 ) + 1 ) ) , numberOfElements , ( ( numberOfElements - ( ( numberOfElements / 10 ) + 1 ) ) + 1 ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . desc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , ( ( numberOfElements / 10 ) - 1 ) ) , numberOfElements , ( ( numberOfElements - ( ( numberOfElements / 10 ) - 1 ) ) + 1 ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . desc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 0 ) , ( - 1 ) , ( - 1 ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( storage )", "total": "testPaginatedQueryWithoutCriterionWithLimit ( ) { int numberOfElements = 283 ; java . lang . String identifier = \"testPaginatedQueryWithoutCriterionWithLimit\" ; generateDataTest ( identifier , numberOfElements ) ; ch . epfl . gsn . beans . DataField [ ] structure = dataField . toArray ( new ch . epfl . gsn . beans . DataField [ ] { } ) ; ch . epfl . gsn . storage . hibernate . HibernateStorage storage = ch . epfl . gsn . storage . hibernate . HibernateStorage . newInstance ( ch . epfl . gsn . storage . hibernate . TestHibernateStorage . dbInfo , identifier , dataField . toArray ( new ch . epfl . gsn . beans . DataField [ ] { } ) , false ) ; \"<AssertPlaceHolder>\" ; int [ ] pageSizes = new int [ ] { 1 , 11 , numberOfElements / 2 , numberOfElements / 3 , ( numberOfElements / 3 ) - 1 , ( numberOfElements / 3 ) + 1 , numberOfElements - 1 , numberOfElements + 1 , numberOfElements * 2 } ; for ( int pageSize : pageSizes ) { System . out . println ( ( \"testPaginatedQueryWithoutCriterionWithLimit<sp>ASC<sp>with<sp>pageSize:<sp>\" + pageSize ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . asc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 1 ) , 1 , 1 ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . asc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 11 ) , 1 , 11 ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . asc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , ( ( numberOfElements / 10 ) + 1 ) ) , 1 , ( ( numberOfElements / 10 ) + 1 ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . asc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , ( ( numberOfElements / 10 ) - 1 ) ) , 1 , ( ( numberOfElements / 10 ) - 1 ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . asc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 0 ) , ( - 1 ) , ( - 1 ) ) ; } for ( int pageSize : pageSizes ) { System . out . println ( ( \"testPaginatedQueryWithoutCriterionWithLimit<sp>DESC<sp>with<sp>pageSize:<sp>\" + pageSize ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . desc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 1 ) , numberOfElements , numberOfElements ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . desc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 11 ) , numberOfElements , ( numberOfElements - 10 ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . desc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , ( ( numberOfElements / 10 ) + 1 ) ) , numberOfElements , ( ( numberOfElements - ( ( numberOfElements / 10 ) + 1 ) ) + 1 ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . desc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , ( ( numberOfElements / 10 ) - 1 ) ) , numberOfElements , ( ( numberOfElements - ( ( numberOfElements / 10 ) - 1 ) ) + 1 ) ) ; checkQueryResult ( storage . getStreamElements ( pageSize , org . hibernate . criterion . Order . desc ( \"timed\" ) , new org . hibernate . criterion . Criterion [ ] { } , 0 ) , ( - 1 ) , ( - 1 ) ) ; } } newInstance ( ch . epfl . gsn . storage . hibernate . DBConnectionInfo , java . lang . String , ch . epfl . gsn . beans . DataField [ ] , boolean ) { try { return new ch . epfl . gsn . storage . hibernate . HibernateStorage ( dbInfo , identifier , structure , unique ) ; } catch ( java . lang . RuntimeException e ) { ch . epfl . gsn . storage . hibernate . HibernateStorage . logger . error ( e . getMessage ( ) ) ; return null ; } }", "answer": "org . junit . Assert . assertNotNull ( storage )"}
{"focal": "getConnection ( ) { return connection ; }", "testMethod": "testJndiLookup4 ( ) { java . lang . System . setProperty ( Context . INITIAL_CONTEXT_FACTORY , \"org.osjava.sj.memory.MemoryContextFactory\" ) ; java . lang . System . setProperty ( \"org.osjava.sj.jndi.shared\" , \"true\" ) ; com . zaxxer . hikari . pool . InitialContext ic = new com . zaxxer . hikari . pool . InitialContext ( ) ; com . zaxxer . hikari . mocks . StubDataSource ds = new com . zaxxer . hikari . mocks . StubDataSource ( ) ; com . zaxxer . hikari . pool . Context subcontext = ic . createSubcontext ( \"java:/comp/env/jdbc\" ) ; subcontext . bind ( \"java:/comp/env/jdbc/myDS\" , ds ) ; com . zaxxer . hikari . HikariConfig config = com . zaxxer . hikari . pool . TestElf . newHikariConfig ( ) ; config . setDataSourceJNDI ( \"java:/comp/env/jdbc/myDS\" ) ; try ( com . zaxxer . hikari . HikariDataSource hds = new com . zaxxer . hikari . HikariDataSource ( config ) ; java . sql . Connection conn = hds . getConnection ( ) ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( conn )", "total": "testJndiLookup4 ( ) { java . lang . System . setProperty ( Context . INITIAL_CONTEXT_FACTORY , \"org.osjava.sj.memory.MemoryContextFactory\" ) ; java . lang . System . setProperty ( \"org.osjava.sj.jndi.shared\" , \"true\" ) ; com . zaxxer . hikari . pool . InitialContext ic = new com . zaxxer . hikari . pool . InitialContext ( ) ; com . zaxxer . hikari . mocks . StubDataSource ds = new com . zaxxer . hikari . mocks . StubDataSource ( ) ; com . zaxxer . hikari . pool . Context subcontext = ic . createSubcontext ( \"java:/comp/env/jdbc\" ) ; subcontext . bind ( \"java:/comp/env/jdbc/myDS\" , ds ) ; com . zaxxer . hikari . HikariConfig config = com . zaxxer . hikari . pool . TestElf . newHikariConfig ( ) ; config . setDataSourceJNDI ( \"java:/comp/env/jdbc/myDS\" ) ; try ( com . zaxxer . hikari . HikariDataSource hds = new com . zaxxer . hikari . HikariDataSource ( config ) ; java . sql . Connection conn = hds . getConnection ( ) ) { \"<AssertPlaceHolder>\" ; } } getConnection ( ) { return connection ; }", "answer": "org . junit . Assert . assertNotNull ( conn )"}
{"focal": "createTransaction ( org . apache . nifi . remote . TransferDirection ) { final int timeoutMillis = ( ( int ) ( config . getTimeout ( TimeUnit . MILLISECONDS ) ) ) ; org . apache . nifi . remote . PeerStatus peerStatus ; while ( ( peerStatus = peerSelector . getNextPeerStatus ( direction ) ) != null ) { org . apache . nifi . remote . client . http . HttpClient . logger . debug ( \"peerStatus={}\" , peerStatus ) ; final org . apache . nifi . remote . protocol . CommunicationsSession commSession = new org . apache . nifi . remote . io . http . HttpCommunicationsSession ( ) ; final java . lang . String nodeApiUrl = resolveNodeApiUrl ( peerStatus . getPeerDescription ( ) ) ; final java . lang . StringBuilder clusterUrls = new java . lang . StringBuilder ( ) ; config . getUrls ( ) . forEach ( ( url ) -> { if ( ( clusterUrls . length ( ) ) > 0 ) { clusterUrls . append ( \",\" ) ; clusterUrls . append ( url ) ; } } ) ; final org . apache . nifi . remote . Peer peer = new org . apache . nifi . remote . Peer ( peerStatus . getPeerDescription ( ) , commSession , nodeApiUrl , clusterUrls . toString ( ) ) ; final int penaltyMillis = ( ( int ) ( config . getPenalizationPeriod ( TimeUnit . MILLISECONDS ) ) ) ; java . lang . String portId = config . getPortIdentifier ( ) ; if ( org . apache . commons . lang3 . StringUtils . isEmpty ( portId ) ) { portId = siteInfoProvider . getPortIdentifier ( config . getPortName ( ) , direction ) ; if ( org . apache . commons . lang3 . StringUtils . isEmpty ( portId ) ) { peer . close ( ) ; throw new java . io . IOException ( ( \"Failed<sp>to<sp>determine<sp>the<sp>identifier<sp>of<sp>port<sp>\" + ( config . getPortName ( ) ) ) ) ; } } final org . apache . nifi . remote . util . SiteToSiteRestApiClient apiClient = new org . apache . nifi . remote . util . SiteToSiteRestApiClient ( config . getSslContext ( ) , config . getHttpProxy ( ) , config . getEventReporter ( ) ) ; apiClient . setBaseUrl ( peer . getUrl ( ) ) ; apiClient . setConnectTimeoutMillis ( timeoutMillis ) ; apiClient . setReadTimeoutMillis ( timeoutMillis ) ; apiClient . setCacheExpirationMillis ( config . getCacheExpiration ( TimeUnit . MILLISECONDS ) ) ; apiClient . setLocalAddress ( config . getLocalAddress ( ) ) ; apiClient . setCompress ( config . isUseCompression ( ) ) ; apiClient . setRequestExpirationMillis ( config . getIdleConnectionExpiration ( TimeUnit . MILLISECONDS ) ) ; apiClient . setBatchCount ( config . getPreferredBatchCount ( ) ) ; apiClient . setBatchSize ( config . getPreferredBatchSize ( ) ) ; apiClient . setBatchDurationMillis ( config . getPreferredBatchDuration ( TimeUnit . MILLISECONDS ) ) ; final java . lang . String transactionUrl ; try { transactionUrl = apiClient . initiateTransaction ( direction , portId ) ; commSession . setUserDn ( apiClient . getTrustedPeerDn ( ) ) ; } catch ( final java . lang . Exception e ) { apiClient . close ( ) ; org . apache . nifi . remote . client . http . HttpClient . logger . warn ( \"Penalizing<sp>a<sp>peer<sp>{}<sp>due<sp>to<sp>{}\" , peer , e . toString ( ) ) ; peerSelector . penalize ( peer , penaltyMillis ) ; if ( ( ( e instanceof org . apache . nifi . remote . exception . UnknownPortException ) || ( e instanceof org . apache . nifi . remote . exception . PortNotRunningException ) ) || ( e instanceof org . apache . nifi . remote . exception . HandshakeException ) ) { throw e ; } org . apache . nifi . remote . client . http . HttpClient . logger . debug ( \"Continue<sp>trying<sp>other<sp>peers...\" ) ; continue ; } final java . lang . Integer transactionProtocolVersion = apiClient . getTransactionProtocolVersion ( ) ; final org . apache . nifi . remote . protocol . http . HttpClientTransaction transaction = new org . apache . nifi . remote . protocol . http . HttpClientTransaction ( transactionProtocolVersion , peer , direction , config . isUseCompression ( ) , portId , penaltyMillis , config . getEventReporter ( ) ) { @ org . apache . nifi . remote . client . http . Override protected void close ( ) throws java . io . IOException { try { super . close ( )", "testMethod": "testSendSuccessCompressed ( ) { try ( org . apache . nifi . remote . client . SiteToSiteClient client = getDefaultBuilder ( ) . portName ( \"input-running\" ) . useCompression ( true ) . build ( ) ) { final org . apache . nifi . remote . Transaction transaction = client . createTransaction ( TransferDirection . SEND ) ; \"<AssertPlaceHolder>\" ; org . apache . nifi . remote . client . http . TestHttpClient . serverChecksum = \"1071206772\" ; for ( int i = 0 ; i < 20 ; i ++ ) { org . apache . nifi . remote . protocol . DataPacket packet = new org . apache . nifi . remote . client . http . TestHttpClient . DataPacketBuilder ( ) . contents ( \"Example<sp>contents<sp>from<sp>client.\" ) . attr ( \"Client<sp>attr<sp>1\" , \"Client<sp>attr<sp>1<sp>value\" ) . attr ( \"Client<sp>attr<sp>2\" , \"Client<sp>attr<sp>2<sp>value\" ) . build ( ) ; transaction . send ( packet ) ; long written = ( ( org . apache . nifi . remote . Peer ) ( transaction . getCommunicant ( ) ) ) . getCommunicationsSession ( ) . getBytesWritten ( ) ; org . apache . nifi . remote . client . http . TestHttpClient . logger . info ( \"{}:<sp>{}<sp>bytes<sp>have<sp>been<sp>written.\" , i , written ) ; } transaction . confirm ( ) ; transaction . complete ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( transaction )", "total": "testSendSuccessCompressed ( ) { try ( org . apache . nifi . remote . client . SiteToSiteClient client = getDefaultBuilder ( ) . portName ( \"input-running\" ) . useCompression ( true ) . build ( ) ) { final org . apache . nifi . remote . Transaction transaction = client . createTransaction ( TransferDirection . SEND ) ; \"<AssertPlaceHolder>\" ; org . apache . nifi . remote . client . http . TestHttpClient . serverChecksum = \"1071206772\" ; for ( int i = 0 ; i < 20 ; i ++ ) { org . apache . nifi . remote . protocol . DataPacket packet = new org . apache . nifi . remote . client . http . TestHttpClient . DataPacketBuilder ( ) . contents ( \"Example<sp>contents<sp>from<sp>client.\" ) . attr ( \"Client<sp>attr<sp>1\" , \"Client<sp>attr<sp>1<sp>value\" ) . attr ( \"Client<sp>attr<sp>2\" , \"Client<sp>attr<sp>2<sp>value\" ) . build ( ) ; transaction . send ( packet ) ; long written = ( ( org . apache . nifi . remote . Peer ) ( transaction . getCommunicant ( ) ) ) . getCommunicationsSession ( ) . getBytesWritten ( ) ; org . apache . nifi . remote . client . http . TestHttpClient . logger . info ( \"{}:<sp>{}<sp>bytes<sp>have<sp>been<sp>written.\" , i , written ) ; } transaction . confirm ( ) ; transaction . complete ( ) ; } } createTransaction ( org . apache . nifi . remote . TransferDirection ) { final int timeoutMillis = ( ( int ) ( config . getTimeout ( TimeUnit . MILLISECONDS ) ) ) ; org . apache . nifi . remote . PeerStatus peerStatus ; while ( ( peerStatus = peerSelector . getNextPeerStatus ( direction ) ) != null ) { org . apache . nifi . remote . client . http . HttpClient . logger . debug ( \"peerStatus={}\" , peerStatus ) ; final org . apache . nifi . remote . protocol . CommunicationsSession commSession = new org . apache . nifi . remote . io . http . HttpCommunicationsSession ( ) ; final java . lang . String nodeApiUrl = resolveNodeApiUrl ( peerStatus . getPeerDescription ( ) ) ; final java . lang . StringBuilder clusterUrls = new java . lang . StringBuilder ( ) ; config . getUrls ( ) . forEach ( ( url ) -> { if ( ( clusterUrls . length ( ) ) > 0 ) { clusterUrls . append ( \",\" ) ; clusterUrls . append ( url ) ; } } ) ; final org . apache . nifi . remote . Peer peer = new org . apache . nifi . remote . Peer ( peerStatus . getPeerDescription ( ) , commSession , nodeApiUrl , clusterUrls . toString ( ) ) ; final int penaltyMillis = ( ( int ) ( config . getPenalizationPeriod ( TimeUnit . MILLISECONDS ) ) ) ; java . lang . String portId = config . getPortIdentifier ( ) ; if ( org . apache . commons . lang3 . StringUtils . isEmpty ( portId ) ) { portId = siteInfoProvider . getPortIdentifier ( config . getPortName ( ) , direction ) ; if ( org . apache . commons . lang3 . StringUtils . isEmpty ( portId ) ) { peer . close ( ) ; throw new java . io . IOException ( ( \"Failed<sp>to<sp>determine<sp>the<sp>identifier<sp>of<sp>port<sp>\" + ( config . getPortName ( ) ) ) ) ; } } final org . apache . nifi . remote . util . SiteToSiteRestApiClient apiClient = new org . apache . nifi . remote . util . SiteToSiteRestApiClient ( config . getSslContext ( ) , config . getHttpProxy ( ) , config . getEventReporter ( ) ) ; apiClient . setBaseUrl ( peer . getUrl ( ) ) ; apiClient . setConnectTimeoutMillis ( timeoutMillis ) ; apiClient . setReadTimeoutMillis ( timeoutMillis ) ; apiClient . setCacheExpirationMillis ( config . getCacheExpiration ( TimeUnit . MILLISECONDS ) ) ; apiClient . setLocalAddress ( config . getLocalAddress ( ) ) ; apiClient . setCompress ( config . isUseCompression ( ) ) ; apiClient . setRequestExpirationMillis ( config . getIdleConnectionExpiration ( TimeUnit . MILLISECONDS ) ) ; apiClient . setBatchCount ( config . getPreferredBatchCount ( ) ) ; apiClient . setBatchSize ( config . getPreferredBatchSize ( ) ) ; apiClient . setBatchDurationMillis ( config . getPreferredBatchDuration ( TimeUnit . MILLISECONDS ) ) ; final java . lang . String transactionUrl ; try { transactionUrl = apiClient . initiateTransaction ( direction , portId ) ; commSession . setUserDn ( apiClient . getTrustedPeerDn ( ) ) ; } catch ( final java . lang . Exception e ) { apiClient . close ( ) ; org . apache . nifi . remote . client . http . HttpClient . logger . warn ( \"Penalizing<sp>a<sp>peer<sp>{}<sp>due<sp>to<sp>{}\" , peer , e . toString ( ) ) ; peerSelector . penalize ( peer , penaltyMillis ) ; if ( ( ( e instanceof org . apache . nifi . remote . exception . UnknownPortException ) || ( e instanceof org . apache . nifi . remote . exception . PortNotRunningException ) ) || ( e instanceof org . apache . nifi . remote . exception . HandshakeException ) ) { throw e ; } org . apache . nifi . remote . client . http . HttpClient . logger . debug ( \"Continue<sp>trying<sp>other<sp>peers...\" ) ; continue ; } final java . lang . Integer transactionProtocolVersion = apiClient . getTransactionProtocolVersion ( ) ; final org . apache . nifi . remote . protocol . http . HttpClientTransaction transaction = new org . apache . nifi . remote . protocol . http . HttpClientTransaction ( transactionProtocolVersion , peer , direction , config . isUseCompression ( ) , portId , penaltyMillis , config . getEventReporter ( ) ) { @ org . apache . nifi . remote . client . http . Override protected void close ( ) throws java . io . IOException { try { super . close ( )", "answer": "org . junit . Assert . assertNotNull ( transaction )"}
{"focal": "showSeasons ( java . lang . String , java . lang . String ) { java . lang . StringBuilder builder = new java . lang . StringBuilder ( \"show.seasons\" ) ; builder . append ( \"&tvdbid=\" ) ; builder . append ( tvdbid ) ; builder . append ( \"&season=\" ) ; builder . append ( season ) ; org . sickbeard . SeasonsJson result = this . < org . sickbeard . SeasonsJson > commandData ( builder . toString ( ) , new com . google . gson . reflect . TypeToken < org . sickbeard . JsonResponse < org . sickbeard . SeasonsJson > > ( ) { } . getType ( ) ) ; return new org . sickbeard . Season ( season , result ) ; }", "testMethod": "showsSeasonsTest ( ) { org . sickbeard . Season response = sick . showSeasons ( \"71256\" , \"1\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "showsSeasonsTest ( ) { org . sickbeard . Season response = sick . showSeasons ( \"71256\" , \"1\" ) ; \"<AssertPlaceHolder>\" ; } showSeasons ( java . lang . String , java . lang . String ) { java . lang . StringBuilder builder = new java . lang . StringBuilder ( \"show.seasons\" ) ; builder . append ( \"&tvdbid=\" ) ; builder . append ( tvdbid ) ; builder . append ( \"&season=\" ) ; builder . append ( season ) ; org . sickbeard . SeasonsJson result = this . < org . sickbeard . SeasonsJson > commandData ( builder . toString ( ) , new com . google . gson . reflect . TypeToken < org . sickbeard . JsonResponse < org . sickbeard . SeasonsJson > > ( ) { } . getType ( ) ) ; return new org . sickbeard . Season ( season , result ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "getCorrespondingNotebook ( com . evernote . edam . type . LinkedNotebook ) { com . evernote . edam . type . SharedNotebook sharedNotebook = getClient ( ) . getSharedNotebookByAuth ( ) ; return getClient ( ) . getNotebook ( sharedNotebook . getNotebookGuid ( ) ) ; }", "testMethod": "testGetCorrespondingNotebook ( ) { com . evernote . edam . type . Notebook notebook = client . getCorrespondingNotebook ( linkedNotebook ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( notebook )", "total": "testGetCorrespondingNotebook ( ) { com . evernote . edam . type . Notebook notebook = client . getCorrespondingNotebook ( linkedNotebook ) ; \"<AssertPlaceHolder>\" ; } getCorrespondingNotebook ( com . evernote . edam . type . LinkedNotebook ) { com . evernote . edam . type . SharedNotebook sharedNotebook = getClient ( ) . getSharedNotebookByAuth ( ) ; return getClient ( ) . getNotebook ( sharedNotebook . getNotebookGuid ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( notebook )"}
{"focal": "getComponent ( java . lang . Class ) { checkReadPermission ( ) ; return pico . getComponent ( componentType ) ; }", "testMethod": "testConstantParameterReferenceClass ( ) { com . picocontainer . MutablePicoContainer container = createPicoContainer ( null ) ; container . addComponent ( com . picocontainer . DefaultPicoContainerTestCase . ConstantParameterTestClass . class , com . picocontainer . DefaultPicoContainerTestCase . ConstantParameterTestClass . class , new com . picocontainer . parameters . ConstantParameter ( java . lang . String . class ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( container . getComponent ( com . picocontainer . DefaultPicoContainerTestCase . ConstantParameterTestClass . class ) )", "total": "testConstantParameterReferenceClass ( ) { com . picocontainer . MutablePicoContainer container = createPicoContainer ( null ) ; container . addComponent ( com . picocontainer . DefaultPicoContainerTestCase . ConstantParameterTestClass . class , com . picocontainer . DefaultPicoContainerTestCase . ConstantParameterTestClass . class , new com . picocontainer . parameters . ConstantParameter ( java . lang . String . class ) ) ; \"<AssertPlaceHolder>\" ; } getComponent ( java . lang . Class ) { checkReadPermission ( ) ; return pico . getComponent ( componentType ) ; }", "answer": "org . junit . Assert . assertNotNull ( container . getComponent ( com . picocontainer . DefaultPicoContainerTestCase . ConstantParameterTestClass . class ) )"}
{"focal": "login ( ) { return new com . runabove . api . RunAboveBuilder ( getConfig ( ) ) . createManager ( new com . runabove . MockClient ( ) ) ; }", "testMethod": "testImageDetail ( ) { com . runabove . api . RunAboveManager runAboveApi = login ( ) ; com . runabove . model . image . Image [ ] imgs = runAboveApi . getImages ( ) ; \"<AssertPlaceHolder>\" ; for ( com . runabove . model . image . Image image : imgs ) { com . runabove . model . image . ImageDetail imageDetail = runAboveApi . getImage ( image . getId ( ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>id<sp>\" + ( imageDetail . getId ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>name<sp>\" + ( imageDetail . getName ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>region<sp>\" + ( imageDetail . getRegion ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>creation<sp>date<sp>\" + ( imageDetail . getCreationDate ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>mindisk<sp>\" + ( imageDetail . getMinDisk ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>minram<sp>\" + ( imageDetail . getMinRam ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>status<sp>\" + ( imageDetail . getStatus ( ) ) ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( imgs )", "total": "testImageDetail ( ) { com . runabove . api . RunAboveManager runAboveApi = login ( ) ; com . runabove . model . image . Image [ ] imgs = runAboveApi . getImages ( ) ; \"<AssertPlaceHolder>\" ; for ( com . runabove . model . image . Image image : imgs ) { com . runabove . model . image . ImageDetail imageDetail = runAboveApi . getImage ( image . getId ( ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>id<sp>\" + ( imageDetail . getId ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>name<sp>\" + ( imageDetail . getName ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>region<sp>\" + ( imageDetail . getRegion ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>creation<sp>date<sp>\" + ( imageDetail . getCreationDate ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>mindisk<sp>\" + ( imageDetail . getMinDisk ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>minram<sp>\" + ( imageDetail . getMinRam ( ) ) ) ) ; com . runabove . ApiTest . LOG . info ( ( \"imageDetail<sp>status<sp>\" + ( imageDetail . getStatus ( ) ) ) ) ; } } login ( ) { return new com . runabove . api . RunAboveBuilder ( getConfig ( ) ) . createManager ( new com . runabove . MockClient ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( imgs )"}
{"focal": "add ( org . sagebionetworks . repo . model . Favorite ) { if ( dto == null ) throw new java . lang . IllegalArgumentException ( \"Favotire<sp>dto<sp>can<sp>not<sp>be<sp>null\" ) ; if ( ( dto . getPrincipalId ( ) ) == null ) throw new java . lang . IllegalArgumentException ( \"Principal<sp>id<sp>can<sp>not<sp>be<sp>null\" ) ; if ( ( dto . getEntityId ( ) ) == null ) throw new java . lang . IllegalArgumentException ( \"Entity<sp>Id<sp>can<sp>not<sp>be<sp>null\" ) ; org . sagebionetworks . repo . model . dbo . persistence . DBOFavorite dbo = new org . sagebionetworks . repo . model . dbo . persistence . DBOFavorite ( ) ; dbo . setId ( idGenerator . generateNewId ( IdType . FAVORITE_ID ) ) ; dbo . setCreatedOn ( new java . util . Date ( ) . getTime ( ) ) ; org . sagebionetworks . repo . model . dbo . dao . UserProfileUtils . copyDtoToDbo ( dto , dbo ) ; basicDao . createNew ( dbo ) ; return getIndividualFavorite ( dto . getPrincipalId ( ) , dto . getEntityId ( ) ) ; }", "testMethod": "testCreateWithExistingId ( ) { java . lang . String sameId = idGenerator . generateNewId ( IdType . ACTIVITY_ID ) . toString ( ) ; org . sagebionetworks . repo . model . provenance . Activity toCreate = newTestActivity ( sameId ) ; java . lang . String id = activityDao . create ( toCreate ) ; toDelete . add ( id ) ; \"<AssertPlaceHolder>\" ; org . sagebionetworks . repo . model . provenance . Activity duplicate = newTestActivity ( sameId ) ; java . lang . String duplicateId = activityDao . create ( duplicate ) ; toDelete . add ( duplicateId ) ; org . junit . Assert . fail ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( id )", "total": "testCreateWithExistingId ( ) { java . lang . String sameId = idGenerator . generateNewId ( IdType . ACTIVITY_ID ) . toString ( ) ; org . sagebionetworks . repo . model . provenance . Activity toCreate = newTestActivity ( sameId ) ; java . lang . String id = activityDao . create ( toCreate ) ; toDelete . add ( id ) ; \"<AssertPlaceHolder>\" ; org . sagebionetworks . repo . model . provenance . Activity duplicate = newTestActivity ( sameId ) ; java . lang . String duplicateId = activityDao . create ( duplicate ) ; toDelete . add ( duplicateId ) ; org . junit . Assert . fail ( ) ; } add ( org . sagebionetworks . repo . model . Favorite ) { if ( dto == null ) throw new java . lang . IllegalArgumentException ( \"Favotire<sp>dto<sp>can<sp>not<sp>be<sp>null\" ) ; if ( ( dto . getPrincipalId ( ) ) == null ) throw new java . lang . IllegalArgumentException ( \"Principal<sp>id<sp>can<sp>not<sp>be<sp>null\" ) ; if ( ( dto . getEntityId ( ) ) == null ) throw new java . lang . IllegalArgumentException ( \"Entity<sp>Id<sp>can<sp>not<sp>be<sp>null\" ) ; org . sagebionetworks . repo . model . dbo . persistence . DBOFavorite dbo = new org . sagebionetworks . repo . model . dbo . persistence . DBOFavorite ( ) ; dbo . setId ( idGenerator . generateNewId ( IdType . FAVORITE_ID ) ) ; dbo . setCreatedOn ( new java . util . Date ( ) . getTime ( ) ) ; org . sagebionetworks . repo . model . dbo . dao . UserProfileUtils . copyDtoToDbo ( dto , dbo ) ; basicDao . createNew ( dbo ) ; return getIndividualFavorite ( dto . getPrincipalId ( ) , dto . getEntityId ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( id )"}
{"focal": "close ( java . sql . Connection ) { if ( x == null ) { return ; } try { x . close ( ) ; } catch ( java . lang . Exception e ) { com . alibaba . druid . util . JdbcUtils . LOG . debug ( \"close<sp>connection<sp>error\" , e ) ; } }", "testMethod": "testInvalidInit ( ) { com . alibaba . druid . pool . DruidDataSource dataSource = new com . alibaba . druid . pool . DruidDataSource ( ) ; dataSource . setDriver ( MockDriver . instance ) ; dataSource . setFilters ( \"config\" ) ; dataSource . setConnectionProperties ( \"config.file=abcdefeg\" ) ; java . lang . Exception error = null ; try { dataSource . init ( ) ; } catch ( java . lang . IllegalArgumentException e ) { error = e ; } finally { com . alibaba . druid . util . JdbcUtils . close ( dataSource ) ; } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( error )", "total": "testInvalidInit ( ) { com . alibaba . druid . pool . DruidDataSource dataSource = new com . alibaba . druid . pool . DruidDataSource ( ) ; dataSource . setDriver ( MockDriver . instance ) ; dataSource . setFilters ( \"config\" ) ; dataSource . setConnectionProperties ( \"config.file=abcdefeg\" ) ; java . lang . Exception error = null ; try { dataSource . init ( ) ; } catch ( java . lang . IllegalArgumentException e ) { error = e ; } finally { com . alibaba . druid . util . JdbcUtils . close ( dataSource ) ; } \"<AssertPlaceHolder>\" ; } close ( java . sql . Connection ) { if ( x == null ) { return ; } try { x . close ( ) ; } catch ( java . lang . Exception e ) { com . alibaba . druid . util . JdbcUtils . LOG . debug ( \"close<sp>connection<sp>error\" , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( error )"}
{"focal": "getCipherSuiteOpenSSLName ( java . lang . String ) { return entriesByOSSLName . get ( cipherSuite ) ; }", "testMethod": "testBasicLoad ( ) { final org . wildfly . security . ssl . MechanismDatabase instance = org . wildfly . security . ssl . MechanismDatabase . getInstance ( ) ; final org . wildfly . security . ssl . MechanismDatabase . Entry entry = instance . getCipherSuiteOpenSSLName ( \"NULL-MD5\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entry )", "total": "testBasicLoad ( ) { final org . wildfly . security . ssl . MechanismDatabase instance = org . wildfly . security . ssl . MechanismDatabase . getInstance ( ) ; final org . wildfly . security . ssl . MechanismDatabase . Entry entry = instance . getCipherSuiteOpenSSLName ( \"NULL-MD5\" ) ; \"<AssertPlaceHolder>\" ; } getCipherSuiteOpenSSLName ( java . lang . String ) { return entriesByOSSLName . get ( cipherSuite ) ; }", "answer": "org . junit . Assert . assertNotNull ( entry )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . ScheduleTemplate entity = new org . oscarehr . common . model . ScheduleTemplate ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; entity . setId ( new org . oscarehr . common . model . ScheduleTemplatePrimaryKey ( \"000001\" , \"a\" ) ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . ScheduleTemplate entity = new org . oscarehr . common . model . ScheduleTemplate ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; entity . setId ( new org . oscarehr . common . model . ScheduleTemplatePrimaryKey ( \"000001\" , \"a\" ) ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "getFirewallInfo ( java . lang . String ) { checkBlankAndThrowError ( firewallId , \"Missing<sp>required<sp>parameters<sp>[FirewallID]<sp>for<sp>get<sp>firewall<sp>info.\" ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { firewallId } ; return ( ( com . myjeeva . digitalocean . pojo . Firewall ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . GET_FIREWALL_INFO , params ) ) . getData ( ) ) ) ; }", "testMethod": "testGetFirewallInfo ( ) { com . myjeeva . digitalocean . pojo . Firewall fw = apiClient . getFirewallInfo ( firewallIdForInfo ) ; \"<AssertPlaceHolder>\" ; log . info ( fw . toString ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( fw )", "total": "testGetFirewallInfo ( ) { com . myjeeva . digitalocean . pojo . Firewall fw = apiClient . getFirewallInfo ( firewallIdForInfo ) ; \"<AssertPlaceHolder>\" ; log . info ( fw . toString ( ) ) ; } getFirewallInfo ( java . lang . String ) { checkBlankAndThrowError ( firewallId , \"Missing<sp>required<sp>parameters<sp>[FirewallID]<sp>for<sp>get<sp>firewall<sp>info.\" ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { firewallId } ; return ( ( com . myjeeva . digitalocean . pojo . Firewall ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . GET_FIREWALL_INFO , params ) ) . getData ( ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( fw )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateResultsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . DocumentBuilder < org . openhealthtools . mdht . uml . cda . ccd . ContinuityOfCareDocument > clinicalDocumentBuilder = org . openhealthtools . mdht . uml . cda . ccd . builder . CCDBuilderFactory . createContinuityOfCareDocumentBuilder ( ) ; org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ccd . ResultsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ccd . builder . CCDBuilderFactory . createResultsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ccd . ResultsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . save ( clinicalDocumentBuilder . with ( section ) . buildDocument ( ) , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateResultsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . DocumentBuilder < org . openhealthtools . mdht . uml . cda . ccd . ContinuityOfCareDocument > clinicalDocumentBuilder = org . openhealthtools . mdht . uml . cda . ccd . builder . CCDBuilderFactory . createContinuityOfCareDocumentBuilder ( ) ; org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ccd . ResultsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ccd . builder . CCDBuilderFactory . createResultsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ccd . ResultsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . save ( clinicalDocumentBuilder . with ( section ) . buildDocument ( ) , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "calculate ( org . openscience . cdk . interfaces . IAtomContainer ) { org . openscience . cdk . interfaces . IAtomContainer local ; if ( addlp ) { try { local = ( ( org . openscience . cdk . interfaces . IAtomContainer ) ( atomContainer . clone ( ) ) ) ; org . openscience . cdk . tools . LonePairElectronChecker lpcheck = new org . openscience . cdk . tools . LonePairElectronChecker ( ) ; lpcheck . saturate ( local ) ; } catch ( java . lang . CloneNotSupportedException e ) { return new org . openscience . cdk . qsar . DescriptorValue ( getSpecification ( ) , getParameterNames ( ) , getParameters ( ) , new org . openscience . cdk . qsar . result . DoubleResult ( Double . NaN ) , getDescriptorNames ( ) , e ) ; } catch ( org . openscience . cdk . exception . CDKException e ) { return new org . openscience . cdk . qsar . DescriptorValue ( getSpecification ( ) , getParameterNames ( ) , getParameters ( ) , new org . openscience . cdk . qsar . result . DoubleResult ( Double . NaN ) , getDescriptorNames ( ) , e ) ; } } else local = atomContainer ; org . openscience . cdk . qsar . result . DoubleResult value ; try { value = new org . openscience . cdk . qsar . result . DoubleResult ( ( ( org . openscience . cdk . qsar . result . DoubleArrayResult ) ( calculatePlus ( local ) . getValue ( ) ) ) . get ( 0 ) ) ; } catch ( org . openscience . cdk . exception . CDKException e ) { return new org . openscience . cdk . qsar . DescriptorValue ( getSpecification ( ) , getParameterNames ( ) , getParameters ( ) , new org . openscience . cdk . qsar . result . DoubleResult ( Double . NaN ) , getDescriptorNames ( ) , e ) ; } return new org . openscience . cdk . qsar . DescriptorValue ( getSpecification ( ) , getParameterNames ( ) , getParameters ( ) , value , getDescriptorNames ( ) ) ; }", "testMethod": "testRing ( ) { sp = new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . silent . SilentChemObjectBuilder . getInstance ( ) ) ; org . openscience . cdk . interfaces . IAtomContainer mol = sp . parseSmiles ( \"C1CCCC1CCC2CCCNC2\" ) ; addExplicitHydrogens ( mol ) ; org . openscience . cdk . qsar . DescriptorValue dv = descriptor . calculate ( mol ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dv )", "total": "testRing ( ) { sp = new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . silent . SilentChemObjectBuilder . getInstance ( ) ) ; org . openscience . cdk . interfaces . IAtomContainer mol = sp . parseSmiles ( \"C1CCCC1CCC2CCCNC2\" ) ; addExplicitHydrogens ( mol ) ; org . openscience . cdk . qsar . DescriptorValue dv = descriptor . calculate ( mol ) ; \"<AssertPlaceHolder>\" ; } calculate ( org . openscience . cdk . interfaces . IAtomContainer ) { org . openscience . cdk . interfaces . IAtomContainer local ; if ( addlp ) { try { local = ( ( org . openscience . cdk . interfaces . IAtomContainer ) ( atomContainer . clone ( ) ) ) ; org . openscience . cdk . tools . LonePairElectronChecker lpcheck = new org . openscience . cdk . tools . LonePairElectronChecker ( ) ; lpcheck . saturate ( local ) ; } catch ( java . lang . CloneNotSupportedException e ) { return new org . openscience . cdk . qsar . DescriptorValue ( getSpecification ( ) , getParameterNames ( ) , getParameters ( ) , new org . openscience . cdk . qsar . result . DoubleResult ( Double . NaN ) , getDescriptorNames ( ) , e ) ; } catch ( org . openscience . cdk . exception . CDKException e ) { return new org . openscience . cdk . qsar . DescriptorValue ( getSpecification ( ) , getParameterNames ( ) , getParameters ( ) , new org . openscience . cdk . qsar . result . DoubleResult ( Double . NaN ) , getDescriptorNames ( ) , e ) ; } } else local = atomContainer ; org . openscience . cdk . qsar . result . DoubleResult value ; try { value = new org . openscience . cdk . qsar . result . DoubleResult ( ( ( org . openscience . cdk . qsar . result . DoubleArrayResult ) ( calculatePlus ( local ) . getValue ( ) ) ) . get ( 0 ) ) ; } catch ( org . openscience . cdk . exception . CDKException e ) { return new org . openscience . cdk . qsar . DescriptorValue ( getSpecification ( ) , getParameterNames ( ) , getParameters ( ) , new org . openscience . cdk . qsar . result . DoubleResult ( Double . NaN ) , getDescriptorNames ( ) , e ) ; } return new org . openscience . cdk . qsar . DescriptorValue ( getSpecification ( ) , getParameterNames ( ) , getParameters ( ) , value , getDescriptorNames ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( dv )"}
{"focal": "getQueryStringParams ( ) { try { java . util . Map < java . lang . String , java . lang . String > params = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; java . lang . String queryString = new java . net . URL ( url ) . getQuery ( ) ; params . putAll ( org . jinstagram . http . URLUtils . queryStringToMap ( queryString ) ) ; params . putAll ( this . querystringParams ) ; return params ; } catch ( java . net . MalformedURLException mue ) { throw new org . jinstagram . auth . exceptions . OAuthException ( \"Malformed<sp>URL\" , mue ) ; } }", "testMethod": "testGetQueryStringParams_2 ( ) { org . jinstagram . http . Request fixture = new org . jinstagram . http . Request ( Verbs . DELETE , \"http://mock.url/?key1=value1&key2=value2\" ) ; fixture . setConnectionKeepAlive ( true ) ; fixture . setCharset ( \"UTF-8\" ) ; fixture . addPayload ( \"Dummy<sp>payload\" ) ; fixture . setConnection ( mockHttpConnection ) ; fixture . setProxy ( org . jinstagram . http . RequestTest . proxy ) ; java . util . Map < java . lang . String , java . lang . String > result = fixture . getQueryStringParams ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetQueryStringParams_2 ( ) { org . jinstagram . http . Request fixture = new org . jinstagram . http . Request ( Verbs . DELETE , \"http://mock.url/?key1=value1&key2=value2\" ) ; fixture . setConnectionKeepAlive ( true ) ; fixture . setCharset ( \"UTF-8\" ) ; fixture . addPayload ( \"Dummy<sp>payload\" ) ; fixture . setConnection ( mockHttpConnection ) ; fixture . setProxy ( org . jinstagram . http . RequestTest . proxy ) ; java . util . Map < java . lang . String , java . lang . String > result = fixture . getQueryStringParams ( ) ; \"<AssertPlaceHolder>\" ; } getQueryStringParams ( ) { try { java . util . Map < java . lang . String , java . lang . String > params = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; java . lang . String queryString = new java . net . URL ( url ) . getQuery ( ) ; params . putAll ( org . jinstagram . http . URLUtils . queryStringToMap ( queryString ) ) ; params . putAll ( this . querystringParams ) ; return params ; } catch ( java . net . MalformedURLException mue ) { throw new org . jinstagram . auth . exceptions . OAuthException ( \"Malformed<sp>URL\" , mue ) ; } }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "close ( ) { irodsSession . closeSession ( ) ; }", "testMethod": "testInstance ( ) { org . irods . jargon . core . connection . IRODSAccount irodsAccount = org . irods . jargon . usertagging . UserTagCloudServiceImplTest . testingPropertiesHelper . buildIRODSAccountFromTestProperties ( org . irods . jargon . usertagging . UserTagCloudServiceImplTest . testingProperties ) ; org . irods . jargon . core . pub . IRODSFileSystem irodsFileSystem = org . irods . jargon . core . pub . IRODSFileSystem . instance ( ) ; org . irods . jargon . usertagging . tags . UserTagCloudService userTagCloudService = org . irods . jargon . usertagging . tags . UserTagCloudServiceImpl . instance ( irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount ) ; irodsFileSystem . close ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( userTagCloudService )", "total": "testInstance ( ) { org . irods . jargon . core . connection . IRODSAccount irodsAccount = org . irods . jargon . usertagging . UserTagCloudServiceImplTest . testingPropertiesHelper . buildIRODSAccountFromTestProperties ( org . irods . jargon . usertagging . UserTagCloudServiceImplTest . testingProperties ) ; org . irods . jargon . core . pub . IRODSFileSystem irodsFileSystem = org . irods . jargon . core . pub . IRODSFileSystem . instance ( ) ; org . irods . jargon . usertagging . tags . UserTagCloudService userTagCloudService = org . irods . jargon . usertagging . tags . UserTagCloudServiceImpl . instance ( irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount ) ; irodsFileSystem . close ( ) ; \"<AssertPlaceHolder>\" ; } close ( ) { irodsSession . closeSession ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( userTagCloudService )"}
{"focal": "getSession ( ) { return currentSession ; }", "testMethod": "validateRequest2isNowRunningOnTheNode ( ) { org . openqa . selenium . support . ui . FluentWait < org . openqa . grid . web . servlet . handler . RequestHandler > wait = new org . openqa . selenium . support . ui . FluentWait ( handler2 ) ; wait . withTimeout ( java . time . Duration . ofSeconds ( 1 ) ) . pollingEvery ( java . time . Duration . ofMillis ( 100 ) ) . ignoring ( org . openqa . grid . common . exception . GridException . class ) . until ( RequestHandler :: getSession ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( handler2 . getSession ( ) )", "total": "validateRequest2isNowRunningOnTheNode ( ) { org . openqa . selenium . support . ui . FluentWait < org . openqa . grid . web . servlet . handler . RequestHandler > wait = new org . openqa . selenium . support . ui . FluentWait ( handler2 ) ; wait . withTimeout ( java . time . Duration . ofSeconds ( 1 ) ) . pollingEvery ( java . time . Duration . ofMillis ( 100 ) ) . ignoring ( org . openqa . grid . common . exception . GridException . class ) . until ( RequestHandler :: getSession ) ; \"<AssertPlaceHolder>\" ; } getSession ( ) { return currentSession ; }", "answer": "org . junit . Assert . assertNotNull ( handler2 . getSession ( ) )"}
{"focal": "createAuthenticationTokenWithUserAndPw ( java . lang . String , java . lang . String ) { return new org . springframework . security . authentication . TestingAuthenticationToken ( username , password ) ; }", "testMethod": "arbitraryCasedNameReturnsValidAuthentication ( ) { org . springframework . security . authentication . AuthenticationProvider provider = createProvider ( ) ; org . springframework . security . core . Authentication authentication = provider . authenticate ( createAuthenticationTokenWithUserAndPw ( \"AdMiN\" , \"adm1n\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( authentication )", "total": "arbitraryCasedNameReturnsValidAuthentication ( ) { org . springframework . security . authentication . AuthenticationProvider provider = createProvider ( ) ; org . springframework . security . core . Authentication authentication = provider . authenticate ( createAuthenticationTokenWithUserAndPw ( \"AdMiN\" , \"adm1n\" ) ) ; \"<AssertPlaceHolder>\" ; } createAuthenticationTokenWithUserAndPw ( java . lang . String , java . lang . String ) { return new org . springframework . security . authentication . TestingAuthenticationToken ( username , password ) ; }", "answer": "org . junit . Assert . assertNotNull ( authentication )"}
{"focal": "getTableDir ( org . apache . hadoop . fs . Path , org . apache . hadoop . hbase . TableName ) { return new org . apache . hadoop . fs . Path ( org . apache . hadoop . hbase . util . CommonFSUtils . getNamespaceDir ( rootdir , tableName . getNamespaceAsString ( ) ) , tableName . getQualifierAsString ( ) ) ; }", "testMethod": "testSnapshottingWithTmpSplitsAndMergeDirectoriesPresent ( ) { org . apache . hadoop . hbase . client . RegionInfo firstRegion = org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TEST_UTIL . getConnection ( ) . getRegionLocator ( table . getName ( ) ) . getAllRegionLocations ( ) . stream ( ) . findFirst ( ) . get ( ) . getRegion ( ) ; java . lang . String encodedName = firstRegion . getEncodedName ( ) ; org . apache . hadoop . fs . Path tableDir = org . apache . hadoop . hbase . util . FSUtils . getTableDir ( org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TEST_UTIL . getDefaultRootDirPath ( ) , org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TABLE_NAME ) ; org . apache . hadoop . fs . Path regionDirectoryPath = new org . apache . hadoop . fs . Path ( tableDir , encodedName ) ; org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TEST_UTIL . getTestFileSystem ( ) . create ( new org . apache . hadoop . fs . Path ( regionDirectoryPath , HRegionFileSystem . REGION_TEMP_DIR ) ) ; org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TEST_UTIL . getTestFileSystem ( ) . create ( new org . apache . hadoop . fs . Path ( regionDirectoryPath , HRegionFileSystem . REGION_SPLITS_DIR ) ) ; org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TEST_UTIL . getTestFileSystem ( ) . create ( new org . apache . hadoop . fs . Path ( regionDirectoryPath , HRegionFileSystem . REGION_MERGES_DIR ) ) ; java . lang . String snapshotDir = client . createSnapshot ( baseDir , \"foo_snapshot\" ) ; org . apache . hadoop . hbase . regionserver . HRegion snapshottedRegion = openSnapshotRegion ( firstRegion , org . apache . hadoop . hbase . util . FSUtils . getTableDir ( new org . apache . hadoop . fs . Path ( snapshotDir ) , org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TABLE_NAME ) ) ; \"<AssertPlaceHolder>\" ; snapshottedRegion . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( snapshottedRegion )", "total": "testSnapshottingWithTmpSplitsAndMergeDirectoriesPresent ( ) { org . apache . hadoop . hbase . client . RegionInfo firstRegion = org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TEST_UTIL . getConnection ( ) . getRegionLocator ( table . getName ( ) ) . getAllRegionLocations ( ) . stream ( ) . findFirst ( ) . get ( ) . getRegion ( ) ; java . lang . String encodedName = firstRegion . getEncodedName ( ) ; org . apache . hadoop . fs . Path tableDir = org . apache . hadoop . hbase . util . FSUtils . getTableDir ( org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TEST_UTIL . getDefaultRootDirPath ( ) , org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TABLE_NAME ) ; org . apache . hadoop . fs . Path regionDirectoryPath = new org . apache . hadoop . fs . Path ( tableDir , encodedName ) ; org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TEST_UTIL . getTestFileSystem ( ) . create ( new org . apache . hadoop . fs . Path ( regionDirectoryPath , HRegionFileSystem . REGION_TEMP_DIR ) ) ; org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TEST_UTIL . getTestFileSystem ( ) . create ( new org . apache . hadoop . fs . Path ( regionDirectoryPath , HRegionFileSystem . REGION_SPLITS_DIR ) ) ; org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TEST_UTIL . getTestFileSystem ( ) . create ( new org . apache . hadoop . fs . Path ( regionDirectoryPath , HRegionFileSystem . REGION_MERGES_DIR ) ) ; java . lang . String snapshotDir = client . createSnapshot ( baseDir , \"foo_snapshot\" ) ; org . apache . hadoop . hbase . regionserver . HRegion snapshottedRegion = openSnapshotRegion ( firstRegion , org . apache . hadoop . hbase . util . FSUtils . getTableDir ( new org . apache . hadoop . fs . Path ( snapshotDir ) , org . apache . hadoop . hbase . regionserver . TestHdfsSnapshotHRegion . TABLE_NAME ) ) ; \"<AssertPlaceHolder>\" ; snapshottedRegion . close ( ) ; } getTableDir ( org . apache . hadoop . fs . Path , org . apache . hadoop . hbase . TableName ) { return new org . apache . hadoop . fs . Path ( org . apache . hadoop . hbase . util . CommonFSUtils . getNamespaceDir ( rootdir , tableName . getNamespaceAsString ( ) ) , tableName . getQualifierAsString ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( snapshottedRegion )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateHospitalDischargeMedicationsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . hitsp . HospitalDischargeMedicationsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . hitsp . builder . HITSPBuilderFactory . createHospitalDischargeMedicationsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . hitsp . HospitalDischargeMedicationsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateHospitalDischargeMedicationsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . hitsp . HospitalDischargeMedicationsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . hitsp . builder . HITSPBuilderFactory . createHospitalDischargeMedicationsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . hitsp . HospitalDischargeMedicationsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "load ( java . lang . String ) { return new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . silent . SilentChemObjectBuilder . getInstance ( ) ) . parseSmiles ( smi ) ; }", "testMethod": "pyrrolylpyrrole_valid ( ) { org . openscience . cdk . interfaces . IAtomContainer m = org . openscience . cdk . smiles . SmilesParserTest . load ( \"c1cccn1c2ccc[nH]2\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( m )", "total": "pyrrolylpyrrole_valid ( ) { org . openscience . cdk . interfaces . IAtomContainer m = org . openscience . cdk . smiles . SmilesParserTest . load ( \"c1cccn1c2ccc[nH]2\" ) ; \"<AssertPlaceHolder>\" ; } load ( java . lang . String ) { return new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . silent . SilentChemObjectBuilder . getInstance ( ) ) . parseSmiles ( smi ) ; }", "answer": "org . junit . Assert . assertNotNull ( m )"}
{"focal": "dataSource ( ) { final org . apache . tomcat . dbcp . dbcp . BasicDataSource dataSource = new org . apache . tomcat . dbcp . dbcp . BasicDataSource ( ) ; dataSource . setDriverClassName ( this . jdbcDriver ) ; dataSource . setUrl ( getDataSourceUrl ( ) ) ; dataSource . setConnectionProperties ( createDatabaseConnectionProperties ( ) ) ; dataSource . setUsername ( this . databaseUsername ) ; dataSource . setPassword ( this . databasePassword ) ; dataSource . setInitialSize ( this . initialSize ) ; dataSource . setMaxActive ( this . maxActive ) ; dataSource . setTestOnBorrow ( this . testOnBorrow ) ; dataSource . setValidationQuery ( this . validationQuery ) ; return dataSource ; }", "testMethod": "dataSourceTest ( ) { System . out . print ( \"-><sp>dataSource()<sp>-<sp>\" ) ; ua . com . alexcoffee . config . DatabaseConfig databaseConfig = new ua . com . alexcoffee . config . DatabaseConfig ( ) ; \"<AssertPlaceHolder>\" ; System . out . println ( \"OK!\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( databaseConfig . dataSource ( ) )", "total": "dataSourceTest ( ) { System . out . print ( \"-><sp>dataSource()<sp>-<sp>\" ) ; ua . com . alexcoffee . config . DatabaseConfig databaseConfig = new ua . com . alexcoffee . config . DatabaseConfig ( ) ; \"<AssertPlaceHolder>\" ; System . out . println ( \"OK!\" ) ; } dataSource ( ) { final org . apache . tomcat . dbcp . dbcp . BasicDataSource dataSource = new org . apache . tomcat . dbcp . dbcp . BasicDataSource ( ) ; dataSource . setDriverClassName ( this . jdbcDriver ) ; dataSource . setUrl ( getDataSourceUrl ( ) ) ; dataSource . setConnectionProperties ( createDatabaseConnectionProperties ( ) ) ; dataSource . setUsername ( this . databaseUsername ) ; dataSource . setPassword ( this . databasePassword ) ; dataSource . setInitialSize ( this . initialSize ) ; dataSource . setMaxActive ( this . maxActive ) ; dataSource . setTestOnBorrow ( this . testOnBorrow ) ; dataSource . setValidationQuery ( this . validationQuery ) ; return dataSource ; }", "answer": "org . junit . Assert . assertNotNull ( databaseConfig . dataSource ( ) )"}
{"focal": "createHttpContextWithAuthenticatedSessionUsingUserCredentials ( org . apache . http . impl . client . CloseableHttpClient ) { org . apache . http . client . methods . HttpPost httpPost = createHttpPost ( ) ; java . util . List < org . apache . http . NameValuePair > params = getParametersForLogin ( ) ; try { org . apache . http . client . entity . UrlEncodedFormEntity postParams = new org . apache . http . client . entity . UrlEncodedFormEntity ( params , \"UTF-8\" ) ; httpPost . setEntity ( postParams ) ; org . apache . http . client . methods . CloseableHttpResponse loginResponse = httpClient . execute ( httpPost ) ; int statusCode = loginResponse . getStatusLine ( ) . getStatusCode ( ) ; if ( statusCode != ( org . apache . http . HttpStatus . SC_OK ) ) { throw new br . com . autonomiccs . apacheCloudStack . exceptions . ApacheCloudStackClientRequestRuntimeException ( statusCode , getResponseAsString ( loginResponse ) , \"login\" ) ; } br . com . autonomiccs . apacheCloudStack . client . ApacheCloudStackClient . LOGGER . debug ( java . lang . String . format ( \"Authentication<sp>response:[%s]\" , getResponseAsString ( loginResponse ) ) ) ; return createHttpContextWithCookies ( loginResponse ) ; } catch ( java . io . IOException e ) { throw new br . com . autonomiccs . apacheCloudStack . exceptions . ApacheCloudStackClientRuntimeException ( e ) ; } }", "testMethod": "createHttpContextWithAuthenticatedSessionUsingUserCredentialsIfNeededTestAuthenticationWithApiKeyAndSecretKey ( ) { org . apache . http . impl . client . CloseableHttpClient closeableHttpClientMock = org . mockito . Mockito . mock ( org . apache . http . impl . client . CloseableHttpClient . class ) ; org . apache . http . protocol . HttpContext basicHttpContext = apacheCloudStackClient . createHttpContextWithAuthenticatedSessionUsingUserCredentialsIfNeeded ( closeableHttpClientMock , true ) ; org . mockito . Mockito . verify ( apacheCloudStackClient , org . mockito . Mockito . times ( 0 ) ) . createHttpContextWithAuthenticatedSessionUsingUserCredentials ( org . mockito . Mockito . any ( closeableHttpClientMock . getClass ( ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( basicHttpContext )", "total": "createHttpContextWithAuthenticatedSessionUsingUserCredentialsIfNeededTestAuthenticationWithApiKeyAndSecretKey ( ) { org . apache . http . impl . client . CloseableHttpClient closeableHttpClientMock = org . mockito . Mockito . mock ( org . apache . http . impl . client . CloseableHttpClient . class ) ; org . apache . http . protocol . HttpContext basicHttpContext = apacheCloudStackClient . createHttpContextWithAuthenticatedSessionUsingUserCredentialsIfNeeded ( closeableHttpClientMock , true ) ; org . mockito . Mockito . verify ( apacheCloudStackClient , org . mockito . Mockito . times ( 0 ) ) . createHttpContextWithAuthenticatedSessionUsingUserCredentials ( org . mockito . Mockito . any ( closeableHttpClientMock . getClass ( ) ) ) ; \"<AssertPlaceHolder>\" ; } createHttpContextWithAuthenticatedSessionUsingUserCredentials ( org . apache . http . impl . client . CloseableHttpClient ) { org . apache . http . client . methods . HttpPost httpPost = createHttpPost ( ) ; java . util . List < org . apache . http . NameValuePair > params = getParametersForLogin ( ) ; try { org . apache . http . client . entity . UrlEncodedFormEntity postParams = new org . apache . http . client . entity . UrlEncodedFormEntity ( params , \"UTF-8\" ) ; httpPost . setEntity ( postParams ) ; org . apache . http . client . methods . CloseableHttpResponse loginResponse = httpClient . execute ( httpPost ) ; int statusCode = loginResponse . getStatusLine ( ) . getStatusCode ( ) ; if ( statusCode != ( org . apache . http . HttpStatus . SC_OK ) ) { throw new br . com . autonomiccs . apacheCloudStack . exceptions . ApacheCloudStackClientRequestRuntimeException ( statusCode , getResponseAsString ( loginResponse ) , \"login\" ) ; } br . com . autonomiccs . apacheCloudStack . client . ApacheCloudStackClient . LOGGER . debug ( java . lang . String . format ( \"Authentication<sp>response:[%s]\" , getResponseAsString ( loginResponse ) ) ) ; return createHttpContextWithCookies ( loginResponse ) ; } catch ( java . io . IOException e ) { throw new br . com . autonomiccs . apacheCloudStack . exceptions . ApacheCloudStackClientRuntimeException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( basicHttpContext )"}
{"focal": "convertToValueObject ( org . oscm . ui . model . Marketplace ) { if ( mp == null ) { return null ; } org . oscm . internal . vo . VOMarketplace vmp = new org . oscm . internal . vo . VOMarketplace ( ) ; vmp . setName ( mp . getName ( ) ) ; vmp . setKey ( mp . getKey ( ) ) ; vmp . setVersion ( mp . getVersion ( ) ) ; vmp . setOpen ( ( ! ( mp . isClosed ( ) ) ) ) ; vmp . setMarketplaceId ( mp . getMarketplaceId ( ) ) ; vmp . setOwningOrganizationId ( mp . getOwningOrganizationId ( ) ) ; vmp . setTaggingEnabled ( mp . isTaggingEnabled ( ) ) ; vmp . setReviewEnabled ( mp . isReviewEnabled ( ) ) ; vmp . setSocialBookmarkEnabled ( mp . isSocialBookmarkEnabled ( ) ) ; vmp . setCategoriesEnabled ( mp . isCategoriesEnabled ( ) ) ; vmp . setTenantId ( mp . getTenantId ( ) ) ; return vmp ; }", "testMethod": "convertToValueObject ( ) { org . oscm . internal . vo . VOMarketplace vMp = umpb . convertToValueObject ( mp ) ; \"<AssertPlaceHolder>\" ; org . oscm . ui . beans . UpdateMarketplaceBeanTest . verifyValueObject ( mp , vMp ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( vMp )", "total": "convertToValueObject ( ) { org . oscm . internal . vo . VOMarketplace vMp = umpb . convertToValueObject ( mp ) ; \"<AssertPlaceHolder>\" ; org . oscm . ui . beans . UpdateMarketplaceBeanTest . verifyValueObject ( mp , vMp ) ; } convertToValueObject ( org . oscm . ui . model . Marketplace ) { if ( mp == null ) { return null ; } org . oscm . internal . vo . VOMarketplace vmp = new org . oscm . internal . vo . VOMarketplace ( ) ; vmp . setName ( mp . getName ( ) ) ; vmp . setKey ( mp . getKey ( ) ) ; vmp . setVersion ( mp . getVersion ( ) ) ; vmp . setOpen ( ( ! ( mp . isClosed ( ) ) ) ) ; vmp . setMarketplaceId ( mp . getMarketplaceId ( ) ) ; vmp . setOwningOrganizationId ( mp . getOwningOrganizationId ( ) ) ; vmp . setTaggingEnabled ( mp . isTaggingEnabled ( ) ) ; vmp . setReviewEnabled ( mp . isReviewEnabled ( ) ) ; vmp . setSocialBookmarkEnabled ( mp . isSocialBookmarkEnabled ( ) ) ; vmp . setCategoriesEnabled ( mp . isCategoriesEnabled ( ) ) ; vmp . setTenantId ( mp . getTenantId ( ) ) ; return vmp ; }", "answer": "org . junit . Assert . assertNotNull ( vMp )"}
{"focal": "getFirstAtomMapping ( ) { if ( allAtomMCS . iterator ( ) . hasNext ( ) ) { return allAtomMCS . iterator ( ) . next ( ) ; } return new org . openscience . smsd . AtomAtomMapping ( source , target ) ; }", "testMethod": "testSet_AtomContainer_AtomContainer ( ) { org . openscience . cdk . smiles . SmilesParser sp = new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ) ; org . openscience . cdk . interfaces . IAtomContainer target = sp . parseSmiles ( \"C\\\\C=C/Nc1cccc(c1)N(O)\\\\C=C\\\\C\\\\C=C\\\\C=C/C\" ) ; org . openscience . cdk . interfaces . IAtomContainer queryac = sp . parseSmiles ( \"Nc1ccccc1\" ) ; org . openscience . smsd . algorithm . mcsplus . MCSPlusHandler instance = new org . openscience . smsd . algorithm . mcsplus . MCSPlusHandler ( queryac , target , true , false , false ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance . getFirstAtomMapping ( ) )", "total": "testSet_AtomContainer_AtomContainer ( ) { org . openscience . cdk . smiles . SmilesParser sp = new org . openscience . cdk . smiles . SmilesParser ( org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ) ; org . openscience . cdk . interfaces . IAtomContainer target = sp . parseSmiles ( \"C\\\\C=C/Nc1cccc(c1)N(O)\\\\C=C\\\\C\\\\C=C\\\\C=C/C\" ) ; org . openscience . cdk . interfaces . IAtomContainer queryac = sp . parseSmiles ( \"Nc1ccccc1\" ) ; org . openscience . smsd . algorithm . mcsplus . MCSPlusHandler instance = new org . openscience . smsd . algorithm . mcsplus . MCSPlusHandler ( queryac , target , true , false , false ) ; \"<AssertPlaceHolder>\" ; } getFirstAtomMapping ( ) { if ( allAtomMCS . iterator ( ) . hasNext ( ) ) { return allAtomMCS . iterator ( ) . next ( ) ; } return new org . openscience . smsd . AtomAtomMapping ( source , target ) ; }", "answer": "org . junit . Assert . assertNotNull ( instance . getFirstAtomMapping ( ) )"}
{"focal": "save ( T extends org . graylog2 . plugin . database . Persisted ) { final java . lang . String resultId = super . save ( model ) ; if ( ( resultId != null ) && ( ! ( resultId . isEmpty ( ) ) ) ) { publishChange ( org . graylog2 . rest . models . system . inputs . responses . InputCreated . create ( resultId ) ) ; } return resultId ; }", "testMethod": "testSaveFirstRecord ( ) { final org . graylog . plugins . sidecar . rest . models . Sidecar sidecar = org . graylog . plugins . sidecar . rest . models . Sidecar . create ( \"nodeId\" , \"nodeName\" , org . graylog . plugins . sidecar . rest . models . NodeDetails . create ( \"DummyOS<sp>1.0\" , null , null , null , null ) , \"0.0.1\" ) ; final org . graylog . plugins . sidecar . rest . models . Sidecar result = this . sidecarService . save ( sidecar ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testSaveFirstRecord ( ) { final org . graylog . plugins . sidecar . rest . models . Sidecar sidecar = org . graylog . plugins . sidecar . rest . models . Sidecar . create ( \"nodeId\" , \"nodeName\" , org . graylog . plugins . sidecar . rest . models . NodeDetails . create ( \"DummyOS<sp>1.0\" , null , null , null , null ) , \"0.0.1\" ) ; final org . graylog . plugins . sidecar . rest . models . Sidecar result = this . sidecarService . save ( sidecar ) ; \"<AssertPlaceHolder>\" ; } save ( T extends org . graylog2 . plugin . database . Persisted ) { final java . lang . String resultId = super . save ( model ) ; if ( ( resultId != null ) && ( ! ( resultId . isEmpty ( ) ) ) ) { publishChange ( org . graylog2 . rest . models . system . inputs . responses . InputCreated . create ( resultId ) ) ; } return resultId ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "diversifiedSampler ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . aggregation . bucket . DiversifiedSamplerAggregationImpl ( name , field ) ; }", "testMethod": "testDiversifiedSamplerAggregation ( ) { com . liferay . portal . search . aggregation . bucket . DiversifiedSamplerAggregation diversifiedSamplerAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . diversifiedSampler ( \"name\" , \"field\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( diversifiedSamplerAggregation )", "total": "testDiversifiedSamplerAggregation ( ) { com . liferay . portal . search . aggregation . bucket . DiversifiedSamplerAggregation diversifiedSamplerAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . diversifiedSampler ( \"name\" , \"field\" ) ; \"<AssertPlaceHolder>\" ; } diversifiedSampler ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . aggregation . bucket . DiversifiedSamplerAggregationImpl ( name , field ) ; }", "answer": "org . junit . Assert . assertNotNull ( diversifiedSamplerAggregation )"}
{"focal": "fail ( java . lang . String ) { System . err . println ( message ) ; System . err . println ( \"Try<sp>-help<sp>for<sp>more<sp>information\" ) ; throw new java . lang . IllegalArgumentException ( message ) ; }", "testMethod": "testCreateDuplicateContainer ( ) { long testContainerID = getTestContainerID ( ) ; org . apache . hadoop . ozone . container . common . interfaces . Container container = addContainer ( org . apache . hadoop . ozone . container . common . impl . TestContainerPersistence . containerSet , testContainerID ) ; try { org . apache . hadoop . ozone . container . common . impl . TestContainerPersistence . containerSet . addContainer ( container ) ; org . junit . Assert . fail ( \"Expected<sp>Exception<sp>not<sp>thrown.\" ) ; } catch ( java . io . IOException ex ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( ex )", "total": "testCreateDuplicateContainer ( ) { long testContainerID = getTestContainerID ( ) ; org . apache . hadoop . ozone . container . common . interfaces . Container container = addContainer ( org . apache . hadoop . ozone . container . common . impl . TestContainerPersistence . containerSet , testContainerID ) ; try { org . apache . hadoop . ozone . container . common . impl . TestContainerPersistence . containerSet . addContainer ( container ) ; org . junit . Assert . fail ( \"Expected<sp>Exception<sp>not<sp>thrown.\" ) ; } catch ( java . io . IOException ex ) { \"<AssertPlaceHolder>\" ; } } fail ( java . lang . String ) { System . err . println ( message ) ; System . err . println ( \"Try<sp>-help<sp>for<sp>more<sp>information\" ) ; throw new java . lang . IllegalArgumentException ( message ) ; }", "answer": "org . junit . Assert . assertNotNull ( ex )"}
{"focal": "seekEvent ( double ) { if ( ( fFile ) == null ) { return new org . eclipse . tracecompass . tmf . core . trace . TmfContext ( org . eclipse . tracecompass . btf . core . trace . BtfTrace . NULL_LOCATION , org . eclipse . tracecompass . tmf . core . trace . ITmfContext . UNKNOWN_RANK ) ; } try { long pos = ( java . lang . Math . round ( ( ratio * ( fFile . length ( ) ) ) ) ) - ( fDataOffset ) ; while ( pos > 0 ) { fFileInput . seek ( ( pos - 1 ) ) ; if ( ( fFileInput . read ( ) ) == '\\n' ) { break ; } pos -- ; } final org . eclipse . tracecompass . tmf . core . trace . location . ITmfLocation location = new org . eclipse . tracecompass . tmf . core . trace . location . TmfLongLocation ( pos ) ; final org . eclipse . tracecompass . tmf . core . trace . ITmfContext context = seekEvent ( location ) ; context . setRank ( ITmfContext . UNKNOWN_RANK ) ; return context ; } catch ( final java . io . IOException e ) { org . eclipse . tracecompass . btf . core . Activator . logError ( ( \"Error<sp>seeking<sp>event.<sp>File:<sp>\" + ( getPath ( ) ) ) , e ) ; return new org . eclipse . tracecompass . tmf . core . parsers . custom . CustomTxtTraceContext ( org . eclipse . tracecompass . btf . core . trace . BtfTrace . NULL_LOCATION , org . eclipse . tracecompass . tmf . core . trace . ITmfContext . UNKNOWN_RANK ) ; } }", "testMethod": "testSeekEvent_timestamp ( ) { org . eclipse . tracecompass . tmf . core . timestamp . ITmfTimestamp timestamp = org . eclipse . tracecompass . tmf . core . timestamp . TmfTimestamp . create ( 0 , ITmfTimestamp . SECOND_SCALE ) ; org . eclipse . tracecompass . tmf . core . trace . ITmfContext result = fixture . seekEvent ( timestamp ) ; \"<AssertPlaceHolder>\" ; result . dispose ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testSeekEvent_timestamp ( ) { org . eclipse . tracecompass . tmf . core . timestamp . ITmfTimestamp timestamp = org . eclipse . tracecompass . tmf . core . timestamp . TmfTimestamp . create ( 0 , ITmfTimestamp . SECOND_SCALE ) ; org . eclipse . tracecompass . tmf . core . trace . ITmfContext result = fixture . seekEvent ( timestamp ) ; \"<AssertPlaceHolder>\" ; result . dispose ( ) ; } seekEvent ( double ) { if ( ( fFile ) == null ) { return new org . eclipse . tracecompass . tmf . core . trace . TmfContext ( org . eclipse . tracecompass . btf . core . trace . BtfTrace . NULL_LOCATION , org . eclipse . tracecompass . tmf . core . trace . ITmfContext . UNKNOWN_RANK ) ; } try { long pos = ( java . lang . Math . round ( ( ratio * ( fFile . length ( ) ) ) ) ) - ( fDataOffset ) ; while ( pos > 0 ) { fFileInput . seek ( ( pos - 1 ) ) ; if ( ( fFileInput . read ( ) ) == '\\n' ) { break ; } pos -- ; } final org . eclipse . tracecompass . tmf . core . trace . location . ITmfLocation location = new org . eclipse . tracecompass . tmf . core . trace . location . TmfLongLocation ( pos ) ; final org . eclipse . tracecompass . tmf . core . trace . ITmfContext context = seekEvent ( location ) ; context . setRank ( ITmfContext . UNKNOWN_RANK ) ; return context ; } catch ( final java . io . IOException e ) { org . eclipse . tracecompass . btf . core . Activator . logError ( ( \"Error<sp>seeking<sp>event.<sp>File:<sp>\" + ( getPath ( ) ) ) , e ) ; return new org . eclipse . tracecompass . tmf . core . parsers . custom . CustomTxtTraceContext ( org . eclipse . tracecompass . btf . core . trace . BtfTrace . NULL_LOCATION , org . eclipse . tracecompass . tmf . core . trace . ITmfContext . UNKNOWN_RANK ) ; } }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getAttributesMap ( ) { return attributesMap ; }", "testMethod": "testLoadAttributesMap_DefaultTag_EmptyDataNode ( ) { org . powermock . api . mockito . PowerMockito . doCallRealMethod ( ) . when ( org . pentaho . di . repository . pur . AttributesMapUtil . class , org . pentaho . di . repository . pur . AttributesMapUtilTest . LOAD_ATTRIBUTES_MAP_METHOD , any ( org . pentaho . platform . api . repository2 . unified . data . node . DataNode . class ) , any ( org . pentaho . di . core . AttributesInterface . class ) ) ; org . powermock . api . mockito . PowerMockito . doCallRealMethod ( ) . when ( org . pentaho . di . repository . pur . AttributesMapUtil . class , org . pentaho . di . repository . pur . AttributesMapUtilTest . LOAD_ATTRIBUTES_MAP_METHOD , any ( org . pentaho . platform . api . repository2 . unified . data . node . DataNode . class ) , any ( org . pentaho . di . core . AttributesInterface . class ) , anyString ( ) ) ; org . pentaho . platform . api . repository2 . unified . data . node . DataNode dataNode = new org . pentaho . platform . api . repository2 . unified . data . node . DataNode ( org . pentaho . di . repository . pur . AttributesMapUtilTest . CNST_DUMMY ) ; org . pentaho . di . job . entry . JobEntryCopy jobEntryCopy = new org . pentaho . di . job . entry . JobEntryCopy ( ) ; org . pentaho . di . repository . pur . AttributesMapUtil . loadAttributesMap ( dataNode , jobEntryCopy ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( jobEntryCopy . getAttributesMap ( ) )", "total": "testLoadAttributesMap_DefaultTag_EmptyDataNode ( ) { org . powermock . api . mockito . PowerMockito . doCallRealMethod ( ) . when ( org . pentaho . di . repository . pur . AttributesMapUtil . class , org . pentaho . di . repository . pur . AttributesMapUtilTest . LOAD_ATTRIBUTES_MAP_METHOD , any ( org . pentaho . platform . api . repository2 . unified . data . node . DataNode . class ) , any ( org . pentaho . di . core . AttributesInterface . class ) ) ; org . powermock . api . mockito . PowerMockito . doCallRealMethod ( ) . when ( org . pentaho . di . repository . pur . AttributesMapUtil . class , org . pentaho . di . repository . pur . AttributesMapUtilTest . LOAD_ATTRIBUTES_MAP_METHOD , any ( org . pentaho . platform . api . repository2 . unified . data . node . DataNode . class ) , any ( org . pentaho . di . core . AttributesInterface . class ) , anyString ( ) ) ; org . pentaho . platform . api . repository2 . unified . data . node . DataNode dataNode = new org . pentaho . platform . api . repository2 . unified . data . node . DataNode ( org . pentaho . di . repository . pur . AttributesMapUtilTest . CNST_DUMMY ) ; org . pentaho . di . job . entry . JobEntryCopy jobEntryCopy = new org . pentaho . di . job . entry . JobEntryCopy ( ) ; org . pentaho . di . repository . pur . AttributesMapUtil . loadAttributesMap ( dataNode , jobEntryCopy ) ; \"<AssertPlaceHolder>\" ; } getAttributesMap ( ) { return attributesMap ; }", "answer": "org . junit . Assert . assertNotNull ( jobEntryCopy . getAttributesMap ( ) )"}
{"focal": "getActivity ( ) { return _tester . getActivity ( ) ; }", "testMethod": "testPreconditions ( ) { startActivity ( startIntent , null , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( getActivity ( ) )", "total": "testPreconditions ( ) { startActivity ( startIntent , null , null ) ; \"<AssertPlaceHolder>\" ; } getActivity ( ) { return _tester . getActivity ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( getActivity ( ) )"}
{"focal": "makeIndex ( java . lang . String [ ] , java . lang . String [ ] ) { ( org . terrier . indexing . IndexTestUtils . count ) ++ ; return org . terrier . indexing . IndexTestUtils . makeIndex ( docnos , documents , new org . terrier . structures . indexing . classical . BasicIndexer ( org . terrier . utility . ApplicationSetup . TERRIER_INDEX_PATH , ( ( ( org . terrier . utility . ApplicationSetup . TERRIER_INDEX_PREFIX ) + '-' ) + ( org . terrier . indexing . IndexTestUtils . count ) ) ) , ApplicationSetup . TERRIER_INDEX_PATH , ( ( ( org . terrier . utility . ApplicationSetup . TERRIER_INDEX_PREFIX ) + '-' ) + ( org . terrier . indexing . IndexTestUtils . count ) ) ) ; }", "testMethod": "test_diskVmulti ( ) { org . terrier . utility . ApplicationSetup . setProperty ( \"termpipelines\" , \"\" ) ; org . terrier . utility . ApplicationSetup . setProperty ( \"five\" 1 , \"filename\" ) ; org . terrier . utility . ApplicationSetup . setProperty ( \"five\" 3 , \"100\" ) ; org . terrier . utility . ApplicationSetup . setProperty ( \"indexer.meta.reverse.keys\" , \"filename\" ) ; org . terrier . structures . Index disk = org . terrier . indexing . IndexTestUtils . makeIndex ( new java . lang . String [ ] { \"five\" 0 , \"B\" } , new java . lang . String [ ] { \"five\" 2 , \"three<sp>four<sp>five\" } ) ; org . terrier . structures . Index disk1 = org . terrier . indexing . IndexTestUtils . makeIndex ( new java . lang . String [ ] { \"five\" 0 } , new java . lang . String [ ] { \"five\" 2 } ) ; org . terrier . structures . Index disk2 = org . terrier . indexing . IndexTestUtils . makeIndex ( new java . lang . String [ ] { \"B\" } , new java . lang . String [ ] { \"three<sp>four<sp>five\" } ) ; org . terrier . structures . Index multi = new org . terrier . realtime . multi . MultiIndex ( new org . terrier . structures . Index [ ] { disk1 , disk2 } ) ; \"<AssertPlaceHolder>\" ; org . terrier . realtime . TestUtils . compareIndices ( disk , multi ) ; org . terrier . realtime . TestUtils . compareProperties ( disk , multi ) ; org . terrier . realtime . TestUtils . compareRetrieval ( \"one\" , disk , multi ) ; org . terrier . realtime . TestUtils . compareRetrieval ( \"three\" , disk , multi ) ; org . terrier . realtime . TestUtils . compareRetrieval ( \"five\" , disk , multi ) ; org . terrier . realtime . TestUtils . checkContents ( disk , \"one\" , 1 , new int [ ] { 0 } , new int [ ] { 1 } , new int [ ] { 3 } ) ; org . terrier . realtime . TestUtils . checkContents ( multi , \"one\" , 1 , new int [ ] { 0 } , new int [ ] { 1 } , new int [ ] { 3 } ) ; org . terrier . realtime . TestUtils . checkContents ( disk , \"three\" , 2 , new int [ ] { 0 , 1 } , new int [ ] { 1 , 1 } , new int [ ] { 3 , 3 } ) ; org . terrier . realtime . TestUtils . checkContents ( multi , \"three\" , 2 , new int [ ] { 0 , 1 } , new int [ ] { 1 , 1 } , new int [ ] { 3 , 3 } ) ; org . terrier . realtime . TestUtils . checkContents ( disk , \"five\" , 1 , new int [ ] { 1 } , new int [ ] { 1 } , new int [ ] { 3 } ) ; org . terrier . realtime . TestUtils . checkContents ( multi , \"five\" , 1 , new int [ ] { 1 } , new int [ ] { 1 } , new int [ ] { 3 } ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( multi )", "total": "test_diskVmulti ( ) { org . terrier . utility . ApplicationSetup . setProperty ( \"termpipelines\" , \"\" ) ; org . terrier . utility . ApplicationSetup . setProperty ( \"five\" 1 , \"filename\" ) ; org . terrier . utility . ApplicationSetup . setProperty ( \"five\" 3 , \"100\" ) ; org . terrier . utility . ApplicationSetup . setProperty ( \"indexer.meta.reverse.keys\" , \"filename\" ) ; org . terrier . structures . Index disk = org . terrier . indexing . IndexTestUtils . makeIndex ( new java . lang . String [ ] { \"five\" 0 , \"B\" } , new java . lang . String [ ] { \"five\" 2 , \"three<sp>four<sp>five\" } ) ; org . terrier . structures . Index disk1 = org . terrier . indexing . IndexTestUtils . makeIndex ( new java . lang . String [ ] { \"five\" 0 } , new java . lang . String [ ] { \"five\" 2 } ) ; org . terrier . structures . Index disk2 = org . terrier . indexing . IndexTestUtils . makeIndex ( new java . lang . String [ ] { \"B\" } , new java . lang . String [ ] { \"three<sp>four<sp>five\" } ) ; org . terrier . structures . Index multi = new org . terrier . realtime . multi . MultiIndex ( new org . terrier . structures . Index [ ] { disk1 , disk2 } ) ; \"<AssertPlaceHolder>\" ; org . terrier . realtime . TestUtils . compareIndices ( disk , multi ) ; org . terrier . realtime . TestUtils . compareProperties ( disk , multi ) ; org . terrier . realtime . TestUtils . compareRetrieval ( \"one\" , disk , multi ) ; org . terrier . realtime . TestUtils . compareRetrieval ( \"three\" , disk , multi ) ; org . terrier . realtime . TestUtils . compareRetrieval ( \"five\" , disk , multi ) ; org . terrier . realtime . TestUtils . checkContents ( disk , \"one\" , 1 , new int [ ] { 0 } , new int [ ] { 1 } , new int [ ] { 3 } ) ; org . terrier . realtime . TestUtils . checkContents ( multi , \"one\" , 1 , new int [ ] { 0 } , new int [ ] { 1 } , new int [ ] { 3 } ) ; org . terrier . realtime . TestUtils . checkContents ( disk , \"three\" , 2 , new int [ ] { 0 , 1 } , new int [ ] { 1 , 1 } , new int [ ] { 3 , 3 } ) ; org . terrier . realtime . TestUtils . checkContents ( multi , \"three\" , 2 , new int [ ] { 0 , 1 } , new int [ ] { 1 , 1 } , new int [ ] { 3 , 3 } ) ; org . terrier . realtime . TestUtils . checkContents ( disk , \"five\" , 1 , new int [ ] { 1 } , new int [ ] { 1 } , new int [ ] { 3 } ) ; org . terrier . realtime . TestUtils . checkContents ( multi , \"five\" , 1 , new int [ ] { 1 } , new int [ ] { 1 } , new int [ ] { 3 } ) ; } makeIndex ( java . lang . String [ ] , java . lang . String [ ] ) { ( org . terrier . indexing . IndexTestUtils . count ) ++ ; return org . terrier . indexing . IndexTestUtils . makeIndex ( docnos , documents , new org . terrier . structures . indexing . classical . BasicIndexer ( org . terrier . utility . ApplicationSetup . TERRIER_INDEX_PATH , ( ( ( org . terrier . utility . ApplicationSetup . TERRIER_INDEX_PREFIX ) + '-' ) + ( org . terrier . indexing . IndexTestUtils . count ) ) ) , ApplicationSetup . TERRIER_INDEX_PATH , ( ( ( org . terrier . utility . ApplicationSetup . TERRIER_INDEX_PREFIX ) + '-' ) + ( org . terrier . indexing . IndexTestUtils . count ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( multi )"}
{"focal": "instantiate ( java . lang . Class , java . lang . Class ) { if ( clazz == null ) { throw new java . lang . NullPointerException ( ) ; } if ( ( castTo != null ) && ( ! ( castTo . isAssignableFrom ( clazz ) ) ) ) { throw new java . lang . RuntimeException ( ( ( ( ( \"The<sp>class<sp>'\" + ( clazz . getName ( ) ) ) + \"'<sp>is<sp>not<sp>a<sp>subclass<sp>of<sp>'\" ) + ( castTo . getName ( ) ) ) + \"'<sp>as<sp>is<sp>required.\" ) ) ; } return eu . stratosphere . util . InstantiationUtil . instantiate ( clazz ) ; }", "testMethod": "testInstatiationOfStringValue ( ) { eu . stratosphere . types . StringValue stringValue = eu . stratosphere . util . InstantiationUtil . instantiate ( eu . stratosphere . types . StringValue . class , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( stringValue )", "total": "testInstatiationOfStringValue ( ) { eu . stratosphere . types . StringValue stringValue = eu . stratosphere . util . InstantiationUtil . instantiate ( eu . stratosphere . types . StringValue . class , null ) ; \"<AssertPlaceHolder>\" ; } instantiate ( java . lang . Class , java . lang . Class ) { if ( clazz == null ) { throw new java . lang . NullPointerException ( ) ; } if ( ( castTo != null ) && ( ! ( castTo . isAssignableFrom ( clazz ) ) ) ) { throw new java . lang . RuntimeException ( ( ( ( ( \"The<sp>class<sp>'\" + ( clazz . getName ( ) ) ) + \"'<sp>is<sp>not<sp>a<sp>subclass<sp>of<sp>'\" ) + ( castTo . getName ( ) ) ) + \"'<sp>as<sp>is<sp>required.\" ) ) ; } return eu . stratosphere . util . InstantiationUtil . instantiate ( clazz ) ; }", "answer": "org . junit . Assert . assertNotNull ( stringValue )"}
{"focal": "getDataSource ( java . lang . String [ ] ) { for ( int count = 0 ; count < ( args . length ) ; count ++ ) { if ( args [ count ] . equalsIgnoreCase ( \"-username\" ) ) { setUsername ( args [ ( count + 1 ) ] ) ; } else if ( args [ count ] . equalsIgnoreCase ( \"-password\" ) ) { setPassword ( args [ ( count + 1 ) ] ) ; } else if ( args [ count ] . equalsIgnoreCase ( \"-database\" ) ) { setDatabase ( args [ ( count + 1 ) ] ) ; } else if ( args [ count ] . equalsIgnoreCase ( \"-port\" ) ) { setPort ( java . lang . Integer . parseInt ( args [ ( count + 1 ) ] ) ) ; } else if ( args [ count ] . equalsIgnoreCase ( \"-server\" ) ) { setServer ( args [ ( count + 1 ) ] ) ; } else if ( args [ count ] . equalsIgnoreCase ( \"-url\" ) ) { setUrl ( args [ ( count + 1 ) ] ) ; } } return processParameters ( args ) ; }", "testMethod": "test ( ) { com . hp . mwtests . ts . jdbc . utils . DBPlugin plugin = ( ( com . hp . mwtests . ts . jdbc . utils . DBPlugin ) ( java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . loadClass ( \"TODO\" ) . newInstance ( ) ) ) ; java . lang . String jndiName = \"jdbc/DB\" ; javax . sql . DataSource ds = plugin . getDataSource ( new java . lang . String [ ] { \"TODO\" } ) ; \"<AssertPlaceHolder>\" ; System . out . println ( ( ( \"Binding<sp>datasource<sp>to<sp>'\" + jndiName ) + \"'\" ) ) ; javax . naming . InitialContext ctx = new javax . naming . InitialContext ( ) ; ctx . rebind ( jndiName , ds ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( ds )", "total": "test ( ) { com . hp . mwtests . ts . jdbc . utils . DBPlugin plugin = ( ( com . hp . mwtests . ts . jdbc . utils . DBPlugin ) ( java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . loadClass ( \"TODO\" ) . newInstance ( ) ) ) ; java . lang . String jndiName = \"jdbc/DB\" ; javax . sql . DataSource ds = plugin . getDataSource ( new java . lang . String [ ] { \"TODO\" } ) ; \"<AssertPlaceHolder>\" ; System . out . println ( ( ( \"Binding<sp>datasource<sp>to<sp>'\" + jndiName ) + \"'\" ) ) ; javax . naming . InitialContext ctx = new javax . naming . InitialContext ( ) ; ctx . rebind ( jndiName , ds ) ; } getDataSource ( java . lang . String [ ] ) { for ( int count = 0 ; count < ( args . length ) ; count ++ ) { if ( args [ count ] . equalsIgnoreCase ( \"-username\" ) ) { setUsername ( args [ ( count + 1 ) ] ) ; } else if ( args [ count ] . equalsIgnoreCase ( \"-password\" ) ) { setPassword ( args [ ( count + 1 ) ] ) ; } else if ( args [ count ] . equalsIgnoreCase ( \"-database\" ) ) { setDatabase ( args [ ( count + 1 ) ] ) ; } else if ( args [ count ] . equalsIgnoreCase ( \"-port\" ) ) { setPort ( java . lang . Integer . parseInt ( args [ ( count + 1 ) ] ) ) ; } else if ( args [ count ] . equalsIgnoreCase ( \"-server\" ) ) { setServer ( args [ ( count + 1 ) ] ) ; } else if ( args [ count ] . equalsIgnoreCase ( \"-url\" ) ) { setUrl ( args [ ( count + 1 ) ] ) ; } } return processParameters ( args ) ; }", "answer": "org . junit . Assert . assertNotNull ( ds )"}
{"focal": "getCurrentUserSession ( ) { org . apache . ranger . common . UserSessionBase userSession = null ; org . apache . ranger . security . context . RangerSecurityContext context = org . apache . ranger . security . context . RangerContextHolder . getSecurityContext ( ) ; if ( context != null ) { userSession = context . getUserSession ( ) ; } return userSession ; }", "testMethod": "testCurrentUserSession ( ) { org . apache . ranger . common . UserSessionBase expectedUserSession = contextUtil . getCurrentUserSession ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( expectedUserSession )", "total": "testCurrentUserSession ( ) { org . apache . ranger . common . UserSessionBase expectedUserSession = contextUtil . getCurrentUserSession ( ) ; \"<AssertPlaceHolder>\" ; } getCurrentUserSession ( ) { org . apache . ranger . common . UserSessionBase userSession = null ; org . apache . ranger . security . context . RangerSecurityContext context = org . apache . ranger . security . context . RangerContextHolder . getSecurityContext ( ) ; if ( context != null ) { userSession = context . getUserSession ( ) ; } return userSession ; }", "answer": "org . junit . Assert . assertNotNull ( expectedUserSession )"}
{"focal": "getFile ( java . lang . String ) { java . io . File file = null ; final java . lang . String [ ] exts = new java . lang . String [ ] { \".zip\" , \".gz\" , \"\" } ; for ( java . lang . String ext : exts ) { file = new java . io . File ( ( filePath + ext ) ) ; if ( file . exists ( ) ) { break ; } } if ( file == null ) { for ( java . lang . String ext : exts ) { final java . net . URI fileUri = org . esa . beam . dataio . envisat . EnvisatAuxReader . getFileURI ( ( filePath + ext ) ) ; if ( fileUri != null ) { file = new java . io . File ( fileUri ) ; if ( file . exists ( ) ) { break ; } } } } if ( file == null ) { throw new java . io . FileNotFoundException ( ( \"ENVISAT<sp>product<sp>not<sp>found:<sp>\" + filePath ) ) ; } return file ; }", "testMethod": "testTar_noDirInTar_getFile ( ) { final java . io . File testTgz = org . esa . beam . dataio . landsat . TestUtil . getTestFile ( \"tgz/test-archive_wo_dir.tar\" ) ; virtualDir = new org . esa . beam . dataio . landsat . tgz . VirtualDirTgz ( testTgz ) ; final java . io . File file_1 = virtualDir . getFile ( \"file1.txt\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( file_1 )", "total": "testTar_noDirInTar_getFile ( ) { final java . io . File testTgz = org . esa . beam . dataio . landsat . TestUtil . getTestFile ( \"tgz/test-archive_wo_dir.tar\" ) ; virtualDir = new org . esa . beam . dataio . landsat . tgz . VirtualDirTgz ( testTgz ) ; final java . io . File file_1 = virtualDir . getFile ( \"file1.txt\" ) ; \"<AssertPlaceHolder>\" ; } getFile ( java . lang . String ) { java . io . File file = null ; final java . lang . String [ ] exts = new java . lang . String [ ] { \".zip\" , \".gz\" , \"\" } ; for ( java . lang . String ext : exts ) { file = new java . io . File ( ( filePath + ext ) ) ; if ( file . exists ( ) ) { break ; } } if ( file == null ) { for ( java . lang . String ext : exts ) { final java . net . URI fileUri = org . esa . beam . dataio . envisat . EnvisatAuxReader . getFileURI ( ( filePath + ext ) ) ; if ( fileUri != null ) { file = new java . io . File ( fileUri ) ; if ( file . exists ( ) ) { break ; } } } } if ( file == null ) { throw new java . io . FileNotFoundException ( ( \"ENVISAT<sp>product<sp>not<sp>found:<sp>\" + filePath ) ) ; } return file ; }", "answer": "org . junit . Assert . assertNotNull ( file_1 )"}
{"focal": "parse ( java . lang . String ) { if ( org . apache . commons . lang . StringUtils . isEmpty ( rawText ) ) return null ; else { try { return DefaultExtractor . INSTANCE . getText ( rawText ) ; } catch ( de . l3s . boilerpipe . BoilerpipeProcessingException e ) { com . mycompany . newsclip . KeywordExtractFunction . LOGGER . error ( e . getMessage ( ) , e ) ; return null ; } } }", "testMethod": "testParse ( ) { cascading . tuple . Fields kwordFields = new cascading . tuple . Fields ( \"kword\" ) ; com . mycompany . newsclip . KeywordExtractFunction func = new com . mycompany . newsclip . KeywordExtractFunction ( kwordFields ) ; java . lang . String rawText = org . apache . commons . io . FileUtils . readFileToString ( new java . io . File ( \"/tmp/newsclip_testDownload.txt\" ) ) ; java . lang . String plainText = func . parse ( rawText ) ; org . apache . commons . io . FileUtils . writeStringToFile ( new java . io . File ( \"/tmp/newsclip_testParse.txt\" ) , plainText ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( plainText )", "total": "testParse ( ) { cascading . tuple . Fields kwordFields = new cascading . tuple . Fields ( \"kword\" ) ; com . mycompany . newsclip . KeywordExtractFunction func = new com . mycompany . newsclip . KeywordExtractFunction ( kwordFields ) ; java . lang . String rawText = org . apache . commons . io . FileUtils . readFileToString ( new java . io . File ( \"/tmp/newsclip_testDownload.txt\" ) ) ; java . lang . String plainText = func . parse ( rawText ) ; org . apache . commons . io . FileUtils . writeStringToFile ( new java . io . File ( \"/tmp/newsclip_testParse.txt\" ) , plainText ) ; \"<AssertPlaceHolder>\" ; } parse ( java . lang . String ) { if ( org . apache . commons . lang . StringUtils . isEmpty ( rawText ) ) return null ; else { try { return DefaultExtractor . INSTANCE . getText ( rawText ) ; } catch ( de . l3s . boilerpipe . BoilerpipeProcessingException e ) { com . mycompany . newsclip . KeywordExtractFunction . LOGGER . error ( e . getMessage ( ) , e ) ; return null ; } } }", "answer": "org . junit . Assert . assertNotNull ( plainText )"}
{"focal": "objectFromJsonResource ( java . lang . Class , java . lang . ClassLoader , java . lang . String ) { com . fasterxml . jackson . databind . ObjectMapper om = new com . fasterxml . jackson . databind . ObjectMapper ( ) ; java . io . InputStream inputStream = resourceClassLoader . getResourceAsStream ( resourceLocation ) ; T returnObject = om . readValue ( inputStream , objectClass ) ; inputStream . close ( ) ; return returnObject ; }", "testMethod": "testInsertAsyncMulti ( ) { com . pardot . rhombus . functional . AsyncExecITCase . logger . debug ( \"Starting<sp>testInsertAsync\" ) ; com . pardot . rhombus . ConnectionManager cm = getConnectionManager ( ) ; com . pardot . rhombus . cobject . CKeyspaceDefinition definition = com . pardot . rhombus . util . JsonUtil . objectFromJsonResource ( com . pardot . rhombus . cobject . CKeyspaceDefinition . class , this . getClass ( ) . getClassLoader ( ) , \"AuditKeyspace.js\" ) ; \"<AssertPlaceHolder>\" ; cm . buildKeyspace ( definition , true ) ; com . pardot . rhombus . functional . AsyncExecITCase . logger . debug ( \"Built<sp>keyspace:<sp>{}\" , definition . getName ( ) ) ; cm . setDefaultKeyspace ( definition ) ; final com . pardot . rhombus . ObjectMapper om = cm . getObjectMapper ( ) ; final int numThreads = 10 ; final java . util . concurrent . ExecutorService executorService = java . util . concurrent . Executors . newFixedThreadPool ( numThreads ) ; java . util . List < java . util . Map < java . lang . String , java . lang . Object > > values = com . pardot . rhombus . util . JsonUtil . rhombusMapFromResource ( this . getClass ( ) . getClassLoader ( ) , \"DateRangeQueryTestData.js\" ) ; final com . pardot . rhombus . cobject . CDefinition objectAuditDef = definition . getDefinitions ( ) . get ( \"object_audit\" ) ; long startTime = java . lang . System . currentTimeMillis ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { insertObjectSetAsync ( numThreads , executorService , om , values , objectAuditDef ) ; } com . pardot . rhombus . functional . AsyncExecITCase . logger . warn ( \"Total<sp>time:<sp>{}ms\" , ( ( java . lang . System . currentTimeMillis ( ) ) - startTime ) ) ; cm . teardown ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( definition )", "total": "testInsertAsyncMulti ( ) { com . pardot . rhombus . functional . AsyncExecITCase . logger . debug ( \"Starting<sp>testInsertAsync\" ) ; com . pardot . rhombus . ConnectionManager cm = getConnectionManager ( ) ; com . pardot . rhombus . cobject . CKeyspaceDefinition definition = com . pardot . rhombus . util . JsonUtil . objectFromJsonResource ( com . pardot . rhombus . cobject . CKeyspaceDefinition . class , this . getClass ( ) . getClassLoader ( ) , \"AuditKeyspace.js\" ) ; \"<AssertPlaceHolder>\" ; cm . buildKeyspace ( definition , true ) ; com . pardot . rhombus . functional . AsyncExecITCase . logger . debug ( \"Built<sp>keyspace:<sp>{}\" , definition . getName ( ) ) ; cm . setDefaultKeyspace ( definition ) ; final com . pardot . rhombus . ObjectMapper om = cm . getObjectMapper ( ) ; final int numThreads = 10 ; final java . util . concurrent . ExecutorService executorService = java . util . concurrent . Executors . newFixedThreadPool ( numThreads ) ; java . util . List < java . util . Map < java . lang . String , java . lang . Object > > values = com . pardot . rhombus . util . JsonUtil . rhombusMapFromResource ( this . getClass ( ) . getClassLoader ( ) , \"DateRangeQueryTestData.js\" ) ; final com . pardot . rhombus . cobject . CDefinition objectAuditDef = definition . getDefinitions ( ) . get ( \"object_audit\" ) ; long startTime = java . lang . System . currentTimeMillis ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { insertObjectSetAsync ( numThreads , executorService , om , values , objectAuditDef ) ; } com . pardot . rhombus . functional . AsyncExecITCase . logger . warn ( \"Total<sp>time:<sp>{}ms\" , ( ( java . lang . System . currentTimeMillis ( ) ) - startTime ) ) ; cm . teardown ( ) ; } objectFromJsonResource ( java . lang . Class , java . lang . ClassLoader , java . lang . String ) { com . fasterxml . jackson . databind . ObjectMapper om = new com . fasterxml . jackson . databind . ObjectMapper ( ) ; java . io . InputStream inputStream = resourceClassLoader . getResourceAsStream ( resourceLocation ) ; T returnObject = om . readValue ( inputStream , objectClass ) ; inputStream . close ( ) ; return returnObject ; }", "answer": "org . junit . Assert . assertNotNull ( definition )"}
{"focal": "verifyNoMoreInteractionsHelper ( ) { verifyNoMoreInteractions ( awsHelper , javaPropertiesHelper , retryPolicyFactory , s3Operations ) ; }", "testMethod": "testGetJestClientHttp ( ) { when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_AWS_REGION_NAME ) ) . thenReturn ( org . finra . herd . dao . AWS_REGION_NAME ) ; when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_HOSTNAME ) ) . thenReturn ( org . finra . herd . dao . ELASTICSEARCH_HOSTNAME ) ; when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_PORT , org . finra . herd . dao . Integer . class ) ) . thenReturn ( org . finra . herd . dao . ELASTICSEARCH_PORT ) ; when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_SCHEME ) ) . thenReturn ( \"http\" ) ; when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_REST_CLIENT_READ_TIMEOUT , org . finra . herd . dao . Integer . class ) ) . thenReturn ( org . finra . herd . dao . READ_TIMEOUT ) ; when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_REST_CLIENT_CONNECTION_TIMEOUT , org . finra . herd . dao . Integer . class ) ) . thenReturn ( org . finra . herd . dao . CONNECTION_TIMEOUT ) ; io . searchbox . client . JestClient jestClient = jestClientFactory . getJestClient ( ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_AWS_REGION_NAME ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_HOSTNAME ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_PORT , org . finra . herd . dao . Integer . class ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_SCHEME ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_REST_CLIENT_READ_TIMEOUT , org . finra . herd . dao . Integer . class ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_REST_CLIENT_CONNECTION_TIMEOUT , org . finra . herd . dao . Integer . class ) ; verifyNoMoreInteractionsHelper ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( jestClient )", "total": "testGetJestClientHttp ( ) { when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_AWS_REGION_NAME ) ) . thenReturn ( org . finra . herd . dao . AWS_REGION_NAME ) ; when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_HOSTNAME ) ) . thenReturn ( org . finra . herd . dao . ELASTICSEARCH_HOSTNAME ) ; when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_PORT , org . finra . herd . dao . Integer . class ) ) . thenReturn ( org . finra . herd . dao . ELASTICSEARCH_PORT ) ; when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_SCHEME ) ) . thenReturn ( \"http\" ) ; when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_REST_CLIENT_READ_TIMEOUT , org . finra . herd . dao . Integer . class ) ) . thenReturn ( org . finra . herd . dao . READ_TIMEOUT ) ; when ( configurationHelper . getProperty ( ConfigurationValue . ELASTICSEARCH_REST_CLIENT_CONNECTION_TIMEOUT , org . finra . herd . dao . Integer . class ) ) . thenReturn ( org . finra . herd . dao . CONNECTION_TIMEOUT ) ; io . searchbox . client . JestClient jestClient = jestClientFactory . getJestClient ( ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_AWS_REGION_NAME ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_HOSTNAME ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_PORT , org . finra . herd . dao . Integer . class ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_DOMAIN_REST_CLIENT_SCHEME ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_REST_CLIENT_READ_TIMEOUT , org . finra . herd . dao . Integer . class ) ; verify ( configurationHelper ) . getProperty ( ConfigurationValue . ELASTICSEARCH_REST_CLIENT_CONNECTION_TIMEOUT , org . finra . herd . dao . Integer . class ) ; verifyNoMoreInteractionsHelper ( ) ; \"<AssertPlaceHolder>\" ; } verifyNoMoreInteractionsHelper ( ) { verifyNoMoreInteractions ( awsHelper , javaPropertiesHelper , retryPolicyFactory , s3Operations ) ; }", "answer": "org . junit . Assert . assertNotNull ( jestClient )"}
{"focal": "sign ( be . e_contract . mycarenet . certra . cms . aqdr . EHActorQualitiesDataRequest ) { try { javax . xml . bind . JAXBContext jaxbContext = javax . xml . bind . JAXBContext . newInstance ( be . e_contract . mycarenet . certra . cms . revoke . ObjectFactory . class ) ; javax . xml . bind . Marshaller marshaller = jaxbContext . createMarshaller ( ) ; java . io . ByteArrayOutputStream outputStream = new java . io . ByteArrayOutputStream ( ) ; marshaller . marshal ( dataRequest , outputStream ) ; return sign ( outputStream . toByteArray ( ) ) ; } catch ( java . lang . Exception e ) { throw new java . security . SignatureException ( e ) ; } }", "testMethod": "testSignRevocableCertificatesDataRequest ( ) { be . e_contract . mycarenet . certra . cms . revoke . ObjectFactory objectFactory = new be . e_contract . mycarenet . certra . cms . revoke . ObjectFactory ( ) ; be . e_contract . mycarenet . certra . cms . revoke . RevocableCertificatesDataRequest request = objectFactory . createRevocableCertificatesDataRequest ( ) ; request . setSSIN ( \"12345678\" ) ; java . security . KeyPair keyPair = test . unit . be . e_contract . mycarenet . certra . cms . CMSSignerTest . generateKeyPair ( ) ; java . security . PrivateKey privateKey = keyPair . getPrivate ( ) ; java . security . cert . X509Certificate certificate = test . unit . be . e_contract . mycarenet . certra . cms . CMSSignerTest . generateCertificate ( keyPair , \"CN=Test\" ) ; be . e_contract . mycarenet . certra . cms . CMSSigner cmsSigner = new be . e_contract . mycarenet . certra . cms . CMSSigner ( privateKey , java . util . Collections . singletonList ( certificate ) ) ; byte [ ] result = cmsSigner . sign ( request ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testSignRevocableCertificatesDataRequest ( ) { be . e_contract . mycarenet . certra . cms . revoke . ObjectFactory objectFactory = new be . e_contract . mycarenet . certra . cms . revoke . ObjectFactory ( ) ; be . e_contract . mycarenet . certra . cms . revoke . RevocableCertificatesDataRequest request = objectFactory . createRevocableCertificatesDataRequest ( ) ; request . setSSIN ( \"12345678\" ) ; java . security . KeyPair keyPair = test . unit . be . e_contract . mycarenet . certra . cms . CMSSignerTest . generateKeyPair ( ) ; java . security . PrivateKey privateKey = keyPair . getPrivate ( ) ; java . security . cert . X509Certificate certificate = test . unit . be . e_contract . mycarenet . certra . cms . CMSSignerTest . generateCertificate ( keyPair , \"CN=Test\" ) ; be . e_contract . mycarenet . certra . cms . CMSSigner cmsSigner = new be . e_contract . mycarenet . certra . cms . CMSSigner ( privateKey , java . util . Collections . singletonList ( certificate ) ) ; byte [ ] result = cmsSigner . sign ( request ) ; \"<AssertPlaceHolder>\" ; } sign ( be . e_contract . mycarenet . certra . cms . aqdr . EHActorQualitiesDataRequest ) { try { javax . xml . bind . JAXBContext jaxbContext = javax . xml . bind . JAXBContext . newInstance ( be . e_contract . mycarenet . certra . cms . revoke . ObjectFactory . class ) ; javax . xml . bind . Marshaller marshaller = jaxbContext . createMarshaller ( ) ; java . io . ByteArrayOutputStream outputStream = new java . io . ByteArrayOutputStream ( ) ; marshaller . marshal ( dataRequest , outputStream ) ; return sign ( outputStream . toByteArray ( ) ) ; } catch ( java . lang . Exception e ) { throw new java . security . SignatureException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "removeToken ( java . lang . String ) { ds . delete ( ds . find ( entityClazz , \"oauthToken\" , token ) ) ; }", "testMethod": "testRetrieveAndRemoveToken ( ) { org . scribe . model . Token retrievedToken = mongoDbOAuthTokenCacheService . retrieveAndRemoveToken ( \"access\" ) ; verify ( oAuthRequestTokenDao , times ( 1 ) ) . findByToken ( \"access\" ) ; verify ( oAuthRequestTokenDao , times ( 1 ) ) . removeToken ( \"access\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( retrievedToken )", "total": "testRetrieveAndRemoveToken ( ) { org . scribe . model . Token retrievedToken = mongoDbOAuthTokenCacheService . retrieveAndRemoveToken ( \"access\" ) ; verify ( oAuthRequestTokenDao , times ( 1 ) ) . findByToken ( \"access\" ) ; verify ( oAuthRequestTokenDao , times ( 1 ) ) . removeToken ( \"access\" ) ; \"<AssertPlaceHolder>\" ; } removeToken ( java . lang . String ) { ds . delete ( ds . find ( entityClazz , \"oauthToken\" , token ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( retrievedToken )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . CtlFrequency entity = new org . oscarehr . common . model . CtlFrequency ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . CtlFrequency entity = new org . oscarehr . common . model . CtlFrequency ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "getEntity ( ) { return entity ; }", "testMethod": "should_create ( ) { com . ctp . cdi . query . test . domain . Home entity = new com . ctp . cdi . query . test . domain . Home ( ) ; entity . setName ( \"testCreate\" ) ; home . setEntity ( entity ) ; home . update ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( home . getEntity ( ) . getId ( ) )", "total": "should_create ( ) { com . ctp . cdi . query . test . domain . Home entity = new com . ctp . cdi . query . test . domain . Home ( ) ; entity . setName ( \"testCreate\" ) ; home . setEntity ( entity ) ; home . update ( ) ; \"<AssertPlaceHolder>\" ; } getEntity ( ) { return entity ; }", "answer": "org . junit . Assert . assertNotNull ( home . getEntity ( ) . getId ( ) )"}
{"focal": "getMessage ( ) { return builder . getMessage ( ) ; }", "testMethod": "testUpdateReservationNormal ( ) { org . apache . hadoop . yarn . api . protocolrecords . ReservationUpdateRequest request = createSimpleReservationUpdateRequest ( 1 , 1 , 1 , 5 , 3 ) ; org . apache . hadoop . yarn . server . resourcemanager . reservation . Plan plan = null ; try { plan = rrValidator . validateReservationUpdateRequest ( rSystem , request ) ; } catch ( org . apache . hadoop . yarn . exceptions . YarnException e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( plan )", "total": "testUpdateReservationNormal ( ) { org . apache . hadoop . yarn . api . protocolrecords . ReservationUpdateRequest request = createSimpleReservationUpdateRequest ( 1 , 1 , 1 , 5 , 3 ) ; org . apache . hadoop . yarn . server . resourcemanager . reservation . Plan plan = null ; try { plan = rrValidator . validateReservationUpdateRequest ( rSystem , request ) ; } catch ( org . apache . hadoop . yarn . exceptions . YarnException e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } \"<AssertPlaceHolder>\" ; } getMessage ( ) { return builder . getMessage ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( plan )"}
{"focal": "create ( java . util . List , com . google . code . ssm . providers . CacheConfiguration ) { net . rubyeye . xmemcached . XMemcachedClientBuilder builder = null ; if ( conf instanceof com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) { int [ ] weights = ( ( com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) ( conf ) ) . getWeights ( ) ; if ( ( weights != null ) && ( ( weights . length ) > 0 ) ) { builder = new net . rubyeye . xmemcached . XMemcachedClientBuilder ( addrs , weights ) ; } } if ( builder == null ) { builder = new net . rubyeye . xmemcached . XMemcachedClientBuilder ( addrs ) ; } if ( conf . isConsistentHashing ( ) ) { builder . setSessionLocator ( new net . rubyeye . xmemcached . impl . KetamaMemcachedSessionLocator ( ) ) ; } if ( conf . isUseBinaryProtocol ( ) ) { builder . setCommandFactory ( new net . rubyeye . xmemcached . command . BinaryCommandFactory ( ) ) ; } builder . setTranscoder ( new net . rubyeye . xmemcached . transcoders . SerializingTranscoder ( com . google . code . ssm . providers . CachedObject . MAX_SIZE ) ) ; if ( conf instanceof com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) { setProviderBuilderSpecificSettings ( builder , ( ( com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) ( conf ) ) ) ; } net . rubyeye . xmemcached . MemcachedClient client = builder . build ( ) ; if ( ( conf . getOperationTimeout ( ) ) != null ) { client . setOpTimeout ( conf . getOperationTimeout ( ) ) ; } if ( conf instanceof com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) { setProviderClientSpecificSettings ( client , ( ( com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) ( conf ) ) ) ; } return new com . google . code . ssm . providers . xmemcached . MemcacheClientWrapper ( client ) ; }", "testMethod": "createWithSpecificConf ( ) { com . google . code . ssm . providers . spymemcached . SpymemcachedConfiguration conf = new com . google . code . ssm . providers . spymemcached . SpymemcachedConfiguration ( ) ; conf . setConsistentHashing ( true ) ; conf . setOperationTimeout ( 1000 ) ; conf . setUseBinaryProtocol ( false ) ; conf . setFailureMode ( FailureMode . Cancel ) ; conf . setShouldOptimize ( true ) ; conf . setMaxReconnectDelay ( 1000L ) ; conf . setTimeoutExceptionThreshold ( 100 ) ; conf . setUseNagleAlgorithm ( false ) ; conf . setMetricCollector ( new net . spy . memcached . metrics . NoopMetricCollector ( ) ) ; conf . setMetricType ( MetricType . PERFORMANCE ) ; com . google . code . ssm . providers . CacheClient client = factory . create ( addrs , conf ) ; \"<AssertPlaceHolder>\" ; client . shutdown ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( client )", "total": "createWithSpecificConf ( ) { com . google . code . ssm . providers . spymemcached . SpymemcachedConfiguration conf = new com . google . code . ssm . providers . spymemcached . SpymemcachedConfiguration ( ) ; conf . setConsistentHashing ( true ) ; conf . setOperationTimeout ( 1000 ) ; conf . setUseBinaryProtocol ( false ) ; conf . setFailureMode ( FailureMode . Cancel ) ; conf . setShouldOptimize ( true ) ; conf . setMaxReconnectDelay ( 1000L ) ; conf . setTimeoutExceptionThreshold ( 100 ) ; conf . setUseNagleAlgorithm ( false ) ; conf . setMetricCollector ( new net . spy . memcached . metrics . NoopMetricCollector ( ) ) ; conf . setMetricType ( MetricType . PERFORMANCE ) ; com . google . code . ssm . providers . CacheClient client = factory . create ( addrs , conf ) ; \"<AssertPlaceHolder>\" ; client . shutdown ( ) ; } create ( java . util . List , com . google . code . ssm . providers . CacheConfiguration ) { net . rubyeye . xmemcached . XMemcachedClientBuilder builder = null ; if ( conf instanceof com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) { int [ ] weights = ( ( com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) ( conf ) ) . getWeights ( ) ; if ( ( weights != null ) && ( ( weights . length ) > 0 ) ) { builder = new net . rubyeye . xmemcached . XMemcachedClientBuilder ( addrs , weights ) ; } } if ( builder == null ) { builder = new net . rubyeye . xmemcached . XMemcachedClientBuilder ( addrs ) ; } if ( conf . isConsistentHashing ( ) ) { builder . setSessionLocator ( new net . rubyeye . xmemcached . impl . KetamaMemcachedSessionLocator ( ) ) ; } if ( conf . isUseBinaryProtocol ( ) ) { builder . setCommandFactory ( new net . rubyeye . xmemcached . command . BinaryCommandFactory ( ) ) ; } builder . setTranscoder ( new net . rubyeye . xmemcached . transcoders . SerializingTranscoder ( com . google . code . ssm . providers . CachedObject . MAX_SIZE ) ) ; if ( conf instanceof com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) { setProviderBuilderSpecificSettings ( builder , ( ( com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) ( conf ) ) ) ; } net . rubyeye . xmemcached . MemcachedClient client = builder . build ( ) ; if ( ( conf . getOperationTimeout ( ) ) != null ) { client . setOpTimeout ( conf . getOperationTimeout ( ) ) ; } if ( conf instanceof com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) { setProviderClientSpecificSettings ( client , ( ( com . google . code . ssm . providers . xmemcached . XMemcachedConfiguration ) ( conf ) ) ) ; } return new com . google . code . ssm . providers . xmemcached . MemcacheClientWrapper ( client ) ; }", "answer": "org . junit . Assert . assertNotNull ( client )"}
{"focal": "getComponent ( java . lang . Class ) { checkReadPermission ( ) ; return pico . getComponent ( componentType ) ; }", "testMethod": "testMoreThanOnePossibleResultAmbiguousComponentResolutionException ( ) { com . picocontainer . MutablePicoContainer pico = new com . picocontainer . containers . JSR330PicoContainer ( new com . picocontainer . PicoBuilder ( ) . build ( ) ) ; pico . addComponent ( com . picocontainer . parameters . JSR330ComponentParameterTestCase . AmbiguousTest . class , com . picocontainer . parameters . JSR330ComponentParameterTestCase . AmbiguousTest . class , new com . picocontainer . parameters . JSR330ComponentParameter ( ) ) . addProvider ( \"test\" , new com . picocontainer . parameters . JSR330ComponentParameterTestCase . Provider1 ( ) ) . addProvider ( \"test2\" , new com . picocontainer . parameters . JSR330ComponentParameterTestCase . Provider2 ( ) ) . addProvider ( \"test3\" , new com . picocontainer . parameters . JSR330ComponentParameterTestCase . Provider3 ( ) ) ; com . picocontainer . parameters . JSR330ComponentParameterTestCase . AmbiguousTest test = pico . getComponent ( com . picocontainer . parameters . JSR330ComponentParameterTestCase . AmbiguousTest . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( test )", "total": "testMoreThanOnePossibleResultAmbiguousComponentResolutionException ( ) { com . picocontainer . MutablePicoContainer pico = new com . picocontainer . containers . JSR330PicoContainer ( new com . picocontainer . PicoBuilder ( ) . build ( ) ) ; pico . addComponent ( com . picocontainer . parameters . JSR330ComponentParameterTestCase . AmbiguousTest . class , com . picocontainer . parameters . JSR330ComponentParameterTestCase . AmbiguousTest . class , new com . picocontainer . parameters . JSR330ComponentParameter ( ) ) . addProvider ( \"test\" , new com . picocontainer . parameters . JSR330ComponentParameterTestCase . Provider1 ( ) ) . addProvider ( \"test2\" , new com . picocontainer . parameters . JSR330ComponentParameterTestCase . Provider2 ( ) ) . addProvider ( \"test3\" , new com . picocontainer . parameters . JSR330ComponentParameterTestCase . Provider3 ( ) ) ; com . picocontainer . parameters . JSR330ComponentParameterTestCase . AmbiguousTest test = pico . getComponent ( com . picocontainer . parameters . JSR330ComponentParameterTestCase . AmbiguousTest . class ) ; \"<AssertPlaceHolder>\" ; } getComponent ( java . lang . Class ) { checkReadPermission ( ) ; return pico . getComponent ( componentType ) ; }", "answer": "org . junit . Assert . assertNotNull ( test )"}
{"focal": "getPlan ( ) { if ( ( definition ) == null ) { org . apache . jackrabbit . oak . plugins . index . search . spi . query . FulltextIndexPlanner . log . debug ( \"Index<sp>{}<sp>not<sp>loaded\" , indexPath ) ; return null ; } org . apache . jackrabbit . oak . plugins . index . search . spi . query . IndexPlan . Builder builder = getPlanBuilder ( ) ; if ( definition . isTestMode ( ) ) { if ( builder == null ) { if ( notSupportedFeature ( ) ) { return null ; } java . lang . String msg = java . lang . String . format ( ( \"No<sp>plan<sp>found<sp>for<sp>filter<sp>[%s]<sp>\" + \"while<sp>using<sp>definition<sp>[%s]<sp>and<sp>testMode<sp>is<sp>found<sp>to<sp>be<sp>enabled\" ) , filter , definition ) ; throw new java . lang . IllegalStateException ( msg ) ; } else { builder . setEstimatedEntryCount ( 1 ) . setCostPerExecution ( 0.001 ) . setCostPerEntry ( 0.001 ) ; } } return builder != null ? builder . build ( ) : null ; }", "testMethod": "fullTextQuery_IndexAllProps_NodePathQuery ( ) { org . apache . jackrabbit . oak . spi . state . NodeBuilder defn = newLucenePropertyIndexDefinition ( builder , \"test\" , of ( \"allProps\" ) , \"async\" ) ; defn = org . apache . jackrabbit . oak . plugins . index . lucene . LuceneIndexDefinition . updateDefinition ( defn . getNodeState ( ) . builder ( ) ) ; org . apache . jackrabbit . oak . spi . state . NodeBuilder foob = org . apache . jackrabbit . oak . plugins . index . lucene . IndexPlannerTest . getNode ( defn , \"indexRules/nt:base/properties/allProps\" ) ; foob . setProperty ( FulltextIndexConstants . PROP_NAME , FulltextIndexConstants . REGEX_ALL_PROPS ) ; foob . setProperty ( FulltextIndexConstants . PROP_ANALYZED , true ) ; foob . setProperty ( FulltextIndexConstants . PROP_NODE_SCOPE_INDEX , true ) ; foob . setProperty ( FulltextIndexConstants . PROP_IS_REGEX , true ) ; org . apache . jackrabbit . oak . plugins . index . search . spi . query . FulltextIndexPlanner planner = createPlannerForFulltext ( defn . getNodeState ( ) , org . apache . jackrabbit . oak . spi . query . fulltext . FullTextParser . parse ( \"jcr:content/*\" , \"mountain<sp>OR<sp>valley\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( planner . getPlan ( ) )", "total": "fullTextQuery_IndexAllProps_NodePathQuery ( ) { org . apache . jackrabbit . oak . spi . state . NodeBuilder defn = newLucenePropertyIndexDefinition ( builder , \"test\" , of ( \"allProps\" ) , \"async\" ) ; defn = org . apache . jackrabbit . oak . plugins . index . lucene . LuceneIndexDefinition . updateDefinition ( defn . getNodeState ( ) . builder ( ) ) ; org . apache . jackrabbit . oak . spi . state . NodeBuilder foob = org . apache . jackrabbit . oak . plugins . index . lucene . IndexPlannerTest . getNode ( defn , \"indexRules/nt:base/properties/allProps\" ) ; foob . setProperty ( FulltextIndexConstants . PROP_NAME , FulltextIndexConstants . REGEX_ALL_PROPS ) ; foob . setProperty ( FulltextIndexConstants . PROP_ANALYZED , true ) ; foob . setProperty ( FulltextIndexConstants . PROP_NODE_SCOPE_INDEX , true ) ; foob . setProperty ( FulltextIndexConstants . PROP_IS_REGEX , true ) ; org . apache . jackrabbit . oak . plugins . index . search . spi . query . FulltextIndexPlanner planner = createPlannerForFulltext ( defn . getNodeState ( ) , org . apache . jackrabbit . oak . spi . query . fulltext . FullTextParser . parse ( \"jcr:content/*\" , \"mountain<sp>OR<sp>valley\" ) ) ; \"<AssertPlaceHolder>\" ; } getPlan ( ) { if ( ( definition ) == null ) { org . apache . jackrabbit . oak . plugins . index . search . spi . query . FulltextIndexPlanner . log . debug ( \"Index<sp>{}<sp>not<sp>loaded\" , indexPath ) ; return null ; } org . apache . jackrabbit . oak . plugins . index . search . spi . query . IndexPlan . Builder builder = getPlanBuilder ( ) ; if ( definition . isTestMode ( ) ) { if ( builder == null ) { if ( notSupportedFeature ( ) ) { return null ; } java . lang . String msg = java . lang . String . format ( ( \"No<sp>plan<sp>found<sp>for<sp>filter<sp>[%s]<sp>\" + \"while<sp>using<sp>definition<sp>[%s]<sp>and<sp>testMode<sp>is<sp>found<sp>to<sp>be<sp>enabled\" ) , filter , definition ) ; throw new java . lang . IllegalStateException ( msg ) ; } else { builder . setEstimatedEntryCount ( 1 ) . setCostPerExecution ( 0.001 ) . setCostPerEntry ( 0.001 ) ; } } return builder != null ? builder . build ( ) : null ; }", "answer": "org . junit . Assert . assertNotNull ( planner . getPlan ( ) )"}
{"focal": "getId ( ) { return getLocationAttributeTypeId ( ) ; }", "testMethod": "saveVisit_shouldSaveAVisitThoughChangedByAndDateCreatedAreNotSetForVisitAttributeExplictly ( ) { executeDataSet ( org . openmrs . api . VisitServiceTest . VISITS_ATTRIBUTES_XML ) ; org . openmrs . Visit visit = new org . openmrs . Visit ( new org . openmrs . Patient ( 2 ) , new org . openmrs . VisitType ( 3 ) , new java . util . Date ( ) ) ; org . openmrs . VisitAttribute visitAttribute = createVisitAttributeWithoutCreatorAndDateCreated ( ) ; visit . setAttribute ( visitAttribute ) ; visit = visitService . saveVisit ( visit ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( visit . getId ( ) )", "total": "saveVisit_shouldSaveAVisitThoughChangedByAndDateCreatedAreNotSetForVisitAttributeExplictly ( ) { executeDataSet ( org . openmrs . api . VisitServiceTest . VISITS_ATTRIBUTES_XML ) ; org . openmrs . Visit visit = new org . openmrs . Visit ( new org . openmrs . Patient ( 2 ) , new org . openmrs . VisitType ( 3 ) , new java . util . Date ( ) ) ; org . openmrs . VisitAttribute visitAttribute = createVisitAttributeWithoutCreatorAndDateCreated ( ) ; visit . setAttribute ( visitAttribute ) ; visit = visitService . saveVisit ( visit ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return getLocationAttributeTypeId ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( visit . getId ( ) )"}
{"focal": "add ( java . lang . String , java . lang . String ) { headers = headers . add ( key , value ) ; }", "testMethod": "makeSureWeCanDeserializeOurSelfABitMoreComplex ( ) { org . codehaus . httpcache4j . cache . SerializableCacheItem clone = ( ( org . codehaus . httpcache4j . cache . SerializableCacheItem ) ( org . codehaus . httpcache4j . util . SerializationUtils . clone ( new org . codehaus . httpcache4j . cache . SerializableCacheItem ( new org . codehaus . httpcache4j . cache . DefaultCacheItem ( new org . codehaus . httpcache4j . HTTPResponse ( org . codehaus . httpcache4j . Status . NOT_MODIFIED , new org . codehaus . httpcache4j . Headers ( ) . add ( \"Foo\" , \"bar\" ) . add ( \"Bar\" , \"foo\" ) . add ( \"FOO\" , \"kgld\" ) ) ) ) ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( clone )", "total": "makeSureWeCanDeserializeOurSelfABitMoreComplex ( ) { org . codehaus . httpcache4j . cache . SerializableCacheItem clone = ( ( org . codehaus . httpcache4j . cache . SerializableCacheItem ) ( org . codehaus . httpcache4j . util . SerializationUtils . clone ( new org . codehaus . httpcache4j . cache . SerializableCacheItem ( new org . codehaus . httpcache4j . cache . DefaultCacheItem ( new org . codehaus . httpcache4j . HTTPResponse ( org . codehaus . httpcache4j . Status . NOT_MODIFIED , new org . codehaus . httpcache4j . Headers ( ) . add ( \"Foo\" , \"bar\" ) . add ( \"Bar\" , \"foo\" ) . add ( \"FOO\" , \"kgld\" ) ) ) ) ) ) ) ; \"<AssertPlaceHolder>\" ; } add ( java . lang . String , java . lang . String ) { headers = headers . add ( key , value ) ; }", "answer": "org . junit . Assert . assertNotNull ( clone )"}
{"focal": "addItem ( ) { java . lang . Object [ ] emptyKey = new java . lang . Object [ queryDelegate . getPrimaryKeyColumns ( ) . size ( ) ] ; com . vaadin . v7 . data . util . sqlcontainer . RowId itemId = new com . vaadin . v7 . data . util . sqlcontainer . TemporaryRowId ( emptyKey ) ; java . util . List < com . vaadin . v7 . data . util . sqlcontainer . ColumnProperty > itemProperties = new java . util . ArrayList < com . vaadin . v7 . data . util . sqlcontainer . ColumnProperty > ( ) ; for ( java . lang . String propertyId : propertyIds ) { try { if ( ( queryDelegate ) instanceof com . vaadin . v7 . data . util . sqlcontainer . query . TableQuery ) { itemId = ( ( com . vaadin . v7 . data . util . sqlcontainer . query . TableQuery ) ( queryDelegate ) ) . storeRowImmediately ( newRowItem ) ; } else { queryDelegate . beginTransaction ( ) ; queryDelegate . storeRow ( newRowItem ) ; queryDelegate . commit ( ) ; } refresh ( ) ; if ( notificationsEnabled ) { com . vaadin . v7 . data . util . sqlcontainer . CacheFlushNotifier . notifyOfCacheFlush ( this ) ; } com . vaadin . v7 . data . util . sqlcontainer . SQLContainer . getLogger ( ) . log ( Level . FINER , \"Row<sp>added<sp>to<sp>DB...\" ) ; return itemId ; } catch ( java . sql . SQLException e ) { com . vaadin . v7 . data . util . sqlcontainer . SQLContainer . getLogger ( ) . log ( Level . WARNING , \"Failed<sp>to<sp>add<sp>row<sp>to<sp>DB.<sp>Rolling<sp>back.\" , e ) ; try { queryDelegate . rollback ( ) ; } catch ( java . sql . SQLException ee ) { com . vaadin . v7 . data . util . sqlcontainer . SQLContainer . getLogger ( ) . log ( Level . SEVERE , \"Failed<sp>to<sp>roll<sp>back<sp>row<sp>addition\" , e ) ; } return null ; } } else { addedItems . add ( newRowItem ) ; fireContentsChange ( ) ; return itemId ; } }", "testMethod": "addItem_freeformAddOneNewItem_returnsItemId ( ) { com . vaadin . v7 . data . util . sqlcontainer . SQLContainer container = new com . vaadin . v7 . data . util . sqlcontainer . SQLContainer ( new com . vaadin . v7 . data . util . sqlcontainer . query . FreeformQuery ( \"SELECT<sp>*<sp>FROM<sp>people\" , connectionPool , \"ID\" ) ) ; java . lang . Object itemId = container . addItem ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( itemId )", "total": "addItem_freeformAddOneNewItem_returnsItemId ( ) { com . vaadin . v7 . data . util . sqlcontainer . SQLContainer container = new com . vaadin . v7 . data . util . sqlcontainer . SQLContainer ( new com . vaadin . v7 . data . util . sqlcontainer . query . FreeformQuery ( \"SELECT<sp>*<sp>FROM<sp>people\" , connectionPool , \"ID\" ) ) ; java . lang . Object itemId = container . addItem ( ) ; \"<AssertPlaceHolder>\" ; } addItem ( ) { java . lang . Object [ ] emptyKey = new java . lang . Object [ queryDelegate . getPrimaryKeyColumns ( ) . size ( ) ] ; com . vaadin . v7 . data . util . sqlcontainer . RowId itemId = new com . vaadin . v7 . data . util . sqlcontainer . TemporaryRowId ( emptyKey ) ; java . util . List < com . vaadin . v7 . data . util . sqlcontainer . ColumnProperty > itemProperties = new java . util . ArrayList < com . vaadin . v7 . data . util . sqlcontainer . ColumnProperty > ( ) ; for ( java . lang . String propertyId : propertyIds ) { try { if ( ( queryDelegate ) instanceof com . vaadin . v7 . data . util . sqlcontainer . query . TableQuery ) { itemId = ( ( com . vaadin . v7 . data . util . sqlcontainer . query . TableQuery ) ( queryDelegate ) ) . storeRowImmediately ( newRowItem ) ; } else { queryDelegate . beginTransaction ( ) ; queryDelegate . storeRow ( newRowItem ) ; queryDelegate . commit ( ) ; } refresh ( ) ; if ( notificationsEnabled ) { com . vaadin . v7 . data . util . sqlcontainer . CacheFlushNotifier . notifyOfCacheFlush ( this ) ; } com . vaadin . v7 . data . util . sqlcontainer . SQLContainer . getLogger ( ) . log ( Level . FINER , \"Row<sp>added<sp>to<sp>DB...\" ) ; return itemId ; } catch ( java . sql . SQLException e ) { com . vaadin . v7 . data . util . sqlcontainer . SQLContainer . getLogger ( ) . log ( Level . WARNING , \"Failed<sp>to<sp>add<sp>row<sp>to<sp>DB.<sp>Rolling<sp>back.\" , e ) ; try { queryDelegate . rollback ( ) ; } catch ( java . sql . SQLException ee ) { com . vaadin . v7 . data . util . sqlcontainer . SQLContainer . getLogger ( ) . log ( Level . SEVERE , \"Failed<sp>to<sp>roll<sp>back<sp>row<sp>addition\" , e ) ; } return null ; } } else { addedItems . add ( newRowItem ) ; fireContentsChange ( ) ; return itemId ; } }", "answer": "org . junit . Assert . assertNotNull ( itemId )"}
{"focal": "cloneSheet ( int ) { return cloneSheet ( sheetNum , null ) ; }", "testMethod": "test55982 ( ) { org . apache . poi . ss . usermodel . Workbook wb = org . apache . poi . hssf . HSSFTestDataSamples . openSampleWorkbook ( \"55982.xls\" ) ; org . apache . poi . ss . usermodel . Sheet newSheet = wb . cloneSheet ( 1 ) ; \"<AssertPlaceHolder>\" ; wb . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( newSheet )", "total": "test55982 ( ) { org . apache . poi . ss . usermodel . Workbook wb = org . apache . poi . hssf . HSSFTestDataSamples . openSampleWorkbook ( \"55982.xls\" ) ; org . apache . poi . ss . usermodel . Sheet newSheet = wb . cloneSheet ( 1 ) ; \"<AssertPlaceHolder>\" ; wb . close ( ) ; } cloneSheet ( int ) { return cloneSheet ( sheetNum , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( newSheet )"}
{"focal": "createBus ( java . lang . String ) { if ( config != null ) { bus = new org . apache . cxf . bus . spring . SpringBusFactory ( ) . createBus ( config ) ; } else { bus = org . apache . cxf . BusFactory . newInstance ( ) . createBus ( ) ; } org . apache . cxf . BusFactory . setDefaultBus ( bus ) ; }", "testMethod": "testHttpWrappedContinuations ( ) { org . apache . cxf . bus . spring . SpringBusFactory bf = new org . apache . cxf . bus . spring . SpringBusFactory ( ) ; org . apache . cxf . Bus bus = bf . createBus ( org . apache . cxf . systest . http_undertow . continuations . ClientServerWrappedContinuationTest . CLIENT_CONFIG_FILE ) ; org . apache . cxf . BusFactory . setDefaultBus ( bus ) ; javax . xml . namespace . QName serviceName = new javax . xml . namespace . QName ( \"http://cxf.apache.org/systest/jaxws\" , \"HelloContinuationService\" ) ; java . net . URL wsdlURL = new java . net . URL ( ( ( \"http://localhost:\" + ( org . apache . cxf . systest . http_undertow . continuations . ClientServerWrappedContinuationTest . PORT ) ) + \"/hellocontinuation?wsdl\" ) ) ; org . apache . cxf . systest . http_undertow . continuations . HelloContinuationService service = new org . apache . cxf . systest . http_undertow . continuations . HelloContinuationService ( wsdlURL , serviceName ) ; \"<AssertPlaceHolder>\" ; final org . apache . cxf . systest . http_undertow . continuations . HelloContinuation helloPort = service . getHelloContinuationPort ( ) ; org . apache . cxf . frontend . ClientProxy . getClient ( helloPort ) . getInInterceptors ( ) . add ( new org . apache . cxf . ext . logging . LoggingInInterceptor ( ) ) ; org . apache . cxf . frontend . ClientProxy . getClient ( helloPort ) . getOutInterceptors ( ) . add ( new org . apache . cxf . ext . logging . LoggingOutInterceptor ( ) ) ; doTest ( helloPort ) ; bus . shutdown ( true ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( service )", "total": "testHttpWrappedContinuations ( ) { org . apache . cxf . bus . spring . SpringBusFactory bf = new org . apache . cxf . bus . spring . SpringBusFactory ( ) ; org . apache . cxf . Bus bus = bf . createBus ( org . apache . cxf . systest . http_undertow . continuations . ClientServerWrappedContinuationTest . CLIENT_CONFIG_FILE ) ; org . apache . cxf . BusFactory . setDefaultBus ( bus ) ; javax . xml . namespace . QName serviceName = new javax . xml . namespace . QName ( \"http://cxf.apache.org/systest/jaxws\" , \"HelloContinuationService\" ) ; java . net . URL wsdlURL = new java . net . URL ( ( ( \"http://localhost:\" + ( org . apache . cxf . systest . http_undertow . continuations . ClientServerWrappedContinuationTest . PORT ) ) + \"/hellocontinuation?wsdl\" ) ) ; org . apache . cxf . systest . http_undertow . continuations . HelloContinuationService service = new org . apache . cxf . systest . http_undertow . continuations . HelloContinuationService ( wsdlURL , serviceName ) ; \"<AssertPlaceHolder>\" ; final org . apache . cxf . systest . http_undertow . continuations . HelloContinuation helloPort = service . getHelloContinuationPort ( ) ; org . apache . cxf . frontend . ClientProxy . getClient ( helloPort ) . getInInterceptors ( ) . add ( new org . apache . cxf . ext . logging . LoggingInInterceptor ( ) ) ; org . apache . cxf . frontend . ClientProxy . getClient ( helloPort ) . getOutInterceptors ( ) . add ( new org . apache . cxf . ext . logging . LoggingOutInterceptor ( ) ) ; doTest ( helloPort ) ; bus . shutdown ( true ) ; } createBus ( java . lang . String ) { if ( config != null ) { bus = new org . apache . cxf . bus . spring . SpringBusFactory ( ) . createBus ( config ) ; } else { bus = org . apache . cxf . BusFactory . newInstance ( ) . createBus ( ) ; } org . apache . cxf . BusFactory . setDefaultBus ( bus ) ; }", "answer": "org . junit . Assert . assertNotNull ( service )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testVerDescuento ( ) { log . debug ( \"Debiera<sp>mostrar<sp>Descuentos\" ) ; mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; mx . edu . um . mateo . inscripciones . model . Descuento descuento = new mx . edu . um . mateo . inscripciones . model . Descuento ( ) ; mx . edu . um . mateo . general . model . Organizacion organizacion = usuario . getEmpresa ( ) . getOrganizacion ( ) ; descuento . setDescripcion ( \"test\" ) ; descuento . setContabiliza ( \"S\" ) ; descuento . setStatus ( \"A\" ) ; descuento . setOrganizacion ( organizacion ) ; instance . graba ( descuento , organizacion ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . PATH_DESCUENTO_VER ) + \"/\" ) + ( descuento . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_DESCUENTO_VER ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_DESCUENTO ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( descuento . getId ( ) )", "total": "testVerDescuento ( ) { log . debug ( \"Debiera<sp>mostrar<sp>Descuentos\" ) ; mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; mx . edu . um . mateo . inscripciones . model . Descuento descuento = new mx . edu . um . mateo . inscripciones . model . Descuento ( ) ; mx . edu . um . mateo . general . model . Organizacion organizacion = usuario . getEmpresa ( ) . getOrganizacion ( ) ; descuento . setDescripcion ( \"test\" ) ; descuento . setContabiliza ( \"S\" ) ; descuento . setStatus ( \"A\" ) ; descuento . setOrganizacion ( organizacion ) ; instance . graba ( descuento , organizacion ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( ( ( ( mx . edu . um . mateo . general . utils . Constantes . PATH_DESCUENTO_VER ) + \"/\" ) + ( descuento . getId ( ) ) ) ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_DESCUENTO_VER ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_DESCUENTO ) ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( descuento . getId ( ) )"}
{"focal": "toString ( ) { return ( ( ( \"BuilderNode:<sp>\" + ( this . getClass ( ) . getName ( ) ) ) + \"<sp>(\\\"\" ) + ( getNodeName ( ) ) ) + \"\\\")\" ; }", "testMethod": "testCharacteristicsAreImmutable ( ) { \"<AssertPlaceHolder>\" ; Characteristics . CDI . remove ( \"injection\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( Characteristics . CDI . toString ( ) )", "total": "testCharacteristicsAreImmutable ( ) { \"<AssertPlaceHolder>\" ; Characteristics . CDI . remove ( \"injection\" ) ; } toString ( ) { return ( ( ( \"BuilderNode:<sp>\" + ( this . getClass ( ) . getName ( ) ) ) + \"<sp>(\\\"\" ) + ( getNodeName ( ) ) ) + \"\\\")\" ; }", "answer": "org . junit . Assert . assertNotNull ( Characteristics . CDI . toString ( ) )"}
{"focal": "browse ( java . lang . String , org . fourthline . cling . support . model . BrowseFlag , long , long , org . fourthline . cling . model . profile . RemoteClientInfo ) { net . holmes . core . business . media . model . MediaNode browseNode = mediaManager . getNode ( objectID ) . orElseThrow ( ( ) -> new < net . holmes . core . service . upnp . directory . NO_SUCH_OBJECT > org . fourthline . cling . support . contentdirectory . ContentDirectoryException ( objectID ) ) ; net . holmes . core . service . upnp . directory . List < java . lang . String > availableMimeTypes = getAvailableMimeType ( remoteClientInfo ) ; net . holmes . core . service . upnp . directory . DirectoryBrowseResult result ; if ( ( DIRECT_CHILDREN ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( firstResult , maxResults ) ; net . holmes . core . service . upnp . directory . Collection < net . holmes . core . business . media . model . MediaNode > searchResult = mediaManager . searchChildNodes ( new net . holmes . core . business . media . MediaSearchRequest ( browseNode , availableMimeTypes ) ) ; for ( net . holmes . core . business . media . model . MediaNode childNode : searchResult ) { addNode ( objectID , childNode , result , availableMimeTypes ) ; } } else if ( ( METADATA ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; addNode ( browseNode . getParentId ( ) , browseNode , result , availableMimeTypes ) ; } else { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; } return result . buildBrowseResult ( new org . fourthline . cling . support . contentdirectory . DIDLParser ( ) ) ; }", "testMethod": "testBrowseDirectChildren ( ) { net . holmes . core . business . configuration . ConfigurationManager configurationManager = createMock ( net . holmes . core . business . configuration . ConfigurationManager . class ) ; net . holmes . core . business . media . MediaManager mediaManager = createMock ( net . holmes . core . business . media . MediaManager . class ) ; net . holmes . core . business . streaming . StreamingManager streamingManager = createMock ( net . holmes . core . business . streaming . StreamingManager . class ) ; org . fourthline . cling . model . profile . RemoteClientInfo remoteClientInfo = createMock ( org . fourthline . cling . model . profile . RemoteClientInfo . class ) ; net . holmes . core . service . upnp . directory . ContentDirectoryService contentDirectoryService = new net . holmes . core . service . upnp . directory . ContentDirectoryService ( ) ; contentDirectoryService . setConfigurationManager ( configurationManager ) ; contentDirectoryService . setMediaManager ( mediaManager ) ; contentDirectoryService . setStreamingManager ( streamingManager ) ; expect ( remoteClientInfo . getConnection ( ) ) . andReturn ( null ) ; expect ( mediaManager . getNode ( eq ( \"0\" ) ) ) . andReturn ( java . util . Optional . of ( new net . holmes . core . business . media . model . FolderNode ( \"0\" , \"-1\" , \"root\" ) ) ) ; expect ( mediaManager . getNodeUrl ( isA ( net . holmes . core . business . media . model . AbstractNode . class ) ) ) . andReturn ( \"url\" ) ; java . util . List < net . holmes . core . business . media . model . MediaNode > children = new java . util . ArrayList ( ) ; java . io . File file = java . io . File . createTempFile ( testName . getMethodName ( ) , \"avi\" ) ; file . deleteOnExit ( ) ; children . add ( new net . holmes . core . business . media . model . ContentNode ( \"id5\" , \"parentId\" , \"name\" , file , net . holmes . core . business . mimetype . model . MimeType . valueOf ( \"video/avi\" ) ) ) ; net . holmes . core . business . media . model . MediaNode dummyNode = createMock ( net . holmes . core . business . media . model . AbstractNode . class ) ; children . add ( dummyNode ) ; expect ( mediaManager . searchChildNodes ( isA ( net . holmes . core . business . media . MediaSearchRequest . class ) ) ) . andReturn ( children ) . atLeastOnce ( ) ; replay ( mediaManager , streamingManager , remoteClientInfo , dummyNode , configurationManager ) ; org . fourthline . cling . support . model . BrowseResult result = contentDirectoryService . browse ( \"0\" , BrowseFlag . DIRECT_CHILDREN , 0 , 6 , remoteClientInfo ) ; \"<AssertPlaceHolder>\" ; verify ( mediaManager , streamingManager , remoteClientInfo , dummyNode , configurationManager ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testBrowseDirectChildren ( ) { net . holmes . core . business . configuration . ConfigurationManager configurationManager = createMock ( net . holmes . core . business . configuration . ConfigurationManager . class ) ; net . holmes . core . business . media . MediaManager mediaManager = createMock ( net . holmes . core . business . media . MediaManager . class ) ; net . holmes . core . business . streaming . StreamingManager streamingManager = createMock ( net . holmes . core . business . streaming . StreamingManager . class ) ; org . fourthline . cling . model . profile . RemoteClientInfo remoteClientInfo = createMock ( org . fourthline . cling . model . profile . RemoteClientInfo . class ) ; net . holmes . core . service . upnp . directory . ContentDirectoryService contentDirectoryService = new net . holmes . core . service . upnp . directory . ContentDirectoryService ( ) ; contentDirectoryService . setConfigurationManager ( configurationManager ) ; contentDirectoryService . setMediaManager ( mediaManager ) ; contentDirectoryService . setStreamingManager ( streamingManager ) ; expect ( remoteClientInfo . getConnection ( ) ) . andReturn ( null ) ; expect ( mediaManager . getNode ( eq ( \"0\" ) ) ) . andReturn ( java . util . Optional . of ( new net . holmes . core . business . media . model . FolderNode ( \"0\" , \"-1\" , \"root\" ) ) ) ; expect ( mediaManager . getNodeUrl ( isA ( net . holmes . core . business . media . model . AbstractNode . class ) ) ) . andReturn ( \"url\" ) ; java . util . List < net . holmes . core . business . media . model . MediaNode > children = new java . util . ArrayList ( ) ; java . io . File file = java . io . File . createTempFile ( testName . getMethodName ( ) , \"avi\" ) ; file . deleteOnExit ( ) ; children . add ( new net . holmes . core . business . media . model . ContentNode ( \"id5\" , \"parentId\" , \"name\" , file , net . holmes . core . business . mimetype . model . MimeType . valueOf ( \"video/avi\" ) ) ) ; net . holmes . core . business . media . model . MediaNode dummyNode = createMock ( net . holmes . core . business . media . model . AbstractNode . class ) ; children . add ( dummyNode ) ; expect ( mediaManager . searchChildNodes ( isA ( net . holmes . core . business . media . MediaSearchRequest . class ) ) ) . andReturn ( children ) . atLeastOnce ( ) ; replay ( mediaManager , streamingManager , remoteClientInfo , dummyNode , configurationManager ) ; org . fourthline . cling . support . model . BrowseResult result = contentDirectoryService . browse ( \"0\" , BrowseFlag . DIRECT_CHILDREN , 0 , 6 , remoteClientInfo ) ; \"<AssertPlaceHolder>\" ; verify ( mediaManager , streamingManager , remoteClientInfo , dummyNode , configurationManager ) ; } browse ( java . lang . String , org . fourthline . cling . support . model . BrowseFlag , long , long , org . fourthline . cling . model . profile . RemoteClientInfo ) { net . holmes . core . business . media . model . MediaNode browseNode = mediaManager . getNode ( objectID ) . orElseThrow ( ( ) -> new < net . holmes . core . service . upnp . directory . NO_SUCH_OBJECT > org . fourthline . cling . support . contentdirectory . ContentDirectoryException ( objectID ) ) ; net . holmes . core . service . upnp . directory . List < java . lang . String > availableMimeTypes = getAvailableMimeType ( remoteClientInfo ) ; net . holmes . core . service . upnp . directory . DirectoryBrowseResult result ; if ( ( DIRECT_CHILDREN ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( firstResult , maxResults ) ; net . holmes . core . service . upnp . directory . Collection < net . holmes . core . business . media . model . MediaNode > searchResult = mediaManager . searchChildNodes ( new net . holmes . core . business . media . MediaSearchRequest ( browseNode , availableMimeTypes ) ) ; for ( net . holmes . core . business . media . model . MediaNode childNode : searchResult ) { addNode ( objectID , childNode , result , availableMimeTypes ) ; } } else if ( ( METADATA ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; addNode ( browseNode . getParentId ( ) , browseNode , result , availableMimeTypes ) ; } else { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; } return result . buildBrowseResult ( new org . fourthline . cling . support . contentdirectory . DIDLParser ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "tenantRoutingContentStore ( org . alfresco . repo . content . ContentStore ) { if ( contentStore instanceof org . alfresco . repo . tenant . TenantRoutingContentStore ) { return ( ( org . alfresco . repo . tenant . TenantRoutingContentStore ) ( contentStore ) ) ; } else if ( contentStore instanceof org . alfresco . repo . content . ContentStoreCaps ) { org . alfresco . repo . content . ContentStoreCaps capabilities = ( ( org . alfresco . repo . content . ContentStoreCaps ) ( contentStore ) ) ; return ( ( org . alfresco . repo . tenant . TenantRoutingContentStore ) ( capabilities . getTenantRoutingContentStore ( ) ) ) ; } return null ; }", "testMethod": "testTenantRoutingContentStore ( ) { org . alfresco . repo . content . ContentStore contentStore = new org . alfresco . repo . tenant . MultiTAdminServiceImplTest . ConcreteTenantRoutingContentStore ( ) ; org . alfresco . repo . tenant . TenantRoutingContentStore router = tenantAdmin . tenantRoutingContentStore ( contentStore ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( router )", "total": "testTenantRoutingContentStore ( ) { org . alfresco . repo . content . ContentStore contentStore = new org . alfresco . repo . tenant . MultiTAdminServiceImplTest . ConcreteTenantRoutingContentStore ( ) ; org . alfresco . repo . tenant . TenantRoutingContentStore router = tenantAdmin . tenantRoutingContentStore ( contentStore ) ; \"<AssertPlaceHolder>\" ; } tenantRoutingContentStore ( org . alfresco . repo . content . ContentStore ) { if ( contentStore instanceof org . alfresco . repo . tenant . TenantRoutingContentStore ) { return ( ( org . alfresco . repo . tenant . TenantRoutingContentStore ) ( contentStore ) ) ; } else if ( contentStore instanceof org . alfresco . repo . content . ContentStoreCaps ) { org . alfresco . repo . content . ContentStoreCaps capabilities = ( ( org . alfresco . repo . content . ContentStoreCaps ) ( contentStore ) ) ; return ( ( org . alfresco . repo . tenant . TenantRoutingContentStore ) ( capabilities . getTenantRoutingContentStore ( ) ) ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( router )"}
{"focal": "init ( com . gazbert . bxbot . exchange . api . ExchangeConfig ) { }", "testMethod": "testExchangeAdapterInitialisesSuccessfully ( ) { org . powermock . api . easymock . PowerMock . replayAll ( ) ; final com . gazbert . bxbot . exchanges . GdaxExchangeAdapter exchangeAdapter = new com . gazbert . bxbot . exchanges . GdaxExchangeAdapter ( ) ; exchangeAdapter . init ( exchangeConfig ) ; \"<AssertPlaceHolder>\" ; org . powermock . api . easymock . PowerMock . verifyAll ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( exchangeAdapter )", "total": "testExchangeAdapterInitialisesSuccessfully ( ) { org . powermock . api . easymock . PowerMock . replayAll ( ) ; final com . gazbert . bxbot . exchanges . GdaxExchangeAdapter exchangeAdapter = new com . gazbert . bxbot . exchanges . GdaxExchangeAdapter ( ) ; exchangeAdapter . init ( exchangeConfig ) ; \"<AssertPlaceHolder>\" ; org . powermock . api . easymock . PowerMock . verifyAll ( ) ; } init ( com . gazbert . bxbot . exchange . api . ExchangeConfig ) { }", "answer": "org . junit . Assert . assertNotNull ( exchangeAdapter )"}
{"focal": "get ( byte [ ] ) { fBuffer . position ( ( ( int ) ( ( fPosition ) / ( org . eclipse . tracecompass . ctf . core . event . io . BitBuffer . BIT_CHAR ) ) ) ) ; fBuffer . get ( dst ) ; fPosition += ( dst . length ) * ( org . eclipse . tracecompass . ctf . core . event . io . BitBuffer . BIT_CHAR ) ; }", "testMethod": "testgetElem_noDefs ( ) { int i = 0 ; org . eclipse . tracecompass . ctf . core . event . types . IDefinition result = charArrayFixture . getDefinitions ( ) . get ( i ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testgetElem_noDefs ( ) { int i = 0 ; org . eclipse . tracecompass . ctf . core . event . types . IDefinition result = charArrayFixture . getDefinitions ( ) . get ( i ) ; \"<AssertPlaceHolder>\" ; } get ( byte [ ] ) { fBuffer . position ( ( ( int ) ( ( fPosition ) / ( org . eclipse . tracecompass . ctf . core . event . io . BitBuffer . BIT_CHAR ) ) ) ) ; fBuffer . get ( dst ) ; fPosition += ( dst . length ) * ( org . eclipse . tracecompass . ctf . core . event . io . BitBuffer . BIT_CHAR ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "createBooleanPath ( com . querydsl . core . types . PathMetadata ) { return com . querydsl . core . types . dsl . Expressions . booleanPath ( metadata ) ; }", "testMethod": "createBooleanPath ( ) { com . querydsl . core . types . Path < java . lang . Boolean > path = pathFactory . createBooleanPath ( metadata ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( path )", "total": "createBooleanPath ( ) { com . querydsl . core . types . Path < java . lang . Boolean > path = pathFactory . createBooleanPath ( metadata ) ; \"<AssertPlaceHolder>\" ; } createBooleanPath ( com . querydsl . core . types . PathMetadata ) { return com . querydsl . core . types . dsl . Expressions . booleanPath ( metadata ) ; }", "answer": "org . junit . Assert . assertNotNull ( path )"}
{"focal": "computeFDRqval ( int , no . uib . cipr . matrix . DenseVector ) { no . uib . cipr . matrix . DenseVector ranks = pvals . copy ( ) ; org . genemania . engine . core . MatrixUtils . rank ( ranks ) ; no . uib . cipr . matrix . DenseVector ordered = new no . uib . cipr . matrix . DenseVector ( pvals . size ( ) ) ; for ( int i = 0 ; i < ( ranks . size ( ) ) ; i ++ ) { int p = ( ( int ) ( java . lang . Math . round ( ranks . get ( i ) ) ) ) - 1 ; ordered . set ( p , pvals . get ( i ) ) ; } no . uib . cipr . matrix . DenseVector qval = new no . uib . cipr . matrix . DenseVector ( pvals . size ( ) ) ; double minSoFar = Double . MAX_VALUE ; for ( int i = ( ranks . size ( ) ) - 1 ; i >= 0 ; i -- ) { double p = ordered . get ( i ) ; int m = i + 1 ; minSoFar = java . lang . Math . min ( minSoFar , ( ( N * p ) / m ) ) ; qval . set ( i , minSoFar ) ; } no . uib . cipr . matrix . DenseVector unOrderedqval = new no . uib . cipr . matrix . DenseVector ( pvals . size ( ) ) ; for ( int i = 0 ; i < ( unOrderedqval . size ( ) ) ; i ++ ) { int p = ( ( int ) ( java . lang . Math . round ( ranks . get ( i ) ) ) ) - 1 ; unOrderedqval . set ( i , qval . get ( p ) ) ; } return unOrderedqval ; }", "testMethod": "testComputeFDRqval ( ) { double [ ] data = new double [ ] { 0.5 , 0.3 , 0.8 , 0.02 , 0.1 } ; no . uib . cipr . matrix . DenseVector pval = new no . uib . cipr . matrix . DenseVector ( data ) ; no . uib . cipr . matrix . DenseVector qval = org . genemania . engine . actions . ComputeEnrichment . computeFDRqval ( 10 , pval ) ; \"<AssertPlaceHolder>\" ; System . out . println ( qval ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( qval )", "total": "testComputeFDRqval ( ) { double [ ] data = new double [ ] { 0.5 , 0.3 , 0.8 , 0.02 , 0.1 } ; no . uib . cipr . matrix . DenseVector pval = new no . uib . cipr . matrix . DenseVector ( data ) ; no . uib . cipr . matrix . DenseVector qval = org . genemania . engine . actions . ComputeEnrichment . computeFDRqval ( 10 , pval ) ; \"<AssertPlaceHolder>\" ; System . out . println ( qval ) ; } computeFDRqval ( int , no . uib . cipr . matrix . DenseVector ) { no . uib . cipr . matrix . DenseVector ranks = pvals . copy ( ) ; org . genemania . engine . core . MatrixUtils . rank ( ranks ) ; no . uib . cipr . matrix . DenseVector ordered = new no . uib . cipr . matrix . DenseVector ( pvals . size ( ) ) ; for ( int i = 0 ; i < ( ranks . size ( ) ) ; i ++ ) { int p = ( ( int ) ( java . lang . Math . round ( ranks . get ( i ) ) ) ) - 1 ; ordered . set ( p , pvals . get ( i ) ) ; } no . uib . cipr . matrix . DenseVector qval = new no . uib . cipr . matrix . DenseVector ( pvals . size ( ) ) ; double minSoFar = Double . MAX_VALUE ; for ( int i = ( ranks . size ( ) ) - 1 ; i >= 0 ; i -- ) { double p = ordered . get ( i ) ; int m = i + 1 ; minSoFar = java . lang . Math . min ( minSoFar , ( ( N * p ) / m ) ) ; qval . set ( i , minSoFar ) ; } no . uib . cipr . matrix . DenseVector unOrderedqval = new no . uib . cipr . matrix . DenseVector ( pvals . size ( ) ) ; for ( int i = 0 ; i < ( unOrderedqval . size ( ) ) ; i ++ ) { int p = ( ( int ) ( java . lang . Math . round ( ranks . get ( i ) ) ) ) - 1 ; unOrderedqval . set ( i , qval . get ( p ) ) ; } return unOrderedqval ; }", "answer": "org . junit . Assert . assertNotNull ( qval )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateHistoryOfPresentIllnessBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . cdt . HistoryOfPresentIllness > sectionBuilder = org . openhealthtools . mdht . uml . cda . cdt . builder . CDTBuilderFactory . createHistoryOfPresentIllnessBuilder ( ) ; org . openhealthtools . mdht . uml . cda . cdt . HistoryOfPresentIllness section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateHistoryOfPresentIllnessBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . cdt . HistoryOfPresentIllness > sectionBuilder = org . openhealthtools . mdht . uml . cda . cdt . builder . CDTBuilderFactory . createHistoryOfPresentIllnessBuilder ( ) ; org . openhealthtools . mdht . uml . cda . cdt . HistoryOfPresentIllness section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "equals ( java . lang . Object ) { if ( paramObject instanceof java . lang . reflect . ParameterizedType ) { java . lang . reflect . ParameterizedType localParameterizedType = ( ( java . lang . reflect . ParameterizedType ) ( paramObject ) ) ; if ( ( this ) == localParameterizedType ) { return true ; } java . lang . reflect . Type localType1 = localParameterizedType . getOwnerType ( ) ; java . lang . reflect . Type localType2 = localParameterizedType . getRawType ( ) ; return ( ( ( this . ownerType ) == null ? localType1 == null : this . ownerType . equals ( localType1 ) ) && ( ( this . rawType ) == null ? localType2 == null : this . rawType . equals ( localType2 ) ) ) && ( java . util . Arrays . equals ( this . actualTypeArguments , localParameterizedType . getActualTypeArguments ( ) ) ) ; } return false ; }", "testMethod": "testDeepClone ( ) { java . lang . reflect . Method [ ] methods = com . test . fastjson . DeepCloneMethodArgsTest . class . getDeclaredMethods ( ) ; java . lang . String testName = \"getUserList\" ; java . lang . reflect . Method method = null ; for ( java . lang . reflect . Method m : methods ) { if ( m . getName ( ) . equals ( testName ) ) { method = m ; break ; } } \"<AssertPlaceHolder>\" ; java . lang . Object [ ] args = com . test . fastjson . DeepCloneMethodArgsTest . getArgs ( ) ; testSerializer ( new com . jarvis . cache . serializer . JdkSerializer ( ) , method , args ) ; testSerializer ( new com . jarvis . cache . serializer . HessianSerializer ( ) , method , args ) ; testSerializer ( new com . jarvis . cache . serializer . FastjsonSerializer ( ) , method , args ) ; testSerializer ( new com . jarvis . cache . serializer . JacksonJsonSerializer ( ) , method , args ) ; testSerializer ( new com . jarvis . cache . serializer . JacksonMsgpackSerializer ( ) , method , args ) ; testSerializer ( new com . jarvis . cache . clone . Cloning ( ) , method , args ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( method )", "total": "testDeepClone ( ) { java . lang . reflect . Method [ ] methods = com . test . fastjson . DeepCloneMethodArgsTest . class . getDeclaredMethods ( ) ; java . lang . String testName = \"getUserList\" ; java . lang . reflect . Method method = null ; for ( java . lang . reflect . Method m : methods ) { if ( m . getName ( ) . equals ( testName ) ) { method = m ; break ; } } \"<AssertPlaceHolder>\" ; java . lang . Object [ ] args = com . test . fastjson . DeepCloneMethodArgsTest . getArgs ( ) ; testSerializer ( new com . jarvis . cache . serializer . JdkSerializer ( ) , method , args ) ; testSerializer ( new com . jarvis . cache . serializer . HessianSerializer ( ) , method , args ) ; testSerializer ( new com . jarvis . cache . serializer . FastjsonSerializer ( ) , method , args ) ; testSerializer ( new com . jarvis . cache . serializer . JacksonJsonSerializer ( ) , method , args ) ; testSerializer ( new com . jarvis . cache . serializer . JacksonMsgpackSerializer ( ) , method , args ) ; testSerializer ( new com . jarvis . cache . clone . Cloning ( ) , method , args ) ; } equals ( java . lang . Object ) { if ( paramObject instanceof java . lang . reflect . ParameterizedType ) { java . lang . reflect . ParameterizedType localParameterizedType = ( ( java . lang . reflect . ParameterizedType ) ( paramObject ) ) ; if ( ( this ) == localParameterizedType ) { return true ; } java . lang . reflect . Type localType1 = localParameterizedType . getOwnerType ( ) ; java . lang . reflect . Type localType2 = localParameterizedType . getRawType ( ) ; return ( ( ( this . ownerType ) == null ? localType1 == null : this . ownerType . equals ( localType1 ) ) && ( ( this . rawType ) == null ? localType2 == null : this . rawType . equals ( localType2 ) ) ) && ( java . util . Arrays . equals ( this . actualTypeArguments , localParameterizedType . getActualTypeArguments ( ) ) ) ; } return false ; }", "answer": "org . junit . Assert . assertNotNull ( method )"}
{"focal": "getApplicationResources ( ) { java . util . ResourceBundle testResourceBundle = new java . util . ListResourceBundle ( ) { @ com . fiveamsolutions . plc . util . Override protected java . lang . Object [ ] [ ] getContents ( ) { java . util . List < java . lang . Object [ ] > contentList = new java . util . ArrayList < java . lang . Object [ ] > ( ) ; contentList . add ( new java . lang . Object [ ] { \"foo\" , \"bar\" } ) ; contentList . add ( new java . lang . Object [ ] { \"hashing.algorithm\" , \"file.cleanup.interval\" 3 } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 6 , \"yyyyMMdd\" } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 5 , \"UTF-8\" } ) ; contentList . add ( new java . lang . Object [ ] { \"plc.persistenceUnit.name\" , \"file.cleanup.interval\" 1 } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 0 , \"file.cleanup.interval\" 4 } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 2 , \"file.cleanup.interval\" 9 } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" , \"5\" } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 7 , \"20a\" } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 8 , \"\" } ) ; java . lang . Object [ ] [ ] content = new java . lang . Object [ contentList . size ( ) ] [ ] ; contentList . toArray ( content ) ; return content ; } } ; return new com . fiveamsolutions . plc . util . PLCApplicationResources ( testResourceBundle ) ; }", "testMethod": "testModule ( ) { com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( new com . google . inject . AbstractModule ( ) { @ com . fiveamsolutions . plc . service . scheduled . Override protected void configure ( ) { bind ( java . util . ResourceBundle . class ) . toProvider ( com . fiveamsolutions . plc . util . PLCResourceBundleProvider . class ) ; } } , new com . fiveamsolutions . plc . service . scheduled . ScheduledJobModule ( com . fiveamsolutions . plc . util . TestApplicationResourcesFactory . getApplicationResources ( ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( injector )", "total": "testModule ( ) { com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( new com . google . inject . AbstractModule ( ) { @ com . fiveamsolutions . plc . service . scheduled . Override protected void configure ( ) { bind ( java . util . ResourceBundle . class ) . toProvider ( com . fiveamsolutions . plc . util . PLCResourceBundleProvider . class ) ; } } , new com . fiveamsolutions . plc . service . scheduled . ScheduledJobModule ( com . fiveamsolutions . plc . util . TestApplicationResourcesFactory . getApplicationResources ( ) ) ) ; \"<AssertPlaceHolder>\" ; } getApplicationResources ( ) { java . util . ResourceBundle testResourceBundle = new java . util . ListResourceBundle ( ) { @ com . fiveamsolutions . plc . util . Override protected java . lang . Object [ ] [ ] getContents ( ) { java . util . List < java . lang . Object [ ] > contentList = new java . util . ArrayList < java . lang . Object [ ] > ( ) ; contentList . add ( new java . lang . Object [ ] { \"foo\" , \"bar\" } ) ; contentList . add ( new java . lang . Object [ ] { \"hashing.algorithm\" , \"file.cleanup.interval\" 3 } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 6 , \"yyyyMMdd\" } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 5 , \"UTF-8\" } ) ; contentList . add ( new java . lang . Object [ ] { \"plc.persistenceUnit.name\" , \"file.cleanup.interval\" 1 } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 0 , \"file.cleanup.interval\" 4 } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 2 , \"file.cleanup.interval\" 9 } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" , \"5\" } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 7 , \"20a\" } ) ; contentList . add ( new java . lang . Object [ ] { \"file.cleanup.interval\" 8 , \"\" } ) ; java . lang . Object [ ] [ ] content = new java . lang . Object [ contentList . size ( ) ] [ ] ; contentList . toArray ( content ) ; return content ; } } ; return new com . fiveamsolutions . plc . util . PLCApplicationResources ( testResourceBundle ) ; }", "answer": "org . junit . Assert . assertNotNull ( injector )"}
{"focal": "getResourceAsStream ( java . lang . String ) { if ( ( profile ) == null ) throw new java . lang . RuntimeException ( \"null<sp>profile\" ) ; java . io . InputStream is = super . getResourceAsStream ( name ) ; if ( is == null ) is = delegate . getResourceAsStream ( ( ( ( profile ) + \"/\" ) + name ) ) ; return is ; }", "testMethod": "testWriteSPSSODescriptor ( ) { java . lang . String fileName = \"saml2/metadata/sp-entitydescriptor.xml\" ; java . io . InputStream is = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResourceAsStream ( fileName ) ; \"<AssertPlaceHolder>\" ; org . picketlink . identity . federation . core . parsers . saml . SAMLParser parser = new org . picketlink . identity . federation . core . parsers . saml . SAMLParser ( ) ; org . picketlink . identity . federation . saml . v2 . metadata . EntityDescriptorType entityDesc = ( ( org . picketlink . identity . federation . saml . v2 . metadata . EntityDescriptorType ) ( parser . parse ( is ) ) ) ; java . io . ByteArrayOutputStream baos = new java . io . ByteArrayOutputStream ( ) ; javax . xml . stream . XMLStreamWriter writer = org . picketlink . common . util . StaxUtil . getXMLStreamWriter ( baos ) ; org . picketlink . identity . federation . core . saml . v2 . writers . SAMLMetadataWriter mdWriter = new org . picketlink . identity . federation . core . saml . v2 . writers . SAMLMetadataWriter ( writer ) ; mdWriter . writeEntityDescriptor ( entityDesc ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( is )", "total": "testWriteSPSSODescriptor ( ) { java . lang . String fileName = \"saml2/metadata/sp-entitydescriptor.xml\" ; java . io . InputStream is = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResourceAsStream ( fileName ) ; \"<AssertPlaceHolder>\" ; org . picketlink . identity . federation . core . parsers . saml . SAMLParser parser = new org . picketlink . identity . federation . core . parsers . saml . SAMLParser ( ) ; org . picketlink . identity . federation . saml . v2 . metadata . EntityDescriptorType entityDesc = ( ( org . picketlink . identity . federation . saml . v2 . metadata . EntityDescriptorType ) ( parser . parse ( is ) ) ) ; java . io . ByteArrayOutputStream baos = new java . io . ByteArrayOutputStream ( ) ; javax . xml . stream . XMLStreamWriter writer = org . picketlink . common . util . StaxUtil . getXMLStreamWriter ( baos ) ; org . picketlink . identity . federation . core . saml . v2 . writers . SAMLMetadataWriter mdWriter = new org . picketlink . identity . federation . core . saml . v2 . writers . SAMLMetadataWriter ( writer ) ; mdWriter . writeEntityDescriptor ( entityDesc ) ; } getResourceAsStream ( java . lang . String ) { if ( ( profile ) == null ) throw new java . lang . RuntimeException ( \"null<sp>profile\" ) ; java . io . InputStream is = super . getResourceAsStream ( name ) ; if ( is == null ) is = delegate . getResourceAsStream ( ( ( ( profile ) + \"/\" ) + name ) ) ; return is ; }", "answer": "org . junit . Assert . assertNotNull ( is )"}
{"focal": "createSettingsPanel ( ) { return new kg . apc . jmeter . vizualizers . JSettingsPanel ( this , ( ( ( ( ( ( ( JSettingsPanel . TIMELINE_OPTION ) | ( JSettingsPanel . GRADIENT_OPTION ) ) | ( JSettingsPanel . FINAL_ZEROING_OPTION ) ) | ( JSettingsPanel . LIMIT_POINT_OPTION ) ) | ( JSettingsPanel . MAXY_OPTION ) ) | ( JSettingsPanel . RELATIVE_TIME_OPTION ) ) | ( JSettingsPanel . MARKERS_OPTION ) ) ) ; }", "testMethod": "testCreateSettingsPanel ( ) { System . out . println ( \"createSettingsPanel\" ) ; kg . apc . jmeter . vizualizers . ResponseTimesOverTimeGui instance = new kg . apc . jmeter . vizualizers . ResponseTimesOverTimeGui ( ) ; kg . apc . jmeter . vizualizers . JSettingsPanel result = instance . createSettingsPanel ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testCreateSettingsPanel ( ) { System . out . println ( \"createSettingsPanel\" ) ; kg . apc . jmeter . vizualizers . ResponseTimesOverTimeGui instance = new kg . apc . jmeter . vizualizers . ResponseTimesOverTimeGui ( ) ; kg . apc . jmeter . vizualizers . JSettingsPanel result = instance . createSettingsPanel ( ) ; \"<AssertPlaceHolder>\" ; } createSettingsPanel ( ) { return new kg . apc . jmeter . vizualizers . JSettingsPanel ( this , ( ( ( ( ( ( ( JSettingsPanel . TIMELINE_OPTION ) | ( JSettingsPanel . GRADIENT_OPTION ) ) | ( JSettingsPanel . FINAL_ZEROING_OPTION ) ) | ( JSettingsPanel . LIMIT_POINT_OPTION ) ) | ( JSettingsPanel . MAXY_OPTION ) ) | ( JSettingsPanel . RELATIVE_TIME_OPTION ) ) | ( JSettingsPanel . MARKERS_OPTION ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getLastResponse ( ) { return this . response ; }", "testMethod": "responseShouldBeParsedWithSpecialChars ( ) { responseProvider . expect ( com . github . kristofa . test . http . Method . GET , \"/\" ) . respondWith ( 200 , \"application/json\" , \"{\\\"name\\\":\\\"å<sp>&acirc;\\\"}\" ) ; com . android . volley . Request < com . navercorp . volleyextensions . request . Jackson2RequestIntegrationTest . Person > request = new com . navercorp . volleyextensions . request . Jackson2Request < com . navercorp . volleyextensions . request . Jackson2RequestIntegrationTest . Person > ( com . navercorp . volleyextensions . request . Jackson2RequestIntegrationTest . url , com . navercorp . volleyextensions . request . Jackson2RequestIntegrationTest . Person . class , listener , errorListener ) ; requestQueue . add ( request ) ; with ( ) . await ( \"testWhenSpecialCharactersExist\" ) . until ( wasListenerCalled ( listener ) ) ; com . navercorp . volleyextensions . request . Jackson2RequestIntegrationTest . Person person = listener . getLastResponse ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( person . name )", "total": "responseShouldBeParsedWithSpecialChars ( ) { responseProvider . expect ( com . github . kristofa . test . http . Method . GET , \"/\" ) . respondWith ( 200 , \"application/json\" , \"{\\\"name\\\":\\\"å<sp>&acirc;\\\"}\" ) ; com . android . volley . Request < com . navercorp . volleyextensions . request . Jackson2RequestIntegrationTest . Person > request = new com . navercorp . volleyextensions . request . Jackson2Request < com . navercorp . volleyextensions . request . Jackson2RequestIntegrationTest . Person > ( com . navercorp . volleyextensions . request . Jackson2RequestIntegrationTest . url , com . navercorp . volleyextensions . request . Jackson2RequestIntegrationTest . Person . class , listener , errorListener ) ; requestQueue . add ( request ) ; with ( ) . await ( \"testWhenSpecialCharactersExist\" ) . until ( wasListenerCalled ( listener ) ) ; com . navercorp . volleyextensions . request . Jackson2RequestIntegrationTest . Person person = listener . getLastResponse ( ) ; \"<AssertPlaceHolder>\" ; } getLastResponse ( ) { return this . response ; }", "answer": "org . junit . Assert . assertNotNull ( person . name )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . eyeform . model . EyeformProcedureBook entity = new org . oscarehr . eyeform . model . EyeformProcedureBook ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . eyeform . model . EyeformProcedureBook entity = new org . oscarehr . eyeform . model . EyeformProcedureBook ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "regex ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . query . RegexQueryImpl ( field , regex ) ; }", "testMethod": "testRegexQuery ( ) { com . liferay . portal . search . query . RegexQuery regexQuery = com . liferay . portal . search . query . test . QueriesInstantiationTest . _queries . regex ( \"field\" , \"regex\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( regexQuery )", "total": "testRegexQuery ( ) { com . liferay . portal . search . query . RegexQuery regexQuery = com . liferay . portal . search . query . test . QueriesInstantiationTest . _queries . regex ( \"field\" , \"regex\" ) ; \"<AssertPlaceHolder>\" ; } regex ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . query . RegexQueryImpl ( field , regex ) ; }", "answer": "org . junit . Assert . assertNotNull ( regexQuery )"}
{"focal": "toString ( ) { return ( ( ( \"BuilderNode:<sp>\" + ( this . getClass ( ) . getName ( ) ) ) + \"<sp>(\\\"\" ) + ( getNodeName ( ) ) ) + \"\\\")\" ; }", "testMethod": "testHashmapPutIsNotAllowed ( ) { \"<AssertPlaceHolder>\" ; Characteristics . CDI . put ( \"injection\" , \"true\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( Characteristics . CDI . toString ( ) )", "total": "testHashmapPutIsNotAllowed ( ) { \"<AssertPlaceHolder>\" ; Characteristics . CDI . put ( \"injection\" , \"true\" ) ; } toString ( ) { return ( ( ( \"BuilderNode:<sp>\" + ( this . getClass ( ) . getName ( ) ) ) + \"<sp>(\\\"\" ) + ( getNodeName ( ) ) ) + \"\\\")\" ; }", "answer": "org . junit . Assert . assertNotNull ( Characteristics . CDI . toString ( ) )"}
{"focal": "deleteAllSubscription ( ) { final org . jinstagram . auth . model . OAuthRequest request = prepareOAuthRequest ( Verbs . DELETE ) ; request . addQuerystringParameter ( Constants . SUBSCRIPTION_TYPE , \"all\" ) ; try { final org . jinstagram . http . Response response = request . send ( ) ; return getSubscriptionResponse ( response . getBody ( ) ) ; } catch ( java . io . IOException e ) { throw new org . jinstagram . exceptions . InstagramException ( \"Failed<sp>to<sp>delete<sp>all<sp>subscriptions\" , e ) ; } }", "testMethod": "testDeleteAllSubscription ( ) { org . jinstagram . realtime . InstagramSubscription fixture = new org . jinstagram . realtime . InstagramSubscription ( ) ; org . jinstagram . realtime . SubscriptionResponse result = fixture . deleteAllSubscription ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testDeleteAllSubscription ( ) { org . jinstagram . realtime . InstagramSubscription fixture = new org . jinstagram . realtime . InstagramSubscription ( ) ; org . jinstagram . realtime . SubscriptionResponse result = fixture . deleteAllSubscription ( ) ; \"<AssertPlaceHolder>\" ; } deleteAllSubscription ( ) { final org . jinstagram . auth . model . OAuthRequest request = prepareOAuthRequest ( Verbs . DELETE ) ; request . addQuerystringParameter ( Constants . SUBSCRIPTION_TYPE , \"all\" ) ; try { final org . jinstagram . http . Response response = request . send ( ) ; return getSubscriptionResponse ( response . getBody ( ) ) ; } catch ( java . io . IOException e ) { throw new org . jinstagram . exceptions . InstagramException ( \"Failed<sp>to<sp>delete<sp>all<sp>subscriptions\" , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "addMpNewsImage ( java . io . InputStream , java . lang . String ) { java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.mpnews.image.upload\" ) ; java . lang . String response = wxClient . post ( url , inputStream , fileName ) ; com . riversoft . weixin . mp . media . Map < java . lang . String , java . lang . Object > result = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . json2Map ( response ) ; if ( result . containsKey ( \"url\" ) ) { return result . get ( \"url\" ) . toString ( ) ; } else { com . riversoft . weixin . mp . media . Materials . logger . warn ( \"mpnews<sp>image<sp>upload<sp>failed:<sp>{}\" , response ) ; throw new com . riversoft . weixin . common . exception . WxRuntimeException ( 999 , response ) ; } }", "testMethod": "testAddMpNewsImage ( ) { java . io . InputStream inputStream = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( \"media/image.png\" ) ; java . lang . String url = com . riversoft . weixin . qy . media . Materials . defaultMaterials ( ) . addMpNewsImage ( inputStream , \"testMpNewsImage.png\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( url )", "total": "testAddMpNewsImage ( ) { java . io . InputStream inputStream = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( \"media/image.png\" ) ; java . lang . String url = com . riversoft . weixin . qy . media . Materials . defaultMaterials ( ) . addMpNewsImage ( inputStream , \"testMpNewsImage.png\" ) ; \"<AssertPlaceHolder>\" ; } addMpNewsImage ( java . io . InputStream , java . lang . String ) { java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.mpnews.image.upload\" ) ; java . lang . String response = wxClient . post ( url , inputStream , fileName ) ; com . riversoft . weixin . mp . media . Map < java . lang . String , java . lang . Object > result = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . json2Map ( response ) ; if ( result . containsKey ( \"url\" ) ) { return result . get ( \"url\" ) . toString ( ) ; } else { com . riversoft . weixin . mp . media . Materials . logger . warn ( \"mpnews<sp>image<sp>upload<sp>failed:<sp>{}\" , response ) ; throw new com . riversoft . weixin . common . exception . WxRuntimeException ( 999 , response ) ; } }", "answer": "org . junit . Assert . assertNotNull ( url )"}
{"focal": "withArgs ( java . lang . Object [ ] ) { if ( ( ( target ) == null ) && ( ! ( java . lang . reflect . Modifier . isStatic ( method . getModifiers ( ) ) ) ) ) { throw new java . lang . IllegalStateException ( ( ( ( \"attempt<sp>to<sp>call<sp>instance<sp>method<sp>\" + ( method . getName ( ) ) ) + \"<sp>on<sp>class<sp>\" ) + ( clazz . getName ( ) ) ) ) ; } net . vidageek . mirror . provider . MethodReflectionProvider methodReflectionProvider = provider . getMethodReflectionProvider ( target , clazz , method ) ; methodReflectionProvider . setAccessible ( ) ; return methodReflectionProvider . invoke ( args ) ; }", "testMethod": "testThatCanReflectInterfaceMethodsOnInterfaces ( ) { java . lang . reflect . Method method = new net . vidageek . mirror . reflect . DefaultMethodReflector ( provider , \"interfaceMethod\" , net . vidageek . mirror . fixtures . InterfaceFixture . class ) . withArgs ( java . lang . String . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( method )", "total": "testThatCanReflectInterfaceMethodsOnInterfaces ( ) { java . lang . reflect . Method method = new net . vidageek . mirror . reflect . DefaultMethodReflector ( provider , \"interfaceMethod\" , net . vidageek . mirror . fixtures . InterfaceFixture . class ) . withArgs ( java . lang . String . class ) ; \"<AssertPlaceHolder>\" ; } withArgs ( java . lang . Object [ ] ) { if ( ( ( target ) == null ) && ( ! ( java . lang . reflect . Modifier . isStatic ( method . getModifiers ( ) ) ) ) ) { throw new java . lang . IllegalStateException ( ( ( ( \"attempt<sp>to<sp>call<sp>instance<sp>method<sp>\" + ( method . getName ( ) ) ) + \"<sp>on<sp>class<sp>\" ) + ( clazz . getName ( ) ) ) ) ; } net . vidageek . mirror . provider . MethodReflectionProvider methodReflectionProvider = provider . getMethodReflectionProvider ( target , clazz , method ) ; methodReflectionProvider . setAccessible ( ) ; return methodReflectionProvider . invoke ( args ) ; }", "answer": "org . junit . Assert . assertNotNull ( method )"}
{"focal": "toBytes ( double ) { return hBaseBytesUtilShim . toBytes ( var1 ) ; }", "testMethod": "decodeBigNumberIntoObject ( ) { stubValueMeta . setType ( 6 ) ; java . lang . Object str = stubValueMeta . decodeColumnValue ( org . apache . hadoop . hbase . util . Bytes . toBytes ( \"9.9999999\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( str )", "total": "decodeBigNumberIntoObject ( ) { stubValueMeta . setType ( 6 ) ; java . lang . Object str = stubValueMeta . decodeColumnValue ( org . apache . hadoop . hbase . util . Bytes . toBytes ( \"9.9999999\" ) ) ; \"<AssertPlaceHolder>\" ; } toBytes ( double ) { return hBaseBytesUtilShim . toBytes ( var1 ) ; }", "answer": "org . junit . Assert . assertNotNull ( str )"}
{"focal": "getAge ( ) { return age ; }", "testMethod": "insert_via_server ( ) { org . apache . log4j . BasicConfigurator . configure ( ) ; com . ebean . model . Human being = null ; being = new com . ebean . model . Human ( ) ; being . setAge ( 12 ) ; being . setFirstName ( \"I\" ) ; being . setLastName ( \"be<sp>human\" ) ; being . setUserId ( 1L ) ; being . setGender ( \"m\" ) ; io . ebean . EbeanServer server = io . ebean . Ebean . getDefaultServer ( ) ; server . beginTransaction ( ) ; server . save ( being ) ; server . commitTransaction ( ) ; \"<AssertPlaceHolder>\" ; io . ebean . Query < com . ebean . model . Human > find = server . find ( com . ebean . model . Human . class ) ; com . ebean . model . Human findOne = find . findOne ( ) ; System . out . println ( findOne . getAge ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( being . getAge ( ) )", "total": "insert_via_server ( ) { org . apache . log4j . BasicConfigurator . configure ( ) ; com . ebean . model . Human being = null ; being = new com . ebean . model . Human ( ) ; being . setAge ( 12 ) ; being . setFirstName ( \"I\" ) ; being . setLastName ( \"be<sp>human\" ) ; being . setUserId ( 1L ) ; being . setGender ( \"m\" ) ; io . ebean . EbeanServer server = io . ebean . Ebean . getDefaultServer ( ) ; server . beginTransaction ( ) ; server . save ( being ) ; server . commitTransaction ( ) ; \"<AssertPlaceHolder>\" ; io . ebean . Query < com . ebean . model . Human > find = server . find ( com . ebean . model . Human . class ) ; com . ebean . model . Human findOne = find . findOne ( ) ; System . out . println ( findOne . getAge ( ) ) ; } getAge ( ) { return age ; }", "answer": "org . junit . Assert . assertNotNull ( being . getAge ( ) )"}
{"focal": "query ( org . apache . eagle . storage . operation . CompiledQuery , org . apache . eagle . log . entity . meta . EntityDefinition ) { org . apache . eagle . storage . result . QueryResult < E > result = new org . apache . eagle . storage . result . QueryResult < E > ( ) ; try { org . apache . eagle . storage . jdbc . schema . JdbcEntityDefinition jdbcEntityDefinition = org . apache . eagle . storage . jdbc . schema . JdbcEntityDefinitionManager . getJdbcEntityDefinition ( entityDefinition ) ; org . apache . eagle . storage . jdbc . entity . JdbcEntityReader reader = new org . apache . eagle . storage . jdbc . entity . impl . JdbcEntityReaderImpl ( jdbcEntityDefinition ) ; java . util . List < E > entities = reader . query ( query ) ; result . setData ( entities ) ; if ( entities != null ) { result . setSize ( entities . size ( ) ) ; } else { result . setSize ( 0 ) ; } if ( query . isHasAgg ( ) ) { result . setEntityType ( ( ( java . lang . Class < E > ) ( java . util . Map . class ) ) ) ; } else { result . setEntityType ( ( ( java . lang . Class < E > ) ( entityDefinition . getEntityClass ( ) ) ) ) ; } result . setFirstTimestamp ( reader . getResultFirstTimestamp ( ) ) ; result . setLastTimestamp ( reader . getResultLastTimestamp ( ) ) ; result . setSuccess ( true ) ; } catch ( java . lang . Exception e ) { org . apache . eagle . storage . jdbc . JdbcStorage . LOG . error ( e . getMessage ( ) , e ) ; result . setSuccess ( false ) ; throw new java . io . IOException ( e . getCause ( ) ) ; } return result ; }", "testMethod": "testReadBySimpleQuery ( ) { org . apache . eagle . storage . operation . RawQuery rawQuery = new org . apache . eagle . storage . operation . RawQuery ( ) ; rawQuery . setQuery ( \"TestTimeSeriesAPIEntity[@cluster=\\\"c4ut\\\"]{*}\" ) ; System . out . println ( org . apache . eagle . common . DateTimeUtil . millisecondsToHumanDateWithSeconds ( baseTimestamp ) ) ; rawQuery . setStartTime ( org . apache . eagle . common . DateTimeUtil . millisecondsToHumanDateWithSeconds ( baseTimestamp ) ) ; rawQuery . setEndTime ( org . apache . eagle . common . DateTimeUtil . millisecondsToHumanDateWithMilliseconds ( ( ( baseTimestamp ) + 2000 ) ) ) ; rawQuery . setPageSize ( 1000 ) ; org . apache . eagle . storage . operation . CompiledQuery query = new org . apache . eagle . storage . operation . CompiledQuery ( rawQuery ) ; org . apache . eagle . storage . result . QueryResult < org . apache . eagle . log . entity . test . TestTimeSeriesAPIEntity > result = storage . query ( query , entityDefinition ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testReadBySimpleQuery ( ) { org . apache . eagle . storage . operation . RawQuery rawQuery = new org . apache . eagle . storage . operation . RawQuery ( ) ; rawQuery . setQuery ( \"TestTimeSeriesAPIEntity[@cluster=\\\"c4ut\\\"]{*}\" ) ; System . out . println ( org . apache . eagle . common . DateTimeUtil . millisecondsToHumanDateWithSeconds ( baseTimestamp ) ) ; rawQuery . setStartTime ( org . apache . eagle . common . DateTimeUtil . millisecondsToHumanDateWithSeconds ( baseTimestamp ) ) ; rawQuery . setEndTime ( org . apache . eagle . common . DateTimeUtil . millisecondsToHumanDateWithMilliseconds ( ( ( baseTimestamp ) + 2000 ) ) ) ; rawQuery . setPageSize ( 1000 ) ; org . apache . eagle . storage . operation . CompiledQuery query = new org . apache . eagle . storage . operation . CompiledQuery ( rawQuery ) ; org . apache . eagle . storage . result . QueryResult < org . apache . eagle . log . entity . test . TestTimeSeriesAPIEntity > result = storage . query ( query , entityDefinition ) ; \"<AssertPlaceHolder>\" ; } query ( org . apache . eagle . storage . operation . CompiledQuery , org . apache . eagle . log . entity . meta . EntityDefinition ) { org . apache . eagle . storage . result . QueryResult < E > result = new org . apache . eagle . storage . result . QueryResult < E > ( ) ; try { org . apache . eagle . storage . jdbc . schema . JdbcEntityDefinition jdbcEntityDefinition = org . apache . eagle . storage . jdbc . schema . JdbcEntityDefinitionManager . getJdbcEntityDefinition ( entityDefinition ) ; org . apache . eagle . storage . jdbc . entity . JdbcEntityReader reader = new org . apache . eagle . storage . jdbc . entity . impl . JdbcEntityReaderImpl ( jdbcEntityDefinition ) ; java . util . List < E > entities = reader . query ( query ) ; result . setData ( entities ) ; if ( entities != null ) { result . setSize ( entities . size ( ) ) ; } else { result . setSize ( 0 ) ; } if ( query . isHasAgg ( ) ) { result . setEntityType ( ( ( java . lang . Class < E > ) ( java . util . Map . class ) ) ) ; } else { result . setEntityType ( ( ( java . lang . Class < E > ) ( entityDefinition . getEntityClass ( ) ) ) ) ; } result . setFirstTimestamp ( reader . getResultFirstTimestamp ( ) ) ; result . setLastTimestamp ( reader . getResultLastTimestamp ( ) ) ; result . setSuccess ( true ) ; } catch ( java . lang . Exception e ) { org . apache . eagle . storage . jdbc . JdbcStorage . LOG . error ( e . getMessage ( ) , e ) ; result . setSuccess ( false ) ; throw new java . io . IOException ( e . getCause ( ) ) ; } return result ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getInetAddressFromProperty ( java . lang . String ) { org . rioproject . net . InetAddress inetAddress ; java . lang . String value = java . lang . System . getProperty ( property ) ; if ( value != null ) { inetAddress = org . rioproject . net . InetAddress . getByName ( value ) ; } else { inetAddress = org . rioproject . net . HostUtil . getInetAddress ( ) ; } return inetAddress ; }", "testMethod": "testGetInetAddressFromProperty ( ) { java . net . InetAddress inetAddress = org . rioproject . net . HostUtil . getInetAddressFromProperty ( \"foo\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( inetAddress )", "total": "testGetInetAddressFromProperty ( ) { java . net . InetAddress inetAddress = org . rioproject . net . HostUtil . getInetAddressFromProperty ( \"foo\" ) ; \"<AssertPlaceHolder>\" ; } getInetAddressFromProperty ( java . lang . String ) { org . rioproject . net . InetAddress inetAddress ; java . lang . String value = java . lang . System . getProperty ( property ) ; if ( value != null ) { inetAddress = org . rioproject . net . InetAddress . getByName ( value ) ; } else { inetAddress = org . rioproject . net . HostUtil . getInetAddress ( ) ; } return inetAddress ; }", "answer": "org . junit . Assert . assertNotNull ( inetAddress )"}
{"focal": "getSupportedNumericFunctions ( ) { return java . util . Arrays . asList ( NumericFunctionHandler . NUMERIC_FUNCTIONS ) ; }", "testMethod": "testGetSupportedNumericFunctions ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( parser . getSupportedNumericFunctions ( ) )", "total": "testGetSupportedNumericFunctions ( ) { \"<AssertPlaceHolder>\" ; } getSupportedNumericFunctions ( ) { return java . util . Arrays . asList ( NumericFunctionHandler . NUMERIC_FUNCTIONS ) ; }", "answer": "org . junit . Assert . assertNotNull ( parser . getSupportedNumericFunctions ( ) )"}
{"focal": "readByte ( ) { if ( ( ( size ) - ( index ) ) < 1 ) { fill ( ) ; } if ( ( ( index ) + 1 ) > ( size ) ) { throw new java . lang . ArrayIndexOutOfBoundsException ( ) ; } return ( buffer [ ( ( index ) ++ ) ] ) & ( com . flagstone . transform . coder . SWFDecoder . BYTE_MASK ) ; }", "testMethod": "decode ( ) { final java . io . ByteArrayInputStream stream = new java . io . ByteArrayInputStream ( encoded ) ; final com . flagstone . transform . coder . SWFDecoder decoder = new com . flagstone . transform . coder . SWFDecoder ( stream ) ; final com . flagstone . transform . coder . Context context = new com . flagstone . transform . coder . Context ( ) ; decoder . readByte ( ) ; fixture = new com . flagstone . transform . fillstyle . FocalGradientFill ( decoder , context ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( fixture )", "total": "decode ( ) { final java . io . ByteArrayInputStream stream = new java . io . ByteArrayInputStream ( encoded ) ; final com . flagstone . transform . coder . SWFDecoder decoder = new com . flagstone . transform . coder . SWFDecoder ( stream ) ; final com . flagstone . transform . coder . Context context = new com . flagstone . transform . coder . Context ( ) ; decoder . readByte ( ) ; fixture = new com . flagstone . transform . fillstyle . FocalGradientFill ( decoder , context ) ; \"<AssertPlaceHolder>\" ; } readByte ( ) { if ( ( ( size ) - ( index ) ) < 1 ) { fill ( ) ; } if ( ( ( index ) + 1 ) > ( size ) ) { throw new java . lang . ArrayIndexOutOfBoundsException ( ) ; } return ( buffer [ ( ( index ) ++ ) ] ) & ( com . flagstone . transform . coder . SWFDecoder . BYTE_MASK ) ; }", "answer": "org . junit . Assert . assertNotNull ( fixture )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateActiveProblemsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ihe . ActiveProblemsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ihe . builder . IHEBuilderFactory . createActiveProblemsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ihe . ActiveProblemsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateActiveProblemsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ihe . ActiveProblemsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ihe . builder . IHEBuilderFactory . createActiveProblemsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ihe . ActiveProblemsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "build ( ) { return new org . apache . http . client . entity . ByteBufHttpEntity ( byteByf , contentLength , getContentType ( ) ) ; }", "testMethod": "minimalBuilderTest ( ) { org . appenders . log4j2 . elasticsearch . bulkprocessor . JKSCertInfo . Builder builder = org . appenders . log4j2 . elasticsearch . bulkprocessor . JKSCertInfoTest . createTestCertInfoBuilder ( ) ; org . appenders . log4j2 . elasticsearch . CertInfo certInfo = builder . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( certInfo )", "total": "minimalBuilderTest ( ) { org . appenders . log4j2 . elasticsearch . bulkprocessor . JKSCertInfo . Builder builder = org . appenders . log4j2 . elasticsearch . bulkprocessor . JKSCertInfoTest . createTestCertInfoBuilder ( ) ; org . appenders . log4j2 . elasticsearch . CertInfo certInfo = builder . build ( ) ; \"<AssertPlaceHolder>\" ; } build ( ) { return new org . apache . http . client . entity . ByteBufHttpEntity ( byteByf , contentLength , getContentType ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( certInfo )"}
{"focal": "readFile ( java . lang . String ) { java . io . InputStream in = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResourceAsStream ( filename ) ; if ( in == null ) { throw new java . io . IOException ( ( ( \"Requested<sp>file<sp>'\" + filename ) + \"'<sp>was<sp>not<sp>found.\" ) ) ; } byte [ ] tmp = new byte [ 8192 ] ; int count = in . read ( tmp ) ; java . lang . StringBuffer b = new java . lang . StringBuffer ( ) ; while ( count >= 0 ) { b . append ( new java . lang . String ( tmp , 0 , count ) ) ; count = in . read ( tmp ) ; } return b . toString ( ) ; }", "testMethod": "validateWrongTypeAttributeForInlineContent ( ) { java . lang . String content = readFile ( \"expanded_team.xml\" ) . replace ( \"type=\\\"application/atom+xml;type=feed\\\"\" , \"type=\\\"application/atom+xml;type=entry\\\"\" ) ; \"<AssertPlaceHolder>\" ; org . apache . olingo . odata2 . api . edm . EdmEntitySet entitySet = org . apache . olingo . odata2 . testutil . mock . MockFacade . getMockEdm ( ) . getDefaultEntityContainer ( ) . getEntitySet ( \"Teams\" ) ; java . io . InputStream reqContent = createContentAsStream ( content ) ; readAndExpectException ( entitySet , reqContent , EntityProviderException . INVALID_INLINE_CONTENT . addContent ( \"feed\" ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( content )", "total": "validateWrongTypeAttributeForInlineContent ( ) { java . lang . String content = readFile ( \"expanded_team.xml\" ) . replace ( \"type=\\\"application/atom+xml;type=feed\\\"\" , \"type=\\\"application/atom+xml;type=entry\\\"\" ) ; \"<AssertPlaceHolder>\" ; org . apache . olingo . odata2 . api . edm . EdmEntitySet entitySet = org . apache . olingo . odata2 . testutil . mock . MockFacade . getMockEdm ( ) . getDefaultEntityContainer ( ) . getEntitySet ( \"Teams\" ) ; java . io . InputStream reqContent = createContentAsStream ( content ) ; readAndExpectException ( entitySet , reqContent , EntityProviderException . INVALID_INLINE_CONTENT . addContent ( \"feed\" ) ) ; } readFile ( java . lang . String ) { java . io . InputStream in = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResourceAsStream ( filename ) ; if ( in == null ) { throw new java . io . IOException ( ( ( \"Requested<sp>file<sp>'\" + filename ) + \"'<sp>was<sp>not<sp>found.\" ) ) ; } byte [ ] tmp = new byte [ 8192 ] ; int count = in . read ( tmp ) ; java . lang . StringBuffer b = new java . lang . StringBuffer ( ) ; while ( count >= 0 ) { b . append ( new java . lang . String ( tmp , 0 , count ) ) ; count = in . read ( tmp ) ; } return b . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( content )"}
{"focal": "wrap ( T extends io . sniffy . sql . CommonDataSource ) { return ( ( R ) ( new io . sniffy . sql . SniffyDataSource ( target ) ) ) ; }", "testMethod": "testWrap ( ) { org . h2 . jdbcx . JdbcDataSource h2DataSource = new org . h2 . jdbcx . JdbcDataSource ( ) ; h2DataSource . setURL ( \"jdbc:h2:mem:\" ) ; javax . sql . XADataSource wrap = io . sniffy . sql . SniffyDataSource . wrap ( h2DataSource ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( wrap )", "total": "testWrap ( ) { org . h2 . jdbcx . JdbcDataSource h2DataSource = new org . h2 . jdbcx . JdbcDataSource ( ) ; h2DataSource . setURL ( \"jdbc:h2:mem:\" ) ; javax . sql . XADataSource wrap = io . sniffy . sql . SniffyDataSource . wrap ( h2DataSource ) ; \"<AssertPlaceHolder>\" ; } wrap ( T extends io . sniffy . sql . CommonDataSource ) { return ( ( R ) ( new io . sniffy . sql . SniffyDataSource ( target ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( wrap )"}
{"focal": "instance ( ) { return com . metamx . metrics . JvmPidDiscoverer . INSTANCE ; }", "testMethod": "getPid ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . metamx . metrics . JvmPidDiscoverer . instance ( ) . getPid ( ) )", "total": "getPid ( ) { \"<AssertPlaceHolder>\" ; } instance ( ) { return com . metamx . metrics . JvmPidDiscoverer . INSTANCE ; }", "answer": "org . junit . Assert . assertNotNull ( com . metamx . metrics . JvmPidDiscoverer . instance ( ) . getPid ( ) )"}
{"focal": "getUUID ( ) { java . util . UUID uuid = fUUID ; return uuid == null ? super . getUUID ( ) : uuid ; }", "testMethod": "testGetUUID ( ) { java . util . UUID result = fixture . getUUID ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetUUID ( ) { java . util . UUID result = fixture . getUUID ( ) ; \"<AssertPlaceHolder>\" ; } getUUID ( ) { java . util . UUID uuid = fUUID ; return uuid == null ? super . getUUID ( ) : uuid ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getImage ( java . lang . String , java . lang . ClassLoader ) { org . eclipse . swt . internal . graphics . Graphics . checkThread ( ) ; if ( path == null ) { org . eclipse . swt . SWT . error ( SWT . ERROR_NULL_ARGUMENT ) ; } if ( \"\" . equals ( path ) ) { org . eclipse . swt . SWT . error ( SWT . ERROR_INVALID_ARGUMENT ) ; } return getApplicationContext ( ) . getImageFactory ( ) . findImage ( path , imageLoader ) ; }", "testMethod": "testGetImageWithClassLoader ( ) { java . lang . String resourceName = \"test.gif\" ; java . io . File testGif = new java . io . File ( org . eclipse . rap . rwt . testfixture . internal . Fixture . WEB_CONTEXT_DIR , resourceName ) ; org . eclipse . rap . rwt . testfixture . internal . Fixture . copyTestResource ( Fixture . IMAGE3 , testGif ) ; java . lang . ClassLoader classLoader = org . eclipse . swt . internal . graphics . Graphics_Test . classLoaderFromFile ( Fixture . WEB_CONTEXT_DIR ) ; org . eclipse . swt . graphics . Image image = org . eclipse . swt . internal . graphics . Graphics . getImage ( resourceName , classLoader ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( image )", "total": "testGetImageWithClassLoader ( ) { java . lang . String resourceName = \"test.gif\" ; java . io . File testGif = new java . io . File ( org . eclipse . rap . rwt . testfixture . internal . Fixture . WEB_CONTEXT_DIR , resourceName ) ; org . eclipse . rap . rwt . testfixture . internal . Fixture . copyTestResource ( Fixture . IMAGE3 , testGif ) ; java . lang . ClassLoader classLoader = org . eclipse . swt . internal . graphics . Graphics_Test . classLoaderFromFile ( Fixture . WEB_CONTEXT_DIR ) ; org . eclipse . swt . graphics . Image image = org . eclipse . swt . internal . graphics . Graphics . getImage ( resourceName , classLoader ) ; \"<AssertPlaceHolder>\" ; } getImage ( java . lang . String , java . lang . ClassLoader ) { org . eclipse . swt . internal . graphics . Graphics . checkThread ( ) ; if ( path == null ) { org . eclipse . swt . SWT . error ( SWT . ERROR_NULL_ARGUMENT ) ; } if ( \"\" . equals ( path ) ) { org . eclipse . swt . SWT . error ( SWT . ERROR_INVALID_ARGUMENT ) ; } return getApplicationContext ( ) . getImageFactory ( ) . findImage ( path , imageLoader ) ; }", "answer": "org . junit . Assert . assertNotNull ( image )"}
{"focal": "getInstance ( ) { if ( ( org . openscience . smsd . helper . LabelContainer . instance ) == null ) { org . openscience . smsd . helper . LabelContainer . instance = new org . openscience . smsd . helper . LabelContainer ( ) ; } return org . openscience . smsd . helper . LabelContainer . instance ; }", "testMethod": "testGetInstance ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . openscience . smsd . helper . LabelContainer . getInstance ( ) )", "total": "testGetInstance ( ) { \"<AssertPlaceHolder>\" ; } getInstance ( ) { if ( ( org . openscience . smsd . helper . LabelContainer . instance ) == null ) { org . openscience . smsd . helper . LabelContainer . instance = new org . openscience . smsd . helper . LabelContainer ( ) ; } return org . openscience . smsd . helper . LabelContainer . instance ; }", "answer": "org . junit . Assert . assertNotNull ( org . openscience . smsd . helper . LabelContainer . getInstance ( ) )"}
{"focal": "getMessage ( ) { return message ; }", "testMethod": "testNullTimestamp ( ) { org . eclipse . kapua . service . authentication . shiro . exceptions . TemporaryLockedAccountException ex = new org . eclipse . kapua . service . authentication . shiro . exceptions . TemporaryLockedAccountException ( null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ex . getMessage ( ) )", "total": "testNullTimestamp ( ) { org . eclipse . kapua . service . authentication . shiro . exceptions . TemporaryLockedAccountException ex = new org . eclipse . kapua . service . authentication . shiro . exceptions . TemporaryLockedAccountException ( null ) ; \"<AssertPlaceHolder>\" ; } getMessage ( ) { return message ; }", "answer": "org . junit . Assert . assertNotNull ( ex . getMessage ( ) )"}
{"focal": "getReply ( ) { if ( ( socket ) == null ) return null ; java . lang . Object reply = null ; try { reply = fromServer . readObject ( ) ; protocol . receive ( reply ) ; } catch ( java . io . IOException | java . lang . ClassNotFoundException e ) { e . printStackTrace ( ) ; } return reply ; }", "testMethod": "testDaemonNetworkHeartBeat ( ) { org . provebit . daemon . MerkleDaemon daemon = new org . provebit . daemon . MerkleDaemon ( new org . provebit . merkle . FileMerkle ( org . provebit . merkle . HashType . SHA256 ) , DAEMONPERIOD ) ; daemon . start ( ) ; java . lang . Thread . sleep ( TESTSLEEP ) ; org . simplesockets . client . SimpleClient client = new org . simplesockets . client . SimpleClient ( hostname , org . provebit . utils . ServerUtils . getPort ( ) , clientProtocol ) ; org . provebit . daemon . DaemonProtocol . DaemonMessage heartbeat = new org . provebit . daemon . DaemonProtocol . DaemonMessage ( org . provebit . daemon . DaemonProtocol . DaemonMessage . DaemonMessageType . HEARTBEAT , null ) ; client . sendRequest ( heartbeat ) ; java . lang . Thread . sleep ( TESTSLEEP ) ; org . provebit . daemon . DaemonProtocol . DaemonMessage reply = ( ( org . provebit . daemon . DaemonProtocol . DaemonMessage ) ( client . getReply ( ) ) ) ; \"<AssertPlaceHolder>\" ; daemon . interrupt ( ) ; daemon . join ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( reply )", "total": "testDaemonNetworkHeartBeat ( ) { org . provebit . daemon . MerkleDaemon daemon = new org . provebit . daemon . MerkleDaemon ( new org . provebit . merkle . FileMerkle ( org . provebit . merkle . HashType . SHA256 ) , DAEMONPERIOD ) ; daemon . start ( ) ; java . lang . Thread . sleep ( TESTSLEEP ) ; org . simplesockets . client . SimpleClient client = new org . simplesockets . client . SimpleClient ( hostname , org . provebit . utils . ServerUtils . getPort ( ) , clientProtocol ) ; org . provebit . daemon . DaemonProtocol . DaemonMessage heartbeat = new org . provebit . daemon . DaemonProtocol . DaemonMessage ( org . provebit . daemon . DaemonProtocol . DaemonMessage . DaemonMessageType . HEARTBEAT , null ) ; client . sendRequest ( heartbeat ) ; java . lang . Thread . sleep ( TESTSLEEP ) ; org . provebit . daemon . DaemonProtocol . DaemonMessage reply = ( ( org . provebit . daemon . DaemonProtocol . DaemonMessage ) ( client . getReply ( ) ) ) ; \"<AssertPlaceHolder>\" ; daemon . interrupt ( ) ; daemon . join ( ) ; } getReply ( ) { if ( ( socket ) == null ) return null ; java . lang . Object reply = null ; try { reply = fromServer . readObject ( ) ; protocol . receive ( reply ) ; } catch ( java . io . IOException | java . lang . ClassNotFoundException e ) { e . printStackTrace ( ) ; } return reply ; }", "answer": "org . junit . Assert . assertNotNull ( reply )"}
{"focal": "parseYangSource ( java . lang . String ) { return org . opendaylight . yangtools . yang . stmt . StmtTestUtils . parseYangSource ( yangSourcePath , StatementParserMode . DEFAULT_MODE , null ) ; }", "testMethod": "anyData11Test ( ) { final org . opendaylight . yangtools . yang . model . api . SchemaContext schemaContext = org . opendaylight . yangtools . yang . stmt . StmtTestUtils . parseYangSource ( \"/rfc7950/basic-test/anydata-11.yang\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( schemaContext )", "total": "anyData11Test ( ) { final org . opendaylight . yangtools . yang . model . api . SchemaContext schemaContext = org . opendaylight . yangtools . yang . stmt . StmtTestUtils . parseYangSource ( \"/rfc7950/basic-test/anydata-11.yang\" ) ; \"<AssertPlaceHolder>\" ; } parseYangSource ( java . lang . String ) { return org . opendaylight . yangtools . yang . stmt . StmtTestUtils . parseYangSource ( yangSourcePath , StatementParserMode . DEFAULT_MODE , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( schemaContext )"}
{"focal": "getJwksUri ( ) { return jwksUri ; }", "testMethod": "testJwkRetrieval ( ) { final javax . ws . rs . client . Client restClient = javax . ws . rs . client . ClientBuilder . newClient ( ) ; final net . trajano . auth . internal . OpenIDProviderConfiguration openIdProviderConfiguration = restClient . target ( \"https://accounts.google.com/.well-known/openid-configuration\" ) . request ( ) . get ( net . trajano . auth . internal . OpenIDProviderConfiguration . class ) ; final net . trajano . auth . internal . JsonWebKeySet webKeys = new net . trajano . auth . internal . JsonWebKeySet ( restClient . target ( openIdProviderConfiguration . getJwksUri ( ) ) . request ( ) . get ( javax . json . JsonObject . class ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( webKeys )", "total": "testJwkRetrieval ( ) { final javax . ws . rs . client . Client restClient = javax . ws . rs . client . ClientBuilder . newClient ( ) ; final net . trajano . auth . internal . OpenIDProviderConfiguration openIdProviderConfiguration = restClient . target ( \"https://accounts.google.com/.well-known/openid-configuration\" ) . request ( ) . get ( net . trajano . auth . internal . OpenIDProviderConfiguration . class ) ; final net . trajano . auth . internal . JsonWebKeySet webKeys = new net . trajano . auth . internal . JsonWebKeySet ( restClient . target ( openIdProviderConfiguration . getJwksUri ( ) ) . request ( ) . get ( javax . json . JsonObject . class ) ) ; \"<AssertPlaceHolder>\" ; } getJwksUri ( ) { return jwksUri ; }", "answer": "org . junit . Assert . assertNotNull ( webKeys )"}
{"focal": "getTimeRange ( ) { return fTimeRange ; }", "testMethod": "testGetTimeRange ( ) { org . eclipse . tracecompass . tmf . core . timestamp . TmfTimeRange result = fFixture . getTimeRange ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetTimeRange ( ) { org . eclipse . tracecompass . tmf . core . timestamp . TmfTimeRange result = fFixture . getTimeRange ( ) ; \"<AssertPlaceHolder>\" ; } getTimeRange ( ) { return fTimeRange ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "createTmetadata ( ) { return new org . eclipse . kapua . commons . configuration . metatype . TmetadataImpl ( ) ; }", "testMethod": "testCreateTmetadata ( ) { org . eclipse . kapua . commons . configuration . metatype . ObjectFactoryImpl factoryImpl = new org . eclipse . kapua . commons . configuration . metatype . ObjectFactoryImpl ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( factoryImpl . createTmetadata ( ) )", "total": "testCreateTmetadata ( ) { org . eclipse . kapua . commons . configuration . metatype . ObjectFactoryImpl factoryImpl = new org . eclipse . kapua . commons . configuration . metatype . ObjectFactoryImpl ( ) ; \"<AssertPlaceHolder>\" ; } createTmetadata ( ) { return new org . eclipse . kapua . commons . configuration . metatype . TmetadataImpl ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( factoryImpl . createTmetadata ( ) )"}
{"focal": "getUuid ( ) { return uuid ; }", "testMethod": "saveHL7InQueue_shouldAddGeneratedUuidIfUuidIsNull ( ) { org . openmrs . hl7 . HL7InQueue hl7 = new org . openmrs . hl7 . HL7InQueue ( ) ; hl7 . setHL7Data ( \"dummy<sp>data\" ) ; hl7 . setHL7Source ( new org . openmrs . hl7 . HL7Source ( 1 ) ) ; hl7 . setHL7SourceKey ( \"a<sp>random<sp>key\" ) ; hl7 . setMessageState ( HL7Constants . HL7_STATUS_PROCESSING ) ; org . openmrs . api . context . Context . getHL7Service ( ) . saveHL7InQueue ( hl7 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( hl7 . getUuid ( ) )", "total": "saveHL7InQueue_shouldAddGeneratedUuidIfUuidIsNull ( ) { org . openmrs . hl7 . HL7InQueue hl7 = new org . openmrs . hl7 . HL7InQueue ( ) ; hl7 . setHL7Data ( \"dummy<sp>data\" ) ; hl7 . setHL7Source ( new org . openmrs . hl7 . HL7Source ( 1 ) ) ; hl7 . setHL7SourceKey ( \"a<sp>random<sp>key\" ) ; hl7 . setMessageState ( HL7Constants . HL7_STATUS_PROCESSING ) ; org . openmrs . api . context . Context . getHL7Service ( ) . saveHL7InQueue ( hl7 ) ; \"<AssertPlaceHolder>\" ; } getUuid ( ) { return uuid ; }", "answer": "org . junit . Assert . assertNotNull ( hl7 . getUuid ( ) )"}
{"focal": "save ( org . vertexium . Authorizations ) { return null ; }", "testMethod": "testChangeVisibilityOnBadPropertyName ( ) { graph . prepareVertex ( \"v1\" , org . vertexium . test . GraphTestBase . VISIBILITY_A ) . setProperty ( \"prop1\" , \"value1\" , org . vertexium . test . GraphTestBase . VISIBILITY_EMPTY ) . setProperty ( \"prop2\" , \"value2\" , org . vertexium . test . GraphTestBase . VISIBILITY_B ) . save ( AUTHORIZATIONS_A_AND_B ) ; graph . flush ( ) ; try { graph . getVertex ( \"v1\" , AUTHORIZATIONS_A ) . prepareMutation ( ) . alterPropertyVisibility ( \"propBad\" , org . vertexium . test . GraphTestBase . VISIBILITY_B ) . save ( AUTHORIZATIONS_A_AND_B ) ; org . junit . Assert . fail ( \"show<sp>throw\" ) ; } catch ( org . vertexium . test . VertexiumException ex ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( ex )", "total": "testChangeVisibilityOnBadPropertyName ( ) { graph . prepareVertex ( \"v1\" , org . vertexium . test . GraphTestBase . VISIBILITY_A ) . setProperty ( \"prop1\" , \"value1\" , org . vertexium . test . GraphTestBase . VISIBILITY_EMPTY ) . setProperty ( \"prop2\" , \"value2\" , org . vertexium . test . GraphTestBase . VISIBILITY_B ) . save ( AUTHORIZATIONS_A_AND_B ) ; graph . flush ( ) ; try { graph . getVertex ( \"v1\" , AUTHORIZATIONS_A ) . prepareMutation ( ) . alterPropertyVisibility ( \"propBad\" , org . vertexium . test . GraphTestBase . VISIBILITY_B ) . save ( AUTHORIZATIONS_A_AND_B ) ; org . junit . Assert . fail ( \"show<sp>throw\" ) ; } catch ( org . vertexium . test . VertexiumException ex ) { \"<AssertPlaceHolder>\" ; } } save ( org . vertexium . Authorizations ) { return null ; }", "answer": "org . junit . Assert . assertNotNull ( ex )"}
{"focal": "findAll ( ) { return ( ( java . util . List < gov . gtas . model . lookup . RuleCat > ) ( ruleCatRepository . findAll ( ) ) ) ; }", "testMethod": "testGetAllUser ( ) { java . util . List < gov . gtas . services . security . UserData > users = userService . findAll ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( users )", "total": "testGetAllUser ( ) { java . util . List < gov . gtas . services . security . UserData > users = userService . findAll ( ) ; \"<AssertPlaceHolder>\" ; } findAll ( ) { return ( ( java . util . List < gov . gtas . model . lookup . RuleCat > ) ( ruleCatRepository . findAll ( ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( users )"}
{"focal": "getFile ( ) { return file ; }", "testMethod": "testFindLocalMetadata ( ) { addMetadata ( metadata , null ) ; org . sonatype . aether . repository . LocalMetadataRequest request = new org . sonatype . aether . repository . LocalMetadataRequest ( metadata , null , testContext ) ; org . sonatype . aether . repository . LocalMetadataResult result = manager . find ( session , request ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result . getFile ( ) )", "total": "testFindLocalMetadata ( ) { addMetadata ( metadata , null ) ; org . sonatype . aether . repository . LocalMetadataRequest request = new org . sonatype . aether . repository . LocalMetadataRequest ( metadata , null , testContext ) ; org . sonatype . aether . repository . LocalMetadataResult result = manager . find ( session , request ) ; \"<AssertPlaceHolder>\" ; } getFile ( ) { return file ; }", "answer": "org . junit . Assert . assertNotNull ( result . getFile ( ) )"}
{"focal": "list ( int , int , java . util . List ) { java . util . Map < java . lang . String , java . lang . Object > request = new java . util . HashMap ( ) ; request . put ( \"offset\" , offset ) ; request . put ( \"count\" , count ) ; if ( ( statusList != null ) && ( ! ( statusList . isEmpty ( ) ) ) ) { request . put ( \"status_list\" , statusList ) ; } java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.card.list\" ) ; java . lang . String json = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . toJson ( request ) ; java . lang . String response = wxClient . post ( url , json ) ; java . util . Map < java . lang . String , java . lang . Object > result = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . json2Map ( response ) ; if ( result . containsKey ( \"card_id_list\" ) ) { return ( ( java . util . List < java . lang . String > ) ( result . get ( \"card_id_list\" ) ) ) ; } else { throw new com . riversoft . weixin . common . exception . WxRuntimeException ( 999 , \"create<sp>card<sp>failed.\" ) ; } }", "testMethod": "testList ( ) { java . util . List < java . lang . String > list = com . riversoft . weixin . mp . card . Cards . defaultCards ( ) . list ( 0 , 10 , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( list )", "total": "testList ( ) { java . util . List < java . lang . String > list = com . riversoft . weixin . mp . card . Cards . defaultCards ( ) . list ( 0 , 10 , null ) ; \"<AssertPlaceHolder>\" ; } list ( int , int , java . util . List ) { java . util . Map < java . lang . String , java . lang . Object > request = new java . util . HashMap ( ) ; request . put ( \"offset\" , offset ) ; request . put ( \"count\" , count ) ; if ( ( statusList != null ) && ( ! ( statusList . isEmpty ( ) ) ) ) { request . put ( \"status_list\" , statusList ) ; } java . lang . String url = com . riversoft . weixin . mp . base . WxEndpoint . get ( \"url.card.list\" ) ; java . lang . String json = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . toJson ( request ) ; java . lang . String response = wxClient . post ( url , json ) ; java . util . Map < java . lang . String , java . lang . Object > result = com . riversoft . weixin . common . util . JsonMapper . defaultMapper ( ) . json2Map ( response ) ; if ( result . containsKey ( \"card_id_list\" ) ) { return ( ( java . util . List < java . lang . String > ) ( result . get ( \"card_id_list\" ) ) ) ; } else { throw new com . riversoft . weixin . common . exception . WxRuntimeException ( 999 , \"create<sp>card<sp>failed.\" ) ; } }", "answer": "org . junit . Assert . assertNotNull ( list )"}
{"focal": "getServiceContext ( ) { return org . sculptor . framework . test . AppEngineTestHelper . getServiceContext ( ) ; }", "testMethod": "testFindById ( ) { org . sculptor . examples . library . person . domain . Person person = personService . findById ( getServiceContext ( ) , id1 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( person )", "total": "testFindById ( ) { org . sculptor . examples . library . person . domain . Person person = personService . findById ( getServiceContext ( ) , id1 ) ; \"<AssertPlaceHolder>\" ; } getServiceContext ( ) { return org . sculptor . framework . test . AppEngineTestHelper . getServiceContext ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( person )"}
{"focal": "getWidgetByFieldName ( java . lang . String ) { for ( Map . Entry < org . openmrs . module . htmlformentry . widget . Widget , java . lang . String > e : fieldNames . entrySet ( ) ) { if ( e . getValue ( ) . equals ( fieldName ) ) return e . getKey ( ) ; } return null ; }", "testMethod": "testGetWidgetByFieldName ( ) { org . openmrs . module . htmlformentry . widget . DropdownWidget widget = new org . openmrs . module . htmlformentry . widget . DropdownWidget ( ) ; context . registerWidget ( widget ) ; java . lang . String fieldName = context . getFieldName ( widget ) ; org . openmrs . module . htmlformentry . widget . Widget w = context . getWidgetByFieldName ( fieldName ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( w )", "total": "testGetWidgetByFieldName ( ) { org . openmrs . module . htmlformentry . widget . DropdownWidget widget = new org . openmrs . module . htmlformentry . widget . DropdownWidget ( ) ; context . registerWidget ( widget ) ; java . lang . String fieldName = context . getFieldName ( widget ) ; org . openmrs . module . htmlformentry . widget . Widget w = context . getWidgetByFieldName ( fieldName ) ; \"<AssertPlaceHolder>\" ; } getWidgetByFieldName ( java . lang . String ) { for ( Map . Entry < org . openmrs . module . htmlformentry . widget . Widget , java . lang . String > e : fieldNames . entrySet ( ) ) { if ( e . getValue ( ) . equals ( fieldName ) ) return e . getKey ( ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( w )"}
{"focal": "getRevocationAuthorityParameters ( java . lang . String ) { eu . abc4trust . xml . SystemParameters systemParameters = eu . abc4trust . cryptoEngine . util . SystemParametersUtil . getDefaultSystemParameters_1024 ( ) ; this . storeSystemParameters ( systemParameters ) ; java . lang . String requestString = \"/setupRevocationAuthorityParameters?keyLength=1024&uid=\" + revocationAuthorityParametersUid ; com . sun . jersey . api . client . WebResource . Builder resource = this . getHttpBuilder ( requestString , this . baseUrl ) ; eu . abc4trust . xml . RevocationReferences revocationReferences = eu . abc4trust . services . revocation . RevocationServiceFactory . of . createRevocationReferences ( ) ; eu . abc4trust . xml . Reference nonRevocationEvidenceReference = eu . abc4trust . services . revocation . RevocationServiceFactory . of . createReference ( ) ; nonRevocationEvidenceReference . getReferences ( ) . add ( java . net . URI . create ( \"http://localhost:9200/something-nre\" ) ) ; nonRevocationEvidenceReference . setReferenceType ( java . net . URI . create ( \"http\" ) ) ; eu . abc4trust . xml . Reference nonRevocationEvidenceUpdateReference = eu . abc4trust . services . revocation . RevocationServiceFactory . of . createReference ( ) ; nonRevocationEvidenceUpdateReference . getReferences ( ) . add ( java . net . URI . create ( \"http://localhost:9200/something-update\" ) ) ; nonRevocationEvidenceUpdateReference . setReferenceType ( java . net . URI . create ( \"http\" ) ) ; eu . abc4trust . xml . Reference revocationInfoReference = eu . abc4trust . services . revocation . RevocationServiceFactory . of . createReference ( ) ; revocationInfoReference . getReferences ( ) . add ( java . net . URI . create ( \"http://localhost:9200/something-rev-info\" ) ) ; revocationInfoReference . setReferenceType ( java . net . URI . create ( \"http\" ) ) ; revocationReferences . setNonRevocationEvidenceReference ( nonRevocationEvidenceReference ) ; revocationReferences . setNonRevocationEvidenceUpdateReference ( nonRevocationEvidenceUpdateReference ) ; revocationReferences . setRevocationInfoReference ( revocationInfoReference ) ; eu . abc4trust . xml . RevocationAuthorityParameters revocationAuthorityParameters = resource . post ( eu . abc4trust . xml . RevocationAuthorityParameters . class , eu . abc4trust . services . revocation . RevocationServiceFactory . of . createRevocationReferences ( revocationReferences ) ) ; return revocationAuthorityParameters ; }", "testMethod": "setupRevocationAuthorityParameters ( ) { eu . abc4trust . services . revocation . RevocationServiceFactory revocationServiceFactory = new eu . abc4trust . services . revocation . RevocationServiceFactory ( ) ; java . lang . String revocationAuthorityParametersUid = \"urn:revocationauthorityparameters:test:foobar\" ; eu . abc4trust . xml . RevocationAuthorityParameters revocationAuthorityParameters = revocationServiceFactory . getRevocationAuthorityParameters ( revocationAuthorityParametersUid ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( revocationAuthorityParameters )", "total": "setupRevocationAuthorityParameters ( ) { eu . abc4trust . services . revocation . RevocationServiceFactory revocationServiceFactory = new eu . abc4trust . services . revocation . RevocationServiceFactory ( ) ; java . lang . String revocationAuthorityParametersUid = \"urn:revocationauthorityparameters:test:foobar\" ; eu . abc4trust . xml . RevocationAuthorityParameters revocationAuthorityParameters = revocationServiceFactory . getRevocationAuthorityParameters ( revocationAuthorityParametersUid ) ; \"<AssertPlaceHolder>\" ; } getRevocationAuthorityParameters ( java . lang . String ) { eu . abc4trust . xml . SystemParameters systemParameters = eu . abc4trust . cryptoEngine . util . SystemParametersUtil . getDefaultSystemParameters_1024 ( ) ; this . storeSystemParameters ( systemParameters ) ; java . lang . String requestString = \"/setupRevocationAuthorityParameters?keyLength=1024&uid=\" + revocationAuthorityParametersUid ; com . sun . jersey . api . client . WebResource . Builder resource = this . getHttpBuilder ( requestString , this . baseUrl ) ; eu . abc4trust . xml . RevocationReferences revocationReferences = eu . abc4trust . services . revocation . RevocationServiceFactory . of . createRevocationReferences ( ) ; eu . abc4trust . xml . Reference nonRevocationEvidenceReference = eu . abc4trust . services . revocation . RevocationServiceFactory . of . createReference ( ) ; nonRevocationEvidenceReference . getReferences ( ) . add ( java . net . URI . create ( \"http://localhost:9200/something-nre\" ) ) ; nonRevocationEvidenceReference . setReferenceType ( java . net . URI . create ( \"http\" ) ) ; eu . abc4trust . xml . Reference nonRevocationEvidenceUpdateReference = eu . abc4trust . services . revocation . RevocationServiceFactory . of . createReference ( ) ; nonRevocationEvidenceUpdateReference . getReferences ( ) . add ( java . net . URI . create ( \"http://localhost:9200/something-update\" ) ) ; nonRevocationEvidenceUpdateReference . setReferenceType ( java . net . URI . create ( \"http\" ) ) ; eu . abc4trust . xml . Reference revocationInfoReference = eu . abc4trust . services . revocation . RevocationServiceFactory . of . createReference ( ) ; revocationInfoReference . getReferences ( ) . add ( java . net . URI . create ( \"http://localhost:9200/something-rev-info\" ) ) ; revocationInfoReference . setReferenceType ( java . net . URI . create ( \"http\" ) ) ; revocationReferences . setNonRevocationEvidenceReference ( nonRevocationEvidenceReference ) ; revocationReferences . setNonRevocationEvidenceUpdateReference ( nonRevocationEvidenceUpdateReference ) ; revocationReferences . setRevocationInfoReference ( revocationInfoReference ) ; eu . abc4trust . xml . RevocationAuthorityParameters revocationAuthorityParameters = resource . post ( eu . abc4trust . xml . RevocationAuthorityParameters . class , eu . abc4trust . services . revocation . RevocationServiceFactory . of . createRevocationReferences ( revocationReferences ) ) ; return revocationAuthorityParameters ; }", "answer": "org . junit . Assert . assertNotNull ( revocationAuthorityParameters )"}
{"focal": "getPayloadConverter ( ) { return payloadConverter ; }", "testMethod": "getPayloadConverter ( ) { io . github . tcdl . msb . impl . ObjectFactory objectFactory = new io . github . tcdl . msb . impl . ObjectFactoryImpl ( io . github . tcdl . msb . support . TestUtils . createMsbContextBuilder ( ) . build ( ) ) ; io . github . tcdl . msb . impl . PayloadConverter payloadConverter = objectFactory . getPayloadConverter ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( payloadConverter )", "total": "getPayloadConverter ( ) { io . github . tcdl . msb . impl . ObjectFactory objectFactory = new io . github . tcdl . msb . impl . ObjectFactoryImpl ( io . github . tcdl . msb . support . TestUtils . createMsbContextBuilder ( ) . build ( ) ) ; io . github . tcdl . msb . impl . PayloadConverter payloadConverter = objectFactory . getPayloadConverter ( ) ; \"<AssertPlaceHolder>\" ; } getPayloadConverter ( ) { return payloadConverter ; }", "answer": "org . junit . Assert . assertNotNull ( payloadConverter )"}
{"focal": "createProperty ( java . lang . reflect . Field ) { return new org . jboss . solder . properties . FieldPropertyImpl < V > ( field ) ; }", "testMethod": "testPrimitiveBooleanProperty ( ) { org . jboss . solder . properties . Property < java . lang . Boolean > p = org . jboss . solder . properties . Properties . createProperty ( org . jboss . solder . test . properties . ClassToIntrospect . class . getMethod ( \"isValidPrimitiveBoolean\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( p )", "total": "testPrimitiveBooleanProperty ( ) { org . jboss . solder . properties . Property < java . lang . Boolean > p = org . jboss . solder . properties . Properties . createProperty ( org . jboss . solder . test . properties . ClassToIntrospect . class . getMethod ( \"isValidPrimitiveBoolean\" ) ) ; \"<AssertPlaceHolder>\" ; } createProperty ( java . lang . reflect . Field ) { return new org . jboss . solder . properties . FieldPropertyImpl < V > ( field ) ; }", "answer": "org . junit . Assert . assertNotNull ( p )"}
{"focal": "getConnectionProvider ( java . lang . String ) { return connectionProviders . get ( getLookupKey ( key ) ) ; }", "testMethod": "testAddConnectionProvider ( ) { addProvider ( ) ; org . pentaho . di . connections . ConnectionManagerTest . TestConnectionProvider testConnectionProvider1 = ( ( org . pentaho . di . connections . ConnectionManagerTest . TestConnectionProvider ) ( connectionManager . getConnectionProvider ( org . pentaho . di . connections . ConnectionManagerTest . TestConnectionProvider . SCHEME ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( testConnectionProvider1 )", "total": "testAddConnectionProvider ( ) { addProvider ( ) ; org . pentaho . di . connections . ConnectionManagerTest . TestConnectionProvider testConnectionProvider1 = ( ( org . pentaho . di . connections . ConnectionManagerTest . TestConnectionProvider ) ( connectionManager . getConnectionProvider ( org . pentaho . di . connections . ConnectionManagerTest . TestConnectionProvider . SCHEME ) ) ) ; \"<AssertPlaceHolder>\" ; } getConnectionProvider ( java . lang . String ) { return connectionProviders . get ( getLookupKey ( key ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( testConnectionProvider1 )"}
{"focal": "inject ( java . lang . Object ) { try { injector . inject ( object ) ; return this ; } catch ( java . lang . Exception e ) { throw aQute . lib . exceptions . Exceptions . duck ( e ) ; } }", "testMethod": "quickStart ( ) { try ( aQute . launchpad . Launchpad launchpad = builder . create ( ) . inject ( this ) ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( context )", "total": "quickStart ( ) { try ( aQute . launchpad . Launchpad launchpad = builder . create ( ) . inject ( this ) ) { \"<AssertPlaceHolder>\" ; } } inject ( java . lang . Object ) { try { injector . inject ( object ) ; return this ; } catch ( java . lang . Exception e ) { throw aQute . lib . exceptions . Exceptions . duck ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( context )"}
{"focal": "getMission ( org . gedcom4j . model . Individual ) { return i . getCustomFactsWithTag ( \"_MISN\" ) ; }", "testMethod": "testMissionImmutable ( ) { org . gedcom4j . model . thirdpartyadapters . FamilyTreeMaker3Adapter a = new org . gedcom4j . model . thirdpartyadapters . FamilyTreeMaker3Adapter ( ) ; java . util . List < org . gedcom4j . model . CustomFact > cfs = a . getMission ( jesse ) ; \"<AssertPlaceHolder>\" ; cfs . clear ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( cfs )", "total": "testMissionImmutable ( ) { org . gedcom4j . model . thirdpartyadapters . FamilyTreeMaker3Adapter a = new org . gedcom4j . model . thirdpartyadapters . FamilyTreeMaker3Adapter ( ) ; java . util . List < org . gedcom4j . model . CustomFact > cfs = a . getMission ( jesse ) ; \"<AssertPlaceHolder>\" ; cfs . clear ( ) ; } getMission ( org . gedcom4j . model . Individual ) { return i . getCustomFactsWithTag ( \"_MISN\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( cfs )"}
{"focal": "getSqlString ( ) { return sqlString ; }", "testMethod": "testVisitToNumberFunction ( ) { es . ieci . tecdoc . fwktd . sql . node . expression . StringValue value = new es . ieci . tecdoc . fwktd . sql . node . expression . StringValue ( \"233443\" ) ; es . ieci . tecdoc . fwktd . sql . node . expression . functions . cast . ToNumericFunction function = new es . ieci . tecdoc . fwktd . sql . node . expression . functions . cast . ToNumericFunction ( value , \"###############.##########\" ) ; expressionRenderer . visit ( function ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( function . getSqlString ( ) )", "total": "testVisitToNumberFunction ( ) { es . ieci . tecdoc . fwktd . sql . node . expression . StringValue value = new es . ieci . tecdoc . fwktd . sql . node . expression . StringValue ( \"233443\" ) ; es . ieci . tecdoc . fwktd . sql . node . expression . functions . cast . ToNumericFunction function = new es . ieci . tecdoc . fwktd . sql . node . expression . functions . cast . ToNumericFunction ( value , \"###############.##########\" ) ; expressionRenderer . visit ( function ) ; \"<AssertPlaceHolder>\" ; } getSqlString ( ) { return sqlString ; }", "answer": "org . junit . Assert . assertNotNull ( function . getSqlString ( ) )"}
{"focal": "list ( ) { java . util . List < com . querydsl . collections . Cat > rv = com . querydsl . collections . CollQueryFactory . from ( cat , cats ) . innerJoin ( cat . kittens , kitten ) . where ( cat . name . eq ( kitten . name ) ) . orderBy ( cat . name . asc ( ) ) . fetch ( ) ; org . junit . Assert . assertEquals ( \"Bob\" , rv . get ( 0 ) . getName ( ) ) ; org . junit . Assert . assertEquals ( \"Kate\" , rv . get ( 1 ) . getName ( ) ) ; }", "testMethod": "union_factoryExpression ( ) { com . querydsl . core . types . SubQueryExpression < com . querydsl . sql . domain . Employee > sq1 = query ( ) . from ( com . querydsl . sql . Constants . employee ) . select ( com . querydsl . core . types . Projections . constructor ( com . querydsl . sql . domain . Employee . class , employee . id ) ) ; com . querydsl . core . types . SubQueryExpression < com . querydsl . sql . domain . Employee > sq2 = query ( ) . from ( com . querydsl . sql . Constants . employee ) . select ( com . querydsl . core . types . Projections . constructor ( com . querydsl . sql . domain . Employee . class , employee . id ) ) ; java . util . List < com . querydsl . sql . domain . Employee > employees = query ( ) . union ( sq1 , sq2 ) . list ( ) ; for ( com . querydsl . sql . domain . Employee employee : employees ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( employee )", "total": "union_factoryExpression ( ) { com . querydsl . core . types . SubQueryExpression < com . querydsl . sql . domain . Employee > sq1 = query ( ) . from ( com . querydsl . sql . Constants . employee ) . select ( com . querydsl . core . types . Projections . constructor ( com . querydsl . sql . domain . Employee . class , employee . id ) ) ; com . querydsl . core . types . SubQueryExpression < com . querydsl . sql . domain . Employee > sq2 = query ( ) . from ( com . querydsl . sql . Constants . employee ) . select ( com . querydsl . core . types . Projections . constructor ( com . querydsl . sql . domain . Employee . class , employee . id ) ) ; java . util . List < com . querydsl . sql . domain . Employee > employees = query ( ) . union ( sq1 , sq2 ) . list ( ) ; for ( com . querydsl . sql . domain . Employee employee : employees ) { \"<AssertPlaceHolder>\" ; } } list ( ) { java . util . List < com . querydsl . collections . Cat > rv = com . querydsl . collections . CollQueryFactory . from ( cat , cats ) . innerJoin ( cat . kittens , kitten ) . where ( cat . name . eq ( kitten . name ) ) . orderBy ( cat . name . asc ( ) ) . fetch ( ) ; org . junit . Assert . assertEquals ( \"Bob\" , rv . get ( 0 ) . getName ( ) ) ; org . junit . Assert . assertEquals ( \"Kate\" , rv . get ( 1 ) . getName ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( employee )"}
{"focal": "findOne ( ) { org . tests . model . basic . EBasicVer doda = new org . tests . model . basic . EBasicVer ( \"doda\" ) ; doda . setDescription ( \"OddButUniqueSillyExample\" ) ; io . ebean . Ebean . save ( doda ) ; io . ebean . cache . ServerCache queryCache = io . ebean . Ebean . getServerCacheManager ( ) . getQueryCache ( org . tests . model . basic . EBasicVer . class ) ; queryCache . getStatistics ( true ) ; java . util . Optional < org . tests . model . basic . EBasicVer > found0 = io . ebean . Ebean . find ( org . tests . model . basic . EBasicVer . class ) . where ( ) . eq ( \"description\" , \"OddButUniqueSillyExample\" ) . setUseQueryCache ( true ) . findOneOrEmpty ( ) ; org . junit . Assert . assertTrue ( found0 . isPresent ( ) ) ; assertHitMiss ( 0 , 1 , queryCache ) ; org . tests . model . basic . EBasicVer found1 = io . ebean . Ebean . find ( org . tests . model . basic . EBasicVer . class ) . where ( ) . eq ( \"description\" , \"OddButUniqueSillyExample\" ) . setUseQueryCache ( true ) . findOne ( ) ; org . junit . Assert . assertNotNull ( found1 ) ; assertHitMiss ( 1 , 0 , queryCache ) ; }", "testMethod": "test ( ) { org . tests . model . basic . TMapSuperEntity e = new org . tests . model . basic . TMapSuperEntity ( ) ; e . setName ( \"babana\" ) ; io . ebean . Ebean . save ( e ) ; org . tests . model . basic . TMapSuperEntity e2 = io . ebean . Ebean . find ( org . tests . model . basic . TMapSuperEntity . class ) . where ( ) . idEq ( e . getId ( ) ) . select ( \"id,<sp>name,<sp>myint,<sp>someObject,<sp>bananan\" ) . findOne ( ) ; \"<AssertPlaceHolder>\" ; org . tests . model . basic . TMapSuperEntity eSaveDelete = new org . tests . model . basic . TMapSuperEntity ( ) ; eSaveDelete . setName ( \"babana\" ) ; io . ebean . Ebean . save ( eSaveDelete ) ; io . ebean . Ebean . delete ( eSaveDelete ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( e2 )", "total": "test ( ) { org . tests . model . basic . TMapSuperEntity e = new org . tests . model . basic . TMapSuperEntity ( ) ; e . setName ( \"babana\" ) ; io . ebean . Ebean . save ( e ) ; org . tests . model . basic . TMapSuperEntity e2 = io . ebean . Ebean . find ( org . tests . model . basic . TMapSuperEntity . class ) . where ( ) . idEq ( e . getId ( ) ) . select ( \"id,<sp>name,<sp>myint,<sp>someObject,<sp>bananan\" ) . findOne ( ) ; \"<AssertPlaceHolder>\" ; org . tests . model . basic . TMapSuperEntity eSaveDelete = new org . tests . model . basic . TMapSuperEntity ( ) ; eSaveDelete . setName ( \"babana\" ) ; io . ebean . Ebean . save ( eSaveDelete ) ; io . ebean . Ebean . delete ( eSaveDelete ) ; } findOne ( ) { org . tests . model . basic . EBasicVer doda = new org . tests . model . basic . EBasicVer ( \"doda\" ) ; doda . setDescription ( \"OddButUniqueSillyExample\" ) ; io . ebean . Ebean . save ( doda ) ; io . ebean . cache . ServerCache queryCache = io . ebean . Ebean . getServerCacheManager ( ) . getQueryCache ( org . tests . model . basic . EBasicVer . class ) ; queryCache . getStatistics ( true ) ; java . util . Optional < org . tests . model . basic . EBasicVer > found0 = io . ebean . Ebean . find ( org . tests . model . basic . EBasicVer . class ) . where ( ) . eq ( \"description\" , \"OddButUniqueSillyExample\" ) . setUseQueryCache ( true ) . findOneOrEmpty ( ) ; org . junit . Assert . assertTrue ( found0 . isPresent ( ) ) ; assertHitMiss ( 0 , 1 , queryCache ) ; org . tests . model . basic . EBasicVer found1 = io . ebean . Ebean . find ( org . tests . model . basic . EBasicVer . class ) . where ( ) . eq ( \"description\" , \"OddButUniqueSillyExample\" ) . setUseQueryCache ( true ) . findOne ( ) ; org . junit . Assert . assertNotNull ( found1 ) ; assertHitMiss ( 1 , 0 , queryCache ) ; }", "answer": "org . junit . Assert . assertNotNull ( e2 )"}
{"focal": "getObject ( ) { return object ; }", "testMethod": "pojoWithAnnotatedField ( ) { com . airhacks . enhydrator . out . CachingConsumer consumer = new com . airhacks . enhydrator . out . CachingConsumer ( ) ; com . airhacks . enhydrator . out . PojoSink sink = new com . airhacks . enhydrator . out . PojoSink ( com . airhacks . enhydrator . out . DeveloperWithAnnotatedField . class , consumer , null ) ; final java . lang . String expectedName = \"duke\" ; final int expectedAge = 42 ; com . airhacks . enhydrator . in . Row programming = new com . airhacks . enhydrator . in . Row ( ) ; programming . addColumn ( ( - 1 ) , \"name\" , expectedName ) ; programming . addColumn ( ( - 1 ) , \"age\" , expectedAge ) ; sink . processRow ( programming ) ; com . airhacks . enhydrator . out . DeveloperWithAnnotatedField kidless = ( ( com . airhacks . enhydrator . out . DeveloperWithAnnotatedField ) ( consumer . getObject ( ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( kidless )", "total": "pojoWithAnnotatedField ( ) { com . airhacks . enhydrator . out . CachingConsumer consumer = new com . airhacks . enhydrator . out . CachingConsumer ( ) ; com . airhacks . enhydrator . out . PojoSink sink = new com . airhacks . enhydrator . out . PojoSink ( com . airhacks . enhydrator . out . DeveloperWithAnnotatedField . class , consumer , null ) ; final java . lang . String expectedName = \"duke\" ; final int expectedAge = 42 ; com . airhacks . enhydrator . in . Row programming = new com . airhacks . enhydrator . in . Row ( ) ; programming . addColumn ( ( - 1 ) , \"name\" , expectedName ) ; programming . addColumn ( ( - 1 ) , \"age\" , expectedAge ) ; sink . processRow ( programming ) ; com . airhacks . enhydrator . out . DeveloperWithAnnotatedField kidless = ( ( com . airhacks . enhydrator . out . DeveloperWithAnnotatedField ) ( consumer . getObject ( ) ) ) ; \"<AssertPlaceHolder>\" ; } getObject ( ) { return object ; }", "answer": "org . junit . Assert . assertNotNull ( kidless )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreatePayersSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . hitsp . PayersSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . hitsp . builder . HITSPBuilderFactory . createPayersSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . hitsp . PayersSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreatePayersSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . hitsp . PayersSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . hitsp . builder . HITSPBuilderFactory . createPayersSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . hitsp . PayersSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "getOperationOutcome ( ) { return toOperationOutcome ( ) ; }", "testMethod": "testValidate ( ) { final ca . uhn . fhir . jaxrs . server . OperationOutcome oo = new ca . uhn . fhir . jaxrs . server . OperationOutcome ( ) ; final ca . uhn . fhir . jaxrs . server . Patient patient = new ca . uhn . fhir . jaxrs . server . Patient ( ) ; patient . addIdentifier ( new ca . uhn . fhir . model . dstu2 . composite . IdentifierDt ( ) . setValue ( \"1\" ) ) ; final ca . uhn . fhir . jaxrs . server . Parameters inParams = new ca . uhn . fhir . jaxrs . server . Parameters ( ) ; inParams . addParameter ( ) . setResource ( patient ) ; final ca . uhn . fhir . rest . api . MethodOutcome mO = ca . uhn . fhir . jaxrs . server . AbstractJaxRsResourceProviderTest . client . validate ( ) . resource ( patient ) . execute ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( mO . getOperationOutcome ( ) )", "total": "testValidate ( ) { final ca . uhn . fhir . jaxrs . server . OperationOutcome oo = new ca . uhn . fhir . jaxrs . server . OperationOutcome ( ) ; final ca . uhn . fhir . jaxrs . server . Patient patient = new ca . uhn . fhir . jaxrs . server . Patient ( ) ; patient . addIdentifier ( new ca . uhn . fhir . model . dstu2 . composite . IdentifierDt ( ) . setValue ( \"1\" ) ) ; final ca . uhn . fhir . jaxrs . server . Parameters inParams = new ca . uhn . fhir . jaxrs . server . Parameters ( ) ; inParams . addParameter ( ) . setResource ( patient ) ; final ca . uhn . fhir . rest . api . MethodOutcome mO = ca . uhn . fhir . jaxrs . server . AbstractJaxRsResourceProviderTest . client . validate ( ) . resource ( patient ) . execute ( ) ; \"<AssertPlaceHolder>\" ; } getOperationOutcome ( ) { return toOperationOutcome ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( mO . getOperationOutcome ( ) )"}
{"focal": "describeFeatureType ( ogc . schema . opengis . wfs . v_1_0_0 . DescribeFeatureTypeType ) { org . codice . ddf . spatial . ogc . wfs . catalog . endpoint . WfsEndpoint . LOGGER . debug ( \"Got<sp>describeFeatureType<sp>via<sp>HTTP<sp>POST\" ) ; if ( request == null ) { throw new org . codice . ddf . spatial . ogc . wfs . catalog . common . WfsException ( \"DescribeFeatureType<sp>request<sp>is<sp>null\" ) ; } if ( validateRequestParameters ( request . getService ( ) , request . getVersion ( ) ) ) { if ( request . getTypeName ( ) . isEmpty ( ) ) { return buildMultipleFeatureTypeImportSchema ( schemaCache . getFeatureTypeQnames ( ) ) ; } else { java . util . Set < javax . xml . namespace . QName > qnames = new java . util . HashSet < javax . xml . namespace . QName > ( ) ; for ( javax . xml . namespace . QName qname : request . getTypeName ( ) ) { if ( null == ( schemaCache . getSchemaByQname ( qname ) ) ) { throw createUnknownTypeException ( qname . toString ( ) ) ; } qnames . add ( qname ) ; } return processQnamesFromDescribeFeature ( qnames ) ; } } else { throw createUnexpectedServiceException ( request . getService ( ) , request . getVersion ( ) , Wfs10Constants . DESCRIBE_FEATURE_TYPE ) ; } }", "testMethod": "testDescribeFeatureTypeNoneSpecifiedHttpPost ( ) { ogc . schema . opengis . wfs . v_1_0_0 . DescribeFeatureTypeType request = new ogc . schema . opengis . wfs . v_1_0_0 . DescribeFeatureTypeType ( ) ; org . apache . ws . commons . schema . XmlSchema schema = org . codice . ddf . spatial . ogc . wfs . catalog . endpoint . TestWfsEndpoint . wfs . describeFeatureType ( request ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( schema )", "total": "testDescribeFeatureTypeNoneSpecifiedHttpPost ( ) { ogc . schema . opengis . wfs . v_1_0_0 . DescribeFeatureTypeType request = new ogc . schema . opengis . wfs . v_1_0_0 . DescribeFeatureTypeType ( ) ; org . apache . ws . commons . schema . XmlSchema schema = org . codice . ddf . spatial . ogc . wfs . catalog . endpoint . TestWfsEndpoint . wfs . describeFeatureType ( request ) ; \"<AssertPlaceHolder>\" ; } describeFeatureType ( ogc . schema . opengis . wfs . v_1_0_0 . DescribeFeatureTypeType ) { org . codice . ddf . spatial . ogc . wfs . catalog . endpoint . WfsEndpoint . LOGGER . debug ( \"Got<sp>describeFeatureType<sp>via<sp>HTTP<sp>POST\" ) ; if ( request == null ) { throw new org . codice . ddf . spatial . ogc . wfs . catalog . common . WfsException ( \"DescribeFeatureType<sp>request<sp>is<sp>null\" ) ; } if ( validateRequestParameters ( request . getService ( ) , request . getVersion ( ) ) ) { if ( request . getTypeName ( ) . isEmpty ( ) ) { return buildMultipleFeatureTypeImportSchema ( schemaCache . getFeatureTypeQnames ( ) ) ; } else { java . util . Set < javax . xml . namespace . QName > qnames = new java . util . HashSet < javax . xml . namespace . QName > ( ) ; for ( javax . xml . namespace . QName qname : request . getTypeName ( ) ) { if ( null == ( schemaCache . getSchemaByQname ( qname ) ) ) { throw createUnknownTypeException ( qname . toString ( ) ) ; } qnames . add ( qname ) ; } return processQnamesFromDescribeFeature ( qnames ) ; } } else { throw createUnexpectedServiceException ( request . getService ( ) , request . getVersion ( ) , Wfs10Constants . DESCRIBE_FEATURE_TYPE ) ; } }", "answer": "org . junit . Assert . assertNotNull ( schema )"}
{"focal": "ready ( ) { if ( ( cursor ) != null ) { cursor . close ( ) ; cursor = null ; } return transaction . ready ( ) ; }", "testMethod": "testReady ( ) { final org . opendaylight . mdsal . dom . spi . store . DOMStoreThreePhaseCommitCohort result = object ( ) . ready ( ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( delegate ) . ready ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testReady ( ) { final org . opendaylight . mdsal . dom . spi . store . DOMStoreThreePhaseCommitCohort result = object ( ) . ready ( ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( delegate ) . ready ( ) ; } ready ( ) { if ( ( cursor ) != null ) { cursor . close ( ) ; cursor = null ; } return transaction . ready ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "newInstance ( java . lang . String , org . apache . hadoop . fs . Path , org . apache . hadoop . fs . Path , java . util . Map ) { java . util . List < com . hotels . bdp . circustrain . api . copier . Copier > copiers = new java . util . ArrayList ( delegates . size ( ) ) ; int i = 0 ; for ( com . hotels . bdp . circustrain . api . copier . CopierFactory delegatee : delegates ) { com . hotels . bdp . circustrain . api . copier . CopierPathGeneratorParams copierPathGeneratorParams = com . hotels . bdp . circustrain . api . copier . CopierPathGeneratorParams . newParams ( ( i ++ ) , eventId , sourceBaseLocation , null , replicaLocation , copierOptions ) ; org . apache . hadoop . fs . Path newReplicaLocation = pathGenerator . generateReplicaLocation ( copierPathGeneratorParams ) ; org . apache . hadoop . fs . Path newSourceBaseLocation = pathGenerator . generateSourceBaseLocation ( copierPathGeneratorParams ) ; com . hotels . bdp . circustrain . api . copier . Copier copier = delegatee . newInstance ( eventId , newSourceBaseLocation , newReplicaLocation , copierOptions ) ; copiers . add ( copier ) ; } return new com . hotels . bdp . circustrain . api . copier . CompositeCopierFactory . CompositeCopier ( copiers , metricsMerger ) ; }", "testMethod": "newInstance ( ) { java . lang . String eventId = \"eventID\" ; org . apache . hadoop . fs . Path sourceBaseLocation = new org . apache . hadoop . fs . Path ( \"source\" ) ; org . apache . hadoop . fs . Path replicaLocation = new org . apache . hadoop . fs . Path ( \"replica\" ) ; java . util . Map < java . lang . String , java . lang . Object > copierOptions = new java . util . HashMap ( ) ; com . hotels . bdp . circustrain . api . copier . Copier copier = factory . newInstance ( eventId , sourceBaseLocation , replicaLocation , copierOptions ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( copier )", "total": "newInstance ( ) { java . lang . String eventId = \"eventID\" ; org . apache . hadoop . fs . Path sourceBaseLocation = new org . apache . hadoop . fs . Path ( \"source\" ) ; org . apache . hadoop . fs . Path replicaLocation = new org . apache . hadoop . fs . Path ( \"replica\" ) ; java . util . Map < java . lang . String , java . lang . Object > copierOptions = new java . util . HashMap ( ) ; com . hotels . bdp . circustrain . api . copier . Copier copier = factory . newInstance ( eventId , sourceBaseLocation , replicaLocation , copierOptions ) ; \"<AssertPlaceHolder>\" ; } newInstance ( java . lang . String , org . apache . hadoop . fs . Path , org . apache . hadoop . fs . Path , java . util . Map ) { java . util . List < com . hotels . bdp . circustrain . api . copier . Copier > copiers = new java . util . ArrayList ( delegates . size ( ) ) ; int i = 0 ; for ( com . hotels . bdp . circustrain . api . copier . CopierFactory delegatee : delegates ) { com . hotels . bdp . circustrain . api . copier . CopierPathGeneratorParams copierPathGeneratorParams = com . hotels . bdp . circustrain . api . copier . CopierPathGeneratorParams . newParams ( ( i ++ ) , eventId , sourceBaseLocation , null , replicaLocation , copierOptions ) ; org . apache . hadoop . fs . Path newReplicaLocation = pathGenerator . generateReplicaLocation ( copierPathGeneratorParams ) ; org . apache . hadoop . fs . Path newSourceBaseLocation = pathGenerator . generateSourceBaseLocation ( copierPathGeneratorParams ) ; com . hotels . bdp . circustrain . api . copier . Copier copier = delegatee . newInstance ( eventId , newSourceBaseLocation , newReplicaLocation , copierOptions ) ; copiers . add ( copier ) ; } return new com . hotels . bdp . circustrain . api . copier . CompositeCopierFactory . CompositeCopier ( copiers , metricsMerger ) ; }", "answer": "org . junit . Assert . assertNotNull ( copier )"}
{"focal": "now ( ) { return org . csstudio . data . values . TimestampFactory . fromMillisecs ( new java . util . Date ( ) . getTime ( ) ) ; }", "testMethod": "testDataRetrievalString ( ) { java . time . Instant end = java . time . Instant . now ( ) ; java . time . Instant start = end . minus ( org . diirt . util . time . TimeDuration . ofHours ( 24.0 ) ) ; try { getValuesStringArray ( \"test_pv_wave_string\" , true , 5 , start , end ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . UnsupportedOperationException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e )", "total": "testDataRetrievalString ( ) { java . time . Instant end = java . time . Instant . now ( ) ; java . time . Instant start = end . minus ( org . diirt . util . time . TimeDuration . ofHours ( 24.0 ) ) ; try { getValuesStringArray ( \"test_pv_wave_string\" , true , 5 , start , end ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . UnsupportedOperationException e ) { \"<AssertPlaceHolder>\" ; } } now ( ) { return org . csstudio . data . values . TimestampFactory . fromMillisecs ( new java . util . Date ( ) . getTime ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( e )"}
{"focal": "get ( org . locationtech . geowave . analytic . param . ParameterEnum ) { return getPropertyValue ( propertyName ) ; }", "testMethod": "testIngestAndQueryGeneralGpx ( ) { org . locationtech . geowave . test . TestUtils . deleteAll ( dataStorePluginOptions ) ; org . locationtech . geowave . test . mapreduce . MapReduceTestUtils . testMapReduceIngest ( dataStorePluginOptions , DimensionalityType . SPATIAL , org . locationtech . geowave . test . mapreduce . BasicMapReduceIT . GENERAL_GPX_INPUT_GPX_DIR ) ; final java . io . File gpxInputDir = new java . io . File ( org . locationtech . geowave . test . mapreduce . BasicMapReduceIT . GENERAL_GPX_INPUT_GPX_DIR ) ; final java . io . File expectedResultsDir = new java . io . File ( org . locationtech . geowave . test . mapreduce . BasicMapReduceIT . GENERAL_GPX_EXPECTED_RESULTS_DIR ) ; final java . util . List < java . net . URL > expectedResultsResources = new java . util . ArrayList ( ) ; final java . util . Map < java . lang . String , java . net . URL > baseNameToExpectedResultURL = new java . util . HashMap ( ) ; for ( final java . io . File file : expectedResultsDir . listFiles ( new java . io . FileFilter ( ) { @ org . locationtech . geowave . test . mapreduce . Override public boolean accept ( final java . io . File pathname ) { final java . util . Map < java . lang . String , java . lang . Object > map = new java . util . HashMap ( ) ; try { map . put ( \"url\" , pathname . toURI ( ) . toURL ( ) ) ; return ( org . geotools . data . DataStoreFinder . getDataStore ( map ) ) != null ; } catch ( final java . io . IOException e ) { org . locationtech . geowave . test . mapreduce . BasicMapReduceIT . LOGGER . warn ( \"Cannot<sp>read<sp>file<sp>as<sp>GeoTools<sp>data<sp>store\" , e ) ; } return false ; } } ) ) { baseNameToExpectedResultURL . put ( org . apache . commons . io . FilenameUtils . getBaseName ( file . getName ( ) ) . replaceAll ( \"_filtered\" , \"\" ) , file . toURI ( ) . toURL ( ) ) ; } for ( final java . lang . String filename : gpxInputDir . list ( new java . io . FilenameFilter ( ) { @ org . locationtech . geowave . test . mapreduce . Override public boolean accept ( final java . io . File dir , final java . lang . String name ) { return org . apache . commons . io . FilenameUtils . isExtension ( name , new org . locationtech . geowave . format . gpx . GpxIngestPlugin ( ) . getFileExtensionFilters ( ) ) ; } } ) ) { final java . net . URL url = baseNameToExpectedResultURL . get ( org . apache . commons . io . FilenameUtils . getBaseName ( filename ) ) ; \"<AssertPlaceHolder>\" ; expectedResultsResources . add ( url ) ; } final org . locationtech . geowave . test . TestUtils . ExpectedResults expectedResults = org . locationtech . geowave . test . TestUtils . getExpectedResults ( expectedResultsResources . toArray ( new java . net . URL [ expectedResultsResources . size ( ) ] ) ) ; runTestJob ( expectedResults , org . locationtech . geowave . test . TestUtils . resourceToQuery ( new java . io . File ( org . locationtech . geowave . test . mapreduce . BasicMapReduceIT . GENERAL_GPX_FILTER_FILE ) . toURI ( ) . toURL ( ) ) , null , null ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( url )", "total": "testIngestAndQueryGeneralGpx ( ) { org . locationtech . geowave . test . TestUtils . deleteAll ( dataStorePluginOptions ) ; org . locationtech . geowave . test . mapreduce . MapReduceTestUtils . testMapReduceIngest ( dataStorePluginOptions , DimensionalityType . SPATIAL , org . locationtech . geowave . test . mapreduce . BasicMapReduceIT . GENERAL_GPX_INPUT_GPX_DIR ) ; final java . io . File gpxInputDir = new java . io . File ( org . locationtech . geowave . test . mapreduce . BasicMapReduceIT . GENERAL_GPX_INPUT_GPX_DIR ) ; final java . io . File expectedResultsDir = new java . io . File ( org . locationtech . geowave . test . mapreduce . BasicMapReduceIT . GENERAL_GPX_EXPECTED_RESULTS_DIR ) ; final java . util . List < java . net . URL > expectedResultsResources = new java . util . ArrayList ( ) ; final java . util . Map < java . lang . String , java . net . URL > baseNameToExpectedResultURL = new java . util . HashMap ( ) ; for ( final java . io . File file : expectedResultsDir . listFiles ( new java . io . FileFilter ( ) { @ org . locationtech . geowave . test . mapreduce . Override public boolean accept ( final java . io . File pathname ) { final java . util . Map < java . lang . String , java . lang . Object > map = new java . util . HashMap ( ) ; try { map . put ( \"url\" , pathname . toURI ( ) . toURL ( ) ) ; return ( org . geotools . data . DataStoreFinder . getDataStore ( map ) ) != null ; } catch ( final java . io . IOException e ) { org . locationtech . geowave . test . mapreduce . BasicMapReduceIT . LOGGER . warn ( \"Cannot<sp>read<sp>file<sp>as<sp>GeoTools<sp>data<sp>store\" , e ) ; } return false ; } } ) ) { baseNameToExpectedResultURL . put ( org . apache . commons . io . FilenameUtils . getBaseName ( file . getName ( ) ) . replaceAll ( \"_filtered\" , \"\" ) , file . toURI ( ) . toURL ( ) ) ; } for ( final java . lang . String filename : gpxInputDir . list ( new java . io . FilenameFilter ( ) { @ org . locationtech . geowave . test . mapreduce . Override public boolean accept ( final java . io . File dir , final java . lang . String name ) { return org . apache . commons . io . FilenameUtils . isExtension ( name , new org . locationtech . geowave . format . gpx . GpxIngestPlugin ( ) . getFileExtensionFilters ( ) ) ; } } ) ) { final java . net . URL url = baseNameToExpectedResultURL . get ( org . apache . commons . io . FilenameUtils . getBaseName ( filename ) ) ; \"<AssertPlaceHolder>\" ; expectedResultsResources . add ( url ) ; } final org . locationtech . geowave . test . TestUtils . ExpectedResults expectedResults = org . locationtech . geowave . test . TestUtils . getExpectedResults ( expectedResultsResources . toArray ( new java . net . URL [ expectedResultsResources . size ( ) ] ) ) ; runTestJob ( expectedResults , org . locationtech . geowave . test . TestUtils . resourceToQuery ( new java . io . File ( org . locationtech . geowave . test . mapreduce . BasicMapReduceIT . GENERAL_GPX_FILTER_FILE ) . toURI ( ) . toURL ( ) ) , null , null ) ; } get ( org . locationtech . geowave . analytic . param . ParameterEnum ) { return getPropertyValue ( propertyName ) ; }", "answer": "org . junit . Assert . assertNotNull ( url )"}
{"focal": "childNodeDeleted ( java . lang . String , org . apache . jackrabbit . oak . spi . state . NodeState ) { org . junit . Assert . assertTrue ( ( before instanceof org . apache . jackrabbit . oak . composite . CompositeNodeState ) ) ; org . junit . Assert . assertEquals ( name , \"deleted\" ) ; modifiedNodes . add ( name ) ; return true ; }", "testMethod": "dispatch ( ) { org . apache . jackrabbit . oak . plugins . document . DocumentNodeStore ns = builderProvider . newBuilder ( ) . getNodeStore ( ) ; org . apache . jackrabbit . oak . plugins . document . RevisionVector from = ns . getHeadRevision ( ) ; org . apache . jackrabbit . oak . spi . state . NodeBuilder builder = ns . getRoot ( ) . builder ( ) ; builder . child ( \"test\" ) ; org . apache . jackrabbit . oak . plugins . document . DocumentNodeStoreTest . merge ( ns , builder ) ; org . apache . jackrabbit . oak . plugins . document . RevisionVector to = ns . getHeadRevision ( ) ; org . apache . jackrabbit . oak . plugins . document . DiffCache . Entry entry = ns . getDiffCache ( ) . newEntry ( from , to , true ) ; entry . append ( Path . ROOT , \"-\\\"foo\\\"\" ) ; entry . done ( ) ; ns . compare ( ns . getRoot ( ) , ns . getRoot ( from ) , new org . apache . jackrabbit . oak . spi . state . DefaultNodeStateDiff ( ) { @ org . apache . jackrabbit . oak . plugins . document . Override public boolean childNodeDeleted ( java . lang . String name , org . apache . jackrabbit . oak . spi . state . NodeState before ) { \"<AssertPlaceHolder>\" ; return true ; } } ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( before )", "total": "dispatch ( ) { org . apache . jackrabbit . oak . plugins . document . DocumentNodeStore ns = builderProvider . newBuilder ( ) . getNodeStore ( ) ; org . apache . jackrabbit . oak . plugins . document . RevisionVector from = ns . getHeadRevision ( ) ; org . apache . jackrabbit . oak . spi . state . NodeBuilder builder = ns . getRoot ( ) . builder ( ) ; builder . child ( \"test\" ) ; org . apache . jackrabbit . oak . plugins . document . DocumentNodeStoreTest . merge ( ns , builder ) ; org . apache . jackrabbit . oak . plugins . document . RevisionVector to = ns . getHeadRevision ( ) ; org . apache . jackrabbit . oak . plugins . document . DiffCache . Entry entry = ns . getDiffCache ( ) . newEntry ( from , to , true ) ; entry . append ( Path . ROOT , \"-\\\"foo\\\"\" ) ; entry . done ( ) ; ns . compare ( ns . getRoot ( ) , ns . getRoot ( from ) , new org . apache . jackrabbit . oak . spi . state . DefaultNodeStateDiff ( ) { @ org . apache . jackrabbit . oak . plugins . document . Override public boolean childNodeDeleted ( java . lang . String name , org . apache . jackrabbit . oak . spi . state . NodeState before ) { \"<AssertPlaceHolder>\" ; return true ; } } ) ; } childNodeDeleted ( java . lang . String , org . apache . jackrabbit . oak . spi . state . NodeState ) { org . junit . Assert . assertTrue ( ( before instanceof org . apache . jackrabbit . oak . composite . CompositeNodeState ) ) ; org . junit . Assert . assertEquals ( name , \"deleted\" ) ; modifiedNodes . add ( name ) ; return true ; }", "answer": "org . junit . Assert . assertNotNull ( before )"}
{"focal": "countPolicies ( javax . servlet . http . HttpServletRequest ) { if ( org . apache . ranger . rest . ServiceREST . LOG . isDebugEnabled ( ) ) { org . apache . ranger . rest . ServiceREST . LOG . debug ( \"==><sp>ServiceREST.countPolicies():\" ) ; } java . lang . Long ret = null ; org . apache . ranger . plugin . util . RangerPerfTracer perf = null ; try { if ( org . apache . ranger . plugin . util . RangerPerfTracer . isPerfTraceEnabled ( org . apache . ranger . rest . ServiceREST . PERF_LOG ) ) { perf = org . apache . ranger . plugin . util . RangerPerfTracer . getPerfTracer ( org . apache . ranger . rest . ServiceREST . PERF_LOG , \"ServiceREST.countPolicies()\" ) ; } java . util . List < org . apache . ranger . plugin . model . RangerPolicy > policies = getPolicies ( request ) . getPolicies ( ) ; policies = applyAdminAccessFilter ( policies ) ; ret = java . lang . Long . valueOf ( ( policies == null ? 0 : policies . size ( ) ) ) ; } catch ( javax . ws . rs . WebApplicationException excp ) { throw excp ; } catch ( java . lang . Throwable excp ) { org . apache . ranger . rest . ServiceREST . LOG . error ( \"countPolicies()<sp>failed\" , excp ) ; throw restErrorUtil . createRESTException ( excp . getMessage ( ) ) ; } finally { org . apache . ranger . plugin . util . RangerPerfTracer . log ( perf ) ; } if ( org . apache . ranger . rest . ServiceREST . LOG . isDebugEnabled ( ) ) { org . apache . ranger . rest . ServiceREST . LOG . debug ( ( \"<==<sp>ServiceREST.countPolicies():<sp>\" + ret ) ) ; } return ret ; }", "testMethod": "test21countPolicies ( ) { javax . servlet . http . HttpServletRequest request = org . mockito . Mockito . mock ( javax . servlet . http . HttpServletRequest . class ) ; org . apache . ranger . plugin . util . SearchFilter filter = new org . apache . ranger . plugin . util . SearchFilter ( ) ; filter . setParam ( SearchFilter . POLICY_NAME , \"policyName\" ) ; filter . setParam ( SearchFilter . SERVICE_NAME , \"serviceName\" ) ; org . mockito . Mockito . when ( searchUtil . getSearchFilter ( request , policyService . sortFields ) ) . thenReturn ( filter ) ; java . lang . Long data = serviceREST . countPolicies ( request ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( searchUtil ) . getSearchFilter ( request , policyService . sortFields ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( data )", "total": "test21countPolicies ( ) { javax . servlet . http . HttpServletRequest request = org . mockito . Mockito . mock ( javax . servlet . http . HttpServletRequest . class ) ; org . apache . ranger . plugin . util . SearchFilter filter = new org . apache . ranger . plugin . util . SearchFilter ( ) ; filter . setParam ( SearchFilter . POLICY_NAME , \"policyName\" ) ; filter . setParam ( SearchFilter . SERVICE_NAME , \"serviceName\" ) ; org . mockito . Mockito . when ( searchUtil . getSearchFilter ( request , policyService . sortFields ) ) . thenReturn ( filter ) ; java . lang . Long data = serviceREST . countPolicies ( request ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( searchUtil ) . getSearchFilter ( request , policyService . sortFields ) ; } countPolicies ( javax . servlet . http . HttpServletRequest ) { if ( org . apache . ranger . rest . ServiceREST . LOG . isDebugEnabled ( ) ) { org . apache . ranger . rest . ServiceREST . LOG . debug ( \"==><sp>ServiceREST.countPolicies():\" ) ; } java . lang . Long ret = null ; org . apache . ranger . plugin . util . RangerPerfTracer perf = null ; try { if ( org . apache . ranger . plugin . util . RangerPerfTracer . isPerfTraceEnabled ( org . apache . ranger . rest . ServiceREST . PERF_LOG ) ) { perf = org . apache . ranger . plugin . util . RangerPerfTracer . getPerfTracer ( org . apache . ranger . rest . ServiceREST . PERF_LOG , \"ServiceREST.countPolicies()\" ) ; } java . util . List < org . apache . ranger . plugin . model . RangerPolicy > policies = getPolicies ( request ) . getPolicies ( ) ; policies = applyAdminAccessFilter ( policies ) ; ret = java . lang . Long . valueOf ( ( policies == null ? 0 : policies . size ( ) ) ) ; } catch ( javax . ws . rs . WebApplicationException excp ) { throw excp ; } catch ( java . lang . Throwable excp ) { org . apache . ranger . rest . ServiceREST . LOG . error ( \"countPolicies()<sp>failed\" , excp ) ; throw restErrorUtil . createRESTException ( excp . getMessage ( ) ) ; } finally { org . apache . ranger . plugin . util . RangerPerfTracer . log ( perf ) ; } if ( org . apache . ranger . rest . ServiceREST . LOG . isDebugEnabled ( ) ) { org . apache . ranger . rest . ServiceREST . LOG . debug ( ( \"<==<sp>ServiceREST.countPolicies():<sp>\" + ret ) ) ; } return ret ; }", "answer": "org . junit . Assert . assertNotNull ( data )"}
{"focal": "effectClasses ( ) { return new java . util . Vector < java . lang . String > ( marytts . server . MaryProperties . getList ( \"audioeffects.classes.list\" ) ) ; }", "testMethod": "hasEffects ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( marytts . server . MaryProperties . effectClasses ( ) )", "total": "hasEffects ( ) { \"<AssertPlaceHolder>\" ; } effectClasses ( ) { return new java . util . Vector < java . lang . String > ( marytts . server . MaryProperties . getList ( \"audioeffects.classes.list\" ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( marytts . server . MaryProperties . effectClasses ( ) )"}
{"focal": "setCertificateVerifier ( eu . europa . esig . dss . validation . CertificateVerifier ) { this . certificateVerifier = certificateVerifier ; }", "testMethod": "testFile1 ( ) { eu . europa . esig . dss . DSSDocument dssDocument = new eu . europa . esig . dss . FileDocument ( eu . europa . esig . dss . cades . validation . CAdESWithSpecialCharInFilenameTest . FILE_TO_TEST ) ; eu . europa . esig . dss . validation . SignedDocumentValidator validator = eu . europa . esig . dss . validation . SignedDocumentValidator . fromDocument ( dssDocument ) ; validator . setCertificateVerifier ( new eu . europa . esig . dss . validation . CommonCertificateVerifier ( ) ) ; eu . europa . esig . dss . validation . reports . Reports reports = validator . validateDocument ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( reports )", "total": "testFile1 ( ) { eu . europa . esig . dss . DSSDocument dssDocument = new eu . europa . esig . dss . FileDocument ( eu . europa . esig . dss . cades . validation . CAdESWithSpecialCharInFilenameTest . FILE_TO_TEST ) ; eu . europa . esig . dss . validation . SignedDocumentValidator validator = eu . europa . esig . dss . validation . SignedDocumentValidator . fromDocument ( dssDocument ) ; validator . setCertificateVerifier ( new eu . europa . esig . dss . validation . CommonCertificateVerifier ( ) ) ; eu . europa . esig . dss . validation . reports . Reports reports = validator . validateDocument ( ) ; \"<AssertPlaceHolder>\" ; } setCertificateVerifier ( eu . europa . esig . dss . validation . CertificateVerifier ) { this . certificateVerifier = certificateVerifier ; }", "answer": "org . junit . Assert . assertNotNull ( reports )"}
{"focal": "run ( java . lang . String , int , java . lang . String [ ] ) { java . lang . ClassLoader tcl = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) ; java . lang . Thread . currentThread ( ) . setContextClassLoader ( org . nuxeo . connect . tools . report . ReportComponent . Management . class . getClassLoader ( ) ) ; try ( java . net . Socket sock = new java . net . Socket ( host , port ) ; java . io . OutputStream sink = sock . getOutputStream ( ) ) { service . run ( sink , new java . util . HashSet ( java . util . Arrays . asList ( names ) ) ) ; } finally { java . lang . Thread . currentThread ( ) . setContextClassLoader ( tcl ) ; } }", "testMethod": "testGroupEntries ( ) { try ( org . nuxeo . ecm . automation . OperationContext ctx = new org . nuxeo . ecm . automation . OperationContext ( session ) ) { java . util . Map < java . lang . String , java . lang . String > params = new java . util . HashMap ( ) ; params . put ( \"searchType\" , \"displayLabel\" 3 ) ; params . put ( \"prefixed_id\" 0 , \"prefixed_id\" 1 ) ; org . nuxeo . ecm . core . api . Blob result = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SuggestUserEntries . ID , params ) ) ) ; \"<AssertPlaceHolder>\" ; org . nuxeo . ecm . core . io . marshallers . json . JsonAssert json = org . nuxeo . ecm . core . io . marshallers . json . JsonAssert . on ( result . getString ( ) ) . isArray ( ) . length ( 1 ) ; org . nuxeo . ecm . core . io . marshallers . json . JsonAssert entry = json . get ( 0 ) ; entry . has ( \"type\" ) . isEquals ( \"displayLabel\" 3 ) ; entry . has ( \"prefixed_id\" 7 ) . isEquals ( \"prefixed_id\" 8 ) ; entry . has ( \"prefixed_id\" ) . isEquals ( \"group:administrators\" ) ; entry . has ( \"groupname\" ) . isEquals ( \"prefixed_id\" 8 ) ; entry . has ( \"prefixed_id\" 5 ) . isEquals ( \"prefixed_id\" 6 ) ; entry . has ( \"prefixed_id\" 9 ) . isEquals ( \"prefixed_id\" 2 ) ; entry . has ( \"displayLabel\" 1 ) . isNull ( ) ; entry . has ( \"displayLabel\" 2 ) . isTrue ( ) ; entry . has ( \"displayLabel\" ) . isEquals ( \"prefixed_id\" 6 ) ; entry . has ( \"members\" ) . isArray ( ) . length ( 0 ) ; entry . has ( \"parentGroups\" ) . isArray ( ) . length ( 0 ) ; entry . has ( \"prefixed_id\" 4 ) . isArray ( ) . length ( 0 ) ; params . put ( \"prefixed_id\" 0 , \"foo\" ) ; result = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SuggestUserEntries . ID , params ) ) ) ; json = org . nuxeo . ecm . core . io . marshallers . json . JsonAssert . on ( result . getString ( ) ) . length ( 0 ) ; params . put ( \"prefixed_id\" 0 , \"m\" ) ; result = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SuggestUserEntries . ID , params ) ) ) ; json = org . nuxeo . ecm . core . io . marshallers . json . JsonAssert . on ( result . getString ( ) ) . length ( 2 ) ; json . childrenContains ( \"prefixed_id\" 7 , \"members\" , \"displayLabel\" 4 ) ; params . put ( \"prefixed_id\" 0 , \"displayLabel\" 0 ) ; result = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SuggestUserEntries . ID , params ) ) ) ; json = org . nuxeo . ecm . core . io . marshallers . json . JsonAssert . on ( result . getString ( ) ) . length ( 1 ) ; json . childrenContains ( \"prefixed_id\" 7 , \"members\" ) ; params . put ( \"prefixed_id\" 0 , \"prefixed_id\" 3 ) ; result = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SuggestUserEntries . ID , params ) ) ) ; json = org . nuxeo . ecm . core . io . marshallers . json . JsonAssert . on ( result . getString ( ) ) . length ( 1 ) ; json . childrenContains ( \"prefixed_id\" 7 , \"members\" ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGroupEntries ( ) { try ( org . nuxeo . ecm . automation . OperationContext ctx = new org . nuxeo . ecm . automation . OperationContext ( session ) ) { java . util . Map < java . lang . String , java . lang . String > params = new java . util . HashMap ( ) ; params . put ( \"searchType\" , \"displayLabel\" 3 ) ; params . put ( \"prefixed_id\" 0 , \"prefixed_id\" 1 ) ; org . nuxeo . ecm . core . api . Blob result = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SuggestUserEntries . ID , params ) ) ) ; \"<AssertPlaceHolder>\" ; org . nuxeo . ecm . core . io . marshallers . json . JsonAssert json = org . nuxeo . ecm . core . io . marshallers . json . JsonAssert . on ( result . getString ( ) ) . isArray ( ) . length ( 1 ) ; org . nuxeo . ecm . core . io . marshallers . json . JsonAssert entry = json . get ( 0 ) ; entry . has ( \"type\" ) . isEquals ( \"displayLabel\" 3 ) ; entry . has ( \"prefixed_id\" 7 ) . isEquals ( \"prefixed_id\" 8 ) ; entry . has ( \"prefixed_id\" ) . isEquals ( \"group:administrators\" ) ; entry . has ( \"groupname\" ) . isEquals ( \"prefixed_id\" 8 ) ; entry . has ( \"prefixed_id\" 5 ) . isEquals ( \"prefixed_id\" 6 ) ; entry . has ( \"prefixed_id\" 9 ) . isEquals ( \"prefixed_id\" 2 ) ; entry . has ( \"displayLabel\" 1 ) . isNull ( ) ; entry . has ( \"displayLabel\" 2 ) . isTrue ( ) ; entry . has ( \"displayLabel\" ) . isEquals ( \"prefixed_id\" 6 ) ; entry . has ( \"members\" ) . isArray ( ) . length ( 0 ) ; entry . has ( \"parentGroups\" ) . isArray ( ) . length ( 0 ) ; entry . has ( \"prefixed_id\" 4 ) . isArray ( ) . length ( 0 ) ; params . put ( \"prefixed_id\" 0 , \"foo\" ) ; result = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SuggestUserEntries . ID , params ) ) ) ; json = org . nuxeo . ecm . core . io . marshallers . json . JsonAssert . on ( result . getString ( ) ) . length ( 0 ) ; params . put ( \"prefixed_id\" 0 , \"m\" ) ; result = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SuggestUserEntries . ID , params ) ) ) ; json = org . nuxeo . ecm . core . io . marshallers . json . JsonAssert . on ( result . getString ( ) ) . length ( 2 ) ; json . childrenContains ( \"prefixed_id\" 7 , \"members\" , \"displayLabel\" 4 ) ; params . put ( \"prefixed_id\" 0 , \"displayLabel\" 0 ) ; result = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SuggestUserEntries . ID , params ) ) ) ; json = org . nuxeo . ecm . core . io . marshallers . json . JsonAssert . on ( result . getString ( ) ) . length ( 1 ) ; json . childrenContains ( \"prefixed_id\" 7 , \"members\" ) ; params . put ( \"prefixed_id\" 0 , \"prefixed_id\" 3 ) ; result = ( ( org . nuxeo . ecm . core . api . Blob ) ( automationService . run ( ctx , SuggestUserEntries . ID , params ) ) ) ; json = org . nuxeo . ecm . core . io . marshallers . json . JsonAssert . on ( result . getString ( ) ) . length ( 1 ) ; json . childrenContains ( \"prefixed_id\" 7 , \"members\" ) ; } } run ( java . lang . String , int , java . lang . String [ ] ) { java . lang . ClassLoader tcl = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) ; java . lang . Thread . currentThread ( ) . setContextClassLoader ( org . nuxeo . connect . tools . report . ReportComponent . Management . class . getClassLoader ( ) ) ; try ( java . net . Socket sock = new java . net . Socket ( host , port ) ; java . io . OutputStream sink = sock . getOutputStream ( ) ) { service . run ( sink , new java . util . HashSet ( java . util . Arrays . asList ( names ) ) ) ; } finally { java . lang . Thread . currentThread ( ) . setContextClassLoader ( tcl ) ; } }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getRandomInt ( ) { return ( java . lang . Math . random ( ) ) + ( index ) ; }", "testMethod": "testRandomInt ( ) { com . sample . two . SampleClass object = new com . sample . two . SampleClass ( ) ; double d = object . getRandomInt ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( d )", "total": "testRandomInt ( ) { com . sample . two . SampleClass object = new com . sample . two . SampleClass ( ) ; double d = object . getRandomInt ( ) ; \"<AssertPlaceHolder>\" ; } getRandomInt ( ) { return ( java . lang . Math . random ( ) ) + ( index ) ; }", "answer": "org . junit . Assert . assertNotNull ( d )"}
{"focal": "getBrpPersoonslijst ( ) { return asBrpPersoonslijst ( leesUitBrpAntwoordType . getBrpPl ( ) ) ; }", "testMethod": "testBrpPersoonslijstGetter ( ) { final java . lang . String berichtOrigineel = org . apache . commons . io . IOUtils . toString ( nl . moderniseringgba . isc . esb . message . brp . impl . NotificatieVerzoekBerichtTest . class . getResourceAsStream ( \"overlijdenVerzoekBericht.xml\" ) ) ; final nl . moderniseringgba . isc . esb . message . brp . impl . OverlijdenVerzoekBericht overlijdenVerzoekBericht = ( ( nl . moderniseringgba . isc . esb . message . brp . impl . OverlijdenVerzoekBericht ) ( factory . getBericht ( berichtOrigineel ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( overlijdenVerzoekBericht . getBrpPersoonslijst ( ) )", "total": "testBrpPersoonslijstGetter ( ) { final java . lang . String berichtOrigineel = org . apache . commons . io . IOUtils . toString ( nl . moderniseringgba . isc . esb . message . brp . impl . NotificatieVerzoekBerichtTest . class . getResourceAsStream ( \"overlijdenVerzoekBericht.xml\" ) ) ; final nl . moderniseringgba . isc . esb . message . brp . impl . OverlijdenVerzoekBericht overlijdenVerzoekBericht = ( ( nl . moderniseringgba . isc . esb . message . brp . impl . OverlijdenVerzoekBericht ) ( factory . getBericht ( berichtOrigineel ) ) ) ; \"<AssertPlaceHolder>\" ; } getBrpPersoonslijst ( ) { return asBrpPersoonslijst ( leesUitBrpAntwoordType . getBrpPl ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( overlijdenVerzoekBericht . getBrpPersoonslijst ( ) )"}
{"focal": "get ( com . tinkerpop . blueprints . impls . orient . OrientBaseGraph ) { javax . script . ScriptEngine engine = super . get ( ) ; if ( engine != null ) { final com . tinkerpop . blueprints . impls . orient . OrientBaseGraph currGraph = ( ( com . tinkerpop . blueprints . impls . orient . OrientBaseGraph ) ( engine . getBindings ( ScriptContext . ENGINE_SCOPE ) . get ( \"g\" ) ) ) ; if ( ( currGraph == iGraph ) || ( ( currGraph != null ) && ( currGraph . getRawGraph ( ) . getURL ( ) . equals ( iGraph . getRawGraph ( ) . getURL ( ) ) ) ) ) { engine . getBindings ( ScriptContext . ENGINE_SCOPE ) . put ( \"g\" , iGraph ) ; return engine ; } } engine = new com . tinkerpop . gremlin . groovy . jsr223 . GremlinGroovyScriptEngine ( ) ; engine . getBindings ( ScriptContext . ENGINE_SCOPE ) . put ( \"g\" , iGraph ) ; set ( engine ) ; return engine ; }", "testMethod": "testTwoKeyMap ( ) { final java . util . Map < com . orientechnologies . common . util . OMultiKey , java . lang . Object > multiKeyMap = new java . util . HashMap < com . orientechnologies . common . util . OMultiKey , java . lang . Object > ( ) ; final com . orientechnologies . common . util . OMultiKey multiKey = new com . orientechnologies . common . util . OMultiKey ( java . util . Arrays . asList ( new java . lang . String [ ] { \"a\" , \"b\" } ) ) ; multiKeyMap . put ( multiKey , new java . lang . Object ( ) ) ; final com . orientechnologies . common . util . OMultiKey anotherMultiKey = new com . orientechnologies . common . util . OMultiKey ( java . util . Arrays . asList ( new java . lang . String [ ] { \"a\" , \"b\" } ) ) ; final java . lang . Object mapResult = multiKeyMap . get ( anotherMultiKey ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( mapResult )", "total": "testTwoKeyMap ( ) { final java . util . Map < com . orientechnologies . common . util . OMultiKey , java . lang . Object > multiKeyMap = new java . util . HashMap < com . orientechnologies . common . util . OMultiKey , java . lang . Object > ( ) ; final com . orientechnologies . common . util . OMultiKey multiKey = new com . orientechnologies . common . util . OMultiKey ( java . util . Arrays . asList ( new java . lang . String [ ] { \"a\" , \"b\" } ) ) ; multiKeyMap . put ( multiKey , new java . lang . Object ( ) ) ; final com . orientechnologies . common . util . OMultiKey anotherMultiKey = new com . orientechnologies . common . util . OMultiKey ( java . util . Arrays . asList ( new java . lang . String [ ] { \"a\" , \"b\" } ) ) ; final java . lang . Object mapResult = multiKeyMap . get ( anotherMultiKey ) ; \"<AssertPlaceHolder>\" ; } get ( com . tinkerpop . blueprints . impls . orient . OrientBaseGraph ) { javax . script . ScriptEngine engine = super . get ( ) ; if ( engine != null ) { final com . tinkerpop . blueprints . impls . orient . OrientBaseGraph currGraph = ( ( com . tinkerpop . blueprints . impls . orient . OrientBaseGraph ) ( engine . getBindings ( ScriptContext . ENGINE_SCOPE ) . get ( \"g\" ) ) ) ; if ( ( currGraph == iGraph ) || ( ( currGraph != null ) && ( currGraph . getRawGraph ( ) . getURL ( ) . equals ( iGraph . getRawGraph ( ) . getURL ( ) ) ) ) ) { engine . getBindings ( ScriptContext . ENGINE_SCOPE ) . put ( \"g\" , iGraph ) ; return engine ; } } engine = new com . tinkerpop . gremlin . groovy . jsr223 . GremlinGroovyScriptEngine ( ) ; engine . getBindings ( ScriptContext . ENGINE_SCOPE ) . put ( \"g\" , iGraph ) ; set ( engine ) ; return engine ; }", "answer": "org . junit . Assert . assertNotNull ( mapResult )"}
{"focal": "createItem ( java . lang . String , java . lang . String , boolean , java . lang . String ) { return new com . liferay . portal . upload . LiferayFileItem ( fieldName , contentType , formField , fileName , _sizeThreshold , _tempDir ) ; }", "testMethod": "testGetContentTypeFromRealFile ( ) { java . io . File file = com . liferay . portal . kernel . test . util . DependenciesTestUtil . getDependencyAsFile ( getClass ( ) , \"LiferayFileItem.txt\" ) ; java . lang . String fieldName = com . liferay . portal . kernel . test . util . RandomTestUtil . randomString ( ) ; java . lang . String contentType = java . nio . file . Files . probeContentType ( file . toPath ( ) ) ; java . lang . String fileName = file . getName ( ) ; org . apache . commons . fileupload . FileItem fileItem = _liferayFileItemFactory . createItem ( fieldName , contentType , false , fileName ) ; \"<AssertPlaceHolder>\" ; fileItem . getContentType ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( fileItem )", "total": "testGetContentTypeFromRealFile ( ) { java . io . File file = com . liferay . portal . kernel . test . util . DependenciesTestUtil . getDependencyAsFile ( getClass ( ) , \"LiferayFileItem.txt\" ) ; java . lang . String fieldName = com . liferay . portal . kernel . test . util . RandomTestUtil . randomString ( ) ; java . lang . String contentType = java . nio . file . Files . probeContentType ( file . toPath ( ) ) ; java . lang . String fileName = file . getName ( ) ; org . apache . commons . fileupload . FileItem fileItem = _liferayFileItemFactory . createItem ( fieldName , contentType , false , fileName ) ; \"<AssertPlaceHolder>\" ; fileItem . getContentType ( ) ; } createItem ( java . lang . String , java . lang . String , boolean , java . lang . String ) { return new com . liferay . portal . upload . LiferayFileItem ( fieldName , contentType , formField , fileName , _sizeThreshold , _tempDir ) ; }", "answer": "org . junit . Assert . assertNotNull ( fileItem )"}
{"focal": "browse ( java . lang . String , org . fourthline . cling . support . model . BrowseFlag , long , long , org . fourthline . cling . model . profile . RemoteClientInfo ) { net . holmes . core . business . media . model . MediaNode browseNode = mediaManager . getNode ( objectID ) . orElseThrow ( ( ) -> new < net . holmes . core . service . upnp . directory . NO_SUCH_OBJECT > org . fourthline . cling . support . contentdirectory . ContentDirectoryException ( objectID ) ) ; net . holmes . core . service . upnp . directory . List < java . lang . String > availableMimeTypes = getAvailableMimeType ( remoteClientInfo ) ; net . holmes . core . service . upnp . directory . DirectoryBrowseResult result ; if ( ( DIRECT_CHILDREN ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( firstResult , maxResults ) ; net . holmes . core . service . upnp . directory . Collection < net . holmes . core . business . media . model . MediaNode > searchResult = mediaManager . searchChildNodes ( new net . holmes . core . business . media . MediaSearchRequest ( browseNode , availableMimeTypes ) ) ; for ( net . holmes . core . business . media . model . MediaNode childNode : searchResult ) { addNode ( objectID , childNode , result , availableMimeTypes ) ; } } else if ( ( METADATA ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; addNode ( browseNode . getParentId ( ) , browseNode , result , availableMimeTypes ) ; } else { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; } return result . buildBrowseResult ( new org . fourthline . cling . support . contentdirectory . DIDLParser ( ) ) ; }", "testMethod": "testBrowseUnknownNode ( ) { net . holmes . core . business . configuration . ConfigurationManager configurationManager = createMock ( net . holmes . core . business . configuration . ConfigurationManager . class ) ; net . holmes . core . business . media . MediaManager mediaManager = createMock ( net . holmes . core . business . media . MediaManager . class ) ; net . holmes . core . business . streaming . StreamingManager streamingManager = createMock ( net . holmes . core . business . streaming . StreamingManager . class ) ; org . fourthline . cling . model . profile . RemoteClientInfo remoteClientInfo = createMock ( org . fourthline . cling . model . profile . RemoteClientInfo . class ) ; net . holmes . core . service . upnp . directory . ContentDirectoryService contentDirectoryService = new net . holmes . core . service . upnp . directory . ContentDirectoryService ( ) ; contentDirectoryService . setConfigurationManager ( configurationManager ) ; contentDirectoryService . setMediaManager ( mediaManager ) ; contentDirectoryService . setStreamingManager ( streamingManager ) ; expect ( mediaManager . getNode ( eq ( \"0\" ) ) ) . andReturn ( java . util . Optional . empty ( ) ) ; replay ( mediaManager , streamingManager , remoteClientInfo , configurationManager ) ; try { org . fourthline . cling . support . model . BrowseResult result = contentDirectoryService . browse ( \"0\" , BrowseFlag . METADATA , 0 , 100 , remoteClientInfo ) ; \"<AssertPlaceHolder>\" ; } finally { verify ( mediaManager , streamingManager , remoteClientInfo , configurationManager ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testBrowseUnknownNode ( ) { net . holmes . core . business . configuration . ConfigurationManager configurationManager = createMock ( net . holmes . core . business . configuration . ConfigurationManager . class ) ; net . holmes . core . business . media . MediaManager mediaManager = createMock ( net . holmes . core . business . media . MediaManager . class ) ; net . holmes . core . business . streaming . StreamingManager streamingManager = createMock ( net . holmes . core . business . streaming . StreamingManager . class ) ; org . fourthline . cling . model . profile . RemoteClientInfo remoteClientInfo = createMock ( org . fourthline . cling . model . profile . RemoteClientInfo . class ) ; net . holmes . core . service . upnp . directory . ContentDirectoryService contentDirectoryService = new net . holmes . core . service . upnp . directory . ContentDirectoryService ( ) ; contentDirectoryService . setConfigurationManager ( configurationManager ) ; contentDirectoryService . setMediaManager ( mediaManager ) ; contentDirectoryService . setStreamingManager ( streamingManager ) ; expect ( mediaManager . getNode ( eq ( \"0\" ) ) ) . andReturn ( java . util . Optional . empty ( ) ) ; replay ( mediaManager , streamingManager , remoteClientInfo , configurationManager ) ; try { org . fourthline . cling . support . model . BrowseResult result = contentDirectoryService . browse ( \"0\" , BrowseFlag . METADATA , 0 , 100 , remoteClientInfo ) ; \"<AssertPlaceHolder>\" ; } finally { verify ( mediaManager , streamingManager , remoteClientInfo , configurationManager ) ; } } browse ( java . lang . String , org . fourthline . cling . support . model . BrowseFlag , long , long , org . fourthline . cling . model . profile . RemoteClientInfo ) { net . holmes . core . business . media . model . MediaNode browseNode = mediaManager . getNode ( objectID ) . orElseThrow ( ( ) -> new < net . holmes . core . service . upnp . directory . NO_SUCH_OBJECT > org . fourthline . cling . support . contentdirectory . ContentDirectoryException ( objectID ) ) ; net . holmes . core . service . upnp . directory . List < java . lang . String > availableMimeTypes = getAvailableMimeType ( remoteClientInfo ) ; net . holmes . core . service . upnp . directory . DirectoryBrowseResult result ; if ( ( DIRECT_CHILDREN ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( firstResult , maxResults ) ; net . holmes . core . service . upnp . directory . Collection < net . holmes . core . business . media . model . MediaNode > searchResult = mediaManager . searchChildNodes ( new net . holmes . core . business . media . MediaSearchRequest ( browseNode , availableMimeTypes ) ) ; for ( net . holmes . core . business . media . model . MediaNode childNode : searchResult ) { addNode ( objectID , childNode , result , availableMimeTypes ) ; } } else if ( ( METADATA ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; addNode ( browseNode . getParentId ( ) , browseNode , result , availableMimeTypes ) ; } else { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; } return result . buildBrowseResult ( new org . fourthline . cling . support . contentdirectory . DIDLParser ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "toString ( ) { return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( \"strict=\" + ( strictEviction ) ) + \",<sp>recordRefresh=\" ) + ( recordRefreshTime ) ) + \",<sp>disableStats=\" ) + ( disableStatistics ) ) + \",<sp>entryProcessor=\" ) + ( withEntryProcessor ) ) + \",<sp>wired=\" ) + ( withWiredCache ) ) + \",<sp>forwarding=\" ) + ( withForwardingAndAbstract ) ) + \",<sp>keep=\" ) + ( keepDataAfterExpired ) ) + \",<sp>expiry=\" ) + ( withExpiryAfterWrite ) ) + \",<sp>useObjectKey=\" ) + ( useObjectKey ) ; }", "testMethod": "testBigCacheTimingPutRemovePut ( ) { final int _CACHE_SIZE = 1000000 ; org . cache2k . Cache < java . lang . Integer , java . lang . Integer > c = org . cache2k . Cache2kBuilder . of ( Integer . class , Integer . class ) . entryCapacity ( _CACHE_SIZE ) . eternal ( true ) . build ( ) ; for ( int i = 0 ; i < _CACHE_SIZE ; i ++ ) { c . put ( i , i ) ; } for ( int i = 0 ; i < _CACHE_SIZE ; i ++ ) { c . remove ( i ) ; } for ( int i = 0 ; i < _CACHE_SIZE ; i ++ ) { c . put ( i , i ) ; } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( c . toString ( ) )", "total": "testBigCacheTimingPutRemovePut ( ) { final int _CACHE_SIZE = 1000000 ; org . cache2k . Cache < java . lang . Integer , java . lang . Integer > c = org . cache2k . Cache2kBuilder . of ( Integer . class , Integer . class ) . entryCapacity ( _CACHE_SIZE ) . eternal ( true ) . build ( ) ; for ( int i = 0 ; i < _CACHE_SIZE ; i ++ ) { c . put ( i , i ) ; } for ( int i = 0 ; i < _CACHE_SIZE ; i ++ ) { c . remove ( i ) ; } for ( int i = 0 ; i < _CACHE_SIZE ; i ++ ) { c . put ( i , i ) ; } \"<AssertPlaceHolder>\" ; } toString ( ) { return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( \"strict=\" + ( strictEviction ) ) + \",<sp>recordRefresh=\" ) + ( recordRefreshTime ) ) + \",<sp>disableStats=\" ) + ( disableStatistics ) ) + \",<sp>entryProcessor=\" ) + ( withEntryProcessor ) ) + \",<sp>wired=\" ) + ( withWiredCache ) ) + \",<sp>forwarding=\" ) + ( withForwardingAndAbstract ) ) + \",<sp>keep=\" ) + ( keepDataAfterExpired ) ) + \",<sp>expiry=\" ) + ( withExpiryAfterWrite ) ) + \",<sp>useObjectKey=\" ) + ( useObjectKey ) ; }", "answer": "org . junit . Assert . assertNotNull ( c . toString ( ) )"}
{"focal": "getAdapter ( org . eclipse . swt . widgets . DateTime ) { return dateTime . getAdapter ( org . eclipse . swt . internal . widgets . IDateTimeAdapter . class ) ; }", "testMethod": "testGetAdapter_succeedsForDisposedWidget ( ) { widget . dispose ( ) ; java . lang . Object adapter = widget . getAdapter ( org . eclipse . rap . rwt . internal . lifecycle . RemoteAdapter . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( adapter )", "total": "testGetAdapter_succeedsForDisposedWidget ( ) { widget . dispose ( ) ; java . lang . Object adapter = widget . getAdapter ( org . eclipse . rap . rwt . internal . lifecycle . RemoteAdapter . class ) ; \"<AssertPlaceHolder>\" ; } getAdapter ( org . eclipse . swt . widgets . DateTime ) { return dateTime . getAdapter ( org . eclipse . swt . internal . widgets . IDateTimeAdapter . class ) ; }", "answer": "org . junit . Assert . assertNotNull ( adapter )"}
{"focal": "getFilename ( ) { return filename ; }", "testMethod": "checkGuiResources ( ) { for ( org . geogebra . desktop . util . GuiResourcesD res : org . geogebra . desktop . util . GuiResourcesD . values ( ) ) { java . lang . String fn = res . getFilename ( ) ; if ( ! ( fn . startsWith ( \"/org\" ) ) ) { fn = \"/org/geogebra/desktop/\" + fn ; } java . net . URL url = org . geogebra . resources . ResourceAvailability . class . getResource ( fn ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( ( \"\" + res ) , url )", "total": "checkGuiResources ( ) { for ( org . geogebra . desktop . util . GuiResourcesD res : org . geogebra . desktop . util . GuiResourcesD . values ( ) ) { java . lang . String fn = res . getFilename ( ) ; if ( ! ( fn . startsWith ( \"/org\" ) ) ) { fn = \"/org/geogebra/desktop/\" + fn ; } java . net . URL url = org . geogebra . resources . ResourceAvailability . class . getResource ( fn ) ; \"<AssertPlaceHolder>\" ; } } getFilename ( ) { return filename ; }", "answer": "org . junit . Assert . assertNotNull ( ( \"\" + res ) , url )"}
{"focal": "doGenerate ( java . lang . Class ) { return new com . openpojo . random . RandomFactoryTest . RegisteredDummy ( randomString ) ; }", "testMethod": "shouldIgnoreTypeParameter ( ) { java . util . UUID generatedUUID = ( ( java . util . UUID ) ( com . openpojo . random . impl . UUIDRandomGenerator . getInstance ( ) . doGenerate ( this . getClass ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( generatedUUID )", "total": "shouldIgnoreTypeParameter ( ) { java . util . UUID generatedUUID = ( ( java . util . UUID ) ( com . openpojo . random . impl . UUIDRandomGenerator . getInstance ( ) . doGenerate ( this . getClass ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; } doGenerate ( java . lang . Class ) { return new com . openpojo . random . RandomFactoryTest . RegisteredDummy ( randomString ) ; }", "answer": "org . junit . Assert . assertNotNull ( generatedUUID )"}
{"focal": "resolve ( jcifs . CIFSContext , java . lang . String , java . lang . String , java . lang . String ) { return resolve ( tf , domain , root , path , 5 ) ; }", "testMethod": "testStandaloneDFSCache ( ) { jcifs . CIFSContext context = getContext ( ) ; context = withTestNTLMCredentials ( context ) ; final java . lang . String hostname = \"foo\" ; final java . lang . String root = \"dfs\" ; final java . lang . String path = \"\\\\bla\\\\\" ; jcifs . smb . DfsImpl dfs = new jcifs . smb . DfsImpl ( context ) ; jcifs . internal . dfs . DfsReferralDataImpl dr = new jcifs . internal . dfs . DfsReferralDataImpl ( ) { @ jcifs . tests . Override public int getPathConsumed ( ) { return ( ( 2 + ( hostname . length ( ) ) ) + ( root . length ( ) ) ) + ( path . length ( ) ) ; } @ jcifs . tests . Override public java . lang . String getServer ( ) { return getTestServer ( ) ; } @ jcifs . tests . Override public void stripPathConsumed ( int i ) { } } ; dfs . cache ( context , ( ( ( ( \"\\\\\" + hostname ) + \"\\\\\" ) + root ) + path ) , dr ) ; jcifs . DfsReferralData ref = dfs . resolve ( context , hostname , root , path ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ref )", "total": "testStandaloneDFSCache ( ) { jcifs . CIFSContext context = getContext ( ) ; context = withTestNTLMCredentials ( context ) ; final java . lang . String hostname = \"foo\" ; final java . lang . String root = \"dfs\" ; final java . lang . String path = \"\\\\bla\\\\\" ; jcifs . smb . DfsImpl dfs = new jcifs . smb . DfsImpl ( context ) ; jcifs . internal . dfs . DfsReferralDataImpl dr = new jcifs . internal . dfs . DfsReferralDataImpl ( ) { @ jcifs . tests . Override public int getPathConsumed ( ) { return ( ( 2 + ( hostname . length ( ) ) ) + ( root . length ( ) ) ) + ( path . length ( ) ) ; } @ jcifs . tests . Override public java . lang . String getServer ( ) { return getTestServer ( ) ; } @ jcifs . tests . Override public void stripPathConsumed ( int i ) { } } ; dfs . cache ( context , ( ( ( ( \"\\\\\" + hostname ) + \"\\\\\" ) + root ) + path ) , dr ) ; jcifs . DfsReferralData ref = dfs . resolve ( context , hostname , root , path ) ; \"<AssertPlaceHolder>\" ; } resolve ( jcifs . CIFSContext , java . lang . String , java . lang . String , java . lang . String ) { return resolve ( tf , domain , root , path , 5 ) ; }", "answer": "org . junit . Assert . assertNotNull ( ref )"}
{"focal": "receive ( int ) { return receive ( numToReceive , 2 ) ; }", "testMethod": "testConsumerReceiveBeforeMessageDispatched ( ) { connection . start ( ) ; final javax . jms . Session session = connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; final javax . jms . Queue queue = session . createQueue ( \"test\" ) ; java . lang . Thread t = new java . lang . Thread ( ) { @ org . apache . activemq . Override public void run ( ) { try { java . lang . Thread . sleep ( 10000 ) ; javax . jms . MessageProducer producer = session . createProducer ( queue ) ; producer . send ( session . createTextMessage ( \"Hello\" ) ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } } } ; t . start ( ) ; javax . jms . MessageConsumer consumer = session . createConsumer ( queue ) ; javax . jms . Message msg = consumer . receive ( 60000 ) ; \"<AssertPlaceHolder>\" ; session . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( msg )", "total": "testConsumerReceiveBeforeMessageDispatched ( ) { connection . start ( ) ; final javax . jms . Session session = connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; final javax . jms . Queue queue = session . createQueue ( \"test\" ) ; java . lang . Thread t = new java . lang . Thread ( ) { @ org . apache . activemq . Override public void run ( ) { try { java . lang . Thread . sleep ( 10000 ) ; javax . jms . MessageProducer producer = session . createProducer ( queue ) ; producer . send ( session . createTextMessage ( \"Hello\" ) ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } } } ; t . start ( ) ; javax . jms . MessageConsumer consumer = session . createConsumer ( queue ) ; javax . jms . Message msg = consumer . receive ( 60000 ) ; \"<AssertPlaceHolder>\" ; session . close ( ) ; } receive ( int ) { return receive ( numToReceive , 2 ) ; }", "answer": "org . junit . Assert . assertNotNull ( msg )"}
{"focal": "browse ( java . lang . String , org . fourthline . cling . support . model . BrowseFlag , long , long , org . fourthline . cling . model . profile . RemoteClientInfo ) { net . holmes . core . business . media . model . MediaNode browseNode = mediaManager . getNode ( objectID ) . orElseThrow ( ( ) -> new < net . holmes . core . service . upnp . directory . NO_SUCH_OBJECT > org . fourthline . cling . support . contentdirectory . ContentDirectoryException ( objectID ) ) ; net . holmes . core . service . upnp . directory . List < java . lang . String > availableMimeTypes = getAvailableMimeType ( remoteClientInfo ) ; net . holmes . core . service . upnp . directory . DirectoryBrowseResult result ; if ( ( DIRECT_CHILDREN ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( firstResult , maxResults ) ; net . holmes . core . service . upnp . directory . Collection < net . holmes . core . business . media . model . MediaNode > searchResult = mediaManager . searchChildNodes ( new net . holmes . core . business . media . MediaSearchRequest ( browseNode , availableMimeTypes ) ) ; for ( net . holmes . core . business . media . model . MediaNode childNode : searchResult ) { addNode ( objectID , childNode , result , availableMimeTypes ) ; } } else if ( ( METADATA ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; addNode ( browseNode . getParentId ( ) , browseNode , result , availableMimeTypes ) ; } else { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; } return result . buildBrowseResult ( new org . fourthline", "testMethod": "testBrowseMetadata ( ) { net . holmes . core . business . configuration . ConfigurationManager configurationManager = createMock ( net . holmes . core . business . configuration . ConfigurationManager . class ) ; net . holmes . core . business . media . MediaManager mediaManager = createMock ( net . holmes . core . business . media . MediaManager . class ) ; net . holmes . core . business . streaming . StreamingManager streamingManager = createMock ( net . holmes . core . business . streaming . StreamingManager . class ) ; org . fourthline . cling . model . profile . RemoteClientInfo remoteClientInfo = createMock ( org . fourthline . cling . model . profile . RemoteClientInfo . class ) ; org . fourthline . cling . model . message . Connection connection = createMock ( org . fourthline . cling . model . message . Connection . class ) ; java . net . InetAddress inetAddress = createMock ( java . net . InetAddress . class ) ; net . holmes . core . business . streaming . upnp . device . UpnpDevice upnpDevice = createMock ( net . holmes . core . business . streaming . upnp . device . UpnpDevice . class ) ; net . holmes . core . business . streaming . airplay . device . AirplayDevice airplayDevice = createMock ( net . holmes . core . business . streaming . airplay . device . AirplayDevice . class ) ; net . holmes . core . service . upnp . directory . ContentDirectoryService contentDirectoryService = new net . holmes . core . service . upnp . directory . ContentDirectoryService ( ) ; contentDirectoryService . setConfigurationManager ( configurationManager ) ; contentDirectoryService . setMediaManager ( mediaManager ) ; contentDirectoryService . setStreamingManager ( streamingManager ) ; expect ( remoteClientInfo . getConnection ( ) ) . andReturn ( connection ) ; expect ( remoteClientInfo . getRemoteAddress ( ) ) . andReturn ( inetAddress ) ; expect ( inetAddress . getHostAddress ( ) ) . andReturn ( \"localhost\" ) ; expect ( streamingManager . findDevices ( eq ( \"localhost\" ) ) ) . andReturn ( newArrayList ( upnpDevice , airplayDevice ) ) ; expect ( upnpDevice . getSupportedMimeTypes ( ) ) . andReturn ( newArrayList ( \"video/avi\" ) ) ; expect ( mediaManager . getNode ( eq ( \"0\" ) ) ) . andReturn ( java . util . Optional . of ( new net . holmes . core . business . media . model . FolderNode ( \"0\" , \"-1\" , \"root\" ) ) ) ; java . util . List < net . holmes . core . business . media . model . MediaNode > rootChildren = com . google . common . collect . Lists . newArrayList ( new net . holmes . core . business . media . model . FolderNode ( net . holmes . core . service . upnp . directory . VIDEO . getId ( ) , net . holmes . core . service . upnp . directory . VIDEO . getParentId ( ) , net . holmes . core . service . upnp . directory . VIDEO . name ( ) ) ) ; expect ( mediaManager . searchChildNodes ( isA ( net . holmes . core . business . media . MediaSearchRequest . class ) ) ) . andReturn ( rootChildren ) ; expect ( configurationManager . getParameter ( net . holmes . core . service . upnp . directory . UPNP_ADD_SUBTITLE ) ) . andReturn ( true ) ; replay ( mediaManager , streamingManager , remoteClientInfo , connection , inetAddress , upnpDevice , airplayDevice , configurationManager ) ; org . fourthline . cling . support . model . BrowseResult result = contentDirectoryService . browse ( \"0\" , BrowseFlag . METADATA , 0 , 100 , remoteClientInfo ) ; \"<AssertPlaceHolder>\" ; verify ( mediaManager , streamingManager , remoteClientInfo , connection , inetAddress , upnpDevice , airplayDevice , configurationManager ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testBrowseMetadata ( ) { net . holmes . core . business . configuration . ConfigurationManager configurationManager = createMock ( net . holmes . core . business . configuration . ConfigurationManager . class ) ; net . holmes . core . business . media . MediaManager mediaManager = createMock ( net . holmes . core . business . media . MediaManager . class ) ; net . holmes . core . business . streaming . StreamingManager streamingManager = createMock ( net . holmes . core . business . streaming . StreamingManager . class ) ; org . fourthline . cling . model . profile . RemoteClientInfo remoteClientInfo = createMock ( org . fourthline . cling . model . profile . RemoteClientInfo . class ) ; org . fourthline . cling . model . message . Connection connection = createMock ( org . fourthline . cling . model . message . Connection . class ) ; java . net . InetAddress inetAddress = createMock ( java . net . InetAddress . class ) ; net . holmes . core . business . streaming . upnp . device . UpnpDevice upnpDevice = createMock ( net . holmes . core . business . streaming . upnp . device . UpnpDevice . class ) ; net . holmes . core . business . streaming . airplay . device . AirplayDevice airplayDevice = createMock ( net . holmes . core . business . streaming . airplay . device . AirplayDevice . class ) ; net . holmes . core . service . upnp . directory . ContentDirectoryService contentDirectoryService = new net . holmes . core . service . upnp . directory . ContentDirectoryService ( ) ; contentDirectoryService . setConfigurationManager ( configurationManager ) ; contentDirectoryService . setMediaManager ( mediaManager ) ; contentDirectoryService . setStreamingManager ( streamingManager ) ; expect ( remoteClientInfo . getConnection ( ) ) . andReturn ( connection ) ; expect ( remoteClientInfo . getRemoteAddress ( ) ) . andReturn ( inetAddress ) ; expect ( inetAddress . getHostAddress ( ) ) . andReturn ( \"localhost\" ) ; expect ( streamingManager . findDevices ( eq ( \"localhost\" ) ) ) . andReturn ( newArrayList ( upnpDevice , airplayDevice ) ) ; expect ( upnpDevice . getSupportedMimeTypes ( ) ) . andReturn ( newArrayList ( \"video/avi\" ) ) ; expect ( mediaManager . getNode ( eq ( \"0\" ) ) ) . andReturn ( java . util . Optional . of ( new net . holmes . core . business . media . model . FolderNode ( \"0\" , \"-1\" , \"root\" ) ) ) ; java . util . List < net . holmes . core . business . media . model . MediaNode > rootChildren = com . google . common . collect . Lists . newArrayList ( new net . holmes . core . business . media . model . FolderNode ( net . holmes . core . service . upnp . directory . VIDEO . getId ( ) , net . holmes . core . service . upnp . directory . VIDEO . getParentId ( ) , net . holmes . core . service . upnp . directory . VIDEO . name ( ) ) ) ; expect ( mediaManager . searchChildNodes ( isA ( net . holmes . core . business . media . MediaSearchRequest . class ) ) ) . andReturn ( rootChildren ) ; expect ( configurationManager . getParameter ( net . holmes . core . service . upnp . directory . UPNP_ADD_SUBTITLE ) ) . andReturn ( true ) ; replay ( mediaManager , streamingManager , remoteClientInfo , connection , inetAddress , upnpDevice , airplayDevice , configurationManager ) ; org . fourthline . cling . support . model . BrowseResult result = contentDirectoryService . browse ( \"0\" , BrowseFlag . METADATA , 0 , 100 , remoteClientInfo ) ; \"<AssertPlaceHolder>\" ; verify ( mediaManager , streamingManager , remoteClientInfo , connection , inetAddress , upnpDevice , airplayDevice , configurationManager ) ; } browse ( java . lang . String , org . fourthline . cling . support . model . BrowseFlag , long , long , org . fourthline . cling . model . profile . RemoteClientInfo ) { net . holmes . core . business . media . model . MediaNode browseNode = mediaManager . getNode ( objectID ) . orElseThrow ( ( ) -> new < net . holmes . core . service . upnp . directory . NO_SUCH_OBJECT > org . fourthline . cling . support . contentdirectory . ContentDirectoryException ( objectID ) ) ; net . holmes . core . service . upnp . directory . List < java . lang . String > availableMimeTypes = getAvailableMimeType ( remoteClientInfo ) ; net . holmes . core . service . upnp . directory . DirectoryBrowseResult result ; if ( ( DIRECT_CHILDREN ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( firstResult , maxResults ) ; net . holmes . core . service . upnp . directory . Collection < net . holmes . core . business . media . model . MediaNode > searchResult = mediaManager . searchChildNodes ( new net . holmes . core . business . media . MediaSearchRequest ( browseNode , availableMimeTypes ) ) ; for ( net . holmes . core . business . media . model . MediaNode childNode : searchResult ) { addNode ( objectID , childNode , result , availableMimeTypes ) ; } } else if ( ( METADATA ) == browseFlag ) { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; addNode ( browseNode . getParentId ( ) , browseNode , result , availableMimeTypes ) ; } else { result = new net . holmes . core . service . upnp . directory . DirectoryBrowseResult ( 0 , 1 ) ; } return result . buildBrowseResult ( new org . fourthline", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "lookup ( java . lang . Class , java . lang . String ) { try { return org . unidal . lookup . ContainerLoader . getDefaultContainer ( ) . lookup ( clazz , roleHint ) ; } catch ( org . codehaus . plexus . component . repository . exception . ComponentLookupException e ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( \"Error:<sp>Unable<sp>to<sp>lookup<sp>component<sp>%s!\" , clazz . getName ( ) ) , e ) ; } }", "testMethod": "test ( ) { try { lookup ( com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent . class , \"role\" ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . Exception e ) { } defineComponent ( com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent . class , \"role\" , com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent . class ) ; com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent dc = lookup ( com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent . class , \"role\" ) ; release ( dc ) ; dc = lookup ( com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent . class , \"role\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dc )", "total": "test ( ) { try { lookup ( com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent . class , \"role\" ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . Exception e ) { } defineComponent ( com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent . class , \"role\" , com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent . class ) ; com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent dc = lookup ( com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent . class , \"role\" ) ; release ( dc ) ; dc = lookup ( com . ctrip . hermes . broker . dal . UnidalTest . DynamicAddedComponent . class , \"role\" ) ; \"<AssertPlaceHolder>\" ; } lookup ( java . lang . Class , java . lang . String ) { try { return org . unidal . lookup . ContainerLoader . getDefaultContainer ( ) . lookup ( clazz , roleHint ) ; } catch ( org . codehaus . plexus . component . repository . exception . ComponentLookupException e ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( \"Error:<sp>Unable<sp>to<sp>lookup<sp>component<sp>%s!\" , clazz . getName ( ) ) , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( dc )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "crear ( ) { log . debug ( \"Debiera<sp>crear<sp>colegio\" ) ; mx . edu . um . mateo . general . model . Usuario asociado = obtieneAsociado ( ) ; authenticate ( asociado , asociado . getPassword ( ) , new java . util . ArrayList < org . springframework . security . core . GrantedAuthority > ( asociado . getRoles ( ) ) ) ; mx . edu . um . mateo . rh . model . Colegio colegio = new mx . edu . um . mateo . rh . model . Colegio ( ) ; colegio . setNombre ( \"Test\" ) ; colegio . setStatus ( \"A\" ) ; colegio . setOrganizacion ( asociado . getEmpresa ( ) . getOrganizacion ( ) ) ; currentSession ( ) . save ( colegio ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( post ( Constantes . COLEGIO_PATH_CREA ) . param ( \"nombre\" , colegio . getNombre ( ) . toString ( ) ) ) . andExpect ( flash ( ) . attributeExists ( Constantes . CONTAINSKEY_MESSAGE ) ) . andExpect ( flash ( ) . attribute ( Constantes . CONTAINSKEY_MESSAGE , \"colegio.creado.message\" ) ) . andExpect ( redirectedUrl ( Constantes . COLEGIO_PATH ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( colegio . getId ( ) )", "total": "crear ( ) { log . debug ( \"Debiera<sp>crear<sp>colegio\" ) ; mx . edu . um . mateo . general . model . Usuario asociado = obtieneAsociado ( ) ; authenticate ( asociado , asociado . getPassword ( ) , new java . util . ArrayList < org . springframework . security . core . GrantedAuthority > ( asociado . getRoles ( ) ) ) ; mx . edu . um . mateo . rh . model . Colegio colegio = new mx . edu . um . mateo . rh . model . Colegio ( ) ; colegio . setNombre ( \"Test\" ) ; colegio . setStatus ( \"A\" ) ; colegio . setOrganizacion ( asociado . getEmpresa ( ) . getOrganizacion ( ) ) ; currentSession ( ) . save ( colegio ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( post ( Constantes . COLEGIO_PATH_CREA ) . param ( \"nombre\" , colegio . getNombre ( ) . toString ( ) ) ) . andExpect ( flash ( ) . attributeExists ( Constantes . CONTAINSKEY_MESSAGE ) ) . andExpect ( flash ( ) . attribute ( Constantes . CONTAINSKEY_MESSAGE , \"colegio.creado.message\" ) ) . andExpect ( redirectedUrl ( Constantes . COLEGIO_PATH ) ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( colegio . getId ( ) )"}
{"focal": "cardinality ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . aggregation . metrics . CardinalityAggregationImpl ( name , field ) ; }", "testMethod": "testCardinalityAggregation ( ) { com . liferay . portal . search . aggregation . metrics . CardinalityAggregation cardinalityAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . cardinality ( \"name\" , \"field\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( cardinalityAggregation )", "total": "testCardinalityAggregation ( ) { com . liferay . portal . search . aggregation . metrics . CardinalityAggregation cardinalityAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . cardinality ( \"name\" , \"field\" ) ; \"<AssertPlaceHolder>\" ; } cardinality ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . aggregation . metrics . CardinalityAggregationImpl ( name , field ) ; }", "answer": "org . junit . Assert . assertNotNull ( cardinalityAggregation )"}
{"focal": "version ( ) { if ( ( net . openhft . chronicle . hash . impl . util . BuildVersion . version ) != null ) { return net . openhft . chronicle . hash . impl . util . BuildVersion . version ; } try { net . openhft . chronicle . hash . impl . util . InputStream resource = net . openhft . chronicle . hash . impl . util . BuildVersion . class . getClassLoader ( ) . getResourceAsStream ( ( \"map\" + \".version\" ) ) ; net . openhft . chronicle . hash . impl . util . BufferedReader in = new net . openhft . chronicle . hash . impl . util . BufferedReader ( new net . openhft . chronicle . hash . impl . util . InputStreamReader ( resource , java . nio . charset . StandardCharsets . UTF_8 ) ) ; net . openhft . chronicle . hash . impl . util . BuildVersion . version = in . readLine ( ) . trim ( ) ; if ( ! ( \"${project.version}\" . equals ( net . openhft . chronicle . hash . impl . util . BuildVersion . version ( ) ) ) ) return net . openhft . chronicle . hash . impl . util . BuildVersion . version ; return net . openhft . chronicle . hash . impl . util . BuildVersion . version ; } catch ( java . lang . Exception e ) { } final java . lang . String versionFromManifest = net . openhft . chronicle . hash . impl . util . BuildVersion . getVersionFromManifest ( ) ; if ( versionFromManifest != null ) { net . openhft . chronicle . hash . impl . util . BuildVersion . version = versionFromManifest ; return net . openhft . chronicle . hash . impl . util . BuildVersion . version ; } net . openhft . chronicle . hash . impl . util . BuildVersion . version = net . openhft . chronicle . hash . impl . util . BuildVersion . getVersionFromPom ( ) ; return net . openhft . chronicle . hash . impl . util . BuildVersion . version ; }", "testMethod": "testVersion ( ) { try ( net . openhft . chronicle . map . ChronicleMap < java . lang . Integer , java . lang . Double > expected = net . openhft . chronicle . map . ChronicleMap . of ( net . openhft . chronicle . map . Integer . class , net . openhft . chronicle . map . Double . class ) . entries ( 1 ) . create ( ) ) { expected . put ( 1 , 1.0 ) ; java . lang . String version = ( ( net . openhft . chronicle . map . VanillaChronicleMap ) ( expected ) ) . persistedDataVersion ( ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( net . openhft . chronicle . hash . impl . util . BuildVersion . version ( ) , version )", "total": "testVersion ( ) { try ( net . openhft . chronicle . map . ChronicleMap < java . lang . Integer , java . lang . Double > expected = net . openhft . chronicle . map . ChronicleMap . of ( net . openhft . chronicle . map . Integer . class , net . openhft . chronicle . map . Double . class ) . entries ( 1 ) . create ( ) ) { expected . put ( 1 , 1.0 ) ; java . lang . String version = ( ( net . openhft . chronicle . map . VanillaChronicleMap ) ( expected ) ) . persistedDataVersion ( ) ; \"<AssertPlaceHolder>\" ; } } version ( ) { if ( ( net . openhft . chronicle . hash . impl . util . BuildVersion . version ) != null ) { return net . openhft . chronicle . hash . impl . util . BuildVersion . version ; } try { net . openhft . chronicle . hash . impl . util . InputStream resource = net . openhft . chronicle . hash . impl . util . BuildVersion . class . getClassLoader ( ) . getResourceAsStream ( ( \"map\" + \".version\" ) ) ; net . openhft . chronicle . hash . impl . util . BufferedReader in = new net . openhft . chronicle . hash . impl . util . BufferedReader ( new net . openhft . chronicle . hash . impl . util . InputStreamReader ( resource , java . nio . charset . StandardCharsets . UTF_8 ) ) ; net . openhft . chronicle . hash . impl . util . BuildVersion . version = in . readLine ( ) . trim ( ) ; if ( ! ( \"${project.version}\" . equals ( net . openhft . chronicle . hash . impl . util . BuildVersion . version ( ) ) ) ) return net . openhft . chronicle . hash . impl . util . BuildVersion . version ; return net . openhft . chronicle . hash . impl . util . BuildVersion . version ; } catch ( java . lang . Exception e ) { } final java . lang . String versionFromManifest = net . openhft . chronicle . hash . impl . util . BuildVersion . getVersionFromManifest ( ) ; if ( versionFromManifest != null ) { net . openhft . chronicle . hash . impl . util . BuildVersion . version = versionFromManifest ; return net . openhft . chronicle . hash . impl . util . BuildVersion . version ; } net . openhft . chronicle . hash . impl . util . BuildVersion . version = net . openhft . chronicle . hash . impl . util . BuildVersion . getVersionFromPom ( ) ; return net . openhft . chronicle . hash . impl . util . BuildVersion . version ; }", "answer": "org . junit . Assert . assertNotNull ( net . openhft . chronicle . hash . impl . util . BuildVersion . version ( ) , version )"}
{"focal": "getName ( ) { return this . name ; }", "testMethod": "ItsCorrectPrintTaskFindByFilter ( ) { ru . szhernovoy . start . Tracker track = new ru . szhernovoy . start . Tracker ( ) ; java . lang . String nameTask1 = \"pervaja<sp>zajavka\" ; java . lang . String [ ] answerForAdd = new java . lang . String [ ] { \"0\" , \"pervaja<sp>zajavka\" , \"eto<sp>pervaja<sp>zajavka\" , \"y\" } ; new ru . szhernovoy . start . StartUI ( new ru . szhernovoy . start . StubInput ( answerForAdd ) ) . init ( track ) ; for ( ru . szhernovoy . start . Task task : track . findByFilter ( nameTask1 ) ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( task . getName ( ) )", "total": "ItsCorrectPrintTaskFindByFilter ( ) { ru . szhernovoy . start . Tracker track = new ru . szhernovoy . start . Tracker ( ) ; java . lang . String nameTask1 = \"pervaja<sp>zajavka\" ; java . lang . String [ ] answerForAdd = new java . lang . String [ ] { \"0\" , \"pervaja<sp>zajavka\" , \"eto<sp>pervaja<sp>zajavka\" , \"y\" } ; new ru . szhernovoy . start . StartUI ( new ru . szhernovoy . start . StubInput ( answerForAdd ) ) . init ( track ) ; for ( ru . szhernovoy . start . Task task : track . findByFilter ( nameTask1 ) ) { \"<AssertPlaceHolder>\" ; } } getName ( ) { return this . name ; }", "answer": "org . junit . Assert . assertNotNull ( task . getName ( ) )"}
{"focal": "get ( ) { return ds ; }", "testMethod": "testWithinRadius ( ) { ds . ensureIndexes ( ) ; com . github . jmkgreen . morphia . query . TestGeoQueries . Place place1 = new com . github . jmkgreen . morphia . query . TestGeoQueries . Place ( \"place1\" , new double [ ] { 1 , 1 } ) ; ds . save ( place1 ) ; com . github . jmkgreen . morphia . query . TestGeoQueries . Place found = ds . find ( com . github . jmkgreen . morphia . query . TestGeoQueries . Place . class ) . field ( \"loc\" ) . within ( 0 , 1 , 1.1 ) . get ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( found )", "total": "testWithinRadius ( ) { ds . ensureIndexes ( ) ; com . github . jmkgreen . morphia . query . TestGeoQueries . Place place1 = new com . github . jmkgreen . morphia . query . TestGeoQueries . Place ( \"place1\" , new double [ ] { 1 , 1 } ) ; ds . save ( place1 ) ; com . github . jmkgreen . morphia . query . TestGeoQueries . Place found = ds . find ( com . github . jmkgreen . morphia . query . TestGeoQueries . Place . class ) . field ( \"loc\" ) . within ( 0 , 1 , 1.1 ) . get ( ) ; \"<AssertPlaceHolder>\" ; } get ( ) { return ds ; }", "answer": "org . junit . Assert . assertNotNull ( found )"}
{"focal": "getByStudyId ( long ) { org . hibernate . Criteria criteria = currentSession ( ) . createCriteria ( uk . ac . bbsrc . tgac . miso . core . data . impl . ProjectImpl . class ) ; criteria . createAlias ( \"studies\" , \"study\" ) ; criteria . add ( org . hibernate . criterion . Restrictions . eq ( \"study.id\" , studyId ) ) ; return ( ( uk . ac . bbsrc . tgac . miso . core . data . Project ) ( criteria . uniqueResult ( ) ) ) ; }", "testMethod": "testGetByStudyId ( ) { uk . ac . bbsrc . tgac . miso . core . data . Project p = projectDAO . getByStudyId ( 1L ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( p )", "total": "testGetByStudyId ( ) { uk . ac . bbsrc . tgac . miso . core . data . Project p = projectDAO . getByStudyId ( 1L ) ; \"<AssertPlaceHolder>\" ; } getByStudyId ( long ) { org . hibernate . Criteria criteria = currentSession ( ) . createCriteria ( uk . ac . bbsrc . tgac . miso . core . data . impl . ProjectImpl . class ) ; criteria . createAlias ( \"studies\" , \"study\" ) ; criteria . add ( org . hibernate . criterion . Restrictions . eq ( \"study.id\" , studyId ) ) ; return ( ( uk . ac . bbsrc . tgac . miso . core . data . Project ) ( criteria . uniqueResult ( ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( p )"}
{"focal": "getInput ( ) { return inputBuf ; }", "testMethod": "testOpenInputStream ( ) { cern . c2mon . pmanager . fallback . FallbackFileController fFileController = new cern . c2mon . pmanager . fallback . FallbackFileController ( cern . c2mon . pmanager . fallback . FallbackFileControllerTest . fallbackFile . getAbsolutePath ( ) ) ; try { fFileController . openFallbackInputStream ( ) ; } catch ( cern . c2mon . pmanager . fallback . exception . DataFallbackException e ) { org . junit . Assert . fail ( \"The<sp>InputStream<sp>could<sp>not<sp>be<sp>opened\" ) ; } \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( fFileController . getInput ( ) )", "total": "testOpenInputStream ( ) { cern . c2mon . pmanager . fallback . FallbackFileController fFileController = new cern . c2mon . pmanager . fallback . FallbackFileController ( cern . c2mon . pmanager . fallback . FallbackFileControllerTest . fallbackFile . getAbsolutePath ( ) ) ; try { fFileController . openFallbackInputStream ( ) ; } catch ( cern . c2mon . pmanager . fallback . exception . DataFallbackException e ) { org . junit . Assert . fail ( \"The<sp>InputStream<sp>could<sp>not<sp>be<sp>opened\" ) ; } \"<AssertPlaceHolder>\" ; } getInput ( ) { return inputBuf ; }", "answer": "org . junit . Assert . assertNotNull ( fFileController . getInput ( ) )"}
{"focal": "toString ( ) { return com . google . common . base . Objects . toStringHelper ( this . getClass ( ) ) . add ( \"indexKeys\" , indexKeys ) . add ( \"ordering\" , ordering ) . add ( \"startTimestamp\" , uuidToDateString ( startUuid ) ) . add ( \"endTimestamp\" , uuidToDateString ( endUuid ) ) . add ( \"limit\" , limit ) . add ( \"inclusive\" , inclusive ) . add ( \"allowFiltering\" , allowFiltering ) . toString ( ) ; }", "testMethod": "testToString ( ) { com . pardot . rhombus . Criteria criteria = new com . pardot . rhombus . Criteria ( ) ; java . util . SortedMap < java . lang . String , java . lang . Object > indexKeys = new java . util . TreeMap < java . lang . String , java . lang . Object > ( ) ; indexKeys . put ( \"account_id\" , \"3\" ) ; indexKeys . put ( \"object_type\" , \"account\" ) ; indexKeys . put ( \"object_id\" , \"3\" ) ; criteria . setIndexKeys ( indexKeys ) ; criteria . setStartTimestamp ( ( ( java . lang . System . currentTimeMillis ( ) ) - 3600000 ) ) ; criteria . setLimit ( 50L ) ; criteria . setOrdering ( \"ASC\" ) ; com . pardot . rhombus . CriteriaTest . logger . debug ( criteria . toString ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( criteria . toString ( ) )", "total": "testToString ( ) { com . pardot . rhombus . Criteria criteria = new com . pardot . rhombus . Criteria ( ) ; java . util . SortedMap < java . lang . String , java . lang . Object > indexKeys = new java . util . TreeMap < java . lang . String , java . lang . Object > ( ) ; indexKeys . put ( \"account_id\" , \"3\" ) ; indexKeys . put ( \"object_type\" , \"account\" ) ; indexKeys . put ( \"object_id\" , \"3\" ) ; criteria . setIndexKeys ( indexKeys ) ; criteria . setStartTimestamp ( ( ( java . lang . System . currentTimeMillis ( ) ) - 3600000 ) ) ; criteria . setLimit ( 50L ) ; criteria . setOrdering ( \"ASC\" ) ; com . pardot . rhombus . CriteriaTest . logger . debug ( criteria . toString ( ) ) ; \"<AssertPlaceHolder>\" ; } toString ( ) { return com . google . common . base . Objects . toStringHelper ( this . getClass ( ) ) . add ( \"indexKeys\" , indexKeys ) . add ( \"ordering\" , ordering ) . add ( \"startTimestamp\" , uuidToDateString ( startUuid ) ) . add ( \"endTimestamp\" , uuidToDateString ( endUuid ) ) . add ( \"limit\" , limit ) . add ( \"inclusive\" , inclusive ) . add ( \"allowFiltering\" , allowFiltering ) . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( criteria . toString ( ) )"}
{"focal": "evaluateProvisioningTimeBindings ( com . vmware . admiral . compute . content . NestedState , java . util . List , java . util . Map ) { com . vmware . admiral . compute . content . NestedState result = state ; java . util . Map < java . lang . String , java . lang . Object > evaluatedBindingMap = new java . util . HashMap ( ) ; for ( com . vmware . admiral . compute . content . Binding binding : bindings ) { if ( ! ( binding . isProvisioningTimeBinding ( ) ) ) { continue ; } try { com . vmware . admiral . compute . BindingEvaluator . evaluateProvisioningTimeBinding ( binding , provisionedResources , evaluatedBindingMap ) ; } catch ( java . lang . ReflectiveOperationException | java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } } try { final java . util . Map < java . lang . String , java . lang . Object > resultBindingMap = new java . util . HashMap ( ) ; com . vmware . admiral . compute . BindingEvaluator . sanitizeState ( state , ( normalizedState ) -> { try { resultBindingMap . putAll ( com . vmware . admiral . compute . TemplateSerializationUtils . serializeNestedState ( normalizedState , com . vmware . admiral . compute . BindingEvaluator . objectMapper , com . vmware . admiral . compute . BindingEvaluator . objectAsStringWriter ) ) ; } catch ( e ) { throw new < com . vmware . admiral . compute . e > java . lang . RuntimeException ( ) ; } } ) ; com . vmware . admiral . compute . BindingEvaluator . applyEvaluatedState ( resultBindingMap , evaluatedBindingMap , bindings ) ; if ( ! ( evaluatedBindingMap . isEmpty ( ) ) ) { result = com . vmware . admiral . compute . TemplateSerializationUtils . deserializeServiceDocument ( resultBindingMap , state . object . getClass ( ) ) ; } } catch ( java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } return result ; }", "testMethod": "testEvaluateSimpleClosureTimingBindingToObject ( ) { java . util . List < com . vmware . admiral . compute . content . Binding > bindings = java . util . Arrays . asList ( com . vmware . admiral . compute . BindingEvaluatorTest . binding ( java . util . Arrays . asList ( \"inputs\" , \"test\" ) , \"_resource~A~inputs~hostname\" ) ) ; java . util . Map < java . lang . String , com . vmware . admiral . compute . content . NestedState > closures = new java . util . HashMap ( ) ; com . vmware . admiral . closures . services . closure . Closure closure = new com . vmware . admiral . closures . services . closure . Closure ( ) ; closure . name = \"Closure\" ; com . google . gson . JsonPrimitive inStr = new com . google . gson . JsonPrimitive ( \"localhost\" ) ; closure . inputs = new java . util . HashMap ( ) ; closure . inputs . put ( \"hostname\" , inStr ) ; closures . put ( \"A\" , new com . vmware . admiral . compute . content . NestedState ( closure ) ) ; com . vmware . admiral . compute . content . NestedState nestedState = new com . vmware . admiral . compute . content . NestedState ( closure ) ; com . vmware . admiral . compute . content . NestedState evalObj = com . vmware . admiral . compute . BindingEvaluator . evaluateProvisioningTimeBindings ( nestedState , bindings , closures ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( evalObj )", "total": "testEvaluateSimpleClosureTimingBindingToObject ( ) { java . util . List < com . vmware . admiral . compute . content . Binding > bindings = java . util . Arrays . asList ( com . vmware . admiral . compute . BindingEvaluatorTest . binding ( java . util . Arrays . asList ( \"inputs\" , \"test\" ) , \"_resource~A~inputs~hostname\" ) ) ; java . util . Map < java . lang . String , com . vmware . admiral . compute . content . NestedState > closures = new java . util . HashMap ( ) ; com . vmware . admiral . closures . services . closure . Closure closure = new com . vmware . admiral . closures . services . closure . Closure ( ) ; closure . name = \"Closure\" ; com . google . gson . JsonPrimitive inStr = new com . google . gson . JsonPrimitive ( \"localhost\" ) ; closure . inputs = new java . util . HashMap ( ) ; closure . inputs . put ( \"hostname\" , inStr ) ; closures . put ( \"A\" , new com . vmware . admiral . compute . content . NestedState ( closure ) ) ; com . vmware . admiral . compute . content . NestedState nestedState = new com . vmware . admiral . compute . content . NestedState ( closure ) ; com . vmware . admiral . compute . content . NestedState evalObj = com . vmware . admiral . compute . BindingEvaluator . evaluateProvisioningTimeBindings ( nestedState , bindings , closures ) ; \"<AssertPlaceHolder>\" ; } evaluateProvisioningTimeBindings ( com . vmware . admiral . compute . content . NestedState , java . util . List , java . util . Map ) { com . vmware . admiral . compute . content . NestedState result = state ; java . util . Map < java . lang . String , java . lang . Object > evaluatedBindingMap = new java . util . HashMap ( ) ; for ( com . vmware . admiral . compute . content . Binding binding : bindings ) { if ( ! ( binding . isProvisioningTimeBinding ( ) ) ) { continue ; } try { com . vmware . admiral . compute . BindingEvaluator . evaluateProvisioningTimeBinding ( binding , provisionedResources , evaluatedBindingMap ) ; } catch ( java . lang . ReflectiveOperationException | java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } } try { final java . util . Map < java . lang . String , java . lang . Object > resultBindingMap = new java . util . HashMap ( ) ; com . vmware . admiral . compute . BindingEvaluator . sanitizeState ( state , ( normalizedState ) -> { try { resultBindingMap . putAll ( com . vmware . admiral . compute . TemplateSerializationUtils . serializeNestedState ( normalizedState , com . vmware . admiral . compute . BindingEvaluator . objectMapper , com . vmware . admiral . compute . BindingEvaluator . objectAsStringWriter ) ) ; } catch ( e ) { throw new < com . vmware . admiral . compute . e > java . lang . RuntimeException ( ) ; } } ) ; com . vmware . admiral . compute . BindingEvaluator . applyEvaluatedState ( resultBindingMap , evaluatedBindingMap , bindings ) ; if ( ! ( evaluatedBindingMap . isEmpty ( ) ) ) { result = com . vmware . admiral . compute . TemplateSerializationUtils . deserializeServiceDocument ( resultBindingMap , state . object . getClass ( ) ) ; } } catch ( java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } return result ; }", "answer": "org . junit . Assert . assertNotNull ( evalObj )"}
{"focal": "uploadPermNews ( java . util . List , me . hao0 . wechat . core . Callback ) { uploadPermNews ( loadAccessToken ( ) , items , cb ) ; }", "testMethod": "testUploadPermNews ( ) { java . util . List < me . hao0 . wechat . model . material . NewsContentItem > items = new java . util . ArrayList ( ) ; me . hao0 . wechat . model . material . NewsContentItem item ; for ( int i = 0 ; i < 3 ; i ++ ) { item = new me . hao0 . wechat . model . material . NewsContentItem ( ) ; item . setTitle ( ( \"\" + i ) ) ; item . setAuthor ( ( \"\" + i ) ) ; item . setContent ( ( \"\" + i ) ) ; item . setDigest ( ( \"\" + i ) ) ; item . setShowCoverPic ( 1 ) ; item . setThumbMediaId ( \"K74X6mIzSjUcRNfP5rjI8oERKkI_0_X8u16ZiY14ut4\" ) ; item . setUrl ( \"https://github.com/ihaolin/wechat\" ) ; item . setContentSourceUrl ( \"https://github.com/ihaolin/wechat\" ) ; items . add ( item ) ; } java . lang . String mediaId = wechat . material ( ) . uploadPermNews ( accessToken , items ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( mediaId )", "total": "testUploadPermNews ( ) { java . util . List < me . hao0 . wechat . model . material . NewsContentItem > items = new java . util . ArrayList ( ) ; me . hao0 . wechat . model . material . NewsContentItem item ; for ( int i = 0 ; i < 3 ; i ++ ) { item = new me . hao0 . wechat . model . material . NewsContentItem ( ) ; item . setTitle ( ( \"\" + i ) ) ; item . setAuthor ( ( \"\" + i ) ) ; item . setContent ( ( \"\" + i ) ) ; item . setDigest ( ( \"\" + i ) ) ; item . setShowCoverPic ( 1 ) ; item . setThumbMediaId ( \"K74X6mIzSjUcRNfP5rjI8oERKkI_0_X8u16ZiY14ut4\" ) ; item . setUrl ( \"https://github.com/ihaolin/wechat\" ) ; item . setContentSourceUrl ( \"https://github.com/ihaolin/wechat\" ) ; items . add ( item ) ; } java . lang . String mediaId = wechat . material ( ) . uploadPermNews ( accessToken , items ) ; \"<AssertPlaceHolder>\" ; } uploadPermNews ( java . util . List , me . hao0 . wechat . core . Callback ) { uploadPermNews ( loadAccessToken ( ) , items , cb ) ; }", "answer": "org . junit . Assert . assertNotNull ( mediaId )"}
{"focal": "getComponent ( java . lang . Class ) { checkReadPermission ( ) ; return pico . getComponent ( componentType ) ; }", "testMethod": "testUnambiguouSelfDependency ( ) { com . picocontainer . MutablePicoContainer pico = createPicoContainer ( null ) ; pico . addComponent ( com . picocontainer . testmodel . SimpleTouchable . class ) ; pico . addComponent ( com . picocontainer . testmodel . DecoratedTouchable . class ) ; com . picocontainer . testmodel . Touchable t = ( ( com . picocontainer . testmodel . Touchable ) ( pico . getComponent ( ( ( java . lang . Object ) ( com . picocontainer . testmodel . DecoratedTouchable . class ) ) ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( t )", "total": "testUnambiguouSelfDependency ( ) { com . picocontainer . MutablePicoContainer pico = createPicoContainer ( null ) ; pico . addComponent ( com . picocontainer . testmodel . SimpleTouchable . class ) ; pico . addComponent ( com . picocontainer . testmodel . DecoratedTouchable . class ) ; com . picocontainer . testmodel . Touchable t = ( ( com . picocontainer . testmodel . Touchable ) ( pico . getComponent ( ( ( java . lang . Object ) ( com . picocontainer . testmodel . DecoratedTouchable . class ) ) ) ) ) ; \"<AssertPlaceHolder>\" ; } getComponent ( java . lang . Class ) { checkReadPermission ( ) ; return pico . getComponent ( componentType ) ; }", "answer": "org . junit . Assert . assertNotNull ( t )"}
{"focal": "getService ( com . sun . enterprise . util . io . ServerDirs , com . sun . enterprise . admin . servermgmt . services . AppserverServiceType ) { if ( Constants . LINUX_HACK ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . SMFService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . SMFService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . WindowsService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . WindowsService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; throw new java . lang . RuntimeException ( com . sun . enterprise . admin . servermgmt . services . Strings . get ( \"noSuitableServiceImplementation\" ) ) ; }", "testMethod": "clusterServerRefValid ( ) { com . sun . enterprise . config . serverbeans . Cluster cluster = habitat . getService ( com . sun . enterprise . config . serverbeans . Cluster . class , \"clusterA\" ) ; \"<AssertPlaceHolder>\" ; com . sun . enterprise . config . serverbeans . ServerRef sref = cluster . getServerRef ( ) . get ( 0 ) ; org . jvnet . hk2 . config . ConfigBean serverConfig = ( ( org . jvnet . hk2 . config . ConfigBean ) ( org . jvnet . hk2 . config . ConfigBean . unwrap ( sref ) ) ) ; java . util . Map < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > changes = new java . util . HashMap < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > ( ) ; java . util . Map < java . lang . String , java . lang . String > configChanges = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; configChanges . put ( \"ref\" , \"server\" ) ; changes . put ( serverConfig , configChanges ) ; try { org . jvnet . hk2 . config . ConfigSupport cs = getHabitat ( ) . getService ( org . jvnet . hk2 . config . ConfigSupport . class ) ; cs . apply ( changes ) ; } catch ( org . jvnet . hk2 . config . TransactionFailure tf ) { org . junit . Assert . fail ( \"Can<sp>not<sp>reach<sp>this<sp>point\" ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( cluster )", "total": "clusterServerRefValid ( ) { com . sun . enterprise . config . serverbeans . Cluster cluster = habitat . getService ( com . sun . enterprise . config . serverbeans . Cluster . class , \"clusterA\" ) ; \"<AssertPlaceHolder>\" ; com . sun . enterprise . config . serverbeans . ServerRef sref = cluster . getServerRef ( ) . get ( 0 ) ; org . jvnet . hk2 . config . ConfigBean serverConfig = ( ( org . jvnet . hk2 . config . ConfigBean ) ( org . jvnet . hk2 . config . ConfigBean . unwrap ( sref ) ) ) ; java . util . Map < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > changes = new java . util . HashMap < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > ( ) ; java . util . Map < java . lang . String , java . lang . String > configChanges = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; configChanges . put ( \"ref\" , \"server\" ) ; changes . put ( serverConfig , configChanges ) ; try { org . jvnet . hk2 . config . ConfigSupport cs = getHabitat ( ) . getService ( org . jvnet . hk2 . config . ConfigSupport . class ) ; cs . apply ( changes ) ; } catch ( org . jvnet . hk2 . config . TransactionFailure tf ) { org . junit . Assert . fail ( \"Can<sp>not<sp>reach<sp>this<sp>point\" ) ; } } getService ( com . sun . enterprise . util . io . ServerDirs , com . sun . enterprise . admin . servermgmt . services . AppserverServiceType ) { if ( Constants . LINUX_HACK ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . SMFService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . SMFService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . WindowsService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . WindowsService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; throw new java . lang . RuntimeException ( com . sun . enterprise . admin . servermgmt . services . Strings . get ( \"noSuitableServiceImplementation\" ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( cluster )"}
{"focal": "convertToJsonSchema ( org . opendaylight . yangtools . yang . model . api . Module , org . opendaylight . yangtools . yang . model . api . SchemaContext ) { final com . fasterxml . jackson . databind . node . ObjectNode models = com . fasterxml . jackson . databind . node . JsonNodeFactory . instance . objectNode ( ) ; final com . fasterxml . jackson . databind . node . ObjectNode emptyIdentifier = com . fasterxml . jackson . databind . node . JsonNodeFactory . instance . objectNode ( ) ; models . set ( org . opendaylight . netconf . sal . rest . doc . impl . ModelGenerator . UNIQUE_EMPTY_IDENTIFIER , emptyIdentifier ) ; topLevelModule = module ; processModules ( module , models , schemaContext ) ; processContainersAndLists ( module , models , schemaContext ) ; processRPCs ( module , models , schemaContext ) ; org . opendaylight . netconf . sal . rest . doc . impl . ModelGenerator . processIdentities ( module , models ) ; return models ; }", "testMethod": "testConvertToJsonSchema ( ) { com . google . common . base . Preconditions . checkArgument ( ( ( this . helper . getModules ( ) ) != null ) , \"No<sp>modules<sp>found\" ) ; final org . opendaylight . netconf . sal . rest . doc . impl . ModelGenerator generator = new org . opendaylight . netconf . sal . rest . doc . impl . ModelGenerator ( ) ; for ( final org . opendaylight . yangtools . yang . model . api . Module m : this . helper . getModules ( ) ) { if ( ( m . getQNameModule ( ) . getNamespace ( ) . toString ( ) . equals ( org . opendaylight . controller . sal . rest . doc . impl . ModelGeneratorTest . NAMESPACE ) ) && ( m . getQNameModule ( ) . getRevision ( ) . equals ( org . opendaylight . controller . sal . rest . doc . impl . ModelGeneratorTest . REVISION ) ) ) { final com . fasterxml . jackson . databind . node . ObjectNode jsonObject = generator . convertToJsonSchema ( m , this . schemaContext ) ; \"<AssertPlaceHolder>\" ; } } }", "assertLine": "org . junit . Assert . assertNotNull ( jsonObject )", "total": "testConvertToJsonSchema ( ) { com . google . common . base . Preconditions . checkArgument ( ( ( this . helper . getModules ( ) ) != null ) , \"No<sp>modules<sp>found\" ) ; final org . opendaylight . netconf . sal . rest . doc . impl . ModelGenerator generator = new org . opendaylight . netconf . sal . rest . doc . impl . ModelGenerator ( ) ; for ( final org . opendaylight . yangtools . yang . model . api . Module m : this . helper . getModules ( ) ) { if ( ( m . getQNameModule ( ) . getNamespace ( ) . toString ( ) . equals ( org . opendaylight . controller . sal . rest . doc . impl . ModelGeneratorTest . NAMESPACE ) ) && ( m . getQNameModule ( ) . getRevision ( ) . equals ( org . opendaylight . controller . sal . rest . doc . impl . ModelGeneratorTest . REVISION ) ) ) { final com . fasterxml . jackson . databind . node . ObjectNode jsonObject = generator . convertToJsonSchema ( m , this . schemaContext ) ; \"<AssertPlaceHolder>\" ; } } } convertToJsonSchema ( org . opendaylight . yangtools . yang . model . api . Module , org . opendaylight . yangtools . yang . model . api . SchemaContext ) { final com . fasterxml . jackson . databind . node . ObjectNode models = com . fasterxml . jackson . databind . node . JsonNodeFactory . instance . objectNode ( ) ; final com . fasterxml . jackson . databind . node . ObjectNode emptyIdentifier = com . fasterxml . jackson . databind . node . JsonNodeFactory . instance . objectNode ( ) ; models . set ( org . opendaylight . netconf . sal . rest . doc . impl . ModelGenerator . UNIQUE_EMPTY_IDENTIFIER , emptyIdentifier ) ; topLevelModule = module ; processModules ( module , models , schemaContext ) ; processContainersAndLists ( module , models , schemaContext ) ; processRPCs ( module , models , schemaContext ) ; org . opendaylight . netconf . sal . rest . doc . impl . ModelGenerator . processIdentities ( module , models ) ; return models ; }", "answer": "org . junit . Assert . assertNotNull ( jsonObject )"}
{"focal": "getTransactionManager ( org . apache . jena . sparql . core . DatasetGraph ) { return org . apache . jena . tdb . sys . TDBInternal . getStoreConnection ( dsg ) . getTransactionManager ( ) ; }", "testMethod": "basics_2 ( ) { org . apache . jena . sparql . core . DatasetGraph dsg = org . apache . jena . tdb . TDBFactory . createDatasetGraph ( ) ; org . apache . jena . tdb . transaction . TransactionManager txnmgr = org . apache . jena . tdb . sys . TDBInternal . getTransactionManager ( dsg ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( txnmgr )", "total": "basics_2 ( ) { org . apache . jena . sparql . core . DatasetGraph dsg = org . apache . jena . tdb . TDBFactory . createDatasetGraph ( ) ; org . apache . jena . tdb . transaction . TransactionManager txnmgr = org . apache . jena . tdb . sys . TDBInternal . getTransactionManager ( dsg ) ; \"<AssertPlaceHolder>\" ; } getTransactionManager ( org . apache . jena . sparql . core . DatasetGraph ) { return org . apache . jena . tdb . sys . TDBInternal . getStoreConnection ( dsg ) . getTransactionManager ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( txnmgr )"}
{"focal": "getOrderId ( ) { return orderId ; }", "testMethod": "saveOrder_shouldSetConceptForDrugOrdersIfNull ( ) { org . openmrs . Patient patient = patientService . getPatient ( 7 ) ; org . openmrs . CareSetting careSetting = orderService . getCareSetting ( 2 ) ; org . openmrs . OrderType orderType = orderService . getOrderTypeByName ( \"Drug<sp>order\" ) ; org . openmrs . DrugOrder order = new org . openmrs . DrugOrder ( ) ; org . openmrs . Encounter encounter = encounterService . getEncounter ( 3 ) ; order . setEncounter ( encounter ) ; order . setPatient ( patient ) ; order . setDrug ( conceptService . getDrug ( 2 ) ) ; order . setCareSetting ( careSetting ) ; order . setOrderer ( org . openmrs . api . context . Context . getProviderService ( ) . getProvider ( 1 ) ) ; order . setDateActivated ( encounter . getEncounterDatetime ( ) ) ; order . setOrderType ( orderType ) ; order . setDosingType ( org . openmrs . FreeTextDosingInstructions . class ) ; order . setInstructions ( \"None\" ) ; order . setDosingInstructions ( \"Test<sp>Instruction\" ) ; orderService . saveOrder ( order , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( order . getOrderId ( ) )", "total": "saveOrder_shouldSetConceptForDrugOrdersIfNull ( ) { org . openmrs . Patient patient = patientService . getPatient ( 7 ) ; org . openmrs . CareSetting careSetting = orderService . getCareSetting ( 2 ) ; org . openmrs . OrderType orderType = orderService . getOrderTypeByName ( \"Drug<sp>order\" ) ; org . openmrs . DrugOrder order = new org . openmrs . DrugOrder ( ) ; org . openmrs . Encounter encounter = encounterService . getEncounter ( 3 ) ; order . setEncounter ( encounter ) ; order . setPatient ( patient ) ; order . setDrug ( conceptService . getDrug ( 2 ) ) ; order . setCareSetting ( careSetting ) ; order . setOrderer ( org . openmrs . api . context . Context . getProviderService ( ) . getProvider ( 1 ) ) ; order . setDateActivated ( encounter . getEncounterDatetime ( ) ) ; order . setOrderType ( orderType ) ; order . setDosingType ( org . openmrs . FreeTextDosingInstructions . class ) ; order . setInstructions ( \"None\" ) ; order . setDosingInstructions ( \"Test<sp>Instruction\" ) ; orderService . saveOrder ( order , null ) ; \"<AssertPlaceHolder>\" ; } getOrderId ( ) { return orderId ; }", "answer": "org . junit . Assert . assertNotNull ( order . getOrderId ( ) )"}
{"focal": "getService ( java . lang . Class , java . lang . String ) { try { return ( ( B ) ( node . getClass ( ) . getMethod ( \"getService\" , java . lang . Class . class , java . lang . String . class ) . invoke ( node , businessInterface , serviceName ) ) ) ; } catch ( java . lang . Throwable e ) { org . apache . tuscany . sca . node . NodeFactory . NodeProxy . handleException ( e ) ; return null ; } }", "testMethod": "testDifferentObjectRMI ( ) { itest . common . intf . ClientIntf client = itest . CrossContribTestCase . node . getService ( itest . common . intf . ClientIntf . class , \"ClientRMI\" ) ; \"<AssertPlaceHolder>\" ; client . callObjectGraphCheck ( 2 ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( client )", "total": "testDifferentObjectRMI ( ) { itest . common . intf . ClientIntf client = itest . CrossContribTestCase . node . getService ( itest . common . intf . ClientIntf . class , \"ClientRMI\" ) ; \"<AssertPlaceHolder>\" ; client . callObjectGraphCheck ( 2 ) ; } getService ( java . lang . Class , java . lang . String ) { try { return ( ( B ) ( node . getClass ( ) . getMethod ( \"getService\" , java . lang . Class . class , java . lang . String . class ) . invoke ( node , businessInterface , serviceName ) ) ) ; } catch ( java . lang . Throwable e ) { org . apache . tuscany . sca . node . NodeFactory . NodeProxy . handleException ( e ) ; return null ; } }", "answer": "org . junit . Assert . assertNotNull ( client )"}
{"focal": "getClass ( java . lang . Class ) { if ( iClass == null ) return null ; return getClass ( iClass . getSimpleName ( ) ) ; }", "testMethod": "testDropIndex ( ) { java . lang . String className = \"testDropIndex\" ; java . lang . String propertyName = \"foo\" ; com . orientechnologies . orient . core . metadata . schema . OSchema schema = com . orientechnologies . orient . core . sql . executor . ODropPropertyStatementExecutionTest . db . getMetadata ( ) . getSchema ( ) ; schema . createClass ( className ) . createProperty ( propertyName , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE ) ; schema . reload ( ) ; \"<AssertPlaceHolder>\" ; try { com . orientechnologies . orient . core . sql . executor . ODropPropertyStatementExecutionTest . db . command ( ( ( ( \"drop<sp>property<sp>\" + className ) + \".\" ) + propertyName ) ) ; org . junit . Assert . fail ( ) ; } catch ( com . orientechnologies . orient . core . exception . OCommandExecutionException e ) { } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( schema . getClass ( className ) . getProperty ( propertyName ) )", "total": "testDropIndex ( ) { java . lang . String className = \"testDropIndex\" ; java . lang . String propertyName = \"foo\" ; com . orientechnologies . orient . core . metadata . schema . OSchema schema = com . orientechnologies . orient . core . sql . executor . ODropPropertyStatementExecutionTest . db . getMetadata ( ) . getSchema ( ) ; schema . createClass ( className ) . createProperty ( propertyName , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE ) ; schema . reload ( ) ; \"<AssertPlaceHolder>\" ; try { com . orientechnologies . orient . core . sql . executor . ODropPropertyStatementExecutionTest . db . command ( ( ( ( \"drop<sp>property<sp>\" + className ) + \".\" ) + propertyName ) ) ; org . junit . Assert . fail ( ) ; } catch ( com . orientechnologies . orient . core . exception . OCommandExecutionException e ) { } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( ) ; } } getClass ( java . lang . Class ) { if ( iClass == null ) return null ; return getClass ( iClass . getSimpleName ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( schema . getClass ( className ) . getProperty ( propertyName ) )"}
{"focal": "receive ( long ) { session . lock ( ) ; try { if ( ActiveMQRALogger . LOGGER . isTraceEnabled ( ) ) { ActiveMQRALogger . LOGGER . trace ( ( ( ( \"receive<sp>\" + ( this ) ) + \"<sp>timeout=\" ) + timeout ) ) ; } checkState ( ) ; javax . jms . Message message = consumer . receive ( timeout ) ; if ( ActiveMQRALogger . LOGGER . isTraceEnabled ( ) ) { ActiveMQRALogger . LOGGER . trace ( ( ( ( \"received<sp>\" + ( this ) ) + \"<sp>result=\" ) + message ) ) ; } if ( message == null ) { return null ; } else { return wrapMessage ( message ) ; } } finally { session . unlock ( ) ; } }", "testMethod": "testAckWithWrongMessageId ( ) { conn . connect ( defUser , defPass ) ; subscribe ( conn , \"sub1\" , Stomp . Headers . Subscribe . AckModeValues . CLIENT ) ; sendJmsMessage ( getName ( ) ) ; org . apache . activemq . artemis . tests . integration . stomp . util . ClientStompFrame frame = conn . receiveFrame ( ) ; frame . getHeader ( Stomp . Headers . Message . MESSAGE_ID ) ; ack ( conn , \"sub2\" , \"someother\" , null ) ; org . apache . activemq . artemis . tests . integration . stomp . util . ClientStompFrame error = conn . receiveFrame ( ) ; IntegrationTestLogger . LOGGER . info ( ( \"Receiver<sp>error:<sp>\" + error ) ) ; unsubscribe ( conn , \"sub1\" ) ; conn . disconnect ( ) ; javax . jms . MessageConsumer consumer = session . createConsumer ( queue ) ; javax . jms . Message message = consumer . receive ( 1000 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( message )", "total": "testAckWithWrongMessageId ( ) { conn . connect ( defUser , defPass ) ; subscribe ( conn , \"sub1\" , Stomp . Headers . Subscribe . AckModeValues . CLIENT ) ; sendJmsMessage ( getName ( ) ) ; org . apache . activemq . artemis . tests . integration . stomp . util . ClientStompFrame frame = conn . receiveFrame ( ) ; frame . getHeader ( Stomp . Headers . Message . MESSAGE_ID ) ; ack ( conn , \"sub2\" , \"someother\" , null ) ; org . apache . activemq . artemis . tests . integration . stomp . util . ClientStompFrame error = conn . receiveFrame ( ) ; IntegrationTestLogger . LOGGER . info ( ( \"Receiver<sp>error:<sp>\" + error ) ) ; unsubscribe ( conn , \"sub1\" ) ; conn . disconnect ( ) ; javax . jms . MessageConsumer consumer = session . createConsumer ( queue ) ; javax . jms . Message message = consumer . receive ( 1000 ) ; \"<AssertPlaceHolder>\" ; } receive ( long ) { session . lock ( ) ; try { if ( ActiveMQRALogger . LOGGER . isTraceEnabled ( ) ) { ActiveMQRALogger . LOGGER . trace ( ( ( ( \"receive<sp>\" + ( this ) ) + \"<sp>timeout=\" ) + timeout ) ) ; } checkState ( ) ; javax . jms . Message message = consumer . receive ( timeout ) ; if ( ActiveMQRALogger . LOGGER . isTraceEnabled ( ) ) { ActiveMQRALogger . LOGGER . trace ( ( ( ( \"received<sp>\" + ( this ) ) + \"<sp>result=\" ) + message ) ) ; } if ( message == null ) { return null ; } else { return wrapMessage ( message ) ; } } finally { session . unlock ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( message )"}
{"focal": "getCurrentEventDef ( ) { org . eclipse . tracecompass . ctf . core . trace . CTFStreamInputReader top = getTopStream ( ) ; return top != null ? top . getCurrentEvent ( ) : null ; }", "testMethod": "testTrace ( ) { try { try ( org . eclipse . tracecompass . ctf . core . trace . CTFTraceReader reader = new org . eclipse . tracecompass . ctf . core . trace . CTFTraceReader ( trace ) ) { reader . getCurrentEventDef ( ) ; while ( reader . advance ( ) ) { \"<AssertPlaceHolder>\" ; } checkIfWeShoudlSucceed ( ) ; } } catch ( org . eclipse . tracecompass . ctf . core . CTFException e ) { checkIfWeShouldFail ( e ) ; } catch ( java . lang . OutOfMemoryError e ) { checkIfWeShouldFail ( e ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( reader . getCurrentEventDef ( ) )", "total": "testTrace ( ) { try { try ( org . eclipse . tracecompass . ctf . core . trace . CTFTraceReader reader = new org . eclipse . tracecompass . ctf . core . trace . CTFTraceReader ( trace ) ) { reader . getCurrentEventDef ( ) ; while ( reader . advance ( ) ) { \"<AssertPlaceHolder>\" ; } checkIfWeShoudlSucceed ( ) ; } } catch ( org . eclipse . tracecompass . ctf . core . CTFException e ) { checkIfWeShouldFail ( e ) ; } catch ( java . lang . OutOfMemoryError e ) { checkIfWeShouldFail ( e ) ; } } getCurrentEventDef ( ) { org . eclipse . tracecompass . ctf . core . trace . CTFStreamInputReader top = getTopStream ( ) ; return top != null ? top . getCurrentEvent ( ) : null ; }", "answer": "org . junit . Assert . assertNotNull ( reader . getCurrentEventDef ( ) )"}
{"focal": "read ( byte [ ] , int , int ) { ensureOpen ( ) ; if ( ( ( ( off | len ) | ( off + len ) ) | ( ( b . length ) - ( off + len ) ) ) < 0 ) { throw new java . lang . IndexOutOfBoundsException ( ) ; } else if ( len == 0 ) { return 0 ; } int n = read1 ( b , off , len ) ; if ( n <= 0 ) { return n ; } while ( ( n < len ) && ( ( in . available ( ) ) > 0 ) ) { int n1 = read1 ( b , ( off + n ) , ( len - n ) ) ; if ( n1 <= 0 ) { break ; } n += n1 ; } return n ; }", "testMethod": "test ( ) { net . jini . space . JavaSpace mySpace = theSpace . getProxy ( ) ; org . dancres . blitz . remote . LocalTxnMgr myMgr = new org . dancres . blitz . remote . LocalTxnMgr ( 1 , theSpace ) ; net . jini . core . entry . Entry myTemplate = new org . dancres . blitz . test . DummyEntry ( \"rhubarb\" ) ; org . dancres . blitz . junit . ServerTransaction myTxn = myMgr . newTxn ( ) ; System . out . println ( \"Write\" ) ; mySpace . write ( myTemplate , myTxn , Lease . FOREVER ) ; org . dancres . blitz . junit . LockTest . Taker myTaker = new org . dancres . blitz . junit . LockTest . Taker ( ) ; myTaker . start ( ) ; \"<AssertPlaceHolder>\" ; java . lang . Thread . sleep ( 5000 ) ; myTxn . commit ( ) ; myTaker . join ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( mySpace . read ( myTemplate , myTxn , Lease . FOREVER ) )", "total": "test ( ) { net . jini . space . JavaSpace mySpace = theSpace . getProxy ( ) ; org . dancres . blitz . remote . LocalTxnMgr myMgr = new org . dancres . blitz . remote . LocalTxnMgr ( 1 , theSpace ) ; net . jini . core . entry . Entry myTemplate = new org . dancres . blitz . test . DummyEntry ( \"rhubarb\" ) ; org . dancres . blitz . junit . ServerTransaction myTxn = myMgr . newTxn ( ) ; System . out . println ( \"Write\" ) ; mySpace . write ( myTemplate , myTxn , Lease . FOREVER ) ; org . dancres . blitz . junit . LockTest . Taker myTaker = new org . dancres . blitz . junit . LockTest . Taker ( ) ; myTaker . start ( ) ; \"<AssertPlaceHolder>\" ; java . lang . Thread . sleep ( 5000 ) ; myTxn . commit ( ) ; myTaker . join ( ) ; } read ( byte [ ] , int , int ) { ensureOpen ( ) ; if ( ( ( ( off | len ) | ( off + len ) ) | ( ( b . length ) - ( off + len ) ) ) < 0 ) { throw new java . lang . IndexOutOfBoundsException ( ) ; } else if ( len == 0 ) { return 0 ; } int n = read1 ( b , off , len ) ; if ( n <= 0 ) { return n ; } while ( ( n < len ) && ( ( in . available ( ) ) > 0 ) ) { int n1 = read1 ( b , ( off + n ) , ( len - n ) ) ; if ( n1 <= 0 ) { break ; } n += n1 ; } return n ; }", "answer": "org . junit . Assert . assertNotNull ( mySpace . read ( myTemplate , myTxn , Lease . FOREVER ) )"}
{"focal": "instanceForModifyRemoveAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>remove<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>remove<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"remove\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "testMethod": "testModifyTicketRemoveHostEmptyTicketId ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyRemoveAccess ( \"\" , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_HOST , hostName ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pi )", "total": "testModifyTicketRemoveHostEmptyTicketId ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyRemoveAccess ( \"\" , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_HOST , hostName ) ; \"<AssertPlaceHolder>\" ; } instanceForModifyRemoveAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>remove<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>remove<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"remove\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "answer": "org . junit . Assert . assertNotNull ( pi )"}
{"focal": "getMetricsQueryTokenEvent ( ) { return getMetricsQueryTokenEvent ( null ) ; }", "testMethod": "getMetricsQueryTokenEventIsSuccessful ( ) { com . ibm . watson . discovery . v1 . model . MetricTokenResponse response = discovery . getMetricsQueryTokenEvent ( ) . execute ( ) . getResult ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "getMetricsQueryTokenEventIsSuccessful ( ) { com . ibm . watson . discovery . v1 . model . MetricTokenResponse response = discovery . getMetricsQueryTokenEvent ( ) . execute ( ) . getResult ( ) ; \"<AssertPlaceHolder>\" ; } getMetricsQueryTokenEvent ( ) { return getMetricsQueryTokenEvent ( null ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "testMethod": "shouldCloseStreamsIfExceptionThrownWithStoreProperties ( ) { final java . io . InputStream storePropertiesStream = createMockStream ( ) ; final java . io . InputStream elementsSchemaStream = createMockStream ( ) ; final java . io . InputStream typesSchemaStream = createMockStream ( ) ; final java . io . InputStream aggregationSchemaStream = createMockStream ( ) ; final java . io . InputStream validationSchemaStream = createMockStream ( ) ; try { new uk . gov . gchq . gaffer . graph . Graph . Builder ( ) . storeProperties ( storePropertiesStream ) . addSchema ( elementsSchemaStream ) . addSchema ( typesSchemaStream ) . addSchema ( aggregationSchemaStream ) . addSchema ( validationSchemaStream ) . build ( ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; verify ( storePropertiesStream , atLeastOnce ( ) ) . close ( ) ; verify ( elementsSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( typesSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( aggregationSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( validationSchemaStream , atLeastOnce ( ) ) . close ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "shouldCloseStreamsIfExceptionThrownWithStoreProperties ( ) { final java . io . InputStream storePropertiesStream = createMockStream ( ) ; final java . io . InputStream elementsSchemaStream = createMockStream ( ) ; final java . io . InputStream typesSchemaStream = createMockStream ( ) ; final java . io . InputStream aggregationSchemaStream = createMockStream ( ) ; final java . io . InputStream validationSchemaStream = createMockStream ( ) ; try { new uk . gov . gchq . gaffer . graph . Graph . Builder ( ) . storeProperties ( storePropertiesStream ) . addSchema ( elementsSchemaStream ) . addSchema ( typesSchemaStream ) . addSchema ( aggregationSchemaStream ) . addSchema ( validationSchemaStream ) . build ( ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final java . lang . Exception e ) { \"<AssertPlaceHolder>\" ; verify ( storePropertiesStream , atLeastOnce ( ) ) . close ( ) ; verify ( elementsSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( typesSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( aggregationSchemaStream , atLeastOnce ( ) ) . close ( ) ; verify ( validationSchemaStream , atLeastOnce ( ) ) . close ( ) ; } } getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "processEntry ( org . apache . abdera . protocol . server . RequestContext , org . apache . abdera . protocol . server . CollectionAdapter ) { java . lang . String method = context . getMethod ( ) ; if ( method . equalsIgnoreCase ( \"GET\" ) ) { return adapter . getEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"POST\" ) ) { return adapter . postEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"PUT\" ) ) { return adapter . putEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"DELETE\" ) ) { return adapter . deleteEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"HEAD\" ) ) { return adapter . headEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"OPTIONS\" ) ) { return adapter . optionsEntry ( context ) ; } else { return null ; } }", "testMethod": "testProcessEntryOptions ( ) { org . easymock . EasyMock . replay ( responseMock ) ; org . easymock . EasyMock . expect ( requestMock . getMethod ( ) ) . andReturn ( \"OPTIONS\" ) ; org . easymock . EasyMock . replay ( requestMock ) ; org . easymock . EasyMock . expect ( adapterMock . optionsEntry ( requestMock ) ) . andReturn ( responseMock ) ; org . easymock . EasyMock . replay ( adapterMock ) ; org . apache . abdera . protocol . server . ResponseContext response = processor . processEntry ( requestMock , adapterMock ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testProcessEntryOptions ( ) { org . easymock . EasyMock . replay ( responseMock ) ; org . easymock . EasyMock . expect ( requestMock . getMethod ( ) ) . andReturn ( \"OPTIONS\" ) ; org . easymock . EasyMock . replay ( requestMock ) ; org . easymock . EasyMock . expect ( adapterMock . optionsEntry ( requestMock ) ) . andReturn ( responseMock ) ; org . easymock . EasyMock . replay ( adapterMock ) ; org . apache . abdera . protocol . server . ResponseContext response = processor . processEntry ( requestMock , adapterMock ) ; \"<AssertPlaceHolder>\" ; } processEntry ( org . apache . abdera . protocol . server . RequestContext , org . apache . abdera . protocol . server . CollectionAdapter ) { java . lang . String method = context . getMethod ( ) ; if ( method . equalsIgnoreCase ( \"GET\" ) ) { return adapter . getEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"POST\" ) ) { return adapter . postEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"PUT\" ) ) { return adapter . putEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"DELETE\" ) ) { return adapter . deleteEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"HEAD\" ) ) { return adapter . headEntry ( context ) ; } else if ( method . equalsIgnoreCase ( \"OPTIONS\" ) ) { return adapter . optionsEntry ( context ) ; } else { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "createStatement ( int , int ) { return createStatement ( resultSetType , resultSetConcurrency , this . getHoldability ( ) ) ; }", "testMethod": "testCreateStatementIntInt ( ) { connection = new org . xenei . jdbc4sparql . J4SConnection ( driver , url , properties ) ; final java . sql . Statement stmt = connection . createStatement ( ResultSet . TYPE_SCROLL_INSENSITIVE , ResultSet . CONCUR_READ_ONLY ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( stmt )", "total": "testCreateStatementIntInt ( ) { connection = new org . xenei . jdbc4sparql . J4SConnection ( driver , url , properties ) ; final java . sql . Statement stmt = connection . createStatement ( ResultSet . TYPE_SCROLL_INSENSITIVE , ResultSet . CONCUR_READ_ONLY ) ; \"<AssertPlaceHolder>\" ; } createStatement ( int , int ) { return createStatement ( resultSetType , resultSetConcurrency , this . getHoldability ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( stmt )"}
{"focal": "createMetadata ( ) { return metadata ; }", "testMethod": "testReadable ( ) { java . util . ArrayList < java . io . File > files = new java . util . ArrayList < java . io . File > ( 4 ) ; files . add ( new java . io . File ( outputDir , \"org/hibernate/tool/hbm2x/hbm2hbmxml/CompositeElementTest/Fee.hbm.xml\" ) ) ; files . add ( new java . io . File ( outputDir , \"org/hibernate/tool/hbm2x/hbm2hbmxml/CompositeElementTest/Glarch.hbm.xml\" ) ) ; java . util . Properties properties = new java . util . Properties ( ) ; properties . setProperty ( AvailableSettings . DIALECT , HibernateUtil . Dialect . class . getName ( ) ) ; org . hibernate . tool . api . metadata . MetadataDescriptor metadataDescriptor = org . hibernate . tool . api . metadata . MetadataDescriptorFactory . createNativeDescriptor ( null , files . toArray ( new java . io . File [ 2 ] ) , properties ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( metadataDescriptor . createMetadata ( ) )", "total": "testReadable ( ) { java . util . ArrayList < java . io . File > files = new java . util . ArrayList < java . io . File > ( 4 ) ; files . add ( new java . io . File ( outputDir , \"org/hibernate/tool/hbm2x/hbm2hbmxml/CompositeElementTest/Fee.hbm.xml\" ) ) ; files . add ( new java . io . File ( outputDir , \"org/hibernate/tool/hbm2x/hbm2hbmxml/CompositeElementTest/Glarch.hbm.xml\" ) ) ; java . util . Properties properties = new java . util . Properties ( ) ; properties . setProperty ( AvailableSettings . DIALECT , HibernateUtil . Dialect . class . getName ( ) ) ; org . hibernate . tool . api . metadata . MetadataDescriptor metadataDescriptor = org . hibernate . tool . api . metadata . MetadataDescriptorFactory . createNativeDescriptor ( null , files . toArray ( new java . io . File [ 2 ] ) , properties ) ; \"<AssertPlaceHolder>\" ; } createMetadata ( ) { return metadata ; }", "answer": "org . junit . Assert . assertNotNull ( metadataDescriptor . createMetadata ( ) )"}
{"focal": "get ( ) { return org . talend . components . jdbc . avro . JDBCAvroRegistryString . sInstance ; }", "testMethod": "testSearchCustomRecord ( ) { java . util . Collection < org . talend . components . netsuite . client . model . RecordTypeInfo > recordTypes = org . talend . components . netsuite . v2018_2 . client . NetSuiteClientServiceIT . connection . getMetaDataSource ( ) . getRecordTypes ( ) ; org . talend . components . netsuite . client . model . RecordTypeInfo recordType = getCustomRecordType ( recordTypes , \"customrecord_campaign_revenue\" ) ; org . talend . components . netsuite . client . search . SearchQuery searchQuery = org . talend . components . netsuite . v2018_2 . client . NetSuiteClientServiceIT . connection . newSearch ( ) ; searchQuery . target ( recordType . getName ( ) ) ; org . talend . components . netsuite . client . search . SearchResultSet < com . netsuite . webservices . v2018_2 . platform . core . Record > rs = searchQuery . search ( ) ; int count = 10 ; while ( ( rs . next ( ) ) && ( ( count -- ) > 0 ) ) { com . netsuite . webservices . v2018_2 . platform . core . Record record = rs . get ( ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( record )", "total": "testSearchCustomRecord ( ) { java . util . Collection < org . talend . components . netsuite . client . model . RecordTypeInfo > recordTypes = org . talend . components . netsuite . v2018_2 . client . NetSuiteClientServiceIT . connection . getMetaDataSource ( ) . getRecordTypes ( ) ; org . talend . components . netsuite . client . model . RecordTypeInfo recordType = getCustomRecordType ( recordTypes , \"customrecord_campaign_revenue\" ) ; org . talend . components . netsuite . client . search . SearchQuery searchQuery = org . talend . components . netsuite . v2018_2 . client . NetSuiteClientServiceIT . connection . newSearch ( ) ; searchQuery . target ( recordType . getName ( ) ) ; org . talend . components . netsuite . client . search . SearchResultSet < com . netsuite . webservices . v2018_2 . platform . core . Record > rs = searchQuery . search ( ) ; int count = 10 ; while ( ( rs . next ( ) ) && ( ( count -- ) > 0 ) ) { com . netsuite . webservices . v2018_2 . platform . core . Record record = rs . get ( ) ; \"<AssertPlaceHolder>\" ; } } get ( ) { return org . talend . components . jdbc . avro . JDBCAvroRegistryString . sInstance ; }", "answer": "org . junit . Assert . assertNotNull ( record )"}
{"focal": "getRootEditPart ( ) { if ( ( rootPart ) == null ) { org . eclipse . gmf . runtime . diagram . ui . editparts . GraphicalEditPart part = ( ( org . eclipse . gmf . runtime . diagram . ui . editparts . GraphicalEditPart ) ( getDiagramEditPart ( ) . getChildren ( ) . get ( 0 ) ) ) ; rootPart = ( ( org . eclipse . gmf . runtime . diagram . ui . editparts . GraphicalEditPart ) ( part . getChildren ( ) . get ( 1 ) ) ) ; } return rootPart ; }", "testMethod": "testCombinedFragment ( ) { org . eclipse . papyrus . uml . diagram . sequence . edit . parts . CombinedFragmentEditPart cf = ( ( org . eclipse . papyrus . uml . diagram . sequence . edit . parts . CombinedFragmentEditPart ) ( createNode ( UMLElementTypes . CombinedFragment_3004 , getRootEditPart ( ) , new org . eclipse . draw2d . geometry . Point ( 100 , 100 ) , new org . eclipse . draw2d . geometry . Dimension ( 200 , 200 ) ) ) ) ; \"<AssertPlaceHolder>\" ; testElementIcon ( cf . getPrimaryShape ( ) . getHeaderLabel ( ) , cf . getNotationView ( ) , true ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( cf )", "total": "testCombinedFragment ( ) { org . eclipse . papyrus . uml . diagram . sequence . edit . parts . CombinedFragmentEditPart cf = ( ( org . eclipse . papyrus . uml . diagram . sequence . edit . parts . CombinedFragmentEditPart ) ( createNode ( UMLElementTypes . CombinedFragment_3004 , getRootEditPart ( ) , new org . eclipse . draw2d . geometry . Point ( 100 , 100 ) , new org . eclipse . draw2d . geometry . Dimension ( 200 , 200 ) ) ) ) ; \"<AssertPlaceHolder>\" ; testElementIcon ( cf . getPrimaryShape ( ) . getHeaderLabel ( ) , cf . getNotationView ( ) , true ) ; } getRootEditPart ( ) { if ( ( rootPart ) == null ) { org . eclipse . gmf . runtime . diagram . ui . editparts . GraphicalEditPart part = ( ( org . eclipse . gmf . runtime . diagram . ui . editparts . GraphicalEditPart ) ( getDiagramEditPart ( ) . getChildren ( ) . get ( 0 ) ) ) ; rootPart = ( ( org . eclipse . gmf . runtime . diagram . ui . editparts . GraphicalEditPart ) ( part . getChildren ( ) . get ( 1 ) ) ) ; } return rootPart ; }", "answer": "org . junit . Assert . assertNotNull ( cf )"}
{"focal": "getFileStoreId ( ) { return fileStoreId ; }", "testMethod": "testUploadFile ( ) { final java . io . File newFile = createTempFileWithContent ( ) ; final org . egov . infra . filestore . entity . FileStoreMapper map = diskFileService . store ( newFile , \"fileName\" , \"testmodule\" , \"text/plain\" ) ; deleteTempFiles ( newFile , map ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( map . getFileStoreId ( ) )", "total": "testUploadFile ( ) { final java . io . File newFile = createTempFileWithContent ( ) ; final org . egov . infra . filestore . entity . FileStoreMapper map = diskFileService . store ( newFile , \"fileName\" , \"testmodule\" , \"text/plain\" ) ; deleteTempFiles ( newFile , map ) ; \"<AssertPlaceHolder>\" ; } getFileStoreId ( ) { return fileStoreId ; }", "answer": "org . junit . Assert . assertNotNull ( map . getFileStoreId ( ) )"}
{"focal": "getRef ( java . lang . String ) { return advertisedRefs . get ( name ) ; }", "testMethod": "testListRemoteWithoutLocalRepository ( ) { try ( org . eclipse . jgit . transport . Transport t = org . eclipse . jgit . transport . Transport . open ( smartAuthNoneURI ) ; org . eclipse . jgit . transport . FetchConnection c = t . openFetch ( ) ) { org . eclipse . jgit . lib . Ref head = c . getRef ( Constants . HEAD ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( head )", "total": "testListRemoteWithoutLocalRepository ( ) { try ( org . eclipse . jgit . transport . Transport t = org . eclipse . jgit . transport . Transport . open ( smartAuthNoneURI ) ; org . eclipse . jgit . transport . FetchConnection c = t . openFetch ( ) ) { org . eclipse . jgit . lib . Ref head = c . getRef ( Constants . HEAD ) ; \"<AssertPlaceHolder>\" ; } } getRef ( java . lang . String ) { return advertisedRefs . get ( name ) ; }", "answer": "org . junit . Assert . assertNotNull ( head )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "rebindContentKeyNoX509CertificateSuccess ( ) { com . microsoft . windowsazure . services . media . models . ContentKeyInfo contentKeyInfo = createValidTestContentKey ( \"rebindContentKeyNoX509Success\" ) ; java . lang . String contentKey = service . action ( com . microsoft . windowsazure . services . media . models . ContentKey . rebind ( contentKeyInfo . getId ( ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( contentKey )", "total": "rebindContentKeyNoX509CertificateSuccess ( ) { com . microsoft . windowsazure . services . media . models . ContentKeyInfo contentKeyInfo = createValidTestContentKey ( \"rebindContentKeyNoX509Success\" ) ; java . lang . String contentKey = service . action ( com . microsoft . windowsazure . services . media . models . ContentKey . rebind ( contentKeyInfo . getId ( ) ) ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( contentKey )"}
{"focal": "preCompact ( org . apache . hadoop . hbase . coprocessor . ObserverContext , org . apache . hadoop . hbase . regionserver . Store , org . apache . hadoop . hbase . regionserver . InternalScanner , org . apache . hadoop . hbase . regionserver . ScanType , org . apache . hadoop . hbase . regionserver . compactions . CompactionRequest ) { return new uk . gov . gchq . gaffer . hbasestore . coprocessor . scanner . StoreScanner ( scanner , schema , serialisation ) ; }", "testMethod": "shouldDelegatePreCompactWithRequestToStoreScanner ( ) { final org . apache . hadoop . hbase . coprocessor . ObserverContext < org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment > e = mock ( org . apache . hadoop . hbase . coprocessor . ObserverContext . class ) ; final org . apache . hadoop . hbase . regionserver . Store store = mock ( org . apache . hadoop . hbase . regionserver . Store . class ) ; final org . apache . hadoop . hbase . regionserver . InternalScanner scanner = mock ( org . apache . hadoop . hbase . regionserver . InternalScanner . class ) ; final org . apache . hadoop . hbase . regionserver . compactions . CompactionRequest request = mock ( org . apache . hadoop . hbase . regionserver . compactions . CompactionRequest . class ) ; final uk . gov . gchq . gaffer . hbasestore . coprocessor . scanner . StoreScanner storeScanner = ( ( uk . gov . gchq . gaffer . hbasestore . coprocessor . scanner . StoreScanner ) ( coprocessor . preCompact ( e , store , scanner , ScanType . COMPACT_DROP_DELETES , request ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( storeScanner )", "total": "shouldDelegatePreCompactWithRequestToStoreScanner ( ) { final org . apache . hadoop . hbase . coprocessor . ObserverContext < org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment > e = mock ( org . apache . hadoop . hbase . coprocessor . ObserverContext . class ) ; final org . apache . hadoop . hbase . regionserver . Store store = mock ( org . apache . hadoop . hbase . regionserver . Store . class ) ; final org . apache . hadoop . hbase . regionserver . InternalScanner scanner = mock ( org . apache . hadoop . hbase . regionserver . InternalScanner . class ) ; final org . apache . hadoop . hbase . regionserver . compactions . CompactionRequest request = mock ( org . apache . hadoop . hbase . regionserver . compactions . CompactionRequest . class ) ; final uk . gov . gchq . gaffer . hbasestore . coprocessor . scanner . StoreScanner storeScanner = ( ( uk . gov . gchq . gaffer . hbasestore . coprocessor . scanner . StoreScanner ) ( coprocessor . preCompact ( e , store , scanner , ScanType . COMPACT_DROP_DELETES , request ) ) ) ; \"<AssertPlaceHolder>\" ; } preCompact ( org . apache . hadoop . hbase . coprocessor . ObserverContext , org . apache . hadoop . hbase . regionserver . Store , org . apache . hadoop . hbase . regionserver . InternalScanner , org . apache . hadoop . hbase . regionserver . ScanType , org . apache . hadoop . hbase . regionserver . compactions . CompactionRequest ) { return new uk . gov . gchq . gaffer . hbasestore . coprocessor . scanner . StoreScanner ( scanner , schema , serialisation ) ; }", "answer": "org . junit . Assert . assertNotNull ( storeScanner )"}
{"focal": "getTextParagraphs ( ) { java . util . List < java . util . List < org . apache . poi . xslf . usermodel . XSLFTextParagraph > > tp = new java . util . ArrayList ( ) ; for ( org . apache . poi . xslf . usermodel . XSLFShape sh : super . getShapes ( ) ) { if ( sh instanceof org . apache . poi . xslf . usermodel . XSLFTextShape ) { org . apache . poi . xslf . usermodel . XSLFTextShape txt = ( ( org . apache . poi . xslf . usermodel . XSLFTextShape ) ( sh ) ) ; tp . add ( txt . getTextParagraphs ( ) ) ; } } return tp ; }", "testMethod": "bug42485 ( ) { org . apache . poi . hslf . usermodel . HSLFSlideShow ppt = org . apache . poi . hslf . usermodel . TestBugs . open ( \"42485.ppt\" ) ; for ( org . apache . poi . hslf . usermodel . HSLFShape shape : ppt . getSlides ( ) . get ( 0 ) . getShapes ( ) ) { if ( shape instanceof org . apache . poi . hslf . usermodel . HSLFGroupShape ) { org . apache . poi . hslf . usermodel . HSLFGroupShape group = ( ( org . apache . poi . hslf . usermodel . HSLFGroupShape ) ( shape ) ) ; for ( org . apache . poi . hslf . usermodel . HSLFShape sh : group . getShapes ( ) ) { if ( sh instanceof org . apache . poi . hslf . usermodel . HSLFTextBox ) { org . apache . poi . hslf . usermodel . HSLFTextBox txt = ( ( org . apache . poi . hslf . usermodel . HSLFTextBox ) ( sh ) ) ; \"<AssertPlaceHolder>\" ; } } } } ppt . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( txt . getTextParagraphs ( ) )", "total": "bug42485 ( ) { org . apache . poi . hslf . usermodel . HSLFSlideShow ppt = org . apache . poi . hslf . usermodel . TestBugs . open ( \"42485.ppt\" ) ; for ( org . apache . poi . hslf . usermodel . HSLFShape shape : ppt . getSlides ( ) . get ( 0 ) . getShapes ( ) ) { if ( shape instanceof org . apache . poi . hslf . usermodel . HSLFGroupShape ) { org . apache . poi . hslf . usermodel . HSLFGroupShape group = ( ( org . apache . poi . hslf . usermodel . HSLFGroupShape ) ( shape ) ) ; for ( org . apache . poi . hslf . usermodel . HSLFShape sh : group . getShapes ( ) ) { if ( sh instanceof org . apache . poi . hslf . usermodel . HSLFTextBox ) { org . apache . poi . hslf . usermodel . HSLFTextBox txt = ( ( org . apache . poi . hslf . usermodel . HSLFTextBox ) ( sh ) ) ; \"<AssertPlaceHolder>\" ; } } } } ppt . close ( ) ; } getTextParagraphs ( ) { java . util . List < java . util . List < org . apache . poi . xslf . usermodel . XSLFTextParagraph > > tp = new java . util . ArrayList ( ) ; for ( org . apache . poi . xslf . usermodel . XSLFShape sh : super . getShapes ( ) ) { if ( sh instanceof org . apache . poi . xslf . usermodel . XSLFTextShape ) { org . apache . poi . xslf . usermodel . XSLFTextShape txt = ( ( org . apache . poi . xslf . usermodel . XSLFTextShape ) ( sh ) ) ; tp . add ( txt . getTextParagraphs ( ) ) ; } } return tp ; }", "answer": "org . junit . Assert . assertNotNull ( txt . getTextParagraphs ( ) )"}
{"focal": "getParserTree ( iguana . utils . input . Input ) { return getParserTree ( input , new org . iguana . parser . ParseOptions . Builder ( ) . build ( ) ) ; }", "testMethod": "test2 ( ) { iguana . utils . input . Input input = iguana . utils . input . Input . fromString ( \"egdgdgd\" ) ; org . iguana . parser . IguanaParser parser = new org . iguana . parser . IguanaParser ( grammar ) ; org . iguana . parsetree . ParseTreeNode result = parser . getParserTree ( input ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "test2 ( ) { iguana . utils . input . Input input = iguana . utils . input . Input . fromString ( \"egdgdgd\" ) ; org . iguana . parser . IguanaParser parser = new org . iguana . parser . IguanaParser ( grammar ) ; org . iguana . parsetree . ParseTreeNode result = parser . getParserTree ( input ) ; \"<AssertPlaceHolder>\" ; } getParserTree ( iguana . utils . input . Input ) { return getParserTree ( input , new org . iguana . parser . ParseOptions . Builder ( ) . build ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getPath ( java . net . URI ) { com . beijunyi . parallelgit . filesystem . GitFileSystem gfs = getFileSystem ( uri ) ; java . lang . String file = com . beijunyi . parallelgit . filesystem . utils . GfsUriUtils . getFile ( uri ) ; return gfs . getPath ( file ) . toRealPath ( ) ; }", "testMethod": "setOwnerOfFile_shouldThrowUnsupportedOperationException ( ) { writeToCache ( \"/file.txt\" ) ; commitToMaster ( ) ; initGitFileSystem ( ) ; com . beijunyi . parallelgit . filesystem . io . GfsFileAttributeView . Posix view = provider . getFileAttributeView ( gfs . getPath ( \"/file.txt\" ) , GfsFileAttributeView . Posix . class ) ; \"<AssertPlaceHolder>\" ; view . setOwner ( new java . nio . file . attribute . UserPrincipal ( ) { @ javax . annotation . Nonnull @ com . beijunyi . parallelgit . filesystem . io . Override public java . lang . String getName ( ) { return \"some_owner\" ; } } ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( view )", "total": "setOwnerOfFile_shouldThrowUnsupportedOperationException ( ) { writeToCache ( \"/file.txt\" ) ; commitToMaster ( ) ; initGitFileSystem ( ) ; com . beijunyi . parallelgit . filesystem . io . GfsFileAttributeView . Posix view = provider . getFileAttributeView ( gfs . getPath ( \"/file.txt\" ) , GfsFileAttributeView . Posix . class ) ; \"<AssertPlaceHolder>\" ; view . setOwner ( new java . nio . file . attribute . UserPrincipal ( ) { @ javax . annotation . Nonnull @ com . beijunyi . parallelgit . filesystem . io . Override public java . lang . String getName ( ) { return \"some_owner\" ; } } ) ; } getPath ( java . net . URI ) { com . beijunyi . parallelgit . filesystem . GitFileSystem gfs = getFileSystem ( uri ) ; java . lang . String file = com . beijunyi . parallelgit . filesystem . utils . GfsUriUtils . getFile ( uri ) ; return gfs . getPath ( file ) . toRealPath ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( view )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testNuevo ( ) { log . debug ( \"Test<sp>'nuevo'\" ) ; mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; for ( int i = 0 ; i < 20 ; i ++ ) { mx . edu . um . mateo . inscripciones . model . Institucion institucion = new mx . edu . um . mateo . inscripciones . model . Institucion ( ) ; institucion . setNombre ( \"Nombre-test\" ) ; institucion . setPorcentaje ( new java . math . BigDecimal ( \"123\" ) ) ; institucion . setStatus ( \"A\" ) ; institucion . setOrganizacion ( usuario . getEmpresa ( ) . getOrganizacion ( ) ) ; currentSession ( ) . save ( institucion ) ; \"<AssertPlaceHolder>\" ; } this . mockMvc . perform ( get ( Constantes . PATH_COBROCAMPO_NUEVO ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_COBROCAMPO_NUEVO ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_INSTITUCION ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_COBROCAMPO ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( institucion . getId ( ) )", "total": "testNuevo ( ) { log . debug ( \"Test<sp>'nuevo'\" ) ; mx . edu . um . mateo . general . model . Usuario usuario = obtieneUsuario ( ) ; for ( int i = 0 ; i < 20 ; i ++ ) { mx . edu . um . mateo . inscripciones . model . Institucion institucion = new mx . edu . um . mateo . inscripciones . model . Institucion ( ) ; institucion . setNombre ( \"Nombre-test\" ) ; institucion . setPorcentaje ( new java . math . BigDecimal ( \"123\" ) ) ; institucion . setStatus ( \"A\" ) ; institucion . setOrganizacion ( usuario . getEmpresa ( ) . getOrganizacion ( ) ) ; currentSession ( ) . save ( institucion ) ; \"<AssertPlaceHolder>\" ; } this . mockMvc . perform ( get ( Constantes . PATH_COBROCAMPO_NUEVO ) ) . andExpect ( forwardedUrl ( ( ( \"/WEB-INF/jsp/\" + ( mx . edu . um . mateo . general . utils . Constantes . PATH_COBROCAMPO_NUEVO ) ) + \".jsp\" ) ) ) . andExpect ( model ( ) . attributeExists ( Constantes . CONTAINSKEY_INSTITUCION ) ) . andExpect ( model ( ) . attributeExists ( Constantes . ADDATTRIBUTE_COBROCAMPO ) ) ; } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( institucion . getId ( ) )"}
{"focal": "findMatchingAction ( java . lang . String , java . lang . Class ) { io . toast . tk . adapter . cache . ToastCache cache = io . toast . tk . adapter . cache . ToastCache . getInstance ( ) ; if ( actionAdapterClass != ( java . lang . Object . class ) ) { final java . util . List < java . lang . reflect . Method > actionMethods = cache . getActionMethodsByClass ( actionAdapterClass ) ; final io . toast . tk . core . annotation . ActionAdapter adapter = actionAdapterClass . getAnnotation ( io . toast . tk . core . annotation . ActionAdapter . class ) ; for ( final java . lang . reflect . Method actionMethod : actionMethods ) { final io . toast . tk . core . annotation . Action mainAction = actionMethod . getAnnotation ( io . toast . tk . core . annotation . Action . class ) ; io . toast . tk . runtime . bean . ActionCommandDescriptor foundMethod = io . toast . tk . runtime . block . TestBlockRunner . matchMethod ( actionImpl , mainAction . action ( ) , actionMethod ) ; if ( foundMethod != null ) { return foundMethod ; } else if ( ( adapter != null ) && ( io . toast . tk . runtime . block . TestBlockRunner . hasMapping ( mainAction , adapter ) ) ) { foundMethod = matchAgainstActionIdMapping ( actionImpl , adapter . name ( ) , actionMethod , mainAction ) ; if ( foundMethod != null ) { return foundMethod ; } } } if ( ( actionAdapterClass . getSuperclass ( ) ) != null ) { return findMatchingAction ( actionImpl , actionAdapterClass . getSuperclass ( ) ) ; } } return null ; }", "testMethod": "testMethodReplacementWithTwoParamaters ( ) { java . lang . String actionSentence = \"Inclure<sp>dans<sp>la<sp>variable<sp>*$flux*<sp>le<sp>flux<sp>*$xml*\" ; io . toast . tk . runtime . bean . ActionCommandDescriptor actionDescriptor = blockRunner . findMatchingAction ( actionSentence , io . toast . tk . test . runtime . resource . XmlAdapterExample . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( actionDescriptor )", "total": "testMethodReplacementWithTwoParamaters ( ) { java . lang . String actionSentence = \"Inclure<sp>dans<sp>la<sp>variable<sp>*$flux*<sp>le<sp>flux<sp>*$xml*\" ; io . toast . tk . runtime . bean . ActionCommandDescriptor actionDescriptor = blockRunner . findMatchingAction ( actionSentence , io . toast . tk . test . runtime . resource . XmlAdapterExample . class ) ; \"<AssertPlaceHolder>\" ; } findMatchingAction ( java . lang . String , java . lang . Class ) { io . toast . tk . adapter . cache . ToastCache cache = io . toast . tk . adapter . cache . ToastCache . getInstance ( ) ; if ( actionAdapterClass != ( java . lang . Object . class ) ) { final java . util . List < java . lang . reflect . Method > actionMethods = cache . getActionMethodsByClass ( actionAdapterClass ) ; final io . toast . tk . core . annotation . ActionAdapter adapter = actionAdapterClass . getAnnotation ( io . toast . tk . core . annotation . ActionAdapter . class ) ; for ( final java . lang . reflect . Method actionMethod : actionMethods ) { final io . toast . tk . core . annotation . Action mainAction = actionMethod . getAnnotation ( io . toast . tk . core . annotation . Action . class ) ; io . toast . tk . runtime . bean . ActionCommandDescriptor foundMethod = io . toast . tk . runtime . block . TestBlockRunner . matchMethod ( actionImpl , mainAction . action ( ) , actionMethod ) ; if ( foundMethod != null ) { return foundMethod ; } else if ( ( adapter != null ) && ( io . toast . tk . runtime . block . TestBlockRunner . hasMapping ( mainAction , adapter ) ) ) { foundMethod = matchAgainstActionIdMapping ( actionImpl , adapter . name ( ) , actionMethod , mainAction ) ; if ( foundMethod != null ) { return foundMethod ; } } } if ( ( actionAdapterClass . getSuperclass ( ) ) != null ) { return findMatchingAction ( actionImpl , actionAdapterClass . getSuperclass ( ) ) ; } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( actionDescriptor )"}
{"focal": "of ( java . lang . String ) { return net . sourceforge . jwbf . core . actions . HttpActionClient . builder ( ) . withUrl ( url ) . build ( ) ; }", "testMethod": "testInitWithBuilder ( ) { java . lang . String url = \"http://localhost/\" ; testee = new net . sourceforge . jwbf . mediawiki . bots . MediaWikiBot ( net . sourceforge . jwbf . core . actions . HttpActionClient . of ( url ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( testee )", "total": "testInitWithBuilder ( ) { java . lang . String url = \"http://localhost/\" ; testee = new net . sourceforge . jwbf . mediawiki . bots . MediaWikiBot ( net . sourceforge . jwbf . core . actions . HttpActionClient . of ( url ) ) ; \"<AssertPlaceHolder>\" ; } of ( java . lang . String ) { return net . sourceforge . jwbf . core . actions . HttpActionClient . builder ( ) . withUrl ( url ) . build ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( testee )"}
{"focal": "newConnection ( javax . sql . DataSource ) { try { return new com . github . springtestdbunit . bean . DatabaseDataSourceConnectionFactoryBean ( dataSource ) . getObject ( ) ; } catch ( java . lang . Exception ex ) { throw new java . lang . IllegalStateException ( ex ) ; } }", "testMethod": "shouldSupportNewConnection ( ) { javax . sql . DataSource dataSource = mock ( javax . sql . DataSource . class ) ; java . sql . Connection connection = mock ( java . sql . Connection . class ) ; given ( dataSource . getConnection ( ) ) . willReturn ( connection ) ; org . dbunit . database . IDatabaseConnection databaseConnection = com . github . springtestdbunit . bean . DatabaseDataSourceConnectionFactoryBean . newConnection ( dataSource ) ; \"<AssertPlaceHolder>\" ; databaseConnection . getConnection ( ) . createStatement ( ) ; verify ( dataSource ) . getConnection ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( databaseConnection )", "total": "shouldSupportNewConnection ( ) { javax . sql . DataSource dataSource = mock ( javax . sql . DataSource . class ) ; java . sql . Connection connection = mock ( java . sql . Connection . class ) ; given ( dataSource . getConnection ( ) ) . willReturn ( connection ) ; org . dbunit . database . IDatabaseConnection databaseConnection = com . github . springtestdbunit . bean . DatabaseDataSourceConnectionFactoryBean . newConnection ( dataSource ) ; \"<AssertPlaceHolder>\" ; databaseConnection . getConnection ( ) . createStatement ( ) ; verify ( dataSource ) . getConnection ( ) ; } newConnection ( javax . sql . DataSource ) { try { return new com . github . springtestdbunit . bean . DatabaseDataSourceConnectionFactoryBean ( dataSource ) . getObject ( ) ; } catch ( java . lang . Exception ex ) { throw new java . lang . IllegalStateException ( ex ) ; } }", "answer": "org . junit . Assert . assertNotNull ( databaseConnection )"}
{"focal": "read ( java . lang . String ) { checkArgument ( ( ( entityAsString != null ) && ( ! ( entityAsString . isEmpty ( ) ) ) ) , \"The<sp>Parameter<sp>EntityAsString<sp>must<sp>not<sp>be<sp>null<sp>or<sp>Empty.\" ) ; return this . read ( new java . io . StringReader ( entityAsString ) ) ; }", "testMethod": "readJsonFromFileTest ( ) { org . geosdi . geoplatform . support . jackson . model . SimpleBean simpleBean = org . geosdi . geoplatform . support . jackson . mapper . SimpleBeanJacksonMapperTest . GP_JACKSON_MAPPER . read ( new java . io . File ( \"./src/test/resources/simple_bean.json\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( simpleBean )", "total": "readJsonFromFileTest ( ) { org . geosdi . geoplatform . support . jackson . model . SimpleBean simpleBean = org . geosdi . geoplatform . support . jackson . mapper . SimpleBeanJacksonMapperTest . GP_JACKSON_MAPPER . read ( new java . io . File ( \"./src/test/resources/simple_bean.json\" ) ) ; \"<AssertPlaceHolder>\" ; } read ( java . lang . String ) { checkArgument ( ( ( entityAsString != null ) && ( ! ( entityAsString . isEmpty ( ) ) ) ) , \"The<sp>Parameter<sp>EntityAsString<sp>must<sp>not<sp>be<sp>null<sp>or<sp>Empty.\" ) ; return this . read ( new java . io . StringReader ( entityAsString ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( simpleBean )"}
{"focal": "getTransactionLog ( org . apache . ranger . view . VXGroupUser , java . lang . String ) { return getTransactionLog ( vXGroupUser , null , action ) ; }", "testMethod": "test8getTransactionLog ( ) { org . apache . ranger . db . XXServiceDao xServiceDao = org . mockito . Mockito . mock ( org . apache . ranger . db . XXServiceDao . class ) ; org . apache . ranger . plugin . model . RangerPolicy rangerPolicy = rangerPolicy ( ) ; org . apache . ranger . entity . XXService xService = xService ( ) ; org . mockito . Mockito . when ( daoManager . getXXService ( ) ) . thenReturn ( xServiceDao ) ; org . mockito . Mockito . when ( xServiceDao . findByName ( rangerPolicy . getService ( ) ) ) . thenReturn ( xService ) ; java . util . List < org . apache . ranger . entity . XXTrxLog > dbXXTrxLogList = policyService . getTransactionLog ( rangerPolicy , 1 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dbXXTrxLogList )", "total": "test8getTransactionLog ( ) { org . apache . ranger . db . XXServiceDao xServiceDao = org . mockito . Mockito . mock ( org . apache . ranger . db . XXServiceDao . class ) ; org . apache . ranger . plugin . model . RangerPolicy rangerPolicy = rangerPolicy ( ) ; org . apache . ranger . entity . XXService xService = xService ( ) ; org . mockito . Mockito . when ( daoManager . getXXService ( ) ) . thenReturn ( xServiceDao ) ; org . mockito . Mockito . when ( xServiceDao . findByName ( rangerPolicy . getService ( ) ) ) . thenReturn ( xService ) ; java . util . List < org . apache . ranger . entity . XXTrxLog > dbXXTrxLogList = policyService . getTransactionLog ( rangerPolicy , 1 ) ; \"<AssertPlaceHolder>\" ; } getTransactionLog ( org . apache . ranger . view . VXGroupUser , java . lang . String ) { return getTransactionLog ( vXGroupUser , null , action ) ; }", "answer": "org . junit . Assert . assertNotNull ( dbXXTrxLogList )"}
{"focal": "execute ( ) { return execute ( collItemRef ) ; }", "testMethod": "increaseRevenue ( ) { final java . lang . Long result = container . getCompany ( ) . load ( ) . operations ( ) . increaseRevenue ( 12L ) . execute ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "increaseRevenue ( ) { final java . lang . Long result = container . getCompany ( ) . load ( ) . operations ( ) . increaseRevenue ( 12L ) . execute ( ) ; \"<AssertPlaceHolder>\" ; } execute ( ) { return execute ( collItemRef ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "add ( ) { add ( new net . nikr . eve . jeveasset . gui . shared . filter . FilterPanel ( this , filterControl ) ) ; }", "testMethod": "testTabsReprocessedBundle_en ( ) { net . nikr . eve . jeveasset . i18n . TabsReprocessed g = net . nikr . eve . jeveasset . i18n . BundleServiceFactory . getBundleService ( ) . get ( net . nikr . eve . jeveasset . i18n . TabsReprocessed . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( g . add ( ) )", "total": "testTabsReprocessedBundle_en ( ) { net . nikr . eve . jeveasset . i18n . TabsReprocessed g = net . nikr . eve . jeveasset . i18n . BundleServiceFactory . getBundleService ( ) . get ( net . nikr . eve . jeveasset . i18n . TabsReprocessed . class ) ; \"<AssertPlaceHolder>\" ; } add ( ) { add ( new net . nikr . eve . jeveasset . gui . shared . filter . FilterPanel ( this , filterControl ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( g . add ( ) )"}
{"focal": "getSrcNode ( ) { return node ; }", "testMethod": "test_bugissue84_original_failling ( ) { java . io . File fl = new java . io . File ( \"src/test/resources/examples/919148/ReplicationRun/919148_ReplicationRun_0_s.java\" ) ; java . io . File fr = new java . io . File ( \"src/test/resources/examples/919148/ReplicationRun/919148_ReplicationRun_0_t.java\" ) ; gumtree . spoon . AstComparator diff = new gumtree . spoon . AstComparator ( ) ; gumtree . spoon . diff . DiffImpl diffC = ( ( gumtree . spoon . diff . DiffImpl ) ( diff . compare ( fl , fr ) ) ) ; java . util . List < gumtree . spoon . diff . operations . Operation > ops = diffC . getAllOperations ( ) ; for ( gumtree . spoon . diff . operations . Operation operation : ops ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( operation . getSrcNode ( ) )", "total": "test_bugissue84_original_failling ( ) { java . io . File fl = new java . io . File ( \"src/test/resources/examples/919148/ReplicationRun/919148_ReplicationRun_0_s.java\" ) ; java . io . File fr = new java . io . File ( \"src/test/resources/examples/919148/ReplicationRun/919148_ReplicationRun_0_t.java\" ) ; gumtree . spoon . AstComparator diff = new gumtree . spoon . AstComparator ( ) ; gumtree . spoon . diff . DiffImpl diffC = ( ( gumtree . spoon . diff . DiffImpl ) ( diff . compare ( fl , fr ) ) ) ; java . util . List < gumtree . spoon . diff . operations . Operation > ops = diffC . getAllOperations ( ) ; for ( gumtree . spoon . diff . operations . Operation operation : ops ) { \"<AssertPlaceHolder>\" ; } } getSrcNode ( ) { return node ; }", "answer": "org . junit . Assert . assertNotNull ( operation . getSrcNode ( ) )"}
{"focal": "getPrimitive ( ) { return this . primitive ; }", "testMethod": "testReadPrimitiveGuid ( ) { final info . michaelwittig . javaq . query . PrimitiveResult < java . util . UUID > res = ( ( info . michaelwittig . javaq . query . PrimitiveResult < java . util . UUID > ) ( this . c ( ) . execute ( \"first<sp>-2?0Ng\" ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( res . getPrimitive ( ) )", "total": "testReadPrimitiveGuid ( ) { final info . michaelwittig . javaq . query . PrimitiveResult < java . util . UUID > res = ( ( info . michaelwittig . javaq . query . PrimitiveResult < java . util . UUID > ) ( this . c ( ) . execute ( \"first<sp>-2?0Ng\" ) ) ) ; \"<AssertPlaceHolder>\" ; } getPrimitive ( ) { return this . primitive ; }", "answer": "org . junit . Assert . assertNotNull ( res . getPrimitive ( ) )"}
{"focal": "controleer ( java . util . List ) { final nl . bzk . migratiebrp . synchronisatie . runtime . service . synchronisatie . controle . logging . ControleLogging logging = new nl . bzk . migratiebrp . synchronisatie . runtime . service . synchronisatie . controle . logging . ControleLogging ( nl . bzk . migratiebrp . synchronisatie . runtime . service . synchronisatie . controle . logging . ControleMelding . LIJST_CONTROLE_EEN ) ; final boolean result = ( lijst != null ) && ( ( lijst . size ( ) ) == 1 ) ; logging . logResultaat ( result ) ; return result ; }", "testMethod": "parsePersoonslijstOk ( ) { final nl . bzk . migratiebrp . bericht . model . sync . impl . SynchroniseerNaarBrpVerzoekBericht verzoek = new nl . bzk . migratiebrp . bericht . model . sync . impl . SynchroniseerNaarBrpVerzoekBericht ( ) ; verzoek . setMessageId ( \"verzoek-message-id\" ) ; verzoek . setLo3BerichtAsTeletexString ( maakLo3Pl ( ) ) ; org . mockito . Mockito . when ( syntaxControle . controleer ( org . mockito . Matchers . anyListOf ( nl . bzk . migratiebrp . conversie . model . lo3 . syntax . Lo3CategorieWaarde . class ) ) ) . thenAnswer ( new nl . bzk . migratiebrp . synchronisatie . runtime . service . synchronisatie . AbstractSynchronisatieVerwerkerImplTest . SimpleSyntaxAnswer ( ) ) ; final nl . bzk . migratiebrp . conversie . model . lo3 . Lo3Persoonslijst result = subject . parsePersoonslijst ( logging , verzoek ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( syntaxControle ) . controleer ( org . mockito . Matchers . anyListOf ( nl . bzk . migratiebrp . conversie . model . lo3 . syntax . Lo3CategorieWaarde . class ) ) ; org . mockito . Mockito . verifyNoMoreInteractions ( syntaxControle , preconditieService , converteerLo3NaarBrpService ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "parsePersoonslijstOk ( ) { final nl . bzk . migratiebrp . bericht . model . sync . impl . SynchroniseerNaarBrpVerzoekBericht verzoek = new nl . bzk . migratiebrp . bericht . model . sync . impl . SynchroniseerNaarBrpVerzoekBericht ( ) ; verzoek . setMessageId ( \"verzoek-message-id\" ) ; verzoek . setLo3BerichtAsTeletexString ( maakLo3Pl ( ) ) ; org . mockito . Mockito . when ( syntaxControle . controleer ( org . mockito . Matchers . anyListOf ( nl . bzk . migratiebrp . conversie . model . lo3 . syntax . Lo3CategorieWaarde . class ) ) ) . thenAnswer ( new nl . bzk . migratiebrp . synchronisatie . runtime . service . synchronisatie . AbstractSynchronisatieVerwerkerImplTest . SimpleSyntaxAnswer ( ) ) ; final nl . bzk . migratiebrp . conversie . model . lo3 . Lo3Persoonslijst result = subject . parsePersoonslijst ( logging , verzoek ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( syntaxControle ) . controleer ( org . mockito . Matchers . anyListOf ( nl . bzk . migratiebrp . conversie . model . lo3 . syntax . Lo3CategorieWaarde . class ) ) ; org . mockito . Mockito . verifyNoMoreInteractions ( syntaxControle , preconditieService , converteerLo3NaarBrpService ) ; } controleer ( java . util . List ) { final nl . bzk . migratiebrp . synchronisatie . runtime . service . synchronisatie . controle . logging . ControleLogging logging = new nl . bzk . migratiebrp . synchronisatie . runtime . service . synchronisatie . controle . logging . ControleLogging ( nl . bzk . migratiebrp . synchronisatie . runtime . service . synchronisatie . controle . logging . ControleMelding . LIJST_CONTROLE_EEN ) ; final boolean result = ( lijst != null ) && ( ( lijst . size ( ) ) == 1 ) ; logging . logResultaat ( result ) ; return result ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "basicTest ( ) { org . junit . Assert . assertNotNull ( \"mockMvc<sp>couldn't<sp>be<sp>initiated\" , mockMvc ) ; this . mockMvc . perform ( get ( \"/nmap\" ) ) . andDo ( print ( ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( org . hamcrest . CoreMatchers . containsString ( \"Port<sp>Scan\" ) ) ) ; }", "testMethod": "executeTest ( ) { basicTest ( ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( \"/nmap-exe?code={code}\" , \"scanme.nmap.org\" ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( org . hamcrest . CoreMatchers . containsString ( \"nmap<sp>scanme.nmap.org\" ) ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( \"mockMvc<sp>couldn't<sp>be<sp>initiated\" , mockMvc )", "total": "executeTest ( ) { basicTest ( ) ; \"<AssertPlaceHolder>\" ; this . mockMvc . perform ( get ( \"/nmap-exe?code={code}\" , \"scanme.nmap.org\" ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( org . hamcrest . CoreMatchers . containsString ( \"nmap<sp>scanme.nmap.org\" ) ) ) ; } basicTest ( ) { org . junit . Assert . assertNotNull ( \"mockMvc<sp>couldn't<sp>be<sp>initiated\" , mockMvc ) ; this . mockMvc . perform ( get ( \"/nmap\" ) ) . andDo ( print ( ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( org . hamcrest . CoreMatchers . containsString ( \"Port<sp>Scan\" ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( \"mockMvc<sp>couldn't<sp>be<sp>initiated\" , mockMvc )"}
{"focal": "otherwise ( com . querydsl . core . types . dsl . Expression ) { caseElements . add ( 0 , new com . querydsl . core . types . dsl . CaseForEqBuilder . CaseElement < D > ( null , otherwise ) ) ; com . querydsl . core . types . dsl . Expression < T > last = null ; for ( com . querydsl . core . types . dsl . CaseForEqBuilder . CaseElement < D > element : caseElements ) { if ( last == null ) { last = com . querydsl . core . types . dsl . Expressions . operation ( ( ( java . lang . Class < T > ) ( type ) ) , Ops . CASE_EQ_ELSE , element . getTarget ( ) ) ; } else { last = com . querydsl . core . types . dsl . Expressions . operation ( ( ( java . lang . Class < T > ) ( type ) ) , Ops . CASE_EQ_WHEN , base , element . getEq ( ) , element . getTarget ( ) , last ) ; } } return createResult ( ( ( java . lang . Class < T > ) ( type ) ) , last ) ; }", "testMethod": "enumType ( ) { com . querydsl . core . types . dsl . CaseForEqBuilderTest . Customer c = alias ( com . querydsl . core . types . dsl . CaseForEqBuilderTest . Customer . class , \"customer\" ) ; com . querydsl . core . types . dsl . EnumExpression < com . querydsl . core . types . dsl . CaseForEqBuilderTest . EnumExample > cases = $ ( c . getAnnualSpending ( ) ) . when ( 1000L ) . then ( com . querydsl . core . types . dsl . CaseForEqBuilderTest . EnumExample . A ) . otherwise ( com . querydsl . core . types . dsl . CaseForEqBuilderTest . EnumExample . B ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( cases )", "total": "enumType ( ) { com . querydsl . core . types . dsl . CaseForEqBuilderTest . Customer c = alias ( com . querydsl . core . types . dsl . CaseForEqBuilderTest . Customer . class , \"customer\" ) ; com . querydsl . core . types . dsl . EnumExpression < com . querydsl . core . types . dsl . CaseForEqBuilderTest . EnumExample > cases = $ ( c . getAnnualSpending ( ) ) . when ( 1000L ) . then ( com . querydsl . core . types . dsl . CaseForEqBuilderTest . EnumExample . A ) . otherwise ( com . querydsl . core . types . dsl . CaseForEqBuilderTest . EnumExample . B ) ; \"<AssertPlaceHolder>\" ; } otherwise ( com . querydsl . core . types . dsl . Expression ) { caseElements . add ( 0 , new com . querydsl . core . types . dsl . CaseForEqBuilder . CaseElement < D > ( null , otherwise ) ) ; com . querydsl . core . types . dsl . Expression < T > last = null ; for ( com . querydsl . core . types . dsl . CaseForEqBuilder . CaseElement < D > element : caseElements ) { if ( last == null ) { last = com . querydsl . core . types . dsl . Expressions . operation ( ( ( java . lang . Class < T > ) ( type ) ) , Ops . CASE_EQ_ELSE , element . getTarget ( ) ) ; } else { last = com . querydsl . core . types . dsl . Expressions . operation ( ( ( java . lang . Class < T > ) ( type ) ) , Ops . CASE_EQ_WHEN , base , element . getEq ( ) , element . getTarget ( ) , last ) ; } } return createResult ( ( ( java . lang . Class < T > ) ( type ) ) , last ) ; }", "answer": "org . junit . Assert . assertNotNull ( cases )"}
{"focal": "createTempProject ( ) { return createTempProject ( java . util . Collections . < java . lang . Class < ? extends org . jboss . forge . addon . projects . ProjectFacet > > emptySet ( ) ) ; }", "testMethod": "testCannotInstallAmbiguousFacetType ( ) { org . jboss . forge . addon . projects . Project project = projectFactory . createTempProject ( ) ; \"<AssertPlaceHolder>\" ; facetFactory . install ( project , org . jboss . forge . addon . javaee . validation . ValidationFacet . class ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( project )", "total": "testCannotInstallAmbiguousFacetType ( ) { org . jboss . forge . addon . projects . Project project = projectFactory . createTempProject ( ) ; \"<AssertPlaceHolder>\" ; facetFactory . install ( project , org . jboss . forge . addon . javaee . validation . ValidationFacet . class ) ; } createTempProject ( ) { return createTempProject ( java . util . Collections . < java . lang . Class < ? extends org . jboss . forge . addon . projects . ProjectFacet > > emptySet ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( project )"}
{"focal": "getTrustStore ( ) { if ( ( trustStore ) == null ) { createTrustStore ( ) ; } return trustStore ; }", "testMethod": "testGetTrustStore ( ) { try { org . hyperledger . fabric . sdk . security . CryptoPrimitives myCrypto = new org . hyperledger . fabric . sdk . security . CryptoPrimitives ( ) ; \"<AssertPlaceHolder>\" ; } catch ( org . hyperledger . fabric . sdk . exception . CryptoException e ) { org . junit . Assert . fail ( ( \"getTrustStore()<sp>fails<sp>with<sp>:<sp>\" + ( e . getMessage ( ) ) ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( myCrypto . getTrustStore ( ) )", "total": "testGetTrustStore ( ) { try { org . hyperledger . fabric . sdk . security . CryptoPrimitives myCrypto = new org . hyperledger . fabric . sdk . security . CryptoPrimitives ( ) ; \"<AssertPlaceHolder>\" ; } catch ( org . hyperledger . fabric . sdk . exception . CryptoException e ) { org . junit . Assert . fail ( ( \"getTrustStore()<sp>fails<sp>with<sp>:<sp>\" + ( e . getMessage ( ) ) ) ) ; } } getTrustStore ( ) { if ( ( trustStore ) == null ) { createTrustStore ( ) ; } return trustStore ; }", "answer": "org . junit . Assert . assertNotNull ( myCrypto . getTrustStore ( ) )"}
{"focal": "getKSession ( ) { return kSession ; }", "testMethod": "testSVM1v1 ( ) { setKSession ( getModelSession ( org . drools . pmml . pmml_4_1 . predictive . models . SVMTest . source3 , org . drools . pmml . pmml_4_1 . predictive . models . SVMTest . VERBOSE ) ) ; setKbase ( getKSession ( ) . getKnowledgeBase ( ) ) ; org . drools . runtime . StatefulKnowledgeSession kSession = getKSession ( ) ; kSession . fireAllRules ( ) ; org . drools . definition . type . FactType ztype = kSession . getKnowledgeBase ( ) . getFactType ( org . drools . pmml . pmml_4_1 . predictive . models . SVMTest . packageName , \"Z\" ) ; \"<AssertPlaceHolder>\" ; kSession . getWorkingMemoryEntryPoint ( \"in_X\" ) . insert ( 0.63 ) ; kSession . getWorkingMemoryEntryPoint ( \"in_Y\" ) . insert ( 0.0 ) ; kSession . fireAllRules ( ) ; System . err . println ( reportWMObjects ( kSession ) ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"yes\" ) ; checkFirstDataFieldOfTypeStatus ( kSession . getKnowledgeBase ( ) . getFactType ( org . drools . pmml . pmml_4_1 . predictive . models . SVMTest . packageName , \"OutZ\" ) , true , false , \"SVMXORMODEL\" , \"yes\" ) ; checkFirstDataFieldOfTypeStatus ( kSession . getKnowledgeBase ( ) . getFactType ( org . drools . pmml . pmml_4_1 . predictive . models . SVMTest . packageName , \"ProbZYes\" ) , true , false , \"SVMXORMODEL\" , 0.872057 ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( ztype )", "total": "testSVM1v1 ( ) { setKSession ( getModelSession ( org . drools . pmml . pmml_4_1 . predictive . models . SVMTest . source3 , org . drools . pmml . pmml_4_1 . predictive . models . SVMTest . VERBOSE ) ) ; setKbase ( getKSession ( ) . getKnowledgeBase ( ) ) ; org . drools . runtime . StatefulKnowledgeSession kSession = getKSession ( ) ; kSession . fireAllRules ( ) ; org . drools . definition . type . FactType ztype = kSession . getKnowledgeBase ( ) . getFactType ( org . drools . pmml . pmml_4_1 . predictive . models . SVMTest . packageName , \"Z\" ) ; \"<AssertPlaceHolder>\" ; kSession . getWorkingMemoryEntryPoint ( \"in_X\" ) . insert ( 0.63 ) ; kSession . getWorkingMemoryEntryPoint ( \"in_Y\" ) . insert ( 0.0 ) ; kSession . fireAllRules ( ) ; System . err . println ( reportWMObjects ( kSession ) ) ; checkFirstDataFieldOfTypeStatus ( ztype , true , false , \"SVMXORMODEL\" , \"yes\" ) ; checkFirstDataFieldOfTypeStatus ( kSession . getKnowledgeBase ( ) . getFactType ( org . drools . pmml . pmml_4_1 . predictive . models . SVMTest . packageName , \"OutZ\" ) , true , false , \"SVMXORMODEL\" , \"yes\" ) ; checkFirstDataFieldOfTypeStatus ( kSession . getKnowledgeBase ( ) . getFactType ( org . drools . pmml . pmml_4_1 . predictive . models . SVMTest . packageName , \"ProbZYes\" ) , true , false , \"SVMXORMODEL\" , 0.872057 ) ; } getKSession ( ) { return kSession ; }", "answer": "org . junit . Assert . assertNotNull ( ztype )"}
{"focal": "getBand ( java . lang . String ) { for ( org . esa . s3tbx . dataio . landsat . LandsatTMBand landsatBand : landsatBands ) { if ( landsatBand . getBandName ( ) . equals ( BandName ) ) { return landsatBand ; } } return null ; }", "testMethod": "testAddVariableAsBand_DataType_Byte ( ) { when ( variable . getDataType ( ) ) . thenReturn ( DataType . BYTE ) ; reader . addVariableAsBand ( product , variable , \"byte-name\" , synthetic ) ; final org . esa . snap . core . datamodel . Band band = product . getBand ( \"byte-name\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( band )", "total": "testAddVariableAsBand_DataType_Byte ( ) { when ( variable . getDataType ( ) ) . thenReturn ( DataType . BYTE ) ; reader . addVariableAsBand ( product , variable , \"byte-name\" , synthetic ) ; final org . esa . snap . core . datamodel . Band band = product . getBand ( \"byte-name\" ) ; \"<AssertPlaceHolder>\" ; } getBand ( java . lang . String ) { for ( org . esa . s3tbx . dataio . landsat . LandsatTMBand landsatBand : landsatBands ) { if ( landsatBand . getBandName ( ) . equals ( BandName ) ) { return landsatBand ; } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( band )"}
{"focal": "attachLogicalNode ( java . lang . String , com . noctarius . snowcast . impl . SequencerDefinition ) { long epochOffset = sequencerDefinition . getEpoch ( ) . getEpochOffset ( ) ; int maxLogicalNodeCount = sequencerDefinition . getMaxLogicalNodeCount ( ) ; short backupCount = sequencerDefinition . getBackupCount ( ) ; com . hazelcast . client . impl . protocol . ClientMessage request = com . hazelcast . client . impl . protocol . codec . SnowcastAttachLogicalNodeCodec . encodeRequest ( sequencerName , epochOffset , maxLogicalNodeCount , backupCount ) ; com . hazelcast . client . impl . protocol . ClientMessage response = invoke ( sequencerName , request ) ; return com . hazelcast . client . impl . protocol . codec . SnowcastAttachLogicalNodeCodec . decodeResponse ( response ) . response ; }", "testMethod": "test_partition_frozen_register_definition_existing ( ) { com . noctarius . snowcast . impl . SequencerDefinition definition = new com . noctarius . snowcast . impl . SequencerDefinition ( \"empty\" , com . noctarius . snowcast . SnowcastEpoch . byTimestamp ( 1 ) , 128 , ( ( short ) ( 1 ) ) ) ; com . hazelcast . nio . Address address = new com . hazelcast . nio . Address ( \"localhost\" , 1000 ) ; com . noctarius . snowcast . impl . SequencerPartition partition = new com . noctarius . snowcast . impl . SequencerPartition ( 1 ) ; java . lang . Integer logicalNodeId = partition . attachLogicalNode ( definition , address ) ; \"<AssertPlaceHolder>\" ; partition . freeze ( ) ; partition . checkOrRegisterSequencerDefinition ( definition ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( logicalNodeId )", "total": "test_partition_frozen_register_definition_existing ( ) { com . noctarius . snowcast . impl . SequencerDefinition definition = new com . noctarius . snowcast . impl . SequencerDefinition ( \"empty\" , com . noctarius . snowcast . SnowcastEpoch . byTimestamp ( 1 ) , 128 , ( ( short ) ( 1 ) ) ) ; com . hazelcast . nio . Address address = new com . hazelcast . nio . Address ( \"localhost\" , 1000 ) ; com . noctarius . snowcast . impl . SequencerPartition partition = new com . noctarius . snowcast . impl . SequencerPartition ( 1 ) ; java . lang . Integer logicalNodeId = partition . attachLogicalNode ( definition , address ) ; \"<AssertPlaceHolder>\" ; partition . freeze ( ) ; partition . checkOrRegisterSequencerDefinition ( definition ) ; } attachLogicalNode ( java . lang . String , com . noctarius . snowcast . impl . SequencerDefinition ) { long epochOffset = sequencerDefinition . getEpoch ( ) . getEpochOffset ( ) ; int maxLogicalNodeCount = sequencerDefinition . getMaxLogicalNodeCount ( ) ; short backupCount = sequencerDefinition . getBackupCount ( ) ; com . hazelcast . client . impl . protocol . ClientMessage request = com . hazelcast . client . impl . protocol . codec . SnowcastAttachLogicalNodeCodec . encodeRequest ( sequencerName , epochOffset , maxLogicalNodeCount , backupCount ) ; com . hazelcast . client . impl . protocol . ClientMessage response = invoke ( sequencerName , request ) ; return com . hazelcast . client . impl . protocol . codec . SnowcastAttachLogicalNodeCodec . decodeResponse ( response ) . response ; }", "answer": "org . junit . Assert . assertNotNull ( logicalNodeId )"}
{"focal": "ticketCacheEntry ( ) { return org . apache . flink . runtime . security . KerberosUtils . userKerberosAce ; }", "testMethod": "testTicketCacheEntry ( ) { javax . security . auth . login . AppConfigurationEntry entry = org . apache . flink . runtime . security . KerberosUtils . ticketCacheEntry ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entry )", "total": "testTicketCacheEntry ( ) { javax . security . auth . login . AppConfigurationEntry entry = org . apache . flink . runtime . security . KerberosUtils . ticketCacheEntry ( ) ; \"<AssertPlaceHolder>\" ; } ticketCacheEntry ( ) { return org . apache . flink . runtime . security . KerberosUtils . userKerberosAce ; }", "answer": "org . junit . Assert . assertNotNull ( entry )"}
{"focal": "setStates ( java . util . List ) { if ( states == null ) { this . states = null ; } else if ( ( states . size ( ) ) > ( ( rows ) * ( columns ) ) ) { this . states = new java . util . ArrayList < org . eclipse . ice . client . widgets . grid . Cell . State > ( states . subList ( 0 , ( ( rows ) * ( columns ) ) ) ) ; } else { this . states = new java . util . ArrayList < org . eclipse . ice . client . widgets . grid . Cell . State > ( states ) ; } return ; }", "testMethod": "checkNonDefaults ( ) { int i ; org . eclipse . ice . client . widgets . grid . GridEditorInput input = new org . eclipse . ice . client . widgets . grid . GridEditorInput ( rows , columns ) ; java . util . List < java . lang . String > rowLabels = new java . util . ArrayList < java . lang . String > ( rows ) ; for ( i = 0 ; i < ( rows ) ; i ++ ) { rowLabels . add ( java . lang . Integer . toString ( i ) ) ; } java . util . List < java . lang . String > columnLabels = new java . util . ArrayList < java . lang . String > ( columns ) ; for ( i = 0 ; i < ( columns ) ; i ++ ) { columnLabels . add ( java . lang . Character . toString ( ( ( char ) ( 'A' + i ) ) ) ) ; } java . util . List < org . eclipse . ice . client . widgets . grid . Cell . State > states = new java . util . ArrayList < org . eclipse . ice . client . widgets . grid . Cell . State > ( ) ; states . add ( State . INVALID ) ; states . add ( State . DISABLED ) ; states . add ( State . SELECTED ) ; states . add ( State . UNSELECTED ) ; input . setRowLabels ( rowLabels ) ; input . setColumnLabels ( columnLabels ) ; input . setStates ( states ) ; org . eclipse . ice . client . widgets . grid . Grid grid = new org . eclipse . ice . client . widgets . grid . Grid ( input ) ; \"<AssertPlaceHolder>\" ; return ; }", "assertLine": "org . junit . Assert . assertNotNull ( grid )", "total": "checkNonDefaults ( ) { int i ; org . eclipse . ice . client . widgets . grid . GridEditorInput input = new org . eclipse . ice . client . widgets . grid . GridEditorInput ( rows , columns ) ; java . util . List < java . lang . String > rowLabels = new java . util . ArrayList < java . lang . String > ( rows ) ; for ( i = 0 ; i < ( rows ) ; i ++ ) { rowLabels . add ( java . lang . Integer . toString ( i ) ) ; } java . util . List < java . lang . String > columnLabels = new java . util . ArrayList < java . lang . String > ( columns ) ; for ( i = 0 ; i < ( columns ) ; i ++ ) { columnLabels . add ( java . lang . Character . toString ( ( ( char ) ( 'A' + i ) ) ) ) ; } java . util . List < org . eclipse . ice . client . widgets . grid . Cell . State > states = new java . util . ArrayList < org . eclipse . ice . client . widgets . grid . Cell . State > ( ) ; states . add ( State . INVALID ) ; states . add ( State . DISABLED ) ; states . add ( State . SELECTED ) ; states . add ( State . UNSELECTED ) ; input . setRowLabels ( rowLabels ) ; input . setColumnLabels ( columnLabels ) ; input . setStates ( states ) ; org . eclipse . ice . client . widgets . grid . Grid grid = new org . eclipse . ice . client . widgets . grid . Grid ( input ) ; \"<AssertPlaceHolder>\" ; return ; } setStates ( java . util . List ) { if ( states == null ) { this . states = null ; } else if ( ( states . size ( ) ) > ( ( rows ) * ( columns ) ) ) { this . states = new java . util . ArrayList < org . eclipse . ice . client . widgets . grid . Cell . State > ( states . subList ( 0 , ( ( rows ) * ( columns ) ) ) ) ; } else { this . states = new java . util . ArrayList < org . eclipse . ice . client . widgets . grid . Cell . State > ( states ) ; } return ; }", "answer": "org . junit . Assert . assertNotNull ( grid )"}
{"focal": "getConfiguration ( ) { return configuration ; }", "testMethod": "bootstrapTiny ( ) { final org . metricssampler . service . Bootstrapper result = org . metricssampler . service . DefaultBootstrapper . bootstrap ( \"src/test/resources/config.tiny.xml\" , \"localhost\" , 28123 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result . getConfiguration ( ) )", "total": "bootstrapTiny ( ) { final org . metricssampler . service . Bootstrapper result = org . metricssampler . service . DefaultBootstrapper . bootstrap ( \"src/test/resources/config.tiny.xml\" , \"localhost\" , 28123 ) ; \"<AssertPlaceHolder>\" ; } getConfiguration ( ) { return configuration ; }", "answer": "org . junit . Assert . assertNotNull ( result . getConfiguration ( ) )"}
{"focal": "getCertificateChain ( ) { return this . certChain ; }", "testMethod": "testCAdESDNIe ( ) { final java . lang . reflect . Constructor < ? > sunPKCS11Contructor = java . lang . Class . forName ( \"sun.security.pkcs11.SunPKCS11\" ) . getConstructor ( java . io . InputStream . class ) ; final java . security . Provider p = ( ( java . security . Provider ) ( sunPKCS11Contructor . newInstance ( new java . io . ByteArrayInputStream ( es . gob . afirma . test . cades . MiniTestDNI . DNIE_DRIVER_PATH . getBytes ( ) ) ) ) ) ; java . security . Security . addProvider ( p ) ; final java . security . KeyStore ks = java . security . KeyStore . getInstance ( \"PKCS11\" , p ) ; ks . load ( null , es . gob . afirma . test . cades . MiniTestDNI . DNI_PIN ) ; final java . security . KeyStore . PrivateKeyEntry pke = ( ( java . security . KeyStore . PrivateKeyEntry ) ( ks . getEntry ( es . gob . afirma . test . cades . MiniTestDNI . DNI_SIGN_ALIAS , new java . security . KeyStore . PasswordProtection ( es . gob . afirma . test . cades . MiniTestDNI . DNI_PIN ) ) ) ) ; final es . gob . afirma . signers . pkcs7 . P7ContentSignerParameters p7ContentSignerParameters = new es . gob . afirma . signers . pkcs7 . P7ContentSignerParameters ( es . gob . afirma . test . cades . MiniTestDNI . TEXTO_FIRMAR . getBytes ( StandardCharsets . UTF_8 ) , \"SHA1withRSA\" ) ; final boolean omitContent = false ; final byte [ ] messageDigest = null ; final byte [ ] firma = es . gob . afirma . signers . cades . GenCAdESEPESSignedData . generateSignedData ( p7ContentSignerParameters , omitContent , es . gob . afirma . core . signers . AdESPolicy . buildAdESPolicy ( new java . util . Properties ( ) ) , false , pke . getPrivateKey ( ) , pke . getCertificateChain ( ) , messageDigest , \"SHA-512\" , false , false , null , null , null , null , null , false ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( firma )", "total": "testCAdESDNIe ( ) { final java . lang . reflect . Constructor < ? > sunPKCS11Contructor = java . lang . Class . forName ( \"sun.security.pkcs11.SunPKCS11\" ) . getConstructor ( java . io . InputStream . class ) ; final java . security . Provider p = ( ( java . security . Provider ) ( sunPKCS11Contructor . newInstance ( new java . io . ByteArrayInputStream ( es . gob . afirma . test . cades . MiniTestDNI . DNIE_DRIVER_PATH . getBytes ( ) ) ) ) ) ; java . security . Security . addProvider ( p ) ; final java . security . KeyStore ks = java . security . KeyStore . getInstance ( \"PKCS11\" , p ) ; ks . load ( null , es . gob . afirma . test . cades . MiniTestDNI . DNI_PIN ) ; final java . security . KeyStore . PrivateKeyEntry pke = ( ( java . security . KeyStore . PrivateKeyEntry ) ( ks . getEntry ( es . gob . afirma . test . cades . MiniTestDNI . DNI_SIGN_ALIAS , new java . security . KeyStore . PasswordProtection ( es . gob . afirma . test . cades . MiniTestDNI . DNI_PIN ) ) ) ) ; final es . gob . afirma . signers . pkcs7 . P7ContentSignerParameters p7ContentSignerParameters = new es . gob . afirma . signers . pkcs7 . P7ContentSignerParameters ( es . gob . afirma . test . cades . MiniTestDNI . TEXTO_FIRMAR . getBytes ( StandardCharsets . UTF_8 ) , \"SHA1withRSA\" ) ; final boolean omitContent = false ; final byte [ ] messageDigest = null ; final byte [ ] firma = es . gob . afirma . signers . cades . GenCAdESEPESSignedData . generateSignedData ( p7ContentSignerParameters , omitContent , es . gob . afirma . core . signers . AdESPolicy . buildAdESPolicy ( new java . util . Properties ( ) ) , false , pke . getPrivateKey ( ) , pke . getCertificateChain ( ) , messageDigest , \"SHA-512\" , false , false , null , null , null , null , null , false ) ; \"<AssertPlaceHolder>\" ; } getCertificateChain ( ) { return this . certChain ; }", "answer": "org . junit . Assert . assertNotNull ( firma )"}
{"focal": "loadInstance ( java . lang . String , java . lang . Class ) { if ( uri == null ) { throw new java . lang . NullPointerException ( \"uri<sp>may<sp>not<sp>be<sp>null.\" ) ; } if ( resultClass == null ) { throw new java . lang . NullPointerException ( \"resultClass<sp>may<sp>not<sp>be<sp>null.\" ) ; } try { edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationRdf < T > parsedRdf = edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationRdfParser . parse ( locking , uri , resultClass ) ; edu . cornell . mannlib . vitro . webapp . utils . configuration . WrappedInstance < T > wrapper = edu . cornell . mannlib . vitro . webapp . utils . configuration . InstanceWrapper . wrap ( parsedRdf . getConcreteClass ( ) ) ; wrapper . satisfyInterfaces ( ctx , req ) ; wrapper . checkCardinality ( parsedRdf . getPropertyStatements ( ) ) ; wrapper . setProperties ( this , parsedRdf . getPropertyStatements ( ) ) ; wrapper . validate ( ) ; return wrapper . getInstance ( ) ; } catch ( java . lang . Exception e ) { throw new edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderException ( ( ( \"Failed<sp>to<sp>load<sp>'\" + uri ) + \"'\" ) , e ) ; } }", "testMethod": "irrelevantNonConcreteTypesAreIgnored ( ) { model . add ( new org . apache . jena . rdf . model . Statement [ ] { typeStatement ( edu . cornell . mannlib . vitro . webapp . utils . configuration . SIMPLE_SUCCESS_INSTANCE_URI , edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoader . toJavaUri ( edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderTest . SimpleSuccess . class ) ) , typeStatement ( edu . cornell . mannlib . vitro . webapp . utils . configuration . SIMPLE_SUCCESS_INSTANCE_URI , edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoader . toJavaUri ( edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderTest . IrrelevantInterface . class ) ) , typeStatement ( edu . cornell . mannlib . vitro . webapp . utils . configuration . SIMPLE_SUCCESS_INSTANCE_URI , edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoader . toJavaUri ( edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderTest . IrrelevantAbstractClass . class ) ) , typeStatement ( edu . cornell . mannlib . vitro . webapp . utils . configuration . SIMPLE_SUCCESS_INSTANCE_URI , \"http://irrelevant.nonJava/class\" ) } ) ; edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderTest . SimpleSuccess instance = loader . loadInstance ( edu . cornell . mannlib . vitro . webapp . utils . configuration . SIMPLE_SUCCESS_INSTANCE_URI , edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderTest . SimpleSuccess . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance )", "total": "irrelevantNonConcreteTypesAreIgnored ( ) { model . add ( new org . apache . jena . rdf . model . Statement [ ] { typeStatement ( edu . cornell . mannlib . vitro . webapp . utils . configuration . SIMPLE_SUCCESS_INSTANCE_URI , edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoader . toJavaUri ( edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderTest . SimpleSuccess . class ) ) , typeStatement ( edu . cornell . mannlib . vitro . webapp . utils . configuration . SIMPLE_SUCCESS_INSTANCE_URI , edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoader . toJavaUri ( edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderTest . IrrelevantInterface . class ) ) , typeStatement ( edu . cornell . mannlib . vitro . webapp . utils . configuration . SIMPLE_SUCCESS_INSTANCE_URI , edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoader . toJavaUri ( edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderTest . IrrelevantAbstractClass . class ) ) , typeStatement ( edu . cornell . mannlib . vitro . webapp . utils . configuration . SIMPLE_SUCCESS_INSTANCE_URI , \"http://irrelevant.nonJava/class\" ) } ) ; edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderTest . SimpleSuccess instance = loader . loadInstance ( edu . cornell . mannlib . vitro . webapp . utils . configuration . SIMPLE_SUCCESS_INSTANCE_URI , edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderTest . SimpleSuccess . class ) ; \"<AssertPlaceHolder>\" ; } loadInstance ( java . lang . String , java . lang . Class ) { if ( uri == null ) { throw new java . lang . NullPointerException ( \"uri<sp>may<sp>not<sp>be<sp>null.\" ) ; } if ( resultClass == null ) { throw new java . lang . NullPointerException ( \"resultClass<sp>may<sp>not<sp>be<sp>null.\" ) ; } try { edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationRdf < T > parsedRdf = edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationRdfParser . parse ( locking , uri , resultClass ) ; edu . cornell . mannlib . vitro . webapp . utils . configuration . WrappedInstance < T > wrapper = edu . cornell . mannlib . vitro . webapp . utils . configuration . InstanceWrapper . wrap ( parsedRdf . getConcreteClass ( ) ) ; wrapper . satisfyInterfaces ( ctx , req ) ; wrapper . checkCardinality ( parsedRdf . getPropertyStatements ( ) ) ; wrapper . setProperties ( this , parsedRdf . getPropertyStatements ( ) ) ; wrapper . validate ( ) ; return wrapper . getInstance ( ) ; } catch ( java . lang . Exception e ) { throw new edu . cornell . mannlib . vitro . webapp . utils . configuration . ConfigurationBeanLoaderException ( ( ( \"Failed<sp>to<sp>load<sp>'\" + uri ) + \"'\" ) , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( instance )"}
{"focal": "get ( java . lang . Integer ) { return emf . unwrap ( org . hibernate . SessionFactory . class ) . getCurrentSession ( ) . get ( org . baeldung . demo . model . Foo . class , id ) ; }", "testMethod": "givenDocument_whenInsert_thenResult ( ) { com . couchbase . client . java . Bucket bucket = bucketFactory . getTestBucket ( ) ; com . couchbase . client . java . document . json . JsonObject personObj = com . couchbase . client . java . document . json . JsonObject . create ( ) . put ( \"name\" , \"John\" ) . put ( \"email\" , \"john@doe.com\" ) . put ( \"interests\" , com . couchbase . client . java . document . json . JsonArray . from ( \"Java\" , \"Nigerian<sp>Jollof\" ) ) ; java . lang . String id = java . util . UUID . randomUUID ( ) . toString ( ) ; com . couchbase . client . java . document . JsonDocument doc = com . couchbase . client . java . document . JsonDocument . create ( id , personObj ) ; bucket . insert ( doc ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( bucket . get ( id ) )", "total": "givenDocument_whenInsert_thenResult ( ) { com . couchbase . client . java . Bucket bucket = bucketFactory . getTestBucket ( ) ; com . couchbase . client . java . document . json . JsonObject personObj = com . couchbase . client . java . document . json . JsonObject . create ( ) . put ( \"name\" , \"John\" ) . put ( \"email\" , \"john@doe.com\" ) . put ( \"interests\" , com . couchbase . client . java . document . json . JsonArray . from ( \"Java\" , \"Nigerian<sp>Jollof\" ) ) ; java . lang . String id = java . util . UUID . randomUUID ( ) . toString ( ) ; com . couchbase . client . java . document . JsonDocument doc = com . couchbase . client . java . document . JsonDocument . create ( id , personObj ) ; bucket . insert ( doc ) ; \"<AssertPlaceHolder>\" ; } get ( java . lang . Integer ) { return emf . unwrap ( org . hibernate . SessionFactory . class ) . getCurrentSession ( ) . get ( org . baeldung . demo . model . Foo . class , id ) ; }", "answer": "org . junit . Assert . assertNotNull ( bucket . get ( id ) )"}
{"focal": "evaluatesTo ( java . lang . String ) { return new org . springframework . ws . test . client . WebServiceMessageMatcherAdapter ( helper . evaluatesTo ( expectedValue ) ) ; }", "testMethod": "evaluatesToFalseNonMatch ( ) { org . springframework . ws . test . support . matcher . XPathExpectationsHelper helper = new org . springframework . ws . test . support . matcher . XPathExpectationsHelper ( \"//b!=2\" ) ; org . springframework . ws . test . support . matcher . WebServiceMessageMatcher matcher = helper . evaluatesTo ( false ) ; \"<AssertPlaceHolder>\" ; org . springframework . ws . WebServiceMessage message = createMock ( org . springframework . ws . WebServiceMessage . class ) ; expect ( message . getPayloadSource ( ) ) . andReturn ( new org . springframework . xml . transform . StringSource ( \"<a><b>1</b></a>\" ) ) . times ( 2 ) ; replay ( message ) ; matcher . match ( message ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( matcher )", "total": "evaluatesToFalseNonMatch ( ) { org . springframework . ws . test . support . matcher . XPathExpectationsHelper helper = new org . springframework . ws . test . support . matcher . XPathExpectationsHelper ( \"//b!=2\" ) ; org . springframework . ws . test . support . matcher . WebServiceMessageMatcher matcher = helper . evaluatesTo ( false ) ; \"<AssertPlaceHolder>\" ; org . springframework . ws . WebServiceMessage message = createMock ( org . springframework . ws . WebServiceMessage . class ) ; expect ( message . getPayloadSource ( ) ) . andReturn ( new org . springframework . xml . transform . StringSource ( \"<a><b>1</b></a>\" ) ) . times ( 2 ) ; replay ( message ) ; matcher . match ( message ) ; } evaluatesTo ( java . lang . String ) { return new org . springframework . ws . test . client . WebServiceMessageMatcherAdapter ( helper . evaluatesTo ( expectedValue ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( matcher )"}
{"focal": "loadRepository ( java . io . File ) { return new org . eclipse . tycho . repository . local . LocalMetadataRepository ( location . toURI ( ) , createMetadataIndex ( location ) , new org . eclipse . tycho . p2 . repository . LocalRepositoryReader ( location ) ) ; }", "testMethod": "emptyRepository ( ) { java . io . File location = new java . io . File ( \"target/empty\" ) ; createRepository ( location ) ; org . eclipse . equinox . p2 . repository . metadata . IMetadataRepository repository = loadRepository ( location ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( repository )", "total": "emptyRepository ( ) { java . io . File location = new java . io . File ( \"target/empty\" ) ; createRepository ( location ) ; org . eclipse . equinox . p2 . repository . metadata . IMetadataRepository repository = loadRepository ( location ) ; \"<AssertPlaceHolder>\" ; } loadRepository ( java . io . File ) { return new org . eclipse . tycho . repository . local . LocalMetadataRepository ( location . toURI ( ) , createMetadataIndex ( location ) , new org . eclipse . tycho . p2 . repository . LocalRepositoryReader ( location ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( repository )"}
{"focal": "criaAutenticacao ( java . lang . String , java . lang . String ) { return \"Basic<sp>\" + ( com . knight . usuarios . servicos . testes . integracao . UsuariosServiceIT . encodeUsuarioSenha ( usuario , senha ) ) ; }", "testMethod": "testeRecepcaoUsuariosClientRequest ( ) { org . jboss . resteasy . client . ClientResponse < com . knight . usuarios . modelos . Usuario > response = new org . jboss . resteasy . client . ClientRequest ( ( ( com . knight . usuarios . servicos . testes . integracao . UsuariosServiceIT . USUARIOS_CONTEXT ) + \"/{id}\" ) ) . pathParameters ( 1 ) . header ( \"Authorization\" , com . knight . usuarios . servicos . testes . integracao . UsuariosServiceIT . criaAutenticacao ( com . knight . usuarios . servicos . testes . integracao . UsuariosServiceIT . USUARIO_ADMIN , com . knight . usuarios . servicos . testes . integracao . UsuariosServiceIT . SENHA_ADMIN ) ) . get ( com . knight . usuarios . modelos . Usuario . class ) ; com . knight . usuarios . modelos . Usuario usuario = response . getEntity ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( usuario )", "total": "testeRecepcaoUsuariosClientRequest ( ) { org . jboss . resteasy . client . ClientResponse < com . knight . usuarios . modelos . Usuario > response = new org . jboss . resteasy . client . ClientRequest ( ( ( com . knight . usuarios . servicos . testes . integracao . UsuariosServiceIT . USUARIOS_CONTEXT ) + \"/{id}\" ) ) . pathParameters ( 1 ) . header ( \"Authorization\" , com . knight . usuarios . servicos . testes . integracao . UsuariosServiceIT . criaAutenticacao ( com . knight . usuarios . servicos . testes . integracao . UsuariosServiceIT . USUARIO_ADMIN , com . knight . usuarios . servicos . testes . integracao . UsuariosServiceIT . SENHA_ADMIN ) ) . get ( com . knight . usuarios . modelos . Usuario . class ) ; com . knight . usuarios . modelos . Usuario usuario = response . getEntity ( ) ; \"<AssertPlaceHolder>\" ; } criaAutenticacao ( java . lang . String , java . lang . String ) { return \"Basic<sp>\" + ( com . knight . usuarios . servicos . testes . integracao . UsuariosServiceIT . encodeUsuarioSenha ( usuario , senha ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( usuario )"}
{"focal": "getAbsolutePath ( ) { return absolutePath ; }", "testMethod": "testLoadRuleAsString ( ) { org . irods . jargon . core . connection . IRODSAccount irodsAccount = org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . testingPropertiesHelper . buildIRODSAccountFromTestProperties ( org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . testingProperties ) ; org . irods . jargon . core . pub . IRODSAccessObjectFactory accessObjectFactory = org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . irodsFileSystem . getIRODSAccessObjectFactory ( ) ; org . irods . jargon . core . pub . EnvironmentalInfoAO environmentalInfoAO = org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . irodsFileSystem . getIRODSAccessObjectFactory ( ) . getEnvironmentalInfoAO ( irodsAccount ) ; org . irods . jargon . core . connection . IRODSServerProperties props = environmentalInfoAO . getIRODSServerPropertiesFromIRODSServer ( ) ; if ( ! ( props . isTheIrodsServerAtLeastAtTheGivenReleaseVersion ( \"rods3.0\" ) ) ) { return ; } java . lang . String ruleFile = \"/rules/rulemsiDataObjChksum.r\" ; java . lang . String irodsRuleFile = \"testLoadRuleAsString.r\" ; java . lang . String targetIrodsCollection = org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . testingPropertiesHelper . buildIRODSCollectionAbsolutePathFromTestProperties ( org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . testingProperties , org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . IRODS_TEST_SUBDIR_PATH ) ; java . lang . String ruleString = org . irods . jargon . core . utils . LocalFileUtils . getClasspathResourceFileAsString ( ruleFile ) ; org . irods . jargon . core . pub . io . IRODSFile irodsRuleFileAsFile = accessObjectFactory . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFile ( ( ( targetIrodsCollection + \"/\" ) + irodsRuleFile ) ) ; irodsRuleFileAsFile . deleteWithForceOption ( ) ; org . irods . jargon . core . pub . io . IRODSFileWriter irodsFileWriter = accessObjectFactory . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFileWriter ( ( ( targetIrodsCollection + \"/\" ) + irodsRuleFile ) ) ; char [ ] buff = new char [ 1024 ] ; java . io . StringReader reader = new java . io . StringReader ( ruleString ) ; int len = 0 ; while ( ( len = reader . read ( buff ) ) > ( - 1 ) ) { irodsFileWriter . write ( buff , 0 , len ) ; } irodsFileWriter . close ( ) ; reader . close ( ) ; org . irods . jargon . ruleservice . composition . RuleCompositionService ruleCompositionService = new org . irods . jargon . ruleservice . composition . RuleCompositionServiceImpl ( accessObjectFactory , irodsAccount ) ; java . lang . String actual = ruleCompositionService . loadRuleFromIrodsAsString ( irodsRuleFileAsFile . getAbsolutePath ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( actual )", "total": "testLoadRuleAsString ( ) { org . irods . jargon . core . connection . IRODSAccount irodsAccount = org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . testingPropertiesHelper . buildIRODSAccountFromTestProperties ( org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . testingProperties ) ; org . irods . jargon . core . pub . IRODSAccessObjectFactory accessObjectFactory = org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . irodsFileSystem . getIRODSAccessObjectFactory ( ) ; org . irods . jargon . core . pub . EnvironmentalInfoAO environmentalInfoAO = org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . irodsFileSystem . getIRODSAccessObjectFactory ( ) . getEnvironmentalInfoAO ( irodsAccount ) ; org . irods . jargon . core . connection . IRODSServerProperties props = environmentalInfoAO . getIRODSServerPropertiesFromIRODSServer ( ) ; if ( ! ( props . isTheIrodsServerAtLeastAtTheGivenReleaseVersion ( \"rods3.0\" ) ) ) { return ; } java . lang . String ruleFile = \"/rules/rulemsiDataObjChksum.r\" ; java . lang . String irodsRuleFile = \"testLoadRuleAsString.r\" ; java . lang . String targetIrodsCollection = org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . testingPropertiesHelper . buildIRODSCollectionAbsolutePathFromTestProperties ( org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . testingProperties , org . irods . jargon . ruleservice . composition . RuleCompositionServiceImplTest . IRODS_TEST_SUBDIR_PATH ) ; java . lang . String ruleString = org . irods . jargon . core . utils . LocalFileUtils . getClasspathResourceFileAsString ( ruleFile ) ; org . irods . jargon . core . pub . io . IRODSFile irodsRuleFileAsFile = accessObjectFactory . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFile ( ( ( targetIrodsCollection + \"/\" ) + irodsRuleFile ) ) ; irodsRuleFileAsFile . deleteWithForceOption ( ) ; org . irods . jargon . core . pub . io . IRODSFileWriter irodsFileWriter = accessObjectFactory . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFileWriter ( ( ( targetIrodsCollection + \"/\" ) + irodsRuleFile ) ) ; char [ ] buff = new char [ 1024 ] ; java . io . StringReader reader = new java . io . StringReader ( ruleString ) ; int len = 0 ; while ( ( len = reader . read ( buff ) ) > ( - 1 ) ) { irodsFileWriter . write ( buff , 0 , len ) ; } irodsFileWriter . close ( ) ; reader . close ( ) ; org . irods . jargon . ruleservice . composition . RuleCompositionService ruleCompositionService = new org . irods . jargon . ruleservice . composition . RuleCompositionServiceImpl ( accessObjectFactory , irodsAccount ) ; java . lang . String actual = ruleCompositionService . loadRuleFromIrodsAsString ( irodsRuleFileAsFile . getAbsolutePath ( ) ) ; \"<AssertPlaceHolder>\" ; } getAbsolutePath ( ) { return absolutePath ; }", "answer": "org . junit . Assert . assertNotNull ( actual )"}
{"focal": "get ( ) { return ds ; }", "testMethod": "testComplexIdQueryWithRenamedField ( ) { com . github . jmkgreen . morphia . TestMapper . CustomId cId = new com . github . jmkgreen . morphia . TestMapper . CustomId ( ) ; cId . id = new org . bson . types . ObjectId ( ) ; cId . type = \"banker\" ; com . github . jmkgreen . morphia . TestMapper . UsesCustomIdObject ucio = new com . github . jmkgreen . morphia . TestMapper . UsesCustomIdObject ( ) ; ucio . id = cId ; ucio . text = \"hllo\" ; this . ds . save ( ucio ) ; com . github . jmkgreen . morphia . TestMapper . UsesCustomIdObject ucioLoaded = ds . find ( com . github . jmkgreen . morphia . TestMapper . UsesCustomIdObject . class , \"_id.t\" , \"banker\" ) . get ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ucioLoaded )", "total": "testComplexIdQueryWithRenamedField ( ) { com . github . jmkgreen . morphia . TestMapper . CustomId cId = new com . github . jmkgreen . morphia . TestMapper . CustomId ( ) ; cId . id = new org . bson . types . ObjectId ( ) ; cId . type = \"banker\" ; com . github . jmkgreen . morphia . TestMapper . UsesCustomIdObject ucio = new com . github . jmkgreen . morphia . TestMapper . UsesCustomIdObject ( ) ; ucio . id = cId ; ucio . text = \"hllo\" ; this . ds . save ( ucio ) ; com . github . jmkgreen . morphia . TestMapper . UsesCustomIdObject ucioLoaded = ds . find ( com . github . jmkgreen . morphia . TestMapper . UsesCustomIdObject . class , \"_id.t\" , \"banker\" ) . get ( ) ; \"<AssertPlaceHolder>\" ; } get ( ) { return ds ; }", "answer": "org . junit . Assert . assertNotNull ( ucioLoaded )"}
{"focal": "add ( org . apache . flink . runtime . taskmanager . Task ) { org . apache . flink . util . Preconditions . checkArgument ( task . getJobID ( ) . equals ( jobId ) , ( \"The<sp>task's<sp>job<sp>id<sp>does<sp>not<sp>match<sp>the<sp>\" + \"job<sp>id<sp>for<sp>which<sp>the<sp>slot<sp>has<sp>been<sp>allocated.\" ) ) ; org . apache . flink . util . Preconditions . checkArgument ( task . getAllocationId ( ) . equals ( allocationId ) , ( \"The<sp>task's<sp>allocation<sp>\" + \"id<sp>does<sp>not<sp>match<sp>the<sp>allocation<sp>id<sp>for<sp>which<sp>the<sp>slot<sp>has<sp>been<sp>allocated.\" ) ) ; org . apache . flink . util . Preconditions . checkState ( ( ( TaskSlotState . ACTIVE ) == ( state ) ) , \"The<sp>task<sp>slot<sp>is<sp>not<sp>in<sp>state<sp>active.\" ) ; org . apache . flink . runtime . taskmanager . Task oldTask = tasks . put ( task . getExecutionId ( ) , task ) ; if ( oldTask != null ) { tasks . put ( task . getExecutionId ( ) , oldTask ) ; return false ; } else { return true ; } }", "testMethod": "testRequestMemorySegmentsExceptionDuringBufferRedistribution ( ) { final int numBuffers = 3 ; org . apache . flink . runtime . io . network . buffer . NetworkBufferPool networkBufferPool = new org . apache . flink . runtime . io . network . buffer . NetworkBufferPool ( numBuffers , 128 ) ; final java . util . List < org . apache . flink . runtime . io . network . buffer . Buffer > buffers = new java . util . ArrayList ( numBuffers ) ; java . util . List < org . apache . flink . core . memory . MemorySegment > memorySegments = java . util . Collections . emptyList ( ) ; org . apache . flink . runtime . io . network . buffer . BufferPool bufferPool = networkBufferPool . createBufferPool ( 1 , numBuffers , java . util . Optional . of ( ( numBuffersToRecycle ) -> { throw new org . apache . flink . runtime . io . network . buffer . TestIOException ( ) ; } ) ) ; try { for ( int i = 0 ; i < ( numBuffers - 1 ) ; ++ i ) { org . apache . flink . runtime . io . network . buffer . Buffer buffer = bufferPool . requestBuffer ( ) ; buffers . add ( buffer ) ; \"<AssertPlaceHolder>\" ; } memorySegments = networkBufferPool . requestMemorySegments ( 2 ) ; org . junit . Assert . fail ( \"Requesting<sp>memory<sp>segments<sp>should<sp>have<sp>thrown<sp>during<sp>buffer<sp>pool<sp>redistribution.\" ) ; } catch ( org . apache . flink . runtime . io . network . buffer . NetworkBufferPoolTest . TestIOException e ) { expectedException . expect ( org . apache . flink . runtime . io . network . buffer . NetworkBufferPoolTest . TestIOException . class ) ; networkBufferPool . createBufferPool ( 2 , 2 ) ; } finally { for ( org . apache . flink . runtime . io . network . buffer . Buffer buffer : buffers ) { buffer . recycleBuffer ( ) ; } bufferPool . lazyDestroy ( ) ; networkBufferPool . recycleMemorySegments ( memorySegments ) ; networkBufferPool . destroy ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( buffer )", "total": "testRequestMemorySegmentsExceptionDuringBufferRedistribution ( ) { final int numBuffers = 3 ; org . apache . flink . runtime . io . network . buffer . NetworkBufferPool networkBufferPool = new org . apache . flink . runtime . io . network . buffer . NetworkBufferPool ( numBuffers , 128 ) ; final java . util . List < org . apache . flink . runtime . io . network . buffer . Buffer > buffers = new java . util . ArrayList ( numBuffers ) ; java . util . List < org . apache . flink . core . memory . MemorySegment > memorySegments = java . util . Collections . emptyList ( ) ; org . apache . flink . runtime . io . network . buffer . BufferPool bufferPool = networkBufferPool . createBufferPool ( 1 , numBuffers , java . util . Optional . of ( ( numBuffersToRecycle ) -> { throw new org . apache . flink . runtime . io . network . buffer . TestIOException ( ) ; } ) ) ; try { for ( int i = 0 ; i < ( numBuffers - 1 ) ; ++ i ) { org . apache . flink . runtime . io . network . buffer . Buffer buffer = bufferPool . requestBuffer ( ) ; buffers . add ( buffer ) ; \"<AssertPlaceHolder>\" ; } memorySegments = networkBufferPool . requestMemorySegments ( 2 ) ; org . junit . Assert . fail ( \"Requesting<sp>memory<sp>segments<sp>should<sp>have<sp>thrown<sp>during<sp>buffer<sp>pool<sp>redistribution.\" ) ; } catch ( org . apache . flink . runtime . io . network . buffer . NetworkBufferPoolTest . TestIOException e ) { expectedException . expect ( org . apache . flink . runtime . io . network . buffer . NetworkBufferPoolTest . TestIOException . class ) ; networkBufferPool . createBufferPool ( 2 , 2 ) ; } finally { for ( org . apache . flink . runtime . io . network . buffer . Buffer buffer : buffers ) { buffer . recycleBuffer ( ) ; } bufferPool . lazyDestroy ( ) ; networkBufferPool . recycleMemorySegments ( memorySegments ) ; networkBufferPool . destroy ( ) ; } } add ( org . apache . flink . runtime . taskmanager . Task ) { org . apache . flink . util . Preconditions . checkArgument ( task . getJobID ( ) . equals ( jobId ) , ( \"The<sp>task's<sp>job<sp>id<sp>does<sp>not<sp>match<sp>the<sp>\" + \"job<sp>id<sp>for<sp>which<sp>the<sp>slot<sp>has<sp>been<sp>allocated.\" ) ) ; org . apache . flink . util . Preconditions . checkArgument ( task . getAllocationId ( ) . equals ( allocationId ) , ( \"The<sp>task's<sp>allocation<sp>\" + \"id<sp>does<sp>not<sp>match<sp>the<sp>allocation<sp>id<sp>for<sp>which<sp>the<sp>slot<sp>has<sp>been<sp>allocated.\" ) ) ; org . apache . flink . util . Preconditions . checkState ( ( ( TaskSlotState . ACTIVE ) == ( state ) ) , \"The<sp>task<sp>slot<sp>is<sp>not<sp>in<sp>state<sp>active.\" ) ; org . apache . flink . runtime . taskmanager . Task oldTask = tasks . put ( task . getExecutionId ( ) , task ) ; if ( oldTask != null ) { tasks . put ( task . getExecutionId ( ) , oldTask ) ; return false ; } else { return true ; } }", "answer": "org . junit . Assert . assertNotNull ( buffer )"}
{"focal": "unmarshalObject ( java . lang . String ) { nl . bzk . brp . pocmotor . binding . IBindingFactory bfact = nl . bzk . brp . pocmotor . binding . BindingDirectory . getFactory ( getBindingClass ( ) ) ; nl . bzk . brp . pocmotor . binding . IUnmarshallingContext uctx = bfact . createUnmarshallingContext ( ) ; return ( ( T ) ( uctx . unmarshalDocument ( new java . io . ByteArrayInputStream ( xml . getBytes ( ) ) , null ) ) ) ; }", "testMethod": "testBinding ( ) { java . lang . String xml = leesBestand ( \"registreerAfnemerindicatie.xml\" ) ; valideerTegenSchema ( xml ) ; nl . bzk . brp . model . synchronisatie . RegistreerAfnemerindicatieBericht bericht = unmarshalObject ( xml ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( bericht )", "total": "testBinding ( ) { java . lang . String xml = leesBestand ( \"registreerAfnemerindicatie.xml\" ) ; valideerTegenSchema ( xml ) ; nl . bzk . brp . model . synchronisatie . RegistreerAfnemerindicatieBericht bericht = unmarshalObject ( xml ) ; \"<AssertPlaceHolder>\" ; } unmarshalObject ( java . lang . String ) { nl . bzk . brp . pocmotor . binding . IBindingFactory bfact = nl . bzk . brp . pocmotor . binding . BindingDirectory . getFactory ( getBindingClass ( ) ) ; nl . bzk . brp . pocmotor . binding . IUnmarshallingContext uctx = bfact . createUnmarshallingContext ( ) ; return ( ( T ) ( uctx . unmarshalDocument ( new java . io . ByteArrayInputStream ( xml . getBytes ( ) ) , null ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( bericht )"}
{"focal": "get ( ) { return new io . agrest . runtime . processor . select . SelectProcessorFactory ( stages ) ; }", "testMethod": "test_Select_CayenneExp_In_Array ( ) { javax . ws . rs . core . Response r1 = target ( \"/e3_In_Array\" ) . queryParam ( \"cayenneExp\" , urlEnc ( \"{\\\"exp\\\":\\\"e2<sp>in<sp>$ids\\\",\\\"params\\\":{\\\"ids\\\":<sp>[3,<sp>4]}}\" ) ) . request ( ) . get ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( r1 )", "total": "test_Select_CayenneExp_In_Array ( ) { javax . ws . rs . core . Response r1 = target ( \"/e3_In_Array\" ) . queryParam ( \"cayenneExp\" , urlEnc ( \"{\\\"exp\\\":\\\"e2<sp>in<sp>$ids\\\",\\\"params\\\":{\\\"ids\\\":<sp>[3,<sp>4]}}\" ) ) . request ( ) . get ( ) ; \"<AssertPlaceHolder>\" ; } get ( ) { return new io . agrest . runtime . processor . select . SelectProcessorFactory ( stages ) ; }", "answer": "org . junit . Assert . assertNotNull ( r1 )"}
{"focal": "uploadMaterialArticle ( java . util . List ) { com . foxinmy . weixin4j . model . Token token = tokenManager . getCache ( ) ; java . lang . String material_article_upload_uri = getRequestUri ( \"material_article_upload_uri\" ) ; com . alibaba . fastjson . JSONObject obj = new com . alibaba . fastjson . JSONObject ( ) ; obj . put ( \"articles\" , articles ) ; com . foxinmy . weixin4j . http . weixin . WeixinResponse response = weixinExecutor . post ( java . lang . String . format ( material_article_upload_uri , token . getAccessToken ( ) ) , obj . toJSONString ( ) ) ; return response . getAsJson ( ) . getString ( \"media_id\" ) ; }", "testMethod": "uploadMaterialArticle ( ) { java . util . List < com . foxinmy . weixin4j . tuple . MpArticle > articles = new java . util . ArrayList < com . foxinmy . weixin4j . tuple . MpArticle > ( ) ; articles . add ( new com . foxinmy . weixin4j . tuple . MpArticle ( \"8790403529\" , \"title\" , \"content\" ) ) ; java . lang . String mediaId = mediaApi . uploadMaterialArticle ( articles ) ; \"<AssertPlaceHolder>\" ; System . err . println ( mediaId ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( mediaId )", "total": "uploadMaterialArticle ( ) { java . util . List < com . foxinmy . weixin4j . tuple . MpArticle > articles = new java . util . ArrayList < com . foxinmy . weixin4j . tuple . MpArticle > ( ) ; articles . add ( new com . foxinmy . weixin4j . tuple . MpArticle ( \"8790403529\" , \"title\" , \"content\" ) ) ; java . lang . String mediaId = mediaApi . uploadMaterialArticle ( articles ) ; \"<AssertPlaceHolder>\" ; System . err . println ( mediaId ) ; } uploadMaterialArticle ( java . util . List ) { com . foxinmy . weixin4j . model . Token token = tokenManager . getCache ( ) ; java . lang . String material_article_upload_uri = getRequestUri ( \"material_article_upload_uri\" ) ; com . alibaba . fastjson . JSONObject obj = new com . alibaba . fastjson . JSONObject ( ) ; obj . put ( \"articles\" , articles ) ; com . foxinmy . weixin4j . http . weixin . WeixinResponse response = weixinExecutor . post ( java . lang . String . format ( material_article_upload_uri , token . getAccessToken ( ) ) , obj . toJSONString ( ) ) ; return response . getAsJson ( ) . getString ( \"media_id\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( mediaId )"}
{"focal": "getBusinessObjectData ( org . finra . herd . model . dto . DownloaderInputManifestDto ) { org . finra . herd . tools . downloader . DownloaderWebClient . LOGGER . info ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" ) ; java . lang . StringBuilder uriPathBuilder = new java . lang . StringBuilder ( HERD_APP_REST_URI_PREFIX ) ; uriPathBuilder . append ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 2 ) ; if ( ( manifest . getNamespace ( ) ) != null ) { uriPathBuilder . append ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 5 ) . append ( manifest . getNamespace ( ) ) ; } uriPathBuilder . append ( \"/businessObjectDefinitionNames/\" ) . append ( manifest . getBusinessObjectDefinitionName ( ) ) ; uriPathBuilder . append ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 0 ) . append ( manifest . getBusinessObjectFormatUsage ( ) ) ; uriPathBuilder . append ( \"/businessObjectFormatFileTypes/\" ) . append ( manifest . getBusinessObjectFormatFileType ( ) ) ; org . apache . http . client . utils . URIBuilder uriBuilder = new org . apache . http . client . utils . URIBuilder ( ) . setScheme ( getUriScheme ( ) ) . setHost ( regServerAccessParamsDto . getRegServerHost ( ) ) . setPort ( regServerAccessParamsDto . getRegServerPort ( ) ) . setPath ( uriPathBuilder . toString ( ) ) . setParameter ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 4 , manifest . getPartitionKey ( ) ) . setParameter ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 1 , manifest . getPartitionValue ( ) ) . setParameter ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 8 , manifest . getBusinessObjectFormatVersion ( ) ) . setParameter ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 3 , manifest . getBusinessObjectDataVersion ( ) ) ; if ( ( manifest . getSubPartitionValues ( ) ) != null ) { uriBuilder . setParameter ( \"subPartitionValues\" , herdStringHelper . join ( manifest . getSubPartitionValues ( ) , \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 7 , \"\\\\\" ) ) ; } java . net . URI uri = uriBuilder . build ( ) ; org . apache . http . impl . client . CloseableHttpClient client = httpClientHelper . createHttpClient ( regServerAccessParamsDto . isTrustSelfSignedCertificate ( ) , regServerAccessParamsDto . isDisableHostnameVerification ( ) ) ; org . apache . http . client . methods . HttpGet request = new org . apache . http . client . methods . HttpGet ( uri ) ; request . addHeader ( \"Accepts\" , \"application/xml\" ) ; if ( regServerAccessParamsDto . isUseSsl ( ) ) { request . addHeader ( getAuthorizationHeader ( ) ) ; } org . finra . herd . tools . downloader . DownloaderWebClient . LOGGER . info ( java . lang . String . format ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 6 , request . getURI ( ) . toString ( ) ) ) ; org . finra . herd . tools . downloader . DownloaderWebClient . LOGGER . info ( java . lang . String . format ( \"<sp>HTTP<sp>GET<sp>Headers:<sp>%s\" , java . util . Arrays . toString ( request . getAllHeaders ( ) ) ) ) ; org . finra . herd . model . api . xml . BusinessObjectData businessObjectData = getBusinessObjectData ( httpClientOperations . execute ( client , request ) , \"retrieve<sp>business<sp>object<sp>data<sp>from<sp>the<sp>registration<sp>server\" ) ; org . finra . herd . tools . downloader . DownloaderWebClient . LOGGER . info ( \"Successfully<sp>retrieved<sp>business<sp>object<sp>data<sp>from<sp>the<sp>registration<sp>server.\" ) ; return businessObjectData ; }", "testMethod": "testGetData ( ) { uploadAndRegisterTestDataParents ( downloaderWebClient ) ; uploadTestDataFilesToS3 ( org . finra . herd . tools . downloader . S3_TEST_PATH_V0 ) ; final org . finra . herd . model . dto . UploaderInputManifestDto uploaderInputManifestDto = getTestUploaderInputManifestDto ( ) ; executeWithoutLogging ( org . finra . herd . tools . common . databridge . DataBridgeWebClient . class , new org . finra . herd . core . Command ( ) { @ org . finra . herd . tools . downloader . Override public void execute ( ) throws org . finra . herd . tools . downloader . Exception { org . finra . herd . model . api . xml . BusinessObjectData businessObjectData = downloaderWebClient . preRegisterBusinessObjectData ( uploaderInputManifestDto , StorageEntity . MANAGED_STORAGE , false ) ; org . finra . herd . model . api . xml . BusinessObjectDataKey businessObjectDataKey = businessObjectDataHelper . getBusinessObjectDataKey ( businessObjectData ) ; downloaderWebClient . addStorageFiles ( businessObjectDataKey , uploaderInputManifestDto , getTestS3FileTransferRequestParamsDto ( ( ( S3_TEST_PATH_V0 ) + \"/\" ) ) , StorageEntity . MANAGED_STORAGE ) ; downloaderWebClient . updateBusinessObjectDataStatus ( businessObjectDataKey , BusinessObjectDataStatusEntity . VALID ) ; } } ) ; org . finra . herd . model . dto . DownloaderInputManifestDto downloaderInputManifestDto = getTestDownloaderInputManifestDto ( ) ; org . finra . herd . model . api . xml . BusinessObjectData resultBusinessObjectData = downloaderWebClient . getBusinessObjectData ( downloaderInputManifestDto ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( resultBusinessObjectData )", "total": "testGetData ( ) { uploadAndRegisterTestDataParents ( downloaderWebClient ) ; uploadTestDataFilesToS3 ( org . finra . herd . tools . downloader . S3_TEST_PATH_V0 ) ; final org . finra . herd . model . dto . UploaderInputManifestDto uploaderInputManifestDto = getTestUploaderInputManifestDto ( ) ; executeWithoutLogging ( org . finra . herd . tools . common . databridge . DataBridgeWebClient . class , new org . finra . herd . core . Command ( ) { @ org . finra . herd . tools . downloader . Override public void execute ( ) throws org . finra . herd . tools . downloader . Exception { org . finra . herd . model . api . xml . BusinessObjectData businessObjectData = downloaderWebClient . preRegisterBusinessObjectData ( uploaderInputManifestDto , StorageEntity . MANAGED_STORAGE , false ) ; org . finra . herd . model . api . xml . BusinessObjectDataKey businessObjectDataKey = businessObjectDataHelper . getBusinessObjectDataKey ( businessObjectData ) ; downloaderWebClient . addStorageFiles ( businessObjectDataKey , uploaderInputManifestDto , getTestS3FileTransferRequestParamsDto ( ( ( S3_TEST_PATH_V0 ) + \"/\" ) ) , StorageEntity . MANAGED_STORAGE ) ; downloaderWebClient . updateBusinessObjectDataStatus ( businessObjectDataKey , BusinessObjectDataStatusEntity . VALID ) ; } } ) ; org . finra . herd . model . dto . DownloaderInputManifestDto downloaderInputManifestDto = getTestDownloaderInputManifestDto ( ) ; org . finra . herd . model . api . xml . BusinessObjectData resultBusinessObjectData = downloaderWebClient . getBusinessObjectData ( downloaderInputManifestDto ) ; \"<AssertPlaceHolder>\" ; } getBusinessObjectData ( org . finra . herd . model . dto . DownloaderInputManifestDto ) { org . finra . herd . tools . downloader . DownloaderWebClient . LOGGER . info ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" ) ; java . lang . StringBuilder uriPathBuilder = new java . lang . StringBuilder ( HERD_APP_REST_URI_PREFIX ) ; uriPathBuilder . append ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 2 ) ; if ( ( manifest . getNamespace ( ) ) != null ) { uriPathBuilder . append ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 5 ) . append ( manifest . getNamespace ( ) ) ; } uriPathBuilder . append ( \"/businessObjectDefinitionNames/\" ) . append ( manifest . getBusinessObjectDefinitionName ( ) ) ; uriPathBuilder . append ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 0 ) . append ( manifest . getBusinessObjectFormatUsage ( ) ) ; uriPathBuilder . append ( \"/businessObjectFormatFileTypes/\" ) . append ( manifest . getBusinessObjectFormatFileType ( ) ) ; org . apache . http . client . utils . URIBuilder uriBuilder = new org . apache . http . client . utils . URIBuilder ( ) . setScheme ( getUriScheme ( ) ) . setHost ( regServerAccessParamsDto . getRegServerHost ( ) ) . setPort ( regServerAccessParamsDto . getRegServerPort ( ) ) . setPath ( uriPathBuilder . toString ( ) ) . setParameter ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 4 , manifest . getPartitionKey ( ) ) . setParameter ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 1 , manifest . getPartitionValue ( ) ) . setParameter ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 8 , manifest . getBusinessObjectFormatVersion ( ) ) . setParameter ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 3 , manifest . getBusinessObjectDataVersion ( ) ) ; if ( ( manifest . getSubPartitionValues ( ) ) != null ) { uriBuilder . setParameter ( \"subPartitionValues\" , herdStringHelper . join ( manifest . getSubPartitionValues ( ) , \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 7 , \"\\\\\" ) ) ; } java . net . URI uri = uriBuilder . build ( ) ; org . apache . http . impl . client . CloseableHttpClient client = httpClientHelper . createHttpClient ( regServerAccessParamsDto . isTrustSelfSignedCertificate ( ) , regServerAccessParamsDto . isDisableHostnameVerification ( ) ) ; org . apache . http . client . methods . HttpGet request = new org . apache . http . client . methods . HttpGet ( uri ) ; request . addHeader ( \"Accepts\" , \"application/xml\" ) ; if ( regServerAccessParamsDto . isUseSsl ( ) ) { request . addHeader ( getAuthorizationHeader ( ) ) ; } org . finra . herd . tools . downloader . DownloaderWebClient . LOGGER . info ( java . lang . String . format ( \"Retrieving<sp>business<sp>object<sp>data<sp>information<sp>from<sp>the<sp>registration<sp>server...\" 6 , request . getURI ( ) . toString ( ) ) ) ; org . finra . herd . tools . downloader . DownloaderWebClient . LOGGER . info ( java . lang . String . format ( \"<sp>HTTP<sp>GET<sp>Headers:<sp>%s\" , java . util . Arrays . toString ( request . getAllHeaders ( ) ) ) ) ; org . finra . herd . model . api . xml . BusinessObjectData businessObjectData = getBusinessObjectData ( httpClientOperations . execute ( client , request ) , \"retrieve<sp>business<sp>object<sp>data<sp>from<sp>the<sp>registration<sp>server\" ) ; org . finra . herd . tools . downloader . DownloaderWebClient . LOGGER . info ( \"Successfully<sp>retrieved<sp>business<sp>object<sp>data<sp>from<sp>the<sp>registration<sp>server.\" ) ; return businessObjectData ; }", "answer": "org . junit . Assert . assertNotNull ( resultBusinessObjectData )"}
{"focal": "getNetworks ( ) { return networks ; }", "testMethod": "testGetNetworks ( ) { final org . cytoscape . model . CyNetwork [ ] networks = reader . getNetworks ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( networks )", "total": "testGetNetworks ( ) { final org . cytoscape . model . CyNetwork [ ] networks = reader . getNetworks ( ) ; \"<AssertPlaceHolder>\" ; } getNetworks ( ) { return networks ; }", "answer": "org . junit . Assert . assertNotNull ( networks )"}
{"focal": "getBody ( ) { return body ; }", "testMethod": "noServersTestZoneLB ( ) { com . kixeye . janus . Janus janus = new com . kixeye . janus . Janus ( VIP_TEST , new com . kixeye . janus . serverlist . ConstServerList ( VIP_TEST ) , new com . kixeye . janus . loadbalancer . ZoneAwareLoadBalancer ( VIP_TEST , \"default\" , null ) , new com . kixeye . janus . ServerStatsFactory ( com . kixeye . janus . ServerStats . class , new com . codahale . metrics . MetricRegistry ( ) ) ) ; com . kixeye . janus . client . http . rest . DefaultRestHttpClient client = new com . kixeye . janus . client . http . rest . DefaultRestHttpClient ( janus , 0 , DefaultRestHttpClient . UTF8_STRING_SER_DE , \"text/plain\" ) ; java . lang . String result = client . get ( \"/\" , java . lang . String . class ) . getBody ( ) . deserialize ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "noServersTestZoneLB ( ) { com . kixeye . janus . Janus janus = new com . kixeye . janus . Janus ( VIP_TEST , new com . kixeye . janus . serverlist . ConstServerList ( VIP_TEST ) , new com . kixeye . janus . loadbalancer . ZoneAwareLoadBalancer ( VIP_TEST , \"default\" , null ) , new com . kixeye . janus . ServerStatsFactory ( com . kixeye . janus . ServerStats . class , new com . codahale . metrics . MetricRegistry ( ) ) ) ; com . kixeye . janus . client . http . rest . DefaultRestHttpClient client = new com . kixeye . janus . client . http . rest . DefaultRestHttpClient ( janus , 0 , DefaultRestHttpClient . UTF8_STRING_SER_DE , \"text/plain\" ) ; java . lang . String result = client . get ( \"/\" , java . lang . String . class ) . getBody ( ) . deserialize ( ) ; \"<AssertPlaceHolder>\" ; } getBody ( ) { return body ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getMetricsEventRate ( ) { return getMetricsEventRate ( null ) ; }", "testMethod": "getMetricsEventRateIsSuccessful ( ) { com . ibm . watson . discovery . v1 . model . MetricResponse response = discovery . getMetricsEventRate ( ) . execute ( ) . getResult ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "getMetricsEventRateIsSuccessful ( ) { com . ibm . watson . discovery . v1 . model . MetricResponse response = discovery . getMetricsEventRate ( ) . execute ( ) . getResult ( ) ; \"<AssertPlaceHolder>\" ; } getMetricsEventRate ( ) { return getMetricsEventRate ( null ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreatePlanOfCareSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . hitsp . PlanOfCareSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . hitsp . builder . HITSPBuilderFactory . createPlanOfCareSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . hitsp . PlanOfCareSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreatePlanOfCareSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . hitsp . PlanOfCareSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . hitsp . builder . HITSPBuilderFactory . createPlanOfCareSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . hitsp . PlanOfCareSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "asError ( com . allanbank . mongodb . client . message . Reply ) { com . allanbank . mongodb . MongoDbException error = super . asError ( reply ) ; if ( error == null ) { final java . util . List < com . allanbank . mongodb . bson . Document > results = reply . getResults ( ) ; if ( ( results . size ( ) ) != 1 ) { error = new com . allanbank . mongodb . error . ReplyException ( reply , \"Should<sp>only<sp>be<sp>a<sp>single<sp>document<sp>in<sp>the<sp>reply.\" ) ; } } return error ; }", "testMethod": "testAsErrorReplyBadOk ( ) { final com . allanbank . mongodb . bson . builder . DocumentBuilder db = com . allanbank . mongodb . bson . builder . BuilderFactory . start ( ) . addInteger ( \"ok\" , 0 ) ; db . pushArray ( \"n\" ) ; final java . util . List < com . allanbank . mongodb . bson . Document > docs = java . util . Collections . singletonList ( db . build ( ) ) ; final com . allanbank . mongodb . client . message . Reply reply = new com . allanbank . mongodb . client . message . Reply ( 0 , 0 , 0 , docs , false , false , false , true ) ; final com . allanbank . mongodb . Callback < com . allanbank . mongodb . MongoIterator < com . allanbank . mongodb . bson . Element > > mockCallback = createMock ( com . allanbank . mongodb . Callback . class ) ; replay ( mockCallback ) ; final com . allanbank . mongodb . client . callback . ReplyArrayCallback callback = new com . allanbank . mongodb . client . callback . ReplyArrayCallback ( mockCallback ) ; final com . allanbank . mongodb . error . ReplyException error = ( ( com . allanbank . mongodb . error . ReplyException ) ( callback . asError ( reply ) ) ) ; \"<AssertPlaceHolder>\" ; verify ( mockCallback ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( error )", "total": "testAsErrorReplyBadOk ( ) { final com . allanbank . mongodb . bson . builder . DocumentBuilder db = com . allanbank . mongodb . bson . builder . BuilderFactory . start ( ) . addInteger ( \"ok\" , 0 ) ; db . pushArray ( \"n\" ) ; final java . util . List < com . allanbank . mongodb . bson . Document > docs = java . util . Collections . singletonList ( db . build ( ) ) ; final com . allanbank . mongodb . client . message . Reply reply = new com . allanbank . mongodb . client . message . Reply ( 0 , 0 , 0 , docs , false , false , false , true ) ; final com . allanbank . mongodb . Callback < com . allanbank . mongodb . MongoIterator < com . allanbank . mongodb . bson . Element > > mockCallback = createMock ( com . allanbank . mongodb . Callback . class ) ; replay ( mockCallback ) ; final com . allanbank . mongodb . client . callback . ReplyArrayCallback callback = new com . allanbank . mongodb . client . callback . ReplyArrayCallback ( mockCallback ) ; final com . allanbank . mongodb . error . ReplyException error = ( ( com . allanbank . mongodb . error . ReplyException ) ( callback . asError ( reply ) ) ) ; \"<AssertPlaceHolder>\" ; verify ( mockCallback ) ; } asError ( com . allanbank . mongodb . client . message . Reply ) { com . allanbank . mongodb . MongoDbException error = super . asError ( reply ) ; if ( error == null ) { final java . util . List < com . allanbank . mongodb . bson . Document > results = reply . getResults ( ) ; if ( ( results . size ( ) ) != 1 ) { error = new com . allanbank . mongodb . error . ReplyException ( reply , \"Should<sp>only<sp>be<sp>a<sp>single<sp>document<sp>in<sp>the<sp>reply.\" ) ; } } return error ; }", "answer": "org . junit . Assert . assertNotNull ( error )"}
{"focal": "getStructureId ( ) { return structureId ; }", "testMethod": "testExtractAttributes ( ) { com . liferay . dynamic . data . mapping . kernel . DDMStructure structure = addStructure ( ) ; com . liferay . portal . kernel . search . Document document = new com . liferay . portal . kernel . search . DocumentImpl ( ) ; com . liferay . dynamic . data . mapping . kernel . DDMFormValues ddmFormValues = createDDMFormValues ( ) ; com . liferay . dynamic . data . mapping . kernel . DDMStructureManagerUtil . addAttributes ( structure . getStructureId ( ) , document , ddmFormValues ) ; java . lang . String attributes = com . liferay . dynamic . data . mapping . kernel . DDMStructureManagerUtil . extractAttributes ( structure . getStructureId ( ) , ddmFormValues , LocaleUtil . US ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( attributes )", "total": "testExtractAttributes ( ) { com . liferay . dynamic . data . mapping . kernel . DDMStructure structure = addStructure ( ) ; com . liferay . portal . kernel . search . Document document = new com . liferay . portal . kernel . search . DocumentImpl ( ) ; com . liferay . dynamic . data . mapping . kernel . DDMFormValues ddmFormValues = createDDMFormValues ( ) ; com . liferay . dynamic . data . mapping . kernel . DDMStructureManagerUtil . addAttributes ( structure . getStructureId ( ) , document , ddmFormValues ) ; java . lang . String attributes = com . liferay . dynamic . data . mapping . kernel . DDMStructureManagerUtil . extractAttributes ( structure . getStructureId ( ) , ddmFormValues , LocaleUtil . US ) ; \"<AssertPlaceHolder>\" ; } getStructureId ( ) { return structureId ; }", "answer": "org . junit . Assert . assertNotNull ( attributes )"}
{"focal": "getDictionary ( ) { if ( ( quickfix . DataDictionaryTest . testDataDictionary ) == null ) { quickfix . DataDictionaryTest . testDataDictionary = quickfix . DataDictionaryTest . getDictionary ( \"FIX44.xml\" ) ; } return quickfix . DataDictionaryTest . testDataDictionary ; }", "testMethod": "testParseTwice ( ) { final java . lang . String data1 = \"8=FIX.4.4\u00019=309\u000135=8\u000149=ASX\u000156=CL1_FIX44\u000134=4\u0001\" + ( ( ( ( \"52=20060324-01:05:58\u000117=X-B-WOW-1494E9A0:58BD3F9D-1109\u0001150=D\u000139=0\u0001\" + \"11=184271\u000138=200\u0001198=1494E9A0:58BD3F9D\u0001526=4324\u000137=B-WOW-1494E9A0:58BD3F9D\u0001\" ) + \"55=WOW\u000154=1\u0001151=200\u000114=0\u000140=2\u000144=15\u000159=1\u00016=0\u0001453=3\u0001448=AAA35791\u0001\" ) + \"447=D\u0001452=3\u0001448=8\u0001447=D\u0001452=4\u0001448=FIX11\u0001\" ) + \"447=D\u0001452=36\u000160=20060320-03:34:29\u000110=169\u0001\" ) ; final java . lang . String data2 = \"8=FIX.4.4\u00019=309\u000135=8\u000149=ASX\u000156=CL1_FIX44\u000134=4\u0001\" + ( ( ( \"52=20060324-01:05:58\u000117=X-B-WOW-1494E9A0:58BD3F9D-1109\u0001150=D\u000139=0\u000111=123456\u0001\" + \"38=200\u0001198=1494E9A0:58BD3F9D\u0001526=4324\u000137=B-WOW-1494E9A0:58BD3F9D\u000155=WOW\u000154=1\u0001\" ) + \"151=200\u000114=0\u000140=2\u000144=15\u000159=1\u00016=0\u0001453=3\u0001448=AAA35791\u0001447=D\u0001452=3\u0001\" ) + \"448=8\u0001447=D\u0001452=4\u0001448=FIX11\u0001447=D\u0001452=36\u000160=20060320-03:34:29\u000110=167\u0001\" ) ; final quickfix . DataDictionary dictionary = quickfix . DataDictionaryTest . getDictionary ( ) ; final quickfix . fix44 . ExecutionReport executionReport = new quickfix . fix44 . ExecutionReport ( ) ; \"<AssertPlaceHolder>\" ; executionReport . fromString ( data1 , dictionary , true ) ; dictionary . validate ( executionReport ) ; executionReport . clear ( ) ; executionReport . fromString ( data2 , dictionary , true ) ; dictionary . validate ( executionReport ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( dictionary )", "total": "testParseTwice ( ) { final java . lang . String data1 = \"8=FIX.4.4\u00019=309\u000135=8\u000149=ASX\u000156=CL1_FIX44\u000134=4\u0001\" + ( ( ( ( \"52=20060324-01:05:58\u000117=X-B-WOW-1494E9A0:58BD3F9D-1109\u0001150=D\u000139=0\u0001\" + \"11=184271\u000138=200\u0001198=1494E9A0:58BD3F9D\u0001526=4324\u000137=B-WOW-1494E9A0:58BD3F9D\u0001\" ) + \"55=WOW\u000154=1\u0001151=200\u000114=0\u000140=2\u000144=15\u000159=1\u00016=0\u0001453=3\u0001448=AAA35791\u0001\" ) + \"447=D\u0001452=3\u0001448=8\u0001447=D\u0001452=4\u0001448=FIX11\u0001\" ) + \"447=D\u0001452=36\u000160=20060320-03:34:29\u000110=169\u0001\" ) ; final java . lang . String data2 = \"8=FIX.4.4\u00019=309\u000135=8\u000149=ASX\u000156=CL1_FIX44\u000134=4\u0001\" + ( ( ( \"52=20060324-01:05:58\u000117=X-B-WOW-1494E9A0:58BD3F9D-1109\u0001150=D\u000139=0\u000111=123456\u0001\" + \"38=200\u0001198=1494E9A0:58BD3F9D\u0001526=4324\u000137=B-WOW-1494E9A0:58BD3F9D\u000155=WOW\u000154=1\u0001\" ) + \"151=200\u000114=0\u000140=2\u000144=15\u000159=1\u00016=0\u0001453=3\u0001448=AAA35791\u0001447=D\u0001452=3\u0001\" ) + \"448=8\u0001447=D\u0001452=4\u0001448=FIX11\u0001447=D\u0001452=36\u000160=20060320-03:34:29\u000110=167\u0001\" ) ; final quickfix . DataDictionary dictionary = quickfix . DataDictionaryTest . getDictionary ( ) ; final quickfix . fix44 . ExecutionReport executionReport = new quickfix . fix44 . ExecutionReport ( ) ; \"<AssertPlaceHolder>\" ; executionReport . fromString ( data1 , dictionary , true ) ; dictionary . validate ( executionReport ) ; executionReport . clear ( ) ; executionReport . fromString ( data2 , dictionary , true ) ; dictionary . validate ( executionReport ) ; } getDictionary ( ) { if ( ( quickfix . DataDictionaryTest . testDataDictionary ) == null ) { quickfix . DataDictionaryTest . testDataDictionary = quickfix . DataDictionaryTest . getDictionary ( \"FIX44.xml\" ) ; } return quickfix . DataDictionaryTest . testDataDictionary ; }", "answer": "org . junit . Assert . assertNotNull ( dictionary )"}
{"focal": "testImportExportImport ( java . lang . String ) { java . net . URL url = org . deegree . filter . xml . Filter110XMLEncoderTest . class . getResource ( ( \"v110/\" + resource ) ) ; javax . xml . stream . XMLStreamReader in = javax . xml . stream . XMLInputFactory . newInstance ( ) . createXMLStreamReader ( url . toString ( ) , url . openStream ( ) ) ; in . nextTag ( ) ; org . deegree . filter . Filter filter = org . deegree . filter . xml . Filter110XMLDecoder . parse ( in ) ; java . io . ByteArrayOutputStream bos = new java . io . ByteArrayOutputStream ( ) ; javax . xml . stream . XMLStreamWriter out = javax . xml . stream . XMLOutputFactory . newInstance ( ) . createXMLStreamWriter ( bos ) ; org . deegree . filter . xml . Filter110XMLEncoder . export ( filter , out ) ; out . close ( ) ; in = javax . xml . stream . XMLInputFactory . newInstance ( ) . createXMLStreamReader ( new java . io . ByteArrayInputStream ( bos . toByteArray ( ) ) ) ; in . nextTag ( ) ; System . out . println ( new java . lang . String ( bos . toByteArray ( ) ) ) ; return org . deegree . filter . xml . Filter110XMLDecoder . parse ( in ) ; }", "testMethod": "parseCrossesFilter ( ) { org . deegree . filter . Filter filter = testImportExportImport ( \"testfilter18.xml\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( filter )", "total": "parseCrossesFilter ( ) { org . deegree . filter . Filter filter = testImportExportImport ( \"testfilter18.xml\" ) ; \"<AssertPlaceHolder>\" ; } testImportExportImport ( java . lang . String ) { java . net . URL url = org . deegree . filter . xml . Filter110XMLEncoderTest . class . getResource ( ( \"v110/\" + resource ) ) ; javax . xml . stream . XMLStreamReader in = javax . xml . stream . XMLInputFactory . newInstance ( ) . createXMLStreamReader ( url . toString ( ) , url . openStream ( ) ) ; in . nextTag ( ) ; org . deegree . filter . Filter filter = org . deegree . filter . xml . Filter110XMLDecoder . parse ( in ) ; java . io . ByteArrayOutputStream bos = new java . io . ByteArrayOutputStream ( ) ; javax . xml . stream . XMLStreamWriter out = javax . xml . stream . XMLOutputFactory . newInstance ( ) . createXMLStreamWriter ( bos ) ; org . deegree . filter . xml . Filter110XMLEncoder . export ( filter , out ) ; out . close ( ) ; in = javax . xml . stream . XMLInputFactory . newInstance ( ) . createXMLStreamReader ( new java . io . ByteArrayInputStream ( bos . toByteArray ( ) ) ) ; in . nextTag ( ) ; System . out . println ( new java . lang . String ( bos . toByteArray ( ) ) ) ; return org . deegree . filter . xml . Filter110XMLDecoder . parse ( in ) ; }", "answer": "org . junit . Assert . assertNotNull ( filter )"}
{"focal": "compile ( io . cloudslang . lang . compiler . SlangSource , java . util . Set ) { return compile ( source , dependencySources , PrecompileStrategy . WITHOUT_CACHE ) ; }", "testMethod": "testCompileWorksForSingleSelfReference ( ) { final java . net . URI executable = getClass ( ) . getResource ( \"/cornercases/selfreference.sl\" ) . toURI ( ) ; io . cloudslang . lang . compiler . SlangSource executableSource = io . cloudslang . lang . compiler . SlangSource . fromFile ( executable ) ; io . cloudslang . lang . entities . CompilationArtifact compilationArtifact = compiler . compile ( executableSource , new java . util . HashSet < io . cloudslang . lang . compiler . SlangSource > ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( compilationArtifact )", "total": "testCompileWorksForSingleSelfReference ( ) { final java . net . URI executable = getClass ( ) . getResource ( \"/cornercases/selfreference.sl\" ) . toURI ( ) ; io . cloudslang . lang . compiler . SlangSource executableSource = io . cloudslang . lang . compiler . SlangSource . fromFile ( executable ) ; io . cloudslang . lang . entities . CompilationArtifact compilationArtifact = compiler . compile ( executableSource , new java . util . HashSet < io . cloudslang . lang . compiler . SlangSource > ( ) ) ; \"<AssertPlaceHolder>\" ; } compile ( io . cloudslang . lang . compiler . SlangSource , java . util . Set ) { return compile ( source , dependencySources , PrecompileStrategy . WITHOUT_CACHE ) ; }", "answer": "org . junit . Assert . assertNotNull ( compilationArtifact )"}
{"focal": "getTextBasePoint ( java . lang . String , double , double , java . awt . Graphics2D ) { java . awt . FontMetrics fontMetrics = graphics . getFontMetrics ( ) ; java . awt . geom . Rectangle2D stringBounds = fontMetrics . getStringBounds ( text , graphics ) ; int [ ] point = this . transformPoint ( xCoord , yCoord ) ; int baseX = ( ( int ) ( ( point [ 0 ] ) - ( ( stringBounds . getWidth ( ) ) / 2 ) ) ) ; int baseY = ( ( int ) ( ( point [ 1 ] ) + ( ( fontMetrics . getAscent ( ) ) - ( ( stringBounds . getHeight ( ) ) / 2 ) ) ) ) ; return new java . awt . Point ( baseX , baseY ) ; }", "testMethod": "testGetTextBasePoint ( ) { org . openscience . cdk . renderer . visitor . AbstractAWTDrawVisitor visitor = new org . openscience . cdk . renderer . visitor . AbstractAWTDrawVisitorTest . NestedAWTDrawVisitor ( ) ; visitor . setTransform ( new java . awt . geom . AffineTransform ( ) ) ; java . awt . Image image = new java . awt . image . BufferedImage ( 100 , 100 , java . awt . image . BufferedImage . TYPE_INT_RGB ) ; java . awt . Graphics2D g2d = ( ( java . awt . Graphics2D ) ( image . getGraphics ( ) ) ) ; java . awt . Point point = visitor . getTextBasePoint ( \"Foo\" , 3 , 5 , g2d ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( point )", "total": "testGetTextBasePoint ( ) { org . openscience . cdk . renderer . visitor . AbstractAWTDrawVisitor visitor = new org . openscience . cdk . renderer . visitor . AbstractAWTDrawVisitorTest . NestedAWTDrawVisitor ( ) ; visitor . setTransform ( new java . awt . geom . AffineTransform ( ) ) ; java . awt . Image image = new java . awt . image . BufferedImage ( 100 , 100 , java . awt . image . BufferedImage . TYPE_INT_RGB ) ; java . awt . Graphics2D g2d = ( ( java . awt . Graphics2D ) ( image . getGraphics ( ) ) ) ; java . awt . Point point = visitor . getTextBasePoint ( \"Foo\" , 3 , 5 , g2d ) ; \"<AssertPlaceHolder>\" ; } getTextBasePoint ( java . lang . String , double , double , java . awt . Graphics2D ) { java . awt . FontMetrics fontMetrics = graphics . getFontMetrics ( ) ; java . awt . geom . Rectangle2D stringBounds = fontMetrics . getStringBounds ( text , graphics ) ; int [ ] point = this . transformPoint ( xCoord , yCoord ) ; int baseX = ( ( int ) ( ( point [ 0 ] ) - ( ( stringBounds . getWidth ( ) ) / 2 ) ) ) ; int baseY = ( ( int ) ( ( point [ 1 ] ) + ( ( fontMetrics . getAscent ( ) ) - ( ( stringBounds . getHeight ( ) ) / 2 ) ) ) ) ; return new java . awt . Point ( baseX , baseY ) ; }", "answer": "org . junit . Assert . assertNotNull ( point )"}
{"focal": "println ( java . lang . Object ) { if ( ( logWriter ) != null ) { logWriter . println ( o ) ; } }", "testMethod": "testGetVersion ( ) { java . lang . String version = it . unibz . inf . ontop . utils . VersionInfo . getVersionInfo ( ) . getVersion ( ) ; System . out . println ( version ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( version )", "total": "testGetVersion ( ) { java . lang . String version = it . unibz . inf . ontop . utils . VersionInfo . getVersionInfo ( ) . getVersion ( ) ; System . out . println ( version ) ; \"<AssertPlaceHolder>\" ; } println ( java . lang . Object ) { if ( ( logWriter ) != null ) { logWriter . println ( o ) ; } }", "answer": "org . junit . Assert . assertNotNull ( version )"}
{"focal": "get ( ) { return ds ; }", "testMethod": "testWithinRadius2 ( ) { ds . ensureIndexes ( ) ; com . github . jmkgreen . morphia . query . TestGeoQueries . Place place1 = new com . github . jmkgreen . morphia . query . TestGeoQueries . Place ( \"place1\" , new double [ ] { 1 , 1 } ) ; ds . save ( place1 ) ; com . github . jmkgreen . morphia . query . TestGeoQueries . Place found = ds . find ( com . github . jmkgreen . morphia . query . TestGeoQueries . Place . class ) . field ( \"loc\" ) . within ( 0.5 , 0.5 , 0.77 ) . get ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( found )", "total": "testWithinRadius2 ( ) { ds . ensureIndexes ( ) ; com . github . jmkgreen . morphia . query . TestGeoQueries . Place place1 = new com . github . jmkgreen . morphia . query . TestGeoQueries . Place ( \"place1\" , new double [ ] { 1 , 1 } ) ; ds . save ( place1 ) ; com . github . jmkgreen . morphia . query . TestGeoQueries . Place found = ds . find ( com . github . jmkgreen . morphia . query . TestGeoQueries . Place . class ) . field ( \"loc\" ) . within ( 0.5 , 0.5 , 0.77 ) . get ( ) ; \"<AssertPlaceHolder>\" ; } get ( ) { return ds ; }", "answer": "org . junit . Assert . assertNotNull ( found )"}
{"focal": "newInstance ( ) { java . net . URL wsdlLocation = be . e_contract . mycarenet . ehbox . EhBoxConsultationServiceFactory . class . getResource ( \"/ehBoxPublication-v3.wsdl\" ) ; javax . xml . namespace . QName serviceName = new javax . xml . namespace . QName ( \"urn:be:fgov:ehealth:ehbox:publication:protocol:v3\" , \"ehBoxPublicationService\" ) ; be . e_contract . mycarenet . ehbox . jaxws . publication . EhBoxPublicationService service = new be . e_contract . mycarenet . ehbox . jaxws . publication . EhBoxPublicationService ( wsdlLocation , serviceName ) ; return service ; }", "testMethod": "testNewInstance ( ) { be . e_contract . mycarenet . ehbox . jaxws . publication . EhBoxPublicationService service = be . e_contract . mycarenet . ehbox . EhBoxPublicationServiceFactory . newInstance ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( service )", "total": "testNewInstance ( ) { be . e_contract . mycarenet . ehbox . jaxws . publication . EhBoxPublicationService service = be . e_contract . mycarenet . ehbox . EhBoxPublicationServiceFactory . newInstance ( ) ; \"<AssertPlaceHolder>\" ; } newInstance ( ) { java . net . URL wsdlLocation = be . e_contract . mycarenet . ehbox . EhBoxConsultationServiceFactory . class . getResource ( \"/ehBoxPublication-v3.wsdl\" ) ; javax . xml . namespace . QName serviceName = new javax . xml . namespace . QName ( \"urn:be:fgov:ehealth:ehbox:publication:protocol:v3\" , \"ehBoxPublicationService\" ) ; be . e_contract . mycarenet . ehbox . jaxws . publication . EhBoxPublicationService service = new be . e_contract . mycarenet . ehbox . jaxws . publication . EhBoxPublicationService ( wsdlLocation , serviceName ) ; return service ; }", "answer": "org . junit . Assert . assertNotNull ( service )"}
{"focal": "getLinkStates ( ) { return this . linkStates ; }", "testMethod": "transformWithSourceMetaData ( ) { java . lang . String input = \"[[http://ok]]\" ; org . xwiki . rendering . parser . Parser parser = this . componentManager . getInstance ( org . xwiki . rendering . parser . Parser . class , \"xwiki/2.0\" ) ; org . xwiki . rendering . block . XDOM xdom = parser . parse ( new java . io . StringReader ( input ) ) ; org . xwiki . rendering . listener . MetaData metaData = new org . xwiki . rendering . listener . MetaData ( ) ; metaData . addMetaData ( MetaData . SOURCE , \"source\" ) ; org . xwiki . rendering . block . XDOM newXDOM = new org . xwiki . rendering . block . XDOM ( xdom . getChildren ( ) , metaData ) ; org . xwiki . rendering . internal . transformation . linkchecker . HTTPChecker httpChecker = this . componentManager . registerMockComponent ( org . xwiki . rendering . internal . transformation . linkchecker . HTTPChecker . class ) ; when ( httpChecker . check ( \"http://ok\" ) ) . thenReturn ( 200 ) ; org . xwiki . rendering . transformation . Transformation transformation = this . componentManager . getInstance ( org . xwiki . rendering . transformation . Transformation . class , \"linkchecker\" ) ; transformation . transform ( newXDOM , new org . xwiki . rendering . transformation . TransformationContext ( ) ) ; org . xwiki . rendering . transformation . linkchecker . LinkStateManager linkStateManager = this . componentManager . getInstance ( org . xwiki . rendering . transformation . linkchecker . LinkStateManager . class ) ; wait ( linkStateManager , 1 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( linkStateManager . getLinkStates ( ) . get ( \"http://ok\" ) . get ( \"source\" ) )", "total": "transformWithSourceMetaData ( ) { java . lang . String input = \"[[http://ok]]\" ; org . xwiki . rendering . parser . Parser parser = this . componentManager . getInstance ( org . xwiki . rendering . parser . Parser . class , \"xwiki/2.0\" ) ; org . xwiki . rendering . block . XDOM xdom = parser . parse ( new java . io . StringReader ( input ) ) ; org . xwiki . rendering . listener . MetaData metaData = new org . xwiki . rendering . listener . MetaData ( ) ; metaData . addMetaData ( MetaData . SOURCE , \"source\" ) ; org . xwiki . rendering . block . XDOM newXDOM = new org . xwiki . rendering . block . XDOM ( xdom . getChildren ( ) , metaData ) ; org . xwiki . rendering . internal . transformation . linkchecker . HTTPChecker httpChecker = this . componentManager . registerMockComponent ( org . xwiki . rendering . internal . transformation . linkchecker . HTTPChecker . class ) ; when ( httpChecker . check ( \"http://ok\" ) ) . thenReturn ( 200 ) ; org . xwiki . rendering . transformation . Transformation transformation = this . componentManager . getInstance ( org . xwiki . rendering . transformation . Transformation . class , \"linkchecker\" ) ; transformation . transform ( newXDOM , new org . xwiki . rendering . transformation . TransformationContext ( ) ) ; org . xwiki . rendering . transformation . linkchecker . LinkStateManager linkStateManager = this . componentManager . getInstance ( org . xwiki . rendering . transformation . linkchecker . LinkStateManager . class ) ; wait ( linkStateManager , 1 ) ; \"<AssertPlaceHolder>\" ; } getLinkStates ( ) { return this . linkStates ; }", "answer": "org . junit . Assert . assertNotNull ( linkStateManager . getLinkStates ( ) . get ( \"http://ok\" ) . get ( \"source\" ) )"}
{"focal": "defineAppWithRuntime ( ) { org . apache . maven . plugin . MojoExecutionException exception = null ; try { handler . defineAppWithRuntime ( ) ; } catch ( org . apache . maven . plugin . MojoExecutionException e ) { exception = e ; } finally { org . junit . Assert . assertNotNull ( exception ) ; } }", "testMethod": "defineAppWithRuntime ( ) { org . apache . maven . plugin . MojoExecutionException exception = null ; try { handler . defineAppWithRuntime ( ) ; } catch ( org . apache . maven . plugin . MojoExecutionException e ) { exception = e ; } finally { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( exception )", "total": "defineAppWithRuntime ( ) { org . apache . maven . plugin . MojoExecutionException exception = null ; try { handler . defineAppWithRuntime ( ) ; } catch ( org . apache . maven . plugin . MojoExecutionException e ) { exception = e ; } finally { \"<AssertPlaceHolder>\" ; } } defineAppWithRuntime ( ) { org . apache . maven . plugin . MojoExecutionException exception = null ; try { handler . defineAppWithRuntime ( ) ; } catch ( org . apache . maven . plugin . MojoExecutionException e ) { exception = e ; } finally { org . junit . Assert . assertNotNull ( exception ) ; } }", "answer": "org . junit . Assert . assertNotNull ( exception )"}
{"focal": "getProperties ( ) { return hudson . model . Descriptor . toMap ( properties ) ; }", "testMethod": "persistence ( ) { hudson . model . ListView view = listView ( \"foo\" ) ; hudson . model . ListView v = ( ( hudson . model . ListView ) ( Jenkins . XSTREAM . fromXML ( Jenkins . XSTREAM . toXML ( view ) ) ) ) ; System . out . println ( v . getProperties ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( v . getProperties ( ) )", "total": "persistence ( ) { hudson . model . ListView view = listView ( \"foo\" ) ; hudson . model . ListView v = ( ( hudson . model . ListView ) ( Jenkins . XSTREAM . fromXML ( Jenkins . XSTREAM . toXML ( view ) ) ) ) ; System . out . println ( v . getProperties ( ) ) ; \"<AssertPlaceHolder>\" ; } getProperties ( ) { return hudson . model . Descriptor . toMap ( properties ) ; }", "answer": "org . junit . Assert . assertNotNull ( v . getProperties ( ) )"}
{"focal": "install ( ) { return getDelegate ( ) . install ( ) ; }", "testMethod": "requiresCalledAfterInstall ( ) { org . jboss . msc . service . ServiceBuilder sb = serviceContainer . addService ( org . jboss . msc . multi_value_services . WrongUsageOfNewServicesAPITestCase . ID ) ; sb . provides ( org . jboss . msc . multi_value_services . WrongUsageOfNewServicesAPITestCase . FOO ) ; \"<AssertPlaceHolder>\" ; try { sb . requires ( org . jboss . msc . multi_value_services . WrongUsageOfNewServicesAPITestCase . BAR ) ; org . junit . Assert . fail ( \"IllegalStateException<sp>expected\" ) ; } catch ( java . lang . IllegalStateException ignored ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( sb . install ( ) )", "total": "requiresCalledAfterInstall ( ) { org . jboss . msc . service . ServiceBuilder sb = serviceContainer . addService ( org . jboss . msc . multi_value_services . WrongUsageOfNewServicesAPITestCase . ID ) ; sb . provides ( org . jboss . msc . multi_value_services . WrongUsageOfNewServicesAPITestCase . FOO ) ; \"<AssertPlaceHolder>\" ; try { sb . requires ( org . jboss . msc . multi_value_services . WrongUsageOfNewServicesAPITestCase . BAR ) ; org . junit . Assert . fail ( \"IllegalStateException<sp>expected\" ) ; } catch ( java . lang . IllegalStateException ignored ) { } } install ( ) { return getDelegate ( ) . install ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( sb . install ( ) )"}
{"focal": "newInstance ( ) { return type . newInstance ( openl . getVm ( ) . getRuntimeEnv ( ) ) ; }", "testMethod": "classloader_Test ( ) { java . net . URL [ ] urls = new java . net . URL [ ] { new java . net . URL ( \"file:test-resources/classpath/single1/beans.jar\" ) } ; java . net . URLClassLoader classLoader = new java . net . URLClassLoader ( urls , this . getClass ( ) . getClassLoader ( ) ) ; org . openl . rules . project . instantiation . SimpleProjectEngineFactory < java . lang . Object > factory = new org . openl . rules . project . instantiation . SimpleProjectEngineFactory . SimpleProjectEngineFactoryBuilder ( ) . setClassLoader ( classLoader ) . setProject ( \"test-resources/classpath/single2\" ) . build ( ) ; java . lang . Object instance = factory . newInstance ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance )", "total": "classloader_Test ( ) { java . net . URL [ ] urls = new java . net . URL [ ] { new java . net . URL ( \"file:test-resources/classpath/single1/beans.jar\" ) } ; java . net . URLClassLoader classLoader = new java . net . URLClassLoader ( urls , this . getClass ( ) . getClassLoader ( ) ) ; org . openl . rules . project . instantiation . SimpleProjectEngineFactory < java . lang . Object > factory = new org . openl . rules . project . instantiation . SimpleProjectEngineFactory . SimpleProjectEngineFactoryBuilder ( ) . setClassLoader ( classLoader ) . setProject ( \"test-resources/classpath/single2\" ) . build ( ) ; java . lang . Object instance = factory . newInstance ( ) ; \"<AssertPlaceHolder>\" ; } newInstance ( ) { return type . newInstance ( openl . getVm ( ) . getRuntimeEnv ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( instance )"}
{"focal": "getRoute ( org . apache . camel . NamedNode ) { if ( node == null ) { return null ; } org . apache . camel . model . ProcessorDefinition < ? > def = ( ( org . apache . camel . model . ProcessorDefinition ) ( node ) ) ; while ( ( def != null ) && ( ( def . getParent ( ) ) != null ) ) { def = def . getParent ( ) ; } if ( def instanceof org . apache . camel . model . RouteDefinition ) { return ( ( org . apache . camel . model . RouteDefinition ) ( def ) ) ; } else { return null ; } }", "testMethod": "shouldDetectRoutes ( ) { org . apache . camel . Route route = camelContext . getRoute ( org . apache . camel . spring . boot . CamelAutoConfigurationTest . TestConfig . ROUTE_ID ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( route )", "total": "shouldDetectRoutes ( ) { org . apache . camel . Route route = camelContext . getRoute ( org . apache . camel . spring . boot . CamelAutoConfigurationTest . TestConfig . ROUTE_ID ) ; \"<AssertPlaceHolder>\" ; } getRoute ( org . apache . camel . NamedNode ) { if ( node == null ) { return null ; } org . apache . camel . model . ProcessorDefinition < ? > def = ( ( org . apache . camel . model . ProcessorDefinition ) ( node ) ) ; while ( ( def != null ) && ( ( def . getParent ( ) ) != null ) ) { def = def . getParent ( ) ; } if ( def instanceof org . apache . camel . model . RouteDefinition ) { return ( ( org . apache . camel . model . RouteDefinition ) ( def ) ) ; } else { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( route )"}
{"focal": "parseProduction ( ) { reset_placeholder_variable_generator ( ) ; final java . lang . String name = parseProductionName ( ) ; currentProduction = name ; final java . lang . String documentation = parseDocumenation ( ) ; org . jsoar . kernel . Production . Support declared_support = org . jsoar . kernel . Production . Support . UNDECLARED ; org . jsoar . kernel . ProductionType prod_type = org . jsoar . kernel . ProductionType . USER ; boolean interrupt_on_match = false ; while ( ( currentType ( ) ) == ( LexemeType . SYM_CONSTANT ) ) { if ( \":o-support\" . equals ( current ( ) . string ) ) { declared_support = org . jsoar . kernel . Production . Support . DECLARED_O_SUPPORT ; } else if ( \":i-support\" . equals ( current ( ) . string ) ) { declared_support = org . jsoar . kernel . Production . Support . DECLARED_I_SUPPORT ; } else if ( \":o-support\" 0.e quals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . CHUNK ; } else if ( \":default\" . equals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . DEFAULT ; } else if ( \":template\" . equals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . TEMPLATE ; } else if ( \":interrupt\" . equals ( current ( ) . string ) ) { printer . warn ( \"WARNING<sp>:interrupt<sp>is<sp>not<sp>supported<sp>with<sp>the<sp>current<sp>build<sp>options...\" ) ; interrupt_on_match = true ; } else { break ; } lexer . getNextLexeme ( ) ; } final org . jsoar . kernel . lhs . Condition lhs = parse_lhs ( ) ; expect ( LexemeType . RIGHT_ARROW , \"in<sp>production\" ) ; final org . jsoar . kernel . rhs . Action rhs = org . jsoar . kernel . parser . original . OriginalParserImpl . destructively_reverse_action_list ( parse_rhs ( ) ) ; varGen . reset ( lhs , rhs ) ; substitute_for_placeholders_in_condition_list ( lhs ) ; substitute_for_placeholders_in_action_list ( rhs ) ; final org . jsoar . kernel . lhs . Condition lhs_top = lhs ; org . jsoar . kernel . lhs . Condition lhs_bottom = lhs ; for ( ; ( lhs_bottom . next ) != null ; lhs_bottom = lhs_bottom . next ) { } final org . jsoar . kernel . Production p = org . jsoar . kernel . Production . newBuilder ( ) . type ( prod_type ) . location ( location ) . name ( name ) . documentation ( documentation ) . conditions ( lhs_top , lhs_bottom ) . actions ( rhs ) . support ( declared_support ) . interrupt ( interrupt_on_match ) . build ( ) ; return p ; }", "testMethod": "testParseProduction ( ) { org . jsoar . kernel . parser . original . OriginalParserImpl parser = createParser ( \"testParseProduction<sp>(state<sp><s><sp>^superstate<sp>nil)<sp>--><sp>(<s><sp>^value<sp>99)<sp>\" ) ; org . jsoar . kernel . Production p = parser . parseProduction ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( p )", "total": "testParseProduction ( ) { org . jsoar . kernel . parser . original . OriginalParserImpl parser = createParser ( \"testParseProduction<sp>(state<sp><s><sp>^superstate<sp>nil)<sp>--><sp>(<s><sp>^value<sp>99)<sp>\" ) ; org . jsoar . kernel . Production p = parser . parseProduction ( ) ; \"<AssertPlaceHolder>\" ; } parseProduction ( ) { reset_placeholder_variable_generator ( ) ; final java . lang . String name = parseProductionName ( ) ; currentProduction = name ; final java . lang . String documentation = parseDocumenation ( ) ; org . jsoar . kernel . Production . Support declared_support = org . jsoar . kernel . Production . Support . UNDECLARED ; org . jsoar . kernel . ProductionType prod_type = org . jsoar . kernel . ProductionType . USER ; boolean interrupt_on_match = false ; while ( ( currentType ( ) ) == ( LexemeType . SYM_CONSTANT ) ) { if ( \":o-support\" . equals ( current ( ) . string ) ) { declared_support = org . jsoar . kernel . Production . Support . DECLARED_O_SUPPORT ; } else if ( \":i-support\" . equals ( current ( ) . string ) ) { declared_support = org . jsoar . kernel . Production . Support . DECLARED_I_SUPPORT ; } else if ( \":o-support\" 0.e quals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . CHUNK ; } else if ( \":default\" . equals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . DEFAULT ; } else if ( \":template\" . equals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . TEMPLATE ; } else if ( \":interrupt\" . equals ( current ( ) . string ) ) { printer . warn ( \"WARNING<sp>:interrupt<sp>is<sp>not<sp>supported<sp>with<sp>the<sp>current<sp>build<sp>options...\" ) ; interrupt_on_match = true ; } else { break ; } lexer . getNextLexeme ( ) ; } final org . jsoar . kernel . lhs . Condition lhs = parse_lhs ( ) ; expect ( LexemeType . RIGHT_ARROW , \"in<sp>production\" ) ; final org . jsoar . kernel . rhs . Action rhs = org . jsoar . kernel . parser . original . OriginalParserImpl . destructively_reverse_action_list ( parse_rhs ( ) ) ; varGen . reset ( lhs , rhs ) ; substitute_for_placeholders_in_condition_list ( lhs ) ; substitute_for_placeholders_in_action_list ( rhs ) ; final org . jsoar . kernel . lhs . Condition lhs_top = lhs ; org . jsoar . kernel . lhs . Condition lhs_bottom = lhs ; for ( ; ( lhs_bottom . next ) != null ; lhs_bottom = lhs_bottom . next ) { } final org . jsoar . kernel . Production p = org . jsoar . kernel . Production . newBuilder ( ) . type ( prod_type ) . location ( location ) . name ( name ) . documentation ( documentation ) . conditions ( lhs_top , lhs_bottom ) . actions ( rhs ) . support ( declared_support ) . interrupt ( interrupt_on_match ) . build ( ) ; return p ; }", "answer": "org . junit . Assert . assertNotNull ( p )"}
{"focal": "createQualifiedDayOfWeek ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . QualifiedDayOfWeek ) { return new javax . xml . bind . JAXBElement < org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . QualifiedDayOfWeek > ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ObjectFactory . _QualifiedDayOfWeek_QNAME , org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . QualifiedDayOfWeek . class , null , value ) ; }", "testMethod": "testCreateQualifiedDayOfWeek1 ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( factory . createQualifiedDayOfWeek ( mock ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . QualifiedDayOfWeek . class ) ) )", "total": "testCreateQualifiedDayOfWeek1 ( ) { \"<AssertPlaceHolder>\" ; } createQualifiedDayOfWeek ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . QualifiedDayOfWeek ) { return new javax . xml . bind . JAXBElement < org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . QualifiedDayOfWeek > ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . ObjectFactory . _QualifiedDayOfWeek_QNAME , org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . QualifiedDayOfWeek . class , null , value ) ; }", "answer": "org . junit . Assert . assertNotNull ( factory . createQualifiedDayOfWeek ( mock ( org . pentaho . platform . plugin . services . importexport . exportManifest . bindings . QualifiedDayOfWeek . class ) ) )"}
{"focal": "forListOf ( java . lang . Class ) { return queryTemplate . queryForListOf ( this , k ) ; }", "testMethod": "testSingleValue ( ) { java . util . List < java . lang . String > ids = dao . getSelectBuilderFactory ( ) . sql ( \"select<sp>string_prop<sp>from<sp>test_bean\" ) . query ( ) . forListOf ( java . lang . String . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ids )", "total": "testSingleValue ( ) { java . util . List < java . lang . String > ids = dao . getSelectBuilderFactory ( ) . sql ( \"select<sp>string_prop<sp>from<sp>test_bean\" ) . query ( ) . forListOf ( java . lang . String . class ) ; \"<AssertPlaceHolder>\" ; } forListOf ( java . lang . Class ) { return queryTemplate . queryForListOf ( this , k ) ; }", "answer": "org . junit . Assert . assertNotNull ( ids )"}
{"focal": "createCategory ( java . lang . String , org . jahia . services . categories . Category ) { org . jahia . services . categories . Category category = org . jahia . services . categories . Category . categoryService . addCategory ( key , parentCategory ) ; return category ; }", "testMethod": "testCreateRootCategory ( ) { org . jahia . services . categories . Category newRootCategory = org . jahia . services . categories . Category . createCategory ( \"firstRoot\" , null ) ; \"<AssertPlaceHolder>\" ; deleteCategoryWithChildren ( newRootCategory ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( newRootCategory )", "total": "testCreateRootCategory ( ) { org . jahia . services . categories . Category newRootCategory = org . jahia . services . categories . Category . createCategory ( \"firstRoot\" , null ) ; \"<AssertPlaceHolder>\" ; deleteCategoryWithChildren ( newRootCategory ) ; } createCategory ( java . lang . String , org . jahia . services . categories . Category ) { org . jahia . services . categories . Category category = org . jahia . services . categories . Category . categoryService . addCategory ( key , parentCategory ) ; return category ; }", "answer": "org . junit . Assert . assertNotNull ( newRootCategory )"}
{"focal": "asDivergence ( ) { return gov . sandia . cognition . learning . function . distance . CosineDistanceMetric . INSTANCE ; }", "testMethod": "testAsDivergence ( ) { gov . sandia . cognition . text . term . vector . CosineSimilarityFunction instance = new gov . sandia . cognition . text . term . vector . CosineSimilarityFunction ( ) ; gov . sandia . cognition . learning . function . distance . CosineDistanceMetric result = instance . asDivergence ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testAsDivergence ( ) { gov . sandia . cognition . text . term . vector . CosineSimilarityFunction instance = new gov . sandia . cognition . text . term . vector . CosineSimilarityFunction ( ) ; gov . sandia . cognition . learning . function . distance . CosineDistanceMetric result = instance . asDivergence ( ) ; \"<AssertPlaceHolder>\" ; } asDivergence ( ) { return gov . sandia . cognition . learning . function . distance . CosineDistanceMetric . INSTANCE ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "checkAndFilter ( java . lang . String , org . orcid . jaxb . model . v3 . release . record . Record ) { if ( record == null ) { return ; } isMyToken ( orcid ) ; if ( ( record . getActivitiesSummary ( ) ) != null ) { checkAndFilter ( orcid , record . getActivitiesSummary ( ) ) ; } if ( ( record . getPerson ( ) ) != null ) { checkAndFilter ( orcid , record . getPerson ( ) ) ; } }", "testMethod": "testRecord_When_ReadLimitedToken_EmptyElement ( ) { org . orcid . core . utils . SecurityContextTestUtils . setUpSecurityContext ( org . orcid . core . manager . v3 . ORCID_1 , org . orcid . core . manager . v3 . CLIENT_1 , ScopePathType . READ_LIMITED ) ; org . orcid . jaxb . model . v3 . rc2 . record . Record record = new org . orcid . jaxb . model . v3 . rc2 . record . Record ( ) ; orcidSecurityManager . checkAndFilter ( org . orcid . core . manager . v3 . ORCID_1 , record ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( record )", "total": "testRecord_When_ReadLimitedToken_EmptyElement ( ) { org . orcid . core . utils . SecurityContextTestUtils . setUpSecurityContext ( org . orcid . core . manager . v3 . ORCID_1 , org . orcid . core . manager . v3 . CLIENT_1 , ScopePathType . READ_LIMITED ) ; org . orcid . jaxb . model . v3 . rc2 . record . Record record = new org . orcid . jaxb . model . v3 . rc2 . record . Record ( ) ; orcidSecurityManager . checkAndFilter ( org . orcid . core . manager . v3 . ORCID_1 , record ) ; \"<AssertPlaceHolder>\" ; } checkAndFilter ( java . lang . String , org . orcid . jaxb . model . v3 . release . record . Record ) { if ( record == null ) { return ; } isMyToken ( orcid ) ; if ( ( record . getActivitiesSummary ( ) ) != null ) { checkAndFilter ( orcid , record . getActivitiesSummary ( ) ) ; } if ( ( record . getPerson ( ) ) != null ) { checkAndFilter ( orcid , record . getPerson ( ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( record )"}
{"focal": "parse ( java . io . InputStream ) { return com . github . antlrjavaparser . JavaParser . parse ( in , null ) ; }", "testMethod": "testLambda ( ) { java . io . InputStream in = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( \"testFiles/Java8.java.txt\" ) ; if ( in == null ) { System . err . println ( \"Unable<sp>to<sp>find<sp>test<sp>file.\" ) ; return ; } com . github . antlrjavaparser . api . CompilationUnit compilationUnit = com . github . antlrjavaparser . JavaParser . parse ( in ) ; \"<AssertPlaceHolder>\" ; System . out . println ( \"Something\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( compilationUnit )", "total": "testLambda ( ) { java . io . InputStream in = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( \"testFiles/Java8.java.txt\" ) ; if ( in == null ) { System . err . println ( \"Unable<sp>to<sp>find<sp>test<sp>file.\" ) ; return ; } com . github . antlrjavaparser . api . CompilationUnit compilationUnit = com . github . antlrjavaparser . JavaParser . parse ( in ) ; \"<AssertPlaceHolder>\" ; System . out . println ( \"Something\" ) ; } parse ( java . io . InputStream ) { return com . github . antlrjavaparser . JavaParser . parse ( in , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( compilationUnit )"}
{"focal": "getDatabaseName ( ) { return databaseName ; }", "testMethod": "testPopulateDbMetaOutofTransaction ( ) { com . ctrip . platform . dal . dao . client . ConnectionActionTest . TestConnectionAction test = new com . ctrip . platform . dal . dao . client . ConnectionActionTest . TestConnectionAction ( ) ; test . initLogEntry ( \"dao_test\" , new com . ctrip . platform . dal . dao . DalHints ( ) ) ; try { test . connHolder = getDalConnection ( ) ; test . populateDbMeta ( ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( test . entry . getDatabaseName ( ) )", "total": "testPopulateDbMetaOutofTransaction ( ) { com . ctrip . platform . dal . dao . client . ConnectionActionTest . TestConnectionAction test = new com . ctrip . platform . dal . dao . client . ConnectionActionTest . TestConnectionAction ( ) ; test . initLogEntry ( \"dao_test\" , new com . ctrip . platform . dal . dao . DalHints ( ) ) ; try { test . connHolder = getDalConnection ( ) ; test . populateDbMeta ( ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( ) ; } } getDatabaseName ( ) { return databaseName ; }", "answer": "org . junit . Assert . assertNotNull ( test . entry . getDatabaseName ( ) )"}
{"focal": "registerApplicationMaster ( org . apache . hadoop . yarn . api . protocolrecords . RegisterApplicationMasterRequest ) { org . apache . hadoop . yarn . api . protocolrecords . RegisterApplicationMasterResponse resp = factory . newRecordInstance ( org . apache . hadoop . yarn . api . protocolrecords . RegisterApplicationMasterResponse . class ) ; resp . setQueue ( \"dummyQueue\" ) ; return resp ; }", "testMethod": "testAllocateAndReleaseContainersForMultipleAM ( ) { int numberOfApps = 5 ; for ( int testAppId = 0 ; testAppId < numberOfApps ; testAppId ++ ) { org . apache . hadoop . yarn . api . protocolrecords . RegisterApplicationMasterResponse registerResponse = registerApplicationMaster ( testAppId ) ; \"<AssertPlaceHolder>\" ; java . util . List < org . apache . hadoop . yarn . api . records . Container > containers = getContainersAndAssert ( testAppId , 10 ) ; releaseContainersAndAssert ( testAppId , containers ) ; } for ( int testAppId = 0 ; testAppId < numberOfApps ; testAppId ++ ) { finishApplicationMaster ( testAppId , FinalApplicationStatus . SUCCEEDED ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( registerResponse )", "total": "testAllocateAndReleaseContainersForMultipleAM ( ) { int numberOfApps = 5 ; for ( int testAppId = 0 ; testAppId < numberOfApps ; testAppId ++ ) { org . apache . hadoop . yarn . api . protocolrecords . RegisterApplicationMasterResponse registerResponse = registerApplicationMaster ( testAppId ) ; \"<AssertPlaceHolder>\" ; java . util . List < org . apache . hadoop . yarn . api . records . Container > containers = getContainersAndAssert ( testAppId , 10 ) ; releaseContainersAndAssert ( testAppId , containers ) ; } for ( int testAppId = 0 ; testAppId < numberOfApps ; testAppId ++ ) { finishApplicationMaster ( testAppId , FinalApplicationStatus . SUCCEEDED ) ; } } registerApplicationMaster ( org . apache . hadoop . yarn . api . protocolrecords . RegisterApplicationMasterRequest ) { org . apache . hadoop . yarn . api . protocolrecords . RegisterApplicationMasterResponse resp = factory . newRecordInstance ( org . apache . hadoop . yarn . api . protocolrecords . RegisterApplicationMasterResponse . class ) ; resp . setQueue ( \"dummyQueue\" ) ; return resp ; }", "answer": "org . junit . Assert . assertNotNull ( registerResponse )"}
{"focal": "groupBy ( ) { return \"<sp>GROUP<sp>BY<sp>\" ; }", "testMethod": "testGroupBy ( ) { try { org . talend . dq . dbms . DbmsLanguage dbms = getMysqlDbmsLanguage ( ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( dbms . groupBy ( ) )", "total": "testGroupBy ( ) { try { org . talend . dq . dbms . DbmsLanguage dbms = getMysqlDbmsLanguage ( ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } } groupBy ( ) { return \"<sp>GROUP<sp>BY<sp>\" ; }", "answer": "org . junit . Assert . assertNotNull ( dbms . groupBy ( ) )"}
{"focal": "getKeyStore ( java . lang . String , char [ ] ) { final java . security . KeyStore keyStore = java . security . KeyStore . getInstance ( \"JKS\" ) ; if ( java . nio . file . Paths . get ( jksFilePath ) . isAbsolute ( ) ) { try ( java . io . InputStream jksFileInputStream = new java . io . FileInputStream ( jksFilePath ) ) { keyStore . load ( jksFileInputStream , password ) ; return keyStore ; } } try ( java . io . InputStream jksFileInputStream = com . oath . auth . Utils . class . getClassLoader ( ) . getResourceAsStream ( jksFilePath ) ) { keyStore . load ( jksFileInputStream , password ) ; return keyStore ; } }", "testMethod": "testGetKeyStore ( ) { java . security . KeyStore keyStore = com . oath . auth . Utils . getKeyStore ( \"truststore.jks\" , \"123456\" . toCharArray ( ) ) ; \"<AssertPlaceHolder>\" ; try { com . oath . auth . Utils . getKeyStore ( \"truststore.jks\" ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . Exception ignored ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( keyStore )", "total": "testGetKeyStore ( ) { java . security . KeyStore keyStore = com . oath . auth . Utils . getKeyStore ( \"truststore.jks\" , \"123456\" . toCharArray ( ) ) ; \"<AssertPlaceHolder>\" ; try { com . oath . auth . Utils . getKeyStore ( \"truststore.jks\" ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . Exception ignored ) { } } getKeyStore ( java . lang . String , char [ ] ) { final java . security . KeyStore keyStore = java . security . KeyStore . getInstance ( \"JKS\" ) ; if ( java . nio . file . Paths . get ( jksFilePath ) . isAbsolute ( ) ) { try ( java . io . InputStream jksFileInputStream = new java . io . FileInputStream ( jksFilePath ) ) { keyStore . load ( jksFileInputStream , password ) ; return keyStore ; } } try ( java . io . InputStream jksFileInputStream = com . oath . auth . Utils . class . getClassLoader ( ) . getResourceAsStream ( jksFilePath ) ) { keyStore . load ( jksFileInputStream , password ) ; return keyStore ; } }", "answer": "org . junit . Assert . assertNotNull ( keyStore )"}
{"focal": "train ( opennlp . tools . tokenize . TokenizerFactory ) { return opennlp . tools . tokenize . TokenizerME . train ( opennlp . tools . tokenize . TokenizerFactoryTest . createSampleStream ( ) , factory , opennlp . tools . util . TrainingParameters . defaultParams ( ) ) ; }", "testMethod": "testGISTrainSignature1 ( ) { try ( opennlp . tools . util . ObjectStream < opennlp . tools . ml . model . Event > eventStream = createEventStream ( ) ) { opennlp . tools . util . TrainingParameters params = opennlp . tools . util . model . ModelUtil . createDefaultTrainingParameters ( ) ; params . put ( AbstractTrainer . CUTOFF_PARAM , 1 ) ; opennlp . tools . ml . EventTrainer trainer = opennlp . tools . ml . TrainerFactory . getEventTrainer ( params , null ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( trainer . train ( eventStream ) )", "total": "testGISTrainSignature1 ( ) { try ( opennlp . tools . util . ObjectStream < opennlp . tools . ml . model . Event > eventStream = createEventStream ( ) ) { opennlp . tools . util . TrainingParameters params = opennlp . tools . util . model . ModelUtil . createDefaultTrainingParameters ( ) ; params . put ( AbstractTrainer . CUTOFF_PARAM , 1 ) ; opennlp . tools . ml . EventTrainer trainer = opennlp . tools . ml . TrainerFactory . getEventTrainer ( params , null ) ; \"<AssertPlaceHolder>\" ; } } train ( opennlp . tools . tokenize . TokenizerFactory ) { return opennlp . tools . tokenize . TokenizerME . train ( opennlp . tools . tokenize . TokenizerFactoryTest . createSampleStream ( ) , factory , opennlp . tools . util . TrainingParameters . defaultParams ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( trainer . train ( eventStream ) )"}
{"focal": "getUriFromTrackingPlugins ( org . apache . hadoop . yarn . api . records . ApplicationId , java . util . List ) { java . net . URI toRet = null ; for ( org . apache . hadoop . yarn . util . TrackingUriPlugin plugin : trackingUriPlugins ) { toRet = plugin . getTrackingUri ( id ) ; if ( toRet != null ) { return toRet ; } } return null ; }", "testMethod": "testGetProxyUriFromPluginsReturnsValidUriWhenAble ( ) { org . apache . hadoop . yarn . api . records . ApplicationId id = org . apache . hadoop . yarn . server . utils . BuilderUtils . newApplicationId ( 6384623L , 5 ) ; java . util . List < org . apache . hadoop . yarn . util . TrackingUriPlugin > list = com . google . common . collect . Lists . newArrayListWithExpectedSize ( 2 ) ; list . add ( new org . apache . hadoop . yarn . util . TrackingUriPlugin ( ) { public java . net . URI getTrackingUri ( org . apache . hadoop . yarn . api . records . ApplicationId id ) throws java . net . URISyntaxException { return null ; } } ) ; list . add ( new org . apache . hadoop . yarn . util . TrackingUriPlugin ( ) { public java . net . URI getTrackingUri ( org . apache . hadoop . yarn . api . records . ApplicationId id ) throws java . net . URISyntaxException { return new java . net . URI ( \"http://history.server.net/\" ) ; } } ) ; java . net . URI result = org . apache . hadoop . yarn . server . webproxy . ProxyUriUtils . getUriFromTrackingPlugins ( id , list ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetProxyUriFromPluginsReturnsValidUriWhenAble ( ) { org . apache . hadoop . yarn . api . records . ApplicationId id = org . apache . hadoop . yarn . server . utils . BuilderUtils . newApplicationId ( 6384623L , 5 ) ; java . util . List < org . apache . hadoop . yarn . util . TrackingUriPlugin > list = com . google . common . collect . Lists . newArrayListWithExpectedSize ( 2 ) ; list . add ( new org . apache . hadoop . yarn . util . TrackingUriPlugin ( ) { public java . net . URI getTrackingUri ( org . apache . hadoop . yarn . api . records . ApplicationId id ) throws java . net . URISyntaxException { return null ; } } ) ; list . add ( new org . apache . hadoop . yarn . util . TrackingUriPlugin ( ) { public java . net . URI getTrackingUri ( org . apache . hadoop . yarn . api . records . ApplicationId id ) throws java . net . URISyntaxException { return new java . net . URI ( \"http://history.server.net/\" ) ; } } ) ; java . net . URI result = org . apache . hadoop . yarn . server . webproxy . ProxyUriUtils . getUriFromTrackingPlugins ( id , list ) ; \"<AssertPlaceHolder>\" ; } getUriFromTrackingPlugins ( org . apache . hadoop . yarn . api . records . ApplicationId , java . util . List ) { java . net . URI toRet = null ; for ( org . apache . hadoop . yarn . util . TrackingUriPlugin plugin : trackingUriPlugins ) { toRet = plugin . getTrackingUri ( id ) ; if ( toRet != null ) { return toRet ; } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "authenticationUrl ( java . lang . String , java . lang . String ) { return authenticationUrl ( redirect , scope , null ) ; }", "testMethod": "testAuthenticationUrl ( ) { java . lang . String url = com . riversoft . weixin . mp . oauth2 . MpOAuth2s . defaultOAuth2s ( ) . authenticationUrl ( \"http://wxtest.gzriver.com/oS-I8EwVL9X.view\" , \"snsapi_userinfo\" ) ; System . out . println ( url ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( url )", "total": "testAuthenticationUrl ( ) { java . lang . String url = com . riversoft . weixin . mp . oauth2 . MpOAuth2s . defaultOAuth2s ( ) . authenticationUrl ( \"http://wxtest.gzriver.com/oS-I8EwVL9X.view\" , \"snsapi_userinfo\" ) ; System . out . println ( url ) ; \"<AssertPlaceHolder>\" ; } authenticationUrl ( java . lang . String , java . lang . String ) { return authenticationUrl ( redirect , scope , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( url )"}
{"focal": "getMapper ( java . lang . Class ) { return getConfiguration ( ) . getMapper ( type , this ) ; }", "testMethod": "testOrderPrefixNotRemoved ( ) { org . apache . ibatis . session . SqlSession sqlSession = org . apache . ibatis . submitted . order_prefix_removed . OrderPrefixRemoved . sqlSessionFactory . openSession ( ExecutorType . SIMPLE ) ; try { org . apache . ibatis . submitted . order_prefix_removed . PersonMapper personMapper = sqlSession . getMapper ( org . apache . ibatis . submitted . order_prefix_removed . PersonMapper . class ) ; org . apache . ibatis . submitted . order_prefix_removed . Person person = personMapper . select ( new java . lang . String ( \"slow\" ) ) ; \"<AssertPlaceHolder>\" ; sqlSession . commit ( ) ; } finally { sqlSession . close ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( person )", "total": "testOrderPrefixNotRemoved ( ) { org . apache . ibatis . session . SqlSession sqlSession = org . apache . ibatis . submitted . order_prefix_removed . OrderPrefixRemoved . sqlSessionFactory . openSession ( ExecutorType . SIMPLE ) ; try { org . apache . ibatis . submitted . order_prefix_removed . PersonMapper personMapper = sqlSession . getMapper ( org . apache . ibatis . submitted . order_prefix_removed . PersonMapper . class ) ; org . apache . ibatis . submitted . order_prefix_removed . Person person = personMapper . select ( new java . lang . String ( \"slow\" ) ) ; \"<AssertPlaceHolder>\" ; sqlSession . commit ( ) ; } finally { sqlSession . close ( ) ; } } getMapper ( java . lang . Class ) { return getConfiguration ( ) . getMapper ( type , this ) ; }", "answer": "org . junit . Assert . assertNotNull ( person )"}
{"focal": "getId ( ) { return id ; }", "testMethod": "testGetByIdWithChildren ( ) { category = service . getMinimalCategory ( service . getDefaultParent ( ) . getId ( ) , \"Test<sp>Category<sp>2\" ) ; service . save ( category ) ; net . magja . model . category . Category category = service . getByIdWithChildren ( new java . lang . Integer ( service . getDefaultParent ( ) . getId ( ) ) ) ; for ( net . magja . model . category . Category child : category . getChildren ( ) ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( child . getId ( ) )", "total": "testGetByIdWithChildren ( ) { category = service . getMinimalCategory ( service . getDefaultParent ( ) . getId ( ) , \"Test<sp>Category<sp>2\" ) ; service . save ( category ) ; net . magja . model . category . Category category = service . getByIdWithChildren ( new java . lang . Integer ( service . getDefaultParent ( ) . getId ( ) ) ) ; for ( net . magja . model . category . Category child : category . getChildren ( ) ) { \"<AssertPlaceHolder>\" ; } } getId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( child . getId ( ) )"}
{"focal": "getEdmNavigationProperty ( ) { return null ; }", "testMethod": "testBuildManyToOne ( ) { org . apache . olingo . odata2 . jpa . processor . core . model . JPAEdmPropertyTest . ATTRIBUTE_TYPE = javax . persistence . metamodel . Attribute . PersistentAttributeType . MANY_TO_ONE ; org . apache . olingo . odata2 . jpa . processor . core . model . JPAEdmPropertyTest . testCase = \"Default\" ; objJPAEdmPropertyTest = new org . apache . olingo . odata2 . jpa . processor . core . model . JPAEdmPropertyTest ( ) ; objJPAEdmProperty = new org . apache . olingo . odata2 . jpa . processor . core . model . JPAEdmProperty ( objJPAEdmPropertyTest ) ; try { objJPAEdmProperty . getBuilder ( ) . build ( ) ; } catch ( org . apache . olingo . odata2 . jpa . processor . api . exception . ODataJPAModelException e ) { org . junit . Assert . fail ( ( ( ( org . apache . olingo . odata2 . jpa . processor . core . common . ODataJPATestConstants . EXCEPTION_MSG_PART_1 ) + ( e . getMessage ( ) ) ) + ( org . apache . olingo . odata2 . jpa . processor . core . common . ODataJPATestConstants . EXCEPTION_MSG_PART_2 ) ) ) ; } catch ( org . apache . olingo . odata2 . jpa . processor . api . exception . ODataJPARuntimeException e ) { org . junit . Assert . fail ( ( ( ( org . apache . olingo . odata2 . jpa . processor . core . common . ODataJPATestConstants . EXCEPTION_MSG_PART_1 ) + ( e . getMessage ( ) ) ) + ( org . apache . olingo . odata2 . jpa . processor . core . common . ODataJPATestConstants . EXCEPTION_MSG_PART_2 ) ) ) ; } org . apache . olingo . odata2 . jpa . processor . core . model . NavigationProperty navigationProperty = objJPAEdmProperty . getJPAEdmNavigationPropertyView ( ) . getEdmNavigationProperty ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( navigationProperty )", "total": "testBuildManyToOne ( ) { org . apache . olingo . odata2 . jpa . processor . core . model . JPAEdmPropertyTest . ATTRIBUTE_TYPE = javax . persistence . metamodel . Attribute . PersistentAttributeType . MANY_TO_ONE ; org . apache . olingo . odata2 . jpa . processor . core . model . JPAEdmPropertyTest . testCase = \"Default\" ; objJPAEdmPropertyTest = new org . apache . olingo . odata2 . jpa . processor . core . model . JPAEdmPropertyTest ( ) ; objJPAEdmProperty = new org . apache . olingo . odata2 . jpa . processor . core . model . JPAEdmProperty ( objJPAEdmPropertyTest ) ; try { objJPAEdmProperty . getBuilder ( ) . build ( ) ; } catch ( org . apache . olingo . odata2 . jpa . processor . api . exception . ODataJPAModelException e ) { org . junit . Assert . fail ( ( ( ( org . apache . olingo . odata2 . jpa . processor . core . common . ODataJPATestConstants . EXCEPTION_MSG_PART_1 ) + ( e . getMessage ( ) ) ) + ( org . apache . olingo . odata2 . jpa . processor . core . common . ODataJPATestConstants . EXCEPTION_MSG_PART_2 ) ) ) ; } catch ( org . apache . olingo . odata2 . jpa . processor . api . exception . ODataJPARuntimeException e ) { org . junit . Assert . fail ( ( ( ( org . apache . olingo . odata2 . jpa . processor . core . common . ODataJPATestConstants . EXCEPTION_MSG_PART_1 ) + ( e . getMessage ( ) ) ) + ( org . apache . olingo . odata2 . jpa . processor . core . common . ODataJPATestConstants . EXCEPTION_MSG_PART_2 ) ) ) ; } org . apache . olingo . odata2 . jpa . processor . core . model . NavigationProperty navigationProperty = objJPAEdmProperty . getJPAEdmNavigationPropertyView ( ) . getEdmNavigationProperty ( ) ; \"<AssertPlaceHolder>\" ; } getEdmNavigationProperty ( ) { return null ; }", "answer": "org . junit . Assert . assertNotNull ( navigationProperty )"}
{"focal": "value ( ) { return this . value ; }", "testMethod": "canGetEventsByType ( ) { com . microsoft . azure . applicationinsights . query . models . EventsResults eventsResult = com . microsoft . azure . applicationinsights . query . ApplicationInsightsDataClientTests . applicationInsightsClient . events ( ) . getByType ( com . microsoft . azure . applicationinsights . query . ApplicationInsightsDataClientTests . appId , EventType . AVAILABILITY_RESULTS ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( eventsResult . value ( ) . get ( 0 ) . id ( ) )", "total": "canGetEventsByType ( ) { com . microsoft . azure . applicationinsights . query . models . EventsResults eventsResult = com . microsoft . azure . applicationinsights . query . ApplicationInsightsDataClientTests . applicationInsightsClient . events ( ) . getByType ( com . microsoft . azure . applicationinsights . query . ApplicationInsightsDataClientTests . appId , EventType . AVAILABILITY_RESULTS ) ; \"<AssertPlaceHolder>\" ; } value ( ) { return this . value ; }", "answer": "org . junit . Assert . assertNotNull ( eventsResult . value ( ) . get ( 0 ) . id ( ) )"}
{"focal": "getIdFromPath ( java . lang . String ) { int depth = org . apache . jackrabbit . oak . plugins . document . util . Utils . pathDepth ( path ) ; if ( org . apache . jackrabbit . oak . plugins . document . util . Utils . isLongPath ( path ) ) { java . lang . String parent = org . apache . jackrabbit . oak . commons . PathUtils . getParentPath ( path ) ; byte [ ] hash = org . apache . jackrabbit . oak . plugins . document . util . Utils . createSHA256Digest ( parent ) ; return org . apache . jackrabbit . oak . plugins . document . util . Utils . createHashedId ( depth , hash , org . apache . jackrabbit . oak . commons . PathUtils . getName ( path ) ) ; } return ( depth + \":\" ) + path ; }", "testMethod": "setUpdateLimit ( ) { final int updateLimit = 17 ; org . apache . jackrabbit . oak . plugins . document . DocumentNodeStore ns = builderProvider . newBuilder ( ) . setUpdateLimit ( updateLimit ) . setAsyncDelay ( 0 ) . getNodeStore ( ) ; org . apache . jackrabbit . oak . plugins . document . DocumentStore store = ns . getDocumentStore ( ) ; org . apache . jackrabbit . oak . spi . state . NodeBuilder builder = ns . getRoot ( ) . builder ( ) ; for ( int i = 0 ; i <= ( updateLimit * 2 ) ; i ++ ) { builder . child ( \"foo\" ) . setProperty ( ( \"p-\" + i ) , \"value\" ) ; } org . apache . jackrabbit . oak . plugins . document . NodeDocument doc = store . find ( org . apache . jackrabbit . oak . plugins . document . Collection . NODES , org . apache . jackrabbit . oak . plugins . document . util . Utils . getIdFromPath ( \"/foo\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( doc )", "total": "setUpdateLimit ( ) { final int updateLimit = 17 ; org . apache . jackrabbit . oak . plugins . document . DocumentNodeStore ns = builderProvider . newBuilder ( ) . setUpdateLimit ( updateLimit ) . setAsyncDelay ( 0 ) . getNodeStore ( ) ; org . apache . jackrabbit . oak . plugins . document . DocumentStore store = ns . getDocumentStore ( ) ; org . apache . jackrabbit . oak . spi . state . NodeBuilder builder = ns . getRoot ( ) . builder ( ) ; for ( int i = 0 ; i <= ( updateLimit * 2 ) ; i ++ ) { builder . child ( \"foo\" ) . setProperty ( ( \"p-\" + i ) , \"value\" ) ; } org . apache . jackrabbit . oak . plugins . document . NodeDocument doc = store . find ( org . apache . jackrabbit . oak . plugins . document . Collection . NODES , org . apache . jackrabbit . oak . plugins . document . util . Utils . getIdFromPath ( \"/foo\" ) ) ; \"<AssertPlaceHolder>\" ; } getIdFromPath ( java . lang . String ) { int depth = org . apache . jackrabbit . oak . plugins . document . util . Utils . pathDepth ( path ) ; if ( org . apache . jackrabbit . oak . plugins . document . util . Utils . isLongPath ( path ) ) { java . lang . String parent = org . apache . jackrabbit . oak . commons . PathUtils . getParentPath ( path ) ; byte [ ] hash = org . apache . jackrabbit . oak . plugins . document . util . Utils . createSHA256Digest ( parent ) ; return org . apache . jackrabbit . oak . plugins . document . util . Utils . createHashedId ( depth , hash , org . apache . jackrabbit . oak . commons . PathUtils . getName ( path ) ) ; } return ( depth + \":\" ) + path ; }", "answer": "org . junit . Assert . assertNotNull ( doc )"}
{"focal": "getContext ( ) { return nl . bzk . migratiebrp . routering . runtime . Main . context ; }", "testMethod": "test ( ) { \"<AssertPlaceHolder>\" ; for ( int i = 13 ; i > 0 ; i -- ) { nl . bzk . migratiebrp . routering . runtime . MainTest . LOGGER . info ( ( ( \"Sleeping<sp>for<sp>\" + i ) + \"<sp>seconds...\" ) ) ; java . lang . Thread . sleep ( 1000 ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( nl . bzk . migratiebrp . routering . runtime . Main . getContext ( ) )", "total": "test ( ) { \"<AssertPlaceHolder>\" ; for ( int i = 13 ; i > 0 ; i -- ) { nl . bzk . migratiebrp . routering . runtime . MainTest . LOGGER . info ( ( ( \"Sleeping<sp>for<sp>\" + i ) + \"<sp>seconds...\" ) ) ; java . lang . Thread . sleep ( 1000 ) ; } } getContext ( ) { return nl . bzk . migratiebrp . routering . runtime . Main . context ; }", "answer": "org . junit . Assert . assertNotNull ( nl . bzk . migratiebrp . routering . runtime . Main . getContext ( ) )"}
{"focal": "getTimings ( ) { if ( ( timings ) == null ) { timings = new de . sstoehr . harreader . model . HarTiming ( ) ; } return timings ; }", "testMethod": "testTimingsNull ( ) { de . sstoehr . harreader . model . HarEntry entry = new de . sstoehr . harreader . model . HarEntry ( ) ; entry . setTimings ( null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entry . getTimings ( ) )", "total": "testTimingsNull ( ) { de . sstoehr . harreader . model . HarEntry entry = new de . sstoehr . harreader . model . HarEntry ( ) ; entry . setTimings ( null ) ; \"<AssertPlaceHolder>\" ; } getTimings ( ) { if ( ( timings ) == null ) { timings = new de . sstoehr . harreader . model . HarTiming ( ) ; } return timings ; }", "answer": "org . junit . Assert . assertNotNull ( entry . getTimings ( ) )"}
{"focal": "onReactorInit ( org . apache . qpid . proton . engine . Event ) { event . getReactor ( ) . connection ( amqpReceiveHandler ) ; }", "testMethod": "onReactorInitCallFlowAndInitOk ( ) { final java . lang . String hostName = \"aaa\" ; final java . lang . String userName = \"bbb\" ; final java . lang . String sasToken = \"ccc\" ; com . microsoft . azure . sdk . iot . service . IotHubServiceClientProtocol iotHubServiceClientProtocol = com . microsoft . azure . sdk . iot . service . IotHubServiceClientProtocol . AMQPS ; com . microsoft . azure . sdk . iot . service . transport . amqps . AmqpFileUploadNotificationReceive amqpFileUploadNotificationReceive = new com . microsoft . azure . sdk . iot . service . transport . amqps . AmqpFileUploadNotificationReceive ( hostName , userName , sasToken , iotHubServiceClientProtocol ) ; amqpFileUploadNotificationReceive . open ( ) ; new mockit . Expectations ( ) { { reactor = event . getReactor ( ) ; connection = reactor . connection ( mockit . Deencapsulation . getField ( amqpFileUploadNotificationReceive , \"amqpReceiveHandler\" ) ) ; } } ; amqpFileUploadNotificationReceive . onReactorInit ( event ) ; \"<AssertPlaceHolder>\" ; amqpFileUploadNotificationReceive . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( mockit . Deencapsulation . getField ( amqpFileUploadNotificationReceive , \"amqpReceiveHandler\" ) )", "total": "onReactorInitCallFlowAndInitOk ( ) { final java . lang . String hostName = \"aaa\" ; final java . lang . String userName = \"bbb\" ; final java . lang . String sasToken = \"ccc\" ; com . microsoft . azure . sdk . iot . service . IotHubServiceClientProtocol iotHubServiceClientProtocol = com . microsoft . azure . sdk . iot . service . IotHubServiceClientProtocol . AMQPS ; com . microsoft . azure . sdk . iot . service . transport . amqps . AmqpFileUploadNotificationReceive amqpFileUploadNotificationReceive = new com . microsoft . azure . sdk . iot . service . transport . amqps . AmqpFileUploadNotificationReceive ( hostName , userName , sasToken , iotHubServiceClientProtocol ) ; amqpFileUploadNotificationReceive . open ( ) ; new mockit . Expectations ( ) { { reactor = event . getReactor ( ) ; connection = reactor . connection ( mockit . Deencapsulation . getField ( amqpFileUploadNotificationReceive , \"amqpReceiveHandler\" ) ) ; } } ; amqpFileUploadNotificationReceive . onReactorInit ( event ) ; \"<AssertPlaceHolder>\" ; amqpFileUploadNotificationReceive . close ( ) ; } onReactorInit ( org . apache . qpid . proton . engine . Event ) { event . getReactor ( ) . connection ( amqpReceiveHandler ) ; }", "answer": "org . junit . Assert . assertNotNull ( mockit . Deencapsulation . getField ( amqpFileUploadNotificationReceive , \"amqpReceiveHandler\" ) )"}
{"focal": "create ( ) { createAsync ( ) . toBlocking ( ) . subscribe ( ) ; return this ; }", "testMethod": "canCopySqlDatabase ( ) { java . lang . String rgName = RG_NAME ; final java . lang . String sqlPrimaryServerName = com . microsoft . azure . management . resources . fluentcore . utils . SdkContext . randomResourceName ( \"sqlpri\" , 22 ) ; final java . lang . String sqlSecondaryServerName = com . microsoft . azure . management . resources . fluentcore . utils . SdkContext . randomResourceName ( \"sqlsec\" , 22 ) ; final java . lang . String epName = \"epSample\" ; final java . lang . String dbName = \"dbSample\" ; final java . lang . String administratorLogin = \"sqladmin\" ; final java . lang . String administratorPassword = \"N0t@P@ssw0rd!\" ; com . microsoft . azure . management . sql . SqlServer sqlPrimaryServer = sqlServerManager . sqlServers ( ) . define ( sqlPrimaryServerName ) . withRegion ( Region . US_WEST2 ) . withNewResourceGroup ( rgName ) . withAdministratorLogin ( administratorLogin ) . withAdministratorPassword ( administratorPassword ) . defineElasticPool ( epName ) . withPremiumPool ( ) . attach ( ) . defineDatabase ( dbName ) . withExistingElasticPool ( epName ) . fromSample ( SampleName . ADVENTURE_WORKS_LT ) . attach ( ) . create ( ) ; com . microsoft . azure . management . sql . SqlServer sqlSecondaryServer = sqlServerManager . sqlServers ( ) . define ( sqlSecondaryServerName ) . withRegion ( Region . US_WEST ) . withExistingResourceGroup ( rgName ) . withAdministratorLogin ( administratorLogin ) . withAdministratorPassword ( administratorPassword ) . create ( ) ; com . microsoft . azure . management . sql . SqlDatabase dbSample = sqlPrimaryServer . databases ( ) . get ( dbName ) ; com . microsoft . azure . management . sql . SqlDatabase dbCopy = sqlSecondaryServer . databases ( ) . define ( \"dbCopy\" ) . withSourceDatabase ( dbSample ) . withMode ( CreateMode . COPY ) . withServiceObjective ( ServiceObjectiveName . P1 ) . create ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dbCopy )", "total": "canCopySqlDatabase ( ) { java . lang . String rgName = RG_NAME ; final java . lang . String sqlPrimaryServerName = com . microsoft . azure . management . resources . fluentcore . utils . SdkContext . randomResourceName ( \"sqlpri\" , 22 ) ; final java . lang . String sqlSecondaryServerName = com . microsoft . azure . management . resources . fluentcore . utils . SdkContext . randomResourceName ( \"sqlsec\" , 22 ) ; final java . lang . String epName = \"epSample\" ; final java . lang . String dbName = \"dbSample\" ; final java . lang . String administratorLogin = \"sqladmin\" ; final java . lang . String administratorPassword = \"N0t@P@ssw0rd!\" ; com . microsoft . azure . management . sql . SqlServer sqlPrimaryServer = sqlServerManager . sqlServers ( ) . define ( sqlPrimaryServerName ) . withRegion ( Region . US_WEST2 ) . withNewResourceGroup ( rgName ) . withAdministratorLogin ( administratorLogin ) . withAdministratorPassword ( administratorPassword ) . defineElasticPool ( epName ) . withPremiumPool ( ) . attach ( ) . defineDatabase ( dbName ) . withExistingElasticPool ( epName ) . fromSample ( SampleName . ADVENTURE_WORKS_LT ) . attach ( ) . create ( ) ; com . microsoft . azure . management . sql . SqlServer sqlSecondaryServer = sqlServerManager . sqlServers ( ) . define ( sqlSecondaryServerName ) . withRegion ( Region . US_WEST ) . withExistingResourceGroup ( rgName ) . withAdministratorLogin ( administratorLogin ) . withAdministratorPassword ( administratorPassword ) . create ( ) ; com . microsoft . azure . management . sql . SqlDatabase dbSample = sqlPrimaryServer . databases ( ) . get ( dbName ) ; com . microsoft . azure . management . sql . SqlDatabase dbCopy = sqlSecondaryServer . databases ( ) . define ( \"dbCopy\" ) . withSourceDatabase ( dbSample ) . withMode ( CreateMode . COPY ) . withServiceObjective ( ServiceObjectiveName . P1 ) . create ( ) ; \"<AssertPlaceHolder>\" ; } create ( ) { createAsync ( ) . toBlocking ( ) . subscribe ( ) ; return this ; }", "answer": "org . junit . Assert . assertNotNull ( dbCopy )"}
{"focal": "getContent ( ) { return content ; }", "testMethod": "testGetContentInfo ( ) { java . lang . String httpsProxyHost = null ; int httpsProxyPort = - 1 ; final java . lang . String httpsProxy = java . lang . System . getenv ( \"https_proxy\" ) ; if ( httpsProxy != null ) { final java . net . URL url = new java . net . URL ( httpsProxy ) ; httpsProxyHost = url . getHost ( ) ; httpsProxyPort = url . getPort ( ) ; } final org . apache . commons . vfs2 . FileSystemOptions opts ; if ( httpsProxyHost != null ) { opts = new org . apache . commons . vfs2 . FileSystemOptions ( ) ; final org . apache . commons . vfs2 . provider . http . HttpFileSystemConfigBuilder builder = org . apache . commons . vfs2 . provider . http . HttpFileSystemConfigBuilder . getInstance ( ) ; builder . setProxyHost ( opts , httpsProxyHost ) ; if ( httpsProxyPort >= 0 ) { builder . setProxyPort ( opts , httpsProxyPort ) ; } } else { opts = null ; } final org . apache . commons . vfs2 . FileSystemManager fsManager = org . apache . commons . vfs2 . VFS . getManager ( ) ; try ( final org . apache . commons . vfs2 . FileObject fo = fsManager . resolveFile ( \"http://www.apache.org/licenses/LICENSE-2.0.txt\" , opts ) ; final org . apache . commons . vfs2 . FileContent content = fo . getContent ( ) ) { \"<AssertPlaceHolder>\" ; content . getContentInfo ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( content )", "total": "testGetContentInfo ( ) { java . lang . String httpsProxyHost = null ; int httpsProxyPort = - 1 ; final java . lang . String httpsProxy = java . lang . System . getenv ( \"https_proxy\" ) ; if ( httpsProxy != null ) { final java . net . URL url = new java . net . URL ( httpsProxy ) ; httpsProxyHost = url . getHost ( ) ; httpsProxyPort = url . getPort ( ) ; } final org . apache . commons . vfs2 . FileSystemOptions opts ; if ( httpsProxyHost != null ) { opts = new org . apache . commons . vfs2 . FileSystemOptions ( ) ; final org . apache . commons . vfs2 . provider . http . HttpFileSystemConfigBuilder builder = org . apache . commons . vfs2 . provider . http . HttpFileSystemConfigBuilder . getInstance ( ) ; builder . setProxyHost ( opts , httpsProxyHost ) ; if ( httpsProxyPort >= 0 ) { builder . setProxyPort ( opts , httpsProxyPort ) ; } } else { opts = null ; } final org . apache . commons . vfs2 . FileSystemManager fsManager = org . apache . commons . vfs2 . VFS . getManager ( ) ; try ( final org . apache . commons . vfs2 . FileObject fo = fsManager . resolveFile ( \"http://www.apache.org/licenses/LICENSE-2.0.txt\" , opts ) ; final org . apache . commons . vfs2 . FileContent content = fo . getContent ( ) ) { \"<AssertPlaceHolder>\" ; content . getContentInfo ( ) ; } } getContent ( ) { return content ; }", "answer": "org . junit . Assert . assertNotNull ( content )"}
{"focal": "clone ( ) { org . openscience . cdk . formula . IsotopeContainer isoClone = new org . openscience . cdk . formula . IsotopeContainer ( ) ; isoClone . forms . addAll ( getFormulas ( ) ) ; isoClone . setIntensity ( getIntensity ( ) ) ; isoClone . setMass ( getMass ( ) ) ; return isoClone ; }", "testMethod": "testClone ( ) { org . openscience . cdk . interfaces . IStrand strand = ( ( org . openscience . cdk . interfaces . IStrand ) ( newChemObject ( ) ) ) ; java . lang . Object clone = strand . clone ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( clone )", "total": "testClone ( ) { org . openscience . cdk . interfaces . IStrand strand = ( ( org . openscience . cdk . interfaces . IStrand ) ( newChemObject ( ) ) ) ; java . lang . Object clone = strand . clone ( ) ; \"<AssertPlaceHolder>\" ; } clone ( ) { org . openscience . cdk . formula . IsotopeContainer isoClone = new org . openscience . cdk . formula . IsotopeContainer ( ) ; isoClone . forms . addAll ( getFormulas ( ) ) ; isoClone . setIntensity ( getIntensity ( ) ) ; isoClone . setMass ( getMass ( ) ) ; return isoClone ; }", "answer": "org . junit . Assert . assertNotNull ( clone )"}
{"focal": "totalBeansDestroyedProperty ( ) { if ( ( statistics ) == null ) { return NOT_AVAILABLE ; } final javax . json . JsonObject jsonObject = statistics . getJsonObject ( \"totalbeansdestroyed\" ) ; int value = jsonObject . getInt ( \"count\" ) ; totalBeansDestroyed . set ( value ) ; return totalBeansDestroyed ; }", "testMethod": "totalBeansDestroyed ( ) { org . lightview . business . pool . entity . PoolStatistics poolStats = this . cut . getPoolStats ( \"lightfish\" , \"ConfigurationStore\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( poolStats . totalBeansDestroyedProperty ( ) )", "total": "totalBeansDestroyed ( ) { org . lightview . business . pool . entity . PoolStatistics poolStats = this . cut . getPoolStats ( \"lightfish\" , \"ConfigurationStore\" ) ; \"<AssertPlaceHolder>\" ; } totalBeansDestroyedProperty ( ) { if ( ( statistics ) == null ) { return NOT_AVAILABLE ; } final javax . json . JsonObject jsonObject = statistics . getJsonObject ( \"totalbeansdestroyed\" ) ; int value = jsonObject . getInt ( \"count\" ) ; totalBeansDestroyed . set ( value ) ; return totalBeansDestroyed ; }", "answer": "org . junit . Assert . assertNotNull ( poolStats . totalBeansDestroyedProperty ( ) )"}
{"focal": "getFather ( ) { return father ; }", "testMethod": "testDeferLoadAfterResultHandler ( ) { org . apache . ibatis . session . SqlSession sqlSession = org . apache . ibatis . submitted . deferload_common_property . CommonPropertyDeferLoadError . sqlSessionFactory . openSession ( ) ; try { class MyResultHandler implements org . apache . ibatis . session . ResultHandler { java . util . List < org . apache . ibatis . submitted . deferload_common_property . Child > children = new java . util . ArrayList < org . apache . ibatis . submitted . deferload_common_property . Child > ( ) ; @ org . apache . ibatis . submitted . deferload_common_property . Override public void handleResult ( org . apache . ibatis . session . ResultContext context ) { org . apache . ibatis . submitted . deferload_common_property . Child child = ( ( org . apache . ibatis . submitted . deferload_common_property . Child ) ( context . getResultObject ( ) ) ) ; children . add ( child ) ; } } MyResultHandler myResultHandler = new MyResultHandler ( ) ; sqlSession . select ( \"org.apache.ibatis.submitted.deferload_common_property.ChildMapper.selectAll\" , myResultHandler ) ; for ( org . apache . ibatis . submitted . deferload_common_property . Child child : myResultHandler . children ) { \"<AssertPlaceHolder>\" ; } } finally { sqlSession . close ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( child . getFather ( ) )", "total": "testDeferLoadAfterResultHandler ( ) { org . apache . ibatis . session . SqlSession sqlSession = org . apache . ibatis . submitted . deferload_common_property . CommonPropertyDeferLoadError . sqlSessionFactory . openSession ( ) ; try { class MyResultHandler implements org . apache . ibatis . session . ResultHandler { java . util . List < org . apache . ibatis . submitted . deferload_common_property . Child > children = new java . util . ArrayList < org . apache . ibatis . submitted . deferload_common_property . Child > ( ) ; @ org . apache . ibatis . submitted . deferload_common_property . Override public void handleResult ( org . apache . ibatis . session . ResultContext context ) { org . apache . ibatis . submitted . deferload_common_property . Child child = ( ( org . apache . ibatis . submitted . deferload_common_property . Child ) ( context . getResultObject ( ) ) ) ; children . add ( child ) ; } } MyResultHandler myResultHandler = new MyResultHandler ( ) ; sqlSession . select ( \"org.apache.ibatis.submitted.deferload_common_property.ChildMapper.selectAll\" , myResultHandler ) ; for ( org . apache . ibatis . submitted . deferload_common_property . Child child : myResultHandler . children ) { \"<AssertPlaceHolder>\" ; } } finally { sqlSession . close ( ) ; } } getFather ( ) { return father ; }", "answer": "org . junit . Assert . assertNotNull ( child . getFather ( ) )"}
{"focal": "get ( ) { if ( org . opendaylight . yangtools . concepts . CheckedValue . isFirst ( ) ) { return org . opendaylight . yangtools . concepts . CheckedValue . first ( ) ; } throw new java . lang . IllegalStateException ( \"Value<sp>is<sp>not<sp>present\" , org . opendaylight . yangtools . concepts . CheckedValue . second ( ) ) ; }", "testMethod": "testCreateSchemaContextWithDuplicateRequiredSources ( ) { final org . opendaylight . yangtools . yang . parser . repo . SharedSchemaContextFactory sharedSchemaContextFactory = new org . opendaylight . yangtools . yang . parser . repo . SharedSchemaContextFactory ( repository , config ) ; final com . google . common . util . concurrent . ListenableFuture < org . opendaylight . yangtools . yang . model . api . EffectiveModelContext > schemaContext = sharedSchemaContextFactory . createEffectiveModelContext ( s1 , s1 , s2 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( schemaContext . get ( ) )", "total": "testCreateSchemaContextWithDuplicateRequiredSources ( ) { final org . opendaylight . yangtools . yang . parser . repo . SharedSchemaContextFactory sharedSchemaContextFactory = new org . opendaylight . yangtools . yang . parser . repo . SharedSchemaContextFactory ( repository , config ) ; final com . google . common . util . concurrent . ListenableFuture < org . opendaylight . yangtools . yang . model . api . EffectiveModelContext > schemaContext = sharedSchemaContextFactory . createEffectiveModelContext ( s1 , s1 , s2 ) ; \"<AssertPlaceHolder>\" ; } get ( ) { if ( org . opendaylight . yangtools . concepts . CheckedValue . isFirst ( ) ) { return org . opendaylight . yangtools . concepts . CheckedValue . first ( ) ; } throw new java . lang . IllegalStateException ( \"Value<sp>is<sp>not<sp>present\" , org . opendaylight . yangtools . concepts . CheckedValue . second ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( schemaContext . get ( ) )"}
{"focal": "getQueueName ( ) { return java . util . UUID . randomUUID ( ) . toString ( ) . getBytes ( ) ; }", "testMethod": "addJob ( ) { java . lang . String jobId = com . github . xetorthio . jedisque . BinaryJedisqueTest . q . addJob ( com . github . xetorthio . jedisque . BinaryJedisqueTest . getQueueName ( ) , binaryValue , 10 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( jobId )", "total": "addJob ( ) { java . lang . String jobId = com . github . xetorthio . jedisque . BinaryJedisqueTest . q . addJob ( com . github . xetorthio . jedisque . BinaryJedisqueTest . getQueueName ( ) , binaryValue , 10 ) ; \"<AssertPlaceHolder>\" ; } getQueueName ( ) { return java . util . UUID . randomUUID ( ) . toString ( ) . getBytes ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( jobId )"}
{"focal": "getType ( java . lang . String ) { de . lessvoid . xml . lwxs . elements . Type t = types . get ( name ) ; if ( t == null ) { de . lessvoid . xml . lwxs . Schema . log . warning ( ( ( \"Type<sp>[\" + name ) + \"]<sp>not<sp>found.<sp>Creating<sp>new<sp>one<sp>on<sp>the<sp>fly\" ) ) ; t = new de . lessvoid . xml . lwxs . elements . Type ( name , null ) ; addType ( name , t ) ; } return t ; }", "testMethod": "testSimple ( ) { de . lessvoid . xml . xpp3 . Attributes attributes = new de . lessvoid . xml . xpp3 . Attributes ( ) ; attributes . set ( \"name\" , \"testType\" ) ; xmlParserMock . nextTag ( ) ; xmlParserMock . zeroOrMore ( isA ( de . lessvoid . xml . xpp3 . SubstitutionGroup . class ) ) ; replay ( xmlParserMock ) ; typeProcessor . process ( xmlParserMock , attributes ) ; de . lessvoid . xml . lwxs . elements . Type type = niftyXmlSchema . getType ( \"testType\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( type )", "total": "testSimple ( ) { de . lessvoid . xml . xpp3 . Attributes attributes = new de . lessvoid . xml . xpp3 . Attributes ( ) ; attributes . set ( \"name\" , \"testType\" ) ; xmlParserMock . nextTag ( ) ; xmlParserMock . zeroOrMore ( isA ( de . lessvoid . xml . xpp3 . SubstitutionGroup . class ) ) ; replay ( xmlParserMock ) ; typeProcessor . process ( xmlParserMock , attributes ) ; de . lessvoid . xml . lwxs . elements . Type type = niftyXmlSchema . getType ( \"testType\" ) ; \"<AssertPlaceHolder>\" ; } getType ( java . lang . String ) { de . lessvoid . xml . lwxs . elements . Type t = types . get ( name ) ; if ( t == null ) { de . lessvoid . xml . lwxs . Schema . log . warning ( ( ( \"Type<sp>[\" + name ) + \"]<sp>not<sp>found.<sp>Creating<sp>new<sp>one<sp>on<sp>the<sp>fly\" ) ) ; t = new de . lessvoid . xml . lwxs . elements . Type ( name , null ) ; addType ( name , t ) ; } return t ; }", "answer": "org . junit . Assert . assertNotNull ( type )"}
{"focal": "queryObjectList ( com . dexcoder . dal . build . Criteria , java . io . Serializable , java . lang . Class ) { com . dexcoder . dal . BoundSql boundSql = criteria . mappingHandler ( getMappingHandler ( ) ) . build ( entity , true ) ; return jdbcTemplate . queryForList ( boundSql . getSql ( ) , elementType , boundSql . getParameters ( ) . toArray ( ) ) ; }", "testMethod": "queryObjectList2 ( ) { com . dexcoder . dal . build . Criteria criteria = com . dexcoder . dal . build . Criteria . select ( com . dexcoder . test . model . User . class ) . include ( \"loginName\" ) . where ( \"userType\" , new java . lang . Object [ ] { \"1\" } ) ; com . dexcoder . test . model . User user = new com . dexcoder . test . model . User ( ) ; user . setUserAge ( 22 ) ; java . util . List < java . lang . String > list = jdbcDao . queryObjectList ( criteria , user , java . lang . String . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( list )", "total": "queryObjectList2 ( ) { com . dexcoder . dal . build . Criteria criteria = com . dexcoder . dal . build . Criteria . select ( com . dexcoder . test . model . User . class ) . include ( \"loginName\" ) . where ( \"userType\" , new java . lang . Object [ ] { \"1\" } ) ; com . dexcoder . test . model . User user = new com . dexcoder . test . model . User ( ) ; user . setUserAge ( 22 ) ; java . util . List < java . lang . String > list = jdbcDao . queryObjectList ( criteria , user , java . lang . String . class ) ; \"<AssertPlaceHolder>\" ; } queryObjectList ( com . dexcoder . dal . build . Criteria , java . io . Serializable , java . lang . Class ) { com . dexcoder . dal . BoundSql boundSql = criteria . mappingHandler ( getMappingHandler ( ) ) . build ( entity , true ) ; return jdbcTemplate . queryForList ( boundSql . getSql ( ) , elementType , boundSql . getParameters ( ) . toArray ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( list )"}
{"focal": "onFailover ( org . kaaproject . kaa . client . channel . failover . FailoverStatus ) { org . kaaproject . kaa . client . channel . failover . DefaultFailoverManager . AccessPointIdResolution accessPointIdResolution = null ; long resolutionTime = java . lang . System . currentTimeMillis ( ) ; switch ( failoverStatus ) { case BOOTSTRAP_SERVERS_NA : case CURRENT_BOOTSTRAP_SERVER_NA : accessPointIdResolution = resolutionProgressMap . get ( ServerType . BOOTSTRAP ) ; resolutionTime += failoverStrategy . getTimeUnit ( ) . toMillis ( failoverStrategy . getBootstrapServersRetryPeriod ( ) ) ; break ; case NO_OPERATION_SERVERS_RECEIVED : accessPointIdResolution = resolutionProgressMap . get ( ServerType . BOOTSTRAP ) ; break ; case OPERATION_SERVERS_NA : accessPointIdResolution = resolutionProgressMap . get ( ServerType . OPERATIONS ) ; resolutionTime += failoverStrategy . getTimeUnit ( ) . toMillis ( failoverStrategy . getOperationServersRetryPeriod ( ) ) ; break ; default : break ; } if ( accessPointIdResolution != null ) { accessPointIdResolution . setResolutionTime ( resolutionTime ) ; } return failoverStrategy . onFailover ( failoverStatus ) ; }", "testMethod": "basicFailoverStrategyTest ( ) { org . kaaproject . kaa . client . channel . failover . FailoverStatus incomingStatus = FailoverStatus . BOOTSTRAP_SERVERS_NA ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( failoverStrategy , org . mockito . Mockito . times ( 1 ) ) . onFailover ( incomingStatus ) ; org . kaaproject . kaa . client . channel . TransportConnectionInfo connectionInfo = org . mockito . Mockito . mock ( org . kaaproject . kaa . client . channel . TransportConnectionInfo . class ) ; failoverManager . onServerConnected ( connectionInfo ) ; org . mockito . Mockito . verify ( failoverStrategy , org . mockito . Mockito . times ( 1 ) ) . onRecover ( connectionInfo ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( failoverManager . onFailover ( incomingStatus ) )", "total": "basicFailoverStrategyTest ( ) { org . kaaproject . kaa . client . channel . failover . FailoverStatus incomingStatus = FailoverStatus . BOOTSTRAP_SERVERS_NA ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( failoverStrategy , org . mockito . Mockito . times ( 1 ) ) . onFailover ( incomingStatus ) ; org . kaaproject . kaa . client . channel . TransportConnectionInfo connectionInfo = org . mockito . Mockito . mock ( org . kaaproject . kaa . client . channel . TransportConnectionInfo . class ) ; failoverManager . onServerConnected ( connectionInfo ) ; org . mockito . Mockito . verify ( failoverStrategy , org . mockito . Mockito . times ( 1 ) ) . onRecover ( connectionInfo ) ; } onFailover ( org . kaaproject . kaa . client . channel . failover . FailoverStatus ) { org . kaaproject . kaa . client . channel . failover . DefaultFailoverManager . AccessPointIdResolution accessPointIdResolution = null ; long resolutionTime = java . lang . System . currentTimeMillis ( ) ; switch ( failoverStatus ) { case BOOTSTRAP_SERVERS_NA : case CURRENT_BOOTSTRAP_SERVER_NA : accessPointIdResolution = resolutionProgressMap . get ( ServerType . BOOTSTRAP ) ; resolutionTime += failoverStrategy . getTimeUnit ( ) . toMillis ( failoverStrategy . getBootstrapServersRetryPeriod ( ) ) ; break ; case NO_OPERATION_SERVERS_RECEIVED : accessPointIdResolution = resolutionProgressMap . get ( ServerType . BOOTSTRAP ) ; break ; case OPERATION_SERVERS_NA : accessPointIdResolution = resolutionProgressMap . get ( ServerType . OPERATIONS ) ; resolutionTime += failoverStrategy . getTimeUnit ( ) . toMillis ( failoverStrategy . getOperationServersRetryPeriod ( ) ) ; break ; default : break ; } if ( accessPointIdResolution != null ) { accessPointIdResolution . setResolutionTime ( resolutionTime ) ; } return failoverStrategy . onFailover ( failoverStatus ) ; }", "answer": "org . junit . Assert . assertNotNull ( failoverManager . onFailover ( incomingStatus ) )"}
{"focal": "rebootDroplet ( java . lang . Integer ) { validateDropletId ( dropletId ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { dropletId } ; return ( ( com . myjeeva . digitalocean . pojo . Action ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . REBOOT_DROPLET , new com . myjeeva . digitalocean . pojo . DropletAction ( com . myjeeva . digitalocean . common . ActionType . REBOOT ) , params ) ) . getData ( ) ) ) ; }", "testMethod": "testPowerCycleDroplet ( ) { com . myjeeva . digitalocean . pojo . Action action = apiClient . rebootDroplet ( 2258136 ) ; \"<AssertPlaceHolder>\" ; log . info ( action . toString ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( action )", "total": "testPowerCycleDroplet ( ) { com . myjeeva . digitalocean . pojo . Action action = apiClient . rebootDroplet ( 2258136 ) ; \"<AssertPlaceHolder>\" ; log . info ( action . toString ( ) ) ; } rebootDroplet ( java . lang . Integer ) { validateDropletId ( dropletId ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { dropletId } ; return ( ( com . myjeeva . digitalocean . pojo . Action ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . REBOOT_DROPLET , new com . myjeeva . digitalocean . pojo . DropletAction ( com . myjeeva . digitalocean . common . ActionType . REBOOT ) , params ) ) . getData ( ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( action )"}
{"focal": "createInstanceByDefaultConstructor ( java . lang . String , java . lang . Class , com . dp . nebula . wormhole . engine . utils . JarLoader ) { try { java . lang . Class < T > clazz = null ; if ( jarLoader != null ) { clazz = ( ( java . lang . Class < T > ) ( jarLoader . loadClass ( className ) ) ) ; } if ( clazz == null ) { clazz = ( ( java . lang . Class < T > ) ( java . lang . Class . forName ( className ) ) ) ; } return clazz . newInstance ( ) ; } catch ( java . lang . Exception e ) { com . dp . nebula . wormhole . engine . utils . ReflectionUtil . s_logger . error ( ( \"Exception<sp>occurs<sp>when<sp>creating<sp>\" + className ) , e ) ; return null ; } }", "testMethod": "testCreateInstanceByDefaultConstructor_with_class_loader_Success ( ) { java . lang . Object o = com . dp . nebula . wormhole . engine . utils . ReflectionUtil . createInstanceByDefaultConstructor ( className , java . lang . Object . class , jarLoader ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( o )", "total": "testCreateInstanceByDefaultConstructor_with_class_loader_Success ( ) { java . lang . Object o = com . dp . nebula . wormhole . engine . utils . ReflectionUtil . createInstanceByDefaultConstructor ( className , java . lang . Object . class , jarLoader ) ; \"<AssertPlaceHolder>\" ; } createInstanceByDefaultConstructor ( java . lang . String , java . lang . Class , com . dp . nebula . wormhole . engine . utils . JarLoader ) { try { java . lang . Class < T > clazz = null ; if ( jarLoader != null ) { clazz = ( ( java . lang . Class < T > ) ( jarLoader . loadClass ( className ) ) ) ; } if ( clazz == null ) { clazz = ( ( java . lang . Class < T > ) ( java . lang . Class . forName ( className ) ) ) ; } return clazz . newInstance ( ) ; } catch ( java . lang . Exception e ) { com . dp . nebula . wormhole . engine . utils . ReflectionUtil . s_logger . error ( ( \"Exception<sp>occurs<sp>when<sp>creating<sp>\" + className ) , e ) ; return null ; } }", "answer": "org . junit . Assert . assertNotNull ( o )"}
{"focal": "callRestService ( javax . ws . rs . client . Client ) { javax . ws . rs . client . WebTarget target = client . target ( \"https://localhost:8081/test\" ) ; return target . request ( ) . get ( java . lang . String . class ) ; }", "testMethod": "testSniClient ( ) { org . jboss . resteasy . client . jaxrs . ResteasyClient client = createClientWithCertificate ( SSLCerts . SNI_TRUSTSTORE . getSslContext ( ) , \"sni\" ) ; java . lang . String returnValue = callRestService ( client ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( returnValue )", "total": "testSniClient ( ) { org . jboss . resteasy . client . jaxrs . ResteasyClient client = createClientWithCertificate ( SSLCerts . SNI_TRUSTSTORE . getSslContext ( ) , \"sni\" ) ; java . lang . String returnValue = callRestService ( client ) ; \"<AssertPlaceHolder>\" ; } callRestService ( javax . ws . rs . client . Client ) { javax . ws . rs . client . WebTarget target = client . target ( \"https://localhost:8081/test\" ) ; return target . request ( ) . get ( java . lang . String . class ) ; }", "answer": "org . junit . Assert . assertNotNull ( returnValue )"}
{"focal": "findByName ( java . lang . String ) { javax . persistence . EntityManager em = getEntityManager ( ) ; try { javax . persistence . Query query = em . createNamedQuery ( \"TblPackageNamespace.findByName\" ) ; query . setParameter ( \"name\" , name ) ; query . setHint ( QueryHints . CACHE_USAGE , CacheUsage . CheckCacheThenDatabase ) ; com . intel . mtwilson . as . data . TblPackageNamespace tblPNS = ( ( com . intel . mtwilson . as . data . TblPackageNamespace ) ( query . getSingleResult ( ) ) ) ; return tblPNS ; } finally { em . close ( ) ; } }", "testMethod": "testApplyPolicyForHost ( ) { com . intel . mtwilson . as . data . TblHosts host = com . intel . mtwilson . My . jpa ( ) . mwHosts ( ) . findByName ( hostname ) ; \"<AssertPlaceHolder>\" ; com . intel . mtwilson . agent . HostAgentFactory agentFactory = new com . intel . mtwilson . agent . HostAgentFactory ( ) ; com . intel . mtwilson . agent . HostAgent agent = agentFactory . getHostAgent ( host ) ; test . policy . HostReport hostReport = new test . policy . HostReport ( ) ; hostReport . pcrManifest = agent . getPcrManifest ( ) ; hostReport . variables = agent . getHostAttributes ( ) ; com . intel . mtwilson . policy . impl . HostTrustPolicyManager hostTrustPolicyFactory = new com . intel . mtwilson . policy . impl . HostTrustPolicyManager ( com . intel . mtwilson . My . persistenceManager ( ) . getASData ( ) ) ; test . policy . Policy policy = hostTrustPolicyFactory . loadTrustPolicyForHost ( host , hostname ) ; test . policy . PolicyEngine engine = new test . policy . PolicyEngine ( ) ; test . policy . TrustReport report = engine . apply ( hostReport , policy ) ; log . debug ( \"TRUST<sp>REPORT:<sp>{}\" , test . policy . TestVmwareEsxi51 . json . writeValueAsString ( report ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( host )", "total": "testApplyPolicyForHost ( ) { com . intel . mtwilson . as . data . TblHosts host = com . intel . mtwilson . My . jpa ( ) . mwHosts ( ) . findByName ( hostname ) ; \"<AssertPlaceHolder>\" ; com . intel . mtwilson . agent . HostAgentFactory agentFactory = new com . intel . mtwilson . agent . HostAgentFactory ( ) ; com . intel . mtwilson . agent . HostAgent agent = agentFactory . getHostAgent ( host ) ; test . policy . HostReport hostReport = new test . policy . HostReport ( ) ; hostReport . pcrManifest = agent . getPcrManifest ( ) ; hostReport . variables = agent . getHostAttributes ( ) ; com . intel . mtwilson . policy . impl . HostTrustPolicyManager hostTrustPolicyFactory = new com . intel . mtwilson . policy . impl . HostTrustPolicyManager ( com . intel . mtwilson . My . persistenceManager ( ) . getASData ( ) ) ; test . policy . Policy policy = hostTrustPolicyFactory . loadTrustPolicyForHost ( host , hostname ) ; test . policy . PolicyEngine engine = new test . policy . PolicyEngine ( ) ; test . policy . TrustReport report = engine . apply ( hostReport , policy ) ; log . debug ( \"TRUST<sp>REPORT:<sp>{}\" , test . policy . TestVmwareEsxi51 . json . writeValueAsString ( report ) ) ; } findByName ( java . lang . String ) { javax . persistence . EntityManager em = getEntityManager ( ) ; try { javax . persistence . Query query = em . createNamedQuery ( \"TblPackageNamespace.findByName\" ) ; query . setParameter ( \"name\" , name ) ; query . setHint ( QueryHints . CACHE_USAGE , CacheUsage . CheckCacheThenDatabase ) ; com . intel . mtwilson . as . data . TblPackageNamespace tblPNS = ( ( com . intel . mtwilson . as . data . TblPackageNamespace ) ( query . getSingleResult ( ) ) ) ; return tblPNS ; } finally { em . close ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( host )"}
{"focal": "done ( ) { return userMembership ; }", "testMethod": "updateProfileEntry ( ) { final org . bonitasoft . engine . profile . model . SProfileEntry sProfileEntry = createProfileEntry ( 3 ) ; final org . bonitasoft . engine . profile . builder . SProfileEntryUpdateBuilder sProfileEntryUpdateBuilder = new org . bonitasoft . engine . profile . builder . impl . SProfileEntryUpdateBuilderImpl ( ) ; sProfileEntryUpdateBuilder . setDescription ( \"description\" ) . setName ( \"newName\" ) . setIndex ( 6 ) . setCustom ( true ) . setPage ( \"page\" ) . setParentId ( 5858 ) . setProfileId ( 9 ) . setType ( \"type\" ) ; final org . bonitasoft . engine . profile . model . SProfileEntry result = profileServiceImpl . updateProfileEntry ( sProfileEntry , sProfileEntryUpdateBuilder . done ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "updateProfileEntry ( ) { final org . bonitasoft . engine . profile . model . SProfileEntry sProfileEntry = createProfileEntry ( 3 ) ; final org . bonitasoft . engine . profile . builder . SProfileEntryUpdateBuilder sProfileEntryUpdateBuilder = new org . bonitasoft . engine . profile . builder . impl . SProfileEntryUpdateBuilderImpl ( ) ; sProfileEntryUpdateBuilder . setDescription ( \"description\" ) . setName ( \"newName\" ) . setIndex ( 6 ) . setCustom ( true ) . setPage ( \"page\" ) . setParentId ( 5858 ) . setProfileId ( 9 ) . setType ( \"type\" ) ; final org . bonitasoft . engine . profile . model . SProfileEntry result = profileServiceImpl . updateProfileEntry ( sProfileEntry , sProfileEntryUpdateBuilder . done ( ) ) ; \"<AssertPlaceHolder>\" ; } done ( ) { return userMembership ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "get ( ) { return name ( ) . toLowerCase ( ) ; }", "testMethod": "getFollowedResources ( ) { com . ibm . sbt . services . client . base . datahandlers . EntityList < com . ibm . sbt . services . client . connections . follow . FollowedResource > resources = followService . getFollowedResources ( Source . COMMUNITIES . get ( ) , Type . COMMUNITY . get ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( resources )", "total": "getFollowedResources ( ) { com . ibm . sbt . services . client . base . datahandlers . EntityList < com . ibm . sbt . services . client . connections . follow . FollowedResource > resources = followService . getFollowedResources ( Source . COMMUNITIES . get ( ) , Type . COMMUNITY . get ( ) ) ; \"<AssertPlaceHolder>\" ; } get ( ) { return name ( ) . toLowerCase ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( resources )"}
{"focal": "getConfigurationTypesByClientName ( java . lang . String ) { return this . dao . getConfigurationTypesByClientName ( clientname ) ; }", "testMethod": "test_get_configuration_types_by_client_name ( ) { java . util . List < org . ikasan . mapping . service . ConfigurationType > configurationTypes = this . xaMappingManagementService . getConfigurationTypesByClientName ( \"CMI2\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( configurationTypes )", "total": "test_get_configuration_types_by_client_name ( ) { java . util . List < org . ikasan . mapping . service . ConfigurationType > configurationTypes = this . xaMappingManagementService . getConfigurationTypesByClientName ( \"CMI2\" ) ; \"<AssertPlaceHolder>\" ; } getConfigurationTypesByClientName ( java . lang . String ) { return this . dao . getConfigurationTypesByClientName ( clientname ) ; }", "answer": "org . junit . Assert . assertNotNull ( configurationTypes )"}
{"focal": "getResource ( java . lang . String ) { java . net . URL url = null ; java . lang . ClassLoader classLoader = org . flowable . common . engine . impl . util . ReflectUtil . getCustomClassLoader ( ) ; if ( classLoader != null ) { url = classLoader . getResource ( name ) ; } if ( url == null ) { classLoader = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) ; url = classLoader . getResource ( name ) ; if ( url == null ) { classLoader = org . flowable . common . engine . impl . util . ReflectUtil . class . getClassLoader ( ) ; url = classLoader . getResource ( name ) ; } } return url ; }", "testMethod": "testImportBasicElement ( ) { java . net . URL url = org . flowable . common . engine . impl . util . ReflectUtil . getResource ( \"org/flowable/engine/impl/webservice/basic-elements-in-types.wsdl\" ) ; \"<AssertPlaceHolder>\" ; importer . importFrom ( url . toString ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( url )", "total": "testImportBasicElement ( ) { java . net . URL url = org . flowable . common . engine . impl . util . ReflectUtil . getResource ( \"org/flowable/engine/impl/webservice/basic-elements-in-types.wsdl\" ) ; \"<AssertPlaceHolder>\" ; importer . importFrom ( url . toString ( ) ) ; } getResource ( java . lang . String ) { java . net . URL url = null ; java . lang . ClassLoader classLoader = org . flowable . common . engine . impl . util . ReflectUtil . getCustomClassLoader ( ) ; if ( classLoader != null ) { url = classLoader . getResource ( name ) ; } if ( url == null ) { classLoader = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) ; url = classLoader . getResource ( name ) ; if ( url == null ) { classLoader = org . flowable . common . engine . impl . util . ReflectUtil . class . getClassLoader ( ) ; url = classLoader . getResource ( name ) ; } } return url ; }", "answer": "org . junit . Assert . assertNotNull ( url )"}
{"focal": "getEndpointKeyHash ( ) { if ( ( keyHash ) == null ) { org . kaaproject . kaa . common . hash . EndpointObjectHash publicKeyHash = org . kaaproject . kaa . common . hash . EndpointObjectHash . fromSha1 ( getOrInitKeyPair ( isAutogeneratedKeys ) . getPublic ( ) . getEncoded ( ) ) ; keyHash = new org . kaaproject . kaa . client . event . EndpointKeyHash ( new java . lang . String ( base64 . encodeBase64 ( publicKeyHash . getData ( ) ) ) ) ; } return keyHash ; }", "testMethod": "testRemoveByIdNullKey ( ) { org . kaaproject . kaa . common . dto . EndpointProfileDto expected = generateEndpointProfile ( null , null , null , null ) ; org . kaaproject . kaa . server . common . dao . model . EndpointProfile found = endpointProfileDao . findByKeyHash ( expected . getEndpointKeyHash ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( found )", "total": "testRemoveByIdNullKey ( ) { org . kaaproject . kaa . common . dto . EndpointProfileDto expected = generateEndpointProfile ( null , null , null , null ) ; org . kaaproject . kaa . server . common . dao . model . EndpointProfile found = endpointProfileDao . findByKeyHash ( expected . getEndpointKeyHash ( ) ) ; \"<AssertPlaceHolder>\" ; } getEndpointKeyHash ( ) { if ( ( keyHash ) == null ) { org . kaaproject . kaa . common . hash . EndpointObjectHash publicKeyHash = org . kaaproject . kaa . common . hash . EndpointObjectHash . fromSha1 ( getOrInitKeyPair ( isAutogeneratedKeys ) . getPublic ( ) . getEncoded ( ) ) ; keyHash = new org . kaaproject . kaa . client . event . EndpointKeyHash ( new java . lang . String ( base64 . encodeBase64 ( publicKeyHash . getData ( ) ) ) ) ; } return keyHash ; }", "answer": "org . junit . Assert . assertNotNull ( found )"}
{"focal": "viewPerson ( java . lang . String ) { checkProfileStatus ( orcid ) ; org . orcid . jaxb . model . v3 . release . record . Person person = personDetailsManagerReadOnly . getPublicPersonDetails ( orcid ) ; publicAPISecurityManagerV3 . filter ( person ) ; org . orcid . api . common . util . v3 . ElementUtils . setPathToPerson ( person , orcid ) ; org . orcid . core . version . impl . Api3_0LastModifiedDatesHelper . calculateLastModified ( person ) ; sourceUtilsReadOnly . setSourceName ( person ) ; return javax . ws . rs . core . Response . ok ( person ) . build ( ) ; }", "testMethod": "testFindPerson ( ) { javax . ws . rs . core . Response response = serviceDelegator . viewPerson ( ORCID ) ; \"<AssertPlaceHolder>\" ; org . orcid . jaxb . model . v3 . rc2 . record . Person person = ( ( org . orcid . jaxb . model . v3 . rc2 . record . Person ) ( response . getEntity ( ) ) ) ; validatePerson ( person ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testFindPerson ( ) { javax . ws . rs . core . Response response = serviceDelegator . viewPerson ( ORCID ) ; \"<AssertPlaceHolder>\" ; org . orcid . jaxb . model . v3 . rc2 . record . Person person = ( ( org . orcid . jaxb . model . v3 . rc2 . record . Person ) ( response . getEntity ( ) ) ) ; validatePerson ( person ) ; } viewPerson ( java . lang . String ) { checkProfileStatus ( orcid ) ; org . orcid . jaxb . model . v3 . release . record . Person person = personDetailsManagerReadOnly . getPublicPersonDetails ( orcid ) ; publicAPISecurityManagerV3 . filter ( person ) ; org . orcid . api . common . util . v3 . ElementUtils . setPathToPerson ( person , orcid ) ; org . orcid . core . version . impl . Api3_0LastModifiedDatesHelper . calculateLastModified ( person ) ; sourceUtilsReadOnly . setSourceName ( person ) ; return javax . ws . rs . core . Response . ok ( person ) . build ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "getInstance ( org . nuxeo . ecm . core . io . registry . context . RenderingContext ) { org . nuxeo . ecm . core . io . registry . context . RenderingContext realCtx = getRealContext ( ctx ) ; switch ( instantiation ) { case SINGLETON : return ( ( T ) ( getSingletonInstance ( realCtx ) ) ) ; case PER_THREAD : return ( ( T ) ( getThreadInstance ( realCtx ) ) ) ; case EACH_TIME : return ( ( T ) ( getNewInstance ( realCtx , false ) ) ) ; default : throw new org . nuxeo . ecm . core . api . NuxeoException ( ( \"unable<sp>to<sp>create<sp>a<sp>marshaller<sp>instance<sp>for<sp>clazz<sp>\" + ( clazz . getName ( ) ) ) ) ; } }", "testMethod": "injectService ( ) { org . nuxeo . ecm . core . io . registry . reflect . MarshallerInspector inspector = new org . nuxeo . ecm . core . io . registry . reflect . MarshallerInspector ( org . nuxeo . ecm . core . io . registry . reflect . TestServiceInjection . SimpleServiceMarshaller . class ) ; org . nuxeo . ecm . core . io . registry . reflect . TestServiceInjection . SimpleServiceMarshaller instance = inspector . getInstance ( ctx ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance . service )", "total": "injectService ( ) { org . nuxeo . ecm . core . io . registry . reflect . MarshallerInspector inspector = new org . nuxeo . ecm . core . io . registry . reflect . MarshallerInspector ( org . nuxeo . ecm . core . io . registry . reflect . TestServiceInjection . SimpleServiceMarshaller . class ) ; org . nuxeo . ecm . core . io . registry . reflect . TestServiceInjection . SimpleServiceMarshaller instance = inspector . getInstance ( ctx ) ; \"<AssertPlaceHolder>\" ; } getInstance ( org . nuxeo . ecm . core . io . registry . context . RenderingContext ) { org . nuxeo . ecm . core . io . registry . context . RenderingContext realCtx = getRealContext ( ctx ) ; switch ( instantiation ) { case SINGLETON : return ( ( T ) ( getSingletonInstance ( realCtx ) ) ) ; case PER_THREAD : return ( ( T ) ( getThreadInstance ( realCtx ) ) ) ; case EACH_TIME : return ( ( T ) ( getNewInstance ( realCtx , false ) ) ) ; default : throw new org . nuxeo . ecm . core . api . NuxeoException ( ( \"unable<sp>to<sp>create<sp>a<sp>marshaller<sp>instance<sp>for<sp>clazz<sp>\" + ( clazz . getName ( ) ) ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( instance . service )"}
{"focal": "getValue ( ) { return value ; }", "testMethod": "test2 ( ) { final io . vertigo . dynamo . plugins . environment . dsl . dynamic . DslDefinition dslDefinition = new io . vertigo . dynamo . plugins . environment . loaders . kpr . rules . DslDynamicDefinitionRule ( \"create\" , dslDefinitionRepository . getGrammar ( ) ) . parse ( \"create<sp>Domain<sp>DO_CODE_POSTAL<sp>{<sp>dataType<sp>:<sp>String<sp>,<sp>formatter:FMT_DEFAULT,<sp>constraint<sp>:<sp>[<sp>CK_CODE_POSTAL<sp>]<sp>}<sp>\" , 0 ) . getValue ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dslDefinition )", "total": "test2 ( ) { final io . vertigo . dynamo . plugins . environment . dsl . dynamic . DslDefinition dslDefinition = new io . vertigo . dynamo . plugins . environment . loaders . kpr . rules . DslDynamicDefinitionRule ( \"create\" , dslDefinitionRepository . getGrammar ( ) ) . parse ( \"create<sp>Domain<sp>DO_CODE_POSTAL<sp>{<sp>dataType<sp>:<sp>String<sp>,<sp>formatter:FMT_DEFAULT,<sp>constraint<sp>:<sp>[<sp>CK_CODE_POSTAL<sp>]<sp>}<sp>\" , 0 ) . getValue ( ) ; \"<AssertPlaceHolder>\" ; } getValue ( ) { return value ; }", "answer": "org . junit . Assert . assertNotNull ( dslDefinition )"}
{"focal": "newCanvasCommand ( org . kie . workbench . common . stunner . core . client . canvas . AbstractCanvasHandler ) { return new org . kie . workbench . common . dmn . client . commands . factory . canvas . SetComponentWidthCanvasCommand ( uiColumn , oldWidth , width ) ; }", "testMethod": "testGetCanvasCommand ( ) { final org . kie . workbench . common . stunner . core . client . canvas . command . ClearCanvasCommand canvasCommand = ( ( org . kie . workbench . common . stunner . core . client . canvas . command . ClearCanvasCommand ) ( tested . newCanvasCommand ( canvasHandler ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( canvasCommand )", "total": "testGetCanvasCommand ( ) { final org . kie . workbench . common . stunner . core . client . canvas . command . ClearCanvasCommand canvasCommand = ( ( org . kie . workbench . common . stunner . core . client . canvas . command . ClearCanvasCommand ) ( tested . newCanvasCommand ( canvasHandler ) ) ) ; \"<AssertPlaceHolder>\" ; } newCanvasCommand ( org . kie . workbench . common . stunner . core . client . canvas . AbstractCanvasHandler ) { return new org . kie . workbench . common . dmn . client . commands . factory . canvas . SetComponentWidthCanvasCommand ( uiColumn , oldWidth , width ) ; }", "answer": "org . junit . Assert . assertNotNull ( canvasCommand )"}
{"focal": "getClassLoader ( ) { if ( ! ( isInUse ( ) ) ) { return null ; } if ( ( revision ) instanceof org . eclipse . concierge . BundleImpl . Revision ) { return ( ( org . eclipse . concierge . BundleImpl . Revision ) ( revision ) ) . classloader ; } else { return null ; } }", "testMethod": "testFilterFullClassName ( ) { java . lang . ClassLoader cl = new org . eclipse . concierge . test . util . FilteredClassLoader ( this . getClass ( ) . getClassLoader ( ) , \"org.w3c.dom.Document\" ) ; java . lang . Class < ? > clsFound = java . lang . Class . forName ( \"java.lang.Object\" , false , cl ) ; \"<AssertPlaceHolder>\" ; try { java . lang . Class . forName ( \"org.w3c.dom.Document\" , false , cl ) ; org . junit . Assert . fail ( \"Uups,<sp>ClassNotFoundException<sp>expected\" ) ; } catch ( java . lang . ClassNotFoundException expected ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( clsFound )", "total": "testFilterFullClassName ( ) { java . lang . ClassLoader cl = new org . eclipse . concierge . test . util . FilteredClassLoader ( this . getClass ( ) . getClassLoader ( ) , \"org.w3c.dom.Document\" ) ; java . lang . Class < ? > clsFound = java . lang . Class . forName ( \"java.lang.Object\" , false , cl ) ; \"<AssertPlaceHolder>\" ; try { java . lang . Class . forName ( \"org.w3c.dom.Document\" , false , cl ) ; org . junit . Assert . fail ( \"Uups,<sp>ClassNotFoundException<sp>expected\" ) ; } catch ( java . lang . ClassNotFoundException expected ) { } } getClassLoader ( ) { if ( ! ( isInUse ( ) ) ) { return null ; } if ( ( revision ) instanceof org . eclipse . concierge . BundleImpl . Revision ) { return ( ( org . eclipse . concierge . BundleImpl . Revision ) ( revision ) ) . classloader ; } else { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( clsFound )"}
{"focal": "getKeyFingerPrintCalculator ( ) { return keyFingerPrintCalculator ; }", "testMethod": "getKeyFingerPrintCalculator_returnsSomething ( ) { final name . neuhalfen . projects . crypto . bouncycastle . openpgp . keys . keyrings . InMemoryKeyring sut = new name . neuhalfen . projects . crypto . bouncycastle . openpgp . keys . keyrings . InMemoryKeyring ( mock ( name . neuhalfen . projects . crypto . bouncycastle . openpgp . keys . callbacks . KeyringConfigCallback . class ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( sut . getKeyFingerPrintCalculator ( ) )", "total": "getKeyFingerPrintCalculator_returnsSomething ( ) { final name . neuhalfen . projects . crypto . bouncycastle . openpgp . keys . keyrings . InMemoryKeyring sut = new name . neuhalfen . projects . crypto . bouncycastle . openpgp . keys . keyrings . InMemoryKeyring ( mock ( name . neuhalfen . projects . crypto . bouncycastle . openpgp . keys . callbacks . KeyringConfigCallback . class ) ) ; \"<AssertPlaceHolder>\" ; } getKeyFingerPrintCalculator ( ) { return keyFingerPrintCalculator ; }", "answer": "org . junit . Assert . assertNotNull ( sut . getKeyFingerPrintCalculator ( ) )"}
{"focal": "getCacheKey ( ) { if ( com . netflix . hystrix . strategy . concurrency . HystrixRequestContext . isCurrentThreadInitialized ( ) ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( this . getCommandGroup ( ) . name ( ) ) ; sb . append ( \"-\" ) ; sb . append ( this . getCommandKey ( ) . name ( ) ) ; return sb . toString ( ) ; } else { return super . getCacheKey ( ) ; } }", "testMethod": "testGetCacheKeyWithContextInitializedConsumer ( ) { org . apache . servicecomb . core . Invocation invocation = org . mockito . Mockito . mock ( org . apache . servicecomb . core . Invocation . class ) ; org . mockito . Mockito . when ( invocation . getOperationMeta ( ) ) . thenReturn ( org . mockito . Mockito . mock ( org . apache . servicecomb . core . definition . OperationMeta . class ) ) ; org . mockito . Mockito . when ( invocation . getOperationMeta ( ) . getMicroserviceQualifiedName ( ) ) . thenReturn ( \"test1\" ) ; com . netflix . hystrix . HystrixCommandProperties . Setter setter = com . netflix . hystrix . HystrixCommandProperties . Setter ( ) . withRequestCacheEnabled ( true ) . withRequestLogEnabled ( false ) ; org . apache . servicecomb . bizkeeper . BizkeeperCommand bizkeeperCommand = new org . apache . servicecomb . bizkeeper . ConsumerBizkeeperCommand ( \"groupname\" , invocation , HystrixObservableCommand . Setter . withGroupKey ( org . apache . servicecomb . bizkeeper . CommandKey . toHystrixCommandGroupKey ( \"groupname\" , invocation ) ) . andCommandKey ( org . apache . servicecomb . bizkeeper . CommandKey . toHystrixCommandKey ( \"groupname\" , invocation ) ) . andCommandPropertiesDefaults ( setter ) ) ; com . netflix . hystrix . strategy . concurrency . HystrixRequestContext . initializeContext ( ) ; java . lang . String cacheKey = bizkeeperCommand . getCacheKey ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( cacheKey )", "total": "testGetCacheKeyWithContextInitializedConsumer ( ) { org . apache . servicecomb . core . Invocation invocation = org . mockito . Mockito . mock ( org . apache . servicecomb . core . Invocation . class ) ; org . mockito . Mockito . when ( invocation . getOperationMeta ( ) ) . thenReturn ( org . mockito . Mockito . mock ( org . apache . servicecomb . core . definition . OperationMeta . class ) ) ; org . mockito . Mockito . when ( invocation . getOperationMeta ( ) . getMicroserviceQualifiedName ( ) ) . thenReturn ( \"test1\" ) ; com . netflix . hystrix . HystrixCommandProperties . Setter setter = com . netflix . hystrix . HystrixCommandProperties . Setter ( ) . withRequestCacheEnabled ( true ) . withRequestLogEnabled ( false ) ; org . apache . servicecomb . bizkeeper . BizkeeperCommand bizkeeperCommand = new org . apache . servicecomb . bizkeeper . ConsumerBizkeeperCommand ( \"groupname\" , invocation , HystrixObservableCommand . Setter . withGroupKey ( org . apache . servicecomb . bizkeeper . CommandKey . toHystrixCommandGroupKey ( \"groupname\" , invocation ) ) . andCommandKey ( org . apache . servicecomb . bizkeeper . CommandKey . toHystrixCommandKey ( \"groupname\" , invocation ) ) . andCommandPropertiesDefaults ( setter ) ) ; com . netflix . hystrix . strategy . concurrency . HystrixRequestContext . initializeContext ( ) ; java . lang . String cacheKey = bizkeeperCommand . getCacheKey ( ) ; \"<AssertPlaceHolder>\" ; } getCacheKey ( ) { if ( com . netflix . hystrix . strategy . concurrency . HystrixRequestContext . isCurrentThreadInitialized ( ) ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( this . getCommandGroup ( ) . name ( ) ) ; sb . append ( \"-\" ) ; sb . append ( this . getCommandKey ( ) . name ( ) ) ; return sb . toString ( ) ; } else { return super . getCacheKey ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( cacheKey )"}
{"focal": "clone ( ) { org . xwiki . extension . job . plan . internal . DefaultExtensionPlanTree tree = new org . xwiki . extension . job . plan . internal . DefaultExtensionPlanTree ( ) ; for ( org . xwiki . extension . job . plan . ExtensionPlanNode node : this ) { tree . add ( ( ( org . xwiki . extension . job . plan . internal . DefaultExtensionPlanNode ) ( node ) ) . clone ( ) ) ; } return tree ; }", "testMethod": "testClone ( ) { org . xwiki . repository . UriBuilder uriBuilder = new org . xwiki . repository . UriBuilder ( \"http://base\" , \"{key}\" ) ; org . xwiki . repository . UriBuilder clonedUriBuilder = uriBuilder . clone ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( clonedUriBuilder )", "total": "testClone ( ) { org . xwiki . repository . UriBuilder uriBuilder = new org . xwiki . repository . UriBuilder ( \"http://base\" , \"{key}\" ) ; org . xwiki . repository . UriBuilder clonedUriBuilder = uriBuilder . clone ( ) ; \"<AssertPlaceHolder>\" ; } clone ( ) { org . xwiki . extension . job . plan . internal . DefaultExtensionPlanTree tree = new org . xwiki . extension . job . plan . internal . DefaultExtensionPlanTree ( ) ; for ( org . xwiki . extension . job . plan . ExtensionPlanNode node : this ) { tree . add ( ( ( org . xwiki . extension . job . plan . internal . DefaultExtensionPlanNode ) ( node ) ) . clone ( ) ) ; } return tree ; }", "answer": "org . junit . Assert . assertNotNull ( clonedUriBuilder )"}
{"focal": "getElementId ( ) { return elementId ; }", "testMethod": "setParameters_whenElementIdIsDefined_elementIdIsNotNull ( ) { java . util . Map < java . lang . String , java . lang . String > parametersMap = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; parametersMap . put ( ExtractElementDataModifier . PARAM_ELEMENT_ID , \"some_element_id\" ) ; extractElementDataModifier . setParameters ( parametersMap ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( extractElementDataModifier . getElementId ( ) )", "total": "setParameters_whenElementIdIsDefined_elementIdIsNotNull ( ) { java . util . Map < java . lang . String , java . lang . String > parametersMap = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; parametersMap . put ( ExtractElementDataModifier . PARAM_ELEMENT_ID , \"some_element_id\" ) ; extractElementDataModifier . setParameters ( parametersMap ) ; \"<AssertPlaceHolder>\" ; } getElementId ( ) { return elementId ; }", "answer": "org . junit . Assert . assertNotNull ( extractElementDataModifier . getElementId ( ) )"}
{"focal": "getInstanceMap ( java . util . SortedMap ) { java . util . SortedMap < java . lang . String , org . drools . workbench . screens . scenariosimulation . model . typedescriptor . FactModelTree > toReturn = new java . util . TreeMap ( ) ; if ( ( model ) != null ) { final org . drools . workbench . screens . scenariosimulation . model . SimulationDescriptor simulationDescriptor = model . getSimulation ( ) . getSimulationDescriptor ( ) ; simulationDescriptor . getUnmodifiableFactMappings ( ) . stream ( ) . filter ( ( factMapping ) -> ! ( java . util . Objects . equals ( FactMappingType . OTHER , factMapping . getExpressionIdentifier ( ) . getType ( ) ) ) ) . forEach ( ( factMapping ) -> { java . lang . String dataObjectName = factMapping . getFactIdentifier ( ) . getClassName ( ) ; if ( dataObjectName . contains ( \".\" ) ) { dataObjectName = dataObjectName . substring ( ( ( dataObjectName . lastIndexOf ( \".\" ) ) + 1 ) ) ; } final java . lang . String instanceName = factMapping . getFactAlias ( ) ; if ( ! ( instanceName . equals ( dataObjectName ) ) ) { final org . drools . workbench . screens . scenariosimulation . model . typedescriptor . FactModelTree factModelTree = sourceMap . get ( dataObjectName ) ; if ( factModelTree != null ) { toReturn . put ( instanceName , factModelTree ) ; } } } ) ; } return toReturn ; }", "testMethod": "getInstanceMap ( ) { org . drools . workbench . screens . scenariosimulation . model . typedescriptor . FactModelTree toPopulate = getFactModelTreeInner ( org . apache . commons . lang3 . RandomStringUtils . randomAlphabetic ( 3 ) ) ; final java . util . Map < java . lang . String , java . lang . String > simpleProperties = toPopulate . getSimpleProperties ( ) ; final java . util . Collection < java . lang . String > values = simpleProperties . values ( ) ; java . util . SortedMap < java . lang . String , org . drools . workbench . screens . scenariosimulation . model . typedescriptor . FactModelTree > factTypeFieldsMap = getFactTypeFieldsMapInner ( values ) ; java . util . SortedMap < java . lang . String , org . drools . workbench . screens . scenariosimulation . model . typedescriptor . FactModelTree > retrieved = dmoDataManagementStrategy . getInstanceMap ( factTypeFieldsMap ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( retrieved )", "total": "getInstanceMap ( ) { org . drools . workbench . screens . scenariosimulation . model . typedescriptor . FactModelTree toPopulate = getFactModelTreeInner ( org . apache . commons . lang3 . RandomStringUtils . randomAlphabetic ( 3 ) ) ; final java . util . Map < java . lang . String , java . lang . String > simpleProperties = toPopulate . getSimpleProperties ( ) ; final java . util . Collection < java . lang . String > values = simpleProperties . values ( ) ; java . util . SortedMap < java . lang . String , org . drools . workbench . screens . scenariosimulation . model . typedescriptor . FactModelTree > factTypeFieldsMap = getFactTypeFieldsMapInner ( values ) ; java . util . SortedMap < java . lang . String , org . drools . workbench . screens . scenariosimulation . model . typedescriptor . FactModelTree > retrieved = dmoDataManagementStrategy . getInstanceMap ( factTypeFieldsMap ) ; \"<AssertPlaceHolder>\" ; } getInstanceMap ( java . util . SortedMap ) { java . util . SortedMap < java . lang . String , org . drools . workbench . screens . scenariosimulation . model . typedescriptor . FactModelTree > toReturn = new java . util . TreeMap ( ) ; if ( ( model ) != null ) { final org . drools . workbench . screens . scenariosimulation . model . SimulationDescriptor simulationDescriptor = model . getSimulation ( ) . getSimulationDescriptor ( ) ; simulationDescriptor . getUnmodifiableFactMappings ( ) . stream ( ) . filter ( ( factMapping ) -> ! ( java . util . Objects . equals ( FactMappingType . OTHER , factMapping . getExpressionIdentifier ( ) . getType ( ) ) ) ) . forEach ( ( factMapping ) -> { java . lang . String dataObjectName = factMapping . getFactIdentifier ( ) . getClassName ( ) ; if ( dataObjectName . contains ( \".\" ) ) { dataObjectName = dataObjectName . substring ( ( ( dataObjectName . lastIndexOf ( \".\" ) ) + 1 ) ) ; } final java . lang . String instanceName = factMapping . getFactAlias ( ) ; if ( ! ( instanceName . equals ( dataObjectName ) ) ) { final org . drools . workbench . screens . scenariosimulation . model . typedescriptor . FactModelTree factModelTree = sourceMap . get ( dataObjectName ) ; if ( factModelTree != null ) { toReturn . put ( instanceName , factModelTree ) ; } } } ) ; } return toReturn ; }", "answer": "org . junit . Assert . assertNotNull ( retrieved )"}
{"focal": "getBrpPersoonslijst ( ) { return asBrpPersoonslijst ( leesUitBrpAntwoordType . getBrpPl ( ) ) ; }", "testMethod": "testBrpPersoonslijstGetter ( ) { final java . lang . String berichtOrigineel = org . apache . commons . io . IOUtils . toString ( nl . moderniseringgba . isc . esb . message . brp . impl . NotificatieVerzoekBerichtTest . class . getResourceAsStream ( \"erkenningVernietigingVerzoekBericht.xml\" ) ) ; final nl . moderniseringgba . isc . esb . message . brp . impl . ErkenningVernietigingVerzoekBericht erkenningVernietigingVerzoekBericht = ( ( nl . moderniseringgba . isc . esb . message . brp . impl . ErkenningVernietigingVerzoekBericht ) ( factory . getBericht ( berichtOrigineel ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( erkenningVernietigingVerzoekBericht . getBrpPersoonslijst ( ) )", "total": "testBrpPersoonslijstGetter ( ) { final java . lang . String berichtOrigineel = org . apache . commons . io . IOUtils . toString ( nl . moderniseringgba . isc . esb . message . brp . impl . NotificatieVerzoekBerichtTest . class . getResourceAsStream ( \"erkenningVernietigingVerzoekBericht.xml\" ) ) ; final nl . moderniseringgba . isc . esb . message . brp . impl . ErkenningVernietigingVerzoekBericht erkenningVernietigingVerzoekBericht = ( ( nl . moderniseringgba . isc . esb . message . brp . impl . ErkenningVernietigingVerzoekBericht ) ( factory . getBericht ( berichtOrigineel ) ) ) ; \"<AssertPlaceHolder>\" ; } getBrpPersoonslijst ( ) { return asBrpPersoonslijst ( leesUitBrpAntwoordType . getBrpPl ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( erkenningVernietigingVerzoekBericht . getBrpPersoonslijst ( ) )"}
{"focal": "parseScript ( java . lang . String ) { cfml . CFSCRIPTParser . ScriptBlockContext scriptStatement = null ; try { scriptStatement = fCfmlParser . parseScriptBlockContext ( script ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( ( \"whoops!<sp>\" + ( e . getMessage ( ) ) ) ) ; } return scriptStatement ; }", "testMethod": "testVoidFunctionComplex ( ) { java . lang . String script = \"public<sp>void<sp>function<sp>redirect(<sp>string<sp>action,<sp>string<sp>preserve<sp>=<sp>'none',<sp>string<sp>append<sp>=<sp>'none',<sp>string<sp>path<sp>=<sp>variables.magicBaseURL,<sp>string<sp>queryString<sp>=<sp>'',<sp>string<sp>statusCode<sp>=<sp>'302'<sp>)<sp>{<sp>}\" ; cfml . CFSCRIPTParser . ScriptBlockContext scriptStatement = parseScript ( script ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( scriptStatement )", "total": "testVoidFunctionComplex ( ) { java . lang . String script = \"public<sp>void<sp>function<sp>redirect(<sp>string<sp>action,<sp>string<sp>preserve<sp>=<sp>'none',<sp>string<sp>append<sp>=<sp>'none',<sp>string<sp>path<sp>=<sp>variables.magicBaseURL,<sp>string<sp>queryString<sp>=<sp>'',<sp>string<sp>statusCode<sp>=<sp>'302'<sp>)<sp>{<sp>}\" ; cfml . CFSCRIPTParser . ScriptBlockContext scriptStatement = parseScript ( script ) ; \"<AssertPlaceHolder>\" ; } parseScript ( java . lang . String ) { cfml . CFSCRIPTParser . ScriptBlockContext scriptStatement = null ; try { scriptStatement = fCfmlParser . parseScriptBlockContext ( script ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( ( \"whoops!<sp>\" + ( e . getMessage ( ) ) ) ) ; } return scriptStatement ; }", "answer": "org . junit . Assert . assertNotNull ( scriptStatement )"}
{"focal": "marshall ( java . lang . Object ) { return xstream . toXML ( objectInput ) ; }", "testMethod": "testJaxbMarshalling ( ) { final java . lang . String result = org . kie . server . api . model . DMNContextKSMarshallingTest . jaxbMarshaller . marshall ( org . kie . server . api . model . DMNContextKSMarshallingTest . BEAN ) ; \"<AssertPlaceHolder>\" ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . NAMESPACE_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . NAMESPACE ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . MODEL_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . MODEL_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_ID_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_ID ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_SERVICE_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_SERVICE_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_KEY_XPATH_JAXB , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_KEY ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_VALUE_XPATH_JAXB , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_VALUE ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testJaxbMarshalling ( ) { final java . lang . String result = org . kie . server . api . model . DMNContextKSMarshallingTest . jaxbMarshaller . marshall ( org . kie . server . api . model . DMNContextKSMarshallingTest . BEAN ) ; \"<AssertPlaceHolder>\" ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . NAMESPACE_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . NAMESPACE ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . MODEL_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . MODEL_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_ID_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_ID ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_SERVICE_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_SERVICE_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_KEY_XPATH_JAXB , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_KEY ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_VALUE_XPATH_JAXB , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_VALUE ) ; } marshall ( java . lang . Object ) { return xstream . toXML ( objectInput ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getResourceIRIString ( java . lang . String ) { return owltools . OWLToolsTestBasics . getResourceIRI ( name ) . toString ( ) ; }", "testMethod": "testParseCatalogXML4 ( ) { owltools . io . LocalMirrorIRIMapper m = new owltools . io . LocalMirrorIRIMapper ( \"src/test/resources/owl-mirror.txt\" ) ; owltools . io . ParserWrapper p = new owltools . io . ParserWrapper ( ) ; p . addIRIMapper ( m ) ; if ( owltools . io . LocalMirrorIRIMapperTest . verbose ) { p . manager . addOntologyLoaderListener ( new owltools . io . LocalMirrorIRIMapperTest . PrintingOntologLoaderListener ( ) ) ; } org . semanticweb . owlapi . model . OWLOntology owlOntology = p . parse ( getResourceIRIString ( \"mutual-import-1.owl\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( owlOntology )", "total": "testParseCatalogXML4 ( ) { owltools . io . LocalMirrorIRIMapper m = new owltools . io . LocalMirrorIRIMapper ( \"src/test/resources/owl-mirror.txt\" ) ; owltools . io . ParserWrapper p = new owltools . io . ParserWrapper ( ) ; p . addIRIMapper ( m ) ; if ( owltools . io . LocalMirrorIRIMapperTest . verbose ) { p . manager . addOntologyLoaderListener ( new owltools . io . LocalMirrorIRIMapperTest . PrintingOntologLoaderListener ( ) ) ; } org . semanticweb . owlapi . model . OWLOntology owlOntology = p . parse ( getResourceIRIString ( \"mutual-import-1.owl\" ) ) ; \"<AssertPlaceHolder>\" ; } getResourceIRIString ( java . lang . String ) { return owltools . OWLToolsTestBasics . getResourceIRI ( name ) . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( owlOntology )"}
{"focal": "searchCollectionsAndDataObjectsBasedOnName ( java . lang . String ) { org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImpl . log . info ( \"searchCollectionsAndDataObjectsBasedOnName<sp>for<sp>search<sp>term:{},<sp>starting<sp>with<sp>collections\" , searchTerm ) ; final java . util . List < org . irods . jargon . core . query . CollectionAndDataObjectListingEntry > entries = searchCollectionsBasedOnName ( searchTerm ) ; org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImpl . log . info ( \"adding<sp>data<sp>objects<sp>to<sp>search<sp>results\" ) ; final java . util . List < org . irods . jargon . core . query . CollectionAndDataObjectListingEntry > dataObjectEntries = searchDataObjectsBasedOnName ( searchTerm ) ; for ( final org . irods . jargon . core . query . CollectionAndDataObjectListingEntry entry : dataObjectEntries ) { entries . add ( entry ) ; } return entries ; }", "testMethod": "testSearchCollectionsAndDataObjects ( ) { java . lang . String subdirPrefix = \"testSearchCollectionsAndDataObjectsSubdir\" ; java . lang . String searchTerm = \"testSearchCollectionsAndDataObjectsAndThisIsAPrettyUniqueSearchNameTooTerm\" ; org . irods . jargon . core . connection . IRODSAccount irodsAccount = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . testingPropertiesHelper . buildIRODSAccountFromTestProperties ( org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . testingProperties ) ; java . lang . String targetIrodsCollection = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . testingPropertiesHelper . buildIRODSCollectionAbsolutePathFromTestProperties ( org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . testingProperties , ( ( ( org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . IRODS_TEST_SUBDIR_PATH ) + \"/\" ) + subdirPrefix ) ) ; org . irods . jargon . core . pub . io . IRODSFile irodsFile = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFile ( targetIrodsCollection ) ; irodsFile . mkdir ( ) ; java . lang . String absPath = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . scratchFileUtils . createAndReturnAbsoluteScratchPath ( org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . IRODS_TEST_SUBDIR_PATH ) ; java . lang . String localFileName = org . irods . jargon . testutils . filemanip . FileGenerator . generateFileOfFixedLengthGivenName ( absPath , ( searchTerm + \"testv1.txt\" ) , 1 ) ; irodsFile = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFile ( targetIrodsCollection ) ; irodsFile . mkdir ( ) ; java . io . File localFile = new java . io . File ( localFileName ) ; org . irods . jargon . core . pub . DataObjectAOImpl dataObjectAO = ( ( org . irods . jargon . core . pub . DataObjectAOImpl ) ( org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSAccessObjectFactory ( ) . getDataObjectAO ( irodsAccount ) ) ) ; dataObjectAO . putLocalDataObjectToIRODS ( localFile , irodsFile , true ) ; localFileName = org . irods . jargon . testutils . filemanip . FileGenerator . generateFileOfFixedLengthGivenName ( absPath , ( ( \"someSortOfPrefix\" + searchTerm ) + \"testv1.txt\" ) , 1 ) ; localFile = new java . io . File ( localFileName ) ; dataObjectAO . putLocalDataObjectToIRODS ( localFile , irodsFile , true ) ; irodsFile = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFile ( ( ( targetIrodsCollection + \"/\" ) + searchTerm ) ) ; irodsFile . mkdir ( ) ; irodsFile = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFile ( ( ( ( ( irodsFile . getAbsolutePath ( ) ) + \"/\" ) + searchTerm ) + \"somethingElseToo\" ) ) ; irodsFile . mkdir ( ) ; org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAO actual = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSAccessObjectFactory ( ) . getCollectionAndDataObjectListAndSearchAO ( irodsAccount ) ; java . util . List < org . irods . jargon . core . query . CollectionAndDataObjectListingEntry > entries = actual . searchCollectionsAndDataObjectsBasedOnName ( searchTerm ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entries )", "total": "testSearchCollectionsAndDataObjects ( ) { java . lang . String subdirPrefix = \"testSearchCollectionsAndDataObjectsSubdir\" ; java . lang . String searchTerm = \"testSearchCollectionsAndDataObjectsAndThisIsAPrettyUniqueSearchNameTooTerm\" ; org . irods . jargon . core . connection . IRODSAccount irodsAccount = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . testingPropertiesHelper . buildIRODSAccountFromTestProperties ( org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . testingProperties ) ; java . lang . String targetIrodsCollection = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . testingPropertiesHelper . buildIRODSCollectionAbsolutePathFromTestProperties ( org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . testingProperties , ( ( ( org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . IRODS_TEST_SUBDIR_PATH ) + \"/\" ) + subdirPrefix ) ) ; org . irods . jargon . core . pub . io . IRODSFile irodsFile = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFile ( targetIrodsCollection ) ; irodsFile . mkdir ( ) ; java . lang . String absPath = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . scratchFileUtils . createAndReturnAbsoluteScratchPath ( org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . IRODS_TEST_SUBDIR_PATH ) ; java . lang . String localFileName = org . irods . jargon . testutils . filemanip . FileGenerator . generateFileOfFixedLengthGivenName ( absPath , ( searchTerm + \"testv1.txt\" ) , 1 ) ; irodsFile = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFile ( targetIrodsCollection ) ; irodsFile . mkdir ( ) ; java . io . File localFile = new java . io . File ( localFileName ) ; org . irods . jargon . core . pub . DataObjectAOImpl dataObjectAO = ( ( org . irods . jargon . core . pub . DataObjectAOImpl ) ( org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSAccessObjectFactory ( ) . getDataObjectAO ( irodsAccount ) ) ) ; dataObjectAO . putLocalDataObjectToIRODS ( localFile , irodsFile , true ) ; localFileName = org . irods . jargon . testutils . filemanip . FileGenerator . generateFileOfFixedLengthGivenName ( absPath , ( ( \"someSortOfPrefix\" + searchTerm ) + \"testv1.txt\" ) , 1 ) ; localFile = new java . io . File ( localFileName ) ; dataObjectAO . putLocalDataObjectToIRODS ( localFile , irodsFile , true ) ; irodsFile = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFile ( ( ( targetIrodsCollection + \"/\" ) + searchTerm ) ) ; irodsFile . mkdir ( ) ; irodsFile = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSFileFactory ( irodsAccount ) . instanceIRODSFile ( ( ( ( ( irodsFile . getAbsolutePath ( ) ) + \"/\" ) + searchTerm ) + \"somethingElseToo\" ) ) ; irodsFile . mkdir ( ) ; org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAO actual = org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImplTest . irodsFileSystem . getIRODSAccessObjectFactory ( ) . getCollectionAndDataObjectListAndSearchAO ( irodsAccount ) ; java . util . List < org . irods . jargon . core . query . CollectionAndDataObjectListingEntry > entries = actual . searchCollectionsAndDataObjectsBasedOnName ( searchTerm ) ; \"<AssertPlaceHolder>\" ; } searchCollectionsAndDataObjectsBasedOnName ( java . lang . String ) { org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImpl . log . info ( \"searchCollectionsAndDataObjectsBasedOnName<sp>for<sp>search<sp>term:{},<sp>starting<sp>with<sp>collections\" , searchTerm ) ; final java . util . List < org . irods . jargon . core . query . CollectionAndDataObjectListingEntry > entries = searchCollectionsBasedOnName ( searchTerm ) ; org . irods . jargon . core . pub . CollectionAndDataObjectListAndSearchAOImpl . log . info ( \"adding<sp>data<sp>objects<sp>to<sp>search<sp>results\" ) ; final java . util . List < org . irods . jargon . core . query . CollectionAndDataObjectListingEntry > dataObjectEntries = searchDataObjectsBasedOnName ( searchTerm ) ; for ( final org . irods . jargon . core . query . CollectionAndDataObjectListingEntry entry : dataObjectEntries ) { entries . add ( entry ) ; } return entries ; }", "answer": "org . junit . Assert . assertNotNull ( entries )"}
{"focal": "get ( java . lang . Object ) { return getDynamicProperties ( ) . get ( key ) ; }", "testMethod": "meTokenPost ( ) { org . apache . usergrid . rest . management . Map < java . lang . String , java . lang . String > payload = hashMap ( \"grant_type\" , \"password\" ) . map ( \"username\" , clientSetup . getUsername ( ) ) . map ( \"password\" , clientSetup . getPassword ( ) ) ; com . fasterxml . jackson . databind . JsonNode node = management . me ( ) . post ( com . fasterxml . jackson . databind . JsonNode . class , payload ) ; org . apache . usergrid . rest . management . ManagementResourceIT . logger . info ( \"node:\" , node ) ; java . lang . String token = node . get ( \"access_token\" ) . textValue ( ) ; \"<AssertPlaceHolder>\" ; node = management . me ( ) . get ( com . fasterxml . jackson . databind . JsonNode . class ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( token )", "total": "meTokenPost ( ) { org . apache . usergrid . rest . management . Map < java . lang . String , java . lang . String > payload = hashMap ( \"grant_type\" , \"password\" ) . map ( \"username\" , clientSetup . getUsername ( ) ) . map ( \"password\" , clientSetup . getPassword ( ) ) ; com . fasterxml . jackson . databind . JsonNode node = management . me ( ) . post ( com . fasterxml . jackson . databind . JsonNode . class , payload ) ; org . apache . usergrid . rest . management . ManagementResourceIT . logger . info ( \"node:\" , node ) ; java . lang . String token = node . get ( \"access_token\" ) . textValue ( ) ; \"<AssertPlaceHolder>\" ; node = management . me ( ) . get ( com . fasterxml . jackson . databind . JsonNode . class ) ; } get ( java . lang . Object ) { return getDynamicProperties ( ) . get ( key ) ; }", "answer": "org . junit . Assert . assertNotNull ( token )"}
{"focal": "getBuilder ( ) { return org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ; }", "testMethod": "testNewIsotope_int_String_int_double_double ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . AbstractChemObjectBuilderTest . rootObject . getBuilder ( ) ; org . openscience . cdk . interfaces . IIsotope isotope = builder . newInstance ( org . openscience . cdk . interfaces . IIsotope . class , 6 , \"C\" , 13 , 1.0 , 1.0 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( isotope )", "total": "testNewIsotope_int_String_int_double_double ( ) { org . openscience . cdk . interfaces . IChemObjectBuilder builder = org . openscience . cdk . AbstractChemObjectBuilderTest . rootObject . getBuilder ( ) ; org . openscience . cdk . interfaces . IIsotope isotope = builder . newInstance ( org . openscience . cdk . interfaces . IIsotope . class , 6 , \"C\" , 13 , 1.0 , 1.0 ) ; \"<AssertPlaceHolder>\" ; } getBuilder ( ) { return org . openscience . cdk . DefaultChemObjectBuilder . getInstance ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( isotope )"}
{"focal": "getDataSetDefinition ( ) { return new net . sourceforge . squirrel_sql . fw . datasetviewer . DataSetDefinition ( new net . sourceforge . squirrel_sql . fw . datasetviewer . ColumnDisplayDefinition [ 0 ] ) ; }", "testMethod": "testGetDataSetDefinition ( ) { mockHelper . replayAll ( ) ; classUnderTest . setTableInfo ( mockTableInfo ) ; \"<AssertPlaceHolder>\" ; mockHelper . verifyAll ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( classUnderTest . getDataSetDefinition ( ) )", "total": "testGetDataSetDefinition ( ) { mockHelper . replayAll ( ) ; classUnderTest . setTableInfo ( mockTableInfo ) ; \"<AssertPlaceHolder>\" ; mockHelper . verifyAll ( ) ; } getDataSetDefinition ( ) { return new net . sourceforge . squirrel_sql . fw . datasetviewer . DataSetDefinition ( new net . sourceforge . squirrel_sql . fw . datasetviewer . ColumnDisplayDefinition [ 0 ] ) ; }", "answer": "org . junit . Assert . assertNotNull ( classUnderTest . getDataSetDefinition ( ) )"}
{"focal": "get ( java . lang . Object ) { java . security . Provider p = getProvider ( ) ; if ( p != null ) { return p . get ( key ) ; } else { return null ; } }", "testMethod": "testSignatureDirectReference ( ) { org . w3c . dom . Document doc = org . apache . wss4j . dom . common . SOAPUtil . toSOAPPart ( SOAPUtil . SAMPLE_SOAP_MSG ) ; org . apache . wss4j . dom . message . WSSecHeader secHeader = new org . apache . wss4j . dom . message . WSSecHeader ( doc ) ; secHeader . insertSecurityHeader ( ) ; org . apache . wss4j . dom . message . WSSecSignature sign = new org . apache . wss4j . dom . message . WSSecSignature ( secHeader ) ; sign . setUserInfo ( \"wss40\" , \"security\" ) ; sign . setKeyIdentifierType ( WSConstants . BST_DIRECT_REFERENCE ) ; org . w3c . dom . Document signedDoc = sign . build ( senderCrypto ) ; if ( org . apache . wss4j . dom . components . crypto . CertificateStoreTest . LOG . isDebugEnabled ( ) ) { java . lang . String outputString = org . apache . wss4j . common . util . XMLUtils . prettyDocumentToString ( signedDoc ) ; org . apache . wss4j . dom . components . crypto . CertificateStoreTest . LOG . debug ( outputString ) ; } org . apache . wss4j . dom . handler . WSHandlerResult results = verify ( signedDoc , receiverCrypto ) ; java . util . List < org . apache . wss4j . dom . engine . WSSecurityEngineResult > signatureResults = results . getActionResults ( ) . get ( WSConstants . SIGN ) ; org . apache . wss4j . dom . engine . WSSecurityEngineResult result = signatureResults . get ( 0 ) ; java . security . cert . X509Certificate cert = ( ( java . security . cert . X509Certificate ) ( result . get ( WSSecurityEngineResult . TAG_X509_CERTIFICATE ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( cert )", "total": "testSignatureDirectReference ( ) { org . w3c . dom . Document doc = org . apache . wss4j . dom . common . SOAPUtil . toSOAPPart ( SOAPUtil . SAMPLE_SOAP_MSG ) ; org . apache . wss4j . dom . message . WSSecHeader secHeader = new org . apache . wss4j . dom . message . WSSecHeader ( doc ) ; secHeader . insertSecurityHeader ( ) ; org . apache . wss4j . dom . message . WSSecSignature sign = new org . apache . wss4j . dom . message . WSSecSignature ( secHeader ) ; sign . setUserInfo ( \"wss40\" , \"security\" ) ; sign . setKeyIdentifierType ( WSConstants . BST_DIRECT_REFERENCE ) ; org . w3c . dom . Document signedDoc = sign . build ( senderCrypto ) ; if ( org . apache . wss4j . dom . components . crypto . CertificateStoreTest . LOG . isDebugEnabled ( ) ) { java . lang . String outputString = org . apache . wss4j . common . util . XMLUtils . prettyDocumentToString ( signedDoc ) ; org . apache . wss4j . dom . components . crypto . CertificateStoreTest . LOG . debug ( outputString ) ; } org . apache . wss4j . dom . handler . WSHandlerResult results = verify ( signedDoc , receiverCrypto ) ; java . util . List < org . apache . wss4j . dom . engine . WSSecurityEngineResult > signatureResults = results . getActionResults ( ) . get ( WSConstants . SIGN ) ; org . apache . wss4j . dom . engine . WSSecurityEngineResult result = signatureResults . get ( 0 ) ; java . security . cert . X509Certificate cert = ( ( java . security . cert . X509Certificate ) ( result . get ( WSSecurityEngineResult . TAG_X509_CERTIFICATE ) ) ) ; \"<AssertPlaceHolder>\" ; } get ( java . lang . Object ) { java . security . Provider p = getProvider ( ) ; if ( p != null ) { return p . get ( key ) ; } else { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( cert )"}
{"focal": "get ( java . util . concurrent . CompletionStage ) { return future . toCompletableFuture ( ) . get ( ) ; }", "testMethod": "testRetryableError ( ) { when ( mockLowLevelRequest . execute ( ) ) . thenReturn ( mockLowLevelResponse ) . thenReturn ( mockLowLevelResponse ) . thenReturn ( mockLowLevelResponse ) ; when ( mockLowLevelResponse . getStatusCode ( ) ) . thenReturn ( 503 ) . thenReturn ( 429 ) . thenReturn ( 200 ) ; com . google . api . services . storage . Storage . Buckets . Get result = storage . buckets ( ) . get ( \"test\" ) ; com . google . api . client . http . HttpResponse response = result . executeUnparsed ( ) ; \"<AssertPlaceHolder>\" ; verify ( mockHttpResponseInterceptor ) . interceptResponse ( any ( com . google . api . client . http . HttpResponse . class ) ) ; verify ( mockLowLevelRequest , atLeastOnce ( ) ) . addHeader ( anyString ( ) , anyString ( ) ) ; verify ( mockLowLevelRequest , times ( 3 ) ) . setTimeout ( anyInt ( ) , anyInt ( ) ) ; verify ( mockLowLevelRequest , times ( 3 ) ) . setWriteTimeout ( anyInt ( ) ) ; verify ( mockLowLevelRequest , times ( 3 ) ) . execute ( ) ; verify ( mockLowLevelResponse , times ( 3 ) ) . getStatusCode ( ) ; expectedLogs . verifyDebug ( \"Request<sp>failed<sp>with<sp>code<sp>503\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testRetryableError ( ) { when ( mockLowLevelRequest . execute ( ) ) . thenReturn ( mockLowLevelResponse ) . thenReturn ( mockLowLevelResponse ) . thenReturn ( mockLowLevelResponse ) ; when ( mockLowLevelResponse . getStatusCode ( ) ) . thenReturn ( 503 ) . thenReturn ( 429 ) . thenReturn ( 200 ) ; com . google . api . services . storage . Storage . Buckets . Get result = storage . buckets ( ) . get ( \"test\" ) ; com . google . api . client . http . HttpResponse response = result . executeUnparsed ( ) ; \"<AssertPlaceHolder>\" ; verify ( mockHttpResponseInterceptor ) . interceptResponse ( any ( com . google . api . client . http . HttpResponse . class ) ) ; verify ( mockLowLevelRequest , atLeastOnce ( ) ) . addHeader ( anyString ( ) , anyString ( ) ) ; verify ( mockLowLevelRequest , times ( 3 ) ) . setTimeout ( anyInt ( ) , anyInt ( ) ) ; verify ( mockLowLevelRequest , times ( 3 ) ) . setWriteTimeout ( anyInt ( ) ) ; verify ( mockLowLevelRequest , times ( 3 ) ) . execute ( ) ; verify ( mockLowLevelResponse , times ( 3 ) ) . getStatusCode ( ) ; expectedLogs . verifyDebug ( \"Request<sp>failed<sp>with<sp>code<sp>503\" ) ; } get ( java . util . concurrent . CompletionStage ) { return future . toCompletableFuture ( ) . get ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "createConnectionProfile ( java . lang . String , java . lang . String , java . lang . String , java . util . Properties ) { if ( ( this . connectionProfileFactory ) == null ) { this . connectionProfileFactory = new org . teiid . designer . datatools . connection . ConnectionProfileFactory ( ) ; } return this . connectionProfileFactory . createConnectionProfile ( name , description , id , props ) ; }", "testMethod": "shouldCreateConnectionProfile ( ) { when ( connectionProfileFactory . createConnectionProfile ( org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_NAME_VALUE , org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_DESC_VALUE , org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_PROVIDER_ID_VALUE , connectionProps ) ) . thenReturn ( connectionProfile ) ; org . eclipse . datatools . connectivity . IConnectionProfile profile = helper . createConnectionProfile ( org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_NAME_VALUE , org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_DESC_VALUE , org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_PROVIDER_ID_VALUE , connectionProps ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( profile )", "total": "shouldCreateConnectionProfile ( ) { when ( connectionProfileFactory . createConnectionProfile ( org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_NAME_VALUE , org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_DESC_VALUE , org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_PROVIDER_ID_VALUE , connectionProps ) ) . thenReturn ( connectionProfile ) ; org . eclipse . datatools . connectivity . IConnectionProfile profile = helper . createConnectionProfile ( org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_NAME_VALUE , org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_DESC_VALUE , org . teiid . designer . runtime . connection . ConnectionInfoHelperTest . CP_PROVIDER_ID_VALUE , connectionProps ) ; \"<AssertPlaceHolder>\" ; } createConnectionProfile ( java . lang . String , java . lang . String , java . lang . String , java . util . Properties ) { if ( ( this . connectionProfileFactory ) == null ) { this . connectionProfileFactory = new org . teiid . designer . datatools . connection . ConnectionProfileFactory ( ) ; } return this . connectionProfileFactory . createConnectionProfile ( name , description , id , props ) ; }", "answer": "org . junit . Assert . assertNotNull ( profile )"}
{"focal": "validateLogin ( java . lang . String , java . lang . String ) { return this . loginAuthenticator . validateLogin ( username , net . jforum . util . MD5 . hash ( password ) , null ) ; }", "testMethod": "validateLoginUsingGoodCredentialsExpectsSuccess ( ) { net . jforum . entities . User user = new net . jforum . entities . User ( ) ; user . setUsername ( \"username2\" ) ; user . setPassword ( \"password2\" ) ; net . jforum . repository . UserRepository dao = this . newDao ( ) ; this . insert ( user , dao ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dao . validateLogin ( \"username2\" , \"password2\" ) )", "total": "validateLoginUsingGoodCredentialsExpectsSuccess ( ) { net . jforum . entities . User user = new net . jforum . entities . User ( ) ; user . setUsername ( \"username2\" ) ; user . setPassword ( \"password2\" ) ; net . jforum . repository . UserRepository dao = this . newDao ( ) ; this . insert ( user , dao ) ; \"<AssertPlaceHolder>\" ; } validateLogin ( java . lang . String , java . lang . String ) { return this . loginAuthenticator . validateLogin ( username , net . jforum . util . MD5 . hash ( password ) , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( dao . validateLogin ( \"username2\" , \"password2\" ) )"}
{"focal": "getCompareEditorForFileInGitChangeSet ( java . lang . String , boolean ) { org . eclipse . swtbot . swt . finder . widgets . SWTBotTreeItem changeSetTreeItem = getChangeSetTreeItem ( ) ; org . eclipse . swtbot . swt . finder . widgets . SWTBotTreeItem rootTree ; if ( includeLocalChanges ) rootTree = waitForNodeWithText ( changeSetTreeItem , org . eclipse . egit . ui . view . synchronize . GitModelWorkingTree_workingTree ) ; else rootTree = waitForNodeWithText ( changeSetTreeItem , org . eclipse . egit . ui . view . synchronize . TEST_COMMIT_MSG ) ; org . eclipse . swtbot . swt . finder . widgets . SWTBotTreeItem projNode = waitForNodeWithText ( rootTree , org . eclipse . egit . ui . view . synchronize . PROJ1 ) ; return getCompareEditor ( projNode , fileName ) ; }", "testMethod": "shouldOpenCompareEditor ( ) { changeFilesInProject ( ) ; launchSynchronization ( org . eclipse . egit . ui . view . synchronize . HEAD , org . eclipse . egit . ui . view . synchronize . INITIAL_TAG , true ) ; org . eclipse . egit . ui . common . CompareEditorTester compare = getCompareEditorForFileInGitChangeSet ( org . eclipse . egit . ui . view . synchronize . FILE1 , true ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( compare )", "total": "shouldOpenCompareEditor ( ) { changeFilesInProject ( ) ; launchSynchronization ( org . eclipse . egit . ui . view . synchronize . HEAD , org . eclipse . egit . ui . view . synchronize . INITIAL_TAG , true ) ; org . eclipse . egit . ui . common . CompareEditorTester compare = getCompareEditorForFileInGitChangeSet ( org . eclipse . egit . ui . view . synchronize . FILE1 , true ) ; \"<AssertPlaceHolder>\" ; } getCompareEditorForFileInGitChangeSet ( java . lang . String , boolean ) { org . eclipse . swtbot . swt . finder . widgets . SWTBotTreeItem changeSetTreeItem = getChangeSetTreeItem ( ) ; org . eclipse . swtbot . swt . finder . widgets . SWTBotTreeItem rootTree ; if ( includeLocalChanges ) rootTree = waitForNodeWithText ( changeSetTreeItem , org . eclipse . egit . ui . view . synchronize . GitModelWorkingTree_workingTree ) ; else rootTree = waitForNodeWithText ( changeSetTreeItem , org . eclipse . egit . ui . view . synchronize . TEST_COMMIT_MSG ) ; org . eclipse . swtbot . swt . finder . widgets . SWTBotTreeItem projNode = waitForNodeWithText ( rootTree , org . eclipse . egit . ui . view . synchronize . PROJ1 ) ; return getCompareEditor ( projNode , fileName ) ; }", "answer": "org . junit . Assert . assertNotNull ( compare )"}
{"focal": "from ( java . lang . String ) { return new net . glxn . qrgen . android . QRCode ( text ) ; }", "testMethod": "shouldGetSTREAMFromTextWithDefaults ( ) { java . io . ByteArrayOutputStream stream = net . glxn . qrgen . android . QRCode . from ( \"Hello<sp>World\" ) . stream ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( stream )", "total": "shouldGetSTREAMFromTextWithDefaults ( ) { java . io . ByteArrayOutputStream stream = net . glxn . qrgen . android . QRCode . from ( \"Hello<sp>World\" ) . stream ( ) ; \"<AssertPlaceHolder>\" ; } from ( java . lang . String ) { return new net . glxn . qrgen . android . QRCode ( text ) ; }", "answer": "org . junit . Assert . assertNotNull ( stream )"}
{"focal": "getRoleByName ( java . lang . String ) { java . util . List roles = getSession ( ) . createCriteria ( org . musicrecital . model . Role . class ) . add ( org . hibernate . criterion . Restrictions . eq ( \"name\" , rolename ) ) . list ( ) ; if ( roles . isEmpty ( ) ) { return null ; } else { return ( ( org . musicrecital . model . Role ) ( roles . get ( 0 ) ) ) ; } }", "testMethod": "testGetRole ( ) { org . musicrecital . model . Role role = dao . getRoleByName ( Constants . USER_ROLE ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( role )", "total": "testGetRole ( ) { org . musicrecital . model . Role role = dao . getRoleByName ( Constants . USER_ROLE ) ; \"<AssertPlaceHolder>\" ; } getRoleByName ( java . lang . String ) { java . util . List roles = getSession ( ) . createCriteria ( org . musicrecital . model . Role . class ) . add ( org . hibernate . criterion . Restrictions . eq ( \"name\" , rolename ) ) . list ( ) ; if ( roles . isEmpty ( ) ) { return null ; } else { return ( ( org . musicrecital . model . Role ) ( roles . get ( 0 ) ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( role )"}
{"focal": "getBundlor ( org . apache . jackrabbit . oak . spi . state . NodeState ) { if ( org . apache . jackrabbit . oak . plugins . document . bundlor . BundledTypesRegistry . isVersionedNode ( state ) ) { return getBundlorForVersionedNode ( state ) ; } for ( java . lang . String mixin : org . apache . jackrabbit . oak . plugins . document . bundlor . BundledTypesRegistry . getMixinNames ( state , JcrConstants . JCR_MIXINTYPES ) ) { org . apache . jackrabbit . oak . plugins . document . bundlor . DocumentBundlor bundlor = bundlors . get ( mixin ) ; if ( bundlor != null ) { return bundlor ; } } return bundlors . get ( org . apache . jackrabbit . oak . plugins . document . bundlor . BundledTypesRegistry . getPrimaryTypeName ( state , JcrConstants . JCR_PRIMARYTYPE ) ) ; }", "testMethod": "versionedMixins ( ) { builder . child ( \"mix:foo\" ) . setProperty ( createProperty ( org . apache . jackrabbit . oak . plugins . document . bundlor . DocumentBundlor . PROP_PATTERN , asList ( \"jcr:content\" ) , org . apache . jackrabbit . oak . plugins . document . bundlor . STRINGS ) ) ; org . apache . jackrabbit . oak . plugins . document . bundlor . BundledTypesRegistry registry = org . apache . jackrabbit . oak . plugins . document . bundlor . BundledTypesRegistry . from ( builder . getNodeState ( ) ) ; org . apache . jackrabbit . oak . spi . state . NodeBuilder builder = org . apache . jackrabbit . oak . plugins . document . bundlor . EMPTY_NODE . builder ( ) ; builder . setProperty ( org . apache . jackrabbit . JcrConstants . JCR_PRIMARYTYPE , JcrConstants . NT_FROZENNODE , Type . NAME ) ; builder . setProperty ( org . apache . jackrabbit . JcrConstants . JCR_FROZENMIXINTYPES , java . util . Collections . singleton ( \"mix:foo\" ) , Type . NAMES ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( registry . getBundlor ( builder . getNodeState ( ) ) )", "total": "versionedMixins ( ) { builder . child ( \"mix:foo\" ) . setProperty ( createProperty ( org . apache . jackrabbit . oak . plugins . document . bundlor . DocumentBundlor . PROP_PATTERN , asList ( \"jcr:content\" ) , org . apache . jackrabbit . oak . plugins . document . bundlor . STRINGS ) ) ; org . apache . jackrabbit . oak . plugins . document . bundlor . BundledTypesRegistry registry = org . apache . jackrabbit . oak . plugins . document . bundlor . BundledTypesRegistry . from ( builder . getNodeState ( ) ) ; org . apache . jackrabbit . oak . spi . state . NodeBuilder builder = org . apache . jackrabbit . oak . plugins . document . bundlor . EMPTY_NODE . builder ( ) ; builder . setProperty ( org . apache . jackrabbit . JcrConstants . JCR_PRIMARYTYPE , JcrConstants . NT_FROZENNODE , Type . NAME ) ; builder . setProperty ( org . apache . jackrabbit . JcrConstants . JCR_FROZENMIXINTYPES , java . util . Collections . singleton ( \"mix:foo\" ) , Type . NAMES ) ; \"<AssertPlaceHolder>\" ; } getBundlor ( org . apache . jackrabbit . oak . spi . state . NodeState ) { if ( org . apache . jackrabbit . oak . plugins . document . bundlor . BundledTypesRegistry . isVersionedNode ( state ) ) { return getBundlorForVersionedNode ( state ) ; } for ( java . lang . String mixin : org . apache . jackrabbit . oak . plugins . document . bundlor . BundledTypesRegistry . getMixinNames ( state , JcrConstants . JCR_MIXINTYPES ) ) { org . apache . jackrabbit . oak . plugins . document . bundlor . DocumentBundlor bundlor = bundlors . get ( mixin ) ; if ( bundlor != null ) { return bundlor ; } } return bundlors . get ( org . apache . jackrabbit . oak . plugins . document . bundlor . BundledTypesRegistry . getPrimaryTypeName ( state , JcrConstants . JCR_PRIMARYTYPE ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( registry . getBundlor ( builder . getNodeState ( ) ) )"}
{"focal": "getJAXBObjectFromString ( java . io . InputStream , java . lang . Class , java . lang . String ) { javax . xml . bind . JAXBContext context = javax . xml . bind . JAXBContext . newInstance ( clazz . getPackage ( ) . getName ( ) ) ; javax . xml . bind . Unmarshaller unmarshaller = context . createUnmarshaller ( ) ; if ( eu . europa . esig . dss . utils . Utils . isStringNotEmpty ( xsd ) ) { javax . xml . validation . SchemaFactory sf = javax . xml . validation . SchemaFactory . newInstance ( XMLConstants . W3C_XML_SCHEMA_NS_URI ) ; java . io . InputStream inputStream = this . getClass ( ) . getResourceAsStream ( xsd ) ; javax . xml . transform . Source source = new javax . xml . transform . stream . StreamSource ( inputStream ) ; javax . xml . validation . Schema schema = sf . newSchema ( source ) ; unmarshaller . setSchema ( schema ) ; } return ( ( T ) ( unmarshaller . unmarshal ( is ) ) ) ; }", "testMethod": "testDSS956AllValidationLevels ( ) { java . io . FileInputStream fis = new java . io . FileInputStream ( \"src/test/resources/passed_revoked_with_timestamp.xml\" ) ; eu . europa . esig . dss . jaxb . diagnostic . DiagnosticData diagnosticData = getJAXBObjectFromString ( fis , eu . europa . esig . dss . jaxb . diagnostic . DiagnosticData . class , \"/xsd/DiagnosticData.xsd\" ) ; \"<AssertPlaceHolder>\" ; eu . europa . esig . dss . validation . executor . CustomProcessExecutor executor = new eu . europa . esig . dss . validation . executor . CustomProcessExecutor ( ) ; executor . setDiagnosticData ( diagnosticData ) ; executor . setValidationPolicy ( loadPolicy ( ) ) ; executor . setCurrentTime ( diagnosticData . getValidationDate ( ) ) ; executor . setValidationLevel ( ValidationLevel . BASIC_SIGNATURES ) ; checkReports ( executor . execute ( ) ) ; executor . setValidationLevel ( ValidationLevel . TIMESTAMPS ) ; checkReports ( executor . execute ( ) ) ; executor . setValidationLevel ( ValidationLevel . LONG_TERM_DATA ) ; checkReports ( executor . execute ( ) ) ; executor . setValidationLevel ( ValidationLevel . ARCHIVAL_DATA ) ; checkReports ( executor . execute ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( diagnosticData )", "total": "testDSS956AllValidationLevels ( ) { java . io . FileInputStream fis = new java . io . FileInputStream ( \"src/test/resources/passed_revoked_with_timestamp.xml\" ) ; eu . europa . esig . dss . jaxb . diagnostic . DiagnosticData diagnosticData = getJAXBObjectFromString ( fis , eu . europa . esig . dss . jaxb . diagnostic . DiagnosticData . class , \"/xsd/DiagnosticData.xsd\" ) ; \"<AssertPlaceHolder>\" ; eu . europa . esig . dss . validation . executor . CustomProcessExecutor executor = new eu . europa . esig . dss . validation . executor . CustomProcessExecutor ( ) ; executor . setDiagnosticData ( diagnosticData ) ; executor . setValidationPolicy ( loadPolicy ( ) ) ; executor . setCurrentTime ( diagnosticData . getValidationDate ( ) ) ; executor . setValidationLevel ( ValidationLevel . BASIC_SIGNATURES ) ; checkReports ( executor . execute ( ) ) ; executor . setValidationLevel ( ValidationLevel . TIMESTAMPS ) ; checkReports ( executor . execute ( ) ) ; executor . setValidationLevel ( ValidationLevel . LONG_TERM_DATA ) ; checkReports ( executor . execute ( ) ) ; executor . setValidationLevel ( ValidationLevel . ARCHIVAL_DATA ) ; checkReports ( executor . execute ( ) ) ; } getJAXBObjectFromString ( java . io . InputStream , java . lang . Class , java . lang . String ) { javax . xml . bind . JAXBContext context = javax . xml . bind . JAXBContext . newInstance ( clazz . getPackage ( ) . getName ( ) ) ; javax . xml . bind . Unmarshaller unmarshaller = context . createUnmarshaller ( ) ; if ( eu . europa . esig . dss . utils . Utils . isStringNotEmpty ( xsd ) ) { javax . xml . validation . SchemaFactory sf = javax . xml . validation . SchemaFactory . newInstance ( XMLConstants . W3C_XML_SCHEMA_NS_URI ) ; java . io . InputStream inputStream = this . getClass ( ) . getResourceAsStream ( xsd ) ; javax . xml . transform . Source source = new javax . xml . transform . stream . StreamSource ( inputStream ) ; javax . xml . validation . Schema schema = sf . newSchema ( source ) ; unmarshaller . setSchema ( schema ) ; } return ( ( T ) ( unmarshaller . unmarshal ( is ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( diagnosticData )"}
{"focal": "readDoc ( javax . xml . parsers . DocumentBuilder , javax . xml . stream . XMLStreamReader ) { while ( ( xmlStreamReader . hasNext ( ) ) && ( ( xmlStreamReader . next ( ) ) != ( javax . xml . stream . XMLStreamConstants . START_ELEMENT ) ) ) { } org . apache . wss4j . stax . test . utils . Document document = documentBuilder . newDocument ( ) ; org . apache . wss4j . stax . test . utils . StAX2DOM . readDocElements ( document , document , xmlStreamReader , false , false ) ; xmlStreamReader . close ( ) ; return document ; }", "testMethod": "testSAML2AudienceRestrictionSeparateRestrictions ( ) { java . io . ByteArrayOutputStream baos = new java . io . ByteArrayOutputStream ( ) ; { org . apache . wss4j . stax . test . saml . SAML2CallbackHandler callbackHandler = new org . apache . wss4j . stax . test . saml . SAML2CallbackHandler ( ) ; callbackHandler . setStatement ( SAML2CallbackHandler . Statement . AUTHN ) ; callbackHandler . setIssuer ( \"www.example.com\" ) ; org . apache . wss4j . common . saml . bean . ConditionsBean conditions = new org . apache . wss4j . common . saml . bean . ConditionsBean ( ) ; conditions . setTokenPeriodMinutes ( 5 ) ; java . util . List < org . apache . wss4j . common . saml . bean . AudienceRestrictionBean > audiencesRestrictions = new java . util . ArrayList ( ) ; org . apache . wss4j . common . saml . bean . AudienceRestrictionBean audienceRestrictionBean = new org . apache . wss4j . common . saml . bean . AudienceRestrictionBean ( ) ; audienceRestrictionBean . setAudienceURIs ( java . util . Collections . singletonList ( \"http://apache.org/one\" ) ) ; audiencesRestrictions . add ( audienceRestrictionBean ) ; audienceRestrictionBean = new org . apache . wss4j . common . saml . bean . AudienceRestrictionBean ( ) ; audienceRestrictionBean . setAudienceURIs ( java . util . Collections . singletonList ( \"http://apache.org/two\" ) ) ; audiencesRestrictions . add ( audienceRestrictionBean ) ; conditions . setAudienceRestrictions ( audiencesRestrictions ) ; callbackHandler . setConditions ( conditions ) ; java . io . InputStream sourceDocument = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( \"testdata/plain-soap-1.1.xml\" ) ; java . lang . String action = org . apache . wss4j . dom . handler . WSHandlerConstants . SAML_TOKEN_SIGNED ; java . util . Properties properties = new java . util . Properties ( ) ; properties . put ( WSHandlerConstants . SAML_CALLBACK_REF , callbackHandler ) ; org . w3c . dom . Document securedDocument = doOutboundSecurityWithWSS4J ( sourceDocument , action , properties ) ; javax . xml . transform . Transformer transformer = org . apache . wss4j . stax . test . saml . TRANSFORMER_FACTORY . newTransformer ( ) ; transformer . transform ( new javax . xml . transform . dom . DOMSource ( securedDocument ) , new javax . xml . transform . stream . StreamResult ( baos ) ) ; } { org . apache . wss4j . stax . ext . WSSSecurityProperties securityProperties = new org . apache . wss4j . stax . ext . WSSSecurityProperties ( ) ; securityProperties . loadSignatureVerificationKeystore ( this . getClass ( ) . getClassLoader ( ) . getResource ( \"receiver.jks\" ) , \"default\" . toCharArray ( ) ) ; org . apache . wss4j . stax . setup . InboundWSSec wsSecIn = org . apache . wss4j . stax . setup . WSSec . getInboundWSSec ( securityProperties ) ; javax . xml . stream . XMLStreamReader xmlStreamReader = wsSecIn . processInMessage ( xmlInputFactory . createXMLStreamReader ( new java . io . ByteArrayInputStream ( baos . toByteArray ( ) ) ) ) ; org . w3c . dom . Document document = org . apache . wss4j . stax . test . utils . StAX2DOM . readDoc ( documentBuilderFactory . newDocumentBuilder ( ) , xmlStreamReader ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( document )", "total": "testSAML2AudienceRestrictionSeparateRestrictions ( ) { java . io . ByteArrayOutputStream baos = new java . io . ByteArrayOutputStream ( ) ; { org . apache . wss4j . stax . test . saml . SAML2CallbackHandler callbackHandler = new org . apache . wss4j . stax . test . saml . SAML2CallbackHandler ( ) ; callbackHandler . setStatement ( SAML2CallbackHandler . Statement . AUTHN ) ; callbackHandler . setIssuer ( \"www.example.com\" ) ; org . apache . wss4j . common . saml . bean . ConditionsBean conditions = new org . apache . wss4j . common . saml . bean . ConditionsBean ( ) ; conditions . setTokenPeriodMinutes ( 5 ) ; java . util . List < org . apache . wss4j . common . saml . bean . AudienceRestrictionBean > audiencesRestrictions = new java . util . ArrayList ( ) ; org . apache . wss4j . common . saml . bean . AudienceRestrictionBean audienceRestrictionBean = new org . apache . wss4j . common . saml . bean . AudienceRestrictionBean ( ) ; audienceRestrictionBean . setAudienceURIs ( java . util . Collections . singletonList ( \"http://apache.org/one\" ) ) ; audiencesRestrictions . add ( audienceRestrictionBean ) ; audienceRestrictionBean = new org . apache . wss4j . common . saml . bean . AudienceRestrictionBean ( ) ; audienceRestrictionBean . setAudienceURIs ( java . util . Collections . singletonList ( \"http://apache.org/two\" ) ) ; audiencesRestrictions . add ( audienceRestrictionBean ) ; conditions . setAudienceRestrictions ( audiencesRestrictions ) ; callbackHandler . setConditions ( conditions ) ; java . io . InputStream sourceDocument = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( \"testdata/plain-soap-1.1.xml\" ) ; java . lang . String action = org . apache . wss4j . dom . handler . WSHandlerConstants . SAML_TOKEN_SIGNED ; java . util . Properties properties = new java . util . Properties ( ) ; properties . put ( WSHandlerConstants . SAML_CALLBACK_REF , callbackHandler ) ; org . w3c . dom . Document securedDocument = doOutboundSecurityWithWSS4J ( sourceDocument , action , properties ) ; javax . xml . transform . Transformer transformer = org . apache . wss4j . stax . test . saml . TRANSFORMER_FACTORY . newTransformer ( ) ; transformer . transform ( new javax . xml . transform . dom . DOMSource ( securedDocument ) , new javax . xml . transform . stream . StreamResult ( baos ) ) ; } { org . apache . wss4j . stax . ext . WSSSecurityProperties securityProperties = new org . apache . wss4j . stax . ext . WSSSecurityProperties ( ) ; securityProperties . loadSignatureVerificationKeystore ( this . getClass ( ) . getClassLoader ( ) . getResource ( \"receiver.jks\" ) , \"default\" . toCharArray ( ) ) ; org . apache . wss4j . stax . setup . InboundWSSec wsSecIn = org . apache . wss4j . stax . setup . WSSec . getInboundWSSec ( securityProperties ) ; javax . xml . stream . XMLStreamReader xmlStreamReader = wsSecIn . processInMessage ( xmlInputFactory . createXMLStreamReader ( new java . io . ByteArrayInputStream ( baos . toByteArray ( ) ) ) ) ; org . w3c . dom . Document document = org . apache . wss4j . stax . test . utils . StAX2DOM . readDoc ( documentBuilderFactory . newDocumentBuilder ( ) , xmlStreamReader ) ; \"<AssertPlaceHolder>\" ; } } readDoc ( javax . xml . parsers . DocumentBuilder , javax . xml . stream . XMLStreamReader ) { while ( ( xmlStreamReader . hasNext ( ) ) && ( ( xmlStreamReader . next ( ) ) != ( javax . xml . stream . XMLStreamConstants . START_ELEMENT ) ) ) { } org . apache . wss4j . stax . test . utils . Document document = documentBuilder . newDocument ( ) ; org . apache . wss4j . stax . test . utils . StAX2DOM . readDocElements ( document , document , xmlStreamReader , false , false ) ; xmlStreamReader . close ( ) ; return document ; }", "answer": "org . junit . Assert . assertNotNull ( document )"}
{"focal": "openOutputStream ( long , boolean ) { if ( this . conn . isClosed ( ) ) { throw new java . lang . IllegalStateException ( \"Unable<sp>to<sp>open<sp>Inputstream,<sp>because<sp>connection<sp>is<sp>closed\" ) ; } if ( this . exists ( ) ) { if ( overWrite ) { return this . conn . getFileSystem ( ) . create ( path , true ) ; } else { throw new org . akubraproject . DuplicateBlobException ( uri ) ; } } return this . conn . getFileSystem ( ) . create ( path ) ; }", "testMethod": "testOpenOutputStreamMissingBlob ( ) { expect ( mockConnection . getBlobStore ( ) ) . andReturn ( mockStore ) . times ( 3 ) ; expect ( mockConnection . isClosed ( ) ) . andReturn ( false ) . times ( 2 ) ; expect ( mockStore . getId ( ) ) . andReturn ( de . fiz . akubra . hdfs . HDFSBlobTest . blobStoreUri ) . times ( 2 ) ; expect ( mockConnection . getFileSystem ( ) ) . andReturn ( mockFs ) . times ( 2 ) ; expect ( mockFs . exists ( anyObject ( org . apache . hadoop . fs . Path . class ) ) ) . andReturn ( true ) ; replay ( mockConnection , mockFs , mockStore ) ; de . fiz . akubra . hdfs . HDFSBlob b = new de . fiz . akubra . hdfs . HDFSBlob ( de . fiz . akubra . hdfs . HDFSBlobTest . blobUri , mockConnection ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( b . openOutputStream ( 0 , false ) )", "total": "testOpenOutputStreamMissingBlob ( ) { expect ( mockConnection . getBlobStore ( ) ) . andReturn ( mockStore ) . times ( 3 ) ; expect ( mockConnection . isClosed ( ) ) . andReturn ( false ) . times ( 2 ) ; expect ( mockStore . getId ( ) ) . andReturn ( de . fiz . akubra . hdfs . HDFSBlobTest . blobStoreUri ) . times ( 2 ) ; expect ( mockConnection . getFileSystem ( ) ) . andReturn ( mockFs ) . times ( 2 ) ; expect ( mockFs . exists ( anyObject ( org . apache . hadoop . fs . Path . class ) ) ) . andReturn ( true ) ; replay ( mockConnection , mockFs , mockStore ) ; de . fiz . akubra . hdfs . HDFSBlob b = new de . fiz . akubra . hdfs . HDFSBlob ( de . fiz . akubra . hdfs . HDFSBlobTest . blobUri , mockConnection ) ; \"<AssertPlaceHolder>\" ; } openOutputStream ( long , boolean ) { if ( this . conn . isClosed ( ) ) { throw new java . lang . IllegalStateException ( \"Unable<sp>to<sp>open<sp>Inputstream,<sp>because<sp>connection<sp>is<sp>closed\" ) ; } if ( this . exists ( ) ) { if ( overWrite ) { return this . conn . getFileSystem ( ) . create ( path , true ) ; } else { throw new org . akubraproject . DuplicateBlobException ( uri ) ; } } return this . conn . getFileSystem ( ) . create ( path ) ; }", "answer": "org . junit . Assert . assertNotNull ( b . openOutputStream ( 0 , false ) )"}
{"focal": "getText ( ) { try { org . apache . poi . hwpf . converter . WordToTextConverter wordToTextConverter = new org . apache . poi . hwpf . converter . WordToTextConverter ( ) ; org . apache . poi . hwpf . usermodel . HeaderStories hs = new org . apache . poi . hwpf . usermodel . HeaderStories ( doc ) ; if ( ( hs . getFirstHeaderSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getFirstHeaderSubrange ( ) ) ; if ( ( hs . getEvenHeaderSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getEvenHeaderSubrange ( ) ) ; if ( ( hs . getOddHeaderSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getOddHeaderSubrange ( ) ) ; wordToTextConverter . processDocument ( doc ) ; wordToTextConverter . processDocumentPart ( doc , doc . getMainTextboxRange ( ) ) ; if ( ( hs . getFirstFooterSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getFirstFooterSubrange ( ) ) ; if ( ( hs . getEvenFooterSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getEvenFooterSubrange ( ) ) ; if ( ( hs . getOddFooterSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getOddFooterSubrange ( ) ) ; return wordToTextConverter . getText ( ) ; } catch ( java . lang . RuntimeException e ) { throw e ; } catch ( java . lang . Exception exc ) { throw new java . lang . RuntimeException ( exc ) ; } }", "testMethod": "test ( ) { java . io . File file = new java . io . File ( \"test-data/publisher/SampleBrochure.pub\" ) ; java . io . InputStream stream = new java . io . FileInputStream ( file ) ; try { handleFile ( stream , file . getPath ( ) ) ; } finally { stream . close ( ) ; } handleExtracting ( file ) ; stream = new java . io . FileInputStream ( file ) ; try { try ( org . apache . poi . hpbf . extractor . PublisherTextExtractor extractor = new org . apache . poi . hpbf . extractor . PublisherTextExtractor ( stream ) ) { \"<AssertPlaceHolder>\" ; } } finally { stream . close ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( extractor . getText ( ) )", "total": "test ( ) { java . io . File file = new java . io . File ( \"test-data/publisher/SampleBrochure.pub\" ) ; java . io . InputStream stream = new java . io . FileInputStream ( file ) ; try { handleFile ( stream , file . getPath ( ) ) ; } finally { stream . close ( ) ; } handleExtracting ( file ) ; stream = new java . io . FileInputStream ( file ) ; try { try ( org . apache . poi . hpbf . extractor . PublisherTextExtractor extractor = new org . apache . poi . hpbf . extractor . PublisherTextExtractor ( stream ) ) { \"<AssertPlaceHolder>\" ; } } finally { stream . close ( ) ; } } getText ( ) { try { org . apache . poi . hwpf . converter . WordToTextConverter wordToTextConverter = new org . apache . poi . hwpf . converter . WordToTextConverter ( ) ; org . apache . poi . hwpf . usermodel . HeaderStories hs = new org . apache . poi . hwpf . usermodel . HeaderStories ( doc ) ; if ( ( hs . getFirstHeaderSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getFirstHeaderSubrange ( ) ) ; if ( ( hs . getEvenHeaderSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getEvenHeaderSubrange ( ) ) ; if ( ( hs . getOddHeaderSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getOddHeaderSubrange ( ) ) ; wordToTextConverter . processDocument ( doc ) ; wordToTextConverter . processDocumentPart ( doc , doc . getMainTextboxRange ( ) ) ; if ( ( hs . getFirstFooterSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getFirstFooterSubrange ( ) ) ; if ( ( hs . getEvenFooterSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getEvenFooterSubrange ( ) ) ; if ( ( hs . getOddFooterSubrange ( ) ) != null ) wordToTextConverter . processDocumentPart ( doc , hs . getOddFooterSubrange ( ) ) ; return wordToTextConverter . getText ( ) ; } catch ( java . lang . RuntimeException e ) { throw e ; } catch ( java . lang . Exception exc ) { throw new java . lang . RuntimeException ( exc ) ; } }", "answer": "org . junit . Assert . assertNotNull ( extractor . getText ( ) )"}
{"focal": "getResponse ( ) { return _response ; }", "testMethod": "testGetWidgetList_1 ( ) { com . agiletec . aps . system . services . user . UserDetails user = new org . entando . entando . web . utils . OAuth2TestUtils . UserBuilder ( \"jack_bauer\" , \"0x24\" ) . grantedToRoleAdmin ( ) . build ( ) ; java . lang . String accessToken = mockOAuthInterceptor ( user ) ; org . springframework . test . web . servlet . ResultActions result = mockMvc . perform ( get ( \"/widgets\" ) . param ( \"pageSize\" , \"100\" ) . header ( HttpHeaders . AUTHORIZATION , ( \"Bearer<sp>\" + accessToken ) ) ) ; result . andExpect ( status ( ) . isOk ( ) ) ; result . andExpect ( jsonPath ( \"$.payload\" , org . hamcrest . Matchers . hasSize ( 6 ) ) ) ; result . andExpect ( jsonPath ( \"$.metaData.pageSize\" , org . hamcrest . CoreMatchers . is ( 100 ) ) ) ; result . andExpect ( jsonPath ( \"$.metaData.totalItems\" , org . hamcrest . CoreMatchers . is ( 6 ) ) ) ; java . lang . String response = result . andReturn ( ) . getResponse ( ) . getContentAsString ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testGetWidgetList_1 ( ) { com . agiletec . aps . system . services . user . UserDetails user = new org . entando . entando . web . utils . OAuth2TestUtils . UserBuilder ( \"jack_bauer\" , \"0x24\" ) . grantedToRoleAdmin ( ) . build ( ) ; java . lang . String accessToken = mockOAuthInterceptor ( user ) ; org . springframework . test . web . servlet . ResultActions result = mockMvc . perform ( get ( \"/widgets\" ) . param ( \"pageSize\" , \"100\" ) . header ( HttpHeaders . AUTHORIZATION , ( \"Bearer<sp>\" + accessToken ) ) ) ; result . andExpect ( status ( ) . isOk ( ) ) ; result . andExpect ( jsonPath ( \"$.payload\" , org . hamcrest . Matchers . hasSize ( 6 ) ) ) ; result . andExpect ( jsonPath ( \"$.metaData.pageSize\" , org . hamcrest . CoreMatchers . is ( 100 ) ) ) ; result . andExpect ( jsonPath ( \"$.metaData.totalItems\" , org . hamcrest . CoreMatchers . is ( 6 ) ) ) ; java . lang . String response = result . andReturn ( ) . getResponse ( ) . getContentAsString ( ) ; \"<AssertPlaceHolder>\" ; } getResponse ( ) { return _response ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "getFacet ( java . lang . Class ) { final org . apache . isis . core . metamodel . facetapi . FacetHolder facetHolder = getAction ( ) ; return facetHolder . getFacet ( facetType ) ; }", "testMethod": "testNamedFaced ( ) { final org . apache . isis . core . metamodel . facetapi . Facet facet = specification . getFacet ( org . apache . isis . core . metamodel . facets . all . named . NamedFacet . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( facet )", "total": "testNamedFaced ( ) { final org . apache . isis . core . metamodel . facetapi . Facet facet = specification . getFacet ( org . apache . isis . core . metamodel . facets . all . named . NamedFacet . class ) ; \"<AssertPlaceHolder>\" ; } getFacet ( java . lang . Class ) { final org . apache . isis . core . metamodel . facetapi . FacetHolder facetHolder = getAction ( ) ; return facetHolder . getFacet ( facetType ) ; }", "answer": "org . junit . Assert . assertNotNull ( facet )"}
{"focal": "build ( com . facebook . buck . core . rules . ActionGraphBuilder ) { return build ( graphBuilder , filesystem , TargetGraph . EMPTY ) ; }", "testMethod": "canAddListOfRuleKeyAppendable ( ) { com . google . common . collect . ImmutableList < com . facebook . buck . core . rulekey . RuleKeyTest . TestRuleKeyAppendable > list = com . google . common . collect . ImmutableList . of ( new com . facebook . buck . core . rulekey . RuleKeyTest . TestRuleKeyAppendable ( \"foo\" ) , new com . facebook . buck . core . rulekey . RuleKeyTest . TestRuleKeyAppendable ( \"bar\" ) ) ; com . facebook . buck . core . rules . SourcePathRuleFinder ruleFinder = new com . facebook . buck . core . rules . SourcePathRuleFinder ( new com . facebook . buck . core . rules . resolver . impl . TestActionGraphBuilder ( ) ) ; com . facebook . buck . core . sourcepath . resolver . SourcePathResolver resolver = com . facebook . buck . core . sourcepath . resolver . impl . DefaultSourcePathResolver . from ( ruleFinder ) ; com . facebook . buck . core . rulekey . RuleKey key = createBuilder ( resolver , ruleFinder ) . setReflectively ( \"list\" , list ) . build ( RuleKey :: new ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( key )", "total": "canAddListOfRuleKeyAppendable ( ) { com . google . common . collect . ImmutableList < com . facebook . buck . core . rulekey . RuleKeyTest . TestRuleKeyAppendable > list = com . google . common . collect . ImmutableList . of ( new com . facebook . buck . core . rulekey . RuleKeyTest . TestRuleKeyAppendable ( \"foo\" ) , new com . facebook . buck . core . rulekey . RuleKeyTest . TestRuleKeyAppendable ( \"bar\" ) ) ; com . facebook . buck . core . rules . SourcePathRuleFinder ruleFinder = new com . facebook . buck . core . rules . SourcePathRuleFinder ( new com . facebook . buck . core . rules . resolver . impl . TestActionGraphBuilder ( ) ) ; com . facebook . buck . core . sourcepath . resolver . SourcePathResolver resolver = com . facebook . buck . core . sourcepath . resolver . impl . DefaultSourcePathResolver . from ( ruleFinder ) ; com . facebook . buck . core . rulekey . RuleKey key = createBuilder ( resolver , ruleFinder ) . setReflectively ( \"list\" , list ) . build ( RuleKey :: new ) ; \"<AssertPlaceHolder>\" ; } build ( com . facebook . buck . core . rules . ActionGraphBuilder ) { return build ( graphBuilder , filesystem , TargetGraph . EMPTY ) ; }", "answer": "org . junit . Assert . assertNotNull ( key )"}
{"focal": "parse ( java . lang . String ) { if ( string . startsWith ( org . cytoscape . application . swing . AcceleratorParser . FUNCTION_KEY ) ) return javax . swing . KeyStroke . getKeyStroke ( org . cytoscape . application . swing . AcceleratorParser . MOD_MAP . get ( string ) , 0 ) ; int keyCode = 0 ; int modifierCode = 0 ; final java . util . StringTokenizer tokenizer = new java . util . StringTokenizer ( string ) ; while ( tokenizer . hasMoreTokens ( ) ) { java . lang . String token = tokenizer . nextToken ( ) ; if ( tokenizer . hasMoreTokens ( ) ) modifierCode |= org . cytoscape . application . swing . AcceleratorParser . lookupModifier ( token ) ; else keyCode = org . cytoscape . application . swing . AcceleratorParser . lookupVKCode ( token ) ; } if ( keyCode == 0 ) return null ; return javax . swing . KeyStroke . getKeyStroke ( keyCode , modifierCode ) ; }", "testMethod": "testParse ( ) { final javax . swing . KeyStroke shortCut1 = org . cytoscape . application . swing . AcceleratorParser . parse ( \"cmd<sp>s\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( shortCut1 )", "total": "testParse ( ) { final javax . swing . KeyStroke shortCut1 = org . cytoscape . application . swing . AcceleratorParser . parse ( \"cmd<sp>s\" ) ; \"<AssertPlaceHolder>\" ; } parse ( java . lang . String ) { if ( string . startsWith ( org . cytoscape . application . swing . AcceleratorParser . FUNCTION_KEY ) ) return javax . swing . KeyStroke . getKeyStroke ( org . cytoscape . application . swing . AcceleratorParser . MOD_MAP . get ( string ) , 0 ) ; int keyCode = 0 ; int modifierCode = 0 ; final java . util . StringTokenizer tokenizer = new java . util . StringTokenizer ( string ) ; while ( tokenizer . hasMoreTokens ( ) ) { java . lang . String token = tokenizer . nextToken ( ) ; if ( tokenizer . hasMoreTokens ( ) ) modifierCode |= org . cytoscape . application . swing . AcceleratorParser . lookupModifier ( token ) ; else keyCode = org . cytoscape . application . swing . AcceleratorParser . lookupVKCode ( token ) ; } if ( keyCode == 0 ) return null ; return javax . swing . KeyStroke . getKeyStroke ( keyCode , modifierCode ) ; }", "answer": "org . junit . Assert . assertNotNull ( shortCut1 )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateAdvanceDirectivesSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ihe . AdvanceDirectivesSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ihe . builder . IHEBuilderFactory . createAdvanceDirectivesSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ihe . AdvanceDirectivesSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateAdvanceDirectivesSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ihe . AdvanceDirectivesSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ihe . builder . IHEBuilderFactory . createAdvanceDirectivesSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ihe . AdvanceDirectivesSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "findPlugin ( java . lang . String ) { return org . freedesktop . gstreamer . GSTREGISTRY_API . gst_registry_find_plugin ( this , name ) ; }", "testMethod": "testFindPlugin ( ) { org . freedesktop . gstreamer . Plugin f = org . freedesktop . gstreamer . Registry . get ( ) . findPlugin ( \"playback\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( f )", "total": "testFindPlugin ( ) { org . freedesktop . gstreamer . Plugin f = org . freedesktop . gstreamer . Registry . get ( ) . findPlugin ( \"playback\" ) ; \"<AssertPlaceHolder>\" ; } findPlugin ( java . lang . String ) { return org . freedesktop . gstreamer . GSTREGISTRY_API . gst_registry_find_plugin ( this , name ) ; }", "answer": "org . junit . Assert . assertNotNull ( f )"}
{"focal": "getMaxPosition ( java . lang . Integer ) { javax . persistence . Query query = entityManager . createQuery ( \"select<sp>max(w.position)<sp>from<sp>WaitingList<sp>w<sp>where<sp>w.listId<sp>=<sp>:listId<sp>AND<sp>w.isHistory<sp>=<sp>'N'\" ) ; query . setParameter ( \"listId\" , listId ) ; java . lang . Long result = ( ( java . lang . Long ) ( query . getSingleResult ( ) ) ) ; if ( result == null ) { return 0 ; } return result . intValue ( ) ; }", "testMethod": "testMaxPosition ( ) { java . lang . Integer i = dao . getMaxPosition ( 1 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( i )", "total": "testMaxPosition ( ) { java . lang . Integer i = dao . getMaxPosition ( 1 ) ; \"<AssertPlaceHolder>\" ; } getMaxPosition ( java . lang . Integer ) { javax . persistence . Query query = entityManager . createQuery ( \"select<sp>max(w.position)<sp>from<sp>WaitingList<sp>w<sp>where<sp>w.listId<sp>=<sp>:listId<sp>AND<sp>w.isHistory<sp>=<sp>'N'\" ) ; query . setParameter ( \"listId\" , listId ) ; java . lang . Long result = ( ( java . lang . Long ) ( query . getSingleResult ( ) ) ) ; if ( result == null ) { return 0 ; } return result . intValue ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( i )"}
{"focal": "getIRODSAccessObjectFactory ( ) { if ( ( irodsAccessObjectFactory ) == null ) { irodsAccessObjectFactory = org . irods . jargon . core . pub . IRODSAccessObjectFactoryImpl . instance ( irodsSession ) ; } return irodsAccessObjectFactory ; }", "testMethod": "testGetIRODSAccessObjectFactoryTwice ( ) { org . irods . jargon . core . pub . IRODSFileSystem irodsFileSystem = org . irods . jargon . core . pub . IRODSFileSystem . instance ( ) ; org . irods . jargon . core . pub . IRODSAccessObjectFactory irodsAccessObjectFactory = irodsFileSystem . getIRODSAccessObjectFactory ( ) ; irodsAccessObjectFactory = irodsFileSystem . getIRODSAccessObjectFactory ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( irodsAccessObjectFactory )", "total": "testGetIRODSAccessObjectFactoryTwice ( ) { org . irods . jargon . core . pub . IRODSFileSystem irodsFileSystem = org . irods . jargon . core . pub . IRODSFileSystem . instance ( ) ; org . irods . jargon . core . pub . IRODSAccessObjectFactory irodsAccessObjectFactory = irodsFileSystem . getIRODSAccessObjectFactory ( ) ; irodsAccessObjectFactory = irodsFileSystem . getIRODSAccessObjectFactory ( ) ; \"<AssertPlaceHolder>\" ; } getIRODSAccessObjectFactory ( ) { if ( ( irodsAccessObjectFactory ) == null ) { irodsAccessObjectFactory = org . irods . jargon . core . pub . IRODSAccessObjectFactoryImpl . instance ( irodsSession ) ; } return irodsAccessObjectFactory ; }", "answer": "org . junit . Assert . assertNotNull ( irodsAccessObjectFactory )"}
{"focal": "iso8601DateTimeFromString ( java . lang . String ) { try { return org . joda . time . DateTime . parse ( dateTimeString , com . twilio . converter . DateConverter . ISO8601_DATE_TIME_FORMATTER ) ; } catch ( java . lang . Exception e ) { return null ; } }", "testMethod": "testDifferentLocaleISO8601 ( ) { java . util . Locale . setDefault ( new java . util . Locale ( \"fr\" , \"CA\" ) ) ; org . joda . time . DateTime dateTime = com . twilio . converter . DateConverter . iso8601DateTimeFromString ( \"2016-01-15T21:49:24Z\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dateTime )", "total": "testDifferentLocaleISO8601 ( ) { java . util . Locale . setDefault ( new java . util . Locale ( \"fr\" , \"CA\" ) ) ; org . joda . time . DateTime dateTime = com . twilio . converter . DateConverter . iso8601DateTimeFromString ( \"2016-01-15T21:49:24Z\" ) ; \"<AssertPlaceHolder>\" ; } iso8601DateTimeFromString ( java . lang . String ) { try { return org . joda . time . DateTime . parse ( dateTimeString , com . twilio . converter . DateConverter . ISO8601_DATE_TIME_FORMATTER ) ; } catch ( java . lang . Exception e ) { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( dateTime )"}
{"focal": "sendToAdapter ( oasis . names . tc . ebxml_regrep . xsd . query . _3 . AdhocQueryRequest , gov . hhs . fha . nhinc . common . nhinccommon . AssertionType ) { return adapterFactory . getAdapterDocQueryProxy ( ) . respondingGatewayCrossGatewayQuery ( msg , assertion ) ; }", "testMethod": "testProcessPatientLocationQuery ( ) { ihe . iti . xcpd . _2009 . PatientLocationQueryResponseType result = plqInbound . processPatientLocationQuery ( request , assertion , properties ) ; org . mockito . Mockito . verify ( plqInbound ) . sendToAdapter ( request , assertion ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testProcessPatientLocationQuery ( ) { ihe . iti . xcpd . _2009 . PatientLocationQueryResponseType result = plqInbound . processPatientLocationQuery ( request , assertion , properties ) ; org . mockito . Mockito . verify ( plqInbound ) . sendToAdapter ( request , assertion ) ; \"<AssertPlaceHolder>\" ; } sendToAdapter ( oasis . names . tc . ebxml_regrep . xsd . query . _3 . AdhocQueryRequest , gov . hhs . fha . nhinc . common . nhinccommon . AssertionType ) { return adapterFactory . getAdapterDocQueryProxy ( ) . respondingGatewayCrossGatewayQuery ( msg , assertion ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getInstrumentedProject ( java . lang . String , java . lang . String ) { init ( ) ; org . qualipso . factory . jabuti . ws . VerifingData verifingdata = new org . qualipso . factory . jabuti . ws . VerifingData ( ) ; if ( verifingdata . existProject ( projectId , props ) ) { if ( verifingdata . isProjectInstrumented ( projectId ) ) { org . qualipso . factory . jabuti . ws . WsProject control = new org . qualipso . factory . jabuti . ws . WsProject ( props ) ; return control . getInstrumentedProject ( projectId ) ; } else throw new org . qualipso . factory . jabuti . OperationSequenceFault ( \"The<sp>project's<sp>classes<sp>are<sp>not<sp>instrumented.\" ) ; } else throw new org . qualipso . factory . jabuti . InvalidProjectIdFault ( \"The<sp>project<sp>does<sp>not<sp>exist.\" ) ; }", "testMethod": "testGetInstrumentedProject ( ) { org . qualipso . factory . jabuti . test . JabutiServiceTest . logger . info ( \"testGetInstrumentedProject()\" ) ; try { java . lang . String user = \"SA\" ; org . qualipso . factory . jabuti . client . ws . InstrumentedProjectDetails project = port . getInstrumentedProject ( user , org . qualipso . factory . jabuti . test . JabutiServiceTest . projectId ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( e . getMessage ( ) ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( project )", "total": "testGetInstrumentedProject ( ) { org . qualipso . factory . jabuti . test . JabutiServiceTest . logger . info ( \"testGetInstrumentedProject()\" ) ; try { java . lang . String user = \"SA\" ; org . qualipso . factory . jabuti . client . ws . InstrumentedProjectDetails project = port . getInstrumentedProject ( user , org . qualipso . factory . jabuti . test . JabutiServiceTest . projectId ) ; \"<AssertPlaceHolder>\" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( e . getMessage ( ) ) ; } } getInstrumentedProject ( java . lang . String , java . lang . String ) { init ( ) ; org . qualipso . factory . jabuti . ws . VerifingData verifingdata = new org . qualipso . factory . jabuti . ws . VerifingData ( ) ; if ( verifingdata . existProject ( projectId , props ) ) { if ( verifingdata . isProjectInstrumented ( projectId ) ) { org . qualipso . factory . jabuti . ws . WsProject control = new org . qualipso . factory . jabuti . ws . WsProject ( props ) ; return control . getInstrumentedProject ( projectId ) ; } else throw new org . qualipso . factory . jabuti . OperationSequenceFault ( \"The<sp>project's<sp>classes<sp>are<sp>not<sp>instrumented.\" ) ; } else throw new org . qualipso . factory . jabuti . InvalidProjectIdFault ( \"The<sp>project<sp>does<sp>not<sp>exist.\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( project )"}
{"focal": "getHandler ( java . lang . String ) { return org . openmrs . api . impl . ObsServiceImpl . handlers . get ( key ) ; }", "testMethod": "registerHandler_shouldLoadHandlerAndRegisterKey ( ) { org . openmrs . api . ObsService os = org . openmrs . api . context . Context . getObsService ( ) ; os . registerHandler ( \"DummyHandler2\" , \"org.openmrs.obs.handler.ImageHandler\" ) ; org . openmrs . obs . ComplexObsHandler dummyHandler = os . getHandler ( \"DummyHandler2\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( dummyHandler )", "total": "registerHandler_shouldLoadHandlerAndRegisterKey ( ) { org . openmrs . api . ObsService os = org . openmrs . api . context . Context . getObsService ( ) ; os . registerHandler ( \"DummyHandler2\" , \"org.openmrs.obs.handler.ImageHandler\" ) ; org . openmrs . obs . ComplexObsHandler dummyHandler = os . getHandler ( \"DummyHandler2\" ) ; \"<AssertPlaceHolder>\" ; } getHandler ( java . lang . String ) { return org . openmrs . api . impl . ObsServiceImpl . handlers . get ( key ) ; }", "answer": "org . junit . Assert . assertNotNull ( dummyHandler )"}
{"focal": "setTransform ( java . awt . geom . AffineTransform ) { this . transform = transform ; }", "testMethod": "testVisit ( ) { java . awt . Image image = new java . awt . image . BufferedImage ( 100 , 100 , java . awt . image . BufferedImage . TYPE_INT_RGB ) ; java . awt . Graphics2D g2d = ( ( java . awt . Graphics2D ) ( image . getGraphics ( ) ) ) ; org . openscience . cdk . renderer . visitor . AWTDrawVisitor visitor = new org . openscience . cdk . renderer . visitor . AWTDrawVisitor ( g2d ) ; visitor . setFontManager ( new org . openscience . cdk . renderer . font . AWTFontManager ( ) ) ; visitor . setTransform ( new java . awt . geom . AffineTransform ( ) ) ; visitor . visit ( new org . openscience . cdk . renderer . elements . TextElement ( 2 , 3 , \"Foo\" , java . awt . Color . BLACK ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( visitor )", "total": "testVisit ( ) { java . awt . Image image = new java . awt . image . BufferedImage ( 100 , 100 , java . awt . image . BufferedImage . TYPE_INT_RGB ) ; java . awt . Graphics2D g2d = ( ( java . awt . Graphics2D ) ( image . getGraphics ( ) ) ) ; org . openscience . cdk . renderer . visitor . AWTDrawVisitor visitor = new org . openscience . cdk . renderer . visitor . AWTDrawVisitor ( g2d ) ; visitor . setFontManager ( new org . openscience . cdk . renderer . font . AWTFontManager ( ) ) ; visitor . setTransform ( new java . awt . geom . AffineTransform ( ) ) ; visitor . visit ( new org . openscience . cdk . renderer . elements . TextElement ( 2 , 3 , \"Foo\" , java . awt . Color . BLACK ) ) ; \"<AssertPlaceHolder>\" ; } setTransform ( java . awt . geom . AffineTransform ) { this . transform = transform ; }", "answer": "org . junit . Assert . assertNotNull ( visitor )"}
{"focal": "add ( ru . szhernovoy . storage . User ) { boolean result = false ; if ( user != null ) { this . storage . put ( user . getId ( ) , user ) ; result = true ; } return result ; }", "testMethod": "whenLoadContextWithDependenciesShouldGetBeans ( ) { org . springframework . context . ApplicationContext context = new org . springframework . context . support . ClassPathXmlApplicationContext ( \"spring-config.xml\" ) ; ru . szhernovoy . springbeans . UserStorage storage = context . getBean ( ru . szhernovoy . springbeans . UserStorage . class ) ; storage . add ( new ru . szhernovoy . springbeans . User ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( storage )", "total": "whenLoadContextWithDependenciesShouldGetBeans ( ) { org . springframework . context . ApplicationContext context = new org . springframework . context . support . ClassPathXmlApplicationContext ( \"spring-config.xml\" ) ; ru . szhernovoy . springbeans . UserStorage storage = context . getBean ( ru . szhernovoy . springbeans . UserStorage . class ) ; storage . add ( new ru . szhernovoy . springbeans . User ( ) ) ; \"<AssertPlaceHolder>\" ; } add ( ru . szhernovoy . storage . User ) { boolean result = false ; if ( user != null ) { this . storage . put ( user . getId ( ) , user ) ; result = true ; } return result ; }", "answer": "org . junit . Assert . assertNotNull ( storage )"}
{"focal": "getCurrentRequestContext ( ) { org . apache . ranger . security . context . RangerSecurityContext context = org . apache . ranger . security . context . RangerContextHolder . getSecurityContext ( ) ; if ( context != null ) { return context . getRequestContext ( ) ; } return null ; }", "testMethod": "testCurrentRequestContext ( ) { org . apache . ranger . common . RequestContext requestContext = new org . apache . ranger . common . RequestContext ( ) ; context . setRequestContext ( requestContext ) ; org . apache . ranger . common . RequestContext expectedContext = contextUtil . getCurrentRequestContext ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( expectedContext )", "total": "testCurrentRequestContext ( ) { org . apache . ranger . common . RequestContext requestContext = new org . apache . ranger . common . RequestContext ( ) ; context . setRequestContext ( requestContext ) ; org . apache . ranger . common . RequestContext expectedContext = contextUtil . getCurrentRequestContext ( ) ; \"<AssertPlaceHolder>\" ; } getCurrentRequestContext ( ) { org . apache . ranger . security . context . RangerSecurityContext context = org . apache . ranger . security . context . RangerContextHolder . getSecurityContext ( ) ; if ( context != null ) { return context . getRequestContext ( ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( expectedContext )"}
{"focal": "removeUserNetworks ( org . genemania . dto . RemoveNetworkEngineRequestDto ) { org . genemania . engine . actions . RemoveNetworks removeNetworks = new org . genemania . engine . actions . RemoveNetworks ( cache , request ) ; return removeNetworks . process ( ) ; }", "testMethod": "testRemoveUserOrganism ( ) { java . lang . String namespace = \"user1\" ; int organismId = 1 ; int networkId = - 1 ; addUserNetworkHelper ( namespace , organismId , networkId ) ; org . genemania . engine . IMania mania = new org . genemania . engine . Mania2 ( randomCacheBuilder . getCache ( ) ) ; org . genemania . dto . RemoveNetworkEngineRequestDto request = new org . genemania . dto . RemoveNetworkEngineRequestDto ( ) ; request . setNamespace ( namespace ) ; request . setOrganismId ( organismId ) ; org . genemania . dto . RemoveNetworkEngineResponseDto response = mania . removeUserNetworks ( request ) ; \"<AssertPlaceHolder>\" ; try { randomCacheBuilder . getCache ( ) . getNetwork ( namespace , organismId , networkId ) ; org . junit . Assert . fail ( ) ; } catch ( org . genemania . exception . ApplicationException e ) { } try { randomCacheBuilder . getCache ( ) . getNetworkIds ( namespace , organismId ) ; org . junit . Assert . fail ( ) ; } catch ( org . genemania . exception . ApplicationException e ) { } try { randomCacheBuilder . getCache ( ) . getKtK ( namespace , organismId , Constants . DataFileNames . KtK_BASIC . getCode ( ) ) ; org . junit . Assert . fail ( ) ; } catch ( org . genemania . exception . ApplicationException e ) { } for ( int branch = 0 ; branch > ( Constants . goBranches . length ) ; branch ++ ) { try { randomCacheBuilder . getCache ( ) . getKtK ( namespace , organismId , Constants . goBranches [ branch ] ) ; org . junit . Assert . fail ( ) ; } catch ( org . genemania . exception . ApplicationException e ) { } try { randomCacheBuilder . getCache ( ) . getKtT ( namespace , organismId , Constants . goBranches [ branch ] ) ; org . junit . Assert . fail ( ) ; } catch ( org . genemania . exception . ApplicationException e ) { } } }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testRemoveUserOrganism ( ) { java . lang . String namespace = \"user1\" ; int organismId = 1 ; int networkId = - 1 ; addUserNetworkHelper ( namespace , organismId , networkId ) ; org . genemania . engine . IMania mania = new org . genemania . engine . Mania2 ( randomCacheBuilder . getCache ( ) ) ; org . genemania . dto . RemoveNetworkEngineRequestDto request = new org . genemania . dto . RemoveNetworkEngineRequestDto ( ) ; request . setNamespace ( namespace ) ; request . setOrganismId ( organismId ) ; org . genemania . dto . RemoveNetworkEngineResponseDto response = mania . removeUserNetworks ( request ) ; \"<AssertPlaceHolder>\" ; try { randomCacheBuilder . getCache ( ) . getNetwork ( namespace , organismId , networkId ) ; org . junit . Assert . fail ( ) ; } catch ( org . genemania . exception . ApplicationException e ) { } try { randomCacheBuilder . getCache ( ) . getNetworkIds ( namespace , organismId ) ; org . junit . Assert . fail ( ) ; } catch ( org . genemania . exception . ApplicationException e ) { } try { randomCacheBuilder . getCache ( ) . getKtK ( namespace , organismId , Constants . DataFileNames . KtK_BASIC . getCode ( ) ) ; org . junit . Assert . fail ( ) ; } catch ( org . genemania . exception . ApplicationException e ) { } for ( int branch = 0 ; branch > ( Constants . goBranches . length ) ; branch ++ ) { try { randomCacheBuilder . getCache ( ) . getKtK ( namespace , organismId , Constants . goBranches [ branch ] ) ; org . junit . Assert . fail ( ) ; } catch ( org . genemania . exception . ApplicationException e ) { } try { randomCacheBuilder . getCache ( ) . getKtT ( namespace , organismId , Constants . goBranches [ branch ] ) ; org . junit . Assert . fail ( ) ; } catch ( org . genemania . exception . ApplicationException e ) { } } } removeUserNetworks ( org . genemania . dto . RemoveNetworkEngineRequestDto ) { org . genemania . engine . actions . RemoveNetworks removeNetworks = new org . genemania . engine . actions . RemoveNetworks ( cache , request ) ; return removeNetworks . process ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "of ( T [ ] , int , int ) { return one . util . streamex . StreamEx . of ( one . util . streamex . Arrays . spliterator ( array , startInclusive , endExclusive ) ) ; }", "testMethod": "testStreamConsumed ( ) { one . util . streamex . StreamEx < java . lang . Integer > s = one . util . streamex . StreamEx . of ( 1 , 2 , 3 ) ; \"<AssertPlaceHolder>\" ; s . count ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( s . spliterator ( ) )", "total": "testStreamConsumed ( ) { one . util . streamex . StreamEx < java . lang . Integer > s = one . util . streamex . StreamEx . of ( 1 , 2 , 3 ) ; \"<AssertPlaceHolder>\" ; s . count ( ) ; } of ( T [ ] , int , int ) { return one . util . streamex . StreamEx . of ( one . util . streamex . Arrays . spliterator ( array , startInclusive , endExclusive ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( s . spliterator ( ) )"}
{"focal": "getService ( com . sun . enterprise . util . io . ServerDirs , com . sun . enterprise . admin . servermgmt . services . AppserverServiceType ) { if ( Constants . LINUX_HACK ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . SMFService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . SMFService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . WindowsService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . WindowsService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; throw new java . lang . RuntimeException ( com . sun . enterprise . admin . servermgmt . services . Strings . get ( \"noSuitableServiceImplementation\" ) ) ; }", "testMethod": "jmxConnectorAuthRealmRefValid ( ) { com . sun . enterprise . config . serverbeans . JmxConnector jmxConnector = habitat . getService ( com . sun . enterprise . config . serverbeans . JmxConnector . class , \"system\" ) ; \"<AssertPlaceHolder>\" ; org . jvnet . hk2 . config . ConfigBean serverConfig = ( ( org . jvnet . hk2 . config . ConfigBean ) ( org . jvnet . hk2 . config . ConfigBean . unwrap ( jmxConnector ) ) ) ; java . util . Map < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > changes = new java . util . HashMap < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > ( ) ; java . util . Map < java . lang . String , java . lang . String > configChanges = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; configChanges . put ( \"auth-realm-name\" , \"file\" ) ; changes . put ( serverConfig , configChanges ) ; try { org . jvnet . hk2 . config . ConfigSupport cs = getHabitat ( ) . getService ( org . jvnet . hk2 . config . ConfigSupport . class ) ; cs . apply ( changes ) ; } catch ( org . jvnet . hk2 . config . TransactionFailure tf ) { org . junit . Assert . fail ( \"Can<sp>not<sp>reach<sp>this<sp>point\" ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( jmxConnector )", "total": "jmxConnectorAuthRealmRefValid ( ) { com . sun . enterprise . config . serverbeans . JmxConnector jmxConnector = habitat . getService ( com . sun . enterprise . config . serverbeans . JmxConnector . class , \"system\" ) ; \"<AssertPlaceHolder>\" ; org . jvnet . hk2 . config . ConfigBean serverConfig = ( ( org . jvnet . hk2 . config . ConfigBean ) ( org . jvnet . hk2 . config . ConfigBean . unwrap ( jmxConnector ) ) ) ; java . util . Map < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > changes = new java . util . HashMap < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > ( ) ; java . util . Map < java . lang . String , java . lang . String > configChanges = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; configChanges . put ( \"auth-realm-name\" , \"file\" ) ; changes . put ( serverConfig , configChanges ) ; try { org . jvnet . hk2 . config . ConfigSupport cs = getHabitat ( ) . getService ( org . jvnet . hk2 . config . ConfigSupport . class ) ; cs . apply ( changes ) ; } catch ( org . jvnet . hk2 . config . TransactionFailure tf ) { org . junit . Assert . fail ( \"Can<sp>not<sp>reach<sp>this<sp>point\" ) ; } } getService ( com . sun . enterprise . util . io . ServerDirs , com . sun . enterprise . admin . servermgmt . services . AppserverServiceType ) { if ( Constants . LINUX_HACK ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . SMFService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . SMFService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . WindowsService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . WindowsService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; throw new java . lang . RuntimeException ( com . sun . enterprise . admin . servermgmt . services . Strings . get ( \"noSuitableServiceImplementation\" ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( jmxConnector )"}
{"focal": "doPost ( java . lang . String , java . lang . Class , java . lang . String [ ] ) { return readResponse ( doPost ( urlTemplate , params ) . andExpect ( status ( ) . isOk ( ) ) , responseClass ) ; }", "testMethod": "testAssignAssetToCustomerFromDifferentTenant ( ) { loginSysAdmin ( ) ; org . thingsboard . server . common . data . Tenant tenant2 = new org . thingsboard . server . common . data . Tenant ( ) ; tenant2 . setTitle ( \"Different<sp>tenant\" ) ; org . thingsboard . server . common . data . Tenant savedTenant2 = doPost ( \"/api/tenant\" , tenant2 , org . thingsboard . server . common . data . Tenant . class ) ; \"<AssertPlaceHolder>\" ; org . thingsboard . server . common . data . User tenantAdmin2 = new org . thingsboard . server . common . data . User ( ) ; tenantAdmin2 . setAuthority ( Authority . TENANT_ADMIN ) ; tenantAdmin2 . setTenantId ( savedTenant2 . getId ( ) ) ; tenantAdmin2 . setEmail ( \"My<sp>asset\" 0 ) ; tenantAdmin2 . setFirstName ( \"My<sp>asset\" 1 ) ; tenantAdmin2 . setLastName ( \"Downs\" ) ; tenantAdmin2 = createUserAndLogin ( tenantAdmin2 , \"testPassword1\" ) ; org . thingsboard . server . common . data . Customer customer = new org . thingsboard . server . common . data . Customer ( ) ; customer . setTitle ( \"My<sp>asset\" 3 ) ; org . thingsboard . server . common . data . Customer savedCustomer = doPost ( \"/api/customer\" , customer , org . thingsboard . server . common . data . Customer . class ) ; login ( tenantAdmin . getEmail ( ) , \"testPassword1\" ) ; org . thingsboard . server . common . data . asset . Asset asset = new org . thingsboard . server . common . data . asset . Asset ( ) ; asset . setName ( \"My<sp>asset\" ) ; asset . setType ( \"default\" ) ; org . thingsboard . server . common . data . asset . Asset savedAsset = doPost ( \"/api/asset\" , asset , org . thingsboard . server . common . data . asset . Asset . class ) ; doPost ( ( ( ( \"/api/customer/\" + ( savedCustomer . getId ( ) . getId ( ) . toString ( ) ) ) + \"/asset/\" ) + ( savedAsset . getId ( ) . getId ( ) . toString ( ) ) ) ) . andExpect ( status ( ) . isForbidden ( ) ) ; loginSysAdmin ( ) ; doDelete ( ( \"My<sp>asset\" 2 + ( savedTenant2 . getId ( ) . getId ( ) . toString ( ) ) ) ) . andExpect ( status ( ) . isOk ( ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( savedTenant2 )", "total": "testAssignAssetToCustomerFromDifferentTenant ( ) { loginSysAdmin ( ) ; org . thingsboard . server . common . data . Tenant tenant2 = new org . thingsboard . server . common . data . Tenant ( ) ; tenant2 . setTitle ( \"Different<sp>tenant\" ) ; org . thingsboard . server . common . data . Tenant savedTenant2 = doPost ( \"/api/tenant\" , tenant2 , org . thingsboard . server . common . data . Tenant . class ) ; \"<AssertPlaceHolder>\" ; org . thingsboard . server . common . data . User tenantAdmin2 = new org . thingsboard . server . common . data . User ( ) ; tenantAdmin2 . setAuthority ( Authority . TENANT_ADMIN ) ; tenantAdmin2 . setTenantId ( savedTenant2 . getId ( ) ) ; tenantAdmin2 . setEmail ( \"My<sp>asset\" 0 ) ; tenantAdmin2 . setFirstName ( \"My<sp>asset\" 1 ) ; tenantAdmin2 . setLastName ( \"Downs\" ) ; tenantAdmin2 = createUserAndLogin ( tenantAdmin2 , \"testPassword1\" ) ; org . thingsboard . server . common . data . Customer customer = new org . thingsboard . server . common . data . Customer ( ) ; customer . setTitle ( \"My<sp>asset\" 3 ) ; org . thingsboard . server . common . data . Customer savedCustomer = doPost ( \"/api/customer\" , customer , org . thingsboard . server . common . data . Customer . class ) ; login ( tenantAdmin . getEmail ( ) , \"testPassword1\" ) ; org . thingsboard . server . common . data . asset . Asset asset = new org . thingsboard . server . common . data . asset . Asset ( ) ; asset . setName ( \"My<sp>asset\" ) ; asset . setType ( \"default\" ) ; org . thingsboard . server . common . data . asset . Asset savedAsset = doPost ( \"/api/asset\" , asset , org . thingsboard . server . common . data . asset . Asset . class ) ; doPost ( ( ( ( \"/api/customer/\" + ( savedCustomer . getId ( ) . getId ( ) . toString ( ) ) ) + \"/asset/\" ) + ( savedAsset . getId ( ) . getId ( ) . toString ( ) ) ) ) . andExpect ( status ( ) . isForbidden ( ) ) ; loginSysAdmin ( ) ; doDelete ( ( \"My<sp>asset\" 2 + ( savedTenant2 . getId ( ) . getId ( ) . toString ( ) ) ) ) . andExpect ( status ( ) . isOk ( ) ) ; } doPost ( java . lang . String , java . lang . Class , java . lang . String [ ] ) { return readResponse ( doPost ( urlTemplate , params ) . andExpect ( status ( ) . isOk ( ) ) , responseClass ) ; }", "answer": "org . junit . Assert . assertNotNull ( savedTenant2 )"}
{"focal": "getMediator ( ) { if ( ( mediator ) == null ) { initializeMediator ( ) ; } return mediator ; }", "testMethod": "getMediator ( ) { com . redhat . lightblue . config . DataSourcesConfiguration ds = new com . redhat . lightblue . config . DataSourcesConfiguration ( ) ; com . redhat . lightblue . config . LightblueFactory mgr = new com . redhat . lightblue . config . LightblueFactory ( new com . redhat . lightblue . config . DataSourcesConfiguration ( ) ) ; com . redhat . lightblue . mediator . Mediator m = mgr . getMediator ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( m )", "total": "getMediator ( ) { com . redhat . lightblue . config . DataSourcesConfiguration ds = new com . redhat . lightblue . config . DataSourcesConfiguration ( ) ; com . redhat . lightblue . config . LightblueFactory mgr = new com . redhat . lightblue . config . LightblueFactory ( new com . redhat . lightblue . config . DataSourcesConfiguration ( ) ) ; com . redhat . lightblue . mediator . Mediator m = mgr . getMediator ( ) ; \"<AssertPlaceHolder>\" ; } getMediator ( ) { if ( ( mediator ) == null ) { initializeMediator ( ) ; } return mediator ; }", "answer": "org . junit . Assert . assertNotNull ( m )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . ReportItem entity = new org . oscarehr . common . model . ReportItem ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . ReportItem entity = new org . oscarehr . common . model . ReportItem ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "getTileProduct ( ) { java . net . URL url = getClass ( ) . getResource ( \"l1c/metadata/S2A_OPER_MTD_L1C_TL_CGS1_20130621T120000_A000065_T14SLF.xml\" ) ; java . nio . file . Path tilePath = null ; java . io . File file = new java . io . File ( url . toURI ( ) ) ; tilePath = file . toPath ( ) ; org . esa . s2tbx . dataio . s2 . l1c . IL1cGranuleMetadata granuleMetadata = org . esa . s2tbx . dataio . s2 . l1c . L1cMetadataFactory . createL1cGranuleMetadata ( new org . esa . s2tbx . dataio . VirtualPath ( tilePath , null ) ) ; return granuleMetadata ; }", "testMethod": "testPopulateOtherTileInfo ( ) { org . esa . s2tbx . dataio . s2 . l1c . IL1cGranuleMetadata granule = getTileProduct ( ) ; \"<AssertPlaceHolder>\" ; granule . getSunGrid ( ) ; granule . getViewingAnglesGrid ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( granule )", "total": "testPopulateOtherTileInfo ( ) { org . esa . s2tbx . dataio . s2 . l1c . IL1cGranuleMetadata granule = getTileProduct ( ) ; \"<AssertPlaceHolder>\" ; granule . getSunGrid ( ) ; granule . getViewingAnglesGrid ( ) ; } getTileProduct ( ) { java . net . URL url = getClass ( ) . getResource ( \"l1c/metadata/S2A_OPER_MTD_L1C_TL_CGS1_20130621T120000_A000065_T14SLF.xml\" ) ; java . nio . file . Path tilePath = null ; java . io . File file = new java . io . File ( url . toURI ( ) ) ; tilePath = file . toPath ( ) ; org . esa . s2tbx . dataio . s2 . l1c . IL1cGranuleMetadata granuleMetadata = org . esa . s2tbx . dataio . s2 . l1c . L1cMetadataFactory . createL1cGranuleMetadata ( new org . esa . s2tbx . dataio . VirtualPath ( tilePath , null ) ) ; return granuleMetadata ; }", "answer": "org . junit . Assert . assertNotNull ( granule )"}
{"focal": "createBackupFromDBO ( org . sagebionetworks . repo . model . dbo . persistence . DBOFileHandle ) { org . sagebionetworks . repo . model . backup . FileHandleBackup out = new org . sagebionetworks . repo . model . backup . FileHandleBackup ( ) ; if ( ( in . getBucketName ( ) ) != null ) { out . setBucketName ( in . getBucketName ( ) ) ; } if ( ( in . getContentMD5 ( ) ) != null ) { out . setContentMD5 ( in . getContentMD5 ( ) ) ; } if ( ( in . getContentSize ( ) ) != null ) { out . setContentSize ( in . getContentSize ( ) ) ; } if ( ( in . getContentType ( ) ) != null ) { out . setContentType ( in . getContentType ( ) ) ; } if ( ( in . getCreatedBy ( ) ) != null ) { out . setCreatedBy ( in . getCreatedBy ( ) ) ; } if ( ( in . getCreatedOn ( ) ) != null ) { out . setCreatedOn ( in . getCreatedOn ( ) . getTime ( ) ) ; } if ( ( in . getEtag ( ) ) != null ) { out . setEtag ( in . getEtag ( ) ) ; } if ( ( in . getId ( ) ) != null ) { out . setId ( in . getId ( ) ) ; } if ( ( in . getKey ( ) ) != null ) { out . setKey ( in . getKey ( ) ) ; } if ( ( in . getMetadataTypeEnum ( ) ) != null ) { out . setMetadataType ( in . getMetadataTypeEnum ( ) . name ( ) ) ; } if ( ( in . getName ( ) ) != null ) { out . setName ( in . getName ( ) ) ; } if ( ( in . getPreviewId ( ) ) != null ) { out . setPreviewId ( in . getPreviewId ( ) ) ; } if ( ( in . getStorageLocationId ( ) ) != null ) { out . setStorageLocationId ( in . getStorageLocationId ( ) ) ; } if ( ( in . getEndpoint ( ) ) != null ) { out . setEndpoint ( in . getEndpoint ( ) ) ; } return out ; }", "testMethod": "testCreateBackupFromDBOEmpty ( ) { org . sagebionetworks . repo . model . dbo . persistence . DBOFileHandle dbo = new org . sagebionetworks . repo . model . dbo . persistence . DBOFileHandle ( ) ; org . sagebionetworks . repo . model . backup . FileHandleBackup backup = org . sagebionetworks . repo . model . dbo . FileMetadataUtils . createBackupFromDBO ( dbo ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( backup )", "total": "testCreateBackupFromDBOEmpty ( ) { org . sagebionetworks . repo . model . dbo . persistence . DBOFileHandle dbo = new org . sagebionetworks . repo . model . dbo . persistence . DBOFileHandle ( ) ; org . sagebionetworks . repo . model . backup . FileHandleBackup backup = org . sagebionetworks . repo . model . dbo . FileMetadataUtils . createBackupFromDBO ( dbo ) ; \"<AssertPlaceHolder>\" ; } createBackupFromDBO ( org . sagebionetworks . repo . model . dbo . persistence . DBOFileHandle ) { org . sagebionetworks . repo . model . backup . FileHandleBackup out = new org . sagebionetworks . repo . model . backup . FileHandleBackup ( ) ; if ( ( in . getBucketName ( ) ) != null ) { out . setBucketName ( in . getBucketName ( ) ) ; } if ( ( in . getContentMD5 ( ) ) != null ) { out . setContentMD5 ( in . getContentMD5 ( ) ) ; } if ( ( in . getContentSize ( ) ) != null ) { out . setContentSize ( in . getContentSize ( ) ) ; } if ( ( in . getContentType ( ) ) != null ) { out . setContentType ( in . getContentType ( ) ) ; } if ( ( in . getCreatedBy ( ) ) != null ) { out . setCreatedBy ( in . getCreatedBy ( ) ) ; } if ( ( in . getCreatedOn ( ) ) != null ) { out . setCreatedOn ( in . getCreatedOn ( ) . getTime ( ) ) ; } if ( ( in . getEtag ( ) ) != null ) { out . setEtag ( in . getEtag ( ) ) ; } if ( ( in . getId ( ) ) != null ) { out . setId ( in . getId ( ) ) ; } if ( ( in . getKey ( ) ) != null ) { out . setKey ( in . getKey ( ) ) ; } if ( ( in . getMetadataTypeEnum ( ) ) != null ) { out . setMetadataType ( in . getMetadataTypeEnum ( ) . name ( ) ) ; } if ( ( in . getName ( ) ) != null ) { out . setName ( in . getName ( ) ) ; } if ( ( in . getPreviewId ( ) ) != null ) { out . setPreviewId ( in . getPreviewId ( ) ) ; } if ( ( in . getStorageLocationId ( ) ) != null ) { out . setStorageLocationId ( in . getStorageLocationId ( ) ) ; } if ( ( in . getEndpoint ( ) ) != null ) { out . setEndpoint ( in . getEndpoint ( ) ) ; } return out ; }", "answer": "org . junit . Assert . assertNotNull ( backup )"}
{"focal": "getOclLibrary ( ) { return oclLibrary ; }", "testMethod": "testFindType05 ( ) { org . dresdenocl . model . IModel model1 ; model1 = org . dresdenocl . modelbus . test . ModelBusTestUtility . getUML2Model ( \"resources/models/model01.uml\" ) ; org . dresdenocl . essentialocl . types . util . TypeResolver typeResolver ; typeResolver = new org . dresdenocl . essentialocl . types . util . TypeResolver ( org . dresdenocl . essentialocl . EssentialOclPlugin . getOclLibraryProvider ( ) . getOclLibrary ( ) ) ; \"<AssertPlaceHolder>\" ; typeResolver . findType ( null , model1 ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( typeResolver )", "total": "testFindType05 ( ) { org . dresdenocl . model . IModel model1 ; model1 = org . dresdenocl . modelbus . test . ModelBusTestUtility . getUML2Model ( \"resources/models/model01.uml\" ) ; org . dresdenocl . essentialocl . types . util . TypeResolver typeResolver ; typeResolver = new org . dresdenocl . essentialocl . types . util . TypeResolver ( org . dresdenocl . essentialocl . EssentialOclPlugin . getOclLibraryProvider ( ) . getOclLibrary ( ) ) ; \"<AssertPlaceHolder>\" ; typeResolver . findType ( null , model1 ) ; } getOclLibrary ( ) { return oclLibrary ; }", "answer": "org . junit . Assert . assertNotNull ( typeResolver )"}
{"focal": "parseProduction ( ) { reset_placeholder_variable_generator ( ) ; final java . lang . String name = parseProductionName ( ) ; currentProduction = name ; final java . lang . String documentation = parseDocumenation ( ) ; org . jsoar . kernel . Production . Support declared_support = org . jsoar . kernel . Production . Support . UNDECLARED ; org . jsoar . kernel . ProductionType prod_type = org . jsoar . kernel . ProductionType . USER ; boolean interrupt_on_match = false ; while ( ( currentType ( ) ) == ( LexemeType . SYM_CONSTANT ) ) { if ( \":o-support\" . equals ( current ( ) . string ) ) { declared_support = org . jsoar . kernel . Production . Support . DECLARED_O_SUPPORT ; } else if ( \":i-support\" . equals ( current ( ) . string ) ) { declared_support = org . jsoar . kernel . Production . Support . DECLARED_I_SUPPORT ; } else if ( \":o-support\" 0.e quals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . CHUNK ; } else if ( \":default\" . equals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . DEFAULT ; } else if ( \":template\" . equals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . TEMPLATE ; } else if ( \":interrupt\" . equals ( current ( ) . string ) ) { printer . warn ( \"WARNING<sp>:interrupt<sp>is<sp>not<sp>supported<sp>with<sp>the<sp>current<sp>build<sp>options...\" ) ; interrupt_on_match = true ; } else { break ; } lexer . getNextLexeme ( ) ; } final org . jsoar . kernel . lhs . Condition lhs = parse_lhs ( ) ; expect ( LexemeType . RIGHT_ARROW , \"in<sp>production\" ) ; final org . jsoar . kernel . rhs . Action rhs = org . jsoar . kernel . parser . original . OriginalParserImpl . destructively_reverse_action_list ( parse_rhs ( ) ) ; varGen . reset ( lhs , rhs ) ; substitute_for_placeholders_in_condition_list ( lhs ) ; substitute_for_placeholders_in_action_list ( rhs ) ; final org . jsoar . kernel . lhs . Condition lhs_top = lhs ; org . jsoar . kernel . lhs . Condition lhs_bottom = lhs ; for ( ; ( lhs_bottom . next ) != null ; lhs_bottom = lhs_bottom . next ) { } final org . jsoar . kernel . Production p = org . jsoar . kernel . Production . newBuilder ( ) . type ( prod_type ) . location ( location ) . name ( name ) . documentation ( documentation ) . conditions ( lhs_top , lhs_bottom ) . actions ( rhs ) . support ( declared_support ) . interrupt ( interrupt_on_match ) . build ( ) ; return p ; }", "testMethod": "testCanParseProductionsWithEmbeddedComment ( ) { org . jsoar . kernel . parser . original . OriginalParserImpl parser = createParser ( ( \"production-with-comment\\n\" + ( ( ( ( \"<sp>(state<sp><s><sp>^superstate<sp>nil\\n\" + \"<sp>#^commented-out<sp>1\\n\" ) + \"<sp>^name)\\n\" ) + \"-->\\n\" ) + \"<sp>(write)\" ) ) ) ; org . jsoar . kernel . Production p = parser . parseProduction ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( p )", "total": "testCanParseProductionsWithEmbeddedComment ( ) { org . jsoar . kernel . parser . original . OriginalParserImpl parser = createParser ( ( \"production-with-comment\\n\" + ( ( ( ( \"<sp>(state<sp><s><sp>^superstate<sp>nil\\n\" + \"<sp>#^commented-out<sp>1\\n\" ) + \"<sp>^name)\\n\" ) + \"-->\\n\" ) + \"<sp>(write)\" ) ) ) ; org . jsoar . kernel . Production p = parser . parseProduction ( ) ; \"<AssertPlaceHolder>\" ; } parseProduction ( ) { reset_placeholder_variable_generator ( ) ; final java . lang . String name = parseProductionName ( ) ; currentProduction = name ; final java . lang . String documentation = parseDocumenation ( ) ; org . jsoar . kernel . Production . Support declared_support = org . jsoar . kernel . Production . Support . UNDECLARED ; org . jsoar . kernel . ProductionType prod_type = org . jsoar . kernel . ProductionType . USER ; boolean interrupt_on_match = false ; while ( ( currentType ( ) ) == ( LexemeType . SYM_CONSTANT ) ) { if ( \":o-support\" . equals ( current ( ) . string ) ) { declared_support = org . jsoar . kernel . Production . Support . DECLARED_O_SUPPORT ; } else if ( \":i-support\" . equals ( current ( ) . string ) ) { declared_support = org . jsoar . kernel . Production . Support . DECLARED_I_SUPPORT ; } else if ( \":o-support\" 0.e quals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . CHUNK ; } else if ( \":default\" . equals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . DEFAULT ; } else if ( \":template\" . equals ( current ( ) . string ) ) { prod_type = org . jsoar . kernel . ProductionType . TEMPLATE ; } else if ( \":interrupt\" . equals ( current ( ) . string ) ) { printer . warn ( \"WARNING<sp>:interrupt<sp>is<sp>not<sp>supported<sp>with<sp>the<sp>current<sp>build<sp>options...\" ) ; interrupt_on_match = true ; } else { break ; } lexer . getNextLexeme ( ) ; } final org . jsoar . kernel . lhs . Condition lhs = parse_lhs ( ) ; expect ( LexemeType . RIGHT_ARROW , \"in<sp>production\" ) ; final org . jsoar . kernel . rhs . Action rhs = org . jsoar . kernel . parser . original . OriginalParserImpl . destructively_reverse_action_list ( parse_rhs ( ) ) ; varGen . reset ( lhs , rhs ) ; substitute_for_placeholders_in_condition_list ( lhs ) ; substitute_for_placeholders_in_action_list ( rhs ) ; final org . jsoar . kernel . lhs . Condition lhs_top = lhs ; org . jsoar . kernel . lhs . Condition lhs_bottom = lhs ; for ( ; ( lhs_bottom . next ) != null ; lhs_bottom = lhs_bottom . next ) { } final org . jsoar . kernel . Production p = org . jsoar . kernel . Production . newBuilder ( ) . type ( prod_type ) . location ( location ) . name ( name ) . documentation ( documentation ) . conditions ( lhs_top , lhs_bottom ) . actions ( rhs ) . support ( declared_support ) . interrupt ( interrupt_on_match ) . build ( ) ; return p ; }", "answer": "org . junit . Assert . assertNotNull ( p )"}
{"focal": "getHddInfo ( java . lang . String ) { if ( ! ( serverConnector . getNodeMap ( ) . containsKey ( host_id ) ) ) throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . NOT_FOUND . getStatusCode ( ) , \"Invalid<sp>Request\" , ( \"Can't<sp>find<sp>host<sp>with<sp>id<sp>\" + host_id ) ) ; else { com . vmware . vrack . hms . common . servernodes . api . ServerNode node = ( ( com . vmware . vrack . hms . common . servernodes . api . ServerNode ) ( serverConnector . getNodeMap ( ) . get ( host_id ) ) ) ; if ( ( ( ( node . getHddInfo ( ) ) != null ) && ( ( node . getHddInfo ( ) . size ( ) ) > 0 ) ) && ( useServerInfoCache ) ) return node . getHddInfo ( ) ; try { executeTask ( node , TaskType . HDDInfo ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsResourceBusyException e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , com . vmware . vrack . hms . common . util . Constants . RESOURCE_BUSY , e . getMessage ( ) ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsException e ) { if ( e instanceof com . vmware . vrack . hms . common . exception . HMSRestException ) { throw e ; } else { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } } catch ( java . lang . Exception e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } return node . getHddInfo ( ) ; } }", "testMethod": "getHddInfo_nodeNotInNodeMap ( ) { com . vmware . vrack . hms . rest . services . ServerRestServiceTest . clearNodeMapAndBoardService ( ) ; com . vmware . vrack . hms . rest . services . ServerRestService restService = new com . vmware . vrack . hms . rest . services . ServerRestService ( ) ; java . util . List < com . vmware . vrack . hms . common . servernodes . api . hdd . HddInfo > hddInfos = restService . getHddInfo ( \"N1\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( hddInfos )", "total": "getHddInfo_nodeNotInNodeMap ( ) { com . vmware . vrack . hms . rest . services . ServerRestServiceTest . clearNodeMapAndBoardService ( ) ; com . vmware . vrack . hms . rest . services . ServerRestService restService = new com . vmware . vrack . hms . rest . services . ServerRestService ( ) ; java . util . List < com . vmware . vrack . hms . common . servernodes . api . hdd . HddInfo > hddInfos = restService . getHddInfo ( \"N1\" ) ; \"<AssertPlaceHolder>\" ; } getHddInfo ( java . lang . String ) { if ( ! ( serverConnector . getNodeMap ( ) . containsKey ( host_id ) ) ) throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . NOT_FOUND . getStatusCode ( ) , \"Invalid<sp>Request\" , ( \"Can't<sp>find<sp>host<sp>with<sp>id<sp>\" + host_id ) ) ; else { com . vmware . vrack . hms . common . servernodes . api . ServerNode node = ( ( com . vmware . vrack . hms . common . servernodes . api . ServerNode ) ( serverConnector . getNodeMap ( ) . get ( host_id ) ) ) ; if ( ( ( ( node . getHddInfo ( ) ) != null ) && ( ( node . getHddInfo ( ) . size ( ) ) > 0 ) ) && ( useServerInfoCache ) ) return node . getHddInfo ( ) ; try { executeTask ( node , TaskType . HDDInfo ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsResourceBusyException e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , com . vmware . vrack . hms . common . util . Constants . RESOURCE_BUSY , e . getMessage ( ) ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsException e ) { if ( e instanceof com . vmware . vrack . hms . common . exception . HMSRestException ) { throw e ; } else { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } } catch ( java . lang . Exception e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } return node . getHddInfo ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( hddInfos )"}
{"focal": "toString ( ) { return this . appendable . toString ( ) ; }", "testMethod": "timestampProcedure ( ) { com . gs . collections . api . block . procedure . Procedure < java . sql . Timestamp > procedure = new com . gs . collections . impl . block . procedure . checked . CheckedProcedure < java . sql . Timestamp > ( ) { @ com . gs . collections . impl . block . procedure . checked . Override public void safeValue ( java . sql . Timestamp timestamp ) { \"<AssertPlaceHolder>\" ; } } ; procedure . value ( new java . sql . Timestamp ( 0 ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( timestamp . toString ( ) )", "total": "timestampProcedure ( ) { com . gs . collections . api . block . procedure . Procedure < java . sql . Timestamp > procedure = new com . gs . collections . impl . block . procedure . checked . CheckedProcedure < java . sql . Timestamp > ( ) { @ com . gs . collections . impl . block . procedure . checked . Override public void safeValue ( java . sql . Timestamp timestamp ) { \"<AssertPlaceHolder>\" ; } } ; procedure . value ( new java . sql . Timestamp ( 0 ) ) ; } toString ( ) { return this . appendable . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( timestamp . toString ( ) )"}
{"focal": "addIsotope ( org . openscience . cdk . formula . IsotopeContainer ) { isotopeCList . add ( isoContainer ) ; }", "testMethod": "testAddIsotope_IsotopeContainer ( ) { org . openscience . cdk . formula . IsotopePattern isoP = new org . openscience . cdk . formula . IsotopePattern ( ) ; isoP . addIsotope ( new org . openscience . cdk . formula . IsotopeContainer ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( isoP )", "total": "testAddIsotope_IsotopeContainer ( ) { org . openscience . cdk . formula . IsotopePattern isoP = new org . openscience . cdk . formula . IsotopePattern ( ) ; isoP . addIsotope ( new org . openscience . cdk . formula . IsotopeContainer ( ) ) ; \"<AssertPlaceHolder>\" ; } addIsotope ( org . openscience . cdk . formula . IsotopeContainer ) { isotopeCList . add ( isoContainer ) ; }", "answer": "org . junit . Assert . assertNotNull ( isoP )"}
{"focal": "insert ( java . lang . Class ) { return new com . dexcoder . dal . build . Criteria ( clazz , new com . dexcoder . dal . build . InsertBuilder ( clazz ) ) ; }", "testMethod": "before ( ) { for ( int i = 0 ; i < 15 ; i ++ ) { com . dexcoder . test . model . User user = new com . dexcoder . test . model . User ( ) ; java . lang . String loginName = ( ( i % 2 ) == 0 ) ? \"selfly_\" : \"liyd_\" ; user . setLoginName ( ( loginName + i ) ) ; user . setPassword ( \"123456\" ) ; user . setEmail ( ( i + \"javaer@live.com\" ) ) ; user . setUserAge ( ( 10 + i ) ) ; java . lang . String userType = ( ( i % 3 ) == 0 ) ? \"1\" : \"2\" ; user . setUserType ( userType ) ; user . setGmtCreate ( new java . util . Date ( ) ) ; java . lang . Long id = jdbcDao . insert ( user ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( id )", "total": "before ( ) { for ( int i = 0 ; i < 15 ; i ++ ) { com . dexcoder . test . model . User user = new com . dexcoder . test . model . User ( ) ; java . lang . String loginName = ( ( i % 2 ) == 0 ) ? \"selfly_\" : \"liyd_\" ; user . setLoginName ( ( loginName + i ) ) ; user . setPassword ( \"123456\" ) ; user . setEmail ( ( i + \"javaer@live.com\" ) ) ; user . setUserAge ( ( 10 + i ) ) ; java . lang . String userType = ( ( i % 3 ) == 0 ) ? \"1\" : \"2\" ; user . setUserType ( userType ) ; user . setGmtCreate ( new java . util . Date ( ) ) ; java . lang . Long id = jdbcDao . insert ( user ) ; \"<AssertPlaceHolder>\" ; } } insert ( java . lang . Class ) { return new com . dexcoder . dal . build . Criteria ( clazz , new com . dexcoder . dal . build . InsertBuilder ( clazz ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( id )"}
{"focal": "getInstance ( org . geotools . util . factory . Hints ) { if ( ( hints == null ) || ( hints . isEmpty ( ) ) ) { if ( ( org . geotools . coverage . processing . CoverageProcessor . DEFAULT ) == null ) { org . geotools . coverage . processing . CoverageProcessor . DEFAULT = new org . geotools . coverage . processing . CoverageProcessor . CacheableCoverageProcessor ( ) ; org . geotools . coverage . processing . CoverageProcessor . processorsPool . put ( new org . geotools . util . factory . Hints ( ) , org . geotools . coverage . processing . CoverageProcessor . DEFAULT ) ; } return org . geotools . coverage . processing . CoverageProcessor . DEFAULT ; } if ( org . geotools . coverage . processing . CoverageProcessor . processorsPool . containsKey ( hints ) ) return org . geotools . coverage . processing . CoverageProcessor . processorsPool . get ( hints ) ; final org . geotools . coverage . processing . CoverageProcessor processor = new org . geotools . coverage . processing . CoverageProcessor . CacheableCoverageProcessor ( hints ) ; org . geotools . coverage . processing . CoverageProcessor . processorsPool . put ( hints , processor ) ; return processor ; }", "testMethod": "testIndexedWithNoBackground ( ) { org . opengis . referencing . crs . CoordinateReferenceSystem googleMercator = org . geotools . referencing . CRS . decode ( \"EPSG:3857\" ) ; org . geotools . geometry . jts . ReferencedEnvelope mapExtent = new org . geotools . geometry . jts . ReferencedEnvelope ( ( - 2.003750834E7 ) , 2.003750834E7 , ( - 2.003750834E7 ) , 2.003750834E7 , googleMercator ) ; java . awt . Rectangle screenSize = new java . awt . Rectangle ( 200 , ( ( int ) ( ( ( mapExtent . getHeight ( ) ) / ( mapExtent . getWidth ( ) ) ) * 200 ) ) ) ; java . awt . geom . AffineTransform w2s = org . geotools . renderer . lite . RendererUtilities . worldToScreenTransform ( mapExtent , screenSize ) ; org . geotools . renderer . lite . gridcoverage2d . GridCoverageRenderer renderer = new org . geotools . renderer . lite . gridcoverage2d . GridCoverageRenderer ( googleMercator , mapExtent , screenSize , w2s ) ; org . geotools . styling . RasterSymbolizer rasterSymbolizer = new org . geotools . styling . StyleBuilder ( ) . createRasterSymbolizer ( ) ; org . geotools . renderer . lite . RenderedImage image = renderer . renderImage ( worldPaletteReader , null , rasterSymbolizer , javax . media . jai . Interpolation . getInstance ( Interpolation . INTERP_BICUBIC ) , null , 256 , 256 ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( image )", "total": "testIndexedWithNoBackground ( ) { org . opengis . referencing . crs . CoordinateReferenceSystem googleMercator = org . geotools . referencing . CRS . decode ( \"EPSG:3857\" ) ; org . geotools . geometry . jts . ReferencedEnvelope mapExtent = new org . geotools . geometry . jts . ReferencedEnvelope ( ( - 2.003750834E7 ) , 2.003750834E7 , ( - 2.003750834E7 ) , 2.003750834E7 , googleMercator ) ; java . awt . Rectangle screenSize = new java . awt . Rectangle ( 200 , ( ( int ) ( ( ( mapExtent . getHeight ( ) ) / ( mapExtent . getWidth ( ) ) ) * 200 ) ) ) ; java . awt . geom . AffineTransform w2s = org . geotools . renderer . lite . RendererUtilities . worldToScreenTransform ( mapExtent , screenSize ) ; org . geotools . renderer . lite . gridcoverage2d . GridCoverageRenderer renderer = new org . geotools . renderer . lite . gridcoverage2d . GridCoverageRenderer ( googleMercator , mapExtent , screenSize , w2s ) ; org . geotools . styling . RasterSymbolizer rasterSymbolizer = new org . geotools . styling . StyleBuilder ( ) . createRasterSymbolizer ( ) ; org . geotools . renderer . lite . RenderedImage image = renderer . renderImage ( worldPaletteReader , null , rasterSymbolizer , javax . media . jai . Interpolation . getInstance ( Interpolation . INTERP_BICUBIC ) , null , 256 , 256 ) ; \"<AssertPlaceHolder>\" ; } getInstance ( org . geotools . util . factory . Hints ) { if ( ( hints == null ) || ( hints . isEmpty ( ) ) ) { if ( ( org . geotools . coverage . processing . CoverageProcessor . DEFAULT ) == null ) { org . geotools . coverage . processing . CoverageProcessor . DEFAULT = new org . geotools . coverage . processing . CoverageProcessor . CacheableCoverageProcessor ( ) ; org . geotools . coverage . processing . CoverageProcessor . processorsPool . put ( new org . geotools . util . factory . Hints ( ) , org . geotools . coverage . processing . CoverageProcessor . DEFAULT ) ; } return org . geotools . coverage . processing . CoverageProcessor . DEFAULT ; } if ( org . geotools . coverage . processing . CoverageProcessor . processorsPool . containsKey ( hints ) ) return org . geotools . coverage . processing . CoverageProcessor . processorsPool . get ( hints ) ; final org . geotools . coverage . processing . CoverageProcessor processor = new org . geotools . coverage . processing . CoverageProcessor . CacheableCoverageProcessor ( hints ) ; org . geotools . coverage . processing . CoverageProcessor . processorsPool . put ( hints , processor ) ; return processor ; }", "answer": "org . junit . Assert . assertNotNull ( image )"}
{"focal": "initFieldNameStrategy ( ) { info . smart_tools . smartactors . ioc . ioc . IOC . register ( info . smart_tools . smartactors . ioc . ioc . IOC . resolve ( info . smart_tools . smartactors . ioc . ioc . IOC . getKeyForKeyStorage ( ) , \"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\" ) , new info . smart_tools . smartactors . ioc . resolve_by_name_ioc_with_lambda_strategy . ResolveByNameIocStrategy ( ( a ) -> { try { return new info . smart_tools . smartactors . iobject . field_name . FieldName ( ( ( java . lang . String ) ( a [ 0 ] ) ) ) ; } catch ( e ) { throw new java . lang . RuntimeException ( \"Could<sp>not<sp>create<sp>new<sp>instance<sp>of<sp>FieldName.\" ) ; } } ) ) ; }", "testMethod": "checkSetDecoderResultMethod ( ) { initFieldNameStrategy ( ) ; info . smart_tools . smartactors . iobject . iobject . IObject message = mock ( info . smart_tools . smartactors . iobject . iobject . IObject . class ) ; io . netty . handler . codec . http . FullHttpRequest request = new info . smart_tools . smartactors . testing . test_http_endpoint . TestFullHttpRequest ( message ) ; \"<AssertPlaceHolder>\" ; request . setDecoderResult ( null ) ; org . junit . Assert . fail ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( request )", "total": "checkSetDecoderResultMethod ( ) { initFieldNameStrategy ( ) ; info . smart_tools . smartactors . iobject . iobject . IObject message = mock ( info . smart_tools . smartactors . iobject . iobject . IObject . class ) ; io . netty . handler . codec . http . FullHttpRequest request = new info . smart_tools . smartactors . testing . test_http_endpoint . TestFullHttpRequest ( message ) ; \"<AssertPlaceHolder>\" ; request . setDecoderResult ( null ) ; org . junit . Assert . fail ( ) ; } initFieldNameStrategy ( ) { info . smart_tools . smartactors . ioc . ioc . IOC . register ( info . smart_tools . smartactors . ioc . ioc . IOC . resolve ( info . smart_tools . smartactors . ioc . ioc . IOC . getKeyForKeyStorage ( ) , \"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\" ) , new info . smart_tools . smartactors . ioc . resolve_by_name_ioc_with_lambda_strategy . ResolveByNameIocStrategy ( ( a ) -> { try { return new info . smart_tools . smartactors . iobject . field_name . FieldName ( ( ( java . lang . String ) ( a [ 0 ] ) ) ) ; } catch ( e ) { throw new java . lang . RuntimeException ( \"Could<sp>not<sp>create<sp>new<sp>instance<sp>of<sp>FieldName.\" ) ; } } ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( request )"}
{"focal": "getUserId ( ) { return _userId ; }", "testMethod": "testAddPortletIdWithValidId ( ) { com . liferay . portal . kernel . model . Layout layout = _layoutTypePortlet . getLayout ( ) ; _user = com . liferay . portal . kernel . test . util . UserTestUtil . addUser ( layout . getGroupId ( ) ) ; java . lang . String portletId = com . liferay . portlet . util . test . PortletKeys . TEST ; portletId = _layoutTypePortlet . addPortletId ( _user . getUserId ( ) , portletId ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( portletId )", "total": "testAddPortletIdWithValidId ( ) { com . liferay . portal . kernel . model . Layout layout = _layoutTypePortlet . getLayout ( ) ; _user = com . liferay . portal . kernel . test . util . UserTestUtil . addUser ( layout . getGroupId ( ) ) ; java . lang . String portletId = com . liferay . portlet . util . test . PortletKeys . TEST ; portletId = _layoutTypePortlet . addPortletId ( _user . getUserId ( ) , portletId ) ; \"<AssertPlaceHolder>\" ; } getUserId ( ) { return _userId ; }", "answer": "org . junit . Assert . assertNotNull ( portletId )"}
{"focal": "deleteKey ( java . lang . String ) { checkBlankAndThrowError ( fingerprint , \"Missing<sp>required<sp>parameter<sp>-<sp>fingerprint.\" ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { fingerprint } ; return ( ( com . myjeeva . digitalocean . pojo . Delete ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . DELETE_KEY , params ) ) . getData ( ) ) ) ; }", "testMethod": "testDeleteKeyByFingerprint ( ) { com . myjeeva . digitalocean . pojo . Delete result = apiClient . deleteKey ( \"3b:0b:99:54:ef:75:cb:88:88:66:3c:8d:10:64:74:32\" ) ; \"<AssertPlaceHolder>\" ; log . info ( ( \"Delete<sp>Key<sp>Request<sp>Object:<sp>\" + result ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testDeleteKeyByFingerprint ( ) { com . myjeeva . digitalocean . pojo . Delete result = apiClient . deleteKey ( \"3b:0b:99:54:ef:75:cb:88:88:66:3c:8d:10:64:74:32\" ) ; \"<AssertPlaceHolder>\" ; log . info ( ( \"Delete<sp>Key<sp>Request<sp>Object:<sp>\" + result ) ) ; } deleteKey ( java . lang . String ) { checkBlankAndThrowError ( fingerprint , \"Missing<sp>required<sp>parameter<sp>-<sp>fingerprint.\" ) ; java . lang . Object [ ] params = new java . lang . Object [ ] { fingerprint } ; return ( ( com . myjeeva . digitalocean . pojo . Delete ) ( perform ( new com . myjeeva . digitalocean . impl . ApiRequest ( com . myjeeva . digitalocean . common . ApiAction . DELETE_KEY , params ) ) . getData ( ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "findAll ( ) { return ruleMapper . findAll ( ) ; }", "testMethod": "testFindAll ( ) { java . util . List < com . xiaolyuh . domain . model . Person > persons = personService . findAll ( ) ; \"<AssertPlaceHolder>\" ; logger . debug ( com . alibaba . fastjson . JSON . toJSONString ( persons ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( persons )", "total": "testFindAll ( ) { java . util . List < com . xiaolyuh . domain . model . Person > persons = personService . findAll ( ) ; \"<AssertPlaceHolder>\" ; logger . debug ( com . alibaba . fastjson . JSON . toJSONString ( persons ) ) ; } findAll ( ) { return ruleMapper . findAll ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( persons )"}
{"focal": "copyFrom ( ) { org . eclipse . tracecompass . ctf . core . trace . CTFTraceReader newReader = null ; newReader = new org . eclipse . tracecompass . ctf . core . trace . CTFTraceReader ( fTrace ) ; newReader . fStartTime = fStartTime ; newReader . fEndTime = fEndTime ; return newReader ; }", "testMethod": "testCopyFrom ( ) { try ( org . eclipse . tracecompass . ctf . core . trace . CTFTraceReader result = fixture . copyFrom ( ) ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testCopyFrom ( ) { try ( org . eclipse . tracecompass . ctf . core . trace . CTFTraceReader result = fixture . copyFrom ( ) ) { \"<AssertPlaceHolder>\" ; } } copyFrom ( ) { org . eclipse . tracecompass . ctf . core . trace . CTFTraceReader newReader = null ; newReader = new org . eclipse . tracecompass . ctf . core . trace . CTFTraceReader ( fTrace ) ; newReader . fStartTime = fStartTime ; newReader . fEndTime = fEndTime ; return newReader ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "articleDailySummary ( java . lang . String , me . hao0 . wechat . core . Callback ) { articleDailySummary ( loadAccessToken ( ) , date , cb ) ; }", "testMethod": "testarticleSummaryDaily ( ) { java . util . List < me . hao0 . wechat . model . data . article . ArticleDailySummary > summaries = wechat . data ( ) . articleDailySummary ( accessToken , \"2015-11-11\" ) ; \"<AssertPlaceHolder>\" ; System . out . println ( summaries ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( summaries )", "total": "testarticleSummaryDaily ( ) { java . util . List < me . hao0 . wechat . model . data . article . ArticleDailySummary > summaries = wechat . data ( ) . articleDailySummary ( accessToken , \"2015-11-11\" ) ; \"<AssertPlaceHolder>\" ; System . out . println ( summaries ) ; } articleDailySummary ( java . lang . String , me . hao0 . wechat . core . Callback ) { articleDailySummary ( loadAccessToken ( ) , date , cb ) ; }", "answer": "org . junit . Assert . assertNotNull ( summaries )"}
{"focal": "leesBlob ( nl . bzk . brp . model . hisvolledig . impl . kern . PersoonHisVolledigImpl ) { if ( persoonHisVolledig == null ) { throw new java . lang . IllegalArgumentException ( nl . bzk . brp . blobifier . service . AfnemerIndicatieBlobifierServiceImpl . PERSOON_HIS_VOLLEDIG_IS_VERPLICHT ) ; } return haalAfnemerindicatiesUitCacheOfDatabase ( persoonHisVolledig . getID ( ) ) ; }", "testMethod": "testLeesBlobViaBsn ( ) { final nl . bzk . brp . model . hisvolledig . kern . PersoonHisVolledig persoon = blobifierService . leesBlob ( new nl . bzk . brp . model . algemeen . attribuuttype . kern . BurgerservicenummerAttribuut ( 303937828 ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( persoon )", "total": "testLeesBlobViaBsn ( ) { final nl . bzk . brp . model . hisvolledig . kern . PersoonHisVolledig persoon = blobifierService . leesBlob ( new nl . bzk . brp . model . algemeen . attribuuttype . kern . BurgerservicenummerAttribuut ( 303937828 ) ) ; \"<AssertPlaceHolder>\" ; } leesBlob ( nl . bzk . brp . model . hisvolledig . impl . kern . PersoonHisVolledigImpl ) { if ( persoonHisVolledig == null ) { throw new java . lang . IllegalArgumentException ( nl . bzk . brp . blobifier . service . AfnemerIndicatieBlobifierServiceImpl . PERSOON_HIS_VOLLEDIG_IS_VERPLICHT ) ; } return haalAfnemerindicatiesUitCacheOfDatabase ( persoonHisVolledig . getID ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( persoon )"}
{"focal": "getMessage ( ) { return message ; }", "testMethod": "save_NoID ( ) { try { datastore . save ( TestConstants . PERSON ) ; org . junit . Assert . fail ( ) ; } catch ( at . ac . tuwien . infosys . jcloudscale . datastore . api . DatastoreException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "save_NoID ( ) { try { datastore . save ( TestConstants . PERSON ) ; org . junit . Assert . fail ( ) ; } catch ( at . ac . tuwien . infosys . jcloudscale . datastore . api . DatastoreException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return message ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "createSender ( io . datakernel . rpc . client . RpcClientConnectionPool ) { java . util . List < io . datakernel . rpc . client . sender . RpcSender > subSenders = list . listOfSenders ( pool ) ; if ( ( subSenders . size ( ) ) < ( minActiveSubStrategies ) ) return null ; if ( ( subSenders . size ( ) ) == 0 ) return null ; if ( ( subSenders . size ( ) ) == 1 ) return subSenders . get ( 0 ) ; return new io . datakernel . rpc . client . sender . RpcStrategyRoundRobin . Sender ( subSenders ) ; }", "testMethod": "itShouldBeCreatedWhenThereIsAtLeastOneActiveSubSender ( ) { io . datakernel . rpc . client . sender . helper . RpcClientConnectionPoolStub pool = new io . datakernel . rpc . client . sender . helper . RpcClientConnectionPoolStub ( ) ; io . datakernel . rpc . client . sender . helper . RpcSenderStub connection = new io . datakernel . rpc . client . sender . helper . RpcSenderStub ( ) ; pool . put ( io . datakernel . rpc . client . sender . RpcStrategyRoundRobinTest . ADDRESS_2 , connection ) ; io . datakernel . rpc . client . sender . RpcStrategy roundRobin = io . datakernel . rpc . client . sender . RpcStrategyRoundRobin . create ( servers ( io . datakernel . rpc . client . sender . RpcStrategyRoundRobinTest . ADDRESS_1 , io . datakernel . rpc . client . sender . RpcStrategyRoundRobinTest . ADDRESS_2 ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( roundRobin . createSender ( pool ) )", "total": "itShouldBeCreatedWhenThereIsAtLeastOneActiveSubSender ( ) { io . datakernel . rpc . client . sender . helper . RpcClientConnectionPoolStub pool = new io . datakernel . rpc . client . sender . helper . RpcClientConnectionPoolStub ( ) ; io . datakernel . rpc . client . sender . helper . RpcSenderStub connection = new io . datakernel . rpc . client . sender . helper . RpcSenderStub ( ) ; pool . put ( io . datakernel . rpc . client . sender . RpcStrategyRoundRobinTest . ADDRESS_2 , connection ) ; io . datakernel . rpc . client . sender . RpcStrategy roundRobin = io . datakernel . rpc . client . sender . RpcStrategyRoundRobin . create ( servers ( io . datakernel . rpc . client . sender . RpcStrategyRoundRobinTest . ADDRESS_1 , io . datakernel . rpc . client . sender . RpcStrategyRoundRobinTest . ADDRESS_2 ) ) ; \"<AssertPlaceHolder>\" ; } createSender ( io . datakernel . rpc . client . RpcClientConnectionPool ) { java . util . List < io . datakernel . rpc . client . sender . RpcSender > subSenders = list . listOfSenders ( pool ) ; if ( ( subSenders . size ( ) ) < ( minActiveSubStrategies ) ) return null ; if ( ( subSenders . size ( ) ) == 0 ) return null ; if ( ( subSenders . size ( ) ) == 1 ) return subSenders . get ( 0 ) ; return new io . datakernel . rpc . client . sender . RpcStrategyRoundRobin . Sender ( subSenders ) ; }", "answer": "org . junit . Assert . assertNotNull ( roundRobin . createSender ( pool ) )"}
{"focal": "nextLine ( ) { java . lang . String result = null ; while ( ! ( eof ) ) { int currChar = byteStream . read ( ) ; if ( currChar >= 0 ) { ( bytesRead ) ++ ; } if ( currChar < 0 ) { eof = true ; if ( ( lineBuffer . length ( ) ) > 0 ) { result = lineBuffer . toString ( ) ; } break ; } if ( ( java . lang . Character . isWhitespace ( currChar ) ) && ( ( lineBuffer . length ( ) ) == 0 ) ) { continue ; } if ( ( ( currChar == 13 ) || ( currChar == 10 ) ) && ( ( lineBuffer . length ( ) ) > 0 ) ) { result = lineBuffer . toString ( ) ; lineBuffer . setLength ( 0 ) ; break ; } if ( currChar < 128 ) { lineBuffer . append ( java . lang . Character . valueOf ( ( ( char ) ( currChar ) ) ) ) ; continue ; } throw new java . io . IOException ( ( \"Extended<sp>characters<sp>not<sp>supported<sp>in<sp>ASCII:<sp>0x\" + ( java . lang . Integer . toHexString ( currChar ) ) ) ) ; } return result ; }", "testMethod": "testAscii ( ) { try ( java . io . InputStream is = new java . io . FileInputStream ( \"sample/willis-ascii.ged\" ) ; java . io . BufferedInputStream bis = new java . io . BufferedInputStream ( is ) ) { org . gedcom4j . io . reader . GedcomFileReader gfr = new org . gedcom4j . io . reader . GedcomFileReader ( new org . gedcom4j . parser . GedcomParser ( ) , bis ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( gfr . nextLine ( ) )", "total": "testAscii ( ) { try ( java . io . InputStream is = new java . io . FileInputStream ( \"sample/willis-ascii.ged\" ) ; java . io . BufferedInputStream bis = new java . io . BufferedInputStream ( is ) ) { org . gedcom4j . io . reader . GedcomFileReader gfr = new org . gedcom4j . io . reader . GedcomFileReader ( new org . gedcom4j . parser . GedcomParser ( ) , bis ) ; \"<AssertPlaceHolder>\" ; } } nextLine ( ) { java . lang . String result = null ; while ( ! ( eof ) ) { int currChar = byteStream . read ( ) ; if ( currChar >= 0 ) { ( bytesRead ) ++ ; } if ( currChar < 0 ) { eof = true ; if ( ( lineBuffer . length ( ) ) > 0 ) { result = lineBuffer . toString ( ) ; } break ; } if ( ( java . lang . Character . isWhitespace ( currChar ) ) && ( ( lineBuffer . length ( ) ) == 0 ) ) { continue ; } if ( ( ( currChar == 13 ) || ( currChar == 10 ) ) && ( ( lineBuffer . length ( ) ) > 0 ) ) { result = lineBuffer . toString ( ) ; lineBuffer . setLength ( 0 ) ; break ; } if ( currChar < 128 ) { lineBuffer . append ( java . lang . Character . valueOf ( ( ( char ) ( currChar ) ) ) ) ; continue ; } throw new java . io . IOException ( ( \"Extended<sp>characters<sp>not<sp>supported<sp>in<sp>ASCII:<sp>0x\" + ( java . lang . Integer . toHexString ( currChar ) ) ) ) ; } return result ; }", "answer": "org . junit . Assert . assertNotNull ( gfr . nextLine ( ) )"}
{"focal": "openConnection ( ) { return new com . mysema . rdfbean . model . MiniConnection ( this ) ; }", "testMethod": "OpenConnection ( ) { com . mysema . rdfbean . model . RDFConnection connection = repository . openConnection ( ) ; try { \"<AssertPlaceHolder>\" ; } finally { connection . close ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( connection )", "total": "OpenConnection ( ) { com . mysema . rdfbean . model . RDFConnection connection = repository . openConnection ( ) ; try { \"<AssertPlaceHolder>\" ; } finally { connection . close ( ) ; } } openConnection ( ) { return new com . mysema . rdfbean . model . MiniConnection ( this ) ; }", "answer": "org . junit . Assert . assertNotNull ( connection )"}
{"focal": "parse ( java . lang . CharSequence ) { for ( int i = 0 ; i < ( cs . length ( ) ) ; i ++ ) { char c = cs . charAt ( i ) ; processChar ( cs , i , c ) ; } if ( ( lastMarkStart ) != ( - 1 ) ) { processSymbol ( cs , cs . length ( ) ) ; } }", "testMethod": "testParse ( ) { org . simpleflatmapper . jdbc . named . NamedSqlQuery namedSqlQuery = org . simpleflatmapper . jdbc . named . NamedSqlQuery . parse ( \"INSERT<sp>INTO<sp>TABLE<sp>VALUES(:id,<sp>:name,<sp>:email);\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( namedSqlQuery )", "total": "testParse ( ) { org . simpleflatmapper . jdbc . named . NamedSqlQuery namedSqlQuery = org . simpleflatmapper . jdbc . named . NamedSqlQuery . parse ( \"INSERT<sp>INTO<sp>TABLE<sp>VALUES(:id,<sp>:name,<sp>:email);\" ) ; \"<AssertPlaceHolder>\" ; } parse ( java . lang . CharSequence ) { for ( int i = 0 ; i < ( cs . length ( ) ) ; i ++ ) { char c = cs . charAt ( i ) ; processChar ( cs , i , c ) ; } if ( ( lastMarkStart ) != ( - 1 ) ) { processSymbol ( cs , cs . length ( ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( namedSqlQuery )"}
{"focal": "getService ( com . sun . enterprise . util . io . ServerDirs , com . sun . enterprise . admin . servermgmt . services . AppserverServiceType ) { if ( Constants . LINUX_HACK ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . SMFService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . SMFService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . WindowsService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . WindowsService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; throw new java . lang . RuntimeException ( com . sun . enterprise . admin . servermgmt . services . Strings . get ( \"noSuitableServiceImplementation\" ) ) ; }", "testMethod": "clusterConfigRefValid ( ) { com . sun . enterprise . config . serverbeans . Cluster cluster = habitat . getService ( com . sun . enterprise . config . serverbeans . Cluster . class , \"clusterA\" ) ; \"<AssertPlaceHolder>\" ; org . jvnet . hk2 . config . ConfigBean serverConfig = ( ( org . jvnet . hk2 . config . ConfigBean ) ( org . jvnet . hk2 . config . ConfigBean . unwrap ( cluster ) ) ) ; java . util . Map < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > changes = new java . util . HashMap < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > ( ) ; java . util . Map < java . lang . String , java . lang . String > configChanges = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; configChanges . put ( \"config-ref\" , \"server-config\" ) ; changes . put ( serverConfig , configChanges ) ; try { org . jvnet . hk2 . config . ConfigSupport cs = getHabitat ( ) . getService ( org . jvnet . hk2 . config . ConfigSupport . class ) ; cs . apply ( changes ) ; } catch ( org . jvnet . hk2 . config . TransactionFailure tf ) { org . junit . Assert . fail ( \"Can<sp>not<sp>reach<sp>this<sp>point\" ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( cluster )", "total": "clusterConfigRefValid ( ) { com . sun . enterprise . config . serverbeans . Cluster cluster = habitat . getService ( com . sun . enterprise . config . serverbeans . Cluster . class , \"clusterA\" ) ; \"<AssertPlaceHolder>\" ; org . jvnet . hk2 . config . ConfigBean serverConfig = ( ( org . jvnet . hk2 . config . ConfigBean ) ( org . jvnet . hk2 . config . ConfigBean . unwrap ( cluster ) ) ) ; java . util . Map < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > changes = new java . util . HashMap < org . jvnet . hk2 . config . ConfigBean , java . util . Map < java . lang . String , java . lang . String > > ( ) ; java . util . Map < java . lang . String , java . lang . String > configChanges = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; configChanges . put ( \"config-ref\" , \"server-config\" ) ; changes . put ( serverConfig , configChanges ) ; try { org . jvnet . hk2 . config . ConfigSupport cs = getHabitat ( ) . getService ( org . jvnet . hk2 . config . ConfigSupport . class ) ; cs . apply ( changes ) ; } catch ( org . jvnet . hk2 . config . TransactionFailure tf ) { org . junit . Assert . fail ( \"Can<sp>not<sp>reach<sp>this<sp>point\" ) ; } } getService ( com . sun . enterprise . util . io . ServerDirs , com . sun . enterprise . admin . servermgmt . services . AppserverServiceType ) { if ( Constants . LINUX_HACK ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . SMFService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . SMFService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . WindowsService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . WindowsService ( dirs , type ) ; if ( com . sun . enterprise . admin . servermgmt . services . LinuxService . apropos ( ) ) return new com . sun . enterprise . admin . servermgmt . services . LinuxService ( dirs , type ) ; throw new java . lang . RuntimeException ( com . sun . enterprise . admin . servermgmt . services . Strings . get ( \"noSuitableServiceImplementation\" ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( cluster )"}
{"focal": "getMyPermissions ( ) { return executorService . submit ( ( ) -> { org . apache . http . client . utils . URIBuilder uriBuilder = buildPath ( de . micromata . jira . rest . core . MYPERMISSIONS ) ; org . apache . http . client . methods . HttpGet method = de . micromata . jira . rest . core . util . HttpMethodFactory . createGetMethod ( uriBuilder . build ( ) ) ; org . apache . http . client . methods . CloseableHttpResponse response = de . micromata . jira . rest . core . client . execute ( method , de . micromata . jira . rest . core . clientContext ) ; int statusCode = response . getStatusLine ( ) . getStatusCode ( ) ; if ( statusCode == HttpURLConnection . HTTP_OK ) { com . google . gson . stream . JsonReader jsonReader = getJsonReader ( response ) ; de . micromata . jira . rest . core . domain . permission . MyPermissionsBean permissionsBean = de . micromata . jira . rest . core . gson . fromJson ( jsonReader , . class ) ; method . releaseConnection ( ) ; return permissionsBean ; } else { de . micromata . jira . rest . core . util . RestException restException = new de . micromata . jira . rest . core . util . RestException ( response ) ; response . close ( ) ; method . releaseConnection ( ) ; throw restException ; } } ) ; }", "testMethod": "testGetMyPermissions ( ) { java . util . concurrent . Future < de . micromata . jira . rest . core . domain . permission . MyPermissionsBean > future = jiraRestClient . getUserClient ( ) . getMyPermissions ( ) ; de . micromata . jira . rest . core . domain . permission . MyPermissionsBean myPermissionsBean = future . get ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( myPermissionsBean )", "total": "testGetMyPermissions ( ) { java . util . concurrent . Future < de . micromata . jira . rest . core . domain . permission . MyPermissionsBean > future = jiraRestClient . getUserClient ( ) . getMyPermissions ( ) ; de . micromata . jira . rest . core . domain . permission . MyPermissionsBean myPermissionsBean = future . get ( ) ; \"<AssertPlaceHolder>\" ; } getMyPermissions ( ) { return executorService . submit ( ( ) -> { org . apache . http . client . utils . URIBuilder uriBuilder = buildPath ( de . micromata . jira . rest . core . MYPERMISSIONS ) ; org . apache . http . client . methods . HttpGet method = de . micromata . jira . rest . core . util . HttpMethodFactory . createGetMethod ( uriBuilder . build ( ) ) ; org . apache . http . client . methods . CloseableHttpResponse response = de . micromata . jira . rest . core . client . execute ( method , de . micromata . jira . rest . core . clientContext ) ; int statusCode = response . getStatusLine ( ) . getStatusCode ( ) ; if ( statusCode == HttpURLConnection . HTTP_OK ) { com . google . gson . stream . JsonReader jsonReader = getJsonReader ( response ) ; de . micromata . jira . rest . core . domain . permission . MyPermissionsBean permissionsBean = de . micromata . jira . rest . core . gson . fromJson ( jsonReader , . class ) ; method . releaseConnection ( ) ; return permissionsBean ; } else { de . micromata . jira . rest . core . util . RestException restException = new de . micromata . jira . rest . core . util . RestException ( response ) ; response . close ( ) ; method . releaseConnection ( ) ; throw restException ; } } ) ; }", "answer": "org . junit . Assert . assertNotNull ( myPermissionsBean )"}
{"focal": "applyChange ( org . sagebionetworks . common . util . progress . ProgressCallback , org . sagebionetworks . repo . model . UserInfo , org . sagebionetworks . repo . model . table . TableUpdateRequest ) { if ( change instanceof org . sagebionetworks . repo . model . table . TableSchemaChangeRequest ) { return applySchemaChange ( user , ( ( org . sagebionetworks . repo . model . table . TableSchemaChangeRequest ) ( change ) ) ) ; } else if ( change instanceof org . sagebionetworks . repo . model . table . AppendableRowSetRequest ) { return applyRowChange ( progressCallback , user , ( ( org . sagebionetworks . repo . model . table . AppendableRowSetRequest ) ( change ) ) ) ; } else if ( change instanceof org . sagebionetworks . repo . model . table . UploadToTableRequest ) { return applyRowChange ( progressCallback , user , ( ( org . sagebionetworks . repo . model . table . UploadToTableRequest ) ( change ) ) ) ; } else { throw new java . lang . IllegalArgumentException ( ( \"Unsupported<sp>TableUpdateRequest:<sp>\" + ( change . getClass ( ) . getName ( ) ) ) ) ; } }", "testMethod": "testApplyChangeRowSet ( ) { appendAbleRowSetRequest . setToAppend ( rowSet ) ; org . sagebionetworks . repo . model . table . TableUpdateResponse result = manager . applyChange ( mockProgressCallback , user , appendAbleRowSetRequest ) ; \"<AssertPlaceHolder>\" ; verify ( mockTableViewManger , times ( 2 ) ) . updateEntityInView ( eq ( user ) , eq ( schema ) , any ( org . sagebionetworks . repo . model . table . SparseRowDto . class ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testApplyChangeRowSet ( ) { appendAbleRowSetRequest . setToAppend ( rowSet ) ; org . sagebionetworks . repo . model . table . TableUpdateResponse result = manager . applyChange ( mockProgressCallback , user , appendAbleRowSetRequest ) ; \"<AssertPlaceHolder>\" ; verify ( mockTableViewManger , times ( 2 ) ) . updateEntityInView ( eq ( user ) , eq ( schema ) , any ( org . sagebionetworks . repo . model . table . SparseRowDto . class ) ) ; } applyChange ( org . sagebionetworks . common . util . progress . ProgressCallback , org . sagebionetworks . repo . model . UserInfo , org . sagebionetworks . repo . model . table . TableUpdateRequest ) { if ( change instanceof org . sagebionetworks . repo . model . table . TableSchemaChangeRequest ) { return applySchemaChange ( user , ( ( org . sagebionetworks . repo . model . table . TableSchemaChangeRequest ) ( change ) ) ) ; } else if ( change instanceof org . sagebionetworks . repo . model . table . AppendableRowSetRequest ) { return applyRowChange ( progressCallback , user , ( ( org . sagebionetworks . repo . model . table . AppendableRowSetRequest ) ( change ) ) ) ; } else if ( change instanceof org . sagebionetworks . repo . model . table . UploadToTableRequest ) { return applyRowChange ( progressCallback , user , ( ( org . sagebionetworks . repo . model . table . UploadToTableRequest ) ( change ) ) ) ; } else { throw new java . lang . IllegalArgumentException ( ( \"Unsupported<sp>TableUpdateRequest:<sp>\" + ( change . getClass ( ) . getName ( ) ) ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "query ( com . ebay . cloud . cms . typsafe . entity . CMSQuery , com . ebay . cloud . cms . typsafe . service . CMSClientContext ) { checkLiveness ( ) ; return query ( query , com . ebay . cloud . cms . typsafe . entity . GenericCMSEntity . class , context ) ; }", "testMethod": "testJoinQuery7 ( ) { com . ebay . cloud . cms . query . service . IQueryResult result = queryService . query ( \"ServiceInstance[@name=\\\"srp-app:Raptor-00001\\\"].abc\" , raptorContext ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testJoinQuery7 ( ) { com . ebay . cloud . cms . query . service . IQueryResult result = queryService . query ( \"ServiceInstance[@name=\\\"srp-app:Raptor-00001\\\"].abc\" , raptorContext ) ; \"<AssertPlaceHolder>\" ; } query ( com . ebay . cloud . cms . typsafe . entity . CMSQuery , com . ebay . cloud . cms . typsafe . service . CMSClientContext ) { checkLiveness ( ) ; return query ( query , com . ebay . cloud . cms . typsafe . entity . GenericCMSEntity . class , context ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getBrpPersoonslijst ( ) { return asBrpPersoonslijst ( leesUitBrpAntwoordType . getBrpPl ( ) ) ; }", "testMethod": "testBrpPersoonslijstGetter ( ) { final java . lang . String berichtOrigineel = org . apache . commons . io . IOUtils . toString ( nl . moderniseringgba . isc . esb . message . brp . impl . NotificatieVerzoekBerichtTest . class . getResourceAsStream ( \"erkenningNotarieelVerzoekBericht.xml\" ) ) ; final nl . moderniseringgba . isc . esb . message . brp . impl . ErkenningNotarieelVerzoekBericht erkenningNotarieelVerzoekBericht = ( ( nl . moderniseringgba . isc . esb . message . brp . impl . ErkenningNotarieelVerzoekBericht ) ( factory . getBericht ( berichtOrigineel ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( erkenningNotarieelVerzoekBericht . getBrpPersoonslijst ( ) )", "total": "testBrpPersoonslijstGetter ( ) { final java . lang . String berichtOrigineel = org . apache . commons . io . IOUtils . toString ( nl . moderniseringgba . isc . esb . message . brp . impl . NotificatieVerzoekBerichtTest . class . getResourceAsStream ( \"erkenningNotarieelVerzoekBericht.xml\" ) ) ; final nl . moderniseringgba . isc . esb . message . brp . impl . ErkenningNotarieelVerzoekBericht erkenningNotarieelVerzoekBericht = ( ( nl . moderniseringgba . isc . esb . message . brp . impl . ErkenningNotarieelVerzoekBericht ) ( factory . getBericht ( berichtOrigineel ) ) ) ; \"<AssertPlaceHolder>\" ; } getBrpPersoonslijst ( ) { return asBrpPersoonslijst ( leesUitBrpAntwoordType . getBrpPl ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( erkenningNotarieelVerzoekBericht . getBrpPersoonslijst ( ) )"}
{"focal": "invoke ( javax . xml . soap . SOAPMessage ) { try { System . out . println ( \"Adding<sp>attachment:<sp>\" 4 ) ; javax . xml . soap . SOAPMessage message = javax . xml . soap . MessageFactory . newInstance ( ) . createMessage ( ) ; javax . xml . soap . SOAPPart part = message . getSOAPPart ( ) ; javax . xml . soap . SOAPEnvelope envelope = part . getEnvelope ( ) ; javax . xml . soap . SOAPBody body = envelope . getBody ( ) ; javax . xml . soap . SOAPBodyElement testResponse = body . addBodyElement ( envelope . createName ( \"Adding<sp>attachment:<sp>\" 3 , null , \"http://cxf.apache.org/mime/types\" ) ) ; javax . xml . soap . SOAPElement name = testResponse . addChildElement ( \"name\" , null , \"http://cxf.apache.org/mime/types\" ) ; name . setTextContent ( \"return<sp>detail<sp>+<sp>call<sp>detail\" ) ; javax . xml . soap . SOAPElement attachinfo = testResponse . addChildElement ( \"attachinfo\" , null , \"http://cxf.apache.org/mime/types\" ) ; javax . xml . soap . SOAPElement include = attachinfo . addChildElement ( \"Include\" , \"xop\" , \"Adding<sp>attachment:<sp>\" 0 ) ; int fileSize = 0 ; try ( java . io . InputStream pre = this . getClass ( ) . getResourceAsStream ( \"Adding<sp>attachment:<sp>\" 5 ) ) { for ( int i = pre . read ( ) ; i != ( - 1 ) ; i = pre . read ( ) ) { fileSize ++ ; } } int count = 50 ; byte [ ] data = new byte [ fileSize * count ] ; for ( int x = 0 ; x < count ; x ++ ) { this . getClass ( ) . getResourceAsStream ( \"Adding<sp>attachment:<sp>\" 5 ) . read ( data , ( fileSize * x ) , fileSize ) ; } javax . activation . DataHandler dh = new javax . activation . DataHandler ( new javax . mail . util . ByteArrayDataSource ( data , \"application/octet-stream\" ) ) ; javax . xml . soap . AttachmentPart attachment = message . createAttachmentPart ( dh ) ; attachment . setContentId ( \"mtom_xop.wsdl\" ) ; message . addAttachmentPart ( attachment ) ; System . out . println ( ( ( ( \"Adding<sp>attachment:<sp>\" + ( attachment . getContentId ( ) ) ) + \"Adding<sp>attachment:<sp>\" 1 ) + ( attachment . getSize ( ) ) ) ) ; include . addAttribute ( envelope . createName ( \"href\" ) , ( \"Adding<sp>attachment:<sp>\" 2 + ( attachment . getContentId ( ) ) ) ) ; return message ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } return null ; }", "testMethod": "testDOMSource ( ) { org . apache . cxf . jaxws . ServiceImpl service = new org . apache . cxf . jaxws . ServiceImpl ( getBus ( ) , getClass ( ) . getResource ( \"/wsdl/hello_world.wsdl\" ) , org . apache . cxf . jaxws . dispatch . DispatchTest . SERVICE_NAME , null ) ; javax . xml . ws . Dispatch < javax . xml . transform . Source > disp = service . createDispatch ( org . apache . cxf . jaxws . dispatch . DispatchTest . PORT_NAME , javax . xml . transform . Source . class , Service . Mode . MESSAGE ) ; disp . getRequestContext ( ) . put ( BindingProvider . ENDPOINT_ADDRESS_PROPERTY , org . apache . cxf . jaxws . dispatch . DispatchTest . ADDRESS ) ; d . setMessageObserver ( new org . apache . cxf . jaxws . MessageReplayObserver ( \"/org/apache/cxf/jaxws/sayHiResponse.xml\" ) ) ; org . w3c . dom . Document doc = org . apache . cxf . staxutils . StaxUtils . read ( getResourceAsStream ( \"/org/apache/cxf/jaxws/sayHi2.xml\" ) ) ; javax . xml . transform . dom . DOMSource source = new javax . xml . transform . dom . DOMSource ( doc ) ; javax . xml . transform . Source res = disp . invoke ( source ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( res )", "total": "testDOMSource ( ) { org . apache . cxf . jaxws . ServiceImpl service = new org . apache . cxf . jaxws . ServiceImpl ( getBus ( ) , getClass ( ) . getResource ( \"/wsdl/hello_world.wsdl\" ) , org . apache . cxf . jaxws . dispatch . DispatchTest . SERVICE_NAME , null ) ; javax . xml . ws . Dispatch < javax . xml . transform . Source > disp = service . createDispatch ( org . apache . cxf . jaxws . dispatch . DispatchTest . PORT_NAME , javax . xml . transform . Source . class , Service . Mode . MESSAGE ) ; disp . getRequestContext ( ) . put ( BindingProvider . ENDPOINT_ADDRESS_PROPERTY , org . apache . cxf . jaxws . dispatch . DispatchTest . ADDRESS ) ; d . setMessageObserver ( new org . apache . cxf . jaxws . MessageReplayObserver ( \"/org/apache/cxf/jaxws/sayHiResponse.xml\" ) ) ; org . w3c . dom . Document doc = org . apache . cxf . staxutils . StaxUtils . read ( getResourceAsStream ( \"/org/apache/cxf/jaxws/sayHi2.xml\" ) ) ; javax . xml . transform . dom . DOMSource source = new javax . xml . transform . dom . DOMSource ( doc ) ; javax . xml . transform . Source res = disp . invoke ( source ) ; \"<AssertPlaceHolder>\" ; } invoke ( javax . xml . soap . SOAPMessage ) { try { System . out . println ( \"Adding<sp>attachment:<sp>\" 4 ) ; javax . xml . soap . SOAPMessage message = javax . xml . soap . MessageFactory . newInstance ( ) . createMessage ( ) ; javax . xml . soap . SOAPPart part = message . getSOAPPart ( ) ; javax . xml . soap . SOAPEnvelope envelope = part . getEnvelope ( ) ; javax . xml . soap . SOAPBody body = envelope . getBody ( ) ; javax . xml . soap . SOAPBodyElement testResponse = body . addBodyElement ( envelope . createName ( \"Adding<sp>attachment:<sp>\" 3 , null , \"http://cxf.apache.org/mime/types\" ) ) ; javax . xml . soap . SOAPElement name = testResponse . addChildElement ( \"name\" , null , \"http://cxf.apache.org/mime/types\" ) ; name . setTextContent ( \"return<sp>detail<sp>+<sp>call<sp>detail\" ) ; javax . xml . soap . SOAPElement attachinfo = testResponse . addChildElement ( \"attachinfo\" , null , \"http://cxf.apache.org/mime/types\" ) ; javax . xml . soap . SOAPElement include = attachinfo . addChildElement ( \"Include\" , \"xop\" , \"Adding<sp>attachment:<sp>\" 0 ) ; int fileSize = 0 ; try ( java . io . InputStream pre = this . getClass ( ) . getResourceAsStream ( \"Adding<sp>attachment:<sp>\" 5 ) ) { for ( int i = pre . read ( ) ; i != ( - 1 ) ; i = pre . read ( ) ) { fileSize ++ ; } } int count = 50 ; byte [ ] data = new byte [ fileSize * count ] ; for ( int x = 0 ; x < count ; x ++ ) { this . getClass ( ) . getResourceAsStream ( \"Adding<sp>attachment:<sp>\" 5 ) . read ( data , ( fileSize * x ) , fileSize ) ; } javax . activation . DataHandler dh = new javax . activation . DataHandler ( new javax . mail . util . ByteArrayDataSource ( data , \"application/octet-stream\" ) ) ; javax . xml . soap . AttachmentPart attachment = message . createAttachmentPart ( dh ) ; attachment . setContentId ( \"mtom_xop.wsdl\" ) ; message . addAttachmentPart ( attachment ) ; System . out . println ( ( ( ( \"Adding<sp>attachment:<sp>\" + ( attachment . getContentId ( ) ) ) + \"Adding<sp>attachment:<sp>\" 1 ) + ( attachment . getSize ( ) ) ) ) ; include . addAttribute ( envelope . createName ( \"href\" ) , ( \"Adding<sp>attachment:<sp>\" 2 + ( attachment . getContentId ( ) ) ) ) ; return message ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( res )"}
{"focal": "peek ( K ) { org . cache2k . processor . EntryProcessor < K , V , V > p = new org . cache2k . processor . EntryProcessor < K , V , V > ( ) { @ org . cache2k . test . core . Override public V process ( org . cache2k . processor . MutableCacheEntry < K , V > e ) throws org . cache2k . test . core . Exception { if ( ! ( e . exists ( ) ) ) { return null ; } return e . getValue ( ) ; } } ; return invoke ( key , p ) ; }", "testMethod": "peek_Hit ( ) { cache . put ( org . cache2k . test . core . BasicIntCacheOperationsTest . KEY , org . cache2k . test . core . BasicIntCacheOperationsTest . VALUE ) ; statistics ( ) . putCount . expect ( 1 ) . expectAllZero ( ) ; \"<AssertPlaceHolder>\" ; statistics ( ) . getCount . expect ( 1 ) . missCount . expect ( 0 ) . expectAllZero ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( cache . peek ( org . cache2k . test . core . BasicIntCacheOperationsTest . KEY ) )", "total": "peek_Hit ( ) { cache . put ( org . cache2k . test . core . BasicIntCacheOperationsTest . KEY , org . cache2k . test . core . BasicIntCacheOperationsTest . VALUE ) ; statistics ( ) . putCount . expect ( 1 ) . expectAllZero ( ) ; \"<AssertPlaceHolder>\" ; statistics ( ) . getCount . expect ( 1 ) . missCount . expect ( 0 ) . expectAllZero ( ) ; } peek ( K ) { org . cache2k . processor . EntryProcessor < K , V , V > p = new org . cache2k . processor . EntryProcessor < K , V , V > ( ) { @ org . cache2k . test . core . Override public V process ( org . cache2k . processor . MutableCacheEntry < K , V > e ) throws org . cache2k . test . core . Exception { if ( ! ( e . exists ( ) ) ) { return null ; } return e . getValue ( ) ; } } ; return invoke ( key , p ) ; }", "answer": "org . junit . Assert . assertNotNull ( cache . peek ( org . cache2k . test . core . BasicIntCacheOperationsTest . KEY ) )"}
{"focal": "getLayers ( ) { if ( ( layers ) == null ) { initLayerInformation ( ) ; } return layers ; }", "testMethod": "testGetLayers ( ) { java . util . List < org . deegree . protocol . wmts . client . Layer > clientLayers = client . getLayers ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( clientLayers )", "total": "testGetLayers ( ) { java . util . List < org . deegree . protocol . wmts . client . Layer > clientLayers = client . getLayers ( ) ; \"<AssertPlaceHolder>\" ; } getLayers ( ) { if ( ( layers ) == null ) { initLayerInformation ( ) ; } return layers ; }", "answer": "org . junit . Assert . assertNotNull ( clientLayers )"}
{"focal": "getRoot ( ) { return \"\" ; }", "testMethod": "shouldHaveRootNode ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( model . getRoot ( ) )", "total": "shouldHaveRootNode ( ) { \"<AssertPlaceHolder>\" ; } getRoot ( ) { return \"\" ; }", "answer": "org . junit . Assert . assertNotNull ( model . getRoot ( ) )"}
{"focal": "query ( com . riversoft . weixin . pay . payment . bean . OrderQueryRequest ) { com . riversoft . weixin . pay . payment . OrderQueryRequestWrapper wrapper = new com . riversoft . weixin . pay . payment . OrderQueryRequestWrapper ( ) ; wrapper . setRequest ( orderQueryRequest ) ; setBaseSettings ( wrapper ) ; java . util . SortedMap < java . lang . String , java . lang . Object > queryRequestMap = com . riversoft . weixin . common . util . JsonMapper . nonEmptyMapper ( ) . getMapper ( ) . convertValue ( wrapper , java . util . SortedMap . class ) ; sign ( wrapper , queryRequestMap ) ; java . lang . String url = com . riversoft . weixin . pay . base . WxEndpoint . get ( \"url.pay.payment.order.query\" ) ; try { java . lang . String xml = com . riversoft . weixin . common . util . XmlObjectMapper . nonEmptyMapper ( ) . toXml ( wrapper ) ; com . riversoft . weixin . pay . payment . Payments . logger . info ( \"<sp>query<sp>order<sp>request:<sp>{}\" , xml ) ; java . lang . String response = wxSslClient . post ( url , xml ) ; com . riversoft . weixin . pay . payment . Payments . logger . info ( \"<sp>query<sp>order<sp>response:<sp>{}\" , response ) ; com . riversoft . weixin . pay . payment . OrderQueryResponseWrapper responseWrapper = com . riversoft . weixin . common . util . XmlObjectMapper . defaultMapper ( ) . fromXml ( response , com . riversoft . weixin . pay . payment . OrderQueryResponseWrapper . class ) ; return responseWrapper . getResponse ( ) ; } catch ( java . lang . Exception e ) { throw new com . riversoft . weixin . common . exception . WxRuntimeException ( 999 , ( \"query<sp>order<sp>failed:\" + ( e . getMessage ( ) ) ) ) ; } }", "testMethod": "testQueryOrder ( ) { com . riversoft . weixin . pay . payment . bean . OrderQueryRequest orderQueryRequest = new com . riversoft . weixin . pay . payment . bean . OrderQueryRequest ( ) ; orderQueryRequest . setTradeNumber ( \"1292063901201605160012300015\" ) ; com . riversoft . weixin . pay . payment . bean . OrderQueryResponse response = com . riversoft . weixin . pay . payment . Payments . defaultPayments ( ) . query ( orderQueryRequest ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testQueryOrder ( ) { com . riversoft . weixin . pay . payment . bean . OrderQueryRequest orderQueryRequest = new com . riversoft . weixin . pay . payment . bean . OrderQueryRequest ( ) ; orderQueryRequest . setTradeNumber ( \"1292063901201605160012300015\" ) ; com . riversoft . weixin . pay . payment . bean . OrderQueryResponse response = com . riversoft . weixin . pay . payment . Payments . defaultPayments ( ) . query ( orderQueryRequest ) ; \"<AssertPlaceHolder>\" ; } query ( com . riversoft . weixin . pay . payment . bean . OrderQueryRequest ) { com . riversoft . weixin . pay . payment . OrderQueryRequestWrapper wrapper = new com . riversoft . weixin . pay . payment . OrderQueryRequestWrapper ( ) ; wrapper . setRequest ( orderQueryRequest ) ; setBaseSettings ( wrapper ) ; java . util . SortedMap < java . lang . String , java . lang . Object > queryRequestMap = com . riversoft . weixin . common . util . JsonMapper . nonEmptyMapper ( ) . getMapper ( ) . convertValue ( wrapper , java . util . SortedMap . class ) ; sign ( wrapper , queryRequestMap ) ; java . lang . String url = com . riversoft . weixin . pay . base . WxEndpoint . get ( \"url.pay.payment.order.query\" ) ; try { java . lang . String xml = com . riversoft . weixin . common . util . XmlObjectMapper . nonEmptyMapper ( ) . toXml ( wrapper ) ; com . riversoft . weixin . pay . payment . Payments . logger . info ( \"<sp>query<sp>order<sp>request:<sp>{}\" , xml ) ; java . lang . String response = wxSslClient . post ( url , xml ) ; com . riversoft . weixin . pay . payment . Payments . logger . info ( \"<sp>query<sp>order<sp>response:<sp>{}\" , response ) ; com . riversoft . weixin . pay . payment . OrderQueryResponseWrapper responseWrapper = com . riversoft . weixin . common . util . XmlObjectMapper . defaultMapper ( ) . fromXml ( response , com . riversoft . weixin . pay . payment . OrderQueryResponseWrapper . class ) ; return responseWrapper . getResponse ( ) ; } catch ( java . lang . Exception e ) { throw new com . riversoft . weixin . common . exception . WxRuntimeException ( 999 , ( \"query<sp>order<sp>failed:\" + ( e . getMessage ( ) ) ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "getCommitter ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment ) { org . apache . hadoop . conf . Configuration conf = env . getConfiguration ( ) ; try { org . apache . phoenix . hbase . index . write . IndexCommitter committer = conf . getClass ( org . apache . phoenix . hbase . index . write . IndexWriter . INDEX_COMMITTER_CONF_KEY , org . apache . phoenix . hbase . index . write . ParallelWriterIndexCommitter . class , org . apache . phoenix . hbase . index . write . IndexCommitter . class ) . newInstance ( ) ; return committer ; } catch ( java . lang . InstantiationException e ) { throw new java . io . IOException ( e ) ; } catch ( java . lang . IllegalAccessException e ) { throw new java . io . IOException ( e ) ; } }", "testMethod": "getDefaultWriter ( ) { org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( false ) ; org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment env = org . mockito . Mockito . mock ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment . class ) ; org . mockito . Mockito . when ( env . getConfiguration ( ) ) . thenReturn ( conf ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . apache . phoenix . hbase . index . write . IndexWriter . getCommitter ( env ) )", "total": "getDefaultWriter ( ) { org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( false ) ; org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment env = org . mockito . Mockito . mock ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment . class ) ; org . mockito . Mockito . when ( env . getConfiguration ( ) ) . thenReturn ( conf ) ; \"<AssertPlaceHolder>\" ; } getCommitter ( org . apache . hadoop . hbase . coprocessor . RegionCoprocessorEnvironment ) { org . apache . hadoop . conf . Configuration conf = env . getConfiguration ( ) ; try { org . apache . phoenix . hbase . index . write . IndexCommitter committer = conf . getClass ( org . apache . phoenix . hbase . index . write . IndexWriter . INDEX_COMMITTER_CONF_KEY , org . apache . phoenix . hbase . index . write . ParallelWriterIndexCommitter . class , org . apache . phoenix . hbase . index . write . IndexCommitter . class ) . newInstance ( ) ; return committer ; } catch ( java . lang . InstantiationException e ) { throw new java . io . IOException ( e ) ; } catch ( java . lang . IllegalAccessException e ) { throw new java . io . IOException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( org . apache . phoenix . hbase . index . write . IndexWriter . getCommitter ( env ) )"}
{"focal": "create ( java . lang . Class , boolean ) { return new de . devsurf . injection . guice . scanner . PackageFilter ( clazz . getPackage ( ) . getName ( ) , deeper ) ; }", "testMethod": "createDynamicModule ( ) { com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . asm . ASMClasspathScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( de . devsurf . injection . guice . scanner . asm . tests . autobind . AutobindTests . class , false ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( injector )", "total": "createDynamicModule ( ) { com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . asm . ASMClasspathScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( de . devsurf . injection . guice . scanner . asm . tests . autobind . AutobindTests . class , false ) ) ) ; \"<AssertPlaceHolder>\" ; } create ( java . lang . Class , boolean ) { return new de . devsurf . injection . guice . scanner . PackageFilter ( clazz . getPackage ( ) . getName ( ) , deeper ) ; }", "answer": "org . junit . Assert . assertNotNull ( injector )"}
{"focal": "createContext ( ) { java . util . Hashtable < java . lang . Object , java . lang . Object > env = new java . util . Hashtable ( ) ; java . lang . String url = ( ( \"ldap://\" + ( io . apiman . tools . ldap . ApimanLdapServer . LDAP_SERVER ) ) + \":\" ) + ( ldapServer . getPort ( ) ) ; env . put ( Context . PROVIDER_URL , url ) ; env . put ( Context . SECURITY_PRINCIPAL , \"uid=admin,ou=system\" ) ; env . put ( Context . SECURITY_CREDENTIALS , \"secret\" ) ; env . put ( Context . SECURITY_AUTHENTICATION , \"simple\" ) ; env . put ( Context . INITIAL_CONTEXT_FACTORY , \"com.sun.jndi.ldap.LdapCtxFactory\" ) ; javax . naming . InitialContext initialContext = new javax . naming . InitialContext ( env ) ; javax . naming . directory . DirContext appRoot = ( ( javax . naming . directory . DirContext ) ( initialContext . lookup ( \"\" ) ) ) ; org . junit . Assert . assertNotNull ( appRoot ) ; return appRoot ; }", "testMethod": "startLdapServer ( ) { javax . naming . directory . DirContext ctx = createContext ( ) ; \"<AssertPlaceHolder>\" ; javax . naming . directory . SearchControls controls = new javax . naming . directory . SearchControls ( ) ; controls . setSearchScope ( SearchControls . SUBTREE_SCOPE ) ; javax . naming . NamingEnumeration < javax . naming . directory . SearchResult > result = ctx . search ( \"o=apiman\" , \"Shutting<sp>down<sp>the<sp>LDAP<sp>server...\" 1 , controls ) ; int count = 0 ; while ( result . hasMore ( ) ) { result . next ( ) ; count ++ ; } java . lang . String url = ( ( \"ldap://\" + ( io . apiman . tools . ldap . ApimanLdapServer . LDAP_SERVER ) ) + \"Shutting<sp>down<sp>the<sp>LDAP<sp>server...\" 0 ) + ( ldapServer . getPort ( ) ) ; System . out . println ( \"======================================================\" ) ; System . out . println ( \"LDAP<sp>server<sp>started<sp>successfully.\" ) ; System . out . println ( \"\" ) ; System . out . println ( ( \"<sp>URL:<sp>\" + url ) ) ; System . out . println ( ( \"<sp>Node<sp>Count:<sp>\" + count ) ) ; System . out . println ( \"<sp>Direct<sp>Bind<sp>DN:<sp>cn=${username},ou=developers,ou=people,o=apiman\" ) ; System . out . println ( \"======================================================\" ) ; System . out . println ( \"\" ) ; System . out . println ( \"\" ) ; System . out . println ( \"Press<sp>Enter<sp>to<sp>stop<sp>the<sp>LDAP<sp>server.\" ) ; new java . io . BufferedReader ( new java . io . InputStreamReader ( System . in ) ) . readLine ( ) ; System . out . println ( \"Shutting<sp>down<sp>the<sp>LDAP<sp>server...\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( ctx )", "total": "startLdapServer ( ) { javax . naming . directory . DirContext ctx = createContext ( ) ; \"<AssertPlaceHolder>\" ; javax . naming . directory . SearchControls controls = new javax . naming . directory . SearchControls ( ) ; controls . setSearchScope ( SearchControls . SUBTREE_SCOPE ) ; javax . naming . NamingEnumeration < javax . naming . directory . SearchResult > result = ctx . search ( \"o=apiman\" , \"Shutting<sp>down<sp>the<sp>LDAP<sp>server...\" 1 , controls ) ; int count = 0 ; while ( result . hasMore ( ) ) { result . next ( ) ; count ++ ; } java . lang . String url = ( ( \"ldap://\" + ( io . apiman . tools . ldap . ApimanLdapServer . LDAP_SERVER ) ) + \"Shutting<sp>down<sp>the<sp>LDAP<sp>server...\" 0 ) + ( ldapServer . getPort ( ) ) ; System . out . println ( \"======================================================\" ) ; System . out . println ( \"LDAP<sp>server<sp>started<sp>successfully.\" ) ; System . out . println ( \"\" ) ; System . out . println ( ( \"<sp>URL:<sp>\" + url ) ) ; System . out . println ( ( \"<sp>Node<sp>Count:<sp>\" + count ) ) ; System . out . println ( \"<sp>Direct<sp>Bind<sp>DN:<sp>cn=${username},ou=developers,ou=people,o=apiman\" ) ; System . out . println ( \"======================================================\" ) ; System . out . println ( \"\" ) ; System . out . println ( \"\" ) ; System . out . println ( \"Press<sp>Enter<sp>to<sp>stop<sp>the<sp>LDAP<sp>server.\" ) ; new java . io . BufferedReader ( new java . io . InputStreamReader ( System . in ) ) . readLine ( ) ; System . out . println ( \"Shutting<sp>down<sp>the<sp>LDAP<sp>server...\" ) ; } createContext ( ) { java . util . Hashtable < java . lang . Object , java . lang . Object > env = new java . util . Hashtable ( ) ; java . lang . String url = ( ( \"ldap://\" + ( io . apiman . tools . ldap . ApimanLdapServer . LDAP_SERVER ) ) + \":\" ) + ( ldapServer . getPort ( ) ) ; env . put ( Context . PROVIDER_URL , url ) ; env . put ( Context . SECURITY_PRINCIPAL , \"uid=admin,ou=system\" ) ; env . put ( Context . SECURITY_CREDENTIALS , \"secret\" ) ; env . put ( Context . SECURITY_AUTHENTICATION , \"simple\" ) ; env . put ( Context . INITIAL_CONTEXT_FACTORY , \"com.sun.jndi.ldap.LdapCtxFactory\" ) ; javax . naming . InitialContext initialContext = new javax . naming . InitialContext ( env ) ; javax . naming . directory . DirContext appRoot = ( ( javax . naming . directory . DirContext ) ( initialContext . lookup ( \"\" ) ) ) ; org . junit . Assert . assertNotNull ( appRoot ) ; return appRoot ; }", "answer": "org . junit . Assert . assertNotNull ( ctx )"}
{"focal": "getBookList ( ) { return bookList ; }", "testMethod": "testGetAll ( ) { com . example . resource . TIResourceJtfTest . LOGGER . debug ( \">>Test<sp>Get<sp>All\" ) ; final javax . ws . rs . client . Invocation . Builder invocationBuilder = target ( com . example . resource . TIResourceJtfTest . BASEURI ) . request ( ) ; final com . example . domain . Books result = invocationBuilder . get ( com . example . domain . Books . class ) ; com . example . resource . TIResourceJtfTest . LOGGER . debug ( result . getBookList ( ) ) ; \"<AssertPlaceHolder>\" ; com . example . resource . TIResourceJtfTest . LOGGER . debug ( \"<<Test<sp>Get<sp>All\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result . getBookList ( ) )", "total": "testGetAll ( ) { com . example . resource . TIResourceJtfTest . LOGGER . debug ( \">>Test<sp>Get<sp>All\" ) ; final javax . ws . rs . client . Invocation . Builder invocationBuilder = target ( com . example . resource . TIResourceJtfTest . BASEURI ) . request ( ) ; final com . example . domain . Books result = invocationBuilder . get ( com . example . domain . Books . class ) ; com . example . resource . TIResourceJtfTest . LOGGER . debug ( result . getBookList ( ) ) ; \"<AssertPlaceHolder>\" ; com . example . resource . TIResourceJtfTest . LOGGER . debug ( \"<<Test<sp>Get<sp>All\" ) ; } getBookList ( ) { return bookList ; }", "answer": "org . junit . Assert . assertNotNull ( result . getBookList ( ) )"}
{"focal": "getInputStream ( ) { return inputStream ; }", "testMethod": "testCrash_119_tensor_dot_misc ( ) { org . nd4j . linalg . factory . Nd4j . create ( 1 ) ; lombok . val tg = org . nd4j . imports . graphmapper . tf . TFGraphMapper . getInstance ( ) . importGraph ( new org . nd4j . linalg . io . ClassPathResource ( \"tf_graphs/examples/tensor_dot_misc/frozen_model.pb\" ) . getInputStream ( ) ) ; \"<AssertPlaceHolder>\" ; lombok . val input0 = org . nd4j . linalg . factory . Nd4j . create ( 36 , 3 , 4 , 5 ) . assign ( 1.0 ) ; lombok . val input1 = org . nd4j . linalg . factory . Nd4j . create ( 5 , 5 , 3 , 4 ) . assign ( 2.0 ) ; tg . associateArrayWithVariable ( input0 , tg . getVariable ( \"input_a\" ) ) ; tg . associateArrayWithVariable ( input1 , tg . getVariable ( \"input_b\" ) ) ; tg . asFlatFile ( new java . io . File ( \"../../../libnd4j/tests_cpu/resources/tensor_dot_misc.fb\" ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( tg )", "total": "testCrash_119_tensor_dot_misc ( ) { org . nd4j . linalg . factory . Nd4j . create ( 1 ) ; lombok . val tg = org . nd4j . imports . graphmapper . tf . TFGraphMapper . getInstance ( ) . importGraph ( new org . nd4j . linalg . io . ClassPathResource ( \"tf_graphs/examples/tensor_dot_misc/frozen_model.pb\" ) . getInputStream ( ) ) ; \"<AssertPlaceHolder>\" ; lombok . val input0 = org . nd4j . linalg . factory . Nd4j . create ( 36 , 3 , 4 , 5 ) . assign ( 1.0 ) ; lombok . val input1 = org . nd4j . linalg . factory . Nd4j . create ( 5 , 5 , 3 , 4 ) . assign ( 2.0 ) ; tg . associateArrayWithVariable ( input0 , tg . getVariable ( \"input_a\" ) ) ; tg . associateArrayWithVariable ( input1 , tg . getVariable ( \"input_b\" ) ) ; tg . asFlatFile ( new java . io . File ( \"../../../libnd4j/tests_cpu/resources/tensor_dot_misc.fb\" ) ) ; } getInputStream ( ) { return inputStream ; }", "answer": "org . junit . Assert . assertNotNull ( tg )"}
{"focal": "getCtfTmfTrace ( ) { return fTrace ; }", "testMethod": "testGetCtfTmfTrace ( ) { org . eclipse . tracecompass . tmf . ctf . core . trace . CtfTmfTrace result = iterator . getCtfTmfTrace ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetCtfTmfTrace ( ) { org . eclipse . tracecompass . tmf . ctf . core . trace . CtfTmfTrace result = iterator . getCtfTmfTrace ( ) ; \"<AssertPlaceHolder>\" ; } getCtfTmfTrace ( ) { return fTrace ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "toString ( ) { return ( ( \"PKCS#1<sp>Vector:<sp>\" + ( vector . getDescription ( ) ) ) + \"<sp>Fingerprint=\" ) + ( fingerprint . toString ( ) ) ; }", "testMethod": "simpleSerialization ( ) { de . rub . nds . tlsattacker . core . protocol . message . ClientHelloMessage cl = new de . rub . nds . tlsattacker . core . protocol . message . ClientHelloMessage ( de . rub . nds . tlsattacker . core . config . Config . createConfig ( ) ) ; cl . setCipherSuiteLength ( 3 ) ; cl . getCipherSuiteLength ( ) . setModification ( new de . rub . nds . modifiablevariable . integer . IntegerAddModification ( 2 ) ) ; try { m . marshal ( cl , writer ) ; } catch ( javax . xml . bind . JAXBException E ) { org . junit . Assert . fail ( ) ; } java . lang . String xmlString = writer . toString ( ) ; de . rub . nds . tlsattacker . core . protocol . message . ClientHelloTest . LOGGER . info ( xmlString ) ; um = context . createUnmarshaller ( ) ; de . rub . nds . tlsattacker . core . protocol . message . ClientHelloMessage clu = ( ( de . rub . nds . tlsattacker . core . protocol . message . ClientHelloMessage ) ( um . unmarshal ( new java . io . StringReader ( xmlString ) ) ) ) ; writer . append ( \"abcd\" ) ; m . marshal ( clu , writer ) ; xmlString = writer . toString ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( xmlString )", "total": "simpleSerialization ( ) { de . rub . nds . tlsattacker . core . protocol . message . ClientHelloMessage cl = new de . rub . nds . tlsattacker . core . protocol . message . ClientHelloMessage ( de . rub . nds . tlsattacker . core . config . Config . createConfig ( ) ) ; cl . setCipherSuiteLength ( 3 ) ; cl . getCipherSuiteLength ( ) . setModification ( new de . rub . nds . modifiablevariable . integer . IntegerAddModification ( 2 ) ) ; try { m . marshal ( cl , writer ) ; } catch ( javax . xml . bind . JAXBException E ) { org . junit . Assert . fail ( ) ; } java . lang . String xmlString = writer . toString ( ) ; de . rub . nds . tlsattacker . core . protocol . message . ClientHelloTest . LOGGER . info ( xmlString ) ; um = context . createUnmarshaller ( ) ; de . rub . nds . tlsattacker . core . protocol . message . ClientHelloMessage clu = ( ( de . rub . nds . tlsattacker . core . protocol . message . ClientHelloMessage ) ( um . unmarshal ( new java . io . StringReader ( xmlString ) ) ) ) ; writer . append ( \"abcd\" ) ; m . marshal ( clu , writer ) ; xmlString = writer . toString ( ) ; \"<AssertPlaceHolder>\" ; } toString ( ) { return ( ( \"PKCS#1<sp>Vector:<sp>\" + ( vector . getDescription ( ) ) ) + \"<sp>Fingerprint=\" ) + ( fingerprint . toString ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( xmlString )"}
{"focal": "asTimestamp ( ) { return new java . sql . Timestamp ( de . metas . util . time . SystemTime . millis ( ) ) ; }", "testMethod": "generateInvoiceTest ( ) { final org . compiere . model . I_C_BPartner bPartner = bpartner ( \"1\" ) ; final org . compiere . model . I_C_Order order = order ( \"1\" ) ; final org . compiere . model . I_C_OrderLine orderLine = orderLine ( \"1\" ) ; order . setC_BPartner_ID ( bPartner . getC_BPartner_ID ( ) ) ; order . setGrandTotal ( new java . math . BigDecimal ( \"100.00\" ) ) ; org . adempiere . invoice . service . impl . InvoiceBLTest . db . save ( order ) ; orderLine . setC_BPartner_ID ( bPartner . getC_BPartner_ID ( ) ) ; orderLine . setC_Order_ID ( order . getC_Order_ID ( ) ) ; orderLine . setLineNetAmt ( new java . math . BigDecimal ( \"100.00\" ) ) ; org . adempiere . invoice . service . impl . InvoiceBLTest . db . save ( orderLine ) ; final org . compiere . model . I_C_Invoice invoice = org . adempiere . invoice . service . impl . InvoiceBLTest . invoiceBL . createInvoiceFromOrder ( order , 0 , de . metas . util . time . SystemTime . asTimestamp ( ) , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( invoice )", "total": "generateInvoiceTest ( ) { final org . compiere . model . I_C_BPartner bPartner = bpartner ( \"1\" ) ; final org . compiere . model . I_C_Order order = order ( \"1\" ) ; final org . compiere . model . I_C_OrderLine orderLine = orderLine ( \"1\" ) ; order . setC_BPartner_ID ( bPartner . getC_BPartner_ID ( ) ) ; order . setGrandTotal ( new java . math . BigDecimal ( \"100.00\" ) ) ; org . adempiere . invoice . service . impl . InvoiceBLTest . db . save ( order ) ; orderLine . setC_BPartner_ID ( bPartner . getC_BPartner_ID ( ) ) ; orderLine . setC_Order_ID ( order . getC_Order_ID ( ) ) ; orderLine . setLineNetAmt ( new java . math . BigDecimal ( \"100.00\" ) ) ; org . adempiere . invoice . service . impl . InvoiceBLTest . db . save ( orderLine ) ; final org . compiere . model . I_C_Invoice invoice = org . adempiere . invoice . service . impl . InvoiceBLTest . invoiceBL . createInvoiceFromOrder ( order , 0 , de . metas . util . time . SystemTime . asTimestamp ( ) , null ) ; \"<AssertPlaceHolder>\" ; } asTimestamp ( ) { return new java . sql . Timestamp ( de . metas . util . time . SystemTime . millis ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( invoice )"}
{"focal": "buildRequest ( javax . servlet . ServletContext ) { return new org . springframework . mock . web . MockHttpServletRequest ( RequestMethod . GET . name ( ) , \"/now/1\" ) ; }", "testMethod": "now ( ) { org . springframework . test . web . servlet . ResultActions resultActions = this . mvc . perform ( new org . springframework . test . web . servlet . RequestBuilder ( ) { @ com . rhwayfun . springboot . logging . log4j2 . web . Override public org . springframework . mock . web . MockHttpServletRequest buildRequest ( javax . servlet . ServletContext servletContext ) { return new org . springframework . mock . web . MockHttpServletRequest ( RequestMethod . GET . name ( ) , \"/now/1\" ) ; } } ) . andExpect ( status ( ) . isOk ( ) ) ; java . lang . String contentAsString = resultActions . andReturn ( ) . getResponse ( ) . getContentAsString ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( contentAsString )", "total": "now ( ) { org . springframework . test . web . servlet . ResultActions resultActions = this . mvc . perform ( new org . springframework . test . web . servlet . RequestBuilder ( ) { @ com . rhwayfun . springboot . logging . log4j2 . web . Override public org . springframework . mock . web . MockHttpServletRequest buildRequest ( javax . servlet . ServletContext servletContext ) { return new org . springframework . mock . web . MockHttpServletRequest ( RequestMethod . GET . name ( ) , \"/now/1\" ) ; } } ) . andExpect ( status ( ) . isOk ( ) ) ; java . lang . String contentAsString = resultActions . andReturn ( ) . getResponse ( ) . getContentAsString ( ) ; \"<AssertPlaceHolder>\" ; } buildRequest ( javax . servlet . ServletContext ) { return new org . springframework . mock . web . MockHttpServletRequest ( RequestMethod . GET . name ( ) , \"/now/1\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( contentAsString )"}
{"focal": "create ( java . lang . Class , boolean ) { return new de . devsurf . injection . guice . scanner . PackageFilter ( clazz . getPackage ( ) . getName ( ) , deeper ) ; }", "testMethod": "testWithWrongPackage ( ) { com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . asm . ASMClasspathScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( \"java\" , false ) ) ) ; \"<AssertPlaceHolder>\" ; try { de . devsurf . injection . guice . scanner . asm . tests . autobind . bind . InterfaceAutobindTests . SecondTestInterface testInstance = injector . getInstance ( de . devsurf . injection . guice . scanner . asm . tests . autobind . bind . InterfaceAutobindTests . SecondTestInterface . class ) ; org . junit . Assert . fail ( ( \"The<sp>Scanner<sp>scanned<sp>the<sp>wrong<sp>package,<sp>so<sp>no<sp>Implementation<sp>should<sp>be<sp>bound<sp>to<sp>this<sp>Interface.<sp>Instance<sp>null?<sp>\" + ( testInstance == null ) ) ) ; } catch ( com . google . inject . ConfigurationException e ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( injector )", "total": "testWithWrongPackage ( ) { com . google . inject . Injector injector = com . google . inject . Guice . createInjector ( de . devsurf . injection . guice . scanner . StartupModule . create ( de . devsurf . injection . guice . scanner . asm . ASMClasspathScanner . class , de . devsurf . injection . guice . scanner . PackageFilter . create ( \"java\" , false ) ) ) ; \"<AssertPlaceHolder>\" ; try { de . devsurf . injection . guice . scanner . asm . tests . autobind . bind . InterfaceAutobindTests . SecondTestInterface testInstance = injector . getInstance ( de . devsurf . injection . guice . scanner . asm . tests . autobind . bind . InterfaceAutobindTests . SecondTestInterface . class ) ; org . junit . Assert . fail ( ( \"The<sp>Scanner<sp>scanned<sp>the<sp>wrong<sp>package,<sp>so<sp>no<sp>Implementation<sp>should<sp>be<sp>bound<sp>to<sp>this<sp>Interface.<sp>Instance<sp>null?<sp>\" + ( testInstance == null ) ) ) ; } catch ( com . google . inject . ConfigurationException e ) { } } create ( java . lang . Class , boolean ) { return new de . devsurf . injection . guice . scanner . PackageFilter ( clazz . getPackage ( ) . getName ( ) , deeper ) ; }", "answer": "org . junit . Assert . assertNotNull ( injector )"}
{"focal": "fetch ( java . lang . String ) { if ( layoutTypeName == null ) throw new java . lang . IllegalArgumentException ( \"LayoutType.convert:<sp>null<sp>not<sp>allowed\" ) ; org . apache . jena . sdb . store . LayoutType t = org . apache . jena . sdb . store . LayoutType . registry . lookup ( layoutTypeName ) ; if ( t != null ) return t ; org . slf4j . LoggerFactory . getLogger ( org . apache . jena . sdb . store . LayoutType . class ) . warn ( ( ( \"Can't<sp>turn<sp>'\" + layoutTypeName ) + \"'<sp>into<sp>a<sp>layout<sp>type\" ) ) ; throw new org . apache . jena . sdb . SDBException ( ( ( \"Can't<sp>turn<sp>'\" + layoutTypeName ) + \"'<sp>into<sp>a<sp>layout<sp>type\" ) ) ; }", "testMethod": "reg_layout_3 ( ) { for ( org . apache . jena . sdb . store . LayoutType t : org . apache . jena . sdb . store . LayoutType . allTypes ( ) ) \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . apache . jena . sdb . store . LayoutType . fetch ( t . getName ( ) ) )", "total": "reg_layout_3 ( ) { for ( org . apache . jena . sdb . store . LayoutType t : org . apache . jena . sdb . store . LayoutType . allTypes ( ) ) \"<AssertPlaceHolder>\" ; } fetch ( java . lang . String ) { if ( layoutTypeName == null ) throw new java . lang . IllegalArgumentException ( \"LayoutType.convert:<sp>null<sp>not<sp>allowed\" ) ; org . apache . jena . sdb . store . LayoutType t = org . apache . jena . sdb . store . LayoutType . registry . lookup ( layoutTypeName ) ; if ( t != null ) return t ; org . slf4j . LoggerFactory . getLogger ( org . apache . jena . sdb . store . LayoutType . class ) . warn ( ( ( \"Can't<sp>turn<sp>'\" + layoutTypeName ) + \"'<sp>into<sp>a<sp>layout<sp>type\" ) ) ; throw new org . apache . jena . sdb . SDBException ( ( ( \"Can't<sp>turn<sp>'\" + layoutTypeName ) + \"'<sp>into<sp>a<sp>layout<sp>type\" ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( org . apache . jena . sdb . store . LayoutType . fetch ( t . getName ( ) ) )"}
{"focal": "assureLinuxWebApp ( com . microsoft . azure . management . appservice . WebApp ) { if ( ! ( com . microsoft . azure . maven . webapp . utils . WebAppUtils . isLinuxWebApp ( app ) ) ) { throw new org . apache . maven . plugin . MojoExecutionException ( java . lang . String . format ( com . microsoft . azure . maven . webapp . utils . WebAppUtils . CONFIGURATION_NOT_APPLICABLE , \"Windows\" ) ) ; } }", "testMethod": "assureLinuxWebApp ( ) { final com . microsoft . azure . management . appservice . implementation . SiteInner siteInner = mock ( com . microsoft . azure . management . appservice . implementation . SiteInner . class ) ; doReturn ( \"app,linux\" ) . when ( siteInner ) . kind ( ) ; final com . microsoft . azure . management . appservice . WebApp app = mock ( com . microsoft . azure . management . appservice . WebApp . class ) ; doReturn ( siteInner ) . when ( app ) . inner ( ) ; com . microsoft . azure . maven . webapp . utils . WebAppUtils . assureLinuxWebApp ( app ) ; doReturn ( \"app\" ) . when ( siteInner ) . kind ( ) ; org . apache . maven . plugin . MojoExecutionException exception = null ; try { com . microsoft . azure . maven . webapp . utils . WebAppUtils . assureLinuxWebApp ( app ) ; } catch ( org . apache . maven . plugin . MojoExecutionException e ) { exception = e ; } finally { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( exception )", "total": "assureLinuxWebApp ( ) { final com . microsoft . azure . management . appservice . implementation . SiteInner siteInner = mock ( com . microsoft . azure . management . appservice . implementation . SiteInner . class ) ; doReturn ( \"app,linux\" ) . when ( siteInner ) . kind ( ) ; final com . microsoft . azure . management . appservice . WebApp app = mock ( com . microsoft . azure . management . appservice . WebApp . class ) ; doReturn ( siteInner ) . when ( app ) . inner ( ) ; com . microsoft . azure . maven . webapp . utils . WebAppUtils . assureLinuxWebApp ( app ) ; doReturn ( \"app\" ) . when ( siteInner ) . kind ( ) ; org . apache . maven . plugin . MojoExecutionException exception = null ; try { com . microsoft . azure . maven . webapp . utils . WebAppUtils . assureLinuxWebApp ( app ) ; } catch ( org . apache . maven . plugin . MojoExecutionException e ) { exception = e ; } finally { \"<AssertPlaceHolder>\" ; } } assureLinuxWebApp ( com . microsoft . azure . management . appservice . WebApp ) { if ( ! ( com . microsoft . azure . maven . webapp . utils . WebAppUtils . isLinuxWebApp ( app ) ) ) { throw new org . apache . maven . plugin . MojoExecutionException ( java . lang . String . format ( com . microsoft . azure . maven . webapp . utils . WebAppUtils . CONFIGURATION_NOT_APPLICABLE , \"Windows\" ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( exception )"}
{"focal": "toString ( ) { return java . lang . String . format ( \"#%s@%s<sp>id=%s#<sp>JSON:<sp>%s\" , this . getClass ( ) . getName ( ) , java . lang . System . identityHashCode ( this ) , this . getIDString ( ) , net . billforward . model . BillingEntity . PRETTY_PRINT_GSON . toJson ( this ) ) ; }", "testMethod": "CreateProduct ( ) { net . billforward . model . Product product = new net . billforward . model . Product ( ) ; product . setProductType ( ProductType . recurring ) ; product . setName ( \"API<sp>Product\" ) ; product . setDescription ( \"API<sp>Desc\" ) ; product . setDurationPeriod ( ProductPeriod . minutes ) ; product . setDuration ( 3 ) ; product = net . billforward . model . Product . create ( product ) ; System . out . println ( product . toString ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( product )", "total": "CreateProduct ( ) { net . billforward . model . Product product = new net . billforward . model . Product ( ) ; product . setProductType ( ProductType . recurring ) ; product . setName ( \"API<sp>Product\" ) ; product . setDescription ( \"API<sp>Desc\" ) ; product . setDurationPeriod ( ProductPeriod . minutes ) ; product . setDuration ( 3 ) ; product = net . billforward . model . Product . create ( product ) ; System . out . println ( product . toString ( ) ) ; \"<AssertPlaceHolder>\" ; } toString ( ) { return java . lang . String . format ( \"#%s@%s<sp>id=%s#<sp>JSON:<sp>%s\" , this . getClass ( ) . getName ( ) , java . lang . System . identityHashCode ( this ) , this . getIDString ( ) , net . billforward . model . BillingEntity . PRETTY_PRINT_GSON . toJson ( this ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( product )"}
{"focal": "getBookId ( ) { return bookId ; }", "testMethod": "testQueryGetXML ( ) { com . example . resource . TIResourceJtfTest . LOGGER . debug ( \">>Test<sp>Query<sp>Get\" ) ; javax . ws . rs . client . WebTarget queryTarget = target ( ( ( com . example . resource . TIResourceJtfTest . BASEURI ) + \"book\" ) ) . queryParam ( \"id\" , java . lang . Integer . valueOf ( 1 ) ) ; javax . ws . rs . client . Invocation . Builder invocationBuilder = queryTarget . request ( MediaType . APPLICATION_XML_TYPE ) ; javax . ws . rs . core . Response response = invocationBuilder . get ( ) ; final com . example . domain . Book result = response . readEntity ( com . example . domain . Book . class ) ; com . example . resource . TIResourceJtfTest . LOGGER . debug ( result ) ; \"<AssertPlaceHolder>\" ; queryTarget = target ( ( ( com . example . resource . TIResourceJtfTest . BASEURI ) + \"book\" ) ) . queryParam ( \"id\" , java . lang . Integer . valueOf ( 2 ) ) ; invocationBuilder = queryTarget . request ( MediaType . APPLICATION_XML ) ; response = invocationBuilder . get ( ) ; final java . lang . String beanXml = response . readEntity ( java . lang . String . class ) ; com . example . resource . TIResourceJtfTest . LOGGER . debug ( beanXml ) ; com . example . resource . TIResourceJtfTest . LOGGER . debug ( \"<<Test<sp>Query<sp>Get\" ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result . getBookId ( ) )", "total": "testQueryGetXML ( ) { com . example . resource . TIResourceJtfTest . LOGGER . debug ( \">>Test<sp>Query<sp>Get\" ) ; javax . ws . rs . client . WebTarget queryTarget = target ( ( ( com . example . resource . TIResourceJtfTest . BASEURI ) + \"book\" ) ) . queryParam ( \"id\" , java . lang . Integer . valueOf ( 1 ) ) ; javax . ws . rs . client . Invocation . Builder invocationBuilder = queryTarget . request ( MediaType . APPLICATION_XML_TYPE ) ; javax . ws . rs . core . Response response = invocationBuilder . get ( ) ; final com . example . domain . Book result = response . readEntity ( com . example . domain . Book . class ) ; com . example . resource . TIResourceJtfTest . LOGGER . debug ( result ) ; \"<AssertPlaceHolder>\" ; queryTarget = target ( ( ( com . example . resource . TIResourceJtfTest . BASEURI ) + \"book\" ) ) . queryParam ( \"id\" , java . lang . Integer . valueOf ( 2 ) ) ; invocationBuilder = queryTarget . request ( MediaType . APPLICATION_XML ) ; response = invocationBuilder . get ( ) ; final java . lang . String beanXml = response . readEntity ( java . lang . String . class ) ; com . example . resource . TIResourceJtfTest . LOGGER . debug ( beanXml ) ; com . example . resource . TIResourceJtfTest . LOGGER . debug ( \"<<Test<sp>Query<sp>Get\" ) ; } getBookId ( ) { return bookId ; }", "answer": "org . junit . Assert . assertNotNull ( result . getBookId ( ) )"}
{"focal": "getHeaders ( ) { return this . headers ; }", "testMethod": "testGetHeaders ( ) { org . jinstagram . http . Response fixture = new org . jinstagram . http . Response ( mockHttpConnection ) ; java . util . Map < java . lang . String , java . lang . String > result = fixture . getHeaders ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetHeaders ( ) { org . jinstagram . http . Response fixture = new org . jinstagram . http . Response ( mockHttpConnection ) ; java . util . Map < java . lang . String , java . lang . String > result = fixture . getHeaders ( ) ; \"<AssertPlaceHolder>\" ; } getHeaders ( ) { return this . headers ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "portray ( org . geotoolkit . display2d . service . CanvasDef , org . geotoolkit . display2d . service . SceneDef , org . geotoolkit . display2d . service . ViewDef ) { final org . opengis . geometry . Envelope contextEnv = viewDef . getEnvelope ( ) ; final org . opengis . referencing . crs . CoordinateReferenceSystem crs = contextEnv . getCoordinateReferenceSystem ( ) ; final org . geotoolkit . display2d . canvas . J2DCanvasBuffered canvas = new org . geotoolkit . display2d . canvas . J2DCanvasBuffered ( crs , canvasDef . getDimension ( ) , sceneDef . getHints ( ) ) ; org . geotoolkit . display2d . service . DefaultPortrayalService . prepareCanvas ( canvas , canvasDef , sceneDef , viewDef ) ; canvas . repaint ( ) ; final java . awt . image . BufferedImage buffer = canvas . getSnapShot ( ) ; canvas . dispose ( ) ; return buffer ; }", "testMethod": "renderGraduationTest ( ) { final org . opengis . referencing . crs . CoordinateReferenceSystem crs = org . apache . sis . referencing . CRS . forCode ( \"EPSG:2154\" ) ; final org . geotoolkit . display2d . ext . graduation . GraduationSymbolizer gs = new org . geotoolkit . display2d . ext . graduation . GraduationSymbolizer ( ) ; final org . geotoolkit . display2d . ext . graduation . GraduationSymbolizer . Graduation gra = new org . geotoolkit . display2d . ext . graduation . GraduationSymbolizer . Graduation ( ) ; gs . getGraduations ( ) . add ( gra ) ; final org . geotoolkit . style . MutableStyle style = GO2Utilities . STYLE_FACTORY . style ( gs ) ; final org . apache . sis . feature . builder . FeatureTypeBuilder ftb = new org . apache . sis . feature . builder . FeatureTypeBuilder ( ) ; ftb . setName ( \"test\" ) ; ftb . addAttribute ( java . lang . String . class ) . setName ( \"id\" ) . addRole ( AttributeRole . IDENTIFIER_COMPONENT ) ; ftb . addAttribute ( org . locationtech . jts . geom . LineString . class ) . setName ( \"geom\" ) . setCRS ( crs ) ; final org . opengis . feature . FeatureType type = ftb . build ( ) ; final org . opengis . feature . Feature f = type . newInstance ( ) ; f . setPropertyValue ( \"id\" , \"id-0\" ) ; f . setPropertyValue ( \"geom\" , new org . locationtech . jts . geom . GeometryFactory ( ) . createLineString ( new org . locationtech . jts . geom . Coordinate [ ] { new org . locationtech . jts . geom . Coordinate ( 0 , 0 ) , new org . locationtech . jts . geom . Coordinate ( 100 , 0 ) } ) ) ; final org . geotoolkit . map . MapLayer layer = org . geotoolkit . map . MapBuilder . createFeatureLayer ( org . geotoolkit . data . FeatureStoreUtilities . collection ( f ) ) ; layer . setStyle ( style ) ; final org . geotoolkit . map . MapContext context = org . geotoolkit . map . MapBuilder . createContext ( ) ; context . layers ( ) . add ( layer ) ; final org . geotoolkit . display2d . service . SceneDef sdef = new org . geotoolkit . display2d . service . SceneDef ( context ) ; final org . geotoolkit . display2d . service . CanvasDef cdef = new org . geotoolkit . display2d . service . CanvasDef ( new java . awt . Dimension ( 100 , 100 ) , java . awt . Color . darkGray ) ; final org . geotoolkit . display2d . service . ViewDef vdef = new org . geotoolkit . display2d . service . ViewDef ( org . apache . sis . referencing . CRS . getDomainOfValidity ( crs ) ) ; final java . awt . image . BufferedImage img = org . geotoolkit . display2d . service . DefaultPortrayalService . portray ( cdef , sdef , vdef ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( img )", "total": "renderGraduationTest ( ) { final org . opengis . referencing . crs . CoordinateReferenceSystem crs = org . apache . sis . referencing . CRS . forCode ( \"EPSG:2154\" ) ; final org . geotoolkit . display2d . ext . graduation . GraduationSymbolizer gs = new org . geotoolkit . display2d . ext . graduation . GraduationSymbolizer ( ) ; final org . geotoolkit . display2d . ext . graduation . GraduationSymbolizer . Graduation gra = new org . geotoolkit . display2d . ext . graduation . GraduationSymbolizer . Graduation ( ) ; gs . getGraduations ( ) . add ( gra ) ; final org . geotoolkit . style . MutableStyle style = GO2Utilities . STYLE_FACTORY . style ( gs ) ; final org . apache . sis . feature . builder . FeatureTypeBuilder ftb = new org . apache . sis . feature . builder . FeatureTypeBuilder ( ) ; ftb . setName ( \"test\" ) ; ftb . addAttribute ( java . lang . String . class ) . setName ( \"id\" ) . addRole ( AttributeRole . IDENTIFIER_COMPONENT ) ; ftb . addAttribute ( org . locationtech . jts . geom . LineString . class ) . setName ( \"geom\" ) . setCRS ( crs ) ; final org . opengis . feature . FeatureType type = ftb . build ( ) ; final org . opengis . feature . Feature f = type . newInstance ( ) ; f . setPropertyValue ( \"id\" , \"id-0\" ) ; f . setPropertyValue ( \"geom\" , new org . locationtech . jts . geom . GeometryFactory ( ) . createLineString ( new org . locationtech . jts . geom . Coordinate [ ] { new org . locationtech . jts . geom . Coordinate ( 0 , 0 ) , new org . locationtech . jts . geom . Coordinate ( 100 , 0 ) } ) ) ; final org . geotoolkit . map . MapLayer layer = org . geotoolkit . map . MapBuilder . createFeatureLayer ( org . geotoolkit . data . FeatureStoreUtilities . collection ( f ) ) ; layer . setStyle ( style ) ; final org . geotoolkit . map . MapContext context = org . geotoolkit . map . MapBuilder . createContext ( ) ; context . layers ( ) . add ( layer ) ; final org . geotoolkit . display2d . service . SceneDef sdef = new org . geotoolkit . display2d . service . SceneDef ( context ) ; final org . geotoolkit . display2d . service . CanvasDef cdef = new org . geotoolkit . display2d . service . CanvasDef ( new java . awt . Dimension ( 100 , 100 ) , java . awt . Color . darkGray ) ; final org . geotoolkit . display2d . service . ViewDef vdef = new org . geotoolkit . display2d . service . ViewDef ( org . apache . sis . referencing . CRS . getDomainOfValidity ( crs ) ) ; final java . awt . image . BufferedImage img = org . geotoolkit . display2d . service . DefaultPortrayalService . portray ( cdef , sdef , vdef ) ; \"<AssertPlaceHolder>\" ; } portray ( org . geotoolkit . display2d . service . CanvasDef , org . geotoolkit . display2d . service . SceneDef , org . geotoolkit . display2d . service . ViewDef ) { final org . opengis . geometry . Envelope contextEnv = viewDef . getEnvelope ( ) ; final org . opengis . referencing . crs . CoordinateReferenceSystem crs = contextEnv . getCoordinateReferenceSystem ( ) ; final org . geotoolkit . display2d . canvas . J2DCanvasBuffered canvas = new org . geotoolkit . display2d . canvas . J2DCanvasBuffered ( crs , canvasDef . getDimension ( ) , sceneDef . getHints ( ) ) ; org . geotoolkit . display2d . service . DefaultPortrayalService . prepareCanvas ( canvas , canvasDef , sceneDef , viewDef ) ; canvas . repaint ( ) ; final java . awt . image . BufferedImage buffer = canvas . getSnapShot ( ) ; canvas . dispose ( ) ; return buffer ; }", "answer": "org . junit . Assert . assertNotNull ( img )"}
{"focal": "getDeviceGroupRegistry ( ) { return deviceGroupRegistry ; }", "testMethod": "testGetDeviceGroupRegistry ( ) { final org . opendaylight . openflowplugin . api . openflow . registry . group . DeviceGroupRegistry deviceGroupRegistry = deviceContext . getDeviceGroupRegistry ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( deviceGroupRegistry )", "total": "testGetDeviceGroupRegistry ( ) { final org . opendaylight . openflowplugin . api . openflow . registry . group . DeviceGroupRegistry deviceGroupRegistry = deviceContext . getDeviceGroupRegistry ( ) ; \"<AssertPlaceHolder>\" ; } getDeviceGroupRegistry ( ) { return deviceGroupRegistry ; }", "answer": "org . junit . Assert . assertNotNull ( deviceGroupRegistry )"}
{"focal": "copyService ( org . oscm . vo . VOService , java . lang . String ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "testMethod": "testCopy_ModifyCatalogEntries ( ) { runTX ( new java . util . concurrent . Callable < java . lang . Void > ( ) { @ org . oscm . serviceprovisioningservice . bean . Override public org . oscm . serviceprovisioningservice . bean . Void call ( ) throws org . oscm . serviceprovisioningservice . bean . Exception { catalogEntry . setVisibleInCatalog ( ( ! ( catalogEntry . isVisibleInCatalog ( ) ) ) ) ; catalogEntry . setAnonymousVisible ( ( ! ( catalogEntry . isAnonymousVisible ( ) ) ) ) ; return null ; } } ) ; org . oscm . internal . vo . VOServiceDetails copy = provisioningService . copyService ( serviceToCopy , org . oscm . serviceprovisioningservice . bean . ServiceProvisioningServiceBeanCopyIT . NEW_SERVICEID ) ; \"<AssertPlaceHolder>\" ; validateCatalogEntry ( serviceToCopy , copy ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( copy )", "total": "testCopy_ModifyCatalogEntries ( ) { runTX ( new java . util . concurrent . Callable < java . lang . Void > ( ) { @ org . oscm . serviceprovisioningservice . bean . Override public org . oscm . serviceprovisioningservice . bean . Void call ( ) throws org . oscm . serviceprovisioningservice . bean . Exception { catalogEntry . setVisibleInCatalog ( ( ! ( catalogEntry . isVisibleInCatalog ( ) ) ) ) ; catalogEntry . setAnonymousVisible ( ( ! ( catalogEntry . isAnonymousVisible ( ) ) ) ) ; return null ; } } ) ; org . oscm . internal . vo . VOServiceDetails copy = provisioningService . copyService ( serviceToCopy , org . oscm . serviceprovisioningservice . bean . ServiceProvisioningServiceBeanCopyIT . NEW_SERVICEID ) ; \"<AssertPlaceHolder>\" ; validateCatalogEntry ( serviceToCopy , copy ) ; } copyService ( org . oscm . vo . VOService , java . lang . String ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( copy )"}
{"focal": "borrow ( ch . cyberduck . core . worker . Connection ) { switch ( type ) { case source : return source . borrow ( new ch . cyberduck . core . threading . BackgroundActionState ( ) { @ ch . cyberduck . core . worker . Override public boolean isCanceled ( ) { return ch . cyberduck . core . worker . ConcurrentTransferWorker . this . isCanceled ( ) ; } @ ch . cyberduck . core . worker . Override public boolean isRunning ( ) { return true ; } } ) ; case destination : return destination . borrow ( new ch . cyberduck . core . threading . BackgroundActionState ( ) { @ ch . cyberduck . core . worker . Override public boolean isCanceled ( ) { return ch . cyberduck . core . worker . ConcurrentTransferWorker . this . isCanceled ( ) ; } @ ch . cyberduck . core . worker . Override public boolean isRunning ( ) { return true ; } } ) ; } return null ; }", "testMethod": "testBorrowTimeoutNoSessionAvailable ( ) { final ch . cyberduck . core . worker . Host host = new ch . cyberduck . core . worker . Host ( new ch . cyberduck . core . worker . TestProtocol ( ) , \"localhost\" , new ch . cyberduck . core . worker . Credentials ( \"u\" , \"p\" ) ) ; final ch . cyberduck . core . transfer . Transfer t = new ch . cyberduck . core . transfer . UploadTransfer ( host , new ch . cyberduck . core . worker . Path ( \"/t\" , java . util . EnumSet . of ( Path . Type . directory ) ) , new ch . cyberduck . core . worker . NullLocal ( \"l\" ) ) ; final ch . cyberduck . core . worker . LoginConnectionService connection = new ch . cyberduck . core . worker . TestLoginConnectionService ( ) ; final ch . cyberduck . core . worker . ConcurrentTransferWorker worker = new ch . cyberduck . core . worker . ConcurrentTransferWorker ( new ch . cyberduck . core . pool . DefaultSessionPool ( connection , new ch . cyberduck . core . ssl . DisabledX509TrustManager ( ) , new ch . cyberduck . core . ssl . DefaultX509KeyManager ( ) , new ch . cyberduck . core . vault . DefaultVaultRegistry ( new ch . cyberduck . core . worker . DisabledPasswordCallback ( ) ) , ch . cyberduck . core . worker . PathCache . empty ( ) , new ch . cyberduck . core . worker . DisabledTranscriptListener ( ) , host ) , ch . cyberduck . core . pool . SessionPool . DISCONNECTED , t , new ch . cyberduck . core . transfer . TransferOptions ( ) , new ch . cyberduck . core . transfer . TransferSpeedometer ( t ) , new ch . cyberduck . core . transfer . DisabledTransferPrompt ( ) , new ch . cyberduck . core . transfer . DisabledTransferErrorCallback ( ) , new ch . cyberduck . core . worker . DisabledLoginCallback ( ) , new ch . cyberduck . core . worker . DisabledPasswordCallback ( ) , new ch . cyberduck . core . worker . DisabledProgressListener ( ) , new ch . cyberduck . core . io . DisabledStreamListener ( ) , new ch . cyberduck . core . notification . DisabledNotificationService ( ) ) ; final ch . cyberduck . core . worker . Session < ? > session = worker . borrow ( ConcurrentTransferWorker . Connection . source ) ; \"<AssertPlaceHolder>\" ; final java . util . concurrent . CyclicBarrier lock = new java . util . concurrent . CyclicBarrier ( 2 ) ; new java . lang . Thread ( new java . lang . Runnable ( ) { @ ch . cyberduck . core . worker . Override public void run ( ) { try { lock . await ( 1 , TimeUnit . MINUTES ) ; } catch ( java . lang . InterruptedException | java . util . concurrent . BrokenBarrierException | java . util . concurrent . TimeoutException e ) { org . junit . Assert . fail ( ) ; } } } ) . start ( ) ; java . lang . Thread . sleep ( 2000L ) ; worker . release ( session , ConcurrentTransferWorker . Connection . source , null ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( session )", "total": "testBorrowTimeoutNoSessionAvailable ( ) { final ch . cyberduck . core . worker . Host host = new ch . cyberduck . core . worker . Host ( new ch . cyberduck . core . worker . TestProtocol ( ) , \"localhost\" , new ch . cyberduck . core . worker . Credentials ( \"u\" , \"p\" ) ) ; final ch . cyberduck . core . transfer . Transfer t = new ch . cyberduck . core . transfer . UploadTransfer ( host , new ch . cyberduck . core . worker . Path ( \"/t\" , java . util . EnumSet . of ( Path . Type . directory ) ) , new ch . cyberduck . core . worker . NullLocal ( \"l\" ) ) ; final ch . cyberduck . core . worker . LoginConnectionService connection = new ch . cyberduck . core . worker . TestLoginConnectionService ( ) ; final ch . cyberduck . core . worker . ConcurrentTransferWorker worker = new ch . cyberduck . core . worker . ConcurrentTransferWorker ( new ch . cyberduck . core . pool . DefaultSessionPool ( connection , new ch . cyberduck . core . ssl . DisabledX509TrustManager ( ) , new ch . cyberduck . core . ssl . DefaultX509KeyManager ( ) , new ch . cyberduck . core . vault . DefaultVaultRegistry ( new ch . cyberduck . core . worker . DisabledPasswordCallback ( ) ) , ch . cyberduck . core . worker . PathCache . empty ( ) , new ch . cyberduck . core . worker . DisabledTranscriptListener ( ) , host ) , ch . cyberduck . core . pool . SessionPool . DISCONNECTED , t , new ch . cyberduck . core . transfer . TransferOptions ( ) , new ch . cyberduck . core . transfer . TransferSpeedometer ( t ) , new ch . cyberduck . core . transfer . DisabledTransferPrompt ( ) , new ch . cyberduck . core . transfer . DisabledTransferErrorCallback ( ) , new ch . cyberduck . core . worker . DisabledLoginCallback ( ) , new ch . cyberduck . core . worker . DisabledPasswordCallback ( ) , new ch . cyberduck . core . worker . DisabledProgressListener ( ) , new ch . cyberduck . core . io . DisabledStreamListener ( ) , new ch . cyberduck . core . notification . DisabledNotificationService ( ) ) ; final ch . cyberduck . core . worker . Session < ? > session = worker . borrow ( ConcurrentTransferWorker . Connection . source ) ; \"<AssertPlaceHolder>\" ; final java . util . concurrent . CyclicBarrier lock = new java . util . concurrent . CyclicBarrier ( 2 ) ; new java . lang . Thread ( new java . lang . Runnable ( ) { @ ch . cyberduck . core . worker . Override public void run ( ) { try { lock . await ( 1 , TimeUnit . MINUTES ) ; } catch ( java . lang . InterruptedException | java . util . concurrent . BrokenBarrierException | java . util . concurrent . TimeoutException e ) { org . junit . Assert . fail ( ) ; } } } ) . start ( ) ; java . lang . Thread . sleep ( 2000L ) ; worker . release ( session , ConcurrentTransferWorker . Connection . source , null ) ; } borrow ( ch . cyberduck . core . worker . Connection ) { switch ( type ) { case source : return source . borrow ( new ch . cyberduck . core . threading . BackgroundActionState ( ) { @ ch . cyberduck . core . worker . Override public boolean isCanceled ( ) { return ch . cyberduck . core . worker . ConcurrentTransferWorker . this . isCanceled ( ) ; } @ ch . cyberduck . core . worker . Override public boolean isRunning ( ) { return true ; } } ) ; case destination : return destination . borrow ( new ch . cyberduck . core . threading . BackgroundActionState ( ) { @ ch . cyberduck . core . worker . Override public boolean isCanceled ( ) { return ch . cyberduck . core . worker . ConcurrentTransferWorker . this . isCanceled ( ) ; } @ ch . cyberduck . core . worker . Override public boolean isRunning ( ) { return true ; } } ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( session )"}
{"focal": "getInetSocketAddress ( ) { return new java . net . InetSocketAddress ( ip , port ) ; }", "testMethod": "testGetStoreStorageByGroup ( ) { com . github . tobato . fastdfs . service . TrackerClientTest . LOGGER . debug ( \"testGetStoreStorageByGroup..\" ) ; com . github . tobato . fastdfs . domain . fdfs . StorageNode client = trackerClient . getStoreStorage ( TestConstants . DEFAULT_GROUP ) ; \"<AssertPlaceHolder>\" ; com . github . tobato . fastdfs . service . TrackerClientTest . LOGGER . debug ( \"result={}\" , client ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( client . getInetSocketAddress ( ) )", "total": "testGetStoreStorageByGroup ( ) { com . github . tobato . fastdfs . service . TrackerClientTest . LOGGER . debug ( \"testGetStoreStorageByGroup..\" ) ; com . github . tobato . fastdfs . domain . fdfs . StorageNode client = trackerClient . getStoreStorage ( TestConstants . DEFAULT_GROUP ) ; \"<AssertPlaceHolder>\" ; com . github . tobato . fastdfs . service . TrackerClientTest . LOGGER . debug ( \"result={}\" , client ) ; } getInetSocketAddress ( ) { return new java . net . InetSocketAddress ( ip , port ) ; }", "answer": "org . junit . Assert . assertNotNull ( client . getInetSocketAddress ( ) )"}
{"focal": "create ( java . lang . Object ) { com . flextrade . jfixture . SpecimenBuilder builder = builderContainer . getBuilder ( ) ; com . flextrade . jfixture . SpecimenContext context = builderContainer . getContext ( ) ; return builder . create ( request , context ) ; }", "testMethod": "package_private_constructors_are_supported ( ) { testtypes . TypeWithPackagePrivateConstructor instance = this . fixture . create ( testtypes . TypeWithPackagePrivateConstructor . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance )", "total": "package_private_constructors_are_supported ( ) { testtypes . TypeWithPackagePrivateConstructor instance = this . fixture . create ( testtypes . TypeWithPackagePrivateConstructor . class ) ; \"<AssertPlaceHolder>\" ; } create ( java . lang . Object ) { com . flextrade . jfixture . SpecimenBuilder builder = builderContainer . getBuilder ( ) ; com . flextrade . jfixture . SpecimenContext context = builderContainer . getContext ( ) ; return builder . create ( request , context ) ; }", "answer": "org . junit . Assert . assertNotNull ( instance )"}
{"focal": "getSession ( ) { return session ; }", "testMethod": "testGetSession ( ) { com . vmware . vrack . hms . task . ib . cli . CLITaskConnectorTest . logger . info ( \"[TS]<sp>:<sp>testGetSession\" ) ; java . lang . String username = \"root\" ; java . lang . String password = \"root123\" ; java . lang . String hostname = \"10.28.197.24\" ; int port = 22 ; com . vmware . vrack . hms . task . ib . cli . CLITaskConnector instance = new com . vmware . vrack . hms . task . ib . cli . CLITaskConnector ( username , password , hostname , port ) ; instance . createConnection ( ) ; com . vmware . vrack . hms . task . ib . cli . CLITaskConnectorTest . logger . info ( ( \"[TS]<sp>:<sp>Expected<sp>Result:<sp>Session<sp>=<sp>NOT<sp>NULL,<sp>Actual<sp>Result:<sp>Session=\" + ( instance . getSession ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance . getSession ( ) )", "total": "testGetSession ( ) { com . vmware . vrack . hms . task . ib . cli . CLITaskConnectorTest . logger . info ( \"[TS]<sp>:<sp>testGetSession\" ) ; java . lang . String username = \"root\" ; java . lang . String password = \"root123\" ; java . lang . String hostname = \"10.28.197.24\" ; int port = 22 ; com . vmware . vrack . hms . task . ib . cli . CLITaskConnector instance = new com . vmware . vrack . hms . task . ib . cli . CLITaskConnector ( username , password , hostname , port ) ; instance . createConnection ( ) ; com . vmware . vrack . hms . task . ib . cli . CLITaskConnectorTest . logger . info ( ( \"[TS]<sp>:<sp>Expected<sp>Result:<sp>Session<sp>=<sp>NOT<sp>NULL,<sp>Actual<sp>Result:<sp>Session=\" + ( instance . getSession ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; } getSession ( ) { return session ; }", "answer": "org . junit . Assert . assertNotNull ( instance . getSession ( ) )"}
{"focal": "addRepoToClose ( org . eclipse . jgit . lib . Repository ) { toClose . add ( r ) ; }", "testMethod": "testInitRepository ( ) { java . io . File directory = createTempDirectory ( \"testInitRepository\" ) ; org . eclipse . jgit . api . InitCommand command = new org . eclipse . jgit . api . InitCommand ( ) ; command . setDirectory ( directory ) ; org . eclipse . jgit . lib . Repository repository = command . call ( ) . getRepository ( ) ; addRepoToClose ( repository ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( repository )", "total": "testInitRepository ( ) { java . io . File directory = createTempDirectory ( \"testInitRepository\" ) ; org . eclipse . jgit . api . InitCommand command = new org . eclipse . jgit . api . InitCommand ( ) ; command . setDirectory ( directory ) ; org . eclipse . jgit . lib . Repository repository = command . call ( ) . getRepository ( ) ; addRepoToClose ( repository ) ; \"<AssertPlaceHolder>\" ; } addRepoToClose ( org . eclipse . jgit . lib . Repository ) { toClose . add ( r ) ; }", "answer": "org . junit . Assert . assertNotNull ( repository )"}
{"focal": "getPath ( java . net . URI ) { com . beijunyi . parallelgit . filesystem . GitFileSystem gfs = getFileSystem ( uri ) ; java . lang . String file = com . beijunyi . parallelgit . filesystem . utils . GfsUriUtils . getFile ( uri ) ; return gfs . getPath ( file ) . toRealPath ( ) ; }", "testMethod": "addExecutePermissionToFile_fileShouldBecomeExecutable ( ) { writeToCache ( \"/file.txt\" ) ; commitToMaster ( ) ; initGitFileSystem ( ) ; com . beijunyi . parallelgit . filesystem . io . GfsFileAttributeView . Posix view = provider . getFileAttributeView ( gfs . getPath ( \"/file.txt\" ) , GfsFileAttributeView . Posix . class ) ; \"<AssertPlaceHolder>\" ; view . setPermissions ( new java . util . HashSet ( java . util . Arrays . asList ( PosixFilePermission . OWNER_READ , PosixFilePermission . OWNER_WRITE , PosixFilePermission . OWNER_EXECUTE ) ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( view )", "total": "addExecutePermissionToFile_fileShouldBecomeExecutable ( ) { writeToCache ( \"/file.txt\" ) ; commitToMaster ( ) ; initGitFileSystem ( ) ; com . beijunyi . parallelgit . filesystem . io . GfsFileAttributeView . Posix view = provider . getFileAttributeView ( gfs . getPath ( \"/file.txt\" ) , GfsFileAttributeView . Posix . class ) ; \"<AssertPlaceHolder>\" ; view . setPermissions ( new java . util . HashSet ( java . util . Arrays . asList ( PosixFilePermission . OWNER_READ , PosixFilePermission . OWNER_WRITE , PosixFilePermission . OWNER_EXECUTE ) ) ) ; } getPath ( java . net . URI ) { com . beijunyi . parallelgit . filesystem . GitFileSystem gfs = getFileSystem ( uri ) ; java . lang . String file = com . beijunyi . parallelgit . filesystem . utils . GfsUriUtils . getFile ( uri ) ; return gfs . getPath ( file ) . toRealPath ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( view )"}
{"focal": "marshall ( java . lang . Object ) { return xstream . toXML ( objectInput ) ; }", "testMethod": "testXStreamMarshalling ( ) { final java . lang . String result = org . kie . server . api . model . DMNContextKSMarshallingTest . xStreamMarshaller . marshall ( org . kie . server . api . model . DMNContextKSMarshallingTest . BEAN ) ; \"<AssertPlaceHolder>\" ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . NAMESPACE_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . NAMESPACE ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . MODEL_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . MODEL_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_ID_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_ID ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_SERVICE_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_SERVICE_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_ENTRY_XPATH_XSTREAM , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_KEY , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_VALUE ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testXStreamMarshalling ( ) { final java . lang . String result = org . kie . server . api . model . DMNContextKSMarshallingTest . xStreamMarshaller . marshall ( org . kie . server . api . model . DMNContextKSMarshallingTest . BEAN ) ; \"<AssertPlaceHolder>\" ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . NAMESPACE_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . NAMESPACE ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . MODEL_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . MODEL_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_ID_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_ID ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_SERVICE_NAME_XPATH , org . kie . server . api . model . DMNContextKSMarshallingTest . DECISION_SERVICE_NAME ) ; checkXPath ( result , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_ENTRY_XPATH_XSTREAM , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_KEY , org . kie . server . api . model . DMNContextKSMarshallingTest . DMN_CONTEXT_VALUE ) ; } marshall ( java . lang . Object ) { return xstream . toXML ( objectInput ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "longestCommonSubstring ( ) { org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringDistances . longestCommonSubstring ( ) ) ; }", "testMethod": "longestCommonSubstring ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringDistances . longestCommonSubstring ( ) )", "total": "longestCommonSubstring ( ) { \"<AssertPlaceHolder>\" ; } longestCommonSubstring ( ) { org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringDistances . longestCommonSubstring ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( org . simmetrics . metrics . StringDistances . longestCommonSubstring ( ) )"}
{"focal": "findConnectingAddress ( java . net . InetSocketAddress , long , long ) { if ( targetAddress == null ) { throw new java . lang . NullPointerException ( \"targetAddress<sp>must<sp>not<sp>be<sp>null\" ) ; } if ( maxWaitMillis <= 0 ) { throw new java . lang . IllegalArgumentException ( \"Max<sp>wait<sp>time<sp>must<sp>be<sp>positive\" ) ; } final long startTimeNanos = java . lang . System . nanoTime ( ) ; long currentSleepTime = org . apache . flink . runtime . net . ConnectionUtils . MIN_SLEEP_TIME ; long elapsedTimeMillis = 0 ; final java . util . List < org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState > strategies = java . util . Collections . unmodifiableList ( java . util . Arrays . asList ( org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState . LOCAL_HOST , org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState . ADDRESS , org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState . FAST_CONNECT , org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState . SLOW_CONNECT ) ) ; while ( elapsedTimeMillis < maxWaitMillis ) { boolean logging = elapsedTimeMillis >= startLoggingAfter ; if ( logging ) { org . apache . flink . runtime . net . ConnectionUtils . LOG . info ( ( \"Trying<sp>to<sp>connect<sp>to<sp>\" + targetAddress ) ) ; } for ( org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState strategy : strategies ) { java . net . InetAddress address = org . apache . flink . runtime . net . ConnectionUtils . findAddressUsingStrategy ( strategy , targetAddress , logging ) ; if ( address != null ) { return address ; } } elapsedTimeMillis = ( ( java . lang . System . nanoTime ( ) ) - startTimeNanos ) / 1000000 ; long toWait = java . lang . Math . min ( ( maxWaitMillis - elapsedTimeMillis ) , currentSleepTime ) ; if ( toWait > 0 ) { if ( logging ) { org . apache . flink . runtime . net . ConnectionUtils . LOG . info ( \"Could<sp>not<sp>connect.<sp>Waiting<sp>for<sp>{}<sp>msecs<sp>before<sp>next<sp>attempt\" , toWait ) ; } else { org . apache . flink . runtime . net . ConnectionUtils . LOG . debug ( \"Could<sp>not<sp>connect.<sp>Waiting<sp>for<sp>{}<sp>msecs<sp>before<sp>next<sp>attempt\" , toWait ) ; } try { java . lang . Thread . sleep ( toWait ) ; } catch ( java . lang . InterruptedException e ) { throw new java . io . IOException ( \"Connection<sp>attempts<sp>have<sp>been<sp>interrupted.\" ) ; } } currentSleepTime = java . lang . Math . min ( ( 2 * currentSleepTime ) , org . apache . flink . runtime . net . ConnectionUtils . MAX_SLEEP_TIME ) ; } org . apache . flink . runtime . net . ConnectionUtils . LOG . warn ( \"Could<sp>not<sp>connect<sp>to<sp>{}.<sp>Selecting<sp>a<sp>local<sp>address<sp>using<sp>heuristics.\" , targetAddress ) ; java . net . InetAddress heuristic = org . apache . flink . runtime . net . ConnectionUtils . findAddressUsingStrategy ( org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState . HEURISTIC , targetAddress , true ) ; if ( heuristic != null ) { return heuristic ; } else { org . apache . flink . runtime . net . ConnectionUtils . LOG . warn ( \"Could<sp>not<sp>find<sp>any<sp>IPv4<sp>address<sp>that<sp>is<sp>not<sp>loopback<sp>or<sp>link-local.<sp>Using<sp>localhost<sp>address.\" ) ; return java . net . InetAddress . getLocalHost ( ) ; } }", "testMethod": "testFindConnectingAddressWhenGetLocalHostThrows ( ) { org . powermock . api . mockito . PowerMockito . mockStatic ( java . net . InetAddress . class ) ; org . mockito . Mockito . when ( java . net . InetAddress . getLocalHost ( ) ) . thenThrow ( new java . net . UnknownHostException ( ) ) . thenCallRealMethod ( ) ; final java . net . InetAddress loopbackAddress = java . net . Inet4Address . getByName ( \"127.0.0.1\" ) ; java . lang . Thread socketServerThread ; try ( java . net . ServerSocket socket = new java . net . ServerSocket ( 0 , 1 , loopbackAddress ) ) { socket . setSoTimeout ( 10000 ) ; socketServerThread = new java . lang . Thread ( new java . lang . Runnable ( ) { @ org . apache . flink . runtime . net . Override public void run ( ) { try { socket . accept ( ) ; } catch ( java . io . IOException e ) { } } } ) ; socketServerThread . start ( ) ; final java . net . InetSocketAddress socketAddress = new java . net . InetSocketAddress ( loopbackAddress , socket . getLocalPort ( ) ) ; final java . net . InetAddress address = org . apache . flink . runtime . net . ConnectionUtils . findConnectingAddress ( socketAddress , 2000 , 400 ) ; \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( address )", "total": "testFindConnectingAddressWhenGetLocalHostThrows ( ) { org . powermock . api . mockito . PowerMockito . mockStatic ( java . net . InetAddress . class ) ; org . mockito . Mockito . when ( java . net . InetAddress . getLocalHost ( ) ) . thenThrow ( new java . net . UnknownHostException ( ) ) . thenCallRealMethod ( ) ; final java . net . InetAddress loopbackAddress = java . net . Inet4Address . getByName ( \"127.0.0.1\" ) ; java . lang . Thread socketServerThread ; try ( java . net . ServerSocket socket = new java . net . ServerSocket ( 0 , 1 , loopbackAddress ) ) { socket . setSoTimeout ( 10000 ) ; socketServerThread = new java . lang . Thread ( new java . lang . Runnable ( ) { @ org . apache . flink . runtime . net . Override public void run ( ) { try { socket . accept ( ) ; } catch ( java . io . IOException e ) { } } } ) ; socketServerThread . start ( ) ; final java . net . InetSocketAddress socketAddress = new java . net . InetSocketAddress ( loopbackAddress , socket . getLocalPort ( ) ) ; final java . net . InetAddress address = org . apache . flink . runtime . net . ConnectionUtils . findConnectingAddress ( socketAddress , 2000 , 400 ) ; \"<AssertPlaceHolder>\" ; } } findConnectingAddress ( java . net . InetSocketAddress , long , long ) { if ( targetAddress == null ) { throw new java . lang . NullPointerException ( \"targetAddress<sp>must<sp>not<sp>be<sp>null\" ) ; } if ( maxWaitMillis <= 0 ) { throw new java . lang . IllegalArgumentException ( \"Max<sp>wait<sp>time<sp>must<sp>be<sp>positive\" ) ; } final long startTimeNanos = java . lang . System . nanoTime ( ) ; long currentSleepTime = org . apache . flink . runtime . net . ConnectionUtils . MIN_SLEEP_TIME ; long elapsedTimeMillis = 0 ; final java . util . List < org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState > strategies = java . util . Collections . unmodifiableList ( java . util . Arrays . asList ( org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState . LOCAL_HOST , org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState . ADDRESS , org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState . FAST_CONNECT , org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState . SLOW_CONNECT ) ) ; while ( elapsedTimeMillis < maxWaitMillis ) { boolean logging = elapsedTimeMillis >= startLoggingAfter ; if ( logging ) { org . apache . flink . runtime . net . ConnectionUtils . LOG . info ( ( \"Trying<sp>to<sp>connect<sp>to<sp>\" + targetAddress ) ) ; } for ( org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState strategy : strategies ) { java . net . InetAddress address = org . apache . flink . runtime . net . ConnectionUtils . findAddressUsingStrategy ( strategy , targetAddress , logging ) ; if ( address != null ) { return address ; } } elapsedTimeMillis = ( ( java . lang . System . nanoTime ( ) ) - startTimeNanos ) / 1000000 ; long toWait = java . lang . Math . min ( ( maxWaitMillis - elapsedTimeMillis ) , currentSleepTime ) ; if ( toWait > 0 ) { if ( logging ) { org . apache . flink . runtime . net . ConnectionUtils . LOG . info ( \"Could<sp>not<sp>connect.<sp>Waiting<sp>for<sp>{}<sp>msecs<sp>before<sp>next<sp>attempt\" , toWait ) ; } else { org . apache . flink . runtime . net . ConnectionUtils . LOG . debug ( \"Could<sp>not<sp>connect.<sp>Waiting<sp>for<sp>{}<sp>msecs<sp>before<sp>next<sp>attempt\" , toWait ) ; } try { java . lang . Thread . sleep ( toWait ) ; } catch ( java . lang . InterruptedException e ) { throw new java . io . IOException ( \"Connection<sp>attempts<sp>have<sp>been<sp>interrupted.\" ) ; } } currentSleepTime = java . lang . Math . min ( ( 2 * currentSleepTime ) , org . apache . flink . runtime . net . ConnectionUtils . MAX_SLEEP_TIME ) ; } org . apache . flink . runtime . net . ConnectionUtils . LOG . warn ( \"Could<sp>not<sp>connect<sp>to<sp>{}.<sp>Selecting<sp>a<sp>local<sp>address<sp>using<sp>heuristics.\" , targetAddress ) ; java . net . InetAddress heuristic = org . apache . flink . runtime . net . ConnectionUtils . findAddressUsingStrategy ( org . apache . flink . runtime . net . ConnectionUtils . AddressDetectionState . HEURISTIC , targetAddress , true ) ; if ( heuristic != null ) { return heuristic ; } else { org . apache . flink . runtime . net . ConnectionUtils . LOG . warn ( \"Could<sp>not<sp>find<sp>any<sp>IPv4<sp>address<sp>that<sp>is<sp>not<sp>loopback<sp>or<sp>link-local.<sp>Using<sp>localhost<sp>address.\" ) ; return java . net . InetAddress . getLocalHost ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( address )"}
{"focal": "findModule ( java . lang . String , org . jboss . modules . ModuleLoader ) { org . wildfly . swarm . bootstrap . modules . FunctionalModuleFinder delegate = org . wildfly . swarm . bootstrap . modules . DynamicModuleFinder . FINDERS . get ( moduleIdentifier ) ; if ( delegate == null ) { return null ; } return delegate . findModule ( moduleIdentifier , moduleLoader ) ; }", "testMethod": "testMain ( ) { org . wildfly . swarm . bootstrap . modules . BootstrapClasspathModuleFinder finder = new org . wildfly . swarm . bootstrap . modules . BootstrapClasspathModuleFinder ( ) ; try { org . jboss . modules . ModuleSpec spec = finder . findModule ( \"classpath.module.load.test\" , null ) ; \"<AssertPlaceHolder>\" ; } catch ( org . jboss . modules . ModuleLoadException e ) { org . junit . Assert . fail ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( spec )", "total": "testMain ( ) { org . wildfly . swarm . bootstrap . modules . BootstrapClasspathModuleFinder finder = new org . wildfly . swarm . bootstrap . modules . BootstrapClasspathModuleFinder ( ) ; try { org . jboss . modules . ModuleSpec spec = finder . findModule ( \"classpath.module.load.test\" , null ) ; \"<AssertPlaceHolder>\" ; } catch ( org . jboss . modules . ModuleLoadException e ) { org . junit . Assert . fail ( ) ; } } findModule ( java . lang . String , org . jboss . modules . ModuleLoader ) { org . wildfly . swarm . bootstrap . modules . FunctionalModuleFinder delegate = org . wildfly . swarm . bootstrap . modules . DynamicModuleFinder . FINDERS . get ( moduleIdentifier ) ; if ( delegate == null ) { return null ; } return delegate . findModule ( moduleIdentifier , moduleLoader ) ; }", "answer": "org . junit . Assert . assertNotNull ( spec )"}
{"focal": "getAudioRecorder ( ) { return audioRecorder ; }", "testMethod": "testGetMaxVolume ( ) { com . bixly . pastevid . recorders . AudioRecorderTest . log ( \"getMaxVolume\" ) ; com . bixly . pastevid . recorders . AudioRecorder instance = recorder . getAudioRecorder ( ) ; int result = AudioRecorder . MAX_VOLUME ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetMaxVolume ( ) { com . bixly . pastevid . recorders . AudioRecorderTest . log ( \"getMaxVolume\" ) ; com . bixly . pastevid . recorders . AudioRecorder instance = recorder . getAudioRecorder ( ) ; int result = AudioRecorder . MAX_VOLUME ; \"<AssertPlaceHolder>\" ; } getAudioRecorder ( ) { return audioRecorder ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getComponentInstance ( org . picocontainer . PicoContainer ) { org . omg . CORBA . ORB orb = ( ( org . omg . CORBA . ORB ) ( container . getComponentInstance ( org . omg . CORBA . ORB . class ) ) ) ; org . jacorb . notification . container . Configuration config = ( ( org . jacorb . orb . ORB ) ( orb ) ) . getConfiguration ( ) ; return config ; }", "testMethod": "testGetPOA ( ) { org . omg . PortableServer . POA _poa = ( ( org . omg . PortableServer . POA ) ( picoContainer_ . getComponentInstance ( org . omg . PortableServer . POA . class ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( _poa )", "total": "testGetPOA ( ) { org . omg . PortableServer . POA _poa = ( ( org . omg . PortableServer . POA ) ( picoContainer_ . getComponentInstance ( org . omg . PortableServer . POA . class ) ) ) ; \"<AssertPlaceHolder>\" ; } getComponentInstance ( org . picocontainer . PicoContainer ) { org . omg . CORBA . ORB orb = ( ( org . omg . CORBA . ORB ) ( container . getComponentInstance ( org . omg . CORBA . ORB . class ) ) ) ; org . jacorb . notification . container . Configuration config = ( ( org . jacorb . orb . ORB ) ( orb ) ) . getConfiguration ( ) ; return config ; }", "answer": "org . junit . Assert . assertNotNull ( _poa )"}
{"focal": "coalesceMaps ( java . util . Map , java . util . Map ) { if ( targetMap == null ) { targetMap = new java . util . HashMap ( ) ; } if ( ( sourceMap != null ) && ( ! ( sourceMap . isEmpty ( ) ) ) ) { final java . util . Set < ? extends java . util . Map . Entry < ? extends java . lang . String , ? > > sourceMapEntrySet = sourceMap . entrySet ( ) ; if ( ( sourceMapEntrySet != null ) && ( ! ( sourceMapEntrySet . isEmpty ( ) ) ) ) { for ( final java . util . Map . Entry < ? extends java . lang . String , ? > sourceMapEntry : sourceMapEntrySet ) { if ( sourceMapEntry != null ) { final java . lang . String sourceMapKey = sourceMapEntry . getKey ( ) ; final java . lang . Object sourceMapValue = sourceMapEntry . getValue ( ) ; if ( ! ( targetMap . containsKey ( sourceMapKey ) ) ) { targetMap . put ( sourceMapKey , sourceMapValue ) ; } else if ( sourceMapValue instanceof java . util . Map ) { final java . lang . Object targetMapValue = targetMap . get ( sourceMapKey ) ; if ( targetMapValue instanceof java . util . Map ) { @ org . microbean . helm . chart . SuppressWarnings ( \"unchecked\" ) final java . util . Map < java . lang . String , java . lang . Object > targetMapValueMap = ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( targetMapValue ) ) ; @ org . microbean . helm . chart . SuppressWarnings ( \"unchecked\" ) final java . util . Map < ? extends java . lang . String , ? > sourceMapValueMap = ( ( java . util . Map < ? extends java . lang . String , ? > ) ( sourceMapValue ) ) ; org . microbean . helm . chart . Values . coalesceMaps ( sourceMapValueMap , targetMapValueMap ) ; } } } } } } return targetMap ; }", "testMethod": "testCoalesceMapsEnsuringNullSourceMapNoLongerCausesNullPointerException ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . microbean . helm . chart . Values . coalesceMaps ( null , null ) )", "total": "testCoalesceMapsEnsuringNullSourceMapNoLongerCausesNullPointerException ( ) { \"<AssertPlaceHolder>\" ; } coalesceMaps ( java . util . Map , java . util . Map ) { if ( targetMap == null ) { targetMap = new java . util . HashMap ( ) ; } if ( ( sourceMap != null ) && ( ! ( sourceMap . isEmpty ( ) ) ) ) { final java . util . Set < ? extends java . util . Map . Entry < ? extends java . lang . String , ? > > sourceMapEntrySet = sourceMap . entrySet ( ) ; if ( ( sourceMapEntrySet != null ) && ( ! ( sourceMapEntrySet . isEmpty ( ) ) ) ) { for ( final java . util . Map . Entry < ? extends java . lang . String , ? > sourceMapEntry : sourceMapEntrySet ) { if ( sourceMapEntry != null ) { final java . lang . String sourceMapKey = sourceMapEntry . getKey ( ) ; final java . lang . Object sourceMapValue = sourceMapEntry . getValue ( ) ; if ( ! ( targetMap . containsKey ( sourceMapKey ) ) ) { targetMap . put ( sourceMapKey , sourceMapValue ) ; } else if ( sourceMapValue instanceof java . util . Map ) { final java . lang . Object targetMapValue = targetMap . get ( sourceMapKey ) ; if ( targetMapValue instanceof java . util . Map ) { @ org . microbean . helm . chart . SuppressWarnings ( \"unchecked\" ) final java . util . Map < java . lang . String , java . lang . Object > targetMapValueMap = ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( targetMapValue ) ) ; @ org . microbean . helm . chart . SuppressWarnings ( \"unchecked\" ) final java . util . Map < ? extends java . lang . String , ? > sourceMapValueMap = ( ( java . util . Map < ? extends java . lang . String , ? > ) ( sourceMapValue ) ) ; org . microbean . helm . chart . Values . coalesceMaps ( sourceMapValueMap , targetMapValueMap ) ; } } } } } } return targetMap ; }", "answer": "org . junit . Assert . assertNotNull ( org . microbean . helm . chart . Values . coalesceMaps ( null , null ) )"}
{"focal": "build ( ) { return org . opendaylight . yangtools . yang . data . api . FixedYangInstanceIdentifier . create ( path , hash . build ( ) ) ; }", "testMethod": "immutableLeafSetNodeBuilderExceptionTest ( ) { final org . opendaylight . yangtools . yang . data . api . schema . LeafSetNode < ? > leafSetNode = org . opendaylight . yangtools . yang . data . impl . schema . builder . impl . ImmutableLeafSetNodeBuilder . create ( 1 ) . withNodeIdentifier ( org . opendaylight . yangtools . yang . data . impl . schema . BuilderTest . NODE_IDENTIFIER_LEAF_LIST ) . build ( ) ; \"<AssertPlaceHolder>\" ; org . opendaylight . yangtools . yang . data . impl . schema . builder . impl . ImmutableLeafSetNodeSchemaAwareBuilder . create ( mock ( org . opendaylight . yangtools . yang . model . api . LeafListSchemaNode . class ) , leafSetNode ) . build ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( leafSetNode )", "total": "immutableLeafSetNodeBuilderExceptionTest ( ) { final org . opendaylight . yangtools . yang . data . api . schema . LeafSetNode < ? > leafSetNode = org . opendaylight . yangtools . yang . data . impl . schema . builder . impl . ImmutableLeafSetNodeBuilder . create ( 1 ) . withNodeIdentifier ( org . opendaylight . yangtools . yang . data . impl . schema . BuilderTest . NODE_IDENTIFIER_LEAF_LIST ) . build ( ) ; \"<AssertPlaceHolder>\" ; org . opendaylight . yangtools . yang . data . impl . schema . builder . impl . ImmutableLeafSetNodeSchemaAwareBuilder . create ( mock ( org . opendaylight . yangtools . yang . model . api . LeafListSchemaNode . class ) , leafSetNode ) . build ( ) ; } build ( ) { return org . opendaylight . yangtools . yang . data . api . FixedYangInstanceIdentifier . create ( path , hash . build ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( leafSetNode )"}
{"focal": "getDefaultServicePaymentConfiguration ( ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "testMethod": "getDefaultServicePaymentConfiguration_asReseller ( ) { container . login ( givenReseller ( ) . getKey ( ) , UserRoleType . RESELLER_MANAGER . name ( ) ) ; java . util . Set < org . oscm . internal . vo . VOPaymentType > list = as . getDefaultServicePaymentConfiguration ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( list )", "total": "getDefaultServicePaymentConfiguration_asReseller ( ) { container . login ( givenReseller ( ) . getKey ( ) , UserRoleType . RESELLER_MANAGER . name ( ) ) ; java . util . Set < org . oscm . internal . vo . VOPaymentType > list = as . getDefaultServicePaymentConfiguration ( ) ; \"<AssertPlaceHolder>\" ; } getDefaultServicePaymentConfiguration ( ) { throw new java . lang . UnsupportedOperationException ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( list )"}
{"focal": "getInjectionPoint ( ) { return injectionPoint ; }", "testMethod": "testInjectionPointOutsideSLSB ( ) { \"<AssertPlaceHolder>\" ; foo . getInjectionPoint ( ) . getType ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( foo . getInjectionPoint ( ) )", "total": "testInjectionPointOutsideSLSB ( ) { \"<AssertPlaceHolder>\" ; foo . getInjectionPoint ( ) . getType ( ) ; } getInjectionPoint ( ) { return injectionPoint ; }", "answer": "org . junit . Assert . assertNotNull ( foo . getInjectionPoint ( ) )"}
{"focal": "getUniqueId ( ) { return id ; }", "testMethod": "testCreateUser ( ) { org . eclipse . orion . server . core . metastore . IMetaStore store = getMetaStore ( ) ; org . eclipse . orion . server . core . metastore . UserInfo user = new org . eclipse . orion . server . core . metastore . UserInfo ( ) ; user . setUserName ( \"testCreateUser\" ) ; store . createUser ( user ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( user . getUniqueId ( ) )", "total": "testCreateUser ( ) { org . eclipse . orion . server . core . metastore . IMetaStore store = getMetaStore ( ) ; org . eclipse . orion . server . core . metastore . UserInfo user = new org . eclipse . orion . server . core . metastore . UserInfo ( ) ; user . setUserName ( \"testCreateUser\" ) ; store . createUser ( user ) ; \"<AssertPlaceHolder>\" ; } getUniqueId ( ) { return id ; }", "answer": "org . junit . Assert . assertNotNull ( user . getUniqueId ( ) )"}
{"focal": "getPropertyDesc ( int ) { return ( ( org . seasar . framework . beans . PropertyDesc ) ( propertyDescCache . get ( index ) ) ) ; }", "testMethod": "testGetArgumentType_MyEnum ( ) { org . seasar . extension . jdbc . gen . internal . argtype . ArgumentType < java . lang . String > argumentType = org . seasar . extension . jdbc . gen . internal . argtype . ArgumentTypeRegistry . getArgumentType ( beanDesc . getPropertyDesc ( \"myEnum\" ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( argumentType )", "total": "testGetArgumentType_MyEnum ( ) { org . seasar . extension . jdbc . gen . internal . argtype . ArgumentType < java . lang . String > argumentType = org . seasar . extension . jdbc . gen . internal . argtype . ArgumentTypeRegistry . getArgumentType ( beanDesc . getPropertyDesc ( \"myEnum\" ) ) ; \"<AssertPlaceHolder>\" ; } getPropertyDesc ( int ) { return ( ( org . seasar . framework . beans . PropertyDesc ) ( propertyDescCache . get ( index ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( argumentType )"}
{"focal": "getMetaData ( ) { return new org . xenei . jdbc4sparql . J4SDatabaseMetaData ( this , driver ) ; }", "testMethod": "testGetMetaData ( ) { connection = new org . xenei . jdbc4sparql . J4SConnection ( driver , url , properties ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( connection . getMetaData ( ) )", "total": "testGetMetaData ( ) { connection = new org . xenei . jdbc4sparql . J4SConnection ( driver , url , properties ) ; \"<AssertPlaceHolder>\" ; } getMetaData ( ) { return new org . xenei . jdbc4sparql . J4SDatabaseMetaData ( this , driver ) ; }", "answer": "org . junit . Assert . assertNotNull ( connection . getMetaData ( ) )"}
{"focal": "getEnum ( java . lang . String ) { if ( enumList . isEmpty ( ) ) { init ( ) ; } return enumMap . get ( enumName ) ; }", "testMethod": "testGetEnumEmpty ( ) { java . lang . String enumName = \"\" ; xaEnumUtil . getEnum ( enumName ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ( ( xaEnumUtil . enumList . size ( ) ) > 0 ) )", "total": "testGetEnumEmpty ( ) { java . lang . String enumName = \"\" ; xaEnumUtil . getEnum ( enumName ) ; \"<AssertPlaceHolder>\" ; } getEnum ( java . lang . String ) { if ( enumList . isEmpty ( ) ) { init ( ) ; } return enumMap . get ( enumName ) ; }", "answer": "org . junit . Assert . assertNotNull ( ( ( xaEnumUtil . enumList . size ( ) ) > 0 ) )"}
{"focal": "getResource ( java . lang . String ) { return new java . io . File ( getClass ( ) . getResource ( wsdlFile ) . toURI ( ) ) ; }", "testMethod": "testCreateDispatchBadPort ( ) { java . net . URL wsdl1 = getClass ( ) . getResource ( \"/wsdl/calculator.wsdl\" ) ; \"<AssertPlaceHolder>\" ; org . apache . cxf . jaxws . ServiceImpl service = new org . apache . cxf . jaxws . ServiceImpl ( getBus ( ) , wsdl1 , org . apache . cxf . jaxws . ServiceImplTest . SERVICE_1 , org . apache . cxf . jaxws . ServiceImpl . class ) ; javax . xml . namespace . QName badPort = new javax . xml . namespace . QName ( \"http://apache.org/cxf/calculator\" , \"PortDoesNotExist\" ) ; try { service . createDispatch ( badPort , javax . xml . transform . Source . class , Service . Mode . PAYLOAD ) ; } catch ( javax . xml . ws . WebServiceException e ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( wsdl1 )", "total": "testCreateDispatchBadPort ( ) { java . net . URL wsdl1 = getClass ( ) . getResource ( \"/wsdl/calculator.wsdl\" ) ; \"<AssertPlaceHolder>\" ; org . apache . cxf . jaxws . ServiceImpl service = new org . apache . cxf . jaxws . ServiceImpl ( getBus ( ) , wsdl1 , org . apache . cxf . jaxws . ServiceImplTest . SERVICE_1 , org . apache . cxf . jaxws . ServiceImpl . class ) ; javax . xml . namespace . QName badPort = new javax . xml . namespace . QName ( \"http://apache.org/cxf/calculator\" , \"PortDoesNotExist\" ) ; try { service . createDispatch ( badPort , javax . xml . transform . Source . class , Service . Mode . PAYLOAD ) ; } catch ( javax . xml . ws . WebServiceException e ) { } } getResource ( java . lang . String ) { return new java . io . File ( getClass ( ) . getResource ( wsdlFile ) . toURI ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( wsdl1 )"}
{"focal": "h2 ( ) { org . junit . Assert . assertNotNull ( EmbeddedDatabaseRule . Builder . h2 ( ) ) ; }", "testMethod": "withInitialSqlFromResourceNullCharset ( ) { final org . zapodot . junit . db . EmbeddedDatabaseRule . Builder builder = org . zapodot . junit . db . EmbeddedDatabaseRule . h2 ( ) ; \"<AssertPlaceHolder>\" ; builder . withInitialSqlFromResource ( \"filename.sql\" , null ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( builder )", "total": "withInitialSqlFromResourceNullCharset ( ) { final org . zapodot . junit . db . EmbeddedDatabaseRule . Builder builder = org . zapodot . junit . db . EmbeddedDatabaseRule . h2 ( ) ; \"<AssertPlaceHolder>\" ; builder . withInitialSqlFromResource ( \"filename.sql\" , null ) ; } h2 ( ) { org . junit . Assert . assertNotNull ( EmbeddedDatabaseRule . Builder . h2 ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( builder )"}
{"focal": "getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "testMethod": "shouldThrowExceptionIfMapClassCannotBeInstantiated ( ) { final java . lang . Class < ? extends java . util . Map > mapClass = java . util . Map . class ; final uk . gov . gchq . gaffer . store . schema . Schema schema = mock ( uk . gov . gchq . gaffer . store . schema . Schema . class ) ; final uk . gov . gchq . gaffer . mapstore . MapStoreProperties properties = mock ( uk . gov . gchq . gaffer . mapstore . MapStoreProperties . class ) ; final uk . gov . gchq . gaffer . mapstore . factory . SimpleMapFactory factory = new uk . gov . gchq . gaffer . mapstore . factory . SimpleMapFactory ( ) ; given ( properties . get ( SimpleMapFactory . MAP_CLASS , SimpleMapFactory . MAP_CLASS_DEFAULT ) ) . willReturn ( mapClass . getName ( ) ) ; factory . initialise ( schema , properties ) ; try { factory . getMap ( \"mapName1\" , java . lang . Object . class , java . lang . Object . class ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final java . lang . IllegalArgumentException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )", "total": "shouldThrowExceptionIfMapClassCannotBeInstantiated ( ) { final java . lang . Class < ? extends java . util . Map > mapClass = java . util . Map . class ; final uk . gov . gchq . gaffer . store . schema . Schema schema = mock ( uk . gov . gchq . gaffer . store . schema . Schema . class ) ; final uk . gov . gchq . gaffer . mapstore . MapStoreProperties properties = mock ( uk . gov . gchq . gaffer . mapstore . MapStoreProperties . class ) ; final uk . gov . gchq . gaffer . mapstore . factory . SimpleMapFactory factory = new uk . gov . gchq . gaffer . mapstore . factory . SimpleMapFactory ( ) ; given ( properties . get ( SimpleMapFactory . MAP_CLASS , SimpleMapFactory . MAP_CLASS_DEFAULT ) ) . willReturn ( mapClass . getName ( ) ) ; factory . initialise ( schema , properties ) ; try { factory . getMap ( \"mapName1\" , java . lang . Object . class , java . lang . Object . class ) ; org . junit . Assert . fail ( \"Exception<sp>expected\" ) ; } catch ( final java . lang . IllegalArgumentException e ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + \"<sp>in<sp>string<sp>\\'\" ) + ( this . visibility ) ) + \"\\'<sp>at<sp>position<sp>\" ) + ( super . getErrorOffset ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( e . getMessage ( ) )"}
{"focal": "getInputStream ( ) { return inputStream ; }", "testMethod": "importGraph2 ( ) { org . nd4j . autodiff . samediff . SameDiff graph = org . nd4j . imports . graphmapper . tf . TFGraphMapper . getInstance ( ) . importGraph ( new org . nd4j . linalg . io . ClassPathResource ( \"tf_graphs/tensorflow_inception_graph.pb\" ) . getInputStream ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( graph )", "total": "importGraph2 ( ) { org . nd4j . autodiff . samediff . SameDiff graph = org . nd4j . imports . graphmapper . tf . TFGraphMapper . getInstance ( ) . importGraph ( new org . nd4j . linalg . io . ClassPathResource ( \"tf_graphs/tensorflow_inception_graph.pb\" ) . getInputStream ( ) ) ; \"<AssertPlaceHolder>\" ; } getInputStream ( ) { return inputStream ; }", "answer": "org . junit . Assert . assertNotNull ( graph )"}
{"focal": "createEntity ( org . sagebionetworks . repo . model . UserInfo , T extends org . sagebionetworks . repo . model . Entity , java . lang . String ) { if ( newEntity == null ) throw new java . lang . IllegalArgumentException ( \"Entity<sp>cannot<sp>be<sp>null\" ) ; org . sagebionetworks . repo . model . Node node = org . sagebionetworks . repo . manager . NodeTranslationUtils . createFromEntity ( newEntity ) ; node . setNodeType ( org . sagebionetworks . repo . model . EntityTypeUtils . getEntityTypeForClass ( newEntity . getClass ( ) ) ) ; node . setActivityId ( activityId ) ; org . sagebionetworks . repo . model . NamedAnnotations annos = new org . sagebionetworks . repo . model . NamedAnnotations ( ) ; org . sagebionetworks . repo . manager . NodeTranslationUtils . updateNodeSecondaryFieldsFromObject ( newEntity , annos . getPrimaryAnnotations ( ) ) ; node = nodeManager . createNewNode ( node , annos , userInfo ) ; return node . getId ( ) ; }", "testMethod": "testDelete ( ) { org . sagebionetworks . repo . model . Project project = new org . sagebionetworks . repo . model . Project ( ) ; project . setName ( \"testCreateProject\" ) ; org . sagebionetworks . repo . model . Project clone = servletTestHelper . createEntity ( dispatchServlet , project , userId ) ; \"<AssertPlaceHolder>\" ; toDelete . add ( clone . getId ( ) ) ; servletTestHelper . deleteEntity ( dispatchServlet , org . sagebionetworks . repo . model . Project . class , clone . getId ( ) , userId ) ; javax . servlet . http . HttpServletRequest mockRequest = org . mockito . Mockito . mock ( javax . servlet . http . HttpServletRequest . class ) ; entityService . getEntity ( userId , clone . getId ( ) , mockRequest , org . sagebionetworks . repo . model . Project . class ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( clone )", "total": "testDelete ( ) { org . sagebionetworks . repo . model . Project project = new org . sagebionetworks . repo . model . Project ( ) ; project . setName ( \"testCreateProject\" ) ; org . sagebionetworks . repo . model . Project clone = servletTestHelper . createEntity ( dispatchServlet , project , userId ) ; \"<AssertPlaceHolder>\" ; toDelete . add ( clone . getId ( ) ) ; servletTestHelper . deleteEntity ( dispatchServlet , org . sagebionetworks . repo . model . Project . class , clone . getId ( ) , userId ) ; javax . servlet . http . HttpServletRequest mockRequest = org . mockito . Mockito . mock ( javax . servlet . http . HttpServletRequest . class ) ; entityService . getEntity ( userId , clone . getId ( ) , mockRequest , org . sagebionetworks . repo . model . Project . class ) ; } createEntity ( org . sagebionetworks . repo . model . UserInfo , T extends org . sagebionetworks . repo . model . Entity , java . lang . String ) { if ( newEntity == null ) throw new java . lang . IllegalArgumentException ( \"Entity<sp>cannot<sp>be<sp>null\" ) ; org . sagebionetworks . repo . model . Node node = org . sagebionetworks . repo . manager . NodeTranslationUtils . createFromEntity ( newEntity ) ; node . setNodeType ( org . sagebionetworks . repo . model . EntityTypeUtils . getEntityTypeForClass ( newEntity . getClass ( ) ) ) ; node . setActivityId ( activityId ) ; org . sagebionetworks . repo . model . NamedAnnotations annos = new org . sagebionetworks . repo . model . NamedAnnotations ( ) ; org . sagebionetworks . repo . manager . NodeTranslationUtils . updateNodeSecondaryFieldsFromObject ( newEntity , annos . getPrimaryAnnotations ( ) ) ; node = nodeManager . createNewNode ( node , annos , userInfo ) ; return node . getId ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( clone )"}
{"focal": "getProperties ( ) { java . util . Properties properties = new java . util . Properties ( ) ; java . net . URL propertiesURL = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( \"hibernate.properties\" ) ; try ( java . io . FileInputStream inputStream = new java . io . FileInputStream ( propertiesURL . getFile ( ) ) ) { properties . load ( inputStream ) ; } return properties ; }", "testMethod": "givenSystem_whenCalledGetProperties_thenReturnPropertiesinResult ( ) { java . util . Properties properties = java . lang . System . getProperties ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( properties )", "total": "givenSystem_whenCalledGetProperties_thenReturnPropertiesinResult ( ) { java . util . Properties properties = java . lang . System . getProperties ( ) ; \"<AssertPlaceHolder>\" ; } getProperties ( ) { java . util . Properties properties = new java . util . Properties ( ) ; java . net . URL propertiesURL = java . lang . Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( \"hibernate.properties\" ) ; try ( java . io . FileInputStream inputStream = new java . io . FileInputStream ( propertiesURL . getFile ( ) ) ) { properties . load ( inputStream ) ; } return properties ; }", "answer": "org . junit . Assert . assertNotNull ( properties )"}
{"focal": "createPolicy ( java . lang . String ) { if ( org . apache . commons . lang3 . StringUtils . isBlank ( resourceName ) ) { throw new com . github . bordertech . wcomponents . util . SystemException ( \"AntiSamy<sp>Policy<sp>resourceName<sp>cannot<sp>be<sp>null<sp>\" ) ; } java . net . URL resource = com . github . bordertech . wcomponents . util . HtmlSanitizerUtil . class . getClassLoader ( ) . getResource ( resourceName ) ; if ( resource == null ) { throw new com . github . bordertech . wcomponents . util . SystemException ( \"Could<sp>not<sp>find<sp>AntiSamy<sp>Policy<sp>XML<sp>resource.\" ) ; } try { return org . owasp . validator . html . Policy . getInstance ( resource ) ; } catch ( org . owasp . validator . html . PolicyException ex ) { throw new com . github . bordertech . wcomponents . util . SystemException ( ( \"Could<sp>not<sp>create<sp>AntiSamy<sp>Policy\" + ( ex . getMessage ( ) ) ) , ex ) ; } }", "testMethod": "testCreatePolicy ( ) { java . lang . String resourceName = com . github . bordertech . wcomponents . util . ConfigurationProperties . getAntisamyStrictConfigurationFile ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . github . bordertech . wcomponents . util . HtmlSanitizerUtil . createPolicy ( resourceName ) )", "total": "testCreatePolicy ( ) { java . lang . String resourceName = com . github . bordertech . wcomponents . util . ConfigurationProperties . getAntisamyStrictConfigurationFile ( ) ; \"<AssertPlaceHolder>\" ; } createPolicy ( java . lang . String ) { if ( org . apache . commons . lang3 . StringUtils . isBlank ( resourceName ) ) { throw new com . github . bordertech . wcomponents . util . SystemException ( \"AntiSamy<sp>Policy<sp>resourceName<sp>cannot<sp>be<sp>null<sp>\" ) ; } java . net . URL resource = com . github . bordertech . wcomponents . util . HtmlSanitizerUtil . class . getClassLoader ( ) . getResource ( resourceName ) ; if ( resource == null ) { throw new com . github . bordertech . wcomponents . util . SystemException ( \"Could<sp>not<sp>find<sp>AntiSamy<sp>Policy<sp>XML<sp>resource.\" ) ; } try { return org . owasp . validator . html . Policy . getInstance ( resource ) ; } catch ( org . owasp . validator . html . PolicyException ex ) { throw new com . github . bordertech . wcomponents . util . SystemException ( ( \"Could<sp>not<sp>create<sp>AntiSamy<sp>Policy\" + ( ex . getMessage ( ) ) ) , ex ) ; } }", "answer": "org . junit . Assert . assertNotNull ( com . github . bordertech . wcomponents . util . HtmlSanitizerUtil . createPolicy ( resourceName ) )"}
{"focal": "getTopicArn ( org . sagebionetworks . repo . model . ObjectType ) { return getTopicInfoLazy ( type ) . getArn ( ) ; }", "testMethod": "testGetArn ( ) { java . lang . String arn = messagePublisher . getTopicArn ( ObjectType . ENTITY ) ; System . out . println ( ( \"Arn:<sp>\" + arn ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( arn )", "total": "testGetArn ( ) { java . lang . String arn = messagePublisher . getTopicArn ( ObjectType . ENTITY ) ; System . out . println ( ( \"Arn:<sp>\" + arn ) ) ; \"<AssertPlaceHolder>\" ; } getTopicArn ( org . sagebionetworks . repo . model . ObjectType ) { return getTopicInfoLazy ( type ) . getArn ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( arn )"}
{"focal": "readFile ( java . lang . String ) { java . io . InputStream in = getFileAsStream ( filename ) ; byte [ ] tmp = new byte [ 8192 ] ; int count = in . read ( tmp ) ; java . lang . StringBuilder b = new java . lang . StringBuilder ( ) ; while ( count >= 0 ) { b . append ( new java . lang . String ( tmp , 0 , count ) ) ; count = in . read ( tmp ) ; } return b . toString ( ) ; }", "testMethod": "validateWrongTypeAttributeForInlineContentMany ( ) { java . lang . String content = readFile ( \"double_expanded_team.xml\" ) . replace ( \"type=\\\"application/atom+xml;type=entry\\\"\" , \"type=\\\"application/atom+xml;type=feed\\\"\" ) ; \"<AssertPlaceHolder>\" ; com . sap . core . odata . api . edm . EdmEntitySet entitySet = com . sap . core . odata . testutil . mock . MockFacade . getMockEdm ( ) . getDefaultEntityContainer ( ) . getEntitySet ( \"Teams\" ) ; java . io . InputStream reqContent = createContentAsStream ( content ) ; readAndExpectException ( entitySet , reqContent , EntityProviderException . INVALID_INLINE_CONTENT . addContent ( \"entry\" ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( content )", "total": "validateWrongTypeAttributeForInlineContentMany ( ) { java . lang . String content = readFile ( \"double_expanded_team.xml\" ) . replace ( \"type=\\\"application/atom+xml;type=entry\\\"\" , \"type=\\\"application/atom+xml;type=feed\\\"\" ) ; \"<AssertPlaceHolder>\" ; com . sap . core . odata . api . edm . EdmEntitySet entitySet = com . sap . core . odata . testutil . mock . MockFacade . getMockEdm ( ) . getDefaultEntityContainer ( ) . getEntitySet ( \"Teams\" ) ; java . io . InputStream reqContent = createContentAsStream ( content ) ; readAndExpectException ( entitySet , reqContent , EntityProviderException . INVALID_INLINE_CONTENT . addContent ( \"entry\" ) ) ; } readFile ( java . lang . String ) { java . io . InputStream in = getFileAsStream ( filename ) ; byte [ ] tmp = new byte [ 8192 ] ; int count = in . read ( tmp ) ; java . lang . StringBuilder b = new java . lang . StringBuilder ( ) ; while ( count >= 0 ) { b . append ( new java . lang . String ( tmp , 0 , count ) ) ; count = in . read ( tmp ) ; } return b . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( content )"}
{"focal": "solve ( org . evosuite . symbolic . solver . Solver , java . util . Collection ) { if ( hasCachedResult ( constraints ) ) { org . evosuite . symbolic . solver . SolverResult cached_solution = getCachedResult ( ) ; return cached_solution ; } org . evosuite . symbolic . solver . SolverResult solverResult ; try { solverResult = solver . solve ( constraints ) ; if ( solverResult . isUNSAT ( ) ) { addUNSAT ( constraints , solverResult ) ; } else { addSAT ( constraints , solverResult ) ; } } catch ( org . evosuite . symbolic . solver . SolverTimeoutException | java . io . IOException | org . evosuite . symbolic . solver . SolverParseException | org . evosuite . symbolic . solver . SolverEmptyQueryException | org . evosuite . symbolic . solver . SolverErrorException e ) { solverResult = null ; } return solverResult ; }", "testMethod": "testChopOffIndexOfC ( ) { java . lang . String var1value = \"D<E\u001exqaa:saksajij1§n\" ; org . evosuite . symbolic . expr . str . StringVariable var1 = new org . evosuite . symbolic . expr . str . StringVariable ( \"var1\" , var1value ) ; org . evosuite . symbolic . expr . bv . IntegerConstant colon_code = new org . evosuite . symbolic . expr . bv . IntegerConstant ( 58 ) ; org . evosuite . symbolic . expr . bv . IntegerConstant minus_one = new org . evosuite . symbolic . expr . bv . IntegerConstant ( ( - 1 ) ) ; int colon_int_code = ( ( int ) ( ':' ) ) ; int concrete_value = var1value . indexOf ( colon_int_code ) ; org . evosuite . symbolic . expr . bv . StringBinaryToIntegerExpression index_of_colon = new org . evosuite . symbolic . expr . bv . StringBinaryToIntegerExpression ( var1 , org . evosuite . symbolic . expr . Operator . INDEXOFC , colon_code , ( ( long ) ( concrete_value ) ) ) ; org . evosuite . symbolic . expr . IntegerConstraint constr1 = new org . evosuite . symbolic . expr . IntegerConstraint ( index_of_colon , org . evosuite . symbolic . expr . Comparator . EQ , minus_one ) ; java . util . List < org . evosuite . symbolic . expr . Constraint < ? > > constraints = new java . util . ArrayList < org . evosuite . symbolic . expr . Constraint < ? > > ( ) ; constraints . add ( constr1 ) ; org . evosuite . symbolic . solver . avm . EvoSuiteSolver solver = new org . evosuite . symbolic . solver . avm . EvoSuiteSolver ( ) ; java . util . Map < java . lang . String , java . lang . Object > solution ; try { solution = org . evosuite . symbolic . solver . TestSolver . solve ( solver , constraints ) ; \"<AssertPlaceHolder>\" ; } catch ( org . evosuite . symbolic . solver . SolverTimeoutException e ) { org . junit . Assert . fail ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( solution )", "total": "testChopOffIndexOfC ( ) { java . lang . String var1value = \"D<E\u001exqaa:saksajij1§n\" ; org . evosuite . symbolic . expr . str . StringVariable var1 = new org . evosuite . symbolic . expr . str . StringVariable ( \"var1\" , var1value ) ; org . evosuite . symbolic . expr . bv . IntegerConstant colon_code = new org . evosuite . symbolic . expr . bv . IntegerConstant ( 58 ) ; org . evosuite . symbolic . expr . bv . IntegerConstant minus_one = new org . evosuite . symbolic . expr . bv . IntegerConstant ( ( - 1 ) ) ; int colon_int_code = ( ( int ) ( ':' ) ) ; int concrete_value = var1value . indexOf ( colon_int_code ) ; org . evosuite . symbolic . expr . bv . StringBinaryToIntegerExpression index_of_colon = new org . evosuite . symbolic . expr . bv . StringBinaryToIntegerExpression ( var1 , org . evosuite . symbolic . expr . Operator . INDEXOFC , colon_code , ( ( long ) ( concrete_value ) ) ) ; org . evosuite . symbolic . expr . IntegerConstraint constr1 = new org . evosuite . symbolic . expr . IntegerConstraint ( index_of_colon , org . evosuite . symbolic . expr . Comparator . EQ , minus_one ) ; java . util . List < org . evosuite . symbolic . expr . Constraint < ? > > constraints = new java . util . ArrayList < org . evosuite . symbolic . expr . Constraint < ? > > ( ) ; constraints . add ( constr1 ) ; org . evosuite . symbolic . solver . avm . EvoSuiteSolver solver = new org . evosuite . symbolic . solver . avm . EvoSuiteSolver ( ) ; java . util . Map < java . lang . String , java . lang . Object > solution ; try { solution = org . evosuite . symbolic . solver . TestSolver . solve ( solver , constraints ) ; \"<AssertPlaceHolder>\" ; } catch ( org . evosuite . symbolic . solver . SolverTimeoutException e ) { org . junit . Assert . fail ( ) ; } } solve ( org . evosuite . symbolic . solver . Solver , java . util . Collection ) { if ( hasCachedResult ( constraints ) ) { org . evosuite . symbolic . solver . SolverResult cached_solution = getCachedResult ( ) ; return cached_solution ; } org . evosuite . symbolic . solver . SolverResult solverResult ; try { solverResult = solver . solve ( constraints ) ; if ( solverResult . isUNSAT ( ) ) { addUNSAT ( constraints , solverResult ) ; } else { addSAT ( constraints , solverResult ) ; } } catch ( org . evosuite . symbolic . solver . SolverTimeoutException | java . io . IOException | org . evosuite . symbolic . solver . SolverParseException | org . evosuite . symbolic . solver . SolverEmptyQueryException | org . evosuite . symbolic . solver . SolverErrorException e ) { solverResult = null ; } return solverResult ; }", "answer": "org . junit . Assert . assertNotNull ( solution )"}
{"focal": "getService ( java . lang . Class ) { org . nuxeo . runtime . api . ServiceProvider provider = org . nuxeo . runtime . api . DefaultServiceProvider . getProvider ( ) ; if ( provider != null ) { return provider . getService ( serviceClass ) ; } org . nuxeo . runtime . api . Framework . checkRuntimeInitialized ( ) ; return org . nuxeo . runtime . api . Framework . runtime . getService ( serviceClass ) ; }", "testMethod": "testServiceRegistred ( ) { org . nuxeo . ecm . automation . server . jaxrs . batch . BatchManager bm = org . nuxeo . runtime . api . Framework . getService ( org . nuxeo . ecm . automation . server . jaxrs . batch . BatchManager . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( bm )", "total": "testServiceRegistred ( ) { org . nuxeo . ecm . automation . server . jaxrs . batch . BatchManager bm = org . nuxeo . runtime . api . Framework . getService ( org . nuxeo . ecm . automation . server . jaxrs . batch . BatchManager . class ) ; \"<AssertPlaceHolder>\" ; } getService ( java . lang . Class ) { org . nuxeo . runtime . api . ServiceProvider provider = org . nuxeo . runtime . api . DefaultServiceProvider . getProvider ( ) ; if ( provider != null ) { return provider . getService ( serviceClass ) ; } org . nuxeo . runtime . api . Framework . checkRuntimeInitialized ( ) ; return org . nuxeo . runtime . api . Framework . runtime . getService ( serviceClass ) ; }", "answer": "org . junit . Assert . assertNotNull ( bm )"}
{"focal": "getResult ( ) { return conditionChanged ; }", "testMethod": "testWaitWhile ( ) { org . eclipse . reddeer . swt . condition . ShellIsAvailable isAvailable = new org . eclipse . reddeer . swt . condition . ShellIsAvailable ( this . shell . getText ( ) ) ; try { new org . eclipse . reddeer . common . wait . WaitWhile ( isAvailable , org . eclipse . reddeer . common . wait . TimePeriod . SHORT , true ) ; org . junit . Assert . fail ( \"Shell<sp>should<sp>have<sp>been<sp>available\" ) ; } catch ( org . eclipse . reddeer . common . exception . WaitTimeoutExpiredException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( isAvailable . getResult ( ) )", "total": "testWaitWhile ( ) { org . eclipse . reddeer . swt . condition . ShellIsAvailable isAvailable = new org . eclipse . reddeer . swt . condition . ShellIsAvailable ( this . shell . getText ( ) ) ; try { new org . eclipse . reddeer . common . wait . WaitWhile ( isAvailable , org . eclipse . reddeer . common . wait . TimePeriod . SHORT , true ) ; org . junit . Assert . fail ( \"Shell<sp>should<sp>have<sp>been<sp>available\" ) ; } catch ( org . eclipse . reddeer . common . exception . WaitTimeoutExpiredException e ) { \"<AssertPlaceHolder>\" ; } } getResult ( ) { return conditionChanged ; }", "answer": "org . junit . Assert . assertNotNull ( isAvailable . getResult ( ) )"}
{"focal": "of ( org . javamoney . calc . common . Rate , int ) { return new org . javamoney . calc . common . RateAndPeriods ( rate , periods ) ; }", "testMethod": "of_Period1 ( ) { org . javamoney . calc . common . FutureValueOfAnnuityDue val = org . javamoney . calc . common . FutureValueOfAnnuityDue . of ( org . javamoney . calc . common . RateAndPeriods . of ( 0.05 , 1 ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( val )", "total": "of_Period1 ( ) { org . javamoney . calc . common . FutureValueOfAnnuityDue val = org . javamoney . calc . common . FutureValueOfAnnuityDue . of ( org . javamoney . calc . common . RateAndPeriods . of ( 0.05 , 1 ) ) ; \"<AssertPlaceHolder>\" ; } of ( org . javamoney . calc . common . Rate , int ) { return new org . javamoney . calc . common . RateAndPeriods ( rate , periods ) ; }", "answer": "org . junit . Assert . assertNotNull ( val )"}
{"focal": "getAbsolutePath ( ) { if ( ( absolutePath ) == null ) { return null ; } return java . nio . file . Paths . get ( absolutePath ) . normalize ( ) . toString ( ) ; }", "testMethod": "testFileProvisioningCustom ( ) { java . io . File iniFile = org . apache . commons . io . FileUtils . getFile ( \"src\" , \"test\" , \"resources\" , \"config.withTestPlugin\" ) ; io . dockstore . common . FileProvisioning fileProvisioning = new io . dockstore . common . FileProvisioning ( iniFile . getAbsolutePath ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( fileProvisioning )", "total": "testFileProvisioningCustom ( ) { java . io . File iniFile = org . apache . commons . io . FileUtils . getFile ( \"src\" , \"test\" , \"resources\" , \"config.withTestPlugin\" ) ; io . dockstore . common . FileProvisioning fileProvisioning = new io . dockstore . common . FileProvisioning ( iniFile . getAbsolutePath ( ) ) ; \"<AssertPlaceHolder>\" ; } getAbsolutePath ( ) { if ( ( absolutePath ) == null ) { return null ; } return java . nio . file . Paths . get ( absolutePath ) . normalize ( ) . toString ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( fileProvisioning )"}
{"focal": "getBuilder ( ) { if ( ( builder ) == null ) { builder = new com . sap . core . odata . processor . core . jpa . model . JPAEdmReferentialConstraint . JPAEdmRefConstraintBuilder ( ) ; } return builder ; }", "testMethod": "testGetBuilder ( ) { com . sap . core . odata . processor . api . jpa . access . JPAEdmBuilder builder = com . sap . core . odata . processor . core . jpa . model . JPAEdmAssociationEndTest . objJPAEdmAssociationEnd . getBuilder ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( builder )", "total": "testGetBuilder ( ) { com . sap . core . odata . processor . api . jpa . access . JPAEdmBuilder builder = com . sap . core . odata . processor . core . jpa . model . JPAEdmAssociationEndTest . objJPAEdmAssociationEnd . getBuilder ( ) ; \"<AssertPlaceHolder>\" ; } getBuilder ( ) { if ( ( builder ) == null ) { builder = new com . sap . core . odata . processor . core . jpa . model . JPAEdmReferentialConstraint . JPAEdmRefConstraintBuilder ( ) ; } return builder ; }", "answer": "org . junit . Assert . assertNotNull ( builder )"}
{"focal": "queryFirstNullable ( java . lang . String , com . ctrip . platform . dal . dao . StatementParameters , com . ctrip . platform . dal . dao . DalHints , java . lang . Class ) { return queryFirst ( sql , parameters , hints , getMapper ( clazz ) , com . ctrip . platform . dal . dao . DalQueryDao . NULLABLE ) ; }", "testMethod": "testTypedQueryFirstNullableSuccess ( ) { java . lang . String sql = ( \"SELECT<sp>quantity<sp>FROM<sp>\" + ( TABLE_NAME ) ) + \"<sp>WHERE<sp>id<sp>=<sp>1\" ; com . ctrip . platform . dal . dao . unittests . StatementParameters param = new com . ctrip . platform . dal . dao . unittests . StatementParameters ( ) ; com . ctrip . platform . dal . dao . unittests . DalHints hints = new com . ctrip . platform . dal . dao . unittests . DalHints ( ) ; java . lang . Integer result = client . queryFirstNullable ( sql , param , hints , com . ctrip . platform . dal . dao . unittests . Integer . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testTypedQueryFirstNullableSuccess ( ) { java . lang . String sql = ( \"SELECT<sp>quantity<sp>FROM<sp>\" + ( TABLE_NAME ) ) + \"<sp>WHERE<sp>id<sp>=<sp>1\" ; com . ctrip . platform . dal . dao . unittests . StatementParameters param = new com . ctrip . platform . dal . dao . unittests . StatementParameters ( ) ; com . ctrip . platform . dal . dao . unittests . DalHints hints = new com . ctrip . platform . dal . dao . unittests . DalHints ( ) ; java . lang . Integer result = client . queryFirstNullable ( sql , param , hints , com . ctrip . platform . dal . dao . unittests . Integer . class ) ; \"<AssertPlaceHolder>\" ; } queryFirstNullable ( java . lang . String , com . ctrip . platform . dal . dao . StatementParameters , com . ctrip . platform . dal . dao . DalHints , java . lang . Class ) { return queryFirst ( sql , parameters , hints , getMapper ( clazz ) , com . ctrip . platform . dal . dao . DalQueryDao . NULLABLE ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "get ( java . lang . String ) { org . camunda . bpm . engine . rest . hal . cache . HalResourceCacheEntry cacheEntry = cache . get ( id ) ; if ( cacheEntry != null ) { if ( expired ( cacheEntry ) ) { remove ( cacheEntry . getId ( ) ) ; return null ; } else { return cacheEntry . getResource ( ) ; } } else { return null ; } }", "testMethod": "testGetDeploymentXmlResourceData ( ) { org . camunda . bpm . engine . rest . Resource resource = org . camunda . bpm . engine . rest . helper . MockProvider . createMockDeploymentXmlResource ( ) ; org . camunda . bpm . engine . rest . List < org . camunda . bpm . engine . rest . Resource > resources = new org . camunda . bpm . engine . rest . ArrayList < org . camunda . bpm . engine . rest . Resource > ( ) ; resources . add ( resource ) ; java . io . InputStream input = new java . io . ByteArrayInputStream ( createMockDeploymentResourceByteData ( ) ) ; when ( mockRepositoryService . getDeploymentResources ( eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) ) ) . thenReturn ( resources ) ; when ( mockRepositoryService . getResourceAsStreamById ( eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) , eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_XML_RESOURCE_ID ) ) ) . thenReturn ( input ) ; io . restassured . response . Response response = io . restassured . RestAssured . given ( ) . pathParam ( \"id\" , org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) . pathParam ( \"resourceId\" , org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_XML_RESOURCE_ID ) . then ( ) . expect ( ) . statusCode ( Status . OK . getStatusCode ( ) ) . contentType ( ContentType . XML ) . header ( \"Content-Disposition\" , ( \"attachment;<sp>filename=\" + ( org . camunda . bpm . engine . rest . helper . MockProvider . EXAMPLE_DEPLOYMENT_XML_RESOURCE_NAME ) ) ) . when ( ) . get ( org . camunda . bpm . engine . rest . DeploymentRestServiceInteractionTest . SINGLE_RESOURCE_DATA_URL ) ; java . lang . String responseContent = response . asString ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( responseContent )", "total": "testGetDeploymentXmlResourceData ( ) { org . camunda . bpm . engine . rest . Resource resource = org . camunda . bpm . engine . rest . helper . MockProvider . createMockDeploymentXmlResource ( ) ; org . camunda . bpm . engine . rest . List < org . camunda . bpm . engine . rest . Resource > resources = new org . camunda . bpm . engine . rest . ArrayList < org . camunda . bpm . engine . rest . Resource > ( ) ; resources . add ( resource ) ; java . io . InputStream input = new java . io . ByteArrayInputStream ( createMockDeploymentResourceByteData ( ) ) ; when ( mockRepositoryService . getDeploymentResources ( eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) ) ) . thenReturn ( resources ) ; when ( mockRepositoryService . getResourceAsStreamById ( eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) , eq ( org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_XML_RESOURCE_ID ) ) ) . thenReturn ( input ) ; io . restassured . response . Response response = io . restassured . RestAssured . given ( ) . pathParam ( \"id\" , org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_ID ) . pathParam ( \"resourceId\" , org . camunda . bpm . engine . rest . EXAMPLE_DEPLOYMENT_XML_RESOURCE_ID ) . then ( ) . expect ( ) . statusCode ( Status . OK . getStatusCode ( ) ) . contentType ( ContentType . XML ) . header ( \"Content-Disposition\" , ( \"attachment;<sp>filename=\" + ( org . camunda . bpm . engine . rest . helper . MockProvider . EXAMPLE_DEPLOYMENT_XML_RESOURCE_NAME ) ) ) . when ( ) . get ( org . camunda . bpm . engine . rest . DeploymentRestServiceInteractionTest . SINGLE_RESOURCE_DATA_URL ) ; java . lang . String responseContent = response . asString ( ) ; \"<AssertPlaceHolder>\" ; } get ( java . lang . String ) { org . camunda . bpm . engine . rest . hal . cache . HalResourceCacheEntry cacheEntry = cache . get ( id ) ; if ( cacheEntry != null ) { if ( expired ( cacheEntry ) ) { remove ( cacheEntry . getId ( ) ) ; return null ; } else { return cacheEntry . getResource ( ) ; } } else { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( responseContent )"}
{"focal": "getRuntimeSetting ( ) { org . talend . components . jdbc . runtime . setting . AllSetting setting = new org . talend . components . jdbc . runtime . setting . AllSetting ( ) ; org . talend . components . jdbc . CommonUtils . setReferenceInfo ( setting , referencedComponent ) ; setting . setCloseConnection ( this . closeConnection . getValue ( ) ) ; return setting ; }", "testMethod": "testGetRuntimeSetting ( ) { org . talend . components . jdbc . tjdbcclose . TJDBCCloseProperties fixture = new org . talend . components . jdbc . tjdbcclose . TJDBCCloseProperties ( \"\" ) ; org . talend . components . jdbc . runtime . setting . AllSetting result = fixture . getRuntimeSetting ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetRuntimeSetting ( ) { org . talend . components . jdbc . tjdbcclose . TJDBCCloseProperties fixture = new org . talend . components . jdbc . tjdbcclose . TJDBCCloseProperties ( \"\" ) ; org . talend . components . jdbc . runtime . setting . AllSetting result = fixture . getRuntimeSetting ( ) ; \"<AssertPlaceHolder>\" ; } getRuntimeSetting ( ) { org . talend . components . jdbc . runtime . setting . AllSetting setting = new org . talend . components . jdbc . runtime . setting . AllSetting ( ) ; org . talend . components . jdbc . CommonUtils . setReferenceInfo ( setting , referencedComponent ) ; setting . setCloseConnection ( this . closeConnection . getValue ( ) ) ; return setting ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getVersion ( ) { return org . apache . openmeetings . util . Version . version ; }", "testMethod": "testVersion ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( org . apache . openmeetings . util . Version . getVersion ( ) )", "total": "testVersion ( ) { \"<AssertPlaceHolder>\" ; } getVersion ( ) { return org . apache . openmeetings . util . Version . version ; }", "answer": "org . junit . Assert . assertNotNull ( org . apache . openmeetings . util . Version . getVersion ( ) )"}
{"focal": "getMessage ( ) { return com . vaadin . tools . CvalChecker . CvalInfo . get ( o , \"message\" , java . lang . String . class ) ; }", "testMethod": "binderValidationStatus_nullBindingStatuses ( ) { try { new com . vaadin . data . BinderValidationStatus ( new com . vaadin . data . Binder < com . vaadin . tests . data . bean . Person > ( ) , null , new java . util . ArrayList ( ) ) ; org . junit . Assert . fail ( \"Binder<sp>should<sp>throw<sp>an<sp>NPE\" ) ; } catch ( java . lang . NullPointerException npe ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( npe . getMessage ( ) )", "total": "binderValidationStatus_nullBindingStatuses ( ) { try { new com . vaadin . data . BinderValidationStatus ( new com . vaadin . data . Binder < com . vaadin . tests . data . bean . Person > ( ) , null , new java . util . ArrayList ( ) ) ; org . junit . Assert . fail ( \"Binder<sp>should<sp>throw<sp>an<sp>NPE\" ) ; } catch ( java . lang . NullPointerException npe ) { \"<AssertPlaceHolder>\" ; } } getMessage ( ) { return com . vaadin . tools . CvalChecker . CvalInfo . get ( o , \"message\" , java . lang . String . class ) ; }", "answer": "org . junit . Assert . assertNotNull ( npe . getMessage ( ) )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateAssessmentAndPlanSectionProcNoteBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . cdt . AssessmentAndPlanSectionProcNote > sectionBuilder = org . openhealthtools . mdht . uml . cda . cdt . builder . CDTBuilderFactory . createAssessmentAndPlanSectionProcNoteBuilder ( ) ; org . openhealthtools . mdht . uml . cda . cdt . AssessmentAndPlanSectionProcNote section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateAssessmentAndPlanSectionProcNoteBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . cdt . AssessmentAndPlanSectionProcNote > sectionBuilder = org . openhealthtools . mdht . uml . cda . cdt . builder . CDTBuilderFactory . createAssessmentAndPlanSectionProcNoteBuilder ( ) ; org . openhealthtools . mdht . uml . cda . cdt . AssessmentAndPlanSectionProcNote section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "runWithMerge ( org . apache . druid . query . topn . TopNQuery ) { return runWithMerge ( query , com . google . common . collect . ImmutableMap . of ( ) ) ; }", "testMethod": "testTopNWithNonBitmapFilter ( ) { org . apache . druid . query . topn . TopNQuery query = new org . apache . druid . query . topn . TopNQueryBuilder ( ) . dataSource ( QueryRunnerTestHelper . dataSource ) . granularity ( QueryRunnerTestHelper . allGran ) . filters ( new org . apache . druid . query . filter . BoundDimFilter ( org . apache . druid . segment . column . ColumnHolder . TIME_COLUMN_NAME , \"0\" , java . lang . String . valueOf ( Long . MAX_VALUE ) , true , true , false , null , org . apache . druid . query . ordering . StringComparators . NUMERIC ) ) . dimension ( QueryRunnerTestHelper . marketDimension ) . metric ( \"count\" ) . threshold ( 4 ) . intervals ( QueryRunnerTestHelper . firstToThird ) . aggregators ( java . util . Collections . singletonList ( new org . apache . druid . query . aggregation . DoubleSumAggregatorFactory ( \"count\" , \"qualityDouble\" ) ) ) . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( runWithMerge ( query ) . toList ( ) )", "total": "testTopNWithNonBitmapFilter ( ) { org . apache . druid . query . topn . TopNQuery query = new org . apache . druid . query . topn . TopNQueryBuilder ( ) . dataSource ( QueryRunnerTestHelper . dataSource ) . granularity ( QueryRunnerTestHelper . allGran ) . filters ( new org . apache . druid . query . filter . BoundDimFilter ( org . apache . druid . segment . column . ColumnHolder . TIME_COLUMN_NAME , \"0\" , java . lang . String . valueOf ( Long . MAX_VALUE ) , true , true , false , null , org . apache . druid . query . ordering . StringComparators . NUMERIC ) ) . dimension ( QueryRunnerTestHelper . marketDimension ) . metric ( \"count\" ) . threshold ( 4 ) . intervals ( QueryRunnerTestHelper . firstToThird ) . aggregators ( java . util . Collections . singletonList ( new org . apache . druid . query . aggregation . DoubleSumAggregatorFactory ( \"count\" , \"qualityDouble\" ) ) ) . build ( ) ; \"<AssertPlaceHolder>\" ; } runWithMerge ( org . apache . druid . query . topn . TopNQuery ) { return runWithMerge ( query , com . google . common . collect . ImmutableMap . of ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( runWithMerge ( query ) . toList ( ) )"}
{"focal": "getRvmRubyLocator ( ) { final com . alienfast . bamboozled . ruby . rt . rvm . RvmInstallation rvmInstallation = locateRvmInstallation ( ) ; if ( rvmInstallation != null ) { return new com . alienfast . bamboozled . ruby . rt . rvm . RvmRubyLocator ( this . fileSystemHelper , rvmInstallation ) ; } throw new com . alienfast . bamboozled . ruby . util . PathNotFoundException ( \"Unable<sp>to<sp>locate<sp>RVM<sp>installation.\" ) ; }", "testMethod": "testGetRubyLocator ( ) { when ( this . fileSystemHelper . getUserHome ( ) ) . thenReturn ( com . alienfast . bamboozled . ruby . rt . rvm . USER_HOME ) ; com . alienfast . bamboozled . ruby . rt . rvm . RvmInstallation userRvm = getUserRvmInstallation ( ) ; primeMockWithRvmInstallation ( userRvm ) ; com . alienfast . bamboozled . ruby . rt . RubyLocator rvmRubyLocator = this . rvmLocatorService . getRvmRubyLocator ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( rvmRubyLocator )", "total": "testGetRubyLocator ( ) { when ( this . fileSystemHelper . getUserHome ( ) ) . thenReturn ( com . alienfast . bamboozled . ruby . rt . rvm . USER_HOME ) ; com . alienfast . bamboozled . ruby . rt . rvm . RvmInstallation userRvm = getUserRvmInstallation ( ) ; primeMockWithRvmInstallation ( userRvm ) ; com . alienfast . bamboozled . ruby . rt . RubyLocator rvmRubyLocator = this . rvmLocatorService . getRvmRubyLocator ( ) ; \"<AssertPlaceHolder>\" ; } getRvmRubyLocator ( ) { final com . alienfast . bamboozled . ruby . rt . rvm . RvmInstallation rvmInstallation = locateRvmInstallation ( ) ; if ( rvmInstallation != null ) { return new com . alienfast . bamboozled . ruby . rt . rvm . RvmRubyLocator ( this . fileSystemHelper , rvmInstallation ) ; } throw new com . alienfast . bamboozled . ruby . util . PathNotFoundException ( \"Unable<sp>to<sp>locate<sp>RVM<sp>installation.\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( rvmRubyLocator )"}
{"focal": "add ( info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap_item . IBootstrapItem ) { itemStorage . add ( bootstrapItem ) ; }", "testMethod": "checkCreationAndExecutionLoad ( ) { info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap . IBootstrap < info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap_item . IBootstrapItem < java . lang . String > > bootstrap = mock ( info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap . IBootstrap . class ) ; doNothing ( ) . when ( bootstrap ) . add ( any ( info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap_item . IBootstrapItem . class ) ) ; info . smart_tools . smartactors . feature_loading_system . interfaces . iplugin . IPlugin plugin = new info . smart_tools . smartactors . system_actors_pack_plugins . actor_collection_receiver_plugin . ActorCollectionReceiverPlugin ( bootstrap ) ; \"<AssertPlaceHolder>\" ; plugin . load ( ) ; verify ( bootstrap , times ( 5 ) ) . add ( any ( info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap_item . IBootstrapItem . class ) ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( plugin )", "total": "checkCreationAndExecutionLoad ( ) { info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap . IBootstrap < info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap_item . IBootstrapItem < java . lang . String > > bootstrap = mock ( info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap . IBootstrap . class ) ; doNothing ( ) . when ( bootstrap ) . add ( any ( info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap_item . IBootstrapItem . class ) ) ; info . smart_tools . smartactors . feature_loading_system . interfaces . iplugin . IPlugin plugin = new info . smart_tools . smartactors . system_actors_pack_plugins . actor_collection_receiver_plugin . ActorCollectionReceiverPlugin ( bootstrap ) ; \"<AssertPlaceHolder>\" ; plugin . load ( ) ; verify ( bootstrap , times ( 5 ) ) . add ( any ( info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap_item . IBootstrapItem . class ) ) ; } add ( info . smart_tools . smartactors . feature_loading_system . interfaces . ibootstrap_item . IBootstrapItem ) { itemStorage . add ( bootstrapItem ) ; }", "answer": "org . junit . Assert . assertNotNull ( plugin )"}
{"focal": "pronunciations ( java . lang . String ) { return net . jeremybrooks . knicker . WordApi . pronunciations ( word , false , null , null , 0 ) ; }", "testMethod": "testPronunciations_String ( ) { System . out . println ( \"pronunciations\" ) ; java . lang . String word = \"a\" ; java . util . List < net . jeremybrooks . knicker . dto . Pronunciation > result = net . jeremybrooks . knicker . WordApi . pronunciations ( word ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testPronunciations_String ( ) { System . out . println ( \"pronunciations\" ) ; java . lang . String word = \"a\" ; java . util . List < net . jeremybrooks . knicker . dto . Pronunciation > result = net . jeremybrooks . knicker . WordApi . pronunciations ( word ) ; \"<AssertPlaceHolder>\" ; } pronunciations ( java . lang . String ) { return net . jeremybrooks . knicker . WordApi . pronunciations ( word , false , null , null , 0 ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "findIdField ( java . lang . Class ) { java . lang . reflect . Field idField = getReferencedField ( this . getClazz ( ) , org . springframework . data . annotation . Id . class ) ; if ( idField == null ) { idField = getReferencedField ( this . getClazz ( ) , org . springframework . data . annotation . Id . class ) ; if ( idField == null ) { idField = getReferencedField ( this . getClazz ( ) , javax . persistence . EmbeddedId . class ) ; } } return idField ; }", "testMethod": "testJPAId ( ) { java . lang . reflect . Field field = this . jpaIdPersister . findIdField ( org . statefulj . persistence . mongo . JPAIdEntity . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( field )", "total": "testJPAId ( ) { java . lang . reflect . Field field = this . jpaIdPersister . findIdField ( org . statefulj . persistence . mongo . JPAIdEntity . class ) ; \"<AssertPlaceHolder>\" ; } findIdField ( java . lang . Class ) { java . lang . reflect . Field idField = getReferencedField ( this . getClazz ( ) , org . springframework . data . annotation . Id . class ) ; if ( idField == null ) { idField = getReferencedField ( this . getClazz ( ) , org . springframework . data . annotation . Id . class ) ; if ( idField == null ) { idField = getReferencedField ( this . getClazz ( ) , javax . persistence . EmbeddedId . class ) ; } } return idField ; }", "answer": "org . junit . Assert . assertNotNull ( field )"}
{"focal": "getClassAttribute ( ) { return elementClass ; }", "testMethod": "setParameters_whenClassIsDefined_classIsNotNull ( ) { java . util . Map < java . lang . String , java . lang . String > parametersMap = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; parametersMap . put ( ExtractElementDataModifier . PARAM_ELEMENT_CLASS , \"some_class\" ) ; extractElementDataModifier . setParameters ( parametersMap ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( extractElementDataModifier . getClassAttribute ( ) )", "total": "setParameters_whenClassIsDefined_classIsNotNull ( ) { java . util . Map < java . lang . String , java . lang . String > parametersMap = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; parametersMap . put ( ExtractElementDataModifier . PARAM_ELEMENT_CLASS , \"some_class\" ) ; extractElementDataModifier . setParameters ( parametersMap ) ; \"<AssertPlaceHolder>\" ; } getClassAttribute ( ) { return elementClass ; }", "answer": "org . junit . Assert . assertNotNull ( extractElementDataModifier . getClassAttribute ( ) )"}
{"focal": "get ( java . lang . Class ) { return ( ( T ) ( contextMap . get ( cClass ) ) ) ; }", "testMethod": "testDirectReferenceSignature ( ) { java . util . Map < java . lang . String , java . lang . Object > outProperties = new java . util . HashMap ( ) ; outProperties . put ( ConfigurationConstants . ACTION , ConfigurationConstants . SIGNATURE ) ; outProperties . put ( ConfigurationConstants . SIG_PROP_FILE , \"outsecurity.properties\" ) ; outProperties . put ( ConfigurationConstants . USER , \"myalias\" ) ; outProperties . put ( ConfigurationConstants . SIG_KEY_ID , \"DirectReference\" ) ; outProperties . put ( \"password\" , \"myAliasPassword\" ) ; java . util . Map < java . lang . String , java . lang . Object > inProperties = new java . util . HashMap ( ) ; inProperties . put ( ConfigurationConstants . ACTION , ConfigurationConstants . SIGNATURE ) ; inProperties . put ( ConfigurationConstants . SIG_VER_PROP_FILE , \"insecurity.properties\" ) ; java . util . List < java . lang . String > xpaths = new java . util . ArrayList ( ) ; xpaths . add ( \"//wsse:Security\" ) ; xpaths . add ( \"//wsse:Security/wsse:BinarySecurityToken\" ) ; xpaths . add ( \"//wsse:Security/ds:Signature\" ) ; java . util . List < org . apache . wss4j . dom . handler . WSHandlerResult > handlerResults = getResults ( makeInvocation ( outProperties , xpaths , inProperties ) ) ; org . apache . wss4j . dom . engine . WSSecurityEngineResult actionResult = handlerResults . get ( 0 ) . getActionResults ( ) . get ( WSConstants . SIGN ) . get ( 0 ) ; java . security . cert . X509Certificate certificate = ( ( java . security . cert . X509Certificate ) ( actionResult . get ( WSSecurityEngineResult . TAG_X509_CERTIFICATE ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( certificate )", "total": "testDirectReferenceSignature ( ) { java . util . Map < java . lang . String , java . lang . Object > outProperties = new java . util . HashMap ( ) ; outProperties . put ( ConfigurationConstants . ACTION , ConfigurationConstants . SIGNATURE ) ; outProperties . put ( ConfigurationConstants . SIG_PROP_FILE , \"outsecurity.properties\" ) ; outProperties . put ( ConfigurationConstants . USER , \"myalias\" ) ; outProperties . put ( ConfigurationConstants . SIG_KEY_ID , \"DirectReference\" ) ; outProperties . put ( \"password\" , \"myAliasPassword\" ) ; java . util . Map < java . lang . String , java . lang . Object > inProperties = new java . util . HashMap ( ) ; inProperties . put ( ConfigurationConstants . ACTION , ConfigurationConstants . SIGNATURE ) ; inProperties . put ( ConfigurationConstants . SIG_VER_PROP_FILE , \"insecurity.properties\" ) ; java . util . List < java . lang . String > xpaths = new java . util . ArrayList ( ) ; xpaths . add ( \"//wsse:Security\" ) ; xpaths . add ( \"//wsse:Security/wsse:BinarySecurityToken\" ) ; xpaths . add ( \"//wsse:Security/ds:Signature\" ) ; java . util . List < org . apache . wss4j . dom . handler . WSHandlerResult > handlerResults = getResults ( makeInvocation ( outProperties , xpaths , inProperties ) ) ; org . apache . wss4j . dom . engine . WSSecurityEngineResult actionResult = handlerResults . get ( 0 ) . getActionResults ( ) . get ( WSConstants . SIGN ) . get ( 0 ) ; java . security . cert . X509Certificate certificate = ( ( java . security . cert . X509Certificate ) ( actionResult . get ( WSSecurityEngineResult . TAG_X509_CERTIFICATE ) ) ) ; \"<AssertPlaceHolder>\" ; } get ( java . lang . Class ) { return ( ( T ) ( contextMap . get ( cClass ) ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( certificate )"}
{"focal": "fail ( org . opencastproject . mediapackage . MediaPackage ) { org . opencastproject . workflow . handler . distribution . ConfigurablePublishWorkflowOperationHandler . logger . error ( \"There<sp>is<sp>already<sp>a<sp>Published<sp>Media,<sp>fail<sp>Stragy<sp>for<sp>Mediapackage<sp>{}\" , mp . getIdentifier ( ) ) ; throw new org . opencastproject . workflow . api . WorkflowOperationException ( \"There<sp>is<sp>already<sp>a<sp>Published<sp>Media,<sp>fail<sp>Stragy<sp>for<sp>Mediapackage<sp>\" ) ; }", "testMethod": "nonExistantRecording ( ) { long currentTime = java . lang . System . currentTimeMillis ( ) ; java . lang . String mpId = \"doesNotExist\" ; try { org . opencastproject . scheduler . impl . SchedulerServiceImplTest . schedSvc . getRecordingState ( mpId ) ; org . junit . Assert . fail ( \"Non<sp>existing<sp>recording<sp>has<sp>been<sp>found\" ) ; } catch ( org . opencastproject . util . NotFoundException e ) { \"<AssertPlaceHolder>\" ; } }", "assertLine": "org . junit . Assert . assertNotNull ( e )", "total": "nonExistantRecording ( ) { long currentTime = java . lang . System . currentTimeMillis ( ) ; java . lang . String mpId = \"doesNotExist\" ; try { org . opencastproject . scheduler . impl . SchedulerServiceImplTest . schedSvc . getRecordingState ( mpId ) ; org . junit . Assert . fail ( \"Non<sp>existing<sp>recording<sp>has<sp>been<sp>found\" ) ; } catch ( org . opencastproject . util . NotFoundException e ) { \"<AssertPlaceHolder>\" ; } } fail ( org . opencastproject . mediapackage . MediaPackage ) { org . opencastproject . workflow . handler . distribution . ConfigurablePublishWorkflowOperationHandler . logger . error ( \"There<sp>is<sp>already<sp>a<sp>Published<sp>Media,<sp>fail<sp>Stragy<sp>for<sp>Mediapackage<sp>{}\" , mp . getIdentifier ( ) ) ; throw new org . opencastproject . workflow . api . WorkflowOperationException ( \"There<sp>is<sp>already<sp>a<sp>Published<sp>Media,<sp>fail<sp>Stragy<sp>for<sp>Mediapackage<sp>\" ) ; }", "answer": "org . junit . Assert . assertNotNull ( e )"}
{"focal": "getGroup ( ) { try { final ch . cyberduck . binding . foundation . NSObject object = this . getNativeAttribute ( NSFileManager . NSFileGroupOwnerAccountName ) ; return object . toString ( ) ; } catch ( ch . cyberduck . core . exception . AccessDeniedException | ch . cyberduck . core . exception . NotfoundException e ) { return null ; } }", "testMethod": "testGetGroup ( ) { final java . io . File f = new java . io . File ( java . util . UUID . randomUUID ( ) . toString ( ) ) ; f . createNewFile ( ) ; ch . cyberduck . core . local . FinderLocalAttributes a = new ch . cyberduck . core . local . FinderLocalAttributes ( new ch . cyberduck . core . local . FinderLocal ( f . getAbsolutePath ( ) ) ) ; \"<AssertPlaceHolder>\" ; f . delete ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( a . getGroup ( ) )", "total": "testGetGroup ( ) { final java . io . File f = new java . io . File ( java . util . UUID . randomUUID ( ) . toString ( ) ) ; f . createNewFile ( ) ; ch . cyberduck . core . local . FinderLocalAttributes a = new ch . cyberduck . core . local . FinderLocalAttributes ( new ch . cyberduck . core . local . FinderLocal ( f . getAbsolutePath ( ) ) ) ; \"<AssertPlaceHolder>\" ; f . delete ( ) ; } getGroup ( ) { try { final ch . cyberduck . binding . foundation . NSObject object = this . getNativeAttribute ( NSFileManager . NSFileGroupOwnerAccountName ) ; return object . toString ( ) ; } catch ( ch . cyberduck . core . exception . AccessDeniedException | ch . cyberduck . core . exception . NotfoundException e ) { return null ; } }", "answer": "org . junit . Assert . assertNotNull ( a . getGroup ( ) )"}
{"focal": "getTunnelStats ( ) { return tunnelStats ; }", "testMethod": "testGetTunnelStats ( ) { \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( monitor . getTunnelStats ( ) )", "total": "testGetTunnelStats ( ) { \"<AssertPlaceHolder>\" ; } getTunnelStats ( ) { return tunnelStats ; }", "answer": "org . junit . Assert . assertNotNull ( monitor . getTunnelStats ( ) )"}
{"focal": "create ( java . lang . Class , java . lang . String ) { if ( ( configuration == null ) || ( configuration . isEmpty ( ) ) ) { LOGGER . debug ( \"Unable<sp>to<sp>create<sp>a<sp>service<sp>discovery<sp>configuration<sp>from<sp>a<sp>null<sp>or<sp>empty<sp>configuration<sp>data\" ) ; return null ; } try { return mapper . readValue ( configuration , serviceDiscoveryConfigurationClass ) ; } catch ( java . io . IOException ex ) { LOGGER . error ( \"Unable<sp>to<sp>instance<sp>service<sp>discovery<sp>configuration<sp>for<sp>{}\" , serviceDiscoveryConfigurationClass . getName ( ) , ex ) ; } return null ; }", "testMethod": "shouldResolveHttpEndpoint_emptyContext ( ) { when ( endpoint . getTarget ( ) ) . thenReturn ( \"http://mydomain\" ) ; when ( endpoint . getType ( ) ) . thenReturn ( EndpointType . HTTP ) ; io . gravitee . gateway . core . endpoint . factory . template . EndpointContext context = new io . gravitee . gateway . core . endpoint . factory . template . EndpointContext ( ) ; io . gravitee . gateway . http . endpoint . HttpEndpoint endpoint = factory . create ( this . endpoint , context ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( endpoint )", "total": "shouldResolveHttpEndpoint_emptyContext ( ) { when ( endpoint . getTarget ( ) ) . thenReturn ( \"http://mydomain\" ) ; when ( endpoint . getType ( ) ) . thenReturn ( EndpointType . HTTP ) ; io . gravitee . gateway . core . endpoint . factory . template . EndpointContext context = new io . gravitee . gateway . core . endpoint . factory . template . EndpointContext ( ) ; io . gravitee . gateway . http . endpoint . HttpEndpoint endpoint = factory . create ( this . endpoint , context ) ; \"<AssertPlaceHolder>\" ; } create ( java . lang . Class , java . lang . String ) { if ( ( configuration == null ) || ( configuration . isEmpty ( ) ) ) { LOGGER . debug ( \"Unable<sp>to<sp>create<sp>a<sp>service<sp>discovery<sp>configuration<sp>from<sp>a<sp>null<sp>or<sp>empty<sp>configuration<sp>data\" ) ; return null ; } try { return mapper . readValue ( configuration , serviceDiscoveryConfigurationClass ) ; } catch ( java . io . IOException ex ) { LOGGER . error ( \"Unable<sp>to<sp>instance<sp>service<sp>discovery<sp>configuration<sp>for<sp>{}\" , serviceDiscoveryConfigurationClass . getName ( ) , ex ) ; } return null ; }", "answer": "org . junit . Assert . assertNotNull ( endpoint )"}
{"focal": "install ( ) { return getDelegate ( ) . install ( ) ; }", "testMethod": "addMonitorCalledAfterInstall ( ) { org . jboss . msc . service . ServiceBuilder sb = serviceContainer . addService ( org . jboss . msc . multi_value_services . WrongUsageOfNewServicesAPITestCase . ID ) ; sb . provides ( org . jboss . msc . multi_value_services . WrongUsageOfNewServicesAPITestCase . FOO ) ; \"<AssertPlaceHolder>\" ; try { sb . addMonitor ( new org . jboss . msc . service . StabilityMonitor ( ) ) ; org . junit . Assert . fail ( \"IllegalStateException<sp>expected\" ) ; } catch ( java . lang . IllegalStateException ignored ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( sb . install ( ) )", "total": "addMonitorCalledAfterInstall ( ) { org . jboss . msc . service . ServiceBuilder sb = serviceContainer . addService ( org . jboss . msc . multi_value_services . WrongUsageOfNewServicesAPITestCase . ID ) ; sb . provides ( org . jboss . msc . multi_value_services . WrongUsageOfNewServicesAPITestCase . FOO ) ; \"<AssertPlaceHolder>\" ; try { sb . addMonitor ( new org . jboss . msc . service . StabilityMonitor ( ) ) ; org . junit . Assert . fail ( \"IllegalStateException<sp>expected\" ) ; } catch ( java . lang . IllegalStateException ignored ) { } } install ( ) { return getDelegate ( ) . install ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( sb . install ( ) )"}
{"focal": "getGroup ( java . lang . String , boolean ) { assertOpen ( ) ; java . lang . String plainPath = org . eclipse . dawnsci . nexus . NexusUtils . stripAugmentedPath ( augmentedPath ) ; org . eclipse . dawnsci . analysis . api . tree . NodeLink link = tree . findNodeLink ( plainPath ) ; if ( link != null ) { if ( link . isDestinationGroup ( ) ) { org . eclipse . dawnsci . analysis . api . tree . GroupNode g = ( ( org . eclipse . dawnsci . analysis . api . tree . GroupNode ) ( link . getDestination ( ) ) ) ; if ( ( ! ( g . isPopulated ( ) ) ) && ( ( getLinkTarget ( plainPath ) ) != ( org . eclipse . dawnsci . hdf5 . nexus . NexusFileHDF5 . NO_LINK ) ) ) { if ( ! ( plainPath . endsWith ( Node . SEPARATOR ) ) ) { plainPath += org . eclipse . dawnsci . analysis . api . tree . Node . SEPARATOR ; } populateGroupNode ( plainPath , g ) ; } return g ; } throw new org . eclipse . dawnsci . nexus . NexusException ( ( ( \"Path<sp>specified<sp>(\" + plainPath ) + \")<sp>is<sp>not<sp>for<sp>a<sp>group\" ) ) ; } org . eclipse . dawnsci . hdf5 . nexus . NexusFileHDF5 . NodeData node = getGroupNode ( augmentedPath , createPathIfNecessary ) ; return ( ( org . eclipse . dawnsci . analysis . api . tree . GroupNode ) ( ( node . name ) == null ? null : node . node ) ) ; }", "testMethod": "testOpenToRead ( ) { nf . getGroup ( \"/a/b/c\" , true ) ; nf . close ( ) ; nf . openToRead ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( nf . getGroup ( \"/a/b/c\" , false ) )", "total": "testOpenToRead ( ) { nf . getGroup ( \"/a/b/c\" , true ) ; nf . close ( ) ; nf . openToRead ( ) ; \"<AssertPlaceHolder>\" ; } getGroup ( java . lang . String , boolean ) { assertOpen ( ) ; java . lang . String plainPath = org . eclipse . dawnsci . nexus . NexusUtils . stripAugmentedPath ( augmentedPath ) ; org . eclipse . dawnsci . analysis . api . tree . NodeLink link = tree . findNodeLink ( plainPath ) ; if ( link != null ) { if ( link . isDestinationGroup ( ) ) { org . eclipse . dawnsci . analysis . api . tree . GroupNode g = ( ( org . eclipse . dawnsci . analysis . api . tree . GroupNode ) ( link . getDestination ( ) ) ) ; if ( ( ! ( g . isPopulated ( ) ) ) && ( ( getLinkTarget ( plainPath ) ) != ( org . eclipse . dawnsci . hdf5 . nexus . NexusFileHDF5 . NO_LINK ) ) ) { if ( ! ( plainPath . endsWith ( Node . SEPARATOR ) ) ) { plainPath += org . eclipse . dawnsci . analysis . api . tree . Node . SEPARATOR ; } populateGroupNode ( plainPath , g ) ; } return g ; } throw new org . eclipse . dawnsci . nexus . NexusException ( ( ( \"Path<sp>specified<sp>(\" + plainPath ) + \")<sp>is<sp>not<sp>for<sp>a<sp>group\" ) ) ; } org . eclipse . dawnsci . hdf5 . nexus . NexusFileHDF5 . NodeData node = getGroupNode ( augmentedPath , createPathIfNecessary ) ; return ( ( org . eclipse . dawnsci . analysis . api . tree . GroupNode ) ( ( node . name ) == null ? null : node . node ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( nf . getGroup ( \"/a/b/c\" , false ) )"}
{"focal": "getHibernateSettingsXml ( ) { if ( ( hibernateSettingXml ) == null ) { try { hibernateSettingXml = new org . pentaho . platform . config . HibernateSettingsXml ( new java . io . File ( ( ( getSolutionPath ( ) ) + ( org . pentaho . platform . config . AppConfigProperties . HIBERNATE_MANAGED_XML_PATH ) ) ) ) ; } catch ( java . lang . Exception e ) { hibernateSettingXml = new org . pentaho . platform . config . HibernateSettingsXml ( ) ; } } return hibernateSettingXml ; }", "testMethod": "testGetHibernateSettingsXml ( ) { org . pentaho . platform . config . HibernateSettingsXml hibernateSettingsXml = appConfigProperties . getHibernateSettingsXml ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( hibernateSettingsXml )", "total": "testGetHibernateSettingsXml ( ) { org . pentaho . platform . config . HibernateSettingsXml hibernateSettingsXml = appConfigProperties . getHibernateSettingsXml ( ) ; \"<AssertPlaceHolder>\" ; } getHibernateSettingsXml ( ) { if ( ( hibernateSettingXml ) == null ) { try { hibernateSettingXml = new org . pentaho . platform . config . HibernateSettingsXml ( new java . io . File ( ( ( getSolutionPath ( ) ) + ( org . pentaho . platform . config . AppConfigProperties . HIBERNATE_MANAGED_XML_PATH ) ) ) ) ; } catch ( java . lang . Exception e ) { hibernateSettingXml = new org . pentaho . platform . config . HibernateSettingsXml ( ) ; } } return hibernateSettingXml ; }", "answer": "org . junit . Assert . assertNotNull ( hibernateSettingsXml )"}
{"focal": "getEntity ( ) { return entity ; }", "testMethod": "should_retrieve ( ) { com . ctp . cdi . query . test . domain . Home entity = new com . ctp . cdi . query . test . domain . Home ( ) ; entity . setName ( \"testRetrieve\" ) ; home . getEntityDao ( ) . save ( entity ) ; home . setId ( entity . getId ( ) ) ; home . retrieve ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( home . getEntity ( ) )", "total": "should_retrieve ( ) { com . ctp . cdi . query . test . domain . Home entity = new com . ctp . cdi . query . test . domain . Home ( ) ; entity . setName ( \"testRetrieve\" ) ; home . getEntityDao ( ) . save ( entity ) ; home . setId ( entity . getId ( ) ) ; home . retrieve ( ) ; \"<AssertPlaceHolder>\" ; } getEntity ( ) { return entity ; }", "answer": "org . junit . Assert . assertNotNull ( home . getEntity ( ) )"}
{"focal": "construct ( java . lang . Object ) { if ( something instanceof java . lang . String ) { return java . lang . Class . forName ( ( ( java . lang . String ) ( something ) ) ) . getConstructor ( ) . newInstance ( ) ; } else if ( something instanceof java . util . Map ) { for ( Map . Entry < java . lang . String , java . lang . Object > entry : ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( something ) ) . entrySet ( ) ) { if ( ( entry . getValue ( ) ) instanceof java . util . Map ) { return com . networknt . service . ServiceUtil . constructByNamedParams ( java . lang . Class . forName ( entry . getKey ( ) ) , ( ( java . util . Map ) ( entry . getValue ( ) ) ) ) ; } else if ( ( entry . getValue ( ) ) instanceof java . util . List ) { return com . networknt . service . ServiceUtil . constructByParameterizedConstructor ( java . lang . Class . forName ( entry . getKey ( ) ) , ( ( java . util . List ) ( entry . getValue ( ) ) ) ) ; } } } return null ; }", "testMethod": "classWithoutGivenParam_constructed_ignoresParam ( ) { java . util . Map < java . lang . String , java . lang . Object > params = new java . util . HashMap ( ) ; params . put ( \"hello\" , \"howdy\" ) ; params . put ( \"name\" , \"nick\" ) ; java . util . Map < java . lang . String , java . lang . Object > constructMap = new java . util . HashMap ( ) ; constructMap . put ( \"com.networknt.service.GImpl\" , params ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( com . networknt . service . ServiceUtil . construct ( constructMap ) )", "total": "classWithoutGivenParam_constructed_ignoresParam ( ) { java . util . Map < java . lang . String , java . lang . Object > params = new java . util . HashMap ( ) ; params . put ( \"hello\" , \"howdy\" ) ; params . put ( \"name\" , \"nick\" ) ; java . util . Map < java . lang . String , java . lang . Object > constructMap = new java . util . HashMap ( ) ; constructMap . put ( \"com.networknt.service.GImpl\" , params ) ; \"<AssertPlaceHolder>\" ; } construct ( java . lang . Object ) { if ( something instanceof java . lang . String ) { return java . lang . Class . forName ( ( ( java . lang . String ) ( something ) ) ) . getConstructor ( ) . newInstance ( ) ; } else if ( something instanceof java . util . Map ) { for ( Map . Entry < java . lang . String , java . lang . Object > entry : ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( something ) ) . entrySet ( ) ) { if ( ( entry . getValue ( ) ) instanceof java . util . Map ) { return com . networknt . service . ServiceUtil . constructByNamedParams ( java . lang . Class . forName ( entry . getKey ( ) ) , ( ( java . util . Map ) ( entry . getValue ( ) ) ) ) ; } else if ( ( entry . getValue ( ) ) instanceof java . util . List ) { return com . networknt . service . ServiceUtil . constructByParameterizedConstructor ( java . lang . Class . forName ( entry . getKey ( ) ) , ( ( java . util . List ) ( entry . getValue ( ) ) ) ) ; } } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( com . networknt . service . ServiceUtil . construct ( constructMap ) )"}
{"focal": "getObjectById ( java . lang . Object ) { org . zoodb . internal . util . DBTracer . logCall ( this , arg0 ) ; checkOpen ( ) ; java . lang . Object o = nativeConnection . getObjectById ( arg0 ) ; if ( o == null ) { throw new javax . jdo . JDOObjectNotFoundException ( ( \"OID=\" + ( org . zoodb . internal . util . Util . oidToString ( arg0 ) ) ) ) ; } return o ; }", "testMethod": "testSerialization ( ) { org . zoodb . test . testutil . TestTools . defineSchema ( org . zoodb . test . jdo . ProjectPC084 . class ) ; org . zoodb . jdo . ZooJdoProperties props = new org . zoodb . jdo . ZooJdoProperties ( org . zoodb . test . testutil . TestTools . getDbName ( ) ) ; props . setZooAutoCreateSchema ( true ) ; javax . jdo . PersistenceManager pm = org . zoodb . test . testutil . TestTools . openPM ( props ) ; pm . currentTransaction ( ) . begin ( ) ; org . zoodb . test . jdo . ProjectPC084 s = new org . zoodb . test . jdo . ProjectPC084 ( ) ; pm . makePersistent ( s ) ; javax . jdo . Query q = pm . newQuery ( org . zoodb . test . jdo . ProjectPC084 . class ) ; q . execute ( ) ; s . getActiveUsers ( ) . add ( new org . zoodb . test . jdo . OnlineStatePC084 ( ) ) ; java . lang . Object oid = pm . getObjectId ( s ) ; pm . currentTransaction ( ) . commit ( ) ; org . zoodb . test . testutil . TestTools . closePM ( ) ; pm = org . zoodb . test . testutil . TestTools . openPM ( ) ; pm . currentTransaction ( ) . begin ( ) ; org . zoodb . test . jdo . ProjectPC084 s2 = ( ( org . zoodb . test . jdo . ProjectPC084 ) ( pm . getObjectById ( oid ) ) ) ; \"<AssertPlaceHolder>\" ; pm . currentTransaction ( ) . commit ( ) ; pm . close ( ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( s2 )", "total": "testSerialization ( ) { org . zoodb . test . testutil . TestTools . defineSchema ( org . zoodb . test . jdo . ProjectPC084 . class ) ; org . zoodb . jdo . ZooJdoProperties props = new org . zoodb . jdo . ZooJdoProperties ( org . zoodb . test . testutil . TestTools . getDbName ( ) ) ; props . setZooAutoCreateSchema ( true ) ; javax . jdo . PersistenceManager pm = org . zoodb . test . testutil . TestTools . openPM ( props ) ; pm . currentTransaction ( ) . begin ( ) ; org . zoodb . test . jdo . ProjectPC084 s = new org . zoodb . test . jdo . ProjectPC084 ( ) ; pm . makePersistent ( s ) ; javax . jdo . Query q = pm . newQuery ( org . zoodb . test . jdo . ProjectPC084 . class ) ; q . execute ( ) ; s . getActiveUsers ( ) . add ( new org . zoodb . test . jdo . OnlineStatePC084 ( ) ) ; java . lang . Object oid = pm . getObjectId ( s ) ; pm . currentTransaction ( ) . commit ( ) ; org . zoodb . test . testutil . TestTools . closePM ( ) ; pm = org . zoodb . test . testutil . TestTools . openPM ( ) ; pm . currentTransaction ( ) . begin ( ) ; org . zoodb . test . jdo . ProjectPC084 s2 = ( ( org . zoodb . test . jdo . ProjectPC084 ) ( pm . getObjectById ( oid ) ) ) ; \"<AssertPlaceHolder>\" ; pm . currentTransaction ( ) . commit ( ) ; pm . close ( ) ; } getObjectById ( java . lang . Object ) { org . zoodb . internal . util . DBTracer . logCall ( this , arg0 ) ; checkOpen ( ) ; java . lang . Object o = nativeConnection . getObjectById ( arg0 ) ; if ( o == null ) { throw new javax . jdo . JDOObjectNotFoundException ( ( \"OID=\" + ( org . zoodb . internal . util . Util . oidToString ( arg0 ) ) ) ) ; } return o ; }", "answer": "org . junit . Assert . assertNotNull ( s2 )"}
{"focal": "getRoot ( ) { return root ; }", "testMethod": "testCyclicDependenciesBig ( ) { org . sonatype . aether . graph . DependencyNode root = parser . parse ( \"cycle-big.txt\" ) ; org . sonatype . aether . collection . CollectRequest request = new org . sonatype . aether . collection . CollectRequest ( root . getDependency ( ) , java . util . Arrays . asList ( repository ) ) ; collector . setArtifactDescriptorReader ( new org . sonatype . aether . impl . internal . IniArtifactDescriptorReader ( \"artifact-descriptions/cycle-big/\" ) ) ; org . sonatype . aether . collection . CollectResult result = collector . collectDependencies ( session , request ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result . getRoot ( ) )", "total": "testCyclicDependenciesBig ( ) { org . sonatype . aether . graph . DependencyNode root = parser . parse ( \"cycle-big.txt\" ) ; org . sonatype . aether . collection . CollectRequest request = new org . sonatype . aether . collection . CollectRequest ( root . getDependency ( ) , java . util . Arrays . asList ( repository ) ) ; collector . setArtifactDescriptorReader ( new org . sonatype . aether . impl . internal . IniArtifactDescriptorReader ( \"artifact-descriptions/cycle-big/\" ) ) ; org . sonatype . aether . collection . CollectResult result = collector . collectDependencies ( session , request ) ; \"<AssertPlaceHolder>\" ; } getRoot ( ) { return root ; }", "answer": "org . junit . Assert . assertNotNull ( result . getRoot ( ) )"}
{"focal": "getTask ( java . lang . Class ) { java . lang . Class < ? extends org . sejda . model . task . Task > retVal = tasksMap . get ( parametersClass ) ; if ( retVal == null ) { org . sejda . core . context . DefaultTasksRegistry . LOG . info ( \"Unable<sp>to<sp>find<sp>a<sp>match<sp>for<sp>the<sp>input<sp>parameter<sp>class<sp>{},<sp>searching<sp>for<sp>an<sp>assignable<sp>one\" , parametersClass ) ; retVal = findNearestTask ( parametersClass ) ; } return retVal ; }", "testMethod": "testGetTaskPositiveNearest ( ) { org . sejda . model . task . Task < ? extends org . sejda . model . parameter . base . TaskParameters > task = victim . getTask ( new org . sejda . model . task . ChildTestTaskParameter ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( task )", "total": "testGetTaskPositiveNearest ( ) { org . sejda . model . task . Task < ? extends org . sejda . model . parameter . base . TaskParameters > task = victim . getTask ( new org . sejda . model . task . ChildTestTaskParameter ( ) ) ; \"<AssertPlaceHolder>\" ; } getTask ( java . lang . Class ) { java . lang . Class < ? extends org . sejda . model . task . Task > retVal = tasksMap . get ( parametersClass ) ; if ( retVal == null ) { org . sejda . core . context . DefaultTasksRegistry . LOG . info ( \"Unable<sp>to<sp>find<sp>a<sp>match<sp>for<sp>the<sp>input<sp>parameter<sp>class<sp>{},<sp>searching<sp>for<sp>an<sp>assignable<sp>one\" , parametersClass ) ; retVal = findNearestTask ( parametersClass ) ; } return retVal ; }", "answer": "org . junit . Assert . assertNotNull ( task )"}
{"focal": "valueOf ( java . lang . String , java . lang . String , java . lang . String ) { org . alfresco . rest . framework . Api . SCOPE scope = null ; int version = 1 ; try { if ( ! ( org . apache . commons . lang . StringUtils . isAllLowerCase ( apiName ) ) ) throw new org . alfresco . rest . framework . core . exceptions . InvalidArgumentException ( \"Api<sp>name<sp>must<sp>be<sp>lowercase\" ) ; scope = org . alfresco . rest . framework . Api . SCOPE . valueOf ( apiScope . toUpperCase ( ) ) ; version = java . lang . Integer . parseInt ( apiVersion ) ; if ( version < 1 ) throw new org . alfresco . rest . framework . core . exceptions . InvalidArgumentException ( \"Version<sp>must<sp>be<sp>a<sp>positive<sp>integer.\" ) ; } catch ( java . lang . Exception error ) { if ( error instanceof org . alfresco . rest . framework . core . exceptions . InvalidArgumentException ) throw ( ( org . alfresco . rest . framework . core . exceptions . InvalidArgumentException ) ( error ) ) ; org . alfresco . rest . framework . Api . logger . debug ( ( ( ( ( ( \"Invalid<sp>API<sp>definition:<sp>\" + apiName ) + \"<sp>\" ) + apiScope ) + \"<sp>\" ) + apiVersion ) ) ; throw new org . alfresco . rest . framework . core . exceptions . InvalidArgumentException ( ( \"Invalid<sp>API<sp>definition:\" + ( error . getMessage ( ) ) ) ) ; } org . alfresco . rest . framework . Api anApi = new org . alfresco . rest . framework . Api ( apiName , scope , version ) ; return org . alfresco . rest . framework . Api . ALFRESCO_PUBLIC . equals ( anApi ) ? org . alfresco . rest . framework . Api . ALFRESCO_PUBLIC : anApi ; }", "testMethod": "testApiValues ( ) { org . alfresco . rest . framework . Api testApi ; try { testApi = org . alfresco . rest . framework . Api . valueOf ( null , null , null ) ; org . junit . Assert . fail ( \"Should<sp>throw<sp>an<sp>InvalidArgumentException\" ) ; } catch ( org . alfresco . rest . framework . core . exceptions . InvalidArgumentException error ) { } try { testApi = org . alfresco . rest . framework . Api . valueOf ( \"alfrescomock\" , \"public\" , \"0\" ) ; org . junit . Assert . fail ( \"Should<sp>throw<sp>an<sp>InvalidArgumentException\" ) ; } catch ( org . alfresco . rest . framework . core . exceptions . InvalidArgumentException error ) { } try { testApi = org . alfresco . rest . framework . Api . valueOf ( \"AlfrescoMock\" , \"public\" , \"1\" ) ; org . junit . Assert . fail ( \"Should<sp>throw<sp>an<sp>InvalidArgumentException\" ) ; } catch ( org . alfresco . rest . framework . core . exceptions . InvalidArgumentException error ) { } try { testApi = org . alfresco . rest . framework . Api . valueOf ( \"alfrescomock\" , \"nonsense\" , \"1\" ) ; org . junit . Assert . fail ( \"Should<sp>throw<sp>an<sp>InvalidArgumentException\" ) ; } catch ( org . alfresco . rest . framework . core . exceptions . InvalidArgumentException error ) { } testApi = org . alfresco . rest . framework . Api . valueOf ( \"alfrescomock\" , \"Public\" , \"1\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( testApi )", "total": "testApiValues ( ) { org . alfresco . rest . framework . Api testApi ; try { testApi = org . alfresco . rest . framework . Api . valueOf ( null , null , null ) ; org . junit . Assert . fail ( \"Should<sp>throw<sp>an<sp>InvalidArgumentException\" ) ; } catch ( org . alfresco . rest . framework . core . exceptions . InvalidArgumentException error ) { } try { testApi = org . alfresco . rest . framework . Api . valueOf ( \"alfrescomock\" , \"public\" , \"0\" ) ; org . junit . Assert . fail ( \"Should<sp>throw<sp>an<sp>InvalidArgumentException\" ) ; } catch ( org . alfresco . rest . framework . core . exceptions . InvalidArgumentException error ) { } try { testApi = org . alfresco . rest . framework . Api . valueOf ( \"AlfrescoMock\" , \"public\" , \"1\" ) ; org . junit . Assert . fail ( \"Should<sp>throw<sp>an<sp>InvalidArgumentException\" ) ; } catch ( org . alfresco . rest . framework . core . exceptions . InvalidArgumentException error ) { } try { testApi = org . alfresco . rest . framework . Api . valueOf ( \"alfrescomock\" , \"nonsense\" , \"1\" ) ; org . junit . Assert . fail ( \"Should<sp>throw<sp>an<sp>InvalidArgumentException\" ) ; } catch ( org . alfresco . rest . framework . core . exceptions . InvalidArgumentException error ) { } testApi = org . alfresco . rest . framework . Api . valueOf ( \"alfrescomock\" , \"Public\" , \"1\" ) ; \"<AssertPlaceHolder>\" ; } valueOf ( java . lang . String , java . lang . String , java . lang . String ) { org . alfresco . rest . framework . Api . SCOPE scope = null ; int version = 1 ; try { if ( ! ( org . apache . commons . lang . StringUtils . isAllLowerCase ( apiName ) ) ) throw new org . alfresco . rest . framework . core . exceptions . InvalidArgumentException ( \"Api<sp>name<sp>must<sp>be<sp>lowercase\" ) ; scope = org . alfresco . rest . framework . Api . SCOPE . valueOf ( apiScope . toUpperCase ( ) ) ; version = java . lang . Integer . parseInt ( apiVersion ) ; if ( version < 1 ) throw new org . alfresco . rest . framework . core . exceptions . InvalidArgumentException ( \"Version<sp>must<sp>be<sp>a<sp>positive<sp>integer.\" ) ; } catch ( java . lang . Exception error ) { if ( error instanceof org . alfresco . rest . framework . core . exceptions . InvalidArgumentException ) throw ( ( org . alfresco . rest . framework . core . exceptions . InvalidArgumentException ) ( error ) ) ; org . alfresco . rest . framework . Api . logger . debug ( ( ( ( ( ( \"Invalid<sp>API<sp>definition:<sp>\" + apiName ) + \"<sp>\" ) + apiScope ) + \"<sp>\" ) + apiVersion ) ) ; throw new org . alfresco . rest . framework . core . exceptions . InvalidArgumentException ( ( \"Invalid<sp>API<sp>definition:\" + ( error . getMessage ( ) ) ) ) ; } org . alfresco . rest . framework . Api anApi = new org . alfresco . rest . framework . Api ( apiName , scope , version ) ; return org . alfresco . rest . framework . Api . ALFRESCO_PUBLIC . equals ( anApi ) ? org . alfresco . rest . framework . Api . ALFRESCO_PUBLIC : anApi ; }", "answer": "org . junit . Assert . assertNotNull ( testApi )"}
{"focal": "instanceForModifyAddAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>add<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>add<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"add\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "testMethod": "testModifyTicketAddHostEmptyTicketId ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyAddAccess ( \"\" , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_HOST , hostName ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( pi )", "total": "testModifyTicketAddHostEmptyTicketId ( ) { org . irods . jargon . ticket . packinstr . TicketAdminInp pi = org . irods . jargon . ticket . packinstr . TicketAdminInp . instanceForModifyAddAccess ( \"\" , TicketModifyAddOrRemoveTypeEnum . TICKET_MODIFY_HOST , hostName ) ; \"<AssertPlaceHolder>\" ; } instanceForModifyAddAccess ( java . lang . String , org . irods . jargon . ticket . packinstr . TicketModifyAddOrRemoveTypeEnum , java . lang . String ) { if ( ( ticketId == null ) || ( ticketId . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>ticket<sp>id\" ) ; } if ( addTypeEnum == null ) { throw new java . lang . IllegalArgumentException ( \"null<sp>modify<sp>add<sp>permission<sp>type<sp>not<sp>set\" ) ; } if ( ( modObject == null ) || ( modObject . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( \"null<sp>or<sp>empty<sp>modify<sp>add<sp>-<sp>user,<sp>group,<sp>or<sp>host\" ) ; } return new org . irods . jargon . ticket . packinstr . TicketAdminInp ( TICKET_ADMIN_INP_API_NBR , \"mod\" , ticketId , \"add\" , addTypeEnum . getTextValue ( ) , modObject , BLANK ) ; }", "answer": "org . junit . Assert . assertNotNull ( pi )"}
{"focal": "get ( java . lang . Object ) { return serviceMap . get ( key ) ; }", "testMethod": "testExceedCacheDirMaxSizeMultipleEvictions ( ) { com . hazelcast . core . HazelcastInstance instance = initializeTestHazelcastInstance ( ) ; ddf . catalog . cache . ResourceCacheSizeLimitTest . listener . setMaxDirSizeBytes ( 28 ) ; ddf . catalog . cache . ResourceCacheSizeLimitTest . listener . setHazelcastInstance ( instance ) ; com . hazelcast . core . IMap < java . lang . String , ddf . catalog . resource . data . ReliableResource > cacheMap = instance . getMap ( ddf . catalog . cache . ResourceCacheSizeLimitTest . PRODUCT_CACHE_NAME ) ; java . lang . String rr1Key = \"rr1\" ; java . lang . String rr1FileName = \"10bytes.txt\" ; simulateAddFileToProductCache ( rr1Key , rr1FileName , rr1FileName , cacheMap ) ; ddf . catalog . resource . data . ReliableResource rrFromCache = ( ( ddf . catalog . resource . data . ReliableResource ) ( cacheMap . get ( rr1Key ) ) ) ; \"<AssertPlaceHolder>\" ; java . lang . String rr2Key = \"rr2\" ; java . lang . String rr2FileName = \"15bytes.txt\" ; simulateAddFileToProductCache ( rr2Key , rr2FileName , rr2FileName , cacheMap ) ; java . lang . String rr3Key = \"rr3\" ; java . lang . String rr3FileName = \"15bytes_B.txt\" ; simulateAddFileToProductCache ( rr3Key , rr3FileName , rr3FileName , cacheMap ) ; verifyRemovedFromCache ( cacheMap , rr1Key , rr1FileName ) ; verifyRemovedFromCache ( cacheMap , rr2Key , rr2FileName ) ; verifyCached ( cacheMap , rr3Key , rr3FileName ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( rrFromCache )", "total": "testExceedCacheDirMaxSizeMultipleEvictions ( ) { com . hazelcast . core . HazelcastInstance instance = initializeTestHazelcastInstance ( ) ; ddf . catalog . cache . ResourceCacheSizeLimitTest . listener . setMaxDirSizeBytes ( 28 ) ; ddf . catalog . cache . ResourceCacheSizeLimitTest . listener . setHazelcastInstance ( instance ) ; com . hazelcast . core . IMap < java . lang . String , ddf . catalog . resource . data . ReliableResource > cacheMap = instance . getMap ( ddf . catalog . cache . ResourceCacheSizeLimitTest . PRODUCT_CACHE_NAME ) ; java . lang . String rr1Key = \"rr1\" ; java . lang . String rr1FileName = \"10bytes.txt\" ; simulateAddFileToProductCache ( rr1Key , rr1FileName , rr1FileName , cacheMap ) ; ddf . catalog . resource . data . ReliableResource rrFromCache = ( ( ddf . catalog . resource . data . ReliableResource ) ( cacheMap . get ( rr1Key ) ) ) ; \"<AssertPlaceHolder>\" ; java . lang . String rr2Key = \"rr2\" ; java . lang . String rr2FileName = \"15bytes.txt\" ; simulateAddFileToProductCache ( rr2Key , rr2FileName , rr2FileName , cacheMap ) ; java . lang . String rr3Key = \"rr3\" ; java . lang . String rr3FileName = \"15bytes_B.txt\" ; simulateAddFileToProductCache ( rr3Key , rr3FileName , rr3FileName , cacheMap ) ; verifyRemovedFromCache ( cacheMap , rr1Key , rr1FileName ) ; verifyRemovedFromCache ( cacheMap , rr2Key , rr2FileName ) ; verifyCached ( cacheMap , rr3Key , rr3FileName ) ; } get ( java . lang . Object ) { return serviceMap . get ( key ) ; }", "answer": "org . junit . Assert . assertNotNull ( rrFromCache )"}
{"focal": "newInstance ( ) { java . net . URL wsdlLocation = be . e_contract . mycarenet . tarification . MycarenetTarificationServiceFactory . class . getResource ( \"/MyCareNetTarification_v1.wsdl\" ) ; javax . xml . namespace . QName MYCARENETTARIFICATIONSERVICE_QNAME = new javax . xml . namespace . QName ( \"urn:be:fgov:ehealth:mycarenet:tarification:protocol:v1\" , \"MycarenetTarificationService\" ) ; be . e_contract . mycarenet . tarification . jaxws . MycarenetTarificationService service = new be . e_contract . mycarenet . tarification . jaxws . MycarenetTarificationService ( wsdlLocation , MYCARENETTARIFICATIONSERVICE_QNAME ) ; return service ; }", "testMethod": "testNewInstance ( ) { be . e_contract . mycarenet . tarification . jaxws . MycarenetTarificationService service = be . e_contract . mycarenet . tarification . MycarenetTarificationServiceFactory . newInstance ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( service )", "total": "testNewInstance ( ) { be . e_contract . mycarenet . tarification . jaxws . MycarenetTarificationService service = be . e_contract . mycarenet . tarification . MycarenetTarificationServiceFactory . newInstance ( ) ; \"<AssertPlaceHolder>\" ; } newInstance ( ) { java . net . URL wsdlLocation = be . e_contract . mycarenet . tarification . MycarenetTarificationServiceFactory . class . getResource ( \"/MyCareNetTarification_v1.wsdl\" ) ; javax . xml . namespace . QName MYCARENETTARIFICATIONSERVICE_QNAME = new javax . xml . namespace . QName ( \"urn:be:fgov:ehealth:mycarenet:tarification:protocol:v1\" , \"MycarenetTarificationService\" ) ; be . e_contract . mycarenet . tarification . jaxws . MycarenetTarificationService service = new be . e_contract . mycarenet . tarification . jaxws . MycarenetTarificationService ( wsdlLocation , MYCARENETTARIFICATIONSERVICE_QNAME ) ; return service ; }", "answer": "org . junit . Assert . assertNotNull ( service )"}
{"focal": "getQueue ( java . lang . String ) { return resMgrDelegate . getQueue ( queueName ) ; }", "testMethod": "testParentQueueUpdateInQueueMappingFailsAfterAutoCreation ( ) { org . apache . hadoop . yarn . server . resourcemanager . MockRM newMockRM = setupSchedulerInstance ( ) ; org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . CapacityScheduler newCS = ( ( org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . CapacityScheduler ) ( newMockRM . getResourceScheduler ( ) ) ) ; try { submitApp ( newCS , org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . USER0 , org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . USER0 , org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . PARENT_QUEUE ) ; \"<AssertPlaceHolder>\" ; setupQueueMapping ( newCS , org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . USER0 , \"d\" , org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . USER0 ) ; newCS . updatePlacementRules ( ) ; org . apache . hadoop . yarn . server . resourcemanager . RMContext rmContext = mock ( org . apache . hadoop . yarn . server . resourcemanager . RMContext . class ) ; when ( rmContext . getDispatcher ( ) ) . thenReturn ( dispatcher ) ; newCS . setRMContext ( rmContext ) ; org . apache . hadoop . yarn . api . records . ApplicationId appId = org . apache . hadoop . yarn . server . utils . BuilderUtils . newApplicationId ( 1 , 1 ) ; org . apache . hadoop . yarn . server . resourcemanager . scheduler . event . SchedulerEvent addAppEvent = new org . apache . hadoop . yarn . server . resourcemanager . scheduler . event . AppAddedSchedulerEvent ( appId , USER0 , USER0 , new org . apache . hadoop . yarn . server . resourcemanager . placement . ApplicationPlacementContext ( USER0 , \"d\" ) ) ; newCS . handle ( addAppEvent ) ; org . apache . hadoop . yarn . server . resourcemanager . rmapp . RMAppEvent event = new org . apache . hadoop . yarn . server . resourcemanager . rmapp . RMAppEvent ( appId , org . apache . hadoop . yarn . server . resourcemanager . rmapp . RMAppEventType . APP_REJECTED , \"error\" ) ; dispatcher . spyOnNextEvent ( event , 10000 ) ; } finally { if ( newMockRM != null ) { ( ( org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . CapacityScheduler ) ( newMockRM . getResourceScheduler ( ) ) ) . stop ( ) ; newMockRM . stop ( ) ; } } }", "assertLine": "org . junit . Assert . assertNotNull ( newCS . getQueue ( org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . USER0 ) )", "total": "testParentQueueUpdateInQueueMappingFailsAfterAutoCreation ( ) { org . apache . hadoop . yarn . server . resourcemanager . MockRM newMockRM = setupSchedulerInstance ( ) ; org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . CapacityScheduler newCS = ( ( org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . CapacityScheduler ) ( newMockRM . getResourceScheduler ( ) ) ) ; try { submitApp ( newCS , org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . USER0 , org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . USER0 , org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . PARENT_QUEUE ) ; \"<AssertPlaceHolder>\" ; setupQueueMapping ( newCS , org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . USER0 , \"d\" , org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . USER0 ) ; newCS . updatePlacementRules ( ) ; org . apache . hadoop . yarn . server . resourcemanager . RMContext rmContext = mock ( org . apache . hadoop . yarn . server . resourcemanager . RMContext . class ) ; when ( rmContext . getDispatcher ( ) ) . thenReturn ( dispatcher ) ; newCS . setRMContext ( rmContext ) ; org . apache . hadoop . yarn . api . records . ApplicationId appId = org . apache . hadoop . yarn . server . utils . BuilderUtils . newApplicationId ( 1 , 1 ) ; org . apache . hadoop . yarn . server . resourcemanager . scheduler . event . SchedulerEvent addAppEvent = new org . apache . hadoop . yarn . server . resourcemanager . scheduler . event . AppAddedSchedulerEvent ( appId , USER0 , USER0 , new org . apache . hadoop . yarn . server . resourcemanager . placement . ApplicationPlacementContext ( USER0 , \"d\" ) ) ; newCS . handle ( addAppEvent ) ; org . apache . hadoop . yarn . server . resourcemanager . rmapp . RMAppEvent event = new org . apache . hadoop . yarn . server . resourcemanager . rmapp . RMAppEvent ( appId , org . apache . hadoop . yarn . server . resourcemanager . rmapp . RMAppEventType . APP_REJECTED , \"error\" ) ; dispatcher . spyOnNextEvent ( event , 10000 ) ; } finally { if ( newMockRM != null ) { ( ( org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . CapacityScheduler ) ( newMockRM . getResourceScheduler ( ) ) ) . stop ( ) ; newMockRM . stop ( ) ; } } } getQueue ( java . lang . String ) { return resMgrDelegate . getQueue ( queueName ) ; }", "answer": "org . junit . Assert . assertNotNull ( newCS . getQueue ( org . apache . hadoop . yarn . server . resourcemanager . scheduler . capacity . USER0 ) )"}
{"focal": "grantTablePermission ( java . lang . String , java . lang . String , org . apache . accumulo . core . security . TablePermission ) { if ( ( acu . users . get ( principal ) ) == null ) throw new org . apache . accumulo . core . client . AccumuloSecurityException ( principal , org . apache . accumulo . core . client . impl . thrift . SecurityErrorCode . USER_DOESNT_EXIST ) ; datawave . accumulo . inmemory . InMemoryTable table = acu . tables . get ( tableName ) ; if ( table == null ) throw new org . apache . accumulo . core . client . AccumuloSecurityException ( tableName , org . apache . accumulo . core . client . impl . thrift . SecurityErrorCode . TABLE_DOESNT_EXIST ) ; java . util . EnumSet < org . apache . accumulo . core . security . TablePermission > perms = table . userPermissions . get ( principal ) ; if ( perms == null ) table . userPermissions . put ( principal , java . util . EnumSet . of ( permission ) ) ; else perms . add ( permission ) ; }", "testMethod": "testGrantTablePermission ( ) { datawave . webservice . result . VoidResponse voidResponse = permissionsBean . grantTablePermission ( \"test\" , \"table\" , \"GRANT\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( voidResponse )", "total": "testGrantTablePermission ( ) { datawave . webservice . result . VoidResponse voidResponse = permissionsBean . grantTablePermission ( \"test\" , \"table\" , \"GRANT\" ) ; \"<AssertPlaceHolder>\" ; } grantTablePermission ( java . lang . String , java . lang . String , org . apache . accumulo . core . security . TablePermission ) { if ( ( acu . users . get ( principal ) ) == null ) throw new org . apache . accumulo . core . client . AccumuloSecurityException ( principal , org . apache . accumulo . core . client . impl . thrift . SecurityErrorCode . USER_DOESNT_EXIST ) ; datawave . accumulo . inmemory . InMemoryTable table = acu . tables . get ( tableName ) ; if ( table == null ) throw new org . apache . accumulo . core . client . AccumuloSecurityException ( tableName , org . apache . accumulo . core . client . impl . thrift . SecurityErrorCode . TABLE_DOESNT_EXIST ) ; java . util . EnumSet < org . apache . accumulo . core . security . TablePermission > perms = table . userPermissions . get ( principal ) ; if ( perms == null ) table . userPermissions . put ( principal , java . util . EnumSet . of ( permission ) ) ; else perms . add ( permission ) ; }", "answer": "org . junit . Assert . assertNotNull ( voidResponse )"}
{"focal": "getResult ( ) { checkState ( ( ( result ) != null ) , \"Metadata<sp>tree<sp>has<sp>not<sp>been<sp>completely<sp>built\" ) ; return result . getAnnotations ( ) . isEmpty ( ) ? java . util . Optional . empty ( ) : java . util . Optional . of ( result ) ; }", "testMethod": "testLeafListAsRootElement ( ) { final org . opendaylight . yangtools . yang . model . api . LeafListSchemaNode topLevelLeafList = ( ( org . opendaylight . yangtools . yang . model . api . LeafListSchemaNode ) ( org . opendaylight . yangtools . yang . data . codec . xml . Bug8675Test . fooModule . findDataChildByName ( org . opendaylight . yangtools . yang . common . QName . create ( org . opendaylight . yangtools . yang . data . codec . xml . Bug8675Test . fooModule . getQNameModule ( ) , \"top-level-leaf-list\" ) ) . get ( ) ) ) ; final java . io . InputStream resourceAsStream = org . opendaylight . yangtools . yang . data . codec . xml . XmlToNormalizedNodesTest . class . getResourceAsStream ( \"/bug8675/foo-6.xml\" ) ; final javax . xml . stream . XMLStreamReader reader = org . opendaylight . yangtools . util . xml . UntrustedXML . createXMLStreamReader ( resourceAsStream ) ; final org . opendaylight . yangtools . yang . data . impl . schema . NormalizedNodeResult result = new org . opendaylight . yangtools . yang . data . impl . schema . NormalizedNodeResult ( ) ; final org . opendaylight . yangtools . yang . data . api . schema . stream . NormalizedNodeStreamWriter streamWriter = org . opendaylight . yangtools . yang . data . impl . schema . ImmutableNormalizedNodeStreamWriter . from ( result ) ; final org . opendaylight . yangtools . yang . data . codec . xml . XmlParserStream xmlParser = org . opendaylight . yangtools . yang . data . codec . xml . XmlParserStream . create ( streamWriter , org . opendaylight . yangtools . yang . data . codec . xml . Bug8675Test . schemaContext , topLevelLeafList ) ; xmlParser . parse ( reader ) ; final org . opendaylight . yangtools . yang . data . api . schema . NormalizedNode < ? , ? > transformedInput = result . getResult ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( transformedInput )", "total": "testLeafListAsRootElement ( ) { final org . opendaylight . yangtools . yang . model . api . LeafListSchemaNode topLevelLeafList = ( ( org . opendaylight . yangtools . yang . model . api . LeafListSchemaNode ) ( org . opendaylight . yangtools . yang . data . codec . xml . Bug8675Test . fooModule . findDataChildByName ( org . opendaylight . yangtools . yang . common . QName . create ( org . opendaylight . yangtools . yang . data . codec . xml . Bug8675Test . fooModule . getQNameModule ( ) , \"top-level-leaf-list\" ) ) . get ( ) ) ) ; final java . io . InputStream resourceAsStream = org . opendaylight . yangtools . yang . data . codec . xml . XmlToNormalizedNodesTest . class . getResourceAsStream ( \"/bug8675/foo-6.xml\" ) ; final javax . xml . stream . XMLStreamReader reader = org . opendaylight . yangtools . util . xml . UntrustedXML . createXMLStreamReader ( resourceAsStream ) ; final org . opendaylight . yangtools . yang . data . impl . schema . NormalizedNodeResult result = new org . opendaylight . yangtools . yang . data . impl . schema . NormalizedNodeResult ( ) ; final org . opendaylight . yangtools . yang . data . api . schema . stream . NormalizedNodeStreamWriter streamWriter = org . opendaylight . yangtools . yang . data . impl . schema . ImmutableNormalizedNodeStreamWriter . from ( result ) ; final org . opendaylight . yangtools . yang . data . codec . xml . XmlParserStream xmlParser = org . opendaylight . yangtools . yang . data . codec . xml . XmlParserStream . create ( streamWriter , org . opendaylight . yangtools . yang . data . codec . xml . Bug8675Test . schemaContext , topLevelLeafList ) ; xmlParser . parse ( reader ) ; final org . opendaylight . yangtools . yang . data . api . schema . NormalizedNode < ? , ? > transformedInput = result . getResult ( ) ; \"<AssertPlaceHolder>\" ; } getResult ( ) { checkState ( ( ( result ) != null ) , \"Metadata<sp>tree<sp>has<sp>not<sp>been<sp>completely<sp>built\" ) ; return result . getAnnotations ( ) . isEmpty ( ) ? java . util . Optional . empty ( ) : java . util . Optional . of ( result ) ; }", "answer": "org . junit . Assert . assertNotNull ( transformedInput )"}
{"focal": "getItems ( int , int , com . cloudapp . api . model . CloudAppItem$Type , boolean , java . lang . String ) { return items . getItems ( page , perPage , type , showDeleted , source ) ; }", "testMethod": "simpleGetItemsTest ( ) { java . util . List < com . cloudapp . api . model . CloudAppItem > l = api . getItems ( 1 , 5 , null , false , null ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( l )", "total": "simpleGetItemsTest ( ) { java . util . List < com . cloudapp . api . model . CloudAppItem > l = api . getItems ( 1 , 5 , null , false , null ) ; \"<AssertPlaceHolder>\" ; } getItems ( int , int , com . cloudapp . api . model . CloudAppItem$Type , boolean , java . lang . String ) { return items . getItems ( page , perPage , type , showDeleted , source ) ; }", "answer": "org . junit . Assert . assertNotNull ( l )"}
{"focal": "getPolicies ( javax . servlet . http . HttpServletRequest ) { java . util . List < org . apache . ranger . plugin . model . RangerPolicy > ret = new java . util . ArrayList < org . apache . ranger . plugin . model . RangerPolicy > ( ) ; if ( org . apache . ranger . rest . PublicAPIsv2 . logger . isDebugEnabled ( ) ) { org . apache . ranger . rest . PublicAPIsv2 . logger . debug ( \"==><sp>PublicAPIsv2.getPolicies()\" ) ; } ret = serviceREST . getPolicies ( request ) . getPolicies ( ) ; if ( org . apache . ranger . rest . PublicAPIsv2 . logger . isDebugEnabled ( ) ) { org . apache . ranger . rest . PublicAPIsv2 . logger . debug ( ( ( ( \"<==<sp>PublicAPIsv2.getPolicies(Request:<sp>\" + ( request . getQueryString ( ) ) ) + \"<sp>Result<sp>Size:<sp>\" ) + ( ret . size ( ) ) ) ) ; } return ret ; }", "testMethod": "test25getPolicies ( ) { java . util . List < org . apache . ranger . plugin . model . RangerPolicy > ret = new java . util . ArrayList < org . apache . ranger . plugin . model . RangerPolicy > ( ) ; org . apache . ranger . plugin . util . SearchFilter filter = new org . apache . ranger . plugin . util . SearchFilter ( ) ; filter . setParam ( SearchFilter . POLICY_NAME , \"policyName\" ) ; filter . setParam ( SearchFilter . SERVICE_NAME , \"serviceName\" ) ; org . mockito . Mockito . when ( svcStore . getPolicies ( filter ) ) . thenReturn ( ret ) ; java . util . List < org . apache . ranger . plugin . model . RangerPolicy > dbRangerPolicyList = serviceREST . getPolicies ( filter ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( svcStore ) . getPolicies ( filter ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( dbRangerPolicyList )", "total": "test25getPolicies ( ) { java . util . List < org . apache . ranger . plugin . model . RangerPolicy > ret = new java . util . ArrayList < org . apache . ranger . plugin . model . RangerPolicy > ( ) ; org . apache . ranger . plugin . util . SearchFilter filter = new org . apache . ranger . plugin . util . SearchFilter ( ) ; filter . setParam ( SearchFilter . POLICY_NAME , \"policyName\" ) ; filter . setParam ( SearchFilter . SERVICE_NAME , \"serviceName\" ) ; org . mockito . Mockito . when ( svcStore . getPolicies ( filter ) ) . thenReturn ( ret ) ; java . util . List < org . apache . ranger . plugin . model . RangerPolicy > dbRangerPolicyList = serviceREST . getPolicies ( filter ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( svcStore ) . getPolicies ( filter ) ; } getPolicies ( javax . servlet . http . HttpServletRequest ) { java . util . List < org . apache . ranger . plugin . model . RangerPolicy > ret = new java . util . ArrayList < org . apache . ranger . plugin . model . RangerPolicy > ( ) ; if ( org . apache . ranger . rest . PublicAPIsv2 . logger . isDebugEnabled ( ) ) { org . apache . ranger . rest . PublicAPIsv2 . logger . debug ( \"==><sp>PublicAPIsv2.getPolicies()\" ) ; } ret = serviceREST . getPolicies ( request ) . getPolicies ( ) ; if ( org . apache . ranger . rest . PublicAPIsv2 . logger . isDebugEnabled ( ) ) { org . apache . ranger . rest . PublicAPIsv2 . logger . debug ( ( ( ( \"<==<sp>PublicAPIsv2.getPolicies(Request:<sp>\" + ( request . getQueryString ( ) ) ) + \"<sp>Result<sp>Size:<sp>\" ) + ( ret . size ( ) ) ) ) ; } return ret ; }", "answer": "org . junit . Assert . assertNotNull ( dbRangerPolicyList )"}
{"focal": "getPropertyValue ( java . lang . String ) { return getPropertyValue ( property , null ) ; }", "testMethod": "testIssuedDate ( ) { org . nuxeo . ecm . core . api . DocumentModel folder1 = session . createDocumentModel ( \"/\" , \"testfolder1\" , \"Folder\" ) ; folder1 = session . createDocument ( folder1 ) ; org . nuxeo . ecm . core . api . DocumentModel file1 = session . createDocumentModel ( \"/testfolder1\" , \"testfile1\" , \"File\" ) ; file1 = session . createDocument ( file1 ) ; org . nuxeo . ecm . core . api . DocumentModel proxyDoc = session . publishDocument ( file1 , folder1 ) ; org . nuxeo . ecm . platform . dublincore . TestDublinCoreStorage . getEventProducer ( ) . fireEvent ( new org . nuxeo . ecm . core . event . impl . DocumentEventContext ( session , session . getPrincipal ( ) , proxyDoc ) . newEvent ( \"documentPublished\" ) ) ; org . nuxeo . ecm . core . api . DocumentModel version = session . getSourceDocument ( proxyDoc . getRef ( ) ) ; java . util . Calendar issued = ( ( java . util . Calendar ) ( version . getPropertyValue ( \"dc:issued\" ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( issued )", "total": "testIssuedDate ( ) { org . nuxeo . ecm . core . api . DocumentModel folder1 = session . createDocumentModel ( \"/\" , \"testfolder1\" , \"Folder\" ) ; folder1 = session . createDocument ( folder1 ) ; org . nuxeo . ecm . core . api . DocumentModel file1 = session . createDocumentModel ( \"/testfolder1\" , \"testfile1\" , \"File\" ) ; file1 = session . createDocument ( file1 ) ; org . nuxeo . ecm . core . api . DocumentModel proxyDoc = session . publishDocument ( file1 , folder1 ) ; org . nuxeo . ecm . platform . dublincore . TestDublinCoreStorage . getEventProducer ( ) . fireEvent ( new org . nuxeo . ecm . core . event . impl . DocumentEventContext ( session , session . getPrincipal ( ) , proxyDoc ) . newEvent ( \"documentPublished\" ) ) ; org . nuxeo . ecm . core . api . DocumentModel version = session . getSourceDocument ( proxyDoc . getRef ( ) ) ; java . util . Calendar issued = ( ( java . util . Calendar ) ( version . getPropertyValue ( \"dc:issued\" ) ) ) ; \"<AssertPlaceHolder>\" ; } getPropertyValue ( java . lang . String ) { return getPropertyValue ( property , null ) ; }", "answer": "org . junit . Assert . assertNotNull ( issued )"}
{"focal": "maxBucket ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . aggregation . pipeline . MaxBucketPipelineAggregationImpl ( name , bucketsPath ) ; }", "testMethod": "testMaxBucketPipelineAggregation ( ) { com . liferay . portal . search . aggregation . pipeline . MaxBucketPipelineAggregation maxBucketPipelineAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . maxBucket ( \"name\" , \"bucketsPath\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( maxBucketPipelineAggregation )", "total": "testMaxBucketPipelineAggregation ( ) { com . liferay . portal . search . aggregation . pipeline . MaxBucketPipelineAggregation maxBucketPipelineAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . maxBucket ( \"name\" , \"bucketsPath\" ) ; \"<AssertPlaceHolder>\" ; } maxBucket ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . aggregation . pipeline . MaxBucketPipelineAggregationImpl ( name , bucketsPath ) ; }", "answer": "org . junit . Assert . assertNotNull ( maxBucketPipelineAggregation )"}
{"focal": "createRestServerSSLEngineFactory ( org . apache . flink . configuration . Configuration ) { javax . net . ssl . SSLContext sslContext = org . apache . flink . runtime . net . SSLUtils . createRestServerSSLContext ( config ) ; if ( sslContext == null ) { throw new org . apache . flink . configuration . IllegalConfigurationException ( \"SSL<sp>is<sp>not<sp>enabled<sp>for<sp>REST<sp>endpoints.\" ) ; } return new org . apache . flink . runtime . io . network . netty . SSLHandlerFactory ( sslContext , org . apache . flink . runtime . net . SSLUtils . getEnabledProtocols ( config ) , org . apache . flink . runtime . net . SSLUtils . getEnabledCipherSuites ( config ) , false , org . apache . flink . runtime . net . SSLUtils . isRestSSLAuthenticationEnabled ( config ) , ( - 1 ) , ( - 1 ) ) ; }", "testMethod": "testRESTServerSSL ( ) { org . apache . flink . configuration . Configuration serverConfig = org . apache . flink . runtime . net . SSLUtilsTest . createRestSslConfigWithKeyStore ( ) ; org . apache . flink . runtime . io . network . netty . SSLHandlerFactory ssl = org . apache . flink . runtime . net . SSLUtils . createRestServerSSLEngineFactory ( serverConfig ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ssl )", "total": "testRESTServerSSL ( ) { org . apache . flink . configuration . Configuration serverConfig = org . apache . flink . runtime . net . SSLUtilsTest . createRestSslConfigWithKeyStore ( ) ; org . apache . flink . runtime . io . network . netty . SSLHandlerFactory ssl = org . apache . flink . runtime . net . SSLUtils . createRestServerSSLEngineFactory ( serverConfig ) ; \"<AssertPlaceHolder>\" ; } createRestServerSSLEngineFactory ( org . apache . flink . configuration . Configuration ) { javax . net . ssl . SSLContext sslContext = org . apache . flink . runtime . net . SSLUtils . createRestServerSSLContext ( config ) ; if ( sslContext == null ) { throw new org . apache . flink . configuration . IllegalConfigurationException ( \"SSL<sp>is<sp>not<sp>enabled<sp>for<sp>REST<sp>endpoints.\" ) ; } return new org . apache . flink . runtime . io . network . netty . SSLHandlerFactory ( sslContext , org . apache . flink . runtime . net . SSLUtils . getEnabledProtocols ( config ) , org . apache . flink . runtime . net . SSLUtils . getEnabledCipherSuites ( config ) , false , org . apache . flink . runtime . net . SSLUtils . isRestSSLAuthenticationEnabled ( config ) , ( - 1 ) , ( - 1 ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( ssl )"}
{"focal": "getInstance ( ) { try { final org . jboss . forge . furnace . se . BootstrapClassLoader loader = new org . jboss . forge . furnace . se . BootstrapClassLoader ( \"bootpath\" ) ; return org . jboss . forge . furnace . se . FurnaceFactory . getInstance ( org . jboss . forge . furnace . se . FurnaceFactory . class . getClassLoader ( ) , loader ) ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( e ) ; } }", "testMethod": "shouldBeAbleToPassPrimitivesIntoDelegate ( ) { org . jboss . forge . furnace . Furnace instance = org . jboss . forge . furnace . se . FurnaceFactory . getInstance ( ) ; \"<AssertPlaceHolder>\" ; instance . setServerMode ( false ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( instance )", "total": "shouldBeAbleToPassPrimitivesIntoDelegate ( ) { org . jboss . forge . furnace . Furnace instance = org . jboss . forge . furnace . se . FurnaceFactory . getInstance ( ) ; \"<AssertPlaceHolder>\" ; instance . setServerMode ( false ) ; } getInstance ( ) { try { final org . jboss . forge . furnace . se . BootstrapClassLoader loader = new org . jboss . forge . furnace . se . BootstrapClassLoader ( \"bootpath\" ) ; return org . jboss . forge . furnace . se . FurnaceFactory . getInstance ( org . jboss . forge . furnace . se . FurnaceFactory . class . getClassLoader ( ) , loader ) ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( instance )"}
{"focal": "buildJobDetail ( er . quartzscheduler . foundation . ERQSJobDescription ) { org . quartz . JobDataMap map = new org . quartz . JobDataMap ( ) ; map . put ( ERQSSchedulerServiceFrameworkPrincipal . INSTANCE_KEY , getSchedulerFPInstance ( ) ) ; if ( jobDescription . isEnterpriseObject ( ) ) { com . webobjects . eocontrol . EOKeyGlobalID globalID = ( ( er . extensions . eof . ERXGenericRecord ) ( jobDescription ) ) . permanentGlobalID ( ) ; map . put ( ERQSJob . ENTERPRISE_OBJECT_KEY , globalID ) ; } else map . put ( ERQSJob . NOT_PERSISTENT_OBJECT_KEY , jobDescription ) ; java . lang . String name = jobDescription . name ( ) ; java . lang . String group = jobDescription . group ( ) ; java . lang . String classPath = jobDescription . classPath ( ) ; java . lang . String description = jobDescription . jobDescription ( ) ; org . quartz . JobDetail job = null ; java . lang . Class < ? extends org . quartz . Job > jobClass = getClass ( classPath ) ; if ( jobClass != null ) { job = newJob ( jobClass ) . withIdentity ( name , buildGroup ( group ) ) . withDescription ( description ) . usingJobData ( map ) . build ( ) ; } if ( ( jobDescription . jobInfos ( ) ) != null ) job . getJobDataMap ( ) . putAll ( jobDescription . jobInfos ( ) ) ; return job ; }", "testMethod": "testBuildJobDetail ( ) { er . quartzscheduler . foundation . ERQSJobExecutionContext4Test jec = new er . quartzscheduler . foundation . ERQSJobExecutionContext4Test ( true ) ; er . quartzscheduler . util . ERQSSchedulerFP4Test fp = new er . quartzscheduler . util . ERQSSchedulerFP4Test ( ) ; jec . setSchedulerFP ( fp ) ; er . quartzscheduler . foundation . ERQSJobSupervisor js = new er . quartzscheduler . foundation . ERQSJobSupervisor ( ) ; js . execute ( jec ) ; er . quartzscheduler . foundation . ERQSJobDescription4Test jd = new er . quartzscheduler . foundation . ERQSJobDescription4Test ( ) ; jd . setIsEnterpriseObject ( false ) ; jd . setClassPath ( \"er.quartzscheduler.foundation.ERQSJobSupervisor\" ) ; jd . setCronExpression ( \"0<sp>0<sp>12<sp>*<sp>*<sp>?\" ) ; org . quartz . JobDetail job = js . buildJobDetail ( jd ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( job )", "total": "testBuildJobDetail ( ) { er . quartzscheduler . foundation . ERQSJobExecutionContext4Test jec = new er . quartzscheduler . foundation . ERQSJobExecutionContext4Test ( true ) ; er . quartzscheduler . util . ERQSSchedulerFP4Test fp = new er . quartzscheduler . util . ERQSSchedulerFP4Test ( ) ; jec . setSchedulerFP ( fp ) ; er . quartzscheduler . foundation . ERQSJobSupervisor js = new er . quartzscheduler . foundation . ERQSJobSupervisor ( ) ; js . execute ( jec ) ; er . quartzscheduler . foundation . ERQSJobDescription4Test jd = new er . quartzscheduler . foundation . ERQSJobDescription4Test ( ) ; jd . setIsEnterpriseObject ( false ) ; jd . setClassPath ( \"er.quartzscheduler.foundation.ERQSJobSupervisor\" ) ; jd . setCronExpression ( \"0<sp>0<sp>12<sp>*<sp>*<sp>?\" ) ; org . quartz . JobDetail job = js . buildJobDetail ( jd ) ; \"<AssertPlaceHolder>\" ; } buildJobDetail ( er . quartzscheduler . foundation . ERQSJobDescription ) { org . quartz . JobDataMap map = new org . quartz . JobDataMap ( ) ; map . put ( ERQSSchedulerServiceFrameworkPrincipal . INSTANCE_KEY , getSchedulerFPInstance ( ) ) ; if ( jobDescription . isEnterpriseObject ( ) ) { com . webobjects . eocontrol . EOKeyGlobalID globalID = ( ( er . extensions . eof . ERXGenericRecord ) ( jobDescription ) ) . permanentGlobalID ( ) ; map . put ( ERQSJob . ENTERPRISE_OBJECT_KEY , globalID ) ; } else map . put ( ERQSJob . NOT_PERSISTENT_OBJECT_KEY , jobDescription ) ; java . lang . String name = jobDescription . name ( ) ; java . lang . String group = jobDescription . group ( ) ; java . lang . String classPath = jobDescription . classPath ( ) ; java . lang . String description = jobDescription . jobDescription ( ) ; org . quartz . JobDetail job = null ; java . lang . Class < ? extends org . quartz . Job > jobClass = getClass ( classPath ) ; if ( jobClass != null ) { job = newJob ( jobClass ) . withIdentity ( name , buildGroup ( group ) ) . withDescription ( description ) . usingJobData ( map ) . build ( ) ; } if ( ( jobDescription . jobInfos ( ) ) != null ) job . getJobDataMap ( ) . putAll ( jobDescription . jobInfos ( ) ) ; return job ; }", "answer": "org . junit . Assert . assertNotNull ( job )"}
{"focal": "getAppender ( java . lang . String ) { if ( name == null ) { return null ; } for ( ch . qos . logback . core . Appender < E > appender : appenderList ) { if ( name . equals ( appender . getName ( ) ) ) { return appender ; } } return null ; }", "testMethod": "smoke ( ) { @ ch . qos . logback . classic . util . SuppressWarnings ( \"unused\" ) ch . qos . logback . classic . Logger logger = ( ( ch . qos . logback . classic . Logger ) ( org . slf4j . LoggerFactory . getLogger ( this . getClass ( ) ) ) ) ; ch . qos . logback . classic . Logger root = ( ( ch . qos . logback . classic . Logger ) ( org . slf4j . LoggerFactory . getLogger ( Logger . ROOT_LOGGER_NAME ) ) ) ; ch . qos . logback . core . read . ListAppender < ch . qos . logback . classic . spi . ILoggingEvent > la = ( ( ch . qos . logback . core . read . ListAppender < ch . qos . logback . classic . spi . ILoggingEvent > ) ( root . getAppender ( \"LIST\" ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( la )", "total": "smoke ( ) { @ ch . qos . logback . classic . util . SuppressWarnings ( \"unused\" ) ch . qos . logback . classic . Logger logger = ( ( ch . qos . logback . classic . Logger ) ( org . slf4j . LoggerFactory . getLogger ( this . getClass ( ) ) ) ) ; ch . qos . logback . classic . Logger root = ( ( ch . qos . logback . classic . Logger ) ( org . slf4j . LoggerFactory . getLogger ( Logger . ROOT_LOGGER_NAME ) ) ) ; ch . qos . logback . core . read . ListAppender < ch . qos . logback . classic . spi . ILoggingEvent > la = ( ( ch . qos . logback . core . read . ListAppender < ch . qos . logback . classic . spi . ILoggingEvent > ) ( root . getAppender ( \"LIST\" ) ) ) ; \"<AssertPlaceHolder>\" ; } getAppender ( java . lang . String ) { if ( name == null ) { return null ; } for ( ch . qos . logback . core . Appender < E > appender : appenderList ) { if ( name . equals ( appender . getName ( ) ) ) { return appender ; } } return null ; }", "answer": "org . junit . Assert . assertNotNull ( la )"}
{"focal": "get ( java . lang . String ) { return map . get ( name ) ; }", "testMethod": "getAndUpdateEntityOnDepA ( ) { waitForSync ( ) ; com . google . appengine . api . datastore . Key key = com . google . appengine . api . datastore . KeyFactory . createKey ( \"UPDATE\" , 1 ) ; com . google . appengine . api . datastore . Entity lookup = getService ( ) . get ( key ) ; \"<AssertPlaceHolder>\" ; lookup . setProperty ( \"prop1\" , \"1_2\" ) ; getService ( ) . put ( lookup ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( lookup )", "total": "getAndUpdateEntityOnDepA ( ) { waitForSync ( ) ; com . google . appengine . api . datastore . Key key = com . google . appengine . api . datastore . KeyFactory . createKey ( \"UPDATE\" , 1 ) ; com . google . appengine . api . datastore . Entity lookup = getService ( ) . get ( key ) ; \"<AssertPlaceHolder>\" ; lookup . setProperty ( \"prop1\" , \"1_2\" ) ; getService ( ) . put ( lookup ) ; } get ( java . lang . String ) { return map . get ( name ) ; }", "answer": "org . junit . Assert . assertNotNull ( lookup )"}
{"focal": "getEventHeaderDeclaration ( ) { return fEventHeaderDecl ; }", "testMethod": "testGetEventHeaderDecl ( ) { org . eclipse . tracecompass . ctf . core . event . types . IDeclaration eventHeaderDecl = fixture . getEventHeaderDeclaration ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( eventHeaderDecl )", "total": "testGetEventHeaderDecl ( ) { org . eclipse . tracecompass . ctf . core . event . types . IDeclaration eventHeaderDecl = fixture . getEventHeaderDeclaration ( ) ; \"<AssertPlaceHolder>\" ; } getEventHeaderDeclaration ( ) { return fEventHeaderDecl ; }", "answer": "org . junit . Assert . assertNotNull ( eventHeaderDecl )"}
{"focal": "get ( org . spf4j . base . Tag ) { java . lang . Object res = baggage . get ( key ) ; if ( res == null ) { if ( ( source ) != null ) { return source . get ( key ) ; } else { return null ; } } else { return ( ( T ) ( res ) ) ; } }", "testMethod": "testCompositeDataSupport ( ) { org . spf4j . jmx . JMXBeanMapping get = conv . get ( javax . management . openmbean . CompositeDataSupport . class ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( get )", "total": "testCompositeDataSupport ( ) { org . spf4j . jmx . JMXBeanMapping get = conv . get ( javax . management . openmbean . CompositeDataSupport . class ) ; \"<AssertPlaceHolder>\" ; } get ( org . spf4j . base . Tag ) { java . lang . Object res = baggage . get ( key ) ; if ( res == null ) { if ( ( source ) != null ) { return source . get ( key ) ; } else { return null ; } } else { return ( ( T ) ( res ) ) ; } }", "answer": "org . junit . Assert . assertNotNull ( get )"}
{"focal": "getChildren ( org . sagebionetworks . repo . model . UserInfo , org . sagebionetworks . repo . model . EntityChildrenRequest ) { org . sagebionetworks . util . ValidateArgument . required ( user , \"UserInfo\" ) ; org . sagebionetworks . util . ValidateArgument . required ( request , \"EntityChildrenRequest\" ) ; if ( ( request . getParentId ( ) ) == null ) { request . setParentId ( org . sagebionetworks . repo . manager . EntityManagerImpl . ROOT_ID ) ; request . setIncludeTypes ( org . sagebionetworks . repo . manager . EntityManagerImpl . PROJECT_ONLY ) ; } org . sagebionetworks . util . ValidateArgument . required ( request . getIncludeTypes ( ) , \"EntityChildrenRequest.includeTypes\" ) ; if ( request . getIncludeTypes ( ) . isEmpty ( ) ) { throw new java . lang . IllegalArgumentException ( \"EntityChildrenRequest.includeTypes<sp>must<sp>include<sp>at<sp>least<sp>one<sp>type\" ) ; } if ( ( request . getSortBy ( ) ) == null ) { request . setSortBy ( org . sagebionetworks . repo . manager . EntityManagerImpl . DEFAULT_SORT_BY ) ; } if ( ( request . getSortDirection ( ) ) == null ) { request . setSortDirection ( org . sagebionetworks . repo . manager . EntityManagerImpl . DEFAULT_SORT_DIRECTION ) ; } if ( ! ( org . sagebionetworks . repo . manager . EntityManagerImpl . ROOT_ID . equals ( request . getParentId ( ) ) ) ) { org . sagebionetworks . repo . manager . AuthorizationManagerUtil . checkAuthorizationAndThrowException ( entityPermissionsManager . hasAccess ( request . getParentId ( ) , ACCESS_TYPE . READ , user ) ) ; } java . util . Set < java . lang . Long > childIdsToExclude = entityPermissionsManager . getNonvisibleChildren ( user , request . getParentId ( ) ) ; org . sagebionetworks . repo . model . NextPageToken nextPage = new org . sagebionetworks . repo . model . NextPageToken ( request . getNextPageToken ( ) ) ; java . util . List < org . sagebionetworks . repo . model . EntityHeader > page = nodeManager . getChildren ( request . getParentId ( ) , request . getIncludeTypes ( ) , childIdsToExclude , request . getSortBy ( ) , request . getSortDirection ( ) , nextPage . getLimitForQuery ( ) , nextPage . getOffset ( ) ) ; org . sagebionetworks . repo . model . file . ChildStatsResponse stats = nodeManager . getChildrenStats ( new org . sagebionetworks . repo . model . file . ChildStatsRequest ( ) . withParentId ( request . getParentId ( ) ) . withIncludeTypes ( request . getIncludeTypes ( ) ) . withChildIdsToExclude ( childIdsToExclude ) . withIncludeTotalChildCount ( request . getIncludeTotalChildCount ( ) ) . withIncludeSumFileSizes ( request . getIncludeSumFileSizes ( ) ) ) ; org . sagebionetworks . repo . model . EntityChildrenResponse response = new org . sagebionetworks . repo . model . EntityChildrenResponse ( ) ; response . setPage ( page ) ; response . setNextPageToken ( nextPage . getNextPageTokenForCurrentResults ( page ) ) ; response . setTotalChildCount ( stats . getTotalChildCount ( ) ) ; response . setSumFileSizesBytes ( stats . getSumFileSizesBytes ( ) ) ; return response ; }", "testMethod": "testGetChildrenNullParentId ( ) { childRequest . setParentId ( null ) ; childRequest . setIncludeTypes ( null ) ; org . sagebionetworks . repo . model . EntityChildrenResponse response = entityManager . getChildren ( mockUser , childRequest ) ; \"<AssertPlaceHolder>\" ; verify ( mockPermissionsManager , never ( ) ) . hasAccess ( anyString ( ) , any ( org . sagebionetworks . repo . model . ACCESS_TYPE . class ) , any ( org . sagebionetworks . repo . model . UserInfo . class ) ) ; verify ( mockPermissionsManager ) . getNonvisibleChildren ( mockUser , EntityManagerImpl . ROOT_ID ) ; verify ( mockNodeManager ) . getChildren ( EntityManagerImpl . ROOT_ID , EntityManagerImpl . PROJECT_ONLY , new java . util . HashSet < java . lang . Long > ( ) , SortBy . NAME , Direction . ASC , ( ( org . sagebionetworks . repo . model . NextPageToken . DEFAULT_LIMIT ) + 1 ) , NextPageToken . DEFAULT_OFFSET ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( response )", "total": "testGetChildrenNullParentId ( ) { childRequest . setParentId ( null ) ; childRequest . setIncludeTypes ( null ) ; org . sagebionetworks . repo . model . EntityChildrenResponse response = entityManager . getChildren ( mockUser , childRequest ) ; \"<AssertPlaceHolder>\" ; verify ( mockPermissionsManager , never ( ) ) . hasAccess ( anyString ( ) , any ( org . sagebionetworks . repo . model . ACCESS_TYPE . class ) , any ( org . sagebionetworks . repo . model . UserInfo . class ) ) ; verify ( mockPermissionsManager ) . getNonvisibleChildren ( mockUser , EntityManagerImpl . ROOT_ID ) ; verify ( mockNodeManager ) . getChildren ( EntityManagerImpl . ROOT_ID , EntityManagerImpl . PROJECT_ONLY , new java . util . HashSet < java . lang . Long > ( ) , SortBy . NAME , Direction . ASC , ( ( org . sagebionetworks . repo . model . NextPageToken . DEFAULT_LIMIT ) + 1 ) , NextPageToken . DEFAULT_OFFSET ) ; } getChildren ( org . sagebionetworks . repo . model . UserInfo , org . sagebionetworks . repo . model . EntityChildrenRequest ) { org . sagebionetworks . util . ValidateArgument . required ( user , \"UserInfo\" ) ; org . sagebionetworks . util . ValidateArgument . required ( request , \"EntityChildrenRequest\" ) ; if ( ( request . getParentId ( ) ) == null ) { request . setParentId ( org . sagebionetworks . repo . manager . EntityManagerImpl . ROOT_ID ) ; request . setIncludeTypes ( org . sagebionetworks . repo . manager . EntityManagerImpl . PROJECT_ONLY ) ; } org . sagebionetworks . util . ValidateArgument . required ( request . getIncludeTypes ( ) , \"EntityChildrenRequest.includeTypes\" ) ; if ( request . getIncludeTypes ( ) . isEmpty ( ) ) { throw new java . lang . IllegalArgumentException ( \"EntityChildrenRequest.includeTypes<sp>must<sp>include<sp>at<sp>least<sp>one<sp>type\" ) ; } if ( ( request . getSortBy ( ) ) == null ) { request . setSortBy ( org . sagebionetworks . repo . manager . EntityManagerImpl . DEFAULT_SORT_BY ) ; } if ( ( request . getSortDirection ( ) ) == null ) { request . setSortDirection ( org . sagebionetworks . repo . manager . EntityManagerImpl . DEFAULT_SORT_DIRECTION ) ; } if ( ! ( org . sagebionetworks . repo . manager . EntityManagerImpl . ROOT_ID . equals ( request . getParentId ( ) ) ) ) { org . sagebionetworks . repo . manager . AuthorizationManagerUtil . checkAuthorizationAndThrowException ( entityPermissionsManager . hasAccess ( request . getParentId ( ) , ACCESS_TYPE . READ , user ) ) ; } java . util . Set < java . lang . Long > childIdsToExclude = entityPermissionsManager . getNonvisibleChildren ( user , request . getParentId ( ) ) ; org . sagebionetworks . repo . model . NextPageToken nextPage = new org . sagebionetworks . repo . model . NextPageToken ( request . getNextPageToken ( ) ) ; java . util . List < org . sagebionetworks . repo . model . EntityHeader > page = nodeManager . getChildren ( request . getParentId ( ) , request . getIncludeTypes ( ) , childIdsToExclude , request . getSortBy ( ) , request . getSortDirection ( ) , nextPage . getLimitForQuery ( ) , nextPage . getOffset ( ) ) ; org . sagebionetworks . repo . model . file . ChildStatsResponse stats = nodeManager . getChildrenStats ( new org . sagebionetworks . repo . model . file . ChildStatsRequest ( ) . withParentId ( request . getParentId ( ) ) . withIncludeTypes ( request . getIncludeTypes ( ) ) . withChildIdsToExclude ( childIdsToExclude ) . withIncludeTotalChildCount ( request . getIncludeTotalChildCount ( ) ) . withIncludeSumFileSizes ( request . getIncludeSumFileSizes ( ) ) ) ; org . sagebionetworks . repo . model . EntityChildrenResponse response = new org . sagebionetworks . repo . model . EntityChildrenResponse ( ) ; response . setPage ( page ) ; response . setNextPageToken ( nextPage . getNextPageTokenForCurrentResults ( page ) ) ; response . setTotalChildCount ( stats . getTotalChildCount ( ) ) ; response . setSumFileSizesBytes ( stats . getSumFileSizesBytes ( ) ) ; return response ; }", "answer": "org . junit . Assert . assertNotNull ( response )"}
{"focal": "close ( ) { irodsSession . closeSession ( ) ; }", "testMethod": "testGetIRODSFileFactory ( ) { org . irods . jargon . core . pub . IRODSFileSystem irodsFileSystem = org . irods . jargon . core . pub . IRODSFileSystem . instance ( ) ; org . irods . jargon . core . connection . IRODSAccount irodsAccount = org . irods . jargon . core . pub . IRODSFileSystemTest . testingPropertiesHelper . buildIRODSAccountFromTestProperties ( org . irods . jargon . core . pub . IRODSFileSystemTest . testingProperties ) ; org . irods . jargon . core . pub . io . IRODSFileFactory irodsFileFactory = irodsFileSystem . getIRODSFileFactory ( irodsAccount ) ; irodsFileSystem . close ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( irodsFileFactory )", "total": "testGetIRODSFileFactory ( ) { org . irods . jargon . core . pub . IRODSFileSystem irodsFileSystem = org . irods . jargon . core . pub . IRODSFileSystem . instance ( ) ; org . irods . jargon . core . connection . IRODSAccount irodsAccount = org . irods . jargon . core . pub . IRODSFileSystemTest . testingPropertiesHelper . buildIRODSAccountFromTestProperties ( org . irods . jargon . core . pub . IRODSFileSystemTest . testingProperties ) ; org . irods . jargon . core . pub . io . IRODSFileFactory irodsFileFactory = irodsFileSystem . getIRODSFileFactory ( irodsAccount ) ; irodsFileSystem . close ( ) ; \"<AssertPlaceHolder>\" ; } close ( ) { irodsSession . closeSession ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( irodsFileFactory )"}
{"focal": "getData ( ) { return results ; }", "testMethod": "testValidCreate ( ) { com . shippo . model . RateCollection testObject = ( ( com . shippo . model . RateCollection ) ( com . shippo . model . RateTest . getDefaultObject ( ) ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( testObject . getData ( ) )", "total": "testValidCreate ( ) { com . shippo . model . RateCollection testObject = ( ( com . shippo . model . RateCollection ) ( com . shippo . model . RateTest . getDefaultObject ( ) ) ) ; \"<AssertPlaceHolder>\" ; } getData ( ) { return results ; }", "answer": "org . junit . Assert . assertNotNull ( testObject . getData ( ) )"}
{"focal": "createMQWrapper ( ) { return at . ac . tuwien . infosys . jcloudscale . configuration . JCloudScaleConfiguration . createMQWrapper ( at . ac . tuwien . infosys . jcloudscale . configuration . JCloudScaleConfiguration . getConfiguration ( ) ) ; }", "testMethod": "testTopic ( ) { try { mq . createTopicProducer ( \"tmpIn\" ) ; mq . createTopicConsumer ( \"tmpOut\" ) ; javax . jms . MessageListener listener = new javax . jms . MessageListener ( ) { at . ac . tuwien . infosys . jcloudscale . messaging . IMQWrapper responder = at . ac . tuwien . infosys . jcloudscale . configuration . JCloudScaleConfiguration . createMQWrapper ( ) ; @ at . ac . tuwien . infosys . jcloudscale . test . unit . Override public void onMessage ( javax . jms . Message msg ) { try { javax . jms . Destination dest ; dest = msg . getJMSReplyTo ( ) ; responder . respond ( new at . ac . tuwien . infosys . jcloudscale . messaging . objects . ui . ListServersResponse ( ) , dest ) ; } catch ( javax . jms . JMSException e ) { e . printStackTrace ( ) ; } finally { responder . close ( ) ; } } } ; at . ac . tuwien . infosys . jcloudscale . messaging . IMQWrapper serverSim = at . ac . tuwien . infosys . jcloudscale . configuration . JCloudScaleConfiguration . createMQWrapper ( ) ; try { serverSim . createTopicConsumer ( \"tmpIn\" ) ; serverSim . registerListener ( listener ) ; at . ac . tuwien . infosys . jcloudscale . messaging . objects . MessageObject resp = mq . requestResponse ( new at . ac . tuwien . infosys . jcloudscale . messaging . objects . ui . ListServersRequest ( ) ) ; \"<AssertPlaceHolder>\" ; } finally { serverSim . disconnect ( ) ; } } finally { mq . disconnect ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( resp )", "total": "testTopic ( ) { try { mq . createTopicProducer ( \"tmpIn\" ) ; mq . createTopicConsumer ( \"tmpOut\" ) ; javax . jms . MessageListener listener = new javax . jms . MessageListener ( ) { at . ac . tuwien . infosys . jcloudscale . messaging . IMQWrapper responder = at . ac . tuwien . infosys . jcloudscale . configuration . JCloudScaleConfiguration . createMQWrapper ( ) ; @ at . ac . tuwien . infosys . jcloudscale . test . unit . Override public void onMessage ( javax . jms . Message msg ) { try { javax . jms . Destination dest ; dest = msg . getJMSReplyTo ( ) ; responder . respond ( new at . ac . tuwien . infosys . jcloudscale . messaging . objects . ui . ListServersResponse ( ) , dest ) ; } catch ( javax . jms . JMSException e ) { e . printStackTrace ( ) ; } finally { responder . close ( ) ; } } } ; at . ac . tuwien . infosys . jcloudscale . messaging . IMQWrapper serverSim = at . ac . tuwien . infosys . jcloudscale . configuration . JCloudScaleConfiguration . createMQWrapper ( ) ; try { serverSim . createTopicConsumer ( \"tmpIn\" ) ; serverSim . registerListener ( listener ) ; at . ac . tuwien . infosys . jcloudscale . messaging . objects . MessageObject resp = mq . requestResponse ( new at . ac . tuwien . infosys . jcloudscale . messaging . objects . ui . ListServersRequest ( ) ) ; \"<AssertPlaceHolder>\" ; } finally { serverSim . disconnect ( ) ; } } finally { mq . disconnect ( ) ; } } createMQWrapper ( ) { return at . ac . tuwien . infosys . jcloudscale . configuration . JCloudScaleConfiguration . createMQWrapper ( at . ac . tuwien . infosys . jcloudscale . configuration . JCloudScaleConfiguration . getConfiguration ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( resp )"}
{"focal": "getCssRuleSets ( com . itextpdf . styledxmlparser . node . INode , com . itextpdf . styledxmlparser . css . media . MediaDeviceDescription ) { if ( selector . matches ( element ) ) { return java . util . Collections . singletonList ( this ) ; } else { return super . getCssRuleSets ( element , deviceDescription ) ; } }", "testMethod": "getCssRuleSetsTest ( ) { com . itextpdf . styledxmlparser . css . media . MediaDeviceDescription deviceDescription = new com . itextpdf . styledxmlparser . css . media . MediaDeviceDescription ( \"all\" ) ; java . lang . String html = \"<a<sp>id=\\\"123\\\"<sp>class=\\\"baz<sp>=<sp>\\'bar\\'\\\"<sp>style<sp>=<sp>media=<sp>all<sp>and<sp>(min-width:<sp>600px)<sp>/>\" ; com . itextpdf . styledxmlparser . node . IDocumentNode node = new com . itextpdf . styledxmlparser . node . impl . jsoup . JsoupHtmlParser ( ) . parse ( html ) ; java . util . List < com . itextpdf . styledxmlparser . css . CssRuleSet > ruleSets = new com . itextpdf . styledxmlparser . css . media . CssMediaRule ( \"only<sp>all<sp>and<sp>(min-width:<sp>600px)<sp>and<sp>(min-height:<sp>600px)\" ) . getCssRuleSets ( node , deviceDescription ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( ruleSets )", "total": "getCssRuleSetsTest ( ) { com . itextpdf . styledxmlparser . css . media . MediaDeviceDescription deviceDescription = new com . itextpdf . styledxmlparser . css . media . MediaDeviceDescription ( \"all\" ) ; java . lang . String html = \"<a<sp>id=\\\"123\\\"<sp>class=\\\"baz<sp>=<sp>\\'bar\\'\\\"<sp>style<sp>=<sp>media=<sp>all<sp>and<sp>(min-width:<sp>600px)<sp>/>\" ; com . itextpdf . styledxmlparser . node . IDocumentNode node = new com . itextpdf . styledxmlparser . node . impl . jsoup . JsoupHtmlParser ( ) . parse ( html ) ; java . util . List < com . itextpdf . styledxmlparser . css . CssRuleSet > ruleSets = new com . itextpdf . styledxmlparser . css . media . CssMediaRule ( \"only<sp>all<sp>and<sp>(min-width:<sp>600px)<sp>and<sp>(min-height:<sp>600px)\" ) . getCssRuleSets ( node , deviceDescription ) ; \"<AssertPlaceHolder>\" ; } getCssRuleSets ( com . itextpdf . styledxmlparser . node . INode , com . itextpdf . styledxmlparser . css . media . MediaDeviceDescription ) { if ( selector . matches ( element ) ) { return java . util . Collections . singletonList ( this ) ; } else { return super . getCssRuleSets ( element , deviceDescription ) ; } }", "answer": "org . junit . Assert . assertNotNull ( ruleSets )"}
{"focal": "getCpt ( ) { return cpt ; }", "testMethod": "convertOrderfulfilmentFromYAWLToPNML ( ) { org . apromore . service . model . CanonisedProcess oFCanonised = canoniseYAWLModel ( \"YAWL_models/orderfulfillment.yawl\" , \"YAWL_models/orderfulfillment.ybkp\" ) ; org . apromore . service . model . DecanonisedProcess decanonisedPNML = cSrv . deCanonise ( \"PNML<sp>1.3.2\" , oFCanonised . getCpt ( ) , null , new java . util . HashSet < org . apromore . plugin . property . RequestParameterType < ? > > ( ) ) ; \"<AssertPlaceHolder>\" ; if ( org . apromore . service . impl . CanoniserServiceImplIntgTest . LOGGER . isDebugEnabled ( ) ) { saveDecanonisedProcess ( decanonisedPNML , \"OrderFulfillment.pnml\" ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( decanonisedPNML )", "total": "convertOrderfulfilmentFromYAWLToPNML ( ) { org . apromore . service . model . CanonisedProcess oFCanonised = canoniseYAWLModel ( \"YAWL_models/orderfulfillment.yawl\" , \"YAWL_models/orderfulfillment.ybkp\" ) ; org . apromore . service . model . DecanonisedProcess decanonisedPNML = cSrv . deCanonise ( \"PNML<sp>1.3.2\" , oFCanonised . getCpt ( ) , null , new java . util . HashSet < org . apromore . plugin . property . RequestParameterType < ? > > ( ) ) ; \"<AssertPlaceHolder>\" ; if ( org . apromore . service . impl . CanoniserServiceImplIntgTest . LOGGER . isDebugEnabled ( ) ) { saveDecanonisedProcess ( decanonisedPNML , \"OrderFulfillment.pnml\" ) ; } } getCpt ( ) { return cpt ; }", "answer": "org . junit . Assert . assertNotNull ( decanonisedPNML )"}
{"focal": "buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "testMethod": "testCreateCodedResultsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ihe . CodedResultsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ihe . builder . IHEBuilderFactory . createCodedResultsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ihe . CodedResultsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( section )", "total": "testCreateCodedResultsSectionBuilder ( ) { org . openhealthtools . mdht . uml . cda . builder . SectionBuilder < org . openhealthtools . mdht . uml . cda . ihe . CodedResultsSection > sectionBuilder = org . openhealthtools . mdht . uml . cda . ihe . builder . IHEBuilderFactory . createCodedResultsSectionBuilder ( ) ; org . openhealthtools . mdht . uml . cda . ihe . CodedResultsSection section = sectionBuilder . buildSection ( ) ; \"<AssertPlaceHolder>\" ; Diagnostician . INSTANCE . validate ( section ) ; org . openhealthtools . mdht . uml . cda . util . CDAUtil . saveSnippet ( section , System . out ) ; } buildSection ( ) { org . openhealthtools . mdht . uml . cda . Section section = CDAFactory . eINSTANCE . createSection ( ) ; construct ( section ) ; return section ; }", "answer": "org . junit . Assert . assertNotNull ( section )"}
{"focal": "getCpuInfo ( java . lang . String ) { if ( ! ( serverConnector . getNodeMap ( ) . containsKey ( host_id ) ) ) throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . NOT_FOUND . getStatusCode ( ) , \"Invalid<sp>Request\" , ( \"Can't<sp>find<sp>host<sp>with<sp>id<sp>\" + host_id ) ) ; else { com . vmware . vrack . hms . common . servernodes . api . ServerNode node = ( ( com . vmware . vrack . hms . common . servernodes . api . ServerNode ) ( serverConnector . getNodeMap ( ) . get ( host_id ) ) ) ; if ( ( ( ( node . getCpuInfo ( ) ) != null ) && ( ( node . getCpuInfo ( ) . size ( ) ) > 0 ) ) && ( useServerInfoCache ) ) return node . getCpuInfo ( ) ; try { executeTask ( node , TaskType . RmmCPUInfo ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsResourceBusyException e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , com . vmware . vrack . hms . common . util . Constants . RESOURCE_BUSY , e . getMessage ( ) ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsException e ) { if ( e instanceof com . vmware . vrack . hms . common . exception . HMSRestException ) { throw e ; } else { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } } catch ( java . lang . Exception e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } return node . getCpuInfo ( ) ; } }", "testMethod": "getCpuInfo_nodeNotInNodeMap ( ) { com . vmware . vrack . hms . rest . services . ServerRestServiceTest . clearNodeMapAndBoardService ( ) ; com . vmware . vrack . hms . rest . services . ServerRestService restService = new com . vmware . vrack . hms . rest . services . ServerRestService ( ) ; java . util . List < com . vmware . vrack . hms . common . servernodes . api . cpu . CPUInfo > cpuInfos = restService . getCpuInfo ( \"N1\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( cpuInfos )", "total": "getCpuInfo_nodeNotInNodeMap ( ) { com . vmware . vrack . hms . rest . services . ServerRestServiceTest . clearNodeMapAndBoardService ( ) ; com . vmware . vrack . hms . rest . services . ServerRestService restService = new com . vmware . vrack . hms . rest . services . ServerRestService ( ) ; java . util . List < com . vmware . vrack . hms . common . servernodes . api . cpu . CPUInfo > cpuInfos = restService . getCpuInfo ( \"N1\" ) ; \"<AssertPlaceHolder>\" ; } getCpuInfo ( java . lang . String ) { if ( ! ( serverConnector . getNodeMap ( ) . containsKey ( host_id ) ) ) throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . NOT_FOUND . getStatusCode ( ) , \"Invalid<sp>Request\" , ( \"Can't<sp>find<sp>host<sp>with<sp>id<sp>\" + host_id ) ) ; else { com . vmware . vrack . hms . common . servernodes . api . ServerNode node = ( ( com . vmware . vrack . hms . common . servernodes . api . ServerNode ) ( serverConnector . getNodeMap ( ) . get ( host_id ) ) ) ; if ( ( ( ( node . getCpuInfo ( ) ) != null ) && ( ( node . getCpuInfo ( ) . size ( ) ) > 0 ) ) && ( useServerInfoCache ) ) return node . getCpuInfo ( ) ; try { executeTask ( node , TaskType . RmmCPUInfo ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsResourceBusyException e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , com . vmware . vrack . hms . common . util . Constants . RESOURCE_BUSY , e . getMessage ( ) ) ; } catch ( com . vmware . vrack . hms . common . exception . HmsException e ) { if ( e instanceof com . vmware . vrack . hms . common . exception . HMSRestException ) { throw e ; } else { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } } catch ( java . lang . Exception e ) { throw new com . vmware . vrack . hms . common . exception . HMSRestException ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"Server<sp>Error\" , e . getMessage ( ) ) ; } return node . getCpuInfo ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( cpuInfos )"}
{"focal": "getRuntimeInfo ( org . talend . components . service . rest . mock . MockDatastoreProperties ) { return new org . talend . components . api . component . runtime . SimpleRuntimeInfo ( getClass ( ) . getClassLoader ( ) , \"\" , runtimeClass . getName ( ) ) ; }", "testMethod": "testGetRuntimeInfo ( ) { org . talend . components . jdbc . runtime . setting . AllSetting allSetting = org . mockito . Mockito . mock ( org . talend . components . jdbc . runtime . setting . AllSetting . class ) ; org . mockito . Mockito . when ( allSetting . getDriverClass ( ) ) . thenReturn ( \"anyDriverClass\" ) ; org . talend . components . jdbc . dataset . JDBCDatasetProperties properties = org . mockito . Mockito . mock ( org . talend . components . jdbc . dataset . JDBCDatasetProperties . class ) ; org . mockito . Mockito . when ( properties . getRuntimeSetting ( ) ) . thenReturn ( allSetting ) ; org . talend . components . jdbc . dataset . JDBCDatasetDefinition fixture = new org . talend . components . jdbc . dataset . JDBCDatasetDefinition ( ) ; org . talend . daikon . runtime . RuntimeInfo result = fixture . getRuntimeInfo ( properties ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( result )", "total": "testGetRuntimeInfo ( ) { org . talend . components . jdbc . runtime . setting . AllSetting allSetting = org . mockito . Mockito . mock ( org . talend . components . jdbc . runtime . setting . AllSetting . class ) ; org . mockito . Mockito . when ( allSetting . getDriverClass ( ) ) . thenReturn ( \"anyDriverClass\" ) ; org . talend . components . jdbc . dataset . JDBCDatasetProperties properties = org . mockito . Mockito . mock ( org . talend . components . jdbc . dataset . JDBCDatasetProperties . class ) ; org . mockito . Mockito . when ( properties . getRuntimeSetting ( ) ) . thenReturn ( allSetting ) ; org . talend . components . jdbc . dataset . JDBCDatasetDefinition fixture = new org . talend . components . jdbc . dataset . JDBCDatasetDefinition ( ) ; org . talend . daikon . runtime . RuntimeInfo result = fixture . getRuntimeInfo ( properties ) ; \"<AssertPlaceHolder>\" ; } getRuntimeInfo ( org . talend . components . service . rest . mock . MockDatastoreProperties ) { return new org . talend . components . api . component . runtime . SimpleRuntimeInfo ( getClass ( ) . getClassLoader ( ) , \"\" , runtimeClass . getName ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( result )"}
{"focal": "getConsumable ( ) { return consumable ; }", "testMethod": "consumableTest ( ) { org . marc . everest . rmim . uv . cdar2 . pocd_mt000040uv . Consumable consumable = org . oscarehr . e2e . model . export . body . ImmunizationsModelTest . immunizationsModel . getConsumable ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( consumable )", "total": "consumableTest ( ) { org . marc . everest . rmim . uv . cdar2 . pocd_mt000040uv . Consumable consumable = org . oscarehr . e2e . model . export . body . ImmunizationsModelTest . immunizationsModel . getConsumable ( ) ; \"<AssertPlaceHolder>\" ; } getConsumable ( ) { return consumable ; }", "answer": "org . junit . Assert . assertNotNull ( consumable )"}
{"focal": "getBundleContext ( ) { return getFramework ( ) . getBundleContext ( ) ; }", "testMethod": "testRegisterServiceErrors ( ) { java . lang . String OBJCLASS = org . osgi . framework . BundleContext . class . getName ( ) ; java . lang . String [ ] OBJCLASSES = new java . lang . String [ ] { OBJCLASS } ; org . osgi . framework . Bundle bundle = installBundle ( getBundleArchiveA ( ) ) ; try { bundle . start ( ) ; org . osgi . framework . BundleContext bundleContext = bundle . getBundleContext ( ) ; \"<AssertPlaceHolder>\" ; try { bundleContext . registerService ( ( ( java . lang . String ) ( null ) ) , new java . lang . Object ( ) , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( ( ( java . lang . String [ ] ) ( null ) ) , new java . lang . Object ( ) , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( new java . lang . String [ 0 ] , new java . lang . Object ( ) , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( OBJCLASS , null , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( OBJCLASSES , null , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( OBJCLASS , new java . lang . Object ( ) , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( OBJCLASSES , new java . lang . Object ( ) , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } java . util . Dictionary < java . lang . String , java . lang . Object > properties = new java . util . Hashtable < java . lang . String , java . lang . Object > ( ) ; properties . put ( \"case\" , \"a\" ) ; properties . put ( \"CASE\" , \"a\" ) ; try { bundleContext . registerService ( OBJCLASS , bundleContext , properties ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( OBJCLASSES , bundleContext , properties ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } bundle . stop ( ) ; try { bundleContext . registerService ( OBJCLASS , bundleContext , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalStateException t ) { } try { bundleContext . registerService ( OBJCLASSES , bundleContext , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalStateException t ) { } } finally { bundle . uninstall ( ) ; } }", "assertLine": "org . junit . Assert . assertNotNull ( bundleContext )", "total": "testRegisterServiceErrors ( ) { java . lang . String OBJCLASS = org . osgi . framework . BundleContext . class . getName ( ) ; java . lang . String [ ] OBJCLASSES = new java . lang . String [ ] { OBJCLASS } ; org . osgi . framework . Bundle bundle = installBundle ( getBundleArchiveA ( ) ) ; try { bundle . start ( ) ; org . osgi . framework . BundleContext bundleContext = bundle . getBundleContext ( ) ; \"<AssertPlaceHolder>\" ; try { bundleContext . registerService ( ( ( java . lang . String ) ( null ) ) , new java . lang . Object ( ) , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( ( ( java . lang . String [ ] ) ( null ) ) , new java . lang . Object ( ) , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( new java . lang . String [ 0 ] , new java . lang . Object ( ) , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( OBJCLASS , null , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( OBJCLASSES , null , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( OBJCLASS , new java . lang . Object ( ) , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( OBJCLASSES , new java . lang . Object ( ) , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } java . util . Dictionary < java . lang . String , java . lang . Object > properties = new java . util . Hashtable < java . lang . String , java . lang . Object > ( ) ; properties . put ( \"case\" , \"a\" ) ; properties . put ( \"CASE\" , \"a\" ) ; try { bundleContext . registerService ( OBJCLASS , bundleContext , properties ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } try { bundleContext . registerService ( OBJCLASSES , bundleContext , properties ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalArgumentException t ) { } bundle . stop ( ) ; try { bundleContext . registerService ( OBJCLASS , bundleContext , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalStateException t ) { } try { bundleContext . registerService ( OBJCLASSES , bundleContext , null ) ; org . junit . Assert . fail ( \"Should<sp>not<sp>be<sp>here!\" ) ; } catch ( java . lang . IllegalStateException t ) { } } finally { bundle . uninstall ( ) ; } } getBundleContext ( ) { return getFramework ( ) . getBundleContext ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( bundleContext )"}
{"focal": "saveState ( javax . faces . context . FacesContext ) { if ( context == null ) { throw new java . lang . NullPointerException ( ) ; } if ( initialStateMarked ( ) ) { java . lang . Object superState = super . saveState ( context ) ; if ( superState == null ) { return null ; } else { return new java . lang . Object [ ] { superState } ; } } else { java . lang . Object [ ] values = new java . lang . Object [ 2 ] ; values [ 0 ] = super . saveState ( context ) ; values [ 1 ] = name ; return values ; } }", "testMethod": "testSaveState3 ( ) { javax . faces . context . FacesContext context = org . easymock . EasyMock . createMock ( javax . faces . context . FacesContext . class ) ; javax . faces . component . UIData data = new javax . faces . component . UIData ( ) ; data . markInitialState ( ) ; data . setRowIndex ( 4 ) ; replay ( context ) ; \"<AssertPlaceHolder>\" ; verify ( context ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( data . saveState ( context ) )", "total": "testSaveState3 ( ) { javax . faces . context . FacesContext context = org . easymock . EasyMock . createMock ( javax . faces . context . FacesContext . class ) ; javax . faces . component . UIData data = new javax . faces . component . UIData ( ) ; data . markInitialState ( ) ; data . setRowIndex ( 4 ) ; replay ( context ) ; \"<AssertPlaceHolder>\" ; verify ( context ) ; } saveState ( javax . faces . context . FacesContext ) { if ( context == null ) { throw new java . lang . NullPointerException ( ) ; } if ( initialStateMarked ( ) ) { java . lang . Object superState = super . saveState ( context ) ; if ( superState == null ) { return null ; } else { return new java . lang . Object [ ] { superState } ; } } else { java . lang . Object [ ] values = new java . lang . Object [ 2 ] ; values [ 0 ] = super . saveState ( context ) ; values [ 1 ] = name ; return values ; } }", "answer": "org . junit . Assert . assertNotNull ( data . saveState ( context ) )"}
{"focal": "disMax ( ) { return new com . liferay . portal . search . internal . query . DisMaxQueryImpl ( ) ; }", "testMethod": "testDisMaxQuery ( ) { com . liferay . portal . search . query . DisMaxQuery disMaxQuery = com . liferay . portal . search . query . test . QueriesInstantiationTest . _queries . disMax ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( disMaxQuery )", "total": "testDisMaxQuery ( ) { com . liferay . portal . search . query . DisMaxQuery disMaxQuery = com . liferay . portal . search . query . test . QueriesInstantiationTest . _queries . disMax ( ) ; \"<AssertPlaceHolder>\" ; } disMax ( ) { return new com . liferay . portal . search . internal . query . DisMaxQueryImpl ( ) ; }", "answer": "org . junit . Assert . assertNotNull ( disMaxQuery )"}
{"focal": "geoCentroid ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . aggregation . metrics . GeoCentroidAggregationImpl ( name , field ) ; }", "testMethod": "testGeoCentroidAggregation ( ) { com . liferay . portal . search . aggregation . metrics . GeoCentroidAggregation geoCentroidAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . geoCentroid ( \"name\" , \"field\" ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( geoCentroidAggregation )", "total": "testGeoCentroidAggregation ( ) { com . liferay . portal . search . aggregation . metrics . GeoCentroidAggregation geoCentroidAggregation = com . liferay . portal . search . aggregations . test . AggregationsInstantiationTest . _aggregations . geoCentroid ( \"name\" , \"field\" ) ; \"<AssertPlaceHolder>\" ; } geoCentroid ( java . lang . String , java . lang . String ) { return new com . liferay . portal . search . internal . aggregation . metrics . GeoCentroidAggregationImpl ( name , field ) ; }", "answer": "org . junit . Assert . assertNotNull ( geoCentroidAggregation )"}
{"focal": "getId ( ) { return this . id ; }", "testMethod": "testCreate ( ) { org . oscarehr . common . model . Immunizations entity = new org . oscarehr . common . model . Immunizations ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( entity . getId ( ) )", "total": "testCreate ( ) { org . oscarehr . common . model . Immunizations entity = new org . oscarehr . common . model . Immunizations ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; } getId ( ) { return this . id ; }", "answer": "org . junit . Assert . assertNotNull ( entity . getId ( ) )"}
{"focal": "processLocally ( java . io . File ) { try ( java . io . FileInputStream is = new java . io . FileInputStream ( f ) ) { return processLocally ( is ) ; } catch ( java . io . IOException e ) { throw io . fabric8 . kubernetes . client . KubernetesClientException . launderThrowable ( forOperationType ( \"processLocally\" ) , e ) ; } }", "testMethod": "testEmptyParameterMapValueShouldNotThrowNullPointerException ( ) { server . expect ( ) . withPath ( \"/oapi/v1/namespaces/test/templates/tmpl1\" ) . andReturn ( 200 , new io . fabric8 . openshift . api . model . TemplateBuilder ( ) . withNewMetadata ( ) . withName ( \"tmpl1\" ) . endMetadata ( ) . withParameters ( new io . fabric8 . openshift . api . model . ParameterBuilder ( ) . withName ( \"key\" ) . build ( ) ) . build ( ) ) . once ( ) ; io . fabric8 . openshift . client . OpenShiftClient client = server . getOpenshiftClient ( ) ; java . util . Map < java . lang . String , java . lang . String > emptyValueMap = singletonMap ( \"key\" , \"\" ) ; io . fabric8 . kubernetes . api . model . KubernetesList list = client . templates ( ) . withName ( \"tmpl1\" ) . processLocally ( emptyValueMap ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( list )", "total": "testEmptyParameterMapValueShouldNotThrowNullPointerException ( ) { server . expect ( ) . withPath ( \"/oapi/v1/namespaces/test/templates/tmpl1\" ) . andReturn ( 200 , new io . fabric8 . openshift . api . model . TemplateBuilder ( ) . withNewMetadata ( ) . withName ( \"tmpl1\" ) . endMetadata ( ) . withParameters ( new io . fabric8 . openshift . api . model . ParameterBuilder ( ) . withName ( \"key\" ) . build ( ) ) . build ( ) ) . once ( ) ; io . fabric8 . openshift . client . OpenShiftClient client = server . getOpenshiftClient ( ) ; java . util . Map < java . lang . String , java . lang . String > emptyValueMap = singletonMap ( \"key\" , \"\" ) ; io . fabric8 . kubernetes . api . model . KubernetesList list = client . templates ( ) . withName ( \"tmpl1\" ) . processLocally ( emptyValueMap ) ; \"<AssertPlaceHolder>\" ; } processLocally ( java . io . File ) { try ( java . io . FileInputStream is = new java . io . FileInputStream ( f ) ) { return processLocally ( is ) ; } catch ( java . io . IOException e ) { throw io . fabric8 . kubernetes . client . KubernetesClientException . launderThrowable ( forOperationType ( \"processLocally\" ) , e ) ; } }", "answer": "org . junit . Assert . assertNotNull ( list )"}
{"focal": "setPassword ( java . lang . String ) { this . password = password ; }", "testMethod": "addUserTest ( ) { final com . nva . support . beans . user . UserVO userVO = new com . nva . support . beans . user . UserVO ( ) ; userVO . setUsername ( \"duardito\" ) ; userVO . setPassword ( \"Chascaman69\" ) ; \"<AssertPlaceHolder>\" ; usersServiceInterface . saveUser ( userVO ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( userVO )", "total": "addUserTest ( ) { final com . nva . support . beans . user . UserVO userVO = new com . nva . support . beans . user . UserVO ( ) ; userVO . setUsername ( \"duardito\" ) ; userVO . setPassword ( \"Chascaman69\" ) ; \"<AssertPlaceHolder>\" ; usersServiceInterface . saveUser ( userVO ) ; } setPassword ( java . lang . String ) { this . password = password ; }", "answer": "org . junit . Assert . assertNotNull ( userVO )"}
{"focal": "build ( ) { return new org . apache . http . client . entity . ByteBufHttpEntity ( byteByf , contentLength , getContentType ( ) ) ; }", "testMethod": "builderBuildsSuccessfully ( ) { org . appenders . log4j2 . elasticsearch . JacksonJsonLayout . Builder builder = org . appenders . log4j2 . elasticsearch . JacksonJsonLayout . newBuilder ( ) ; org . appenders . log4j2 . elasticsearch . JacksonJsonLayout layout = builder . build ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( layout )", "total": "builderBuildsSuccessfully ( ) { org . appenders . log4j2 . elasticsearch . JacksonJsonLayout . Builder builder = org . appenders . log4j2 . elasticsearch . JacksonJsonLayout . newBuilder ( ) ; org . appenders . log4j2 . elasticsearch . JacksonJsonLayout layout = builder . build ( ) ; \"<AssertPlaceHolder>\" ; } build ( ) { return new org . apache . http . client . entity . ByteBufHttpEntity ( byteByf , contentLength , getContentType ( ) ) ; }", "answer": "org . junit . Assert . assertNotNull ( layout )"}
{"focal": "createUpgradeRequest ( org . glassfish . tyrus . client . TimeoutHandler ) { switch ( clientEngineState ) { case INIT : { javax . websocket . ClientEndpointConfig config = ( ( javax . websocket . ClientEndpointConfig ) ( endpointWrapper . getEndpointConfig ( ) ) ) ; this . timeoutHandler = timeoutHandler ; clientHandShake = org . glassfish . tyrus . core . Handshake . createClientHandshake ( RequestContext . Builder . create ( ) . requestURI ( connectToServerUriParam ) . secure ( \"wss\" . equals ( connectToServerUriParam . getScheme ( ) ) ) . build ( ) ) ; clientHandShake . setExtensions ( config . getExtensions ( ) ) ; clientHandShake . setSubProtocols ( config . getPreferredSubprotocols ( ) ) ; clientHandShake . prepareRequest ( ) ; org . glassfish . tyrus . spi . UpgradeRequest upgradeRequest = clientHandShake . getRequest ( ) ; config . getConfigurator ( ) . beforeRequest ( upgradeRequest . getHeaders ( ) ) ; clientEngineState = org . glassfish . tyrus . client . TyrusClientEngine . TyrusClientEngineState . UPGRADE_REQUEST_CREATED ; logUpgradeRequest ( upgradeRequest ) ; return upgradeRequest ; } case REDIRECT_REQUIRED : { this . timeoutHandler = timeoutHandler ; final java . net . URI requestUri = redirectLocation ; org . glassfish . tyrus . core . RequestContext requestContext = RequestContext . Builder . create ( clientHandShake . getRequest ( ) ) . requestURI ( requestUri ) . secure ( \"wss\" . equalsIgnoreCase ( requestUri . getScheme ( ) ) ) . build ( ) ; org . glassfish . tyrus . core . Handshake . updateHostAndOrigin ( requestContext ) ; clientEngineState = org . glassfish . tyrus . client . TyrusClientEngine . TyrusClientEngineState . UPGRADE_REQUEST_CREATED ; logUpgradeRequest ( requestContext ) ; return requestContext ; } case AUTH_REQUIRED : { org . glassfish . tyrus . spi . UpgradeRequest upgradeRequest = clientHandShake . getRequest ( ) ; if ( ( clientEngineState . getAuthenticator ( ) ) != null ) { if ( org . glassfish . tyrus . client . TyrusClientEngine . LOGGER . isLoggable ( Level . CONFIG ) ) { debugContext . appendLogMessage ( org . glassfish . tyrus . client . TyrusClientEngine . LOGGER , Level . CONFIG , DebugContext . Type . MESSAGE_OUT , ( \"Using<sp>\" + \"authenticator:<sp>\" ) , clientEngineState . getAuthenticator ( ) . getClass ( ) . getName ( ) ) ; } java . lang . String authorizationHeader ; try { final org . glassfish . tyrus . client . auth . Credentials credentials = ( ( org . glassfish . tyrus . client . auth . Credentials ) ( properties . get ( ClientProperties . CREDENTIALS ) ) ) ; debugContext . appendLogMessage ( org . glassfish . tyrus . client . TyrusClientEngine . LOGGER , Level . CONFIG , DebugContext . Type . MESSAGE_OUT , ( \"Using<sp>\" + \"credentials:<sp>\" ) , credentials ) ; authorizationHeader = clientEngineState . getAuthenticator ( ) . generateAuthorizationHeader ( upgradeRequest . getRequestURI ( ) , clientEngineState . getWwwAuthenticateHeader ( ) , credentials ) ; } catch ( org . glassfish . tyrus . client . auth . AuthenticationException e ) { listener . onError ( e ) ; return null ; } upgradeRequest . getHeaders ( ) . put ( UpgradeRequest . AUTHORIZATION , java . util . Collections . singletonList ( authorizationHeader ) ) ; } clientEngineState = org . glassfish . tyrus . client . TyrusClientEngine . TyrusClientEngineState . AUTH_UPGRADE_REQUEST_CREATED ; logUpgradeRequest ( upgradeRequest ) ; return upgradeRequest ; } default : redirectUriHistory . clear ( ) ; throw new java . lang . IllegalStateException ( ) ; } }", "testMethod": "testErrorFlow2 ( ) { org . glassfish . tyrus . spi . ClientEngine engine = getClientEngine ( java . util . Collections . < java . lang . String , java . lang . Object > emptyMap ( ) ) ; org . glassfish . tyrus . spi . UpgradeRequest upgradeRequest = engine . createUpgradeRequest ( null ) ; \"<AssertPlaceHolder>\" ; engine . processError ( new java . lang . Exception ( ) ) ; try { engine . processResponse ( null , null , null ) ; org . junit . Assert . fail ( \"processResponse<sp>after<sp>processError<sp>must<sp>fail.\" ) ; } catch ( java . lang . IllegalStateException e ) { } }", "assertLine": "org . junit . Assert . assertNotNull ( \"\" , upgradeRequest )", "total": "testErrorFlow2 ( ) { org . glassfish . tyrus . spi . ClientEngine engine = getClientEngine ( java . util . Collections . < java . lang . String , java . lang . Object > emptyMap ( ) ) ; org . glassfish . tyrus . spi . UpgradeRequest upgradeRequest = engine . createUpgradeRequest ( null ) ; \"<AssertPlaceHolder>\" ; engine . processError ( new java . lang . Exception ( ) ) ; try { engine . processResponse ( null , null , null ) ; org . junit . Assert . fail ( \"processResponse<sp>after<sp>processError<sp>must<sp>fail.\" ) ; } catch ( java . lang . IllegalStateException e ) { } } createUpgradeRequest ( org . glassfish . tyrus . client . TimeoutHandler ) { switch ( clientEngineState ) { case INIT : { javax . websocket . ClientEndpointConfig config = ( ( javax . websocket . ClientEndpointConfig ) ( endpointWrapper . getEndpointConfig ( ) ) ) ; this . timeoutHandler = timeoutHandler ; clientHandShake = org . glassfish . tyrus . core . Handshake . createClientHandshake ( RequestContext . Builder . create ( ) . requestURI ( connectToServerUriParam ) . secure ( \"wss\" . equals ( connectToServerUriParam . getScheme ( ) ) ) . build ( ) ) ; clientHandShake . setExtensions ( config . getExtensions ( ) ) ; clientHandShake . setSubProtocols ( config . getPreferredSubprotocols ( ) ) ; clientHandShake . prepareRequest ( ) ; org . glassfish . tyrus . spi . UpgradeRequest upgradeRequest = clientHandShake . getRequest ( ) ; config . getConfigurator ( ) . beforeRequest ( upgradeRequest . getHeaders ( ) ) ; clientEngineState = org . glassfish . tyrus . client . TyrusClientEngine . TyrusClientEngineState . UPGRADE_REQUEST_CREATED ; logUpgradeRequest ( upgradeRequest ) ; return upgradeRequest ; } case REDIRECT_REQUIRED : { this . timeoutHandler = timeoutHandler ; final java . net . URI requestUri = redirectLocation ; org . glassfish . tyrus . core . RequestContext requestContext = RequestContext . Builder . create ( clientHandShake . getRequest ( ) ) . requestURI ( requestUri ) . secure ( \"wss\" . equalsIgnoreCase ( requestUri . getScheme ( ) ) ) . build ( ) ; org . glassfish . tyrus . core . Handshake . updateHostAndOrigin ( requestContext ) ; clientEngineState = org . glassfish . tyrus . client . TyrusClientEngine . TyrusClientEngineState . UPGRADE_REQUEST_CREATED ; logUpgradeRequest ( requestContext ) ; return requestContext ; } case AUTH_REQUIRED : { org . glassfish . tyrus . spi . UpgradeRequest upgradeRequest = clientHandShake . getRequest ( ) ; if ( ( clientEngineState . getAuthenticator ( ) ) != null ) { if ( org . glassfish . tyrus . client . TyrusClientEngine . LOGGER . isLoggable ( Level . CONFIG ) ) { debugContext . appendLogMessage ( org . glassfish . tyrus . client . TyrusClientEngine . LOGGER , Level . CONFIG , DebugContext . Type . MESSAGE_OUT , ( \"Using<sp>\" + \"authenticator:<sp>\" ) , clientEngineState . getAuthenticator ( ) . getClass ( ) . getName ( ) ) ; } java . lang . String authorizationHeader ; try { final org . glassfish . tyrus . client . auth . Credentials credentials = ( ( org . glassfish . tyrus . client . auth . Credentials ) ( properties . get ( ClientProperties . CREDENTIALS ) ) ) ; debugContext . appendLogMessage ( org . glassfish . tyrus . client . TyrusClientEngine . LOGGER , Level . CONFIG , DebugContext . Type . MESSAGE_OUT , ( \"Using<sp>\" + \"credentials:<sp>\" ) , credentials ) ; authorizationHeader = clientEngineState . getAuthenticator ( ) . generateAuthorizationHeader ( upgradeRequest . getRequestURI ( ) , clientEngineState . getWwwAuthenticateHeader ( ) , credentials ) ; } catch ( org . glassfish . tyrus . client . auth . AuthenticationException e ) { listener . onError ( e ) ; return null ; } upgradeRequest . getHeaders ( ) . put ( UpgradeRequest . AUTHORIZATION , java . util . Collections . singletonList ( authorizationHeader ) ) ; } clientEngineState = org . glassfish . tyrus . client . TyrusClientEngine . TyrusClientEngineState . AUTH_UPGRADE_REQUEST_CREATED ; logUpgradeRequest ( upgradeRequest ) ; return upgradeRequest ; } default : redirectUriHistory . clear ( ) ; throw new java . lang . IllegalStateException ( ) ; } }", "answer": "org . junit . Assert . assertNotNull ( \"\" , upgradeRequest )"}
{"focal": "parsePLSQL ( java . lang . String ) { return parsePLSQL ( net . sourceforge . pmd . lang . LanguageRegistry . getLanguage ( PLSQLLanguageModule . NAME ) . getDefaultVersion ( ) , code ) ; }", "testMethod": "parseSelectCount ( ) { java . lang . String code = org . apache . commons . io . IOUtils . toString ( this . getClass ( ) . getResourceAsStream ( \"SelectCount.pls\" ) , StandardCharsets . UTF_8 ) ; net . sourceforge . pmd . lang . plsql . ast . ASTInput input = parsePLSQL ( code ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( input )", "total": "parseSelectCount ( ) { java . lang . String code = org . apache . commons . io . IOUtils . toString ( this . getClass ( ) . getResourceAsStream ( \"SelectCount.pls\" ) , StandardCharsets . UTF_8 ) ; net . sourceforge . pmd . lang . plsql . ast . ASTInput input = parsePLSQL ( code ) ; \"<AssertPlaceHolder>\" ; } parsePLSQL ( java . lang . String ) { return parsePLSQL ( net . sourceforge . pmd . lang . LanguageRegistry . getLanguage ( PLSQLLanguageModule . NAME ) . getDefaultVersion ( ) , code ) ; }", "answer": "org . junit . Assert . assertNotNull ( input )"}
{"focal": "requestData ( com . fiveamsolutions . plc . data . transfer . Filter ) { return patientDataService . getDownloadDetails ( filter ) ; }", "testMethod": "requestData ( ) { com . fiveamsolutions . plc . data . transfer . DownloadDetails details = researcherResource . requestData ( new com . fiveamsolutions . plc . data . transfer . Filter ( ) ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( details )", "total": "requestData ( ) { com . fiveamsolutions . plc . data . transfer . DownloadDetails details = researcherResource . requestData ( new com . fiveamsolutions . plc . data . transfer . Filter ( ) ) ; \"<AssertPlaceHolder>\" ; } requestData ( com . fiveamsolutions . plc . data . transfer . Filter ) { return patientDataService . getDownloadDetails ( filter ) ; }", "answer": "org . junit . Assert . assertNotNull ( details )"}
{"focal": "generateNonRevocationEvidenceUpdate ( java . net . URI , int ) { this . log . info ( \"RevocationService<sp>-<sp>generatenonrevocationevidenceupdate\" ) ; this . validateRevocationParametersUid ( revParUid ) ; this . initializeHelper ( ) ; eu . abc4trust . abce . external . revocation . RevocationAbcEngine engine = eu . abc4trust . services . helpers . RevocationHelper . getInstance ( ) . engine ; eu . abc4trust . xml . NonRevocationEvidenceUpdate revInfo = engine . generateNonRevocationEvidenceUpdate ( revParUid , epoch ) ; return this . of . createNonRevocationEvidenceUpdate ( revInfo ) ; }", "testMethod": "generateNonRevocationEvidenceUpdate ( ) { eu . abc4trust . services . revocation . RevocationServiceFactory revocationServiceFactory = new eu . abc4trust . services . revocation . RevocationServiceFactory ( ) ; java . lang . String revocationAuthorityParametersUid = \"urn:revocationauthorityparameters:test:foobar\" ; int epoch = 1 ; eu . abc4trust . xml . NonRevocationEvidenceUpdate nre = revocationServiceFactory . generateNonRevocationEvidenceUpdate ( revocationAuthorityParametersUid , epoch ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( nre )", "total": "generateNonRevocationEvidenceUpdate ( ) { eu . abc4trust . services . revocation . RevocationServiceFactory revocationServiceFactory = new eu . abc4trust . services . revocation . RevocationServiceFactory ( ) ; java . lang . String revocationAuthorityParametersUid = \"urn:revocationauthorityparameters:test:foobar\" ; int epoch = 1 ; eu . abc4trust . xml . NonRevocationEvidenceUpdate nre = revocationServiceFactory . generateNonRevocationEvidenceUpdate ( revocationAuthorityParametersUid , epoch ) ; \"<AssertPlaceHolder>\" ; } generateNonRevocationEvidenceUpdate ( java . net . URI , int ) { this . log . info ( \"RevocationService<sp>-<sp>generatenonrevocationevidenceupdate\" ) ; this . validateRevocationParametersUid ( revParUid ) ; this . initializeHelper ( ) ; eu . abc4trust . abce . external . revocation . RevocationAbcEngine engine = eu . abc4trust . services . helpers . RevocationHelper . getInstance ( ) . engine ; eu . abc4trust . xml . NonRevocationEvidenceUpdate revInfo = engine . generateNonRevocationEvidenceUpdate ( revParUid , epoch ) ; return this . of . createNonRevocationEvidenceUpdate ( revInfo ) ; }", "answer": "org . junit . Assert . assertNotNull ( nre )"}
{"focal": "execute ( ) { org . apache . maven . plugins . javadoc . AbstractJavadocMojo mojo = new org . apache . maven . plugins . javadoc . JavadocReport ( ) ; java . util . Locale locale = java . util . Locale . getDefault ( ) ; try { java . lang . reflect . Field f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 3 ) ; f . setAccessible ( true ) ; f . set ( mojo , \"========>\" 4 ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 5 ) ; f . setAccessible ( true ) ; f . set ( mojo , encoding ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 0 ) ; f . setAccessible ( true ) ; f . set ( mojo , \"applyJavadocSecurityFix\" 0 ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"========>\" 0 ) ; f . setAccessible ( true ) ; f . set ( mojo , javadocOptionsDir ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 7 ) ; f . setAccessible ( true ) ; org . apache . maven . plugins . javadoc . options . DocletArtifact docletArtifact = new org . apache . maven . plugins . javadoc . options . DocletArtifact ( ) ; for ( java . lang . Object o : this . mavenProject . getPluginArtifacts ( ) ) { if ( o instanceof org . apache . maven . artifact . Artifact ) { org . apache . maven . artifact . Artifact artifact = ( ( org . apache . maven . artifact . Artifact ) ( o ) ) ; if ( \"cxf-java2wadl-plugin\" . equals ( artifact . getArtifactId ( ) ) ) { docletArtifact . setGroupId ( artifact . getGroupId ( ) ) ; docletArtifact . setArtifactId ( artifact . getArtifactId ( ) ) ; docletArtifact . setVersion ( artifact . getVersion ( ) ) ; } } } f . set ( mojo , docletArtifact ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"========>\" 3 ) ; f . setAccessible ( true ) ; f . set ( mojo , this . mavenProjectBuilder ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"resourceResolver\" ) ; f . setAccessible ( true ) ; f . set ( mojo , this . resourceResolver ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"session\" ) ; System . out . println ( ( \"========>\" + ( session . getProjects ( ) ) ) ) ; f . setAccessible ( true ) ; f . set ( mojo , this . session ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"dependencyResolver\" ) ; f . setAccessible ( true ) ; f . set ( mojo , this . dependencyResolver ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"artifactResolver\" ) ; f . setAccessible ( true ) ; f . set ( mojo , this . artifactResolver ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"========>\" 2 ) ; f . setAccessible ( true ) ; f . set ( mojo , this . archiverManager ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"toolchainManager\" ) ; f . setAccessible ( true ) ; f . set ( mojo , this . toolchainManager ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 4 ) ; f . setAccessible ( true ) ; f . set ( mojo , this . localRepository ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" ) ; f . setAccessible ( true ) ; f . set ( mojo , false ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 9 ) ; f . setAccessible ( true ) ; f . set ( mojo , new java . lang . String [ ] { ( ( \"========>\" 1 + ( this . dumpFileOutputDirectory . getAbsolutePath ( ) ) ) + ( java . io . File . separator ) ) + \"dumpFile.properties\" } ) ; f = org . apache . maven . plugins .", "testMethod": "testCodeGenWithImportedSchemaWithParentRefs ( ) { org . apache . cxf . tools . wadlto . jaxrs . JAXRSContainer container = new org . apache . cxf . tools . wadlto . jaxrs . JAXRSContainer ( null ) ; org . apache . cxf . tools . common . ToolContext context = new org . apache . cxf . tools . common . ToolContext ( ) ; context . put ( WadlToolConstants . CFG_OUTPUTDIR , output . getCanonicalPath ( ) ) ; context . put ( WadlToolConstants . CFG_WADLURL , getLocation ( \"/wadl/sub/bookstoreImport.xml\" ) ) ; context . put ( WadlToolConstants . CFG_COMPILE , \"true\" ) ; container . setContext ( context ) ; container . execute ( ) ; \"<AssertPlaceHolder>\" ; verifyFiles ( \"java\" , false , false , \"superbooks\" , \"org.apache.cxf.jaxrs.model.wadl\" , 9 ) ; verifyFiles ( \"class\" , false , false , \"superbooks\" , \"org.apache.cxf.jaxrs.model.wadl\" , 9 ) ; }", "assertLine": "org . junit . Assert . assertNotNull ( output . list ( ) )", "total": "testCodeGenWithImportedSchemaWithParentRefs ( ) { org . apache . cxf . tools . wadlto . jaxrs . JAXRSContainer container = new org . apache . cxf . tools . wadlto . jaxrs . JAXRSContainer ( null ) ; org . apache . cxf . tools . common . ToolContext context = new org . apache . cxf . tools . common . ToolContext ( ) ; context . put ( WadlToolConstants . CFG_OUTPUTDIR , output . getCanonicalPath ( ) ) ; context . put ( WadlToolConstants . CFG_WADLURL , getLocation ( \"/wadl/sub/bookstoreImport.xml\" ) ) ; context . put ( WadlToolConstants . CFG_COMPILE , \"true\" ) ; container . setContext ( context ) ; container . execute ( ) ; \"<AssertPlaceHolder>\" ; verifyFiles ( \"java\" , false , false , \"superbooks\" , \"org.apache.cxf.jaxrs.model.wadl\" , 9 ) ; verifyFiles ( \"class\" , false , false , \"superbooks\" , \"org.apache.cxf.jaxrs.model.wadl\" , 9 ) ; } execute ( ) { org . apache . maven . plugins . javadoc . AbstractJavadocMojo mojo = new org . apache . maven . plugins . javadoc . JavadocReport ( ) ; java . util . Locale locale = java . util . Locale . getDefault ( ) ; try { java . lang . reflect . Field f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 3 ) ; f . setAccessible ( true ) ; f . set ( mojo , \"========>\" 4 ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 5 ) ; f . setAccessible ( true ) ; f . set ( mojo , encoding ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 0 ) ; f . setAccessible ( true ) ; f . set ( mojo , \"applyJavadocSecurityFix\" 0 ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"========>\" 0 ) ; f . setAccessible ( true ) ; f . set ( mojo , javadocOptionsDir ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 7 ) ; f . setAccessible ( true ) ; org . apache . maven . plugins . javadoc . options . DocletArtifact docletArtifact = new org . apache . maven . plugins . javadoc . options . DocletArtifact ( ) ; for ( java . lang . Object o : this . mavenProject . getPluginArtifacts ( ) ) { if ( o instanceof org . apache . maven . artifact . Artifact ) { org . apache . maven . artifact . Artifact artifact = ( ( org . apache . maven . artifact . Artifact ) ( o ) ) ; if ( \"cxf-java2wadl-plugin\" . equals ( artifact . getArtifactId ( ) ) ) { docletArtifact . setGroupId ( artifact . getGroupId ( ) ) ; docletArtifact . setArtifactId ( artifact . getArtifactId ( ) ) ; docletArtifact . setVersion ( artifact . getVersion ( ) ) ; } } } f . set ( mojo , docletArtifact ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"========>\" 3 ) ; f . setAccessible ( true ) ; f . set ( mojo , this . mavenProjectBuilder ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"resourceResolver\" ) ; f . setAccessible ( true ) ; f . set ( mojo , this . resourceResolver ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"session\" ) ; System . out . println ( ( \"========>\" + ( session . getProjects ( ) ) ) ) ; f . setAccessible ( true ) ; f . set ( mojo , this . session ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"dependencyResolver\" ) ; f . setAccessible ( true ) ; f . set ( mojo , this . dependencyResolver ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"artifactResolver\" ) ; f . setAccessible ( true ) ; f . set ( mojo , this . artifactResolver ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"========>\" 2 ) ; f . setAccessible ( true ) ; f . set ( mojo , this . archiverManager ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"toolchainManager\" ) ; f . setAccessible ( true ) ; f . set ( mojo , this . toolchainManager ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 4 ) ; f . setAccessible ( true ) ; f . set ( mojo , this . localRepository ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" ) ; f . setAccessible ( true ) ; f . set ( mojo , false ) ; f = org . apache . maven . plugins . javadoc . AbstractJavadocMojo . class . getDeclaredField ( \"applyJavadocSecurityFix\" 9 ) ; f . setAccessible ( true ) ; f . set ( mojo , new java . lang . String [ ] { ( ( \"========>\" 1 + ( this . dumpFileOutputDirectory . getAbsolutePath ( ) ) ) + ( java . io . File . separator ) ) + \"dumpFile.properties\" } ) ; f = org . apache . maven . plugins .", "answer": "org . junit . Assert . assertNotNull ( output . list ( ) )"}
{"focal": "getIterationParameterTableModel ( ) { return tableModel ; }", "testMethod": "by_default_a_WorkflowModel_has_a_TableModel ( ) { com . bigvisible . kanbansimulator . app . WorkflowModel workflowModel = new com . bigvisible . kanbansimulator . app . WorkflowModel ( ) ; javax . swing . table . TableModel tableModel = workflowModel . getIterationParameterTableModel ( ) ; \"<AssertPlaceHolder>\" ; }", "assertLine": "org . junit . Assert . assertNotNull ( tableModel )", "total": "by_default_a_WorkflowModel_has_a_TableModel ( ) { com . bigvisible . kanbansimulator . app . WorkflowModel workflowModel = new com . bigvisible . kanbansimulator . app . WorkflowModel ( ) ; javax . swing . table . TableModel tableModel = workflowModel . getIterationParameterTableModel ( ) ; \"<AssertPlaceHolder>\" ; } getIterationParameterTableModel ( ) { return tableModel ; }", "answer": "org . junit . Assert . assertNotNull ( tableModel )"}
